
CPP_IKS01A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e48c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800e660  0800e660  0001e660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eda4  0800eda4  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eda4  0800eda4  0001eda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edac  0800edac  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edac  0800edac  0001edac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edb0  0800edb0  0001edb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800edb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002cc  0800f080  000202cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000036c  0800f120  0002036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009fc  2000040c  0800f1c0  0002040c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000e08  0800f1c0  00020e08  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000383ce  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004541  00000000  00000000  0005880a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029c8  00000000  00000000  0005cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002818  00000000  00000000  0005f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a73e  00000000  00000000  00061f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027001  00000000  00000000  0008c66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101472  00000000  00000000  000b366f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b4ae1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c6ac  00000000  00000000  001b4b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000040c 	.word	0x2000040c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e644 	.word	0x0800e644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000410 	.word	0x20000410
 800020c:	0800e644 	.word	0x0800e644

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f006 fba5 	bl	80076e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f835 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 f917 	bl	80011cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000f9e:	f000 f899 	bl	80010d4 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fa2:	f000 f8e5 	bl	8001170 <MX_USB_OTG_FS_PCD_Init>
  MX_MEMS_Init();
 8000fa6:	f00a fbc5 	bl	800b734 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  acc_offset.x = 0.0; acc_offset.y = 0.0; acc_offset.z = 0.0;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <main+0x74>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <main+0x74>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <main+0x74>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  Acceleration_t acc = Accelometer_GetData(true);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 f99c 	bl	8001300 <Accelometer_GetData>
 8000fc8:	eef0 6a40 	vmov.f32	s13, s0
 8000fcc:	eeb0 7a60 	vmov.f32	s14, s1
 8000fd0:	eef0 7a41 	vmov.f32	s15, s2
 8000fd4:	edc7 6a01 	vstr	s13, [r7, #4]
 8000fd8:	ed87 7a02 	vstr	s14, [r7, #8]
 8000fdc:	edc7 7a03 	vstr	s15, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	acc = Accelometer_GetData(false);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f98d 	bl	8001300 <Accelometer_GetData>
 8000fe6:	eef0 6a40 	vmov.f32	s13, s0
 8000fea:	eeb0 7a60 	vmov.f32	s14, s1
 8000fee:	eef0 7a41 	vmov.f32	s15, s2
 8000ff2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ff6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000ffa:	edc7 7a03 	vstr	s15, [r7, #12]
 8000ffe:	e7ef      	b.n	8000fe0 <main+0x54>
 8001000:	20000b18 	.word	0x20000b18

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00a fbfe 	bl	800b814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001028:	f008 fae6 	bl	80095f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <SystemClock_Config+0xc8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <SystemClock_Config+0xc8>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <SystemClock_Config+0xc8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SystemClock_Config+0xcc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <SystemClock_Config+0xcc>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemClock_Config+0xcc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001064:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001078:	2348      	movs	r3, #72	; 0x48
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001080:	2303      	movs	r3, #3
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f008 fac5 	bl	8009618 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001094:	f000 fc02 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f008 fd53 	bl	8009b60 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010c0:	f000 fbec 	bl	800189c <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3750      	adds	r7, #80	; 0x50
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ETH_Init+0x84>)
 80010da:	4a20      	ldr	r2, [pc, #128]	; (800115c <MX_ETH_Init+0x88>)
 80010dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_ETH_Init+0x8c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_ETH_Init+0x8c>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_ETH_Init+0x8c>)
 80010ec:	22e1      	movs	r2, #225	; 0xe1
 80010ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_ETH_Init+0x8c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ETH_Init+0x8c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_ETH_Init+0x8c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ETH_Init+0x84>)
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <MX_ETH_Init+0x8c>)
 8001106:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_ETH_Init+0x84>)
 800110a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800110e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ETH_Init+0x84>)
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <MX_ETH_Init+0x90>)
 8001114:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_ETH_Init+0x84>)
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <MX_ETH_Init+0x94>)
 800111a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ETH_Init+0x84>)
 800111e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001122:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_ETH_Init+0x84>)
 8001126:	f006 fc6f 	bl	8007a08 <HAL_ETH_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001130:	f000 fbb4 	bl	800189c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001134:	2238      	movs	r2, #56	; 0x38
 8001136:	2100      	movs	r1, #0
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_ETH_Init+0x98>)
 800113a:	f00a fb6b 	bl	800b814 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_ETH_Init+0x98>)
 8001140:	2221      	movs	r2, #33	; 0x21
 8001142:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_ETH_Init+0x98>)
 8001146:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800114a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_ETH_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000460 	.word	0x20000460
 800115c:	40028000 	.word	0x40028000
 8001160:	20000b24 	.word	0x20000b24
 8001164:	2000036c 	.word	0x2000036c
 8001168:	200002cc 	.word	0x200002cc
 800116c:	20000428 	.word	0x20000428

08001170 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001176:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800117a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117e:	2206      	movs	r2, #6
 8001180:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001184:	2202      	movs	r2, #2
 8001186:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001190:	2202      	movs	r2, #2
 8001192:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001196:	2201      	movs	r2, #1
 8001198:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b4:	f008 f8d7 	bl	8009366 <HAL_PCD_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011be:	f000 fb6d 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000510 	.word	0x20000510

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_GPIO_Init+0x128>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <MX_GPIO_Init+0x128>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <MX_GPIO_Init+0x128>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <MX_GPIO_Init+0x128>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <MX_GPIO_Init+0x128>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_GPIO_Init+0x128>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_GPIO_Init+0x128>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001278:	481f      	ldr	r0, [pc, #124]	; (80012f8 <MX_GPIO_Init+0x12c>)
 800127a:	f007 fa0d 	bl	8008698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	481e      	ldr	r0, [pc, #120]	; (80012fc <MX_GPIO_Init+0x130>)
 8001284:	f007 fa08 	bl	8008698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD3_red_Pin|LD2_blue_Pin;
 8001288:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_GPIO_Init+0x12c>)
 80012a2:	f006 ff29 	bl	80080f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_GPIO_Init+0x130>)
 80012be:	f006 ff1b 	bl	80080f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <MX_GPIO_Init+0x130>)
 80012d6:	f006 ff0f 	bl	80080f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2028      	movs	r0, #40	; 0x28
 80012e0:	f006 fb5b 	bl	800799a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e4:	2028      	movs	r0, #40	; 0x28
 80012e6:	f006 fb74 	bl	80079d2 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40021800 	.word	0x40021800

08001300 <Accelometer_GetData>:
/**
  * @brief  Performs LIS2DW12 accelerometer self-test
  * @retval BSP status
  */
static Acceleration_t Accelometer_GetData(_Bool init)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b096      	sub	sp, #88	; 0x58
 8001304:	af02      	add	r7, sp, #8
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]
  Acceleration_t data_nost;
  IKS01A3_MOTION_SENSOR_Axes_t data;
  uint8_t prev_reg_values[ST_REG_COUNT];
  int32_t ret;

  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nStarting LIS2DW12 get accelerometer Data:\r\n");
 800130a:	4ab5      	ldr	r2, [pc, #724]	; (80015e0 <Accelometer_GetData+0x2e0>)
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	48b4      	ldr	r0, [pc, #720]	; (80015e4 <Accelometer_GetData+0x2e4>)
 8001312:	f00a ff09 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 8001316:	49b3      	ldr	r1, [pc, #716]	; (80015e4 <Accelometer_GetData+0x2e4>)
 8001318:	48b3      	ldr	r0, [pc, #716]	; (80015e8 <Accelometer_GetData+0x2e8>)
 800131a:	f00a feed 	bl	800c0f8 <iprintf>

  HAL_Delay(INDICATION_DELAY);
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f006 fa3b 	bl	800779c <HAL_Delay>
  BSP_LED_On(LED2);
 8001326:	2000      	movs	r0, #0
 8001328:	f005 ffce 	bl	80072c8 <BSP_LED_On>

  /* Store current settings of the sensor */
  for (i = 0; i < ST_REG_COUNT; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001330:	e00f      	b.n	8001352 <Accelometer_GetData+0x52>
  {
	  ret = IKS01A3_MOTION_SENSOR_Read_Register(IKS01A3_LIS2DW12_0, reg_addr[i], &prev_reg_values[i]);
 8001332:	4aae      	ldr	r2, [pc, #696]	; (80015ec <Accelometer_GetData+0x2ec>)
 8001334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001336:	4413      	add	r3, r2
 8001338:	7819      	ldrb	r1, [r3, #0]
 800133a:	f107 021c 	add.w	r2, r7, #28
 800133e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001340:	4413      	add	r3, r2
 8001342:	461a      	mov	r2, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f005 fefb 	bl	8007140 <IKS01A3_MOTION_SENSOR_Read_Register>
 800134a:	64b8      	str	r0, [r7, #72]	; 0x48
  for (i = 0; i < ST_REG_COUNT; i++)
 800134c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134e:	3301      	adds	r3, #1
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001354:	2b05      	cmp	r3, #5
 8001356:	d9ec      	bls.n	8001332 <Accelometer_GetData+0x32>
  }

  /* Wait defined time for stable output */
  HAL_Delay(X_POWER_UP_DELAY);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f006 fa1f 	bl	800779c <HAL_Delay>

  /* Read first data and discard it */
  if (LIS2DW12_X_Get_Data(&data) != BSP_ERROR_NONE)
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fa76 	bl	8001854 <LIS2DW12_X_Get_Data>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <Accelometer_GetData+0x72>
  {
    Error_Handler();
 800136e:	f000 fa95 	bl	800189c <Error_Handler>
  }

  data_nost.x = 0.0;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  data_nost.y = 0.0;
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  data_nost.z = 0.0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Read valid data multiple times and average it */
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001388:	e02d      	b.n	80013e6 <Accelometer_GetData+0xe6>
  {
    if (LIS2DW12_X_Get_Data(&data) != BSP_ERROR_NONE)
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fa60 	bl	8001854 <LIS2DW12_X_Get_Data>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <Accelometer_GetData+0x9e>
    {
      Error_Handler();
 800139a:	f000 fa7f 	bl	800189c <Error_Handler>
    }
    data_nost.x += (float_t)data.x;
 800139e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    data_nost.y += (float_t)data.y;
 80013b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    data_nost.z += (float_t)data.z;
 80013ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 80013e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e2:	3301      	adds	r3, #1
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d9ce      	bls.n	800138a <Accelometer_GetData+0x8a>
  }
  if(init) //set offset
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8102 	beq.w	80015f8 <Accelometer_GetData+0x2f8>
  {
	  acc_offset.x = 9.81*(data_nost.x/N_SAMPLES)/1000.0; //[m/s^2]
 80013f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013f8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001400:	ee16 0a90 	vmov	r0, s13
 8001404:	f7ff f8c0 	bl	8000588 <__aeabi_f2d>
 8001408:	a373      	add	r3, pc, #460	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f913 	bl	8000638 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <Accelometer_GetData+0x2f0>)
 8001420:	f7ff fa34 	bl	800088c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbdc 	bl	8000be8 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	4a70      	ldr	r2, [pc, #448]	; (80015f4 <Accelometer_GetData+0x2f4>)
 8001434:	6013      	str	r3, [r2, #0]
	  acc_offset.y = 9.81*(data_nost.y/N_SAMPLES)/1000.0;
 8001436:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800143a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800143e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001442:	ee16 0a90 	vmov	r0, s13
 8001446:	f7ff f89f 	bl	8000588 <__aeabi_f2d>
 800144a:	a363      	add	r3, pc, #396	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8f2 	bl	8000638 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <Accelometer_GetData+0x2f0>)
 8001462:	f7ff fa13 	bl	800088c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fbbb 	bl	8000be8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <Accelometer_GetData+0x2f4>)
 8001476:	6053      	str	r3, [r2, #4]
	  acc_offset.z = 9.81*(data_nost.z/N_SAMPLES)/1000.0;
 8001478:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800147c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001480:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001484:	ee16 0a90 	vmov	r0, s13
 8001488:	f7ff f87e 	bl	8000588 <__aeabi_f2d>
 800148c:	a352      	add	r3, pc, #328	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8d1 	bl	8000638 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <Accelometer_GetData+0x2f0>)
 80014a4:	f7ff f9f2 	bl	800088c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb9a 	bl	8000be8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <Accelometer_GetData+0x2f4>)
 80014b8:	6093      	str	r3, [r2, #8]
	  data_nost.x = 9.81*(data_nost.x/N_SAMPLES)/1000.0 - acc_offset.x; //[m/s^2]
 80014ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80014c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c6:	ee16 0a90 	vmov	r0, s13
 80014ca:	f7ff f85d 	bl	8000588 <__aeabi_f2d>
 80014ce:	a342      	add	r3, pc, #264	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f8b0 	bl	8000638 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <Accelometer_GetData+0x2f0>)
 80014e6:	f7ff f9d1 	bl	800088c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <Accelometer_GetData+0x2f4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f846 	bl	8000588 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fee0 	bl	80002c8 <__aeabi_dsub>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb6a 	bl	8000be8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
	  data_nost.y = 9.81*(data_nost.y/N_SAMPLES)/1000.0 - acc_offset.y;
 8001518:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800151c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001520:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001524:	ee16 0a90 	vmov	r0, s13
 8001528:	f7ff f82e 	bl	8000588 <__aeabi_f2d>
 800152c:	a32a      	add	r3, pc, #168	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f881 	bl	8000638 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <Accelometer_GetData+0x2f0>)
 8001544:	f7ff f9a2 	bl	800088c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <Accelometer_GetData+0x2f4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f817 	bl	8000588 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe feb1 	bl	80002c8 <__aeabi_dsub>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb3b 	bl	8000be8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
	  data_nost.z = 9.81*(data_nost.z/N_SAMPLES)/1000.0 - acc_offset.z;
 8001576:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800157a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800157e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001582:	ee16 0a90 	vmov	r0, s13
 8001586:	f7fe ffff 	bl	8000588 <__aeabi_f2d>
 800158a:	a313      	add	r3, pc, #76	; (adr r3, 80015d8 <Accelometer_GetData+0x2d8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f852 	bl	8000638 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <Accelometer_GetData+0x2f0>)
 80015a2:	f7ff f973 	bl	800088c <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <Accelometer_GetData+0x2f4>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe82 	bl	80002c8 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fb0c 	bl	8000be8 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015d4:	e09d      	b.n	8001712 <Accelometer_GetData+0x412>
 80015d6:	bf00      	nop
 80015d8:	51eb851f 	.word	0x51eb851f
 80015dc:	40239eb8 	.word	0x40239eb8
 80015e0:	0800e660 	.word	0x0800e660
 80015e4:	20000a18 	.word	0x20000a18
 80015e8:	0800e690 	.word	0x0800e690
 80015ec:	20000000 	.word	0x20000000
 80015f0:	408f4000 	.word	0x408f4000
 80015f4:	20000b18 	.word	0x20000b18
  }
  else
  {
	  data_nost.x = 9.81*(data_nost.x/N_SAMPLES)/1000.0 - acc_offset.x; //[m/s^2]
 80015f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015fc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001600:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001604:	ee16 0a90 	vmov	r0, s13
 8001608:	f7fe ffbe 	bl	8000588 <__aeabi_f2d>
 800160c:	a384      	add	r3, pc, #528	; (adr r3, 8001820 <Accelometer_GetData+0x520>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f811 	bl	8000638 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b81      	ldr	r3, [pc, #516]	; (8001828 <Accelometer_GetData+0x528>)
 8001624:	f7ff f932 	bl	800088c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <Accelometer_GetData+0x52c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ffa7 	bl	8000588 <__aeabi_f2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe fe41 	bl	80002c8 <__aeabi_dsub>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff facb 	bl	8000be8 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
	  data_nost.y = 9.81*(data_nost.y/N_SAMPLES)/1000.0 - acc_offset.y;
 8001656:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800165a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800165e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001662:	ee16 0a90 	vmov	r0, s13
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	a36d      	add	r3, pc, #436	; (adr r3, 8001820 <Accelometer_GetData+0x520>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffe2 	bl	8000638 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b69      	ldr	r3, [pc, #420]	; (8001828 <Accelometer_GetData+0x528>)
 8001682:	f7ff f903 	bl	800088c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4614      	mov	r4, r2
 800168c:	461d      	mov	r5, r3
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <Accelometer_GetData+0x52c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fe12 	bl	80002c8 <__aeabi_dsub>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa9c 	bl	8000be8 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
	  data_nost.z = 9.81*(data_nost.z/N_SAMPLES)/1000.0 - acc_offset.z;
 80016b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016b8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80016bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016c0:	ee16 0a90 	vmov	r0, s13
 80016c4:	f7fe ff60 	bl	8000588 <__aeabi_f2d>
 80016c8:	a355      	add	r3, pc, #340	; (adr r3, 8001820 <Accelometer_GetData+0x520>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe ffb3 	bl	8000638 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b52      	ldr	r3, [pc, #328]	; (8001828 <Accelometer_GetData+0x528>)
 80016e0:	f7ff f8d4 	bl	800088c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <Accelometer_GetData+0x52c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff49 	bl	8000588 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe fde3 	bl	80002c8 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa6d 	bl	8000be8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Restore previous settings of the sensor */
  for (i = 0; i < ST_REG_COUNT; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001716:	e010      	b.n	800173a <Accelometer_GetData+0x43a>
  {
    ret = IKS01A3_MOTION_SENSOR_Write_Register(IKS01A3_LIS2DW12_0, reg_addr[i], prev_reg_values[i]);
 8001718:	4a45      	ldr	r2, [pc, #276]	; (8001830 <Accelometer_GetData+0x530>)
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	4413      	add	r3, r2
 800171e:	7819      	ldrb	r1, [r3, #0]
 8001720:	f107 021c 	add.w	r2, r7, #28
 8001724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	2001      	movs	r0, #1
 800172e:	f005 fd5f 	bl	80071f0 <IKS01A3_MOTION_SENSOR_Write_Register>
 8001732:	64b8      	str	r0, [r7, #72]	; 0x48
  for (i = 0; i < ST_REG_COUNT; i++)
 8001734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001736:	3301      	adds	r3, #1
 8001738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173c:	2b05      	cmp	r3, #5
 800173e:	d9eb      	bls.n	8001718 <Accelometer_GetData+0x418>
  }

  /* Print measured data */
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nMeasured acceleration [m/s^2]:\r\n");
 8001740:	4a3c      	ldr	r2, [pc, #240]	; (8001834 <Accelometer_GetData+0x534>)
 8001742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001746:	483c      	ldr	r0, [pc, #240]	; (8001838 <Accelometer_GetData+0x538>)
 8001748:	f00a fcee 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 800174c:	493a      	ldr	r1, [pc, #232]	; (8001838 <Accelometer_GetData+0x538>)
 800174e:	483b      	ldr	r0, [pc, #236]	; (800183c <Accelometer_GetData+0x53c>)
 8001750:	f00a fcd2 	bl	800c0f8 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n     AXIS     | Data \r\n");
 8001754:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <Accelometer_GetData+0x540>)
 8001756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175a:	4837      	ldr	r0, [pc, #220]	; (8001838 <Accelometer_GetData+0x538>)
 800175c:	f00a fce4 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <Accelometer_GetData+0x538>)
 8001762:	4836      	ldr	r0, [pc, #216]	; (800183c <Accelometer_GetData+0x53c>)
 8001764:	f00a fcc8 	bl	800c0f8 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "--------------|--------------\r\n");
 8001768:	4a36      	ldr	r2, [pc, #216]	; (8001844 <Accelometer_GetData+0x544>)
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	4832      	ldr	r0, [pc, #200]	; (8001838 <Accelometer_GetData+0x538>)
 8001770:	f00a fcda 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 8001774:	4930      	ldr	r1, [pc, #192]	; (8001838 <Accelometer_GetData+0x538>)
 8001776:	4831      	ldr	r0, [pc, #196]	; (800183c <Accelometer_GetData+0x53c>)
 8001778:	f00a fcbe 	bl	800c0f8 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       X      | %4.2f\r\n", data_nost.x);
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff02 	bl	8000588 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9cd 2300 	strd	r2, r3, [sp]
 800178c:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <Accelometer_GetData+0x548>)
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <Accelometer_GetData+0x538>)
 8001794:	f00a fcc8 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 8001798:	4927      	ldr	r1, [pc, #156]	; (8001838 <Accelometer_GetData+0x538>)
 800179a:	4828      	ldr	r0, [pc, #160]	; (800183c <Accelometer_GetData+0x53c>)
 800179c:	f00a fcac 	bl	800c0f8 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       Y      | %4.2f\r\n", data_nost.y);
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fef0 	bl	8000588 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9cd 2300 	strd	r2, r3, [sp]
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <Accelometer_GetData+0x54c>)
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <Accelometer_GetData+0x538>)
 80017b8:	f00a fcb6 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 80017bc:	491e      	ldr	r1, [pc, #120]	; (8001838 <Accelometer_GetData+0x538>)
 80017be:	481f      	ldr	r0, [pc, #124]	; (800183c <Accelometer_GetData+0x53c>)
 80017c0:	f00a fc9a 	bl	800c0f8 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       Z      | %4.2f\r\n", data_nost.z);
 80017c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fede 	bl	8000588 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2300 	strd	r2, r3, [sp]
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <Accelometer_GetData+0x550>)
 80017d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <Accelometer_GetData+0x538>)
 80017dc:	f00a fca4 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 80017e0:	4915      	ldr	r1, [pc, #84]	; (8001838 <Accelometer_GetData+0x538>)
 80017e2:	4816      	ldr	r0, [pc, #88]	; (800183c <Accelometer_GetData+0x53c>)
 80017e4:	f00a fc88 	bl	800c0f8 <iprintf>

  BSP_LED_Off(LED2);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f005 fd83 	bl	80072f4 <BSP_LED_Off>

  return data_nost;
 80017ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001802:	ee06 1a90 	vmov	s13, r1
 8001806:	ee07 2a10 	vmov	s14, r2
 800180a:	ee07 3a90 	vmov	s15, r3
}
 800180e:	eeb0 0a66 	vmov.f32	s0, s13
 8001812:	eef0 0a47 	vmov.f32	s1, s14
 8001816:	eeb0 1a67 	vmov.f32	s2, s15
 800181a:	3750      	adds	r7, #80	; 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bdb0      	pop	{r4, r5, r7, pc}
 8001820:	51eb851f 	.word	0x51eb851f
 8001824:	40239eb8 	.word	0x40239eb8
 8001828:	408f4000 	.word	0x408f4000
 800182c:	20000b18 	.word	0x20000b18
 8001830:	20000000 	.word	0x20000000
 8001834:	0800e694 	.word	0x0800e694
 8001838:	20000a18 	.word	0x20000a18
 800183c:	0800e690 	.word	0x0800e690
 8001840:	0800e6b8 	.word	0x0800e6b8
 8001844:	0800e6d4 	.word	0x0800e6d4
 8001848:	0800e6f4 	.word	0x0800e6f4
 800184c:	0800e70c 	.word	0x0800e70c
 8001850:	0800e724 	.word	0x0800e724

08001854 <LIS2DW12_X_Get_Data>:
  * @brief  Wait for data ready and get data
  * @param  data the sensor data
  * @retval None
  */
static int32_t LIS2DW12_X_Get_Data(IKS01A3_MOTION_SENSOR_Axes_t *data)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Wait for data ready */
  do
  {
    if ((ret = IKS01A3_MOTION_SENSOR_Get_DRDY_Status(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &status)) != BSP_ERROR_NONE)
 800185c:	f107 030b 	add.w	r3, r7, #11
 8001860:	461a      	mov	r2, r3
 8001862:	2102      	movs	r1, #2
 8001864:	2001      	movs	r0, #1
 8001866:	f005 fbe5 	bl	8007034 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status>
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <LIS2DW12_X_Get_Data+0x22>
    {
      return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	e00e      	b.n	8001894 <LIS2DW12_X_Get_Data+0x40>
    }
  }
  while (status == 0U);
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ef      	beq.n	800185c <LIS2DW12_X_Get_Data+0x8>

  /* Read accelero data */
  if ((ret = IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, data)) != BSP_ERROR_NONE)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	2102      	movs	r1, #2
 8001880:	2001      	movs	r0, #1
 8001882:	f005 f98f 	bl	8006ba4 <IKS01A3_MOTION_SENSOR_GetAxes>
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <LIS2DW12_X_Get_Data+0x3e>
  {
    return ret;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	e000      	b.n	8001894 <LIS2DW12_X_Get_Data+0x40>
  }

  return ret;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x44>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_MspInit+0x44>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_MspInit+0x44>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x44>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x44>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	; 0x38
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_ETH_MspInit+0x158>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 8096 	bne.w	8001a40 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001914:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001932:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800194a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 80019aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_ETH_MspInit+0x15c>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019bc:	2332      	movs	r3, #50	; 0x32
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019cc:	230b      	movs	r3, #11
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	481e      	ldr	r0, [pc, #120]	; (8001a50 <HAL_ETH_MspInit+0x160>)
 80019d8:	f006 fb8e 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019dc:	2386      	movs	r3, #134	; 0x86
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ec:	230b      	movs	r3, #11
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	4817      	ldr	r0, [pc, #92]	; (8001a54 <HAL_ETH_MspInit+0x164>)
 80019f8:	f006 fb7e 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a0e:	230b      	movs	r3, #11
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <HAL_ETH_MspInit+0x168>)
 8001a1a:	f006 fb6d 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a30:	230b      	movs	r3, #11
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4808      	ldr	r0, [pc, #32]	; (8001a5c <HAL_ETH_MspInit+0x16c>)
 8001a3c:	f006 fb5c 	bl	80080f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40028000 	.word	0x40028000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40021800 	.word	0x40021800

08001a60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ac      	sub	sp, #176	; 0xb0
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2284      	movs	r2, #132	; 0x84
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f009 fec7 	bl	800b814 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d159      	bne.n	8001b44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f008 fa83 	bl	8009fac <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001aac:	f7ff fef6 	bl	800189c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ac8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <HAL_PCD_MspInit+0xf0>)
 8001af0:	f006 fb02 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <HAL_PCD_MspInit+0xf0>)
 8001b10:	f006 faf2 	bl	80080f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6453      	str	r3, [r2, #68]	; 0x44
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	37b0      	adds	r7, #176	; 0xb0
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f005 fddc 	bl	800775c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <EXTI15_10_IRQHandler+0x10>)
 8001bae:	f006 fa7f 	bl	80080b0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000e8 	.word	0x200000e8

08001bbc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <BSP_I2C1_Init+0x70>)
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <BSP_I2C1_Init+0x74>)
 8001bca:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <BSP_I2C1_Init+0x78>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4918      	ldr	r1, [pc, #96]	; (8001c34 <BSP_I2C1_Init+0x78>)
 8001bd4:	600a      	str	r2, [r1, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d122      	bne.n	8001c20 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001bda:	4814      	ldr	r0, [pc, #80]	; (8001c2c <BSP_I2C1_Init+0x70>)
 8001bdc:	f007 f878 	bl	8008cd0 <HAL_I2C_GetState>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11c      	bne.n	8001c20 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <BSP_I2C1_Init+0x70>)
 8001be8:	f000 f8fe 	bl	8001de8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <BSP_I2C1_Init+0x70>)
 8001bf4:	f000 f8b4 	bl	8001d60 <MX_I2C1_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001bfe:	f06f 0307 	mvn.w	r3, #7
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	e00c      	b.n	8001c20 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <BSP_I2C1_Init+0x70>)
 8001c0a:	f007 fb15 	bl	8009238 <HAL_I2CEx_ConfigAnalogFilter>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001c14:	f06f 0307 	mvn.w	r3, #7
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e001      	b.n	8001c20 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000b2c 	.word	0x20000b2c
 8001c30:	40005400 	.word	0x40005400
 8001c34:	20000b80 	.word	0x20000b80

08001c38 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <BSP_I2C1_DeInit+0x48>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d014      	beq.n	8001c74 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <BSP_I2C1_DeInit+0x48>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <BSP_I2C1_DeInit+0x48>)
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <BSP_I2C1_DeInit+0x48>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <BSP_I2C1_DeInit+0x4c>)
 8001c5e:	f000 f925 	bl	8001eac <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <BSP_I2C1_DeInit+0x4c>)
 8001c64:	f006 fdc2 	bl	80087ec <HAL_I2C_DeInit>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001c6e:	f06f 0307 	mvn.w	r3, #7
 8001c72:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000b80 	.word	0x20000b80
 8001c84:	20000b2c 	.word	0x20000b2c

08001c88 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	81fb      	strh	r3, [r7, #14]
 8001c96:	460b      	mov	r3, r1
 8001c98:	81bb      	strh	r3, [r7, #12]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ca2:	89ba      	ldrh	r2, [r7, #12]
 8001ca4:	89f9      	ldrh	r1, [r7, #14]
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <BSP_I2C1_WriteReg+0x60>)
 8001cb8:	f006 fddc 	bl	8008874 <HAL_I2C_Mem_Write>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001cc2:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <BSP_I2C1_WriteReg+0x60>)
 8001cc4:	f007 f812 	bl	8008cec <HAL_I2C_GetError>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d103      	bne.n	8001cd6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001cce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e002      	b.n	8001cdc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001cd6:	f06f 0303 	mvn.w	r3, #3
 8001cda:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001cdc:	697b      	ldr	r3, [r7, #20]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000b2c 	.word	0x20000b2c

08001cec <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	81fb      	strh	r3, [r7, #14]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	81bb      	strh	r3, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001d06:	89ba      	ldrh	r2, [r7, #12]
 8001d08:	89f9      	ldrh	r1, [r7, #14]
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <BSP_I2C1_ReadReg+0x60>)
 8001d1c:	f006 febe 	bl	8008a9c <HAL_I2C_Mem_Read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001d26:	4809      	ldr	r0, [pc, #36]	; (8001d4c <BSP_I2C1_ReadReg+0x60>)
 8001d28:	f006 ffe0 	bl	8008cec <HAL_I2C_GetError>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d103      	bne.n	8001d3a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d32:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e002      	b.n	8001d40 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d3a:	f06f 0303 	mvn.w	r3, #3
 8001d3e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d40:	697b      	ldr	r3, [r7, #20]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000b2c 	.word	0x20000b2c

08001d50 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d54:	f005 fd16 	bl	8007784 <HAL_GetTick>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <MX_I2C1_Init+0x80>)
 8001d70:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00301739;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <MX_I2C1_Init+0x84>)
 8001d76:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fc92 	bl	80086cc <HAL_I2C_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001db2:	2100      	movs	r1, #0
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f007 fa3f 	bl	8009238 <HAL_I2CEx_ConfigAnalogFilter>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f007 fa81 	bl	80092ce <HAL_I2CEx_ConfigDigitalFilter>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40005400 	.word	0x40005400
 8001de4:	00301739 	.word	0x00301739

08001de8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0aa      	sub	sp, #168	; 0xa8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	2284      	movs	r2, #132	; 0x84
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f009 fd0b 	bl	800b814 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f008 f8cd 	bl	8009fac <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e32:	2312      	movs	r3, #18
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001e44:	2304      	movs	r3, #4
 8001e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001e4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <I2C1_MspInit+0xc0>)
 8001e52:	f006 f951 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001e70:	2304      	movs	r3, #4
 8001e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001e76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <I2C1_MspInit+0xc0>)
 8001e7e:	f006 f93b 	bl	80080f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <I2C1_MspInit+0xbc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	37a8      	adds	r7, #168	; 0xa8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <I2C1_MspDeInit+0x30>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <I2C1_MspDeInit+0x30>)
 8001eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec4:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <I2C1_MspDeInit+0x34>)
 8001ec6:	f006 fac3 	bl	8008450 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <I2C1_MspDeInit+0x34>)
 8001ed0:	f006 fabe 	bl	8008450 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_kill>:

int _kill(int pid, int sig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efe:	f009 fc5f 	bl	800b7c0 <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2216      	movs	r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
	return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_exit>:

void _exit (int status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f26:	e7fe      	b.n	8001f26 <_exit+0x12>

08001f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3a:	f3af 8000 	nop.w
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
	}

return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fb31 	bl	80075e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
	}
	return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f009 fbc4 	bl	800b7c0 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20050000 	.word	0x20050000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000b84 	.word	0x20000b84
 800206c:	20000e08 	.word	0x20000e08

08002070 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffd7 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f009 fb83 	bl	800b7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7fe ff61 	bl	8000f8c <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80020d8:	0800edb4 	.word	0x0800edb4
  ldr r2, =_sbss
 80020dc:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80020e0:	20000e08 	.word	0x20000e08

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e04d      	b.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	7b1a      	ldrb	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <LIS2DW12_RegisterBusIO+0xc4>)
 8002140:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <LIS2DW12_RegisterBusIO+0xc8>)
 8002146:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e020      	b.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4798      	blx	r3
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e016      	b.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d112      	bne.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002184:	2305      	movs	r3, #5
 8002186:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	461a      	mov	r2, r3
 800218c:	2121      	movs	r1, #33	; 0x21
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fda1 	bl	8002cd6 <LIS2DW12_Write_Reg>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80021a0:	68fb      	ldr	r3, [r7, #12]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	08003095 	.word	0x08003095
 80021b0:	080030cb 	.word	0x080030cb

080021b4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	331c      	adds	r3, #28
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fadd 	bl	8003782 <lis2dw12_auto_increment_set>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e04b      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331c      	adds	r3, #28
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 f9d8 	bl	8003590 <lis2dw12_block_data_update_set>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e03f      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	331c      	adds	r3, #28
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 faeb 	bl	80037ce <lis2dw12_fifo_mode_set>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e033      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	331c      	adds	r3, #28
 8002208:	2104      	movs	r1, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f000 ffa8 	bl	8003160 <lis2dw12_power_mode_set>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e027      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a15      	ldr	r2, [pc, #84]	; (8002274 <LIS2DW12_Init+0xc0>)
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	331c      	adds	r3, #28
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f899 	bl	8003370 <lis2dw12_data_rate_set>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	e010      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	331c      	adds	r3, #28
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f9c3 	bl	80035dc <lis2dw12_full_scale_set>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	e004      	b.n	800226c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	42c80000 	.word	0x42c80000

08002278 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f888 	bl	8002396 <LIS2DW12_ACC_Disable>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e010      	b.n	80022b4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	331c      	adds	r3, #28
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fa47 	bl	8003760 <lis2dw12_device_id_get>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	e000      	b.n	80022e0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4a06      	ldr	r2, [pc, #24]	; (8002340 <LIS2DW12_GetCapabilities+0x58>)
 8002328:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	44c80000 	.word	0x44c80000

08002344 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e019      	b.n	800238e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800236c:	461a      	mov	r2, r3
 800236e:	eeb0 0a67 	vmov.f32	s0, s15
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fce0 	bl	8002d38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e004      	b.n	800238e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	e010      	b.n	80023ce <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	331c      	adds	r3, #28
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 ffdc 	bl	8003370 <lis2dw12_data_rate_set>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e004      	b.n	80023ce <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	331c      	adds	r3, #28
 80023ea:	f107 020b 	add.w	r2, r7, #11
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 f919 	bl	8003628 <lis2dw12_full_scale_get>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e0a0      	b.n	8002544 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	331c      	adds	r3, #28
 8002406:	f107 020a 	add.w	r2, r7, #10
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fef5 	bl	80031fc <lis2dw12_power_mode_get>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	e092      	b.n	8002544 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800241e:	7abb      	ldrb	r3, [r7, #10]
 8002420:	2b1b      	cmp	r3, #27
 8002422:	f200 8087 	bhi.w	8002534 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800249d 	.word	0x0800249d
 8002430:	080024e9 	.word	0x080024e9
 8002434:	080024e9 	.word	0x080024e9
 8002438:	080024e9 	.word	0x080024e9
 800243c:	080024e9 	.word	0x080024e9
 8002440:	08002535 	.word	0x08002535
 8002444:	08002535 	.word	0x08002535
 8002448:	08002535 	.word	0x08002535
 800244c:	0800249d 	.word	0x0800249d
 8002450:	080024e9 	.word	0x080024e9
 8002454:	080024e9 	.word	0x080024e9
 8002458:	080024e9 	.word	0x080024e9
 800245c:	08002535 	.word	0x08002535
 8002460:	08002535 	.word	0x08002535
 8002464:	08002535 	.word	0x08002535
 8002468:	08002535 	.word	0x08002535
 800246c:	0800249d 	.word	0x0800249d
 8002470:	080024e9 	.word	0x080024e9
 8002474:	080024e9 	.word	0x080024e9
 8002478:	080024e9 	.word	0x080024e9
 800247c:	080024e9 	.word	0x080024e9
 8002480:	08002535 	.word	0x08002535
 8002484:	08002535 	.word	0x08002535
 8002488:	08002535 	.word	0x08002535
 800248c:	0800249d 	.word	0x0800249d
 8002490:	080024e9 	.word	0x080024e9
 8002494:	080024e9 	.word	0x080024e9
 8002498:	080024e9 	.word	0x080024e9
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800249c:	7afb      	ldrb	r3, [r7, #11]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d81a      	bhi.n	80024d8 <LIS2DW12_ACC_GetSensitivity+0x100>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c1 	.word	0x080024c1
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024d1 	.word	0x080024d1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80024bc:	601a      	str	r2, [r3, #0]
          break;
 80024be:	e012      	b.n	80024e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80024c4:	601a      	str	r2, [r3, #0]
          break;
 80024c6:	e00e      	b.n	80024e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80024cc:	601a      	str	r2, [r3, #0]
          break;
 80024ce:	e00a      	b.n	80024e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80024d4:	601a      	str	r2, [r3, #0]
          break;
 80024d6:	e006      	b.n	80024e6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4a20      	ldr	r2, [pc, #128]	; (800255c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80024dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	60fb      	str	r3, [r7, #12]
          break;
 80024e4:	bf00      	nop
      }
      break;
 80024e6:	e02c      	b.n	8002542 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d81a      	bhi.n	8002524 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002505 	.word	0x08002505
 80024f8:	0800250d 	.word	0x0800250d
 80024fc:	08002515 	.word	0x08002515
 8002500:	0800251d 	.word	0x0800251d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002508:	601a      	str	r2, [r3, #0]
          break;
 800250a:	e012      	b.n	8002532 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4a15      	ldr	r2, [pc, #84]	; (8002564 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002510:	601a      	str	r2, [r3, #0]
          break;
 8002512:	e00e      	b.n	8002532 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002518:	601a      	str	r2, [r3, #0]
          break;
 800251a:	e00a      	b.n	8002532 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002520:	601a      	str	r2, [r3, #0]
          break;
 8002522:	e006      	b.n	8002532 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002528:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	60fb      	str	r3, [r7, #12]
          break;
 8002530:	bf00      	nop
      }
      break;
 8002532:	e006      	b.n	8002542 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002538:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	60fb      	str	r3, [r7, #12]
      break;
 8002540:	bf00      	nop
  }

  return ret;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	3f79db23 	.word	0x3f79db23
 8002550:	3ff9db23 	.word	0x3ff9db23
 8002554:	4079db23 	.word	0x4079db23
 8002558:	40f9db23 	.word	0x40f9db23
 800255c:	bf800000 	.word	0xbf800000
 8002560:	3e79db23 	.word	0x3e79db23
 8002564:	3ef9db23 	.word	0x3ef9db23

08002568 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	331c      	adds	r3, #28
 800257a:	f107 020b 	add.w	r2, r7, #11
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 ff3b 	bl	80033fc <lis2dw12_data_rate_get>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	e1d4      	b.n	800293c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	331c      	adds	r3, #28
 8002596:	f107 020a 	add.w	r2, r7, #10
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fe2d 	bl	80031fc <lis2dw12_power_mode_get>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	e1c6      	b.n	800293c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	2b32      	cmp	r3, #50	; 0x32
 80025b2:	f200 81bb 	bhi.w	800292c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	08002689 	.word	0x08002689
 80025c0:	08002693 	.word	0x08002693
 80025c4:	08002731 	.word	0x08002731
 80025c8:	08002739 	.word	0x08002739
 80025cc:	08002741 	.word	0x08002741
 80025d0:	08002749 	.word	0x08002749
 80025d4:	08002751 	.word	0x08002751
 80025d8:	08002759 	.word	0x08002759
 80025dc:	080027f5 	.word	0x080027f5
 80025e0:	08002891 	.word	0x08002891
 80025e4:	0800292d 	.word	0x0800292d
 80025e8:	0800292d 	.word	0x0800292d
 80025ec:	0800292d 	.word	0x0800292d
 80025f0:	0800292d 	.word	0x0800292d
 80025f4:	0800292d 	.word	0x0800292d
 80025f8:	0800292d 	.word	0x0800292d
 80025fc:	0800292d 	.word	0x0800292d
 8002600:	0800292d 	.word	0x0800292d
 8002604:	08002689 	.word	0x08002689
 8002608:	0800292d 	.word	0x0800292d
 800260c:	0800292d 	.word	0x0800292d
 8002610:	0800292d 	.word	0x0800292d
 8002614:	0800292d 	.word	0x0800292d
 8002618:	0800292d 	.word	0x0800292d
 800261c:	0800292d 	.word	0x0800292d
 8002620:	0800292d 	.word	0x0800292d
 8002624:	0800292d 	.word	0x0800292d
 8002628:	0800292d 	.word	0x0800292d
 800262c:	0800292d 	.word	0x0800292d
 8002630:	0800292d 	.word	0x0800292d
 8002634:	0800292d 	.word	0x0800292d
 8002638:	0800292d 	.word	0x0800292d
 800263c:	0800292d 	.word	0x0800292d
 8002640:	0800292d 	.word	0x0800292d
 8002644:	0800292d 	.word	0x0800292d
 8002648:	0800292d 	.word	0x0800292d
 800264c:	0800292d 	.word	0x0800292d
 8002650:	0800292d 	.word	0x0800292d
 8002654:	0800292d 	.word	0x0800292d
 8002658:	0800292d 	.word	0x0800292d
 800265c:	0800292d 	.word	0x0800292d
 8002660:	0800292d 	.word	0x0800292d
 8002664:	0800292d 	.word	0x0800292d
 8002668:	0800292d 	.word	0x0800292d
 800266c:	0800292d 	.word	0x0800292d
 8002670:	0800292d 	.word	0x0800292d
 8002674:	0800292d 	.word	0x0800292d
 8002678:	0800292d 	.word	0x0800292d
 800267c:	0800292d 	.word	0x0800292d
 8002680:	0800292d 	.word	0x0800292d
 8002684:	08002689 	.word	0x08002689
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
      break;
 8002690:	e153      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002692:	7abb      	ldrb	r3, [r7, #10]
 8002694:	2b1b      	cmp	r3, #27
 8002696:	d843      	bhi.n	8002720 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	08002719 	.word	0x08002719
 80026a4:	08002719 	.word	0x08002719
 80026a8:	08002719 	.word	0x08002719
 80026ac:	08002719 	.word	0x08002719
 80026b0:	08002711 	.word	0x08002711
 80026b4:	08002721 	.word	0x08002721
 80026b8:	08002721 	.word	0x08002721
 80026bc:	08002721 	.word	0x08002721
 80026c0:	08002719 	.word	0x08002719
 80026c4:	08002719 	.word	0x08002719
 80026c8:	08002719 	.word	0x08002719
 80026cc:	08002719 	.word	0x08002719
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002721 	.word	0x08002721
 80026d8:	08002721 	.word	0x08002721
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002719 	.word	0x08002719
 80026e4:	08002719 	.word	0x08002719
 80026e8:	08002719 	.word	0x08002719
 80026ec:	08002719 	.word	0x08002719
 80026f0:	08002711 	.word	0x08002711
 80026f4:	08002721 	.word	0x08002721
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002719 	.word	0x08002719
 8002704:	08002719 	.word	0x08002719
 8002708:	08002719 	.word	0x08002719
 800270c:	08002719 	.word	0x08002719
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4a8c      	ldr	r2, [pc, #560]	; (8002944 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002714:	601a      	str	r2, [r3, #0]
          break;
 8002716:	e00a      	b.n	800272e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4a8b      	ldr	r2, [pc, #556]	; (8002948 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 800271c:	601a      	str	r2, [r3, #0]
          break;
 800271e:	e006      	b.n	800272e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	; (800294c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002724:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	60fb      	str	r3, [r7, #12]
          break;
 800272c:	bf00      	nop
      }
      break;
 800272e:	e104      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4a84      	ldr	r2, [pc, #528]	; (8002944 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002734:	601a      	str	r2, [r3, #0]
      break;
 8002736:	e100      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4a85      	ldr	r2, [pc, #532]	; (8002950 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 800273c:	601a      	str	r2, [r3, #0]
      break;
 800273e:	e0fc      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4a84      	ldr	r2, [pc, #528]	; (8002954 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002744:	601a      	str	r2, [r3, #0]
      break;
 8002746:	e0f8      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4a83      	ldr	r2, [pc, #524]	; (8002958 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 800274c:	601a      	str	r2, [r3, #0]
      break;
 800274e:	e0f4      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4a82      	ldr	r2, [pc, #520]	; (800295c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002754:	601a      	str	r2, [r3, #0]
      break;
 8002756:	e0f0      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	2b1b      	cmp	r3, #27
 800275c:	d842      	bhi.n	80027e4 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	080027dd 	.word	0x080027dd
 8002768:	080027dd 	.word	0x080027dd
 800276c:	080027dd 	.word	0x080027dd
 8002770:	080027dd 	.word	0x080027dd
 8002774:	080027d5 	.word	0x080027d5
 8002778:	080027e5 	.word	0x080027e5
 800277c:	080027e5 	.word	0x080027e5
 8002780:	080027e5 	.word	0x080027e5
 8002784:	080027dd 	.word	0x080027dd
 8002788:	080027dd 	.word	0x080027dd
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080027dd 	.word	0x080027dd
 8002794:	080027e5 	.word	0x080027e5
 8002798:	080027e5 	.word	0x080027e5
 800279c:	080027e5 	.word	0x080027e5
 80027a0:	080027e5 	.word	0x080027e5
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080027dd 	.word	0x080027dd
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027d5 	.word	0x080027d5
 80027b8:	080027e5 	.word	0x080027e5
 80027bc:	080027e5 	.word	0x080027e5
 80027c0:	080027e5 	.word	0x080027e5
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027dd 	.word	0x080027dd
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	080027dd 	.word	0x080027dd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4a62      	ldr	r2, [pc, #392]	; (8002960 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80027d8:	601a      	str	r2, [r3, #0]
          break;
 80027da:	e00a      	b.n	80027f2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4a5f      	ldr	r2, [pc, #380]	; (800295c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80027e0:	601a      	str	r2, [r3, #0]
          break;
 80027e2:	e006      	b.n	80027f2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4a59      	ldr	r2, [pc, #356]	; (800294c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80027e8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	60fb      	str	r3, [r7, #12]
          break;
 80027f0:	bf00      	nop
      }
      break;
 80027f2:	e0a2      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80027f4:	7abb      	ldrb	r3, [r7, #10]
 80027f6:	2b1b      	cmp	r3, #27
 80027f8:	d842      	bhi.n	8002880 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002879 	.word	0x08002879
 8002804:	08002879 	.word	0x08002879
 8002808:	08002879 	.word	0x08002879
 800280c:	08002879 	.word	0x08002879
 8002810:	08002871 	.word	0x08002871
 8002814:	08002881 	.word	0x08002881
 8002818:	08002881 	.word	0x08002881
 800281c:	08002881 	.word	0x08002881
 8002820:	08002879 	.word	0x08002879
 8002824:	08002879 	.word	0x08002879
 8002828:	08002879 	.word	0x08002879
 800282c:	08002879 	.word	0x08002879
 8002830:	08002881 	.word	0x08002881
 8002834:	08002881 	.word	0x08002881
 8002838:	08002881 	.word	0x08002881
 800283c:	08002881 	.word	0x08002881
 8002840:	08002879 	.word	0x08002879
 8002844:	08002879 	.word	0x08002879
 8002848:	08002879 	.word	0x08002879
 800284c:	08002879 	.word	0x08002879
 8002850:	08002871 	.word	0x08002871
 8002854:	08002881 	.word	0x08002881
 8002858:	08002881 	.word	0x08002881
 800285c:	08002881 	.word	0x08002881
 8002860:	08002879 	.word	0x08002879
 8002864:	08002879 	.word	0x08002879
 8002868:	08002879 	.word	0x08002879
 800286c:	08002879 	.word	0x08002879
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002874:	601a      	str	r2, [r3, #0]
          break;
 8002876:	e00a      	b.n	800288e <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4a38      	ldr	r2, [pc, #224]	; (800295c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800287c:	601a      	str	r2, [r3, #0]
          break;
 800287e:	e006      	b.n	800288e <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002884:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	60fb      	str	r3, [r7, #12]
          break;
 800288c:	bf00      	nop
      }
      break;
 800288e:	e054      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002890:	7abb      	ldrb	r3, [r7, #10]
 8002892:	2b1b      	cmp	r3, #27
 8002894:	d842      	bhi.n	800291c <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	08002915 	.word	0x08002915
 80028a0:	08002915 	.word	0x08002915
 80028a4:	08002915 	.word	0x08002915
 80028a8:	08002915 	.word	0x08002915
 80028ac:	0800290d 	.word	0x0800290d
 80028b0:	0800291d 	.word	0x0800291d
 80028b4:	0800291d 	.word	0x0800291d
 80028b8:	0800291d 	.word	0x0800291d
 80028bc:	08002915 	.word	0x08002915
 80028c0:	08002915 	.word	0x08002915
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002915 	.word	0x08002915
 80028cc:	0800291d 	.word	0x0800291d
 80028d0:	0800291d 	.word	0x0800291d
 80028d4:	0800291d 	.word	0x0800291d
 80028d8:	0800291d 	.word	0x0800291d
 80028dc:	08002915 	.word	0x08002915
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002915 	.word	0x08002915
 80028e8:	08002915 	.word	0x08002915
 80028ec:	0800290d 	.word	0x0800290d
 80028f0:	0800291d 	.word	0x0800291d
 80028f4:	0800291d 	.word	0x0800291d
 80028f8:	0800291d 	.word	0x0800291d
 80028fc:	08002915 	.word	0x08002915
 8002900:	08002915 	.word	0x08002915
 8002904:	08002915 	.word	0x08002915
 8002908:	08002915 	.word	0x08002915
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002910:	601a      	str	r2, [r3, #0]
          break;
 8002912:	e00a      	b.n	800292a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002918:	601a      	str	r2, [r3, #0]
          break;
 800291a:	e006      	b.n	800292a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002920:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	60fb      	str	r3, [r7, #12]
          break;
 8002928:	bf00      	nop
      }
      break;
 800292a:	e006      	b.n	800293a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002930:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	60fb      	str	r3, [r7, #12]
      break;
 8002938:	bf00      	nop
  }

  return ret;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	41480000 	.word	0x41480000
 8002948:	3fcccccd 	.word	0x3fcccccd
 800294c:	bf800000 	.word	0xbf800000
 8002950:	41c80000 	.word	0x41c80000
 8002954:	42480000 	.word	0x42480000
 8002958:	42c80000 	.word	0x42c80000
 800295c:	43480000 	.word	0x43480000
 8002960:	43c80000 	.word	0x43c80000
 8002964:	44480000 	.word	0x44480000
 8002968:	44c80000 	.word	0x44c80000

0800296c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	ed97 0a00 	vldr	s0, [r7]
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f805 	bl	8002990 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002986:	4603      	mov	r3, r0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	ed87 0a02 	vstr	s0, [r7, #8]
 800299c:	460b      	mov	r3, r1
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d109      	bne.n	80029c2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80029ae:	79ba      	ldrb	r2, [r7, #6]
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4619      	mov	r1, r3
 80029b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f9bd 	bl	8002d38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	e008      	b.n	80029d4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80029c2:	79ba      	ldrb	r2, [r7, #6]
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4619      	mov	r1, r3
 80029c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 facf 	bl	8002f70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80029d2:	4603      	mov	r3, r0
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	331c      	adds	r3, #28
 80029ee:	f107 020b 	add.w	r2, r7, #11
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fe17 	bl	8003628 <lis2dw12_full_scale_get>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	e027      	b.n	8002a56 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d81b      	bhi.n	8002a44 <LIS2DW12_ACC_GetFullScale+0x68>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <LIS2DW12_ACC_GetFullScale+0x38>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a2d 	.word	0x08002a2d
 8002a1c:	08002a35 	.word	0x08002a35
 8002a20:	08002a3d 	.word	0x08002a3d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2202      	movs	r2, #2
 8002a28:	601a      	str	r2, [r3, #0]
      break;
 8002a2a:	e013      	b.n	8002a54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	601a      	str	r2, [r3, #0]
      break;
 8002a32:	e00f      	b.n	8002a54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2208      	movs	r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
      break;
 8002a3a:	e00b      	b.n	8002a54 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2210      	movs	r2, #16
 8002a40:	601a      	str	r2, [r3, #0]
      break;
 8002a42:	e007      	b.n	8002a54 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	60fb      	str	r3, [r7, #12]
      break;
 8002a52:	bf00      	nop
  }

  return ret;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	dd0b      	ble.n	8002a88 <LIS2DW12_ACC_SetFullScale+0x28>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	dd06      	ble.n	8002a84 <LIS2DW12_ACC_SetFullScale+0x24>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	dc01      	bgt.n	8002a80 <LIS2DW12_ACC_SetFullScale+0x20>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e004      	b.n	8002a8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e002      	b.n	8002a8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LIS2DW12_ACC_SetFullScale+0x2a>
 8002a88:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002a8a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	331c      	adds	r3, #28
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fda1 	bl	80035dc <lis2dw12_full_scale_set>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa4:	e000      	b.n	8002aa8 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	331c      	adds	r3, #28
 8002ac2:	f107 020b 	add.w	r2, r7, #11
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb97 	bl	80031fc <lis2dw12_power_mode_get>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e089      	b.n	8002bee <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	331c      	adds	r3, #28
 8002ade:	f107 020c 	add.w	r2, r7, #12
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fdf0 	bl	80036ca <lis2dw12_acceleration_raw_get>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	e07b      	b.n	8002bee <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	2b1b      	cmp	r3, #27
 8002afa:	d873      	bhi.n	8002be4 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b75 	.word	0x08002b75
 8002b08:	08002bad 	.word	0x08002bad
 8002b0c:	08002bad 	.word	0x08002bad
 8002b10:	08002bad 	.word	0x08002bad
 8002b14:	08002bad 	.word	0x08002bad
 8002b18:	08002be5 	.word	0x08002be5
 8002b1c:	08002be5 	.word	0x08002be5
 8002b20:	08002be5 	.word	0x08002be5
 8002b24:	08002b75 	.word	0x08002b75
 8002b28:	08002bad 	.word	0x08002bad
 8002b2c:	08002bad 	.word	0x08002bad
 8002b30:	08002bad 	.word	0x08002bad
 8002b34:	08002be5 	.word	0x08002be5
 8002b38:	08002be5 	.word	0x08002be5
 8002b3c:	08002be5 	.word	0x08002be5
 8002b40:	08002be5 	.word	0x08002be5
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002bad 	.word	0x08002bad
 8002b50:	08002bad 	.word	0x08002bad
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002be5 	.word	0x08002be5
 8002b5c:	08002be5 	.word	0x08002be5
 8002b60:	08002be5 	.word	0x08002be5
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002bad 	.word	0x08002bad
 8002b6c:	08002bad 	.word	0x08002bad
 8002b70:	08002bad 	.word	0x08002bad
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002b74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da00      	bge.n	8002b7e <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002b7c:	330f      	adds	r3, #15
 8002b7e:	111b      	asrs	r3, r3, #4
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da00      	bge.n	8002b90 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002b8e:	330f      	adds	r3, #15
 8002b90:	111b      	asrs	r3, r3, #4
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002b98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da00      	bge.n	8002ba2 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002ba0:	330f      	adds	r3, #15
 8002ba2:	111b      	asrs	r3, r3, #4
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	809a      	strh	r2, [r3, #4]
      break;
 8002baa:	e01f      	b.n	8002bec <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002bac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da00      	bge.n	8002bb6 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	109b      	asrs	r3, r3, #2
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da00      	bge.n	8002bc8 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8002bc6:	3303      	adds	r3, #3
 8002bc8:	109b      	asrs	r3, r3, #2
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da00      	bge.n	8002bda <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002bd8:	3303      	adds	r3, #3
 8002bda:	109b      	asrs	r3, r3, #2
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	809a      	strh	r2, [r3, #4]
      break;
 8002be2:	e003      	b.n	8002bec <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	617b      	str	r3, [r7, #20]
      break;
 8002bea:	bf00      	nop
  }

  return ret;
 8002bec:	697b      	ldr	r3, [r7, #20]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop

08002bf8 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff4e 	bl	8002ab0 <LIS2DW12_ACC_GetAxesRaw>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e03c      	b.n	8002c9a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fbd6 	bl	80023d8 <LIS2DW12_ACC_GetSensitivity>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e030      	b.n	8002c9a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002c38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	ee17 2a90 	vmov	r2, s15
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c70:	ee17 2a90 	vmov	r2, s15
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002c78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c90:	ee17 2a90 	vmov	r2, s15
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <LIS2DW12_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Read_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	460b      	mov	r3, r1
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	72fb      	strb	r3, [r7, #11]
  if (lis2dw12_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2DW12_OK)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f103 001c 	add.w	r0, r3, #28
 8002cb6:	7af9      	ldrb	r1, [r7, #11]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	f000 fa20 	bl	8003100 <lis2dw12_read_reg>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <LIS2DW12_Read_Reg+0x2a>
  {
    return LIS2DW12_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	e000      	b.n	8002cce <LIS2DW12_Read_Reg+0x2c>
  }

  return LIS2DW12_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	70fb      	strb	r3, [r7, #3]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f103 001c 	add.w	r0, r3, #28
 8002cec:	1cba      	adds	r2, r7, #2
 8002cee:	78f9      	ldrb	r1, [r7, #3]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f000 fa1d 	bl	8003130 <lis2dw12_write_reg>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	e000      	b.n	8002d04 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LIS2DW12_ACC_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Get_DRDY_Status(LIS2DW12_Object_t *pObj, uint8_t *Status)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  if (lis2dw12_flag_data_ready_get(&(pObj->Ctx), Status) != LIS2DW12_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	331c      	adds	r3, #28
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fcbb 	bl	8003698 <lis2dw12_flag_data_ready_get>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <LIS2DW12_ACC_Get_DRDY_Status+0x22>
  {
    return LIS2DW12_ERROR;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e000      	b.n	8002d30 <LIS2DW12_ACC_Get_DRDY_Status+0x24>
  }

  return LIS2DW12_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d44:	460b      	mov	r3, r1
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d80b      	bhi.n	8002d6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d99 	.word	0x08002d99
 8002d60:	08002dc5 	.word	0x08002dc5
 8002d64:	08002df1 	.word	0x08002df1
 8002d68:	08002e1d 	.word	0x08002e1d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002d6c:	79bb      	ldrb	r3, [r7, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d002      	beq.n	8002d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002d72:	2304      	movs	r3, #4
 8002d74:	75fb      	strb	r3, [r7, #23]
          break;
 8002d76:	e002      	b.n	8002d7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002d78:	2314      	movs	r3, #20
 8002d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8002d7c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d82:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d400      	bmi.n	8002d92 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002d90:	e05a      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002d94:	60bb      	str	r3, [r7, #8]
      break;
 8002d96:	e057      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002d98:	79bb      	ldrb	r3, [r7, #6]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d002      	beq.n	8002da4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	75fb      	strb	r3, [r7, #23]
          break;
 8002da2:	e002      	b.n	8002daa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002da4:	2313      	movs	r3, #19
 8002da6:	75fb      	strb	r3, [r7, #23]
          break;
 8002da8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dae:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002f54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	dc00      	bgt.n	8002dbe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002dbc:	e044      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002dbe:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002dc0:	60bb      	str	r3, [r7, #8]
      break;
 8002dc2:	e041      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8002dce:	e002      	b.n	8002dd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	75fb      	strb	r3, [r7, #23]
          break;
 8002dd4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dda:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002f54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de6:	dc00      	bgt.n	8002dea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002de8:	e02e      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002dea:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002dec:	60bb      	str	r3, [r7, #8]
      break;
 8002dee:	e02b      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002df0:	79bb      	ldrb	r3, [r7, #6]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d002      	beq.n	8002dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
          break;
 8002dfa:	e002      	b.n	8002e02 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002dfc:	2311      	movs	r3, #17
 8002dfe:	75fb      	strb	r3, [r7, #23]
          break;
 8002e00:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002e02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e06:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002f54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	dc00      	bgt.n	8002e16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002e14:	e018      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002e16:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e18:	60bb      	str	r3, [r7, #8]
      break;
 8002e1a:	e015      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d002      	beq.n	8002e28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
          break;
 8002e26:	e002      	b.n	8002e2e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002e28:	2310      	movs	r3, #16
 8002e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8002e2c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e32:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002f54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3e:	dc00      	bgt.n	8002e42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002e40:	e001      	b.n	8002e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e44:	60bb      	str	r3, [r7, #8]
      break;
 8002e46:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002f5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	d801      	bhi.n	8002e5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e04d      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e62:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d801      	bhi.n	8002e74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e042      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d801      	bhi.n	8002e8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e037      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002e8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e8e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d801      	bhi.n	8002ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e02c      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d801      	bhi.n	8002eb6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e021      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d801      	bhi.n	8002ecc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002ec8:	2306      	movs	r3, #6
 8002eca:	e016      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002f68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002edc:	d801      	bhi.n	8002ee2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00b      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002f6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	d801      	bhi.n	8002ef8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	e000      	b.n	8002efa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ef8:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002efa:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	331c      	adds	r3, #28
 8002f00:	7dba      	ldrb	r2, [r7, #22]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fa33 	bl	8003370 <lis2dw12_data_rate_set>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	e018      	b.n	8002f48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	331c      	adds	r3, #28
 8002f1a:	7dfa      	ldrb	r2, [r7, #23]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f91e 	bl	8003160 <lis2dw12_power_mode_set>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e00b      	b.n	8002f48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	79fa      	ldrb	r2, [r7, #7]
 8002f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	79ba      	ldrb	r2, [r7, #6]
 8002f42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	41480000 	.word	0x41480000
 8002f54:	43480000 	.word	0x43480000
 8002f58:	43480000 	.word	0x43480000
 8002f5c:	3fcccccd 	.word	0x3fcccccd
 8002f60:	42480000 	.word	0x42480000
 8002f64:	42c80000 	.word	0x42c80000
 8002f68:	43c80000 	.word	0x43c80000
 8002f6c:	44480000 	.word	0x44480000

08002f70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	71fb      	strb	r3, [r7, #7]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	79ba      	ldrb	r2, [r7, #6]
 8002f90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f98:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003058 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d801      	bhi.n	8002faa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002fa8:	e04d      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	d801      	bhi.n	8002fc0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002fbe:	e042      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	d801      	bhi.n	8002fd6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002fd4:	e037      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fda:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003068 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe6:	d801      	bhi.n	8002fec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002fea:	e02c      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003070 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d801      	bhi.n	8003002 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8003000:	e021      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8003002:	edd7 7a02 	vldr	s15, [r7, #8]
 8003006:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003078 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800300a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	d801      	bhi.n	8003018 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8003016:	e016      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003018:	edd7 7a02 	vldr	s15, [r7, #8]
 800301c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003080 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d801      	bhi.n	800302e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800302c:	e00b      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800302e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003032:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003088 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d801      	bhi.n	8003044 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003042:	e000      	b.n	8003046 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	3fcccccd 	.word	0x3fcccccd
 800305c:	3fcccccd 	.word	0x3fcccccd
 8003060:	41480000 	.word	0x41480000
 8003064:	41c80000 	.word	0x41c80000
 8003068:	42480000 	.word	0x42480000
 800306c:	42480000 	.word	0x42480000
 8003070:	42c80000 	.word	0x42c80000
 8003074:	42c80000 	.word	0x42c80000
 8003078:	43480000 	.word	0x43480000
 800307c:	43480000 	.word	0x43480000
 8003080:	43c80000 	.word	0x43c80000
 8003084:	43c80000 	.word	0x43c80000
 8003088:	44480000 	.word	0x44480000
 800308c:	44480000 	.word	0x44480000
 8003090:	44c80000 	.word	0x44c80000

08003094 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	461a      	mov	r2, r3
 80030a0:	460b      	mov	r3, r1
 80030a2:	72fb      	strb	r3, [r7, #11]
 80030a4:	4613      	mov	r3, r2
 80030a6:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	695c      	ldr	r4, [r3, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	b298      	uxth	r0, r3
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	b299      	uxth	r1, r3
 80030ba:	893b      	ldrh	r3, [r7, #8]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	47a0      	blx	r4
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	461a      	mov	r2, r3
 80030d6:	460b      	mov	r3, r1
 80030d8:	72fb      	strb	r3, [r7, #11]
 80030da:	4613      	mov	r3, r2
 80030dc:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	691c      	ldr	r4, [r3, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	7b1b      	ldrb	r3, [r3, #12]
 80030ea:	b298      	uxth	r0, r3
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	b299      	uxth	r1, r3
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	47a0      	blx	r4
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	460b      	mov	r3, r1
 800310e:	72fb      	strb	r3, [r7, #11]
 8003110:	4613      	mov	r3, r2
 8003112:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685c      	ldr	r4, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6898      	ldr	r0, [r3, #8]
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	7af9      	ldrb	r1, [r7, #11]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	47a0      	blx	r4
 8003124:	6178      	str	r0, [r7, #20]

  return ret;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}

08003130 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	461a      	mov	r2, r3
 800313c:	460b      	mov	r3, r1
 800313e:	72fb      	strb	r3, [r7, #11]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6898      	ldr	r0, [r3, #8]
 800314c:	893b      	ldrh	r3, [r7, #8]
 800314e:	7af9      	ldrb	r1, [r7, #11]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	47a0      	blx	r4
 8003154:	6178      	str	r0, [r7, #20]

  return ret;
 8003156:	697b      	ldr	r3, [r7, #20]
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}

08003160 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800316c:	f107 0210 	add.w	r2, r7, #16
 8003170:	2301      	movs	r3, #1
 8003172:	2120      	movs	r1, #32
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffc3 	bl	8003100 <lis2dw12_read_reg>
 800317a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	b2da      	uxtb	r2, r3
 800318c:	7c3b      	ldrb	r3, [r7, #16]
 800318e:	f362 0383 	bfi	r3, r2, #2, #2
 8003192:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7c3b      	ldrb	r3, [r7, #16]
 800319e:	f362 0301 	bfi	r3, r2, #0, #2
 80031a2:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80031a4:	f107 0210 	add.w	r2, r7, #16
 80031a8:	2301      	movs	r3, #1
 80031aa:	2120      	movs	r1, #32
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffbf 	bl	8003130 <lis2dw12_write_reg>
 80031b2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80031ba:	f107 020c 	add.w	r2, r7, #12
 80031be:	2301      	movs	r3, #1
 80031c0:	2125      	movs	r1, #37	; 0x25
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff9c 	bl	8003100 <lis2dw12_read_reg>
 80031c8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d110      	bne.n	80031f2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	7b3b      	ldrb	r3, [r7, #12]
 80031dc:	f362 0382 	bfi	r3, r2, #2, #1
 80031e0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80031e2:	f107 020c 	add.w	r2, r7, #12
 80031e6:	2301      	movs	r3, #1
 80031e8:	2125      	movs	r1, #37	; 0x25
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa0 	bl	8003130 <lis2dw12_write_reg>
 80031f0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80031f2:	697b      	ldr	r3, [r7, #20]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003206:	f107 0210 	add.w	r2, r7, #16
 800320a:	2301      	movs	r3, #1
 800320c:	2120      	movs	r1, #32
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ff76 	bl	8003100 <lis2dw12_read_reg>
 8003214:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 80a3 	bne.w	8003364 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	2301      	movs	r3, #1
 8003224:	2125      	movs	r1, #37	; 0x25
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff6a 	bl	8003100 <lis2dw12_read_reg>
 800322c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800322e:	7b3b      	ldrb	r3, [r7, #12]
 8003230:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	011a      	lsls	r2, r3, #4
 8003238:	7c3b      	ldrb	r3, [r7, #16]
 800323a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8003244:	7c3a      	ldrb	r2, [r7, #16]
 8003246:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800324a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800324c:	4413      	add	r3, r2
 800324e:	2b1b      	cmp	r3, #27
 8003250:	f200 8084 	bhi.w	800335c <lis2dw12_power_mode_get+0x160>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <lis2dw12_power_mode_get+0x60>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	080032ed 	.word	0x080032ed
 8003260:	080032e5 	.word	0x080032e5
 8003264:	080032dd 	.word	0x080032dd
 8003268:	080032d5 	.word	0x080032d5
 800326c:	080032cd 	.word	0x080032cd
 8003270:	0800335d 	.word	0x0800335d
 8003274:	0800335d 	.word	0x0800335d
 8003278:	0800335d 	.word	0x0800335d
 800327c:	0800330d 	.word	0x0800330d
 8003280:	08003305 	.word	0x08003305
 8003284:	080032fd 	.word	0x080032fd
 8003288:	080032f5 	.word	0x080032f5
 800328c:	0800335d 	.word	0x0800335d
 8003290:	0800335d 	.word	0x0800335d
 8003294:	0800335d 	.word	0x0800335d
 8003298:	0800335d 	.word	0x0800335d
 800329c:	08003335 	.word	0x08003335
 80032a0:	0800332d 	.word	0x0800332d
 80032a4:	08003325 	.word	0x08003325
 80032a8:	0800331d 	.word	0x0800331d
 80032ac:	08003315 	.word	0x08003315
 80032b0:	0800335d 	.word	0x0800335d
 80032b4:	0800335d 	.word	0x0800335d
 80032b8:	0800335d 	.word	0x0800335d
 80032bc:	08003355 	.word	0x08003355
 80032c0:	0800334d 	.word	0x0800334d
 80032c4:	08003345 	.word	0x08003345
 80032c8:	0800333d 	.word	0x0800333d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	e048      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2203      	movs	r2, #3
 80032d8:	701a      	strb	r2, [r3, #0]
        break;
 80032da:	e044      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
        break;
 80032e2:	e040      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
        break;
 80032ea:	e03c      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
        break;
 80032f2:	e038      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	220b      	movs	r2, #11
 80032f8:	701a      	strb	r2, [r3, #0]
        break;
 80032fa:	e034      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	220a      	movs	r2, #10
 8003300:	701a      	strb	r2, [r3, #0]
        break;
 8003302:	e030      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2209      	movs	r2, #9
 8003308:	701a      	strb	r2, [r3, #0]
        break;
 800330a:	e02c      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2208      	movs	r2, #8
 8003310:	701a      	strb	r2, [r3, #0]
        break;
 8003312:	e028      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2214      	movs	r2, #20
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	e024      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2213      	movs	r2, #19
 8003320:	701a      	strb	r2, [r3, #0]
        break;
 8003322:	e020      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2212      	movs	r2, #18
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	e01c      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2211      	movs	r2, #17
 8003330:	701a      	strb	r2, [r3, #0]
        break;
 8003332:	e018      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	701a      	strb	r2, [r3, #0]
        break;
 800333a:	e014      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	221b      	movs	r2, #27
 8003340:	701a      	strb	r2, [r3, #0]
        break;
 8003342:	e010      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	221a      	movs	r2, #26
 8003348:	701a      	strb	r2, [r3, #0]
        break;
 800334a:	e00c      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2219      	movs	r2, #25
 8003350:	701a      	strb	r2, [r3, #0]
        break;
 8003352:	e008      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2218      	movs	r2, #24
 8003358:	701a      	strb	r2, [r3, #0]
        break;
 800335a:	e004      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
        break;
 8003362:	e000      	b.n	8003366 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003364:	bf00      	nop

  return ret;
 8003366:	697b      	ldr	r3, [r7, #20]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800337c:	f107 0210 	add.w	r2, r7, #16
 8003380:	2301      	movs	r3, #1
 8003382:	2120      	movs	r1, #32
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff febb 	bl	8003100 <lis2dw12_read_reg>
 800338a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	b2da      	uxtb	r2, r3
 800339a:	7c3b      	ldrb	r3, [r7, #16]
 800339c:	f362 1307 	bfi	r3, r2, #4, #4
 80033a0:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80033a2:	f107 0210 	add.w	r2, r7, #16
 80033a6:	2301      	movs	r3, #1
 80033a8:	2120      	movs	r1, #32
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fec0 	bl	8003130 <lis2dw12_write_reg>
 80033b0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80033b8:	f107 020c 	add.w	r2, r7, #12
 80033bc:	2301      	movs	r3, #1
 80033be:	2122      	movs	r1, #34	; 0x22
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fe9d 	bl	8003100 <lis2dw12_read_reg>
 80033c6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d110      	bne.n	80033f0 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	7b3b      	ldrb	r3, [r7, #12]
 80033da:	f362 0301 	bfi	r3, r2, #0, #2
 80033de:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80033e0:	f107 020c 	add.w	r2, r7, #12
 80033e4:	2301      	movs	r3, #1
 80033e6:	2122      	movs	r1, #34	; 0x22
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fea1 	bl	8003130 <lis2dw12_write_reg>
 80033ee:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80033f0:	697b      	ldr	r3, [r7, #20]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003406:	f107 0210 	add.w	r2, r7, #16
 800340a:	2301      	movs	r3, #1
 800340c:	2120      	movs	r1, #32
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fe76 	bl	8003100 <lis2dw12_read_reg>
 8003414:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 80b3 	bne.w	8003584 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800341e:	f107 020c 	add.w	r2, r7, #12
 8003422:	2301      	movs	r3, #1
 8003424:	2122      	movs	r1, #34	; 0x22
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fe6a 	bl	8003100 <lis2dw12_read_reg>
 800342c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800342e:	7b3b      	ldrb	r3, [r7, #12]
 8003430:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	7c3a      	ldrb	r2, [r7, #16]
 800343a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	4413      	add	r3, r2
 8003442:	2b32      	cmp	r3, #50	; 0x32
 8003444:	f200 809a 	bhi.w	800357c <lis2dw12_data_rate_get+0x180>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <lis2dw12_data_rate_get+0x54>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	0800351d 	.word	0x0800351d
 8003454:	08003525 	.word	0x08003525
 8003458:	0800352d 	.word	0x0800352d
 800345c:	08003535 	.word	0x08003535
 8003460:	0800353d 	.word	0x0800353d
 8003464:	08003545 	.word	0x08003545
 8003468:	0800354d 	.word	0x0800354d
 800346c:	08003555 	.word	0x08003555
 8003470:	0800355d 	.word	0x0800355d
 8003474:	08003565 	.word	0x08003565
 8003478:	0800357d 	.word	0x0800357d
 800347c:	0800357d 	.word	0x0800357d
 8003480:	0800357d 	.word	0x0800357d
 8003484:	0800357d 	.word	0x0800357d
 8003488:	0800357d 	.word	0x0800357d
 800348c:	0800357d 	.word	0x0800357d
 8003490:	0800357d 	.word	0x0800357d
 8003494:	0800357d 	.word	0x0800357d
 8003498:	08003575 	.word	0x08003575
 800349c:	0800357d 	.word	0x0800357d
 80034a0:	0800357d 	.word	0x0800357d
 80034a4:	0800357d 	.word	0x0800357d
 80034a8:	0800357d 	.word	0x0800357d
 80034ac:	0800357d 	.word	0x0800357d
 80034b0:	0800357d 	.word	0x0800357d
 80034b4:	0800357d 	.word	0x0800357d
 80034b8:	0800357d 	.word	0x0800357d
 80034bc:	0800357d 	.word	0x0800357d
 80034c0:	0800357d 	.word	0x0800357d
 80034c4:	0800357d 	.word	0x0800357d
 80034c8:	0800357d 	.word	0x0800357d
 80034cc:	0800357d 	.word	0x0800357d
 80034d0:	0800357d 	.word	0x0800357d
 80034d4:	0800357d 	.word	0x0800357d
 80034d8:	0800357d 	.word	0x0800357d
 80034dc:	0800357d 	.word	0x0800357d
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	0800357d 	.word	0x0800357d
 80034e8:	0800357d 	.word	0x0800357d
 80034ec:	0800357d 	.word	0x0800357d
 80034f0:	0800357d 	.word	0x0800357d
 80034f4:	0800357d 	.word	0x0800357d
 80034f8:	0800357d 	.word	0x0800357d
 80034fc:	0800357d 	.word	0x0800357d
 8003500:	0800357d 	.word	0x0800357d
 8003504:	0800357d 	.word	0x0800357d
 8003508:	0800357d 	.word	0x0800357d
 800350c:	0800357d 	.word	0x0800357d
 8003510:	0800357d 	.word	0x0800357d
 8003514:	0800357d 	.word	0x0800357d
 8003518:	0800356d 	.word	0x0800356d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
        break;
 8003522:	e030      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
        break;
 800352a:	e02c      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
        break;
 8003532:	e028      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2203      	movs	r2, #3
 8003538:	701a      	strb	r2, [r3, #0]
        break;
 800353a:	e024      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2204      	movs	r2, #4
 8003540:	701a      	strb	r2, [r3, #0]
        break;
 8003542:	e020      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2205      	movs	r2, #5
 8003548:	701a      	strb	r2, [r3, #0]
        break;
 800354a:	e01c      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2206      	movs	r2, #6
 8003550:	701a      	strb	r2, [r3, #0]
        break;
 8003552:	e018      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2207      	movs	r2, #7
 8003558:	701a      	strb	r2, [r3, #0]
        break;
 800355a:	e014      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2208      	movs	r2, #8
 8003560:	701a      	strb	r2, [r3, #0]
        break;
 8003562:	e010      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2209      	movs	r2, #9
 8003568:	701a      	strb	r2, [r3, #0]
        break;
 800356a:	e00c      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2232      	movs	r2, #50	; 0x32
 8003570:	701a      	strb	r2, [r3, #0]
        break;
 8003572:	e008      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2212      	movs	r2, #18
 8003578:	701a      	strb	r2, [r3, #0]
        break;
 800357a:	e004      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
        break;
 8003582:	e000      	b.n	8003586 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003584:	bf00      	nop

  return ret;
 8003586:	697b      	ldr	r3, [r7, #20]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800359c:	f107 0208 	add.w	r2, r7, #8
 80035a0:	2301      	movs	r3, #1
 80035a2:	2121      	movs	r1, #33	; 0x21
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fdab 	bl	8003100 <lis2dw12_read_reg>
 80035aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	7a3b      	ldrb	r3, [r7, #8]
 80035bc:	f362 03c3 	bfi	r3, r2, #3, #1
 80035c0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80035c2:	f107 0208 	add.w	r2, r7, #8
 80035c6:	2301      	movs	r3, #1
 80035c8:	2121      	movs	r1, #33	; 0x21
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fdb0 	bl	8003130 <lis2dw12_write_reg>
 80035d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80035e8:	f107 0208 	add.w	r2, r7, #8
 80035ec:	2301      	movs	r3, #1
 80035ee:	2125      	movs	r1, #37	; 0x25
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fd85 	bl	8003100 <lis2dw12_read_reg>
 80035f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	b2da      	uxtb	r2, r3
 8003606:	7a3b      	ldrb	r3, [r7, #8]
 8003608:	f362 1305 	bfi	r3, r2, #4, #2
 800360c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800360e:	f107 0208 	add.w	r2, r7, #8
 8003612:	2301      	movs	r3, #1
 8003614:	2125      	movs	r1, #37	; 0x25
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fd8a 	bl	8003130 <lis2dw12_write_reg>
 800361c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003632:	f107 0208 	add.w	r2, r7, #8
 8003636:	2301      	movs	r3, #1
 8003638:	2125      	movs	r1, #37	; 0x25
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fd60 	bl	8003100 <lis2dw12_read_reg>
 8003640:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003642:	7a3b      	ldrb	r3, [r7, #8]
 8003644:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b03      	cmp	r3, #3
 800364c:	d81a      	bhi.n	8003684 <lis2dw12_full_scale_get+0x5c>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <lis2dw12_full_scale_get+0x2c>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366d 	.word	0x0800366d
 800365c:	08003675 	.word	0x08003675
 8003660:	0800367d 	.word	0x0800367d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e00f      	b.n	800368c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
      break;
 8003672:	e00b      	b.n	800368c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	e007      	b.n	800368c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2203      	movs	r2, #3
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	e003      	b.n	800368c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	bf00      	nop
  }

  return ret;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop

08003698 <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 80036a2:	f107 0208 	add.w	r2, r7, #8
 80036a6:	2301      	movs	r3, #1
 80036a8:	2127      	movs	r1, #39	; 0x27
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fd28 	bl	8003100 <lis2dw12_read_reg>
 80036b0:	60f8      	str	r0, [r7, #12]
  *val = reg.drdy;
 80036b2:	7a3b      	ldrb	r3, [r7, #8]
 80036b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	701a      	strb	r2, [r3, #0]

  return ret;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80036d4:	f107 020c 	add.w	r2, r7, #12
 80036d8:	2306      	movs	r3, #6
 80036da:	2128      	movs	r1, #40	; 0x28
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fd0f 	bl	8003100 <lis2dw12_read_reg>
 80036e2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80036e4:	7b7b      	ldrb	r3, [r7, #13]
 80036e6:	b21a      	sxth	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	7b3b      	ldrb	r3, [r7, #12]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b21a      	sxth	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	3302      	adds	r3, #2
 800370c:	b212      	sxth	r2, r2
 800370e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3302      	adds	r3, #2
 8003714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003718:	b29b      	uxth	r3, r3
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	b29a      	uxth	r2, r3
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	b29b      	uxth	r3, r3
 8003722:	4413      	add	r3, r2
 8003724:	b29a      	uxth	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3302      	adds	r3, #2
 800372a:	b212      	sxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800372e:	7c7a      	ldrb	r2, [r7, #17]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	3304      	adds	r3, #4
 8003734:	b212      	sxth	r2, r2
 8003736:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	3304      	adds	r3, #4
 800373c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003740:	b29b      	uxth	r3, r3
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	b29a      	uxth	r2, r3
 8003746:	7c3b      	ldrb	r3, [r7, #16]
 8003748:	b29b      	uxth	r3, r3
 800374a:	4413      	add	r3, r2
 800374c:	b29a      	uxth	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	b212      	sxth	r2, r2
 8003754:	801a      	strh	r2, [r3, #0]

  return ret;
 8003756:	697b      	ldr	r3, [r7, #20]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800376a:	2301      	movs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	210f      	movs	r1, #15
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fcc5 	bl	8003100 <lis2dw12_read_reg>
 8003776:	60f8      	str	r0, [r7, #12]

  return ret;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2121      	movs	r1, #33	; 0x21
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fcb2 	bl	8003100 <lis2dw12_read_reg>
 800379c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	7a3b      	ldrb	r3, [r7, #8]
 80037ae:	f362 0382 	bfi	r3, r2, #2, #1
 80037b2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80037b4:	f107 0208 	add.w	r2, r7, #8
 80037b8:	2301      	movs	r3, #1
 80037ba:	2121      	movs	r1, #33	; 0x21
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fcb7 	bl	8003130 <lis2dw12_write_reg>
 80037c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80037da:	f107 0208 	add.w	r2, r7, #8
 80037de:	2301      	movs	r3, #1
 80037e0:	212e      	movs	r1, #46	; 0x2e
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fc8c 	bl	8003100 <lis2dw12_read_reg>
 80037e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	7a3b      	ldrb	r3, [r7, #8]
 80037fa:	f362 1347 	bfi	r3, r2, #5, #3
 80037fe:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	2301      	movs	r3, #1
 8003806:	212e      	movs	r1, #46	; 0x2e
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fc91 	bl	8003130 <lis2dw12_write_reg>
 800380e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003810:	68fb      	ldr	r3, [r7, #12]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e063      	b.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	7b1a      	ldrb	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <LIS2MDL_RegisterBusIO+0xf0>)
 8003874:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <LIS2MDL_RegisterBusIO+0xf4>)
 800387a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e036      	b.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4798      	blx	r3
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e02c      	b.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d123      	bne.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10d      	bne.n	80038dc <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80038c0:	2334      	movs	r3, #52	; 0x34
 80038c2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80038c4:	7afb      	ldrb	r3, [r7, #11]
 80038c6:	461a      	mov	r2, r3
 80038c8:	2162      	movs	r1, #98	; 0x62
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fb45 	bl	8003f5a <LIS2MDL_Write_Reg>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d014      	beq.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	e012      	b.n	8003902 <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d101      	bne.n	80038e8 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	e00c      	b.n	8003902 <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	331c      	adds	r3, #28
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 ffe1 	bl	80048b6 <lis2mdl_i2c_interface_set>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e000      	b.n	8003902 <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	0800400f 	.word	0x0800400f
 8003910:	08004091 	.word	0x08004091

08003914 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d144      	bne.n	80039ae <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	2301      	movs	r3, #1
 800392a:	2162      	movs	r1, #98	; 0x62
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fbf0 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	e06c      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800393e:	f107 020c 	add.w	r2, r7, #12
 8003942:	2301      	movs	r3, #1
 8003944:	2160      	movs	r1, #96	; 0x60
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fbe3 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e05f      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003958:	7a3b      	ldrb	r3, [r7, #8]
 800395a:	f043 0310 	orr.w	r3, r3, #16
 800395e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003960:	7a3b      	ldrb	r3, [r7, #8]
 8003962:	f36f 0341 	bfc	r3, #1, #1
 8003966:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003968:	7b3b      	ldrb	r3, [r7, #12]
 800396a:	2202      	movs	r2, #2
 800396c:	f362 0301 	bfi	r3, r2, #0, #2
 8003970:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003972:	7b3b      	ldrb	r3, [r7, #12]
 8003974:	f043 030c 	orr.w	r3, r3, #12
 8003978:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800397a:	f107 0208 	add.w	r2, r7, #8
 800397e:	2301      	movs	r3, #1
 8003980:	2162      	movs	r1, #98	; 0x62
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fd04 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e041      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003994:	f107 020c 	add.w	r2, r7, #12
 8003998:	2301      	movs	r3, #1
 800399a:	2160      	movs	r1, #96	; 0x60
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fcf7 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d032      	beq.n	8003a0e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ac:	e034      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	331c      	adds	r3, #28
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 febd 	bl	8004734 <lis2mdl_block_data_update_set>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	e028      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	331c      	adds	r3, #28
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fe2d 	bl	800462c <lis2mdl_operating_mode_set>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e01c      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	331c      	adds	r3, #28
 80039e2:	2103      	movs	r1, #3
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fe47 	bl	8004678 <lis2mdl_data_rate_set>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	e010      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	331c      	adds	r3, #28
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 ff34 	bl	800486a <lis2mdl_self_test_set>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	e004      	b.n	8003a18 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8a5 	bl	8003b78 <LIS2MDL_MAG_Disable>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e004      	b.n	8003a44 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d10b      	bne.n	8003a76 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003a5e:	2301      	movs	r3, #1
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	214f      	movs	r1, #79	; 0x4f
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fb54 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	e00c      	b.n	8003a90 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	331c      	adds	r3, #28
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fee3 	bl	8004848 <lis2mdl_device_id_get>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	e000      	b.n	8003a90 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2232      	movs	r2, #50	; 0x32
 8003aca:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <LIS2MDL_GetCapabilities+0x58>)
 8003ae0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	42c80000 	.word	0x42c80000

08003af4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e032      	b.n	8003b70 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d11d      	bne.n	8003b4e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b12:	f107 020c 	add.w	r2, r7, #12
 8003b16:	2301      	movs	r3, #1
 8003b18:	2160      	movs	r1, #96	; 0x60
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 faf9 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e021      	b.n	8003b70 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003b2c:	7b3b      	ldrb	r3, [r7, #12]
 8003b2e:	f36f 0301 	bfc	r3, #0, #2
 8003b32:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b34:	f107 020c 	add.w	r2, r7, #12
 8003b38:	2301      	movs	r3, #1
 8003b3a:	2160      	movs	r1, #96	; 0x60
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fc27 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	e010      	b.n	8003b70 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	331c      	adds	r3, #28
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd69 	bl	800462c <lis2mdl_operating_mode_set>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	e004      	b.n	8003b70 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e033      	b.n	8003bf6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d11e      	bne.n	8003bd4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b96:	f107 020c 	add.w	r2, r7, #12
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2160      	movs	r1, #96	; 0x60
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fab7 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e022      	b.n	8003bf6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003bb0:	7b3b      	ldrb	r3, [r7, #12]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f362 0301 	bfi	r3, r2, #0, #2
 8003bb8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003bba:	f107 020c 	add.w	r2, r7, #12
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	2160      	movs	r1, #96	; 0x60
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fbe4 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e010      	b.n	8003bf6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	331c      	adds	r3, #28
 8003bd8:	2102      	movs	r1, #2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fd26 	bl	800462c <lis2mdl_operating_mode_set>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e004      	b.n	8003bf6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003c0e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	331c      	adds	r3, #28
 8003c32:	f107 020b 	add.w	r2, r7, #11
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd43 	bl	80046c4 <lis2mdl_data_rate_get>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e023      	b.n	8003c92 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d81b      	bhi.n	8003c88 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c71 	.word	0x08003c71
 8003c60:	08003c79 	.word	0x08003c79
 8003c64:	08003c81 	.word	0x08003c81
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003c6c:	601a      	str	r2, [r3, #0]
      break;
 8003c6e:	e00f      	b.n	8003c90 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003c74:	601a      	str	r2, [r3, #0]
      break;
 8003c76:	e00b      	b.n	8003c90 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003c7c:	601a      	str	r2, [r3, #0]
      break;
 8003c7e:	e007      	b.n	8003c90 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003c84:	601a      	str	r2, [r3, #0]
      break;
 8003c86:	e003      	b.n	8003c90 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	60fb      	str	r3, [r7, #12]
      break;
 8003c8e:	bf00      	nop
  }

  return ret;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	41200000 	.word	0x41200000
 8003ca0:	41a00000 	.word	0x41a00000
 8003ca4:	42480000 	.word	0x42480000
 8003ca8:	42c80000 	.word	0x42c80000

08003cac <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003cb8:	edd7 7a00 	vldr	s15, [r7]
 8003cbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	d801      	bhi.n	8003cce <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e016      	b.n	8003cfc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003cce:	edd7 7a00 	vldr	s15, [r7]
 8003cd2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cde:	d801      	bhi.n	8003ce4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e00b      	b.n	8003cfc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003ce4:	edd7 7a00 	vldr	s15, [r7]
 8003ce8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d70 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf4:	d801      	bhi.n	8003cfa <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e000      	b.n	8003cfc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003cfa:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003cfc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d121      	bne.n	8003d4a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d06:	f107 020c 	add.w	r2, r7, #12
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	2160      	movs	r1, #96	; 0x60
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9ff 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	e022      	b.n	8003d66 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	7b3b      	ldrb	r3, [r7, #12]
 8003d2a:	f362 0383 	bfi	r3, r2, #2, #2
 8003d2e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d30:	f107 020c 	add.w	r2, r7, #12
 8003d34:	2301      	movs	r3, #1
 8003d36:	2160      	movs	r1, #96	; 0x60
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb29 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00f      	beq.n	8003d64 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	e00d      	b.n	8003d66 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	331c      	adds	r3, #28
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc90 	bl	8004678 <lis2mdl_data_rate_set>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	e000      	b.n	8003d66 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	42480000 	.word	0x42480000

08003d74 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2232      	movs	r2, #50	; 0x32
 8003d82:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	331c      	adds	r3, #28
 8003db8:	f107 0208 	add.w	r2, r7, #8
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fcf7 	bl	80047b2 <lis2mdl_magnetic_raw_get>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e00c      	b.n	8003dea <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003dd0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003dd8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003de0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b088      	sub	sp, #32
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d137      	bne.n	8003e74 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003e04:	f107 0218 	add.w	r2, r7, #24
 8003e08:	2306      	movs	r3, #6
 8003e0a:	2168      	movs	r1, #104	; 0x68
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f980 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	e06f      	b.n	8003efe <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003e1e:	7e7b      	ldrb	r3, [r7, #25]
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003e24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	7e3b      	ldrb	r3, [r7, #24]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003e3a:	7efb      	ldrb	r3, [r7, #27]
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003e40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	7ebb      	ldrb	r3, [r7, #26]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003e56:	7f7b      	ldrb	r3, [r7, #29]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003e5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	7f3b      	ldrb	r3, [r7, #28]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	82bb      	strh	r3, [r7, #20]
 8003e72:	e00d      	b.n	8003e90 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	331c      	adds	r3, #28
 8003e78:	f107 0210 	add.w	r2, r7, #16
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fc97 	bl	80047b2 <lis2mdl_magnetic_raw_get>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e036      	b.n	8003efe <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff feb1 	bl	8003bfe <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb4:	ee17 2a90 	vmov	r2, s15
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ebc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed4:	ee17 2a90 	vmov	r2, s15
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003edc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef4:	ee17 2a90 	vmov	r2, s15
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <LIS2MDL_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Read_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	72fb      	strb	r3, [r7, #11]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d10b      	bne.n	8003f34 <LIS2MDL_Read_Reg+0x2e>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, Reg, Data, 1) != LIS2MDL_OK)
 8003f1c:	7af9      	ldrb	r1, [r7, #11]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f8f5 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f32:	e00e      	b.n	8003f52 <LIS2MDL_Read_Reg+0x4c>
    }
  }
  else
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2MDL_OK)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f103 001c 	add.w	r0, r3, #28
 8003f3a:	7af9      	ldrb	r1, [r7, #11]
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	f000 fb44 	bl	80045cc <lis2mdl_read_reg>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e000      	b.n	8003f52 <LIS2MDL_Read_Reg+0x4c>
    }
  }

  return LIS2MDL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	70fb      	strb	r3, [r7, #3]
 8003f66:	4613      	mov	r3, r2
 8003f68:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d10b      	bne.n	8003f8a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003f72:	1cba      	adds	r2, r7, #2
 8003f74:	78f9      	ldrb	r1, [r7, #3]
 8003f76:	2301      	movs	r3, #1
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fa09 	bl	8004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	e00e      	b.n	8003fa8 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f103 001c 	add.w	r0, r3, #28
 8003f90:	1cba      	adds	r2, r7, #2
 8003f92:	78f9      	ldrb	r1, [r7, #3]
 8003f94:	2301      	movs	r3, #1
 8003f96:	f000 fb31 	bl	80045fc <lis2mdl_write_reg>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e000      	b.n	8003fa8 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <LIS2MDL_MAG_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Get_DRDY_Status(LIS2MDL_Object_t *pObj, uint8_t *Status)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  lis2mdl_status_reg_t reg;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d114      	bne.n	8003fec <LIS2MDL_MAG_Get_DRDY_Status+0x3c>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_STATUS_REG, (uint8_t *)&reg, 1) != LIS2MDL_OK)
 8003fc2:	f107 020c 	add.w	r2, r7, #12
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2167      	movs	r1, #103	; 0x67
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8a1 	bl	8004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <LIS2MDL_MAG_Get_DRDY_Status+0x2c>
    {
      return LIS2MDL_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e014      	b.n	8004006 <LIS2MDL_MAG_Get_DRDY_Status+0x56>
    }
    *Status = reg.zyxda;
 8003fdc:	7b3b      	ldrb	r3, [r7, #12]
 8003fde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e00b      	b.n	8004004 <LIS2MDL_MAG_Get_DRDY_Status+0x54>
  }
  else
  {
    if (lis2mdl_mag_data_ready_get(&(pObj->Ctx), Status) != LIS2MDL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	331c      	adds	r3, #28
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fbc4 	bl	8004780 <lis2mdl_mag_data_ready_get>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <LIS2MDL_MAG_Get_DRDY_Status+0x54>
    {
      return LIS2MDL_ERROR;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	e000      	b.n	8004006 <LIS2MDL_MAG_Get_DRDY_Status+0x56>
    }
  }

  return LIS2MDL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800400e:	b590      	push	{r4, r7, lr}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	460b      	mov	r3, r1
 800401c:	72fb      	strb	r3, [r7, #11]
 800401e:	4613      	mov	r3, r2
 8004020:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10e      	bne.n	800404c <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	695c      	ldr	r4, [r3, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	7b1b      	ldrb	r3, [r3, #12]
 8004036:	b298      	uxth	r0, r3
 8004038:	7afb      	ldrb	r3, [r7, #11]
 800403a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800403e:	b2db      	uxtb	r3, r3
 8004040:	b299      	uxth	r1, r3
 8004042:	893b      	ldrh	r3, [r7, #8]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	47a0      	blx	r4
 8004048:	4603      	mov	r3, r0
 800404a:	e01d      	b.n	8004088 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d10b      	bne.n	800406c <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	695c      	ldr	r4, [r3, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	7b1b      	ldrb	r3, [r3, #12]
 800405c:	b298      	uxth	r0, r3
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	b299      	uxth	r1, r3
 8004062:	893b      	ldrh	r3, [r7, #8]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	47a0      	blx	r4
 8004068:	4603      	mov	r3, r0
 800406a:	e00d      	b.n	8004088 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	695c      	ldr	r4, [r3, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	7b1b      	ldrb	r3, [r3, #12]
 8004074:	b298      	uxth	r0, r3
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407c:	b2db      	uxtb	r3, r3
 800407e:	b299      	uxth	r1, r3
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	47a0      	blx	r4
 8004086:	4603      	mov	r3, r0
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
 80040a0:	4613      	mov	r3, r2
 80040a2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	691c      	ldr	r4, [r3, #16]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	7b1b      	ldrb	r3, [r3, #12]
 80040b8:	b298      	uxth	r0, r3
 80040ba:	7afb      	ldrb	r3, [r7, #11]
 80040bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b299      	uxth	r1, r3
 80040c4:	893b      	ldrh	r3, [r7, #8]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	47a0      	blx	r4
 80040ca:	4603      	mov	r3, r0
 80040cc:	e01d      	b.n	800410a <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d10b      	bne.n	80040ee <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	691c      	ldr	r4, [r3, #16]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	7b1b      	ldrb	r3, [r3, #12]
 80040de:	b298      	uxth	r0, r3
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	b299      	uxth	r1, r3
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	47a0      	blx	r4
 80040ea:	4603      	mov	r3, r0
 80040ec:	e00d      	b.n	800410a <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	691c      	ldr	r4, [r3, #16]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	7b1b      	ldrb	r3, [r3, #12]
 80040f6:	b298      	uxth	r0, r3
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	b299      	uxth	r1, r3
 8004102:	893b      	ldrh	r3, [r7, #8]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	47a0      	blx	r4
 8004108:	4603      	mov	r3, r0
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}

08004112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b08c      	sub	sp, #48	; 0x30
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	461a      	mov	r2, r3
 800411e:	460b      	mov	r3, r1
 8004120:	72fb      	strb	r3, [r7, #11]
 8004122:	4613      	mov	r3, r2
 8004124:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800412c:	2340      	movs	r3, #64	; 0x40
 800412e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004138:	233d      	movs	r3, #61	; 0x3d
 800413a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800413c:	2315      	movs	r3, #21
 800413e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004142:	2316      	movs	r3, #22
 8004144:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004148:	2317      	movs	r3, #23
 800414a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 800414e:	2314      	movs	r3, #20
 8004150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004154:	2344      	movs	r3, #68	; 0x44
 8004156:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004158:	2302      	movs	r3, #2
 800415a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800415e:	2339      	movs	r3, #57	; 0x39
 8004160:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800416a:	2329      	movs	r3, #41	; 0x29
 800416c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004170:	231e      	movs	r3, #30
 8004172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004182:	2310      	movs	r3, #16
 8004184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800418e:	2340      	movs	r3, #64	; 0x40
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f103 001c 	add.w	r0, r3, #28
 800419a:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800419e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80041a2:	2301      	movs	r3, #1
 80041a4:	f000 fa2a 	bl	80045fc <lis2mdl_write_reg>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	e0e9      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f103 001c 	add.w	r0, r3, #28
 80041ba:	f107 021f 	add.w	r2, r7, #31
 80041be:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80041c2:	2301      	movs	r3, #1
 80041c4:	f000 fa1a 	bl	80045fc <lis2mdl_write_reg>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e0d9      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f103 001c 	add.w	r0, r3, #28
 80041da:	f107 020b 	add.w	r2, r7, #11
 80041de:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80041e2:	2301      	movs	r3, #1
 80041e4:	f000 fa0a 	bl	80045fc <lis2mdl_write_reg>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	e0c9      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f103 001c 	add.w	r0, r3, #28
 80041fa:	f107 021d 	add.w	r2, r7, #29
 80041fe:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004202:	2301      	movs	r3, #1
 8004204:	f000 f9fa 	bl	80045fc <lis2mdl_write_reg>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	e0b9      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f103 001c 	add.w	r0, r3, #28
 800421a:	f107 021e 	add.w	r2, r7, #30
 800421e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004222:	2301      	movs	r3, #1
 8004224:	f000 f9ea 	bl	80045fc <lis2mdl_write_reg>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295
 8004232:	e0a9      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f103 001c 	add.w	r0, r3, #28
 800423a:	f107 0220 	add.w	r2, r7, #32
 800423e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004242:	2301      	movs	r3, #1
 8004244:	f000 f9da 	bl	80045fc <lis2mdl_write_reg>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e099      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f103 001c 	add.w	r0, r3, #28
 800425a:	f107 021c 	add.w	r2, r7, #28
 800425e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004262:	2301      	movs	r3, #1
 8004264:	f000 f9b2 	bl	80045cc <lis2mdl_read_reg>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	e089      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004274:	7f3b      	ldrb	r3, [r7, #28]
 8004276:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800427a:	429a      	cmp	r2, r3
 800427c:	d102      	bne.n	8004284 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800427e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004282:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f103 001c 	add.w	r0, r3, #28
 800428a:	f107 021c 	add.w	r2, r7, #28
 800428e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004292:	2301      	movs	r3, #1
 8004294:	f000 f9b2 	bl	80045fc <lis2mdl_write_reg>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	e071      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f103 001c 	add.w	r0, r3, #28
 80042aa:	f107 0214 	add.w	r2, r7, #20
 80042ae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80042b2:	2306      	movs	r3, #6
 80042b4:	f000 f98a 	bl	80045cc <lis2mdl_read_reg>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	e061      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f103 001c 	add.w	r0, r3, #28
 80042ca:	f107 021b 	add.w	r2, r7, #27
 80042ce:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80042d2:	2301      	movs	r3, #1
 80042d4:	f000 f97a 	bl	80045cc <lis2mdl_read_reg>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	e051      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80042e4:	7efa      	ldrb	r2, [r7, #27]
 80042e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042ea:	4013      	ands	r3, r2
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d1e6      	bne.n	80042c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f103 001c 	add.w	r0, r3, #28
 80042fc:	f107 021b 	add.w	r2, r7, #27
 8004300:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004304:	2301      	movs	r3, #1
 8004306:	f000 f961 	bl	80045cc <lis2mdl_read_reg>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	e038      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004316:	7efa      	ldrb	r2, [r7, #27]
 8004318:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800431c:	4013      	ands	r3, r2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004324:	429a      	cmp	r2, r3
 8004326:	d1e6      	bne.n	80042f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f103 001c 	add.w	r0, r3, #28
 800432e:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004332:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004336:	2301      	movs	r3, #1
 8004338:	f000 f960 	bl	80045fc <lis2mdl_write_reg>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	e01f      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f103 001c 	add.w	r0, r3, #28
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	f000 f939 	bl	80045cc <lis2mdl_read_reg>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e010      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f103 001c 	add.w	r0, r3, #28
 800436c:	f107 0220 	add.w	r2, r7, #32
 8004370:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004374:	2301      	movs	r3, #1
 8004376:	f000 f941 	bl	80045fc <lis2mdl_write_reg>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004380:	f04f 33ff 	mov.w	r3, #4294967295
 8004384:	e000      	b.n	8004388 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3730      	adds	r7, #48	; 0x30
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	461a      	mov	r2, r3
 800439c:	460b      	mov	r3, r1
 800439e:	72fb      	strb	r3, [r7, #11]
 80043a0:	4613      	mov	r3, r2
 80043a2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80043aa:	2340      	movs	r3, #64	; 0x40
 80043ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80043b6:	233c      	movs	r3, #60	; 0x3c
 80043b8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80043ba:	2315      	movs	r3, #21
 80043bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80043c0:	2316      	movs	r3, #22
 80043c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80043c6:	2317      	movs	r3, #23
 80043c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80043d0:	2314      	movs	r3, #20
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80043d6:	2344      	movs	r3, #68	; 0x44
 80043d8:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80043da:	2339      	movs	r3, #57	; 0x39
 80043dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80043e6:	2329      	movs	r3, #41	; 0x29
 80043e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80043ec:	231e      	movs	r3, #30
 80043ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80043f8:	2310      	movs	r3, #16
 80043fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 800440a:	230e      	movs	r3, #14
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f103 001c 	add.w	r0, r3, #28
 8004416:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800441a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800441e:	2301      	movs	r3, #1
 8004420:	f000 f8ec 	bl	80045fc <lis2mdl_write_reg>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e0c9      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f103 001c 	add.w	r0, r3, #28
 8004436:	f107 021f 	add.w	r2, r7, #31
 800443a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800443e:	2301      	movs	r3, #1
 8004440:	f000 f8dc 	bl	80045fc <lis2mdl_write_reg>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e0b9      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f103 001c 	add.w	r0, r3, #28
 8004456:	f107 020b 	add.w	r2, r7, #11
 800445a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800445e:	2301      	movs	r3, #1
 8004460:	f000 f8cc 	bl	80045fc <lis2mdl_write_reg>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	e0a9      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f103 001c 	add.w	r0, r3, #28
 8004476:	f107 021e 	add.w	r2, r7, #30
 800447a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800447e:	2301      	movs	r3, #1
 8004480:	f000 f8bc 	bl	80045fc <lis2mdl_write_reg>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	e099      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f103 001c 	add.w	r0, r3, #28
 8004496:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800449a:	2301      	movs	r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f000 f8ad 	bl	80045fc <lis2mdl_write_reg>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e08a      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f103 001c 	add.w	r0, r3, #28
 80044b4:	f107 021d 	add.w	r2, r7, #29
 80044b8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80044bc:	2301      	movs	r3, #1
 80044be:	f000 f89d 	bl	80045fc <lis2mdl_write_reg>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e07a      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f103 001c 	add.w	r0, r3, #28
 80044d4:	f107 0220 	add.w	r2, r7, #32
 80044d8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80044dc:	2301      	movs	r3, #1
 80044de:	f000 f88d 	bl	80045fc <lis2mdl_write_reg>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	e06a      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f103 001c 	add.w	r0, r3, #28
 80044f4:	f107 021c 	add.w	r2, r7, #28
 80044f8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80044fc:	2301      	movs	r3, #1
 80044fe:	f000 f865 	bl	80045cc <lis2mdl_read_reg>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	e05a      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800450e:	7f3b      	ldrb	r3, [r7, #28]
 8004510:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004514:	429a      	cmp	r2, r3
 8004516:	d102      	bne.n	800451e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800451c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f103 001c 	add.w	r0, r3, #28
 8004524:	f107 021c 	add.w	r2, r7, #28
 8004528:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800452c:	2301      	movs	r3, #1
 800452e:	f000 f865 	bl	80045fc <lis2mdl_write_reg>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	e042      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f103 001c 	add.w	r0, r3, #28
 8004544:	f107 0214 	add.w	r2, r7, #20
 8004548:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800454c:	2306      	movs	r3, #6
 800454e:	f000 f83d 	bl	80045cc <lis2mdl_read_reg>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e032      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f103 001c 	add.w	r0, r3, #28
 8004564:	f107 021b 	add.w	r2, r7, #27
 8004568:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800456c:	2301      	movs	r3, #1
 800456e:	f000 f82d 	bl	80045cc <lis2mdl_read_reg>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	e022      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800457e:	7efa      	ldrb	r2, [r7, #27]
 8004580:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004584:	4013      	ands	r3, r2
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800458c:	429a      	cmp	r2, r3
 800458e:	d1e6      	bne.n	800455e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f103 001c 	add.w	r0, r3, #28
 8004596:	f107 021b 	add.w	r2, r7, #27
 800459a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800459e:	2301      	movs	r3, #1
 80045a0:	f000 f814 	bl	80045cc <lis2mdl_read_reg>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	e009      	b.n	80045c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80045b0:	7efa      	ldrb	r2, [r7, #27]
 80045b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80045b6:	4013      	ands	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80045be:	429a      	cmp	r2, r3
 80045c0:	d1e6      	bne.n	8004590 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3730      	adds	r7, #48	; 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	461a      	mov	r2, r3
 80045d8:	460b      	mov	r3, r1
 80045da:	72fb      	strb	r3, [r7, #11]
 80045dc:	4613      	mov	r3, r2
 80045de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685c      	ldr	r4, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6898      	ldr	r0, [r3, #8]
 80045e8:	893b      	ldrh	r3, [r7, #8]
 80045ea:	7af9      	ldrb	r1, [r7, #11]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	47a0      	blx	r4
 80045f0:	6178      	str	r0, [r7, #20]

  return ret;
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd90      	pop	{r4, r7, pc}

080045fc <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	460b      	mov	r3, r1
 800460a:	72fb      	strb	r3, [r7, #11]
 800460c:	4613      	mov	r3, r2
 800460e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681c      	ldr	r4, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6898      	ldr	r0, [r3, #8]
 8004618:	893b      	ldrh	r3, [r7, #8]
 800461a:	7af9      	ldrb	r1, [r7, #11]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	47a0      	blx	r4
 8004620:	6178      	str	r0, [r7, #20]

  return ret;
 8004622:	697b      	ldr	r3, [r7, #20]
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd90      	pop	{r4, r7, pc}

0800462c <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	2301      	movs	r3, #1
 800463e:	2160      	movs	r1, #96	; 0x60
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ffc3 	bl	80045cc <lis2mdl_read_reg>
 8004646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	b2da      	uxtb	r2, r3
 8004656:	7a3b      	ldrb	r3, [r7, #8]
 8004658:	f362 0301 	bfi	r3, r2, #0, #2
 800465c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800465e:	f107 0208 	add.w	r2, r7, #8
 8004662:	2301      	movs	r3, #1
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ffc8 	bl	80045fc <lis2mdl_write_reg>
 800466c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004684:	f107 0208 	add.w	r2, r7, #8
 8004688:	2301      	movs	r3, #1
 800468a:	2160      	movs	r1, #96	; 0x60
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff9d 	bl	80045cc <lis2mdl_read_reg>
 8004692:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	7a3b      	ldrb	r3, [r7, #8]
 80046a4:	f362 0383 	bfi	r3, r2, #2, #2
 80046a8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80046aa:	f107 0208 	add.w	r2, r7, #8
 80046ae:	2301      	movs	r3, #1
 80046b0:	2160      	movs	r1, #96	; 0x60
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ffa2 	bl	80045fc <lis2mdl_write_reg>
 80046b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80046ce:	f107 0208 	add.w	r2, r7, #8
 80046d2:	2301      	movs	r3, #1
 80046d4:	2160      	movs	r1, #96	; 0x60
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ff78 	bl	80045cc <lis2mdl_read_reg>
 80046dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80046de:	7a3b      	ldrb	r3, [r7, #8]
 80046e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d81a      	bhi.n	8004720 <lis2mdl_data_rate_get+0x5c>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <lis2mdl_data_rate_get+0x2c>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004709 	.word	0x08004709
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
      break;
 8004706:	e00f      	b.n	8004728 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
      break;
 800470e:	e00b      	b.n	8004728 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2202      	movs	r2, #2
 8004714:	701a      	strb	r2, [r3, #0]
      break;
 8004716:	e007      	b.n	8004728 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2203      	movs	r2, #3
 800471c:	701a      	strb	r2, [r3, #0]
      break;
 800471e:	e003      	b.n	8004728 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
      break;
 8004726:	bf00      	nop
  }

  return ret;
 8004728:	68fb      	ldr	r3, [r7, #12]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop

08004734 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004740:	f107 0208 	add.w	r2, r7, #8
 8004744:	2301      	movs	r3, #1
 8004746:	2162      	movs	r1, #98	; 0x62
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff3f 	bl	80045cc <lis2mdl_read_reg>
 800474e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	7a3b      	ldrb	r3, [r7, #8]
 8004760:	f362 1304 	bfi	r3, r2, #4, #1
 8004764:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004766:	f107 0208 	add.w	r2, r7, #8
 800476a:	2301      	movs	r3, #1
 800476c:	2162      	movs	r1, #98	; 0x62
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff44 	bl	80045fc <lis2mdl_write_reg>
 8004774:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004776:	68fb      	ldr	r3, [r7, #12]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <lis2mdl_mag_data_ready_get>:
  * @param  val   change the values of zyxda in reg STATUS_REG.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  lis2mdl_status_reg_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_STATUS_REG, (uint8_t *)&reg, 1);
 800478a:	f107 0208 	add.w	r2, r7, #8
 800478e:	2301      	movs	r3, #1
 8004790:	2167      	movs	r1, #103	; 0x67
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ff1a 	bl	80045cc <lis2mdl_read_reg>
 8004798:	60f8      	str	r0, [r7, #12]
  *val = reg.zyxda;
 800479a:	7a3b      	ldrb	r3, [r7, #8]
 800479c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	701a      	strb	r2, [r3, #0]

  return ret;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80047bc:	f107 020c 	add.w	r2, r7, #12
 80047c0:	2306      	movs	r3, #6
 80047c2:	2168      	movs	r1, #104	; 0x68
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff01 	bl	80045cc <lis2mdl_read_reg>
 80047ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80047cc:	7b7b      	ldrb	r3, [r7, #13]
 80047ce:	b21a      	sxth	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b29a      	uxth	r2, r3
 80047e0:	7b3b      	ldrb	r3, [r7, #12]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	b21a      	sxth	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3302      	adds	r3, #2
 80047f4:	b212      	sxth	r2, r2
 80047f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	3302      	adds	r3, #2
 80047fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004800:	b29b      	uxth	r3, r3
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	b29a      	uxth	r2, r3
 8004806:	7bbb      	ldrb	r3, [r7, #14]
 8004808:	b29b      	uxth	r3, r3
 800480a:	4413      	add	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	3302      	adds	r3, #2
 8004812:	b212      	sxth	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004816:	7c7a      	ldrb	r2, [r7, #17]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3304      	adds	r3, #4
 800481c:	b212      	sxth	r2, r2
 800481e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004828:	b29b      	uxth	r3, r3
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	b29a      	uxth	r2, r3
 800482e:	7c3b      	ldrb	r3, [r7, #16]
 8004830:	b29b      	uxth	r3, r3
 8004832:	4413      	add	r3, r2
 8004834:	b29a      	uxth	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	b212      	sxth	r2, r2
 800483c:	801a      	strh	r2, [r3, #0]

  return ret;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004852:	2301      	movs	r3, #1
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	214f      	movs	r1, #79	; 0x4f
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff feb7 	bl	80045cc <lis2mdl_read_reg>
 800485e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004876:	f107 0208 	add.w	r2, r7, #8
 800487a:	2301      	movs	r3, #1
 800487c:	2162      	movs	r1, #98	; 0x62
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fea4 	bl	80045cc <lis2mdl_read_reg>
 8004884:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	7a3b      	ldrb	r3, [r7, #8]
 8004896:	f362 0341 	bfi	r3, r2, #1, #1
 800489a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800489c:	f107 0208 	add.w	r2, r7, #8
 80048a0:	2301      	movs	r3, #1
 80048a2:	2162      	movs	r1, #98	; 0x62
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fea9 	bl	80045fc <lis2mdl_write_reg>
 80048aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048ac:	68fb      	ldr	r3, [r7, #12]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80048c2:	f107 0208 	add.w	r2, r7, #8
 80048c6:	2301      	movs	r3, #1
 80048c8:	2162      	movs	r1, #98	; 0x62
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fe7e 	bl	80045cc <lis2mdl_read_reg>
 80048d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	7a3b      	ldrb	r3, [r7, #8]
 80048e2:	f362 1345 	bfi	r3, r2, #5, #1
 80048e6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80048e8:	f107 0208 	add.w	r2, r7, #8
 80048ec:	2301      	movs	r3, #1
 80048ee:	2162      	movs	r1, #98	; 0x62
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fe83 	bl	80045fc <lis2mdl_write_reg>
 80048f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e04d      	b.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	7b1a      	ldrb	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <LSM6DSO_RegisterBusIO+0xc4>)
 800495c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <LSM6DSO_RegisterBusIO+0xc8>)
 8004962:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e020      	b.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4798      	blx	r3
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e016      	b.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d112      	bne.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10d      	bne.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80049a0:	230c      	movs	r3, #12
 80049a2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80049a4:	7afb      	ldrb	r3, [r7, #11]
 80049a6:	461a      	mov	r2, r3
 80049a8:	2112      	movs	r1, #18
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 ff73 	bl	8005896 <LSM6DSO_Write_Reg>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	08005d91 	.word	0x08005d91
 80049cc:	08005dc7 	.word	0x08005dc7

080049d0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	331c      	adds	r3, #28
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 ff0f 	bl	8006802 <lsm6dso_i3c_disable_set>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	e060      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	331c      	adds	r3, #28
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 fedd 	bl	80067b6 <lsm6dso_auto_increment_set>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e054      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	331c      	adds	r3, #28
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fdac 	bl	800656c <lsm6dso_block_data_update_set>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	e048      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	331c      	adds	r3, #28
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 ff31 	bl	800688e <lsm6dso_fifo_mode_set>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	e03c      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	331c      	adds	r3, #28
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fa66 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	e02c      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	331c      	adds	r3, #28
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f9fc 	bl	8005e5c <lsm6dso_xl_full_scale_set>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	e020      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2204      	movs	r2, #4
 8004a74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	331c      	adds	r3, #28
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 fc16 	bl	80062b0 <lsm6dso_gy_data_rate_set>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	e010      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	331c      	adds	r3, #28
 8004a94:	2106      	movs	r1, #6
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fba2 	bl	80061e0 <lsm6dso_gy_full_scale_set>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	e004      	b.n	8004ab2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f888 	bl	8004bd8 <LSM6DSO_ACC_Disable>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e015      	b.n	8004b00 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fc2e 	bl	8005336 <LSM6DSO_GYRO_Disable>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	e00c      	b.n	8004b00 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	331c      	adds	r3, #28
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fe3b 	bl	8006794 <lsm6dso_device_id_get>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295
 8004b28:	e000      	b.n	8004b2c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b5c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2210      	movs	r2, #16
 8004b62:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4a07      	ldr	r2, [pc, #28]	; (8004b8c <LSM6DSO_GetCapabilities+0x58>)
 8004b6e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <LSM6DSO_GetCapabilities+0x58>)
 8004b74:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	45d02000 	.word	0x45d02000

08004b90 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e014      	b.n	8004bd0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f103 021c 	add.w	r2, r3, #28
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f001 f9af 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	e004      	b.n	8004bd0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e01f      	b.n	8004c2e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 021c 	add.w	r2, r3, #28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	332b      	adds	r3, #43	; 0x2b
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f001 fa88 	bl	8006110 <lsm6dso_xl_data_rate_get>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e010      	b.n	8004c2e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	331c      	adds	r3, #28
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f980 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e004      	b.n	8004c2e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	331c      	adds	r3, #28
 8004c4a:	f107 020b 	add.w	r2, r7, #11
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f929 	bl	8005ea8 <lsm6dso_xl_full_scale_get>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	e023      	b.n	8004caa <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d81b      	bhi.n	8004ca0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c91 	.word	0x08004c91
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004c84:	601a      	str	r2, [r3, #0]
      break;
 8004c86:	e00f      	b.n	8004ca8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004c8c:	601a      	str	r2, [r3, #0]
      break;
 8004c8e:	e00b      	b.n	8004ca8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004c94:	601a      	str	r2, [r3, #0]
      break;
 8004c96:	e007      	b.n	8004ca8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004c9c:	601a      	str	r2, [r3, #0]
      break;
 8004c9e:	e003      	b.n	8004ca8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	60fb      	str	r3, [r7, #12]
      break;
 8004ca6:	bf00      	nop
  }

  return ret;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	3d79db23 	.word	0x3d79db23
 8004cb8:	3df9db23 	.word	0x3df9db23
 8004cbc:	3e79db23 	.word	0x3e79db23
 8004cc0:	3ef9db23 	.word	0x3ef9db23

08004cc4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	331c      	adds	r3, #28
 8004cd6:	f107 020b 	add.w	r2, r7, #11
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fa17 	bl	8006110 <lsm6dso_xl_data_rate_get>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	e054      	b.n	8004d98 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	2b0b      	cmp	r3, #11
 8004cf2:	d84c      	bhi.n	8004d8e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d47 	.word	0x08004d47
 8004d08:	08004d4f 	.word	0x08004d4f
 8004d0c:	08004d57 	.word	0x08004d57
 8004d10:	08004d5f 	.word	0x08004d5f
 8004d14:	08004d67 	.word	0x08004d67
 8004d18:	08004d6f 	.word	0x08004d6f
 8004d1c:	08004d77 	.word	0x08004d77
 8004d20:	08004d7f 	.word	0x08004d7f
 8004d24:	08004d87 	.word	0x08004d87
 8004d28:	08004d37 	.word	0x08004d37
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
      break;
 8004d34:	e02f      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8004d3a:	601a      	str	r2, [r3, #0]
      break;
 8004d3c:	e02b      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8004d42:	601a      	str	r2, [r3, #0]
      break;
 8004d44:	e027      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8004d4a:	601a      	str	r2, [r3, #0]
      break;
 8004d4c:	e023      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4a16      	ldr	r2, [pc, #88]	; (8004dac <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8004d52:	601a      	str	r2, [r3, #0]
      break;
 8004d54:	e01f      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8004d5a:	601a      	str	r2, [r3, #0]
      break;
 8004d5c:	e01b      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004d62:	601a      	str	r2, [r3, #0]
      break;
 8004d64:	e017      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8004d6a:	601a      	str	r2, [r3, #0]
      break;
 8004d6c:	e013      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004d72:	601a      	str	r2, [r3, #0]
      break;
 8004d74:	e00f      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8004d7a:	601a      	str	r2, [r3, #0]
      break;
 8004d7c:	e00b      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004d82:	601a      	str	r2, [r3, #0]
      break;
 8004d84:	e007      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8004d8a:	601a      	str	r2, [r3, #0]
      break;
 8004d8c:	e003      	b.n	8004d96 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	60fb      	str	r3, [r7, #12]
      break;
 8004d94:	bf00      	nop
  }

  return ret;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	3fcccccd 	.word	0x3fcccccd
 8004da4:	41480000 	.word	0x41480000
 8004da8:	41d00000 	.word	0x41d00000
 8004dac:	42500000 	.word	0x42500000
 8004db0:	42d00000 	.word	0x42d00000
 8004db4:	43500000 	.word	0x43500000
 8004db8:	43d08000 	.word	0x43d08000
 8004dbc:	44504000 	.word	0x44504000
 8004dc0:	44d06000 	.word	0x44d06000
 8004dc4:	45505000 	.word	0x45505000
 8004dc8:	45d05800 	.word	0x45d05800

08004dcc <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004dd8:	2100      	movs	r1, #0
 8004dda:	ed97 0a00 	vldr	s0, [r7]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f806 	bl	8004df0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	f000 80ea 	beq.w	8004fe4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f300 8163 	bgt.w	80050dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d074      	beq.n	8004f08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004e1e:	e15d      	b.n	80050dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f103 001c 	add.w	r0, r3, #28
 8004e26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2114      	movs	r1, #20
 8004e2e:	f000 ffe5 	bl	8005dfc <lsm6dso_read_reg>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	e16c      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d025      	beq.n	8004e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10b      	bne.n	8004e6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	331c      	adds	r3, #28
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f85b 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004e68:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6c:	e154      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e72:	f36f 13c7 	bfc	r3, #7, #1
 8004e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f103 001c 	add.w	r0, r3, #28
 8004e80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004e84:	2301      	movs	r3, #1
 8004e86:	2114      	movs	r1, #20
 8004e88:	f000 ffd0 	bl	8005e2c <lsm6dso_write_reg>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	e13f      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f103 001c 	add.w	r0, r3, #28
 8004e9e:	f107 0220 	add.w	r2, r7, #32
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2115      	movs	r1, #21
 8004ea6:	f000 ffa9 	bl	8005dfc <lsm6dso_read_reg>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	e130      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d014      	beq.n	8004eee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ec8:	f36f 1304 	bfc	r3, #4, #1
 8004ecc:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f103 001c 	add.w	r0, r3, #28
 8004ed6:	f107 0220 	add.w	r2, r7, #32
 8004eda:	2301      	movs	r3, #1
 8004edc:	2115      	movs	r1, #21
 8004ede:	f000 ffa5 	bl	8005e2c <lsm6dso_write_reg>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eec:	e114      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004eee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ef2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	d400      	bmi.n	8004f02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004f00:	e0f0      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004f02:	4b87      	ldr	r3, [pc, #540]	; (8005120 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f06:	e0ed      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f103 001c 	add.w	r0, r3, #28
 8004f0e:	f107 021c 	add.w	r2, r7, #28
 8004f12:	2301      	movs	r3, #1
 8004f14:	2114      	movs	r1, #20
 8004f16:	f000 ff71 	bl	8005dfc <lsm6dso_read_reg>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	e0f8      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004f26:	7f3b      	ldrb	r3, [r7, #28]
 8004f28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d023      	beq.n	8004f7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10b      	bne.n	8004f54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	331c      	adds	r3, #28
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ffe8 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e0e1      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004f54:	7f3b      	ldrb	r3, [r7, #28]
 8004f56:	f36f 13c7 	bfc	r3, #7, #1
 8004f5a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f103 001c 	add.w	r0, r3, #28
 8004f62:	f107 021c 	add.w	r2, r7, #28
 8004f66:	2301      	movs	r3, #1
 8004f68:	2114      	movs	r1, #20
 8004f6a:	f000 ff5f 	bl	8005e2c <lsm6dso_write_reg>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	e0ce      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f103 001c 	add.w	r0, r3, #28
 8004f80:	f107 0218 	add.w	r2, r7, #24
 8004f84:	2301      	movs	r3, #1
 8004f86:	2115      	movs	r1, #21
 8004f88:	f000 ff38 	bl	8005dfc <lsm6dso_read_reg>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	e0bf      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004f98:	7e3b      	ldrb	r3, [r7, #24]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d112      	bne.n	8004fca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004fa4:	7e3b      	ldrb	r3, [r7, #24]
 8004fa6:	f043 0310 	orr.w	r3, r3, #16
 8004faa:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f103 001c 	add.w	r0, r3, #28
 8004fb2:	f107 0218 	add.w	r2, r7, #24
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	2115      	movs	r1, #21
 8004fba:	f000 ff37 	bl	8005e2c <lsm6dso_write_reg>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc8:	e0a6      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004fca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004fce:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005124 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fda:	dc00      	bgt.n	8004fde <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004fdc:	e082      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004fde:	4b52      	ldr	r3, [pc, #328]	; (8005128 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe2:	e07f      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f103 001c 	add.w	r0, r3, #28
 8004fea:	f107 0210 	add.w	r2, r7, #16
 8004fee:	2301      	movs	r3, #1
 8004ff0:	2115      	movs	r1, #21
 8004ff2:	f000 ff03 	bl	8005dfc <lsm6dso_read_reg>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e08a      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005002:	7c3b      	ldrb	r3, [r7, #16]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d012      	beq.n	8005034 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800500e:	7c3b      	ldrb	r3, [r7, #16]
 8005010:	f36f 1304 	bfc	r3, #4, #1
 8005014:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f103 001c 	add.w	r0, r3, #28
 800501c:	f107 0210 	add.w	r2, r7, #16
 8005020:	2301      	movs	r3, #1
 8005022:	2115      	movs	r1, #21
 8005024:	f000 ff02 	bl	8005e2c <lsm6dso_write_reg>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	e071      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800503a:	2b01      	cmp	r3, #1
 800503c:	d108      	bne.n	8005050 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f979 	bl	8005336 <LSM6DSO_GYRO_Disable>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	e063      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f103 001c 	add.w	r0, r3, #28
 8005056:	f107 0214 	add.w	r2, r7, #20
 800505a:	2301      	movs	r3, #1
 800505c:	2114      	movs	r1, #20
 800505e:	f000 fecd 	bl	8005dfc <lsm6dso_read_reg>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005068:	f04f 33ff 	mov.w	r3, #4294967295
 800506c:	e054      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800506e:	7d3b      	ldrb	r3, [r7, #20]
 8005070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d123      	bne.n	80050c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10b      	bne.n	800509c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	331c      	adds	r3, #28
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f000 ff44 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	e03d      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 800509c:	7d3b      	ldrb	r3, [r7, #20]
 800509e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f103 001c 	add.w	r0, r3, #28
 80050aa:	f107 0214 	add.w	r2, r7, #20
 80050ae:	2301      	movs	r3, #1
 80050b0:	2114      	movs	r1, #20
 80050b2:	f000 febb 	bl	8005e2c <lsm6dso_write_reg>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	e02a      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80050c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80050c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005124 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80050ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	dc00      	bgt.n	80050d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80050d4:	e006      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050da:	e003      	b.n	80050e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80050e2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d102      	bne.n	80050f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	e012      	b.n	8005118 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80050fc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fc0f 	bl	8005924 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005106:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005108:	e005      	b.n	8005116 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800510a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fca0 	bl	8005a54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005114:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005118:	4618      	mov	r0, r3
 800511a:	3730      	adds	r7, #48	; 0x30
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	41480000 	.word	0x41480000
 8005124:	43500000 	.word	0x43500000
 8005128:	43500000 	.word	0x43500000

0800512c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	331c      	adds	r3, #28
 800513e:	f107 020b 	add.w	r2, r7, #11
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 feaf 	bl	8005ea8 <lsm6dso_xl_full_scale_get>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005150:	f04f 33ff 	mov.w	r3, #4294967295
 8005154:	e023      	b.n	800519e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d81b      	bhi.n	8005194 <LSM6DSO_ACC_GetFullScale+0x68>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <LSM6DSO_ACC_GetFullScale+0x38>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005175 	.word	0x08005175
 8005168:	0800518d 	.word	0x0800518d
 800516c:	0800517d 	.word	0x0800517d
 8005170:	08005185 	.word	0x08005185
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2202      	movs	r2, #2
 8005178:	601a      	str	r2, [r3, #0]
      break;
 800517a:	e00f      	b.n	800519c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2204      	movs	r2, #4
 8005180:	601a      	str	r2, [r3, #0]
      break;
 8005182:	e00b      	b.n	800519c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2208      	movs	r2, #8
 8005188:	601a      	str	r2, [r3, #0]
      break;
 800518a:	e007      	b.n	800519c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2210      	movs	r2, #16
 8005190:	601a      	str	r2, [r3, #0]
      break;
 8005192:	e003      	b.n	800519c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	60fb      	str	r3, [r7, #12]
      break;
 800519a:	bf00      	nop
  }

  return ret;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop

080051a8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	dd0b      	ble.n	80051d0 <LSM6DSO_ACC_SetFullScale+0x28>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	dd06      	ble.n	80051cc <LSM6DSO_ACC_SetFullScale+0x24>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	dc01      	bgt.n	80051c8 <LSM6DSO_ACC_SetFullScale+0x20>
 80051c4:	2303      	movs	r3, #3
 80051c6:	e004      	b.n	80051d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e002      	b.n	80051d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e000      	b.n	80051d2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80051d0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80051d2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	331c      	adds	r3, #28
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fe3d 	bl	8005e5c <lsm6dso_xl_full_scale_set>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	e000      	b.n	80051f0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	331c      	adds	r3, #28
 8005206:	f107 0208 	add.w	r2, r7, #8
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fa50 	bl	80066b2 <lsm6dso_acceleration_raw_get>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005218:	f04f 33ff 	mov.w	r3, #4294967295
 800521c:	e00c      	b.n	8005238 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800521e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005226:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800522e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	331c      	adds	r3, #28
 8005254:	f107 0210 	add.w	r2, r7, #16
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fa29 	bl	80066b2 <lsm6dso_acceleration_raw_get>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	e03c      	b.n	80052e6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fce0 	bl	8004c38 <LSM6DSO_ACC_GetSensitivity>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	e030      	b.n	80052e6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005284:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005290:	edd7 7a03 	vldr	s15, [r7, #12]
 8005294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800529c:	ee17 2a90 	vmov	r2, s15
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80052a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052bc:	ee17 2a90 	vmov	r2, s15
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80052c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80052d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052dc:	ee17 2a90 	vmov	r2, s15
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e014      	b.n	800532e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f103 021c 	add.w	r2, r3, #28
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 ffcc 	bl	80062b0 <lsm6dso_gy_data_rate_set>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295
 8005322:	e004      	b.n	800532e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e01f      	b.n	800538c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 021c 	add.w	r2, r3, #28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	332c      	adds	r3, #44	; 0x2c
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f001 f8a5 	bl	80064a8 <lsm6dso_gy_data_rate_get>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005364:	f04f 33ff 	mov.w	r3, #4294967295
 8005368:	e010      	b.n	800538c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	331c      	adds	r3, #28
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f000 ff9d 	bl	80062b0 <lsm6dso_gy_data_rate_set>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	e004      	b.n	800538c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	331c      	adds	r3, #28
 80053a6:	f107 020b 	add.w	r2, r7, #11
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ff3d 	bl	800622c <lsm6dso_gy_full_scale_get>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	e02d      	b.n	800541a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d825      	bhi.n	8005410 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80053c4:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053e9 	.word	0x080053e9
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005411 	.word	0x08005411
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005411 	.word	0x08005411
 80053e4:	08005409 	.word	0x08005409
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80053ec:	601a      	str	r2, [r3, #0]
      break;
 80053ee:	e013      	b.n	8005418 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80053f4:	601a      	str	r2, [r3, #0]
      break;
 80053f6:	e00f      	b.n	8005418 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4a0c      	ldr	r2, [pc, #48]	; (800542c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80053fc:	601a      	str	r2, [r3, #0]
      break;
 80053fe:	e00b      	b.n	8005418 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005404:	601a      	str	r2, [r3, #0]
      break;
 8005406:	e007      	b.n	8005418 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800540c:	601a      	str	r2, [r3, #0]
      break;
 800540e:	e003      	b.n	8005418 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	60fb      	str	r3, [r7, #12]
      break;
 8005416:	bf00      	nop
  }

  return ret;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	408c0000 	.word	0x408c0000
 8005428:	410c0000 	.word	0x410c0000
 800542c:	418c0000 	.word	0x418c0000
 8005430:	420c0000 	.word	0x420c0000
 8005434:	428c0000 	.word	0x428c0000

08005438 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	331c      	adds	r3, #28
 800544a:	f107 020b 	add.w	r2, r7, #11
 800544e:	4611      	mov	r1, r2
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f829 	bl	80064a8 <lsm6dso_gy_data_rate_get>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	e04e      	b.n	8005500 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	2b0a      	cmp	r3, #10
 8005466:	d846      	bhi.n	80054f6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	0800549d 	.word	0x0800549d
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054af 	.word	0x080054af
 800547c:	080054b7 	.word	0x080054b7
 8005480:	080054bf 	.word	0x080054bf
 8005484:	080054c7 	.word	0x080054c7
 8005488:	080054cf 	.word	0x080054cf
 800548c:	080054d7 	.word	0x080054d7
 8005490:	080054df 	.word	0x080054df
 8005494:	080054e7 	.word	0x080054e7
 8005498:	080054ef 	.word	0x080054ef
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
      break;
 80054a4:	e02b      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80054aa:	601a      	str	r2, [r3, #0]
      break;
 80054ac:	e027      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80054b2:	601a      	str	r2, [r3, #0]
      break;
 80054b4:	e023      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80054ba:	601a      	str	r2, [r3, #0]
      break;
 80054bc:	e01f      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80054c2:	601a      	str	r2, [r3, #0]
      break;
 80054c4:	e01b      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80054ca:	601a      	str	r2, [r3, #0]
      break;
 80054cc:	e017      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80054d2:	601a      	str	r2, [r3, #0]
      break;
 80054d4:	e013      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	4a11      	ldr	r2, [pc, #68]	; (8005520 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80054da:	601a      	str	r2, [r3, #0]
      break;
 80054dc:	e00f      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4a10      	ldr	r2, [pc, #64]	; (8005524 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80054e2:	601a      	str	r2, [r3, #0]
      break;
 80054e4:	e00b      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80054ea:	601a      	str	r2, [r3, #0]
      break;
 80054ec:	e007      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	4a0e      	ldr	r2, [pc, #56]	; (800552c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80054f2:	601a      	str	r2, [r3, #0]
      break;
 80054f4:	e003      	b.n	80054fe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	60fb      	str	r3, [r7, #12]
      break;
 80054fc:	bf00      	nop
  }

  return ret;
 80054fe:	68fb      	ldr	r3, [r7, #12]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	41480000 	.word	0x41480000
 800550c:	41d00000 	.word	0x41d00000
 8005510:	42500000 	.word	0x42500000
 8005514:	42d00000 	.word	0x42d00000
 8005518:	43500000 	.word	0x43500000
 800551c:	43d08000 	.word	0x43d08000
 8005520:	44504000 	.word	0x44504000
 8005524:	44d06000 	.word	0x44d06000
 8005528:	45505000 	.word	0x45505000
 800552c:	45d05800 	.word	0x45d05800

08005530 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800553c:	2100      	movs	r1, #0
 800553e:	ed97 0a00 	vldr	s0, [r7]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f806 	bl	8005554 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005548:	4603      	mov	r3, r0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005560:	460b      	mov	r3, r1
 8005562:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005572:	2b01      	cmp	r3, #1
 8005574:	d028      	beq.n	80055c8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005576:	e05c      	b.n	8005632 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f103 001c 	add.w	r0, r3, #28
 800557e:	f107 0214 	add.w	r2, r7, #20
 8005582:	2301      	movs	r3, #1
 8005584:	2116      	movs	r1, #22
 8005586:	f000 fc39 	bl	8005dfc <lsm6dso_read_reg>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	e06c      	b.n	8005670 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005596:	7d3b      	ldrb	r3, [r7, #20]
 8005598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04b      	beq.n	800563a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80055a2:	7d3b      	ldrb	r3, [r7, #20]
 80055a4:	f36f 13c7 	bfc	r3, #7, #1
 80055a8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f103 001c 	add.w	r0, r3, #28
 80055b0:	f107 0214 	add.w	r2, r7, #20
 80055b4:	2301      	movs	r3, #1
 80055b6:	2116      	movs	r1, #22
 80055b8:	f000 fc38 	bl	8005e2c <lsm6dso_write_reg>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d03b      	beq.n	800563a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	e053      	b.n	8005670 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f103 001c 	add.w	r0, r3, #28
 80055ce:	f107 0210 	add.w	r2, r7, #16
 80055d2:	2301      	movs	r3, #1
 80055d4:	2116      	movs	r1, #22
 80055d6:	f000 fc11 	bl	8005dfc <lsm6dso_read_reg>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	e044      	b.n	8005670 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80055e6:	7c3b      	ldrb	r3, [r7, #16]
 80055e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d112      	bne.n	8005618 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80055f2:	7c3b      	ldrb	r3, [r7, #16]
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f103 001c 	add.w	r0, r3, #28
 8005600:	f107 0210 	add.w	r2, r7, #16
 8005604:	2301      	movs	r3, #1
 8005606:	2116      	movs	r1, #22
 8005608:	f000 fc10 	bl	8005e2c <lsm6dso_write_reg>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	e02b      	b.n	8005670 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005618:	edd7 7a06 	vldr	s15, [r7, #24]
 800561c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005678 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	dc00      	bgt.n	800562c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800562a:	e007      	b.n	800563c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800562c:	4b13      	ldr	r3, [pc, #76]	; (800567c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e004      	b.n	800563c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	61fb      	str	r3, [r7, #28]
      break;
 8005638:	e000      	b.n	800563c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800563a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d102      	bne.n	800564a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	e012      	b.n	8005670 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005654:	ed97 0a06 	vldr	s0, [r7, #24]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fa8b 	bl	8005b74 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800565e:	61f8      	str	r0, [r7, #28]
 8005660:	e005      	b.n	800566e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005662:	ed97 0a06 	vldr	s0, [r7, #24]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fb10 	bl	8005c8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800566c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800566e:	69fb      	ldr	r3, [r7, #28]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	43500000 	.word	0x43500000
 800567c:	43500000 	.word	0x43500000

08005680 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	331c      	adds	r3, #28
 8005692:	f107 020b 	add.w	r2, r7, #11
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fdc7 	bl	800622c <lsm6dso_gy_full_scale_get>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80056a4:	f04f 33ff 	mov.w	r3, #4294967295
 80056a8:	e030      	b.n	800570c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d828      	bhi.n	8005702 <LSM6DSO_GYRO_GetFullScale+0x82>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	08005703 	.word	0x08005703
 80056c8:	080056ef 	.word	0x080056ef
 80056cc:	08005703 	.word	0x08005703
 80056d0:	080056f9 	.word	0x080056f9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	227d      	movs	r2, #125	; 0x7d
 80056d8:	601a      	str	r2, [r3, #0]
      break;
 80056da:	e016      	b.n	800570a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	22fa      	movs	r2, #250	; 0xfa
 80056e0:	601a      	str	r2, [r3, #0]
      break;
 80056e2:	e012      	b.n	800570a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056ea:	601a      	str	r2, [r3, #0]
      break;
 80056ec:	e00d      	b.n	800570a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f4:	601a      	str	r2, [r3, #0]
      break;
 80056f6:	e008      	b.n	800570a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80056fe:	601a      	str	r2, [r3, #0]
      break;
 8005700:	e003      	b.n	800570a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	60fb      	str	r3, [r7, #12]
      break;
 8005708:	bf00      	nop
  }

  return ret;
 800570a:	68fb      	ldr	r3, [r7, #12]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b7d      	cmp	r3, #125	; 0x7d
 8005722:	dd12      	ble.n	800574a <LSM6DSO_GYRO_SetFullScale+0x36>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2bfa      	cmp	r3, #250	; 0xfa
 8005728:	dd0d      	ble.n	8005746 <LSM6DSO_GYRO_SetFullScale+0x32>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005730:	dd07      	ble.n	8005742 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005738:	dc01      	bgt.n	800573e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800573a:	2304      	movs	r3, #4
 800573c:	e006      	b.n	800574c <LSM6DSO_GYRO_SetFullScale+0x38>
 800573e:	2306      	movs	r3, #6
 8005740:	e004      	b.n	800574c <LSM6DSO_GYRO_SetFullScale+0x38>
 8005742:	2302      	movs	r3, #2
 8005744:	e002      	b.n	800574c <LSM6DSO_GYRO_SetFullScale+0x38>
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <LSM6DSO_GYRO_SetFullScale+0x38>
 800574a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800574c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	331c      	adds	r3, #28
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fd42 	bl	80061e0 <lsm6dso_gy_full_scale_set>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
 8005766:	e000      	b.n	800576a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	331c      	adds	r3, #28
 8005780:	f107 0208 	add.w	r2, r7, #8
 8005784:	4611      	mov	r1, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f000 ff48 	bl	800661c <lsm6dso_angular_rate_raw_get>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e00c      	b.n	80057b2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005798:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80057a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80057a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b086      	sub	sp, #24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	331c      	adds	r3, #28
 80057c8:	f107 0210 	add.w	r2, r7, #16
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ff24 	bl	800661c <lsm6dso_angular_rate_raw_get>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	e03c      	b.n	800585a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fdd4 	bl	8005394 <LSM6DSO_GYRO_GetSensitivity>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	e030      	b.n	800585a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80057f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005804:	edd7 7a03 	vldr	s15, [r7, #12]
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005810:	ee17 2a90 	vmov	r2, s15
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005824:	edd7 7a03 	vldr	s15, [r7, #12]
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005830:	ee17 2a90 	vmov	r2, s15
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005838:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005844:	edd7 7a03 	vldr	s15, [r7, #12]
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005850:	ee17 2a90 	vmov	r2, s15
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <LSM6DSO_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Read_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	460b      	mov	r3, r1
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	72fb      	strb	r3, [r7, #11]
  if (lsm6dso_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSO_OK)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f103 001c 	add.w	r0, r3, #28
 8005876:	7af9      	ldrb	r1, [r7, #11]
 8005878:	2301      	movs	r3, #1
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	f000 fabe 	bl	8005dfc <lsm6dso_read_reg>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <LSM6DSO_Read_Reg+0x2a>
  {
    return LSM6DSO_ERROR;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e000      	b.n	800588e <LSM6DSO_Read_Reg+0x2c>
  }

  return LSM6DSO_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
 80058a2:	4613      	mov	r3, r2
 80058a4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 001c 	add.w	r0, r3, #28
 80058ac:	1cba      	adds	r2, r7, #2
 80058ae:	78f9      	ldrb	r1, [r7, #3]
 80058b0:	2301      	movs	r3, #1
 80058b2:	f000 fabb 	bl	8005e2c <lsm6dso_write_reg>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295
 80058c0:	e000      	b.n	80058c4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <LSM6DSO_ACC_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Get_DRDY_Status(LSM6DSO_Object_t *pObj, uint8_t *Status)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  if (lsm6dso_xl_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSO_OK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	331c      	adds	r3, #28
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fe6b 	bl	80065b8 <lsm6dso_xl_flag_data_ready_get>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <LSM6DSO_ACC_Get_DRDY_Status+0x22>
  {
    return LSM6DSO_ERROR;
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	e000      	b.n	80058f0 <LSM6DSO_ACC_Get_DRDY_Status+0x24>
  }

  return LSM6DSO_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <LSM6DSO_GYRO_Get_DRDY_Status>:
  * @param  pObj the device pObj
  * @param  Status the status of data ready bit
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Get_DRDY_Status(LSM6DSO_Object_t *pObj, uint8_t *Status)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  if (lsm6dso_gy_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSO_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	331c      	adds	r3, #28
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fe6e 	bl	80065ea <lsm6dso_gy_flag_data_ready_get>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <LSM6DSO_GYRO_Get_DRDY_Status+0x22>
  {
    return LSM6DSO_ERROR;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	e000      	b.n	800591c <LSM6DSO_GYRO_Get_DRDY_Status+0x24>
  }

  return LSM6DSO_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005930:	edd7 7a00 	vldr	s15, [r7]
 8005934:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005a34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d801      	bhi.n	8005946 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005942:	230b      	movs	r3, #11
 8005944:	e063      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005946:	edd7 7a00 	vldr	s15, [r7]
 800594a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800594e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	d801      	bhi.n	800595c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005958:	2301      	movs	r3, #1
 800595a:	e058      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800595c:	edd7 7a00 	vldr	s15, [r7]
 8005960:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596c:	d801      	bhi.n	8005972 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800596e:	2302      	movs	r3, #2
 8005970:	e04d      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005972:	edd7 7a00 	vldr	s15, [r7]
 8005976:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005a38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800597a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005982:	d801      	bhi.n	8005988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005984:	2303      	movs	r3, #3
 8005986:	e042      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005988:	edd7 7a00 	vldr	s15, [r7]
 800598c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005a3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	d801      	bhi.n	800599e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800599a:	2304      	movs	r3, #4
 800599c:	e037      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800599e:	edd7 7a00 	vldr	s15, [r7]
 80059a2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005a40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80059a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ae:	d801      	bhi.n	80059b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80059b0:	2305      	movs	r3, #5
 80059b2:	e02c      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80059b4:	edd7 7a00 	vldr	s15, [r7]
 80059b8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005a44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80059bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	d801      	bhi.n	80059ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80059c6:	2306      	movs	r3, #6
 80059c8:	e021      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80059ca:	edd7 7a00 	vldr	s15, [r7]
 80059ce:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005a48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80059d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	d801      	bhi.n	80059e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80059dc:	2307      	movs	r3, #7
 80059de:	e016      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80059e0:	edd7 7a00 	vldr	s15, [r7]
 80059e4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005a4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80059e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	d801      	bhi.n	80059f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80059f2:	2308      	movs	r3, #8
 80059f4:	e00b      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80059f6:	edd7 7a00 	vldr	s15, [r7]
 80059fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005a50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80059fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a06:	d801      	bhi.n	8005a0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005a08:	2309      	movs	r3, #9
 8005a0a:	e000      	b.n	8005a0e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a0c:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005a0e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	331c      	adds	r3, #28
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa7d 	bl	8005f18 <lsm6dso_xl_data_rate_set>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295
 8005a28:	e000      	b.n	8005a2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	3fcccccd 	.word	0x3fcccccd
 8005a38:	42500000 	.word	0x42500000
 8005a3c:	42d00000 	.word	0x42d00000
 8005a40:	43500000 	.word	0x43500000
 8005a44:	43d08000 	.word	0x43d08000
 8005a48:	44504000 	.word	0x44504000
 8005a4c:	44d06000 	.word	0x44d06000
 8005a50:	45505000 	.word	0x45505000

08005a54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005a60:	edd7 7a00 	vldr	s15, [r7]
 8005a64:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005b54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a70:	d801      	bhi.n	8005a76 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005a72:	230b      	movs	r3, #11
 8005a74:	e063      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005a76:	edd7 7a00 	vldr	s15, [r7]
 8005a7a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a86:	d801      	bhi.n	8005a8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e058      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005a8c:	edd7 7a00 	vldr	s15, [r7]
 8005a90:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9c:	d801      	bhi.n	8005aa2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e04d      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005aa2:	edd7 7a00 	vldr	s15, [r7]
 8005aa6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005b58 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8005aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	d801      	bhi.n	8005ab8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e042      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005ab8:	edd7 7a00 	vldr	s15, [r7]
 8005abc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005b5c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	d801      	bhi.n	8005ace <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005aca:	2304      	movs	r3, #4
 8005acc:	e037      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005ace:	edd7 7a00 	vldr	s15, [r7]
 8005ad2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005b60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8005ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	d801      	bhi.n	8005ae4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005ae0:	2305      	movs	r3, #5
 8005ae2:	e02c      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005ae4:	edd7 7a00 	vldr	s15, [r7]
 8005ae8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005b64 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	d801      	bhi.n	8005afa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005af6:	2306      	movs	r3, #6
 8005af8:	e021      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005afa:	edd7 7a00 	vldr	s15, [r7]
 8005afe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005b68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d801      	bhi.n	8005b10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	e016      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b10:	edd7 7a00 	vldr	s15, [r7]
 8005b14:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005b6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	d801      	bhi.n	8005b26 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005b22:	2308      	movs	r3, #8
 8005b24:	e00b      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b26:	edd7 7a00 	vldr	s15, [r7]
 8005b2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005b70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d801      	bhi.n	8005b3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005b38:	2309      	movs	r3, #9
 8005b3a:	e000      	b.n	8005b3e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b3c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	3fcccccd 	.word	0x3fcccccd
 8005b58:	42500000 	.word	0x42500000
 8005b5c:	42d00000 	.word	0x42d00000
 8005b60:	43500000 	.word	0x43500000
 8005b64:	43d08000 	.word	0x43d08000
 8005b68:	44504000 	.word	0x44504000
 8005b6c:	44d06000 	.word	0x44d06000
 8005b70:	45505000 	.word	0x45505000

08005b74 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005b80:	edd7 7a00 	vldr	s15, [r7]
 8005b84:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	d801      	bhi.n	8005b96 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e058      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b96:	edd7 7a00 	vldr	s15, [r7]
 8005b9a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba6:	d801      	bhi.n	8005bac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e04d      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005bac:	edd7 7a00 	vldr	s15, [r7]
 8005bb0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005c70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbc:	d801      	bhi.n	8005bc2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e042      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005bc2:	edd7 7a00 	vldr	s15, [r7]
 8005bc6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005c74 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd2:	d801      	bhi.n	8005bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	e037      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005bd8:	edd7 7a00 	vldr	s15, [r7]
 8005bdc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005c78 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	d801      	bhi.n	8005bee <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005bea:	2305      	movs	r3, #5
 8005bec:	e02c      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005bee:	edd7 7a00 	vldr	s15, [r7]
 8005bf2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005c7c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfe:	d801      	bhi.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005c00:	2306      	movs	r3, #6
 8005c02:	e021      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005c04:	edd7 7a00 	vldr	s15, [r7]
 8005c08:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005c80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	d801      	bhi.n	8005c1a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005c16:	2307      	movs	r3, #7
 8005c18:	e016      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005c1a:	edd7 7a00 	vldr	s15, [r7]
 8005c1e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005c84 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2a:	d801      	bhi.n	8005c30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	e00b      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005c30:	edd7 7a00 	vldr	s15, [r7]
 8005c34:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005c88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	d801      	bhi.n	8005c46 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005c42:	2309      	movs	r3, #9
 8005c44:	e000      	b.n	8005c48 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005c46:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005c48:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	331c      	adds	r3, #28
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb2c 	bl	80062b0 <lsm6dso_gy_data_rate_set>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	e000      	b.n	8005c66 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	42500000 	.word	0x42500000
 8005c74:	42d00000 	.word	0x42d00000
 8005c78:	43500000 	.word	0x43500000
 8005c7c:	43d08000 	.word	0x43d08000
 8005c80:	44504000 	.word	0x44504000
 8005c84:	44d06000 	.word	0x44d06000
 8005c88:	45505000 	.word	0x45505000

08005c8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005c98:	edd7 7a00 	vldr	s15, [r7]
 8005c9c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	d801      	bhi.n	8005cae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e058      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005cae:	edd7 7a00 	vldr	s15, [r7]
 8005cb2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	d801      	bhi.n	8005cc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e04d      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005cc4:	edd7 7a00 	vldr	s15, [r7]
 8005cc8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005d74 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	d801      	bhi.n	8005cda <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e042      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005cda:	edd7 7a00 	vldr	s15, [r7]
 8005cde:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005d78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	d801      	bhi.n	8005cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005cec:	2304      	movs	r3, #4
 8005cee:	e037      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005cf0:	edd7 7a00 	vldr	s15, [r7]
 8005cf4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005d7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	d801      	bhi.n	8005d06 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005d02:	2305      	movs	r3, #5
 8005d04:	e02c      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005d06:	edd7 7a00 	vldr	s15, [r7]
 8005d0a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	d801      	bhi.n	8005d1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005d18:	2306      	movs	r3, #6
 8005d1a:	e021      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005d1c:	edd7 7a00 	vldr	s15, [r7]
 8005d20:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005d84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	d801      	bhi.n	8005d32 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005d2e:	2307      	movs	r3, #7
 8005d30:	e016      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005d32:	edd7 7a00 	vldr	s15, [r7]
 8005d36:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005d88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	d801      	bhi.n	8005d48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005d44:	2308      	movs	r3, #8
 8005d46:	e00b      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005d48:	edd7 7a00 	vldr	s15, [r7]
 8005d4c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005d8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	d801      	bhi.n	8005d5e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005d5a:	2309      	movs	r3, #9
 8005d5c:	e000      	b.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005d5e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	42500000 	.word	0x42500000
 8005d78:	42d00000 	.word	0x42d00000
 8005d7c:	43500000 	.word	0x43500000
 8005d80:	43d08000 	.word	0x43d08000
 8005d84:	44504000 	.word	0x44504000
 8005d88:	44d06000 	.word	0x44d06000
 8005d8c:	45505000 	.word	0x45505000

08005d90 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	72fb      	strb	r3, [r7, #11]
 8005da0:	4613      	mov	r3, r2
 8005da2:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	695c      	ldr	r4, [r3, #20]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	7b1b      	ldrb	r3, [r3, #12]
 8005db0:	b298      	uxth	r0, r3
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	b299      	uxth	r1, r3
 8005db6:	893b      	ldrh	r3, [r7, #8]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	47a0      	blx	r4
 8005dbc:	4603      	mov	r3, r0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}

08005dc6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dc6:	b590      	push	{r4, r7, lr}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	72fb      	strb	r3, [r7, #11]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	691c      	ldr	r4, [r3, #16]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	7b1b      	ldrb	r3, [r3, #12]
 8005de6:	b298      	uxth	r0, r3
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	b299      	uxth	r1, r3
 8005dec:	893b      	ldrh	r3, [r7, #8]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	47a0      	blx	r4
 8005df2:	4603      	mov	r3, r0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}

08005dfc <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	460b      	mov	r3, r1
 8005e0a:	72fb      	strb	r3, [r7, #11]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685c      	ldr	r4, [r3, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6898      	ldr	r0, [r3, #8]
 8005e18:	893b      	ldrh	r3, [r7, #8]
 8005e1a:	7af9      	ldrb	r1, [r7, #11]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	47a0      	blx	r4
 8005e20:	6178      	str	r0, [r7, #20]

  return ret;
 8005e22:	697b      	ldr	r3, [r7, #20]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd90      	pop	{r4, r7, pc}

08005e2c <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	461a      	mov	r2, r3
 8005e38:	460b      	mov	r3, r1
 8005e3a:	72fb      	strb	r3, [r7, #11]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681c      	ldr	r4, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6898      	ldr	r0, [r3, #8]
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	7af9      	ldrb	r1, [r7, #11]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	47a0      	blx	r4
 8005e50:	6178      	str	r0, [r7, #20]

  return ret;
 8005e52:	697b      	ldr	r3, [r7, #20]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd90      	pop	{r4, r7, pc}

08005e5c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005e68:	f107 0208 	add.w	r2, r7, #8
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	2110      	movs	r1, #16
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ffc3 	bl	8005dfc <lsm6dso_read_reg>
 8005e76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10f      	bne.n	8005e9e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	7a3b      	ldrb	r3, [r7, #8]
 8005e88:	f362 0383 	bfi	r3, r2, #2, #2
 8005e8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	2301      	movs	r3, #1
 8005e94:	2110      	movs	r1, #16
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ffc8 	bl	8005e2c <lsm6dso_write_reg>
 8005e9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005eb2:	f107 0208 	add.w	r2, r7, #8
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	2110      	movs	r1, #16
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff9e 	bl	8005dfc <lsm6dso_read_reg>
 8005ec0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005ec2:	7a3b      	ldrb	r3, [r7, #8]
 8005ec4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d81a      	bhi.n	8005f04 <lsm6dso_xl_full_scale_get+0x5c>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <lsm6dso_xl_full_scale_get+0x2c>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005eed 	.word	0x08005eed
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efd 	.word	0x08005efd
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	e00f      	b.n	8005f0c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
      break;
 8005ef2:	e00b      	b.n	8005f0c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	701a      	strb	r2, [r3, #0]
      break;
 8005efa:	e007      	b.n	8005f0c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2203      	movs	r2, #3
 8005f00:	701a      	strb	r2, [r3, #0]
      break;
 8005f02:	e003      	b.n	8005f0c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
      break;
 8005f0a:	bf00      	nop
  }

  return ret;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fcd3 	bl	80068da <lsm6dso_fsm_enable_get>
 8005f34:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 80c4 	bne.w	80060c6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f3e:	7b3b      	ldrb	r3, [r7, #12]
 8005f40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f46:	7b3b      	ldrb	r3, [r7, #12]
 8005f48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f4c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f52:	7b3b      	ldrb	r3, [r7, #12]
 8005f54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f5e:	7b3b      	ldrb	r3, [r7, #12]
 8005f60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005f6a:	7b3b      	ldrb	r3, [r7, #12]
 8005f6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005f76:	7b3b      	ldrb	r3, [r7, #12]
 8005f78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005f82:	7b3b      	ldrb	r3, [r7, #12]
 8005f84:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005f8e:	7b3b      	ldrb	r3, [r7, #12]
 8005f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005f9a:	7b7b      	ldrb	r3, [r7, #13]
 8005f9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005fa6:	7b7b      	ldrb	r3, [r7, #13]
 8005fa8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005fb2:	7b7b      	ldrb	r3, [r7, #13]
 8005fb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005fca:	7b7b      	ldrb	r3, [r7, #13]
 8005fcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005fd6:	7b7b      	ldrb	r3, [r7, #13]
 8005fd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005fe2:	7b7b      	ldrb	r3, [r7, #13]
 8005fe4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005fee:	7b7b      	ldrb	r3, [r7, #13]
 8005ff0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d163      	bne.n	80060c6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005ffe:	f107 030b 	add.w	r3, r7, #11
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fc89 	bl	800691c <lsm6dso_fsm_data_rate_get>
 800600a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d159      	bne.n	80060c6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d853      	bhi.n	80060c0 <lsm6dso_xl_data_rate_set+0x1a8>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <lsm6dso_xl_data_rate_set+0x108>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006031 	.word	0x08006031
 8006024:	08006043 	.word	0x08006043
 8006028:	08006061 	.word	0x08006061
 800602c:	0800608b 	.word	0x0800608b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800603a:	e045      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	75fb      	strb	r3, [r7, #23]
            break;
 8006040:	e042      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006048:	2302      	movs	r3, #2
 800604a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800604c:	e03c      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006054:	2302      	movs	r3, #2
 8006056:	75fb      	strb	r3, [r7, #23]
            break;
 8006058:	e036      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	75fb      	strb	r3, [r7, #23]
            break;
 800605e:	e033      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006066:	2303      	movs	r3, #3
 8006068:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800606a:	e02d      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d102      	bne.n	8006078 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006072:	2303      	movs	r3, #3
 8006074:	75fb      	strb	r3, [r7, #23]
            break;
 8006076:	e027      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d102      	bne.n	8006084 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800607e:	2303      	movs	r3, #3
 8006080:	75fb      	strb	r3, [r7, #23]
            break;
 8006082:	e021      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	75fb      	strb	r3, [r7, #23]
            break;
 8006088:	e01e      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006090:	2304      	movs	r3, #4
 8006092:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006094:	e018      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d102      	bne.n	80060a2 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800609c:	2304      	movs	r3, #4
 800609e:	75fb      	strb	r3, [r7, #23]
            break;
 80060a0:	e012      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d102      	bne.n	80060ae <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80060a8:	2304      	movs	r3, #4
 80060aa:	75fb      	strb	r3, [r7, #23]
            break;
 80060ac:	e00c      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d102      	bne.n	80060ba <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80060b4:	2304      	movs	r3, #4
 80060b6:	75fb      	strb	r3, [r7, #23]
            break;
 80060b8:	e006      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	75fb      	strb	r3, [r7, #23]
            break;
 80060be:	e003      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	75fb      	strb	r3, [r7, #23]
            break;
 80060c4:	e000      	b.n	80060c8 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80060c6:	bf00      	nop
    }
  }

  if (ret == 0)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d107      	bne.n	80060de <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80060ce:	f107 0208 	add.w	r2, r7, #8
 80060d2:	2301      	movs	r3, #1
 80060d4:	2110      	movs	r1, #16
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fe90 	bl	8005dfc <lsm6dso_read_reg>
 80060dc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10f      	bne.n	8006104 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	7a3b      	ldrb	r3, [r7, #8]
 80060ee:	f362 1307 	bfi	r3, r2, #4, #4
 80060f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80060f4:	f107 0208 	add.w	r2, r7, #8
 80060f8:	2301      	movs	r3, #1
 80060fa:	2110      	movs	r1, #16
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff fe95 	bl	8005e2c <lsm6dso_write_reg>
 8006102:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006104:	693b      	ldr	r3, [r7, #16]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop

08006110 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800611a:	f107 0208 	add.w	r2, r7, #8
 800611e:	2301      	movs	r3, #1
 8006120:	2110      	movs	r1, #16
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe6a 	bl	8005dfc <lsm6dso_read_reg>
 8006128:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800612a:	7a3b      	ldrb	r3, [r7, #8]
 800612c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b0b      	cmp	r3, #11
 8006134:	d84a      	bhi.n	80061cc <lsm6dso_xl_data_rate_get+0xbc>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <lsm6dso_xl_data_rate_get+0x2c>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006175 	.word	0x08006175
 8006144:	0800617d 	.word	0x0800617d
 8006148:	08006185 	.word	0x08006185
 800614c:	0800618d 	.word	0x0800618d
 8006150:	08006195 	.word	0x08006195
 8006154:	0800619d 	.word	0x0800619d
 8006158:	080061a5 	.word	0x080061a5
 800615c:	080061ad 	.word	0x080061ad
 8006160:	080061b5 	.word	0x080061b5
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061c5 	.word	0x080061c5
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e02f      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
      break;
 800617a:	e02b      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2202      	movs	r2, #2
 8006180:	701a      	strb	r2, [r3, #0]
      break;
 8006182:	e027      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2203      	movs	r2, #3
 8006188:	701a      	strb	r2, [r3, #0]
      break;
 800618a:	e023      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2204      	movs	r2, #4
 8006190:	701a      	strb	r2, [r3, #0]
      break;
 8006192:	e01f      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2205      	movs	r2, #5
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e01b      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2206      	movs	r2, #6
 80061a0:	701a      	strb	r2, [r3, #0]
      break;
 80061a2:	e017      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2207      	movs	r2, #7
 80061a8:	701a      	strb	r2, [r3, #0]
      break;
 80061aa:	e013      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2208      	movs	r2, #8
 80061b0:	701a      	strb	r2, [r3, #0]
      break;
 80061b2:	e00f      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2209      	movs	r2, #9
 80061b8:	701a      	strb	r2, [r3, #0]
      break;
 80061ba:	e00b      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	220a      	movs	r2, #10
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	e007      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	220b      	movs	r2, #11
 80061c8:	701a      	strb	r2, [r3, #0]
      break;
 80061ca:	e003      	b.n	80061d4 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
      break;
 80061d2:	bf00      	nop
  }

  return ret;
 80061d4:	68fb      	ldr	r3, [r7, #12]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop

080061e0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80061ec:	f107 0208 	add.w	r2, r7, #8
 80061f0:	2301      	movs	r3, #1
 80061f2:	2111      	movs	r1, #17
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fe01 	bl	8005dfc <lsm6dso_read_reg>
 80061fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10f      	bne.n	8006222 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	b2da      	uxtb	r2, r3
 800620a:	7a3b      	ldrb	r3, [r7, #8]
 800620c:	f362 0343 	bfi	r3, r2, #1, #3
 8006210:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006212:	f107 0208 	add.w	r2, r7, #8
 8006216:	2301      	movs	r3, #1
 8006218:	2111      	movs	r1, #17
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff fe06 	bl	8005e2c <lsm6dso_write_reg>
 8006220:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	2301      	movs	r3, #1
 800623c:	2111      	movs	r1, #17
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fddc 	bl	8005dfc <lsm6dso_read_reg>
 8006244:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006246:	7a3b      	ldrb	r3, [r7, #8]
 8006248:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b06      	cmp	r3, #6
 8006250:	d824      	bhi.n	800629c <lsm6dso_gy_full_scale_get+0x70>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <lsm6dso_gy_full_scale_get+0x2c>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006275 	.word	0x08006275
 800625c:	0800627d 	.word	0x0800627d
 8006260:	08006285 	.word	0x08006285
 8006264:	0800629d 	.word	0x0800629d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800629d 	.word	0x0800629d
 8006270:	08006295 	.word	0x08006295
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
      break;
 800627a:	e013      	b.n	80062a4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
      break;
 8006282:	e00f      	b.n	80062a4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
      break;
 800628a:	e00b      	b.n	80062a4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2204      	movs	r2, #4
 8006290:	701a      	strb	r2, [r3, #0]
      break;
 8006292:	e007      	b.n	80062a4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2206      	movs	r2, #6
 8006298:	701a      	strb	r2, [r3, #0]
      break;
 800629a:	e003      	b.n	80062a4 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
      break;
 80062a2:	bf00      	nop
  }

  return ret;
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80062c0:	f107 030c 	add.w	r3, r7, #12
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fb07 	bl	80068da <lsm6dso_fsm_enable_get>
 80062cc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 80c4 	bne.w	800645e <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80062d6:	7b3b      	ldrb	r3, [r7, #12]
 80062d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80062de:	7b3b      	ldrb	r3, [r7, #12]
 80062e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80062e6:	4313      	orrs	r3, r2
 80062e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80062ea:	7b3b      	ldrb	r3, [r7, #12]
 80062ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80062f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80062f6:	7b3b      	ldrb	r3, [r7, #12]
 80062f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80062fe:	4313      	orrs	r3, r2
 8006300:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006302:	7b3b      	ldrb	r3, [r7, #12]
 8006304:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006308:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800630a:	4313      	orrs	r3, r2
 800630c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800630e:	7b3b      	ldrb	r3, [r7, #12]
 8006310:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006314:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006316:	4313      	orrs	r3, r2
 8006318:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800631a:	7b3b      	ldrb	r3, [r7, #12]
 800631c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006320:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006322:	4313      	orrs	r3, r2
 8006324:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006326:	7b3b      	ldrb	r3, [r7, #12]
 8006328:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800632c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800632e:	4313      	orrs	r3, r2
 8006330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006332:	7b7b      	ldrb	r3, [r7, #13]
 8006334:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006338:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800633a:	4313      	orrs	r3, r2
 800633c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800633e:	7b7b      	ldrb	r3, [r7, #13]
 8006340:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006346:	4313      	orrs	r3, r2
 8006348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800634a:	7b7b      	ldrb	r3, [r7, #13]
 800634c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006350:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006352:	4313      	orrs	r3, r2
 8006354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006356:	7b7b      	ldrb	r3, [r7, #13]
 8006358:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800635c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800635e:	4313      	orrs	r3, r2
 8006360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006362:	7b7b      	ldrb	r3, [r7, #13]
 8006364:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800636a:	4313      	orrs	r3, r2
 800636c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800636e:	7b7b      	ldrb	r3, [r7, #13]
 8006370:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006376:	4313      	orrs	r3, r2
 8006378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006382:	4313      	orrs	r3, r2
 8006384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006386:	7b7b      	ldrb	r3, [r7, #13]
 8006388:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800638c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800638e:	4313      	orrs	r3, r2
 8006390:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006392:	2b01      	cmp	r3, #1
 8006394:	d163      	bne.n	800645e <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006396:	f107 030b 	add.w	r3, r7, #11
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fabd 	bl	800691c <lsm6dso_fsm_data_rate_get>
 80063a2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d159      	bne.n	800645e <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d853      	bhi.n	8006458 <lsm6dso_gy_data_rate_set+0x1a8>
 80063b0:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <lsm6dso_gy_data_rate_set+0x108>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063db 	.word	0x080063db
 80063c0:	080063f9 	.word	0x080063f9
 80063c4:	08006423 	.word	0x08006423
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063d2:	e045      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	75fb      	strb	r3, [r7, #23]
            break;
 80063d8:	e042      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80063e0:	2302      	movs	r3, #2
 80063e2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063e4:	e03c      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80063ec:	2302      	movs	r3, #2
 80063ee:	75fb      	strb	r3, [r7, #23]
            break;
 80063f0:	e036      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	75fb      	strb	r3, [r7, #23]
            break;
 80063f6:	e033      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80063fe:	2303      	movs	r3, #3
 8006400:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006402:	e02d      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
            break;
 800640e:	e027      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d102      	bne.n	800641c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006416:	2303      	movs	r3, #3
 8006418:	75fb      	strb	r3, [r7, #23]
            break;
 800641a:	e021      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	75fb      	strb	r3, [r7, #23]
            break;
 8006420:	e01e      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006428:	2304      	movs	r3, #4
 800642a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800642c:	e018      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d102      	bne.n	800643a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006434:	2304      	movs	r3, #4
 8006436:	75fb      	strb	r3, [r7, #23]
            break;
 8006438:	e012      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d102      	bne.n	8006446 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006440:	2304      	movs	r3, #4
 8006442:	75fb      	strb	r3, [r7, #23]
            break;
 8006444:	e00c      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d102      	bne.n	8006452 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800644c:	2304      	movs	r3, #4
 800644e:	75fb      	strb	r3, [r7, #23]
            break;
 8006450:	e006      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	75fb      	strb	r3, [r7, #23]
            break;
 8006456:	e003      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	75fb      	strb	r3, [r7, #23]
            break;
 800645c:	e000      	b.n	8006460 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800645e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d107      	bne.n	8006476 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006466:	f107 0208 	add.w	r2, r7, #8
 800646a:	2301      	movs	r3, #1
 800646c:	2111      	movs	r1, #17
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fcc4 	bl	8005dfc <lsm6dso_read_reg>
 8006474:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10f      	bne.n	800649c <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	b2da      	uxtb	r2, r3
 8006484:	7a3b      	ldrb	r3, [r7, #8]
 8006486:	f362 1307 	bfi	r3, r2, #4, #4
 800648a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800648c:	f107 0208 	add.w	r2, r7, #8
 8006490:	2301      	movs	r3, #1
 8006492:	2111      	movs	r1, #17
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fcc9 	bl	8005e2c <lsm6dso_write_reg>
 800649a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800649c:	693b      	ldr	r3, [r7, #16]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80064b2:	f107 0208 	add.w	r2, r7, #8
 80064b6:	2301      	movs	r3, #1
 80064b8:	2111      	movs	r1, #17
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fc9e 	bl	8005dfc <lsm6dso_read_reg>
 80064c0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80064c2:	7a3b      	ldrb	r3, [r7, #8]
 80064c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b0a      	cmp	r3, #10
 80064cc:	d844      	bhi.n	8006558 <lsm6dso_gy_data_rate_get+0xb0>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <lsm6dso_gy_data_rate_get+0x2c>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006509 	.word	0x08006509
 80064dc:	08006511 	.word	0x08006511
 80064e0:	08006519 	.word	0x08006519
 80064e4:	08006521 	.word	0x08006521
 80064e8:	08006529 	.word	0x08006529
 80064ec:	08006531 	.word	0x08006531
 80064f0:	08006539 	.word	0x08006539
 80064f4:	08006541 	.word	0x08006541
 80064f8:	08006549 	.word	0x08006549
 80064fc:	08006551 	.word	0x08006551
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
      break;
 8006506:	e02b      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
      break;
 800650e:	e027      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
      break;
 8006516:	e023      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2203      	movs	r2, #3
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e01f      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2204      	movs	r2, #4
 8006524:	701a      	strb	r2, [r3, #0]
      break;
 8006526:	e01b      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2205      	movs	r2, #5
 800652c:	701a      	strb	r2, [r3, #0]
      break;
 800652e:	e017      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2206      	movs	r2, #6
 8006534:	701a      	strb	r2, [r3, #0]
      break;
 8006536:	e013      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2207      	movs	r2, #7
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e00f      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2208      	movs	r2, #8
 8006544:	701a      	strb	r2, [r3, #0]
      break;
 8006546:	e00b      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2209      	movs	r2, #9
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e007      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	220a      	movs	r2, #10
 8006554:	701a      	strb	r2, [r3, #0]
      break;
 8006556:	e003      	b.n	8006560 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	bf00      	nop
  }

  return ret;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006578:	f107 0208 	add.w	r2, r7, #8
 800657c:	2301      	movs	r3, #1
 800657e:	2112      	movs	r1, #18
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fc3b 	bl	8005dfc <lsm6dso_read_reg>
 8006586:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	7a3b      	ldrb	r3, [r7, #8]
 8006598:	f362 1386 	bfi	r3, r2, #6, #1
 800659c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800659e:	f107 0208 	add.w	r2, r7, #8
 80065a2:	2301      	movs	r3, #1
 80065a4:	2112      	movs	r1, #18
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fc40 	bl	8005e2c <lsm6dso_write_reg>
 80065ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80065c2:	f107 0208 	add.w	r2, r7, #8
 80065c6:	2301      	movs	r3, #1
 80065c8:	211e      	movs	r1, #30
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fc16 	bl	8005dfc <lsm6dso_read_reg>
 80065d0:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 80065d2:	7a3b      	ldrb	r3, [r7, #8]
 80065d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	701a      	strb	r2, [r3, #0]

  return ret;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <lsm6dso_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80065f4:	f107 0208 	add.w	r2, r7, #8
 80065f8:	2301      	movs	r3, #1
 80065fa:	211e      	movs	r1, #30
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fbfd 	bl	8005dfc <lsm6dso_read_reg>
 8006602:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 8006604:	7a3b      	ldrb	r3, [r7, #8]
 8006606:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	701a      	strb	r2, [r3, #0]

  return ret;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006626:	f107 020c 	add.w	r2, r7, #12
 800662a:	2306      	movs	r3, #6
 800662c:	2122      	movs	r1, #34	; 0x22
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fbe4 	bl	8005dfc <lsm6dso_read_reg>
 8006634:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006636:	7b7b      	ldrb	r3, [r7, #13]
 8006638:	b21a      	sxth	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006644:	b29b      	uxth	r3, r3
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	b29a      	uxth	r2, r3
 800664a:	7b3b      	ldrb	r3, [r7, #12]
 800664c:	b29b      	uxth	r3, r3
 800664e:	4413      	add	r3, r2
 8006650:	b29b      	uxth	r3, r3
 8006652:	b21a      	sxth	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006658:	7bfa      	ldrb	r2, [r7, #15]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	3302      	adds	r3, #2
 800665e:	b212      	sxth	r2, r2
 8006660:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	3302      	adds	r3, #2
 8006666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800666a:	b29b      	uxth	r3, r3
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	b29a      	uxth	r2, r3
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	b29b      	uxth	r3, r3
 8006674:	4413      	add	r3, r2
 8006676:	b29a      	uxth	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	3302      	adds	r3, #2
 800667c:	b212      	sxth	r2, r2
 800667e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006680:	7c7a      	ldrb	r2, [r7, #17]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	3304      	adds	r3, #4
 8006686:	b212      	sxth	r2, r2
 8006688:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	3304      	adds	r3, #4
 800668e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006692:	b29b      	uxth	r3, r3
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	b29a      	uxth	r2, r3
 8006698:	7c3b      	ldrb	r3, [r7, #16]
 800669a:	b29b      	uxth	r3, r3
 800669c:	4413      	add	r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	3304      	adds	r3, #4
 80066a4:	b212      	sxth	r2, r2
 80066a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80066bc:	f107 020c 	add.w	r2, r7, #12
 80066c0:	2306      	movs	r3, #6
 80066c2:	2128      	movs	r1, #40	; 0x28
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fb99 	bl	8005dfc <lsm6dso_read_reg>
 80066ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80066cc:	7b7b      	ldrb	r3, [r7, #13]
 80066ce:	b21a      	sxth	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	b29a      	uxth	r2, r3
 80066e0:	7b3b      	ldrb	r3, [r7, #12]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	b21a      	sxth	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	3302      	adds	r3, #2
 80066f4:	b212      	sxth	r2, r2
 80066f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3302      	adds	r3, #2
 80066fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006700:	b29b      	uxth	r3, r3
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	b29a      	uxth	r2, r3
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	b29b      	uxth	r3, r3
 800670a:	4413      	add	r3, r2
 800670c:	b29a      	uxth	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3302      	adds	r3, #2
 8006712:	b212      	sxth	r2, r2
 8006714:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006716:	7c7a      	ldrb	r2, [r7, #17]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	b212      	sxth	r2, r2
 800671e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	3304      	adds	r3, #4
 8006724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006728:	b29b      	uxth	r3, r3
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	b29a      	uxth	r2, r3
 800672e:	7c3b      	ldrb	r3, [r7, #16]
 8006730:	b29b      	uxth	r3, r3
 8006732:	4413      	add	r3, r2
 8006734:	b29a      	uxth	r2, r3
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	b212      	sxth	r2, r2
 800673c:	801a      	strh	r2, [r3, #0]

  return ret;
 800673e:	697b      	ldr	r3, [r7, #20]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006754:	f107 0208 	add.w	r2, r7, #8
 8006758:	2301      	movs	r3, #1
 800675a:	2101      	movs	r1, #1
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fb4d 	bl	8005dfc <lsm6dso_read_reg>
 8006762:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10f      	bne.n	800678a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	b2da      	uxtb	r2, r3
 8006772:	7a3b      	ldrb	r3, [r7, #8]
 8006774:	f362 1387 	bfi	r3, r2, #6, #2
 8006778:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800677a:	f107 0208 	add.w	r2, r7, #8
 800677e:	2301      	movs	r3, #1
 8006780:	2101      	movs	r1, #1
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fb52 	bl	8005e2c <lsm6dso_write_reg>
 8006788:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800679e:	2301      	movs	r3, #1
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	210f      	movs	r1, #15
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff fb29 	bl	8005dfc <lsm6dso_read_reg>
 80067aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	2301      	movs	r3, #1
 80067c8:	2112      	movs	r1, #18
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fb16 	bl	8005dfc <lsm6dso_read_reg>
 80067d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	7a3b      	ldrb	r3, [r7, #8]
 80067e2:	f362 0382 	bfi	r3, r2, #2, #1
 80067e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80067e8:	f107 0208 	add.w	r2, r7, #8
 80067ec:	2301      	movs	r3, #1
 80067ee:	2112      	movs	r1, #18
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fb1b 	bl	8005e2c <lsm6dso_write_reg>
 80067f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067f8:	68fb      	ldr	r3, [r7, #12]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800680e:	f107 020c 	add.w	r2, r7, #12
 8006812:	2301      	movs	r3, #1
 8006814:	2118      	movs	r1, #24
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff faf0 	bl	8005dfc <lsm6dso_read_reg>
 800681c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d111      	bne.n	8006848 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	7b3b      	ldrb	r3, [r7, #12]
 8006832:	f362 0341 	bfi	r3, r2, #1, #1
 8006836:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006838:	f107 020c 	add.w	r2, r7, #12
 800683c:	2301      	movs	r3, #1
 800683e:	2118      	movs	r1, #24
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff faf3 	bl	8005e2c <lsm6dso_write_reg>
 8006846:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800684e:	f107 0210 	add.w	r2, r7, #16
 8006852:	2301      	movs	r3, #1
 8006854:	2162      	movs	r1, #98	; 0x62
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fad0 	bl	8005dfc <lsm6dso_read_reg>
 800685c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10f      	bne.n	8006884 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	b2da      	uxtb	r2, r3
 800686c:	7c3b      	ldrb	r3, [r7, #16]
 800686e:	f362 03c4 	bfi	r3, r2, #3, #2
 8006872:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006874:	f107 0210 	add.w	r2, r7, #16
 8006878:	2301      	movs	r3, #1
 800687a:	2162      	movs	r1, #98	; 0x62
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fad5 	bl	8005e2c <lsm6dso_write_reg>
 8006882:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006884:	697b      	ldr	r3, [r7, #20]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800689a:	f107 0208 	add.w	r2, r7, #8
 800689e:	2301      	movs	r3, #1
 80068a0:	210a      	movs	r1, #10
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff faaa 	bl	8005dfc <lsm6dso_read_reg>
 80068a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10f      	bne.n	80068d0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	7a3b      	ldrb	r3, [r7, #8]
 80068ba:	f362 0302 	bfi	r3, r2, #0, #3
 80068be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	2301      	movs	r3, #1
 80068c6:	210a      	movs	r1, #10
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff faaf 	bl	8005e2c <lsm6dso_write_reg>
 80068ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068d0:	68fb      	ldr	r3, [r7, #12]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80068e4:	2102      	movs	r1, #2
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ff2e 	bl	8006748 <lsm6dso_mem_bank_set>
 80068ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80068f4:	2302      	movs	r3, #2
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	2146      	movs	r1, #70	; 0x46
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fa7e 	bl	8005dfc <lsm6dso_read_reg>
 8006900:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006908:	2100      	movs	r1, #0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff ff1c 	bl	8006748 <lsm6dso_mem_bank_set>
 8006910:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006926:	2102      	movs	r1, #2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff0d 	bl	8006748 <lsm6dso_mem_bank_set>
 800692e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d107      	bne.n	8006946 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8006936:	f107 0208 	add.w	r2, r7, #8
 800693a:	2301      	movs	r3, #1
 800693c:	215f      	movs	r1, #95	; 0x5f
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fa5c 	bl	8005dfc <lsm6dso_read_reg>
 8006944:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12a      	bne.n	80069a2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800694c:	7a3b      	ldrb	r3, [r7, #8]
 800694e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b03      	cmp	r3, #3
 8006956:	d81b      	bhi.n	8006990 <lsm6dso_fsm_data_rate_get+0x74>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <lsm6dso_fsm_data_rate_get+0x44>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006971 	.word	0x08006971
 8006964:	08006979 	.word	0x08006979
 8006968:	08006981 	.word	0x08006981
 800696c:	08006989 	.word	0x08006989
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
        break;
 8006976:	e00f      	b.n	8006998 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
        break;
 800697e:	e00b      	b.n	8006998 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2202      	movs	r2, #2
 8006984:	701a      	strb	r2, [r3, #0]
        break;
 8006986:	e007      	b.n	8006998 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	701a      	strb	r2, [r3, #0]
        break;
 800698e:	e003      	b.n	8006998 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
        break;
 8006996:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff fed4 	bl	8006748 <lsm6dso_mem_bank_set>
 80069a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08e      	sub	sp, #56	; 0x38
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80069ba:	2301      	movs	r3, #1
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d06e      	beq.n	8006aa6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	f200 809d 	bhi.w	8006b0a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <IKS01A3_MOTION_SENSOR_Init+0x32>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d032      	beq.n	8006a42 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80069dc:	e095      	b.n	8006b0a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80069de:	6838      	ldr	r0, [r7, #0]
 80069e0:	f000 f924 	bl	8006c2c <LSM6DSO_0_Probe>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295
 80069ee:	e0cc      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80069f0:	4a68      	ldr	r2, [pc, #416]	; (8006b94 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4967      	ldr	r1, [pc, #412]	; (8006b98 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006a02:	f107 010c 	add.w	r1, r7, #12
 8006a06:	4610      	mov	r0, r2
 8006a08:	4798      	blx	r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006a10:	f06f 0306 	mvn.w	r3, #6
 8006a14:	e0b9      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006a16:	7b3b      	ldrb	r3, [r7, #12]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d103      	bne.n	8006a24 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006a24:	7b7b      	ldrb	r3, [r7, #13]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d103      	bne.n	8006a32 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d16c      	bne.n	8006b12 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	f043 0304 	orr.w	r3, r3, #4
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006a40:	e067      	b.n	8006b12 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8006a42:	6838      	ldr	r0, [r7, #0]
 8006a44:	f000 f9ae 	bl	8006da4 <LIS2DW12_0_Probe>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a52:	e09a      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006a54:	4a4f      	ldr	r2, [pc, #316]	; (8006b94 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	494e      	ldr	r1, [pc, #312]	; (8006b98 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006a66:	f107 010c 	add.w	r1, r7, #12
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006a74:	f06f 0306 	mvn.w	r3, #6
 8006a78:	e087      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006a7a:	7b3b      	ldrb	r3, [r7, #12]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d103      	bne.n	8006a88 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	f043 0302 	orr.w	r3, r3, #2
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006a88:	7b7b      	ldrb	r3, [r7, #13]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d103      	bne.n	8006a96 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d13c      	bne.n	8006b16 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f043 0304 	orr.w	r3, r3, #4
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006aa4:	e037      	b.n	8006b16 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8006aa6:	6838      	ldr	r0, [r7, #0]
 8006aa8:	f000 fa20 	bl	8006eec <LIS2MDL_0_Probe>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8006ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab6:	e068      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006ab8:	4a36      	ldr	r2, [pc, #216]	; (8006b94 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	4935      	ldr	r1, [pc, #212]	; (8006b98 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006aca:	f107 010c 	add.w	r1, r7, #12
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006ad8:	f06f 0306 	mvn.w	r3, #6
 8006adc:	e055      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006ade:	7b3b      	ldrb	r3, [r7, #12]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d103      	bne.n	8006aec <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f043 0302 	orr.w	r3, r3, #2
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006aec:	7b7b      	ldrb	r3, [r7, #13]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d103      	bne.n	8006afa <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10c      	bne.n	8006b1a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006b08:	e007      	b.n	8006b1a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006b0a:	f06f 0301 	mvn.w	r3, #1
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006b10:	e004      	b.n	8006b1c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006b12:	bf00      	nop
 8006b14:	e002      	b.n	8006b1c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006b1a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8006b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b24:	e031      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006b26:	2300      	movs	r3, #0
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	e02a      	b.n	8006b82 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	4013      	ands	r3, r2
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d11e      	bne.n	8006b76 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8006b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d118      	bne.n	8006b76 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b4c:	4814      	ldr	r0, [pc, #80]	; (8006ba0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	440b      	add	r3, r1
 8006b58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	490e      	ldr	r1, [pc, #56]	; (8006b98 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006b66:	4610      	mov	r0, r2
 8006b68:	4798      	blx	r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006b70:	f06f 0304 	mvn.w	r3, #4
 8006b74:	e009      	b.n	8006b8a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	3301      	adds	r3, #1
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d9d1      	bls.n	8006b2c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3738      	adds	r7, #56	; 0x38
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000bb8 	.word	0x20000bb8
 8006b98:	20000b88 	.word	0x20000b88
 8006b9c:	200000cc 	.word	0x200000cc
 8006ba0:	20000b94 	.word	0x20000b94

08006ba4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d903      	bls.n	8006bbe <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bb6:	f06f 0301 	mvn.w	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e029      	b.n	8006c12 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006bbe:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d11d      	bne.n	8006c0c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006bd8:	4812      	ldr	r0, [pc, #72]	; (8006c24 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	440b      	add	r3, r1
 8006be4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	490f      	ldr	r1, [pc, #60]	; (8006c28 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4798      	blx	r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bfe:	f06f 0304 	mvn.w	r3, #4
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e005      	b.n	8006c12 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e002      	b.n	8006c12 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006c0c:	f06f 0301 	mvn.w	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000bc4 	.word	0x20000bc4
 8006c20:	200000cc 	.word	0x200000cc
 8006c24:	20000b94 	.word	0x20000b94
 8006c28:	20000b88 	.word	0x20000b88

08006c2c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b092      	sub	sp, #72	; 0x48
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8006c38:	2300      	movs	r3, #0
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006c3c:	23d7      	movs	r3, #215	; 0xd7
 8006c3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006c42:	4b4a      	ldr	r3, [pc, #296]	; (8006d6c <LSM6DSO_0_Probe+0x140>)
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006c46:	4b4a      	ldr	r3, [pc, #296]	; (8006d70 <LSM6DSO_0_Probe+0x144>)
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006c4a:	4b4a      	ldr	r3, [pc, #296]	; (8006d74 <LSM6DSO_0_Probe+0x148>)
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <LSM6DSO_0_Probe+0x14c>)
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <LSM6DSO_0_Probe+0x150>)
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8006c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4848      	ldr	r0, [pc, #288]	; (8006d80 <LSM6DSO_0_Probe+0x154>)
 8006c5e:	f7fd fe51 	bl	8004904 <LSM6DSO_RegisterBusIO>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c68:	f06f 0306 	mvn.w	r3, #6
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6e:	e077      	b.n	8006d60 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8006c70:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006c74:	4619      	mov	r1, r3
 8006c76:	4842      	ldr	r0, [pc, #264]	; (8006d80 <LSM6DSO_0_Probe+0x154>)
 8006c78:	f7fd ff46 	bl	8004b08 <LSM6DSO_ReadID>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c82:	f06f 0306 	mvn.w	r3, #6
 8006c86:	647b      	str	r3, [r7, #68]	; 0x44
 8006c88:	e06a      	b.n	8006d60 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8006c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8e:	2b6c      	cmp	r3, #108	; 0x6c
 8006c90:	d003      	beq.n	8006c9a <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c92:	f06f 0306 	mvn.w	r3, #6
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
 8006c98:	e062      	b.n	8006d60 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4837      	ldr	r0, [pc, #220]	; (8006d80 <LSM6DSO_0_Probe+0x154>)
 8006ca2:	f7fd ff47 	bl	8004b34 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ca6:	7a7b      	ldrb	r3, [r7, #9]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	7a3b      	ldrb	r3, [r7, #8]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	7abb      	ldrb	r3, [r7, #10]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	4a33      	ldr	r2, [pc, #204]	; (8006d84 <LSM6DSO_0_Probe+0x158>)
 8006cb8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006cba:	4b33      	ldr	r3, [pc, #204]	; (8006d88 <LSM6DSO_0_Probe+0x15c>)
 8006cbc:	4a30      	ldr	r2, [pc, #192]	; (8006d80 <LSM6DSO_0_Probe+0x154>)
 8006cbe:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006cc0:	4b32      	ldr	r3, [pc, #200]	; (8006d8c <LSM6DSO_0_Probe+0x160>)
 8006cc2:	4a33      	ldr	r2, [pc, #204]	; (8006d90 <LSM6DSO_0_Probe+0x164>)
 8006cc4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11d      	bne.n	8006d08 <LSM6DSO_0_Probe+0xdc>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d018      	beq.n	8006d08 <LSM6DSO_0_Probe+0xdc>
 8006cd6:	7a7b      	ldrb	r3, [r7, #9]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d115      	bne.n	8006d08 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <LSM6DSO_0_Probe+0x168>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a2d      	ldr	r2, [pc, #180]	; (8006d98 <LSM6DSO_0_Probe+0x16c>)
 8006ce2:	492e      	ldr	r1, [pc, #184]	; (8006d9c <LSM6DSO_0_Probe+0x170>)
 8006ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <LSM6DSO_0_Probe+0x160>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <LSM6DSO_0_Probe+0x15c>)
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cfc:	f06f 0304 	mvn.w	r3, #4
 8006d00:	647b      	str	r3, [r7, #68]	; 0x44
 8006d02:	e001      	b.n	8006d08 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11d      	bne.n	8006d4a <LSM6DSO_0_Probe+0x11e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <LSM6DSO_0_Probe+0x11e>
 8006d18:	7a3b      	ldrb	r3, [r7, #8]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d115      	bne.n	8006d4a <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <LSM6DSO_0_Probe+0x168>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <LSM6DSO_0_Probe+0x16c>)
 8006d24:	491e      	ldr	r1, [pc, #120]	; (8006da0 <LSM6DSO_0_Probe+0x174>)
 8006d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <LSM6DSO_0_Probe+0x160>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <LSM6DSO_0_Probe+0x15c>)
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d3e:	f06f 0304 	mvn.w	r3, #4
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
 8006d44:	e001      	b.n	8006d4a <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <LSM6DSO_0_Probe+0x134>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d5a:	f06f 0304 	mvn.w	r3, #4
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3748      	adds	r7, #72	; 0x48
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08001bbd 	.word	0x08001bbd
 8006d70:	08001c39 	.word	0x08001c39
 8006d74:	08001ced 	.word	0x08001ced
 8006d78:	08001c89 	.word	0x08001c89
 8006d7c:	08001d51 	.word	0x08001d51
 8006d80:	20000bd0 	.word	0x20000bd0
 8006d84:	20000bc4 	.word	0x20000bc4
 8006d88:	20000b88 	.word	0x20000b88
 8006d8c:	20000bb8 	.word	0x20000bb8
 8006d90:	20000074 	.word	0x20000074
 8006d94:	200000cc 	.word	0x200000cc
 8006d98:	20000b94 	.word	0x20000b94
 8006d9c:	200000a8 	.word	0x200000a8
 8006da0:	20000084 	.word	0x20000084

08006da4 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b092      	sub	sp, #72	; 0x48
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006db0:	2300      	movs	r3, #0
 8006db2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006db4:	2333      	movs	r3, #51	; 0x33
 8006db6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006dba:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <LIS2DW12_0_Probe+0x114>)
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <LIS2DW12_0_Probe+0x118>)
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006dc2:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <LIS2DW12_0_Probe+0x11c>)
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006dc6:	4b3f      	ldr	r3, [pc, #252]	; (8006ec4 <LIS2DW12_0_Probe+0x120>)
 8006dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006dca:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <LIS2DW12_0_Probe+0x124>)
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	483d      	ldr	r0, [pc, #244]	; (8006ecc <LIS2DW12_0_Probe+0x128>)
 8006dd6:	f7fb f987 	bl	80020e8 <LIS2DW12_RegisterBusIO>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006de0:	f06f 0306 	mvn.w	r3, #6
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44
 8006de6:	e062      	b.n	8006eae <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006de8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006dec:	4619      	mov	r1, r3
 8006dee:	4837      	ldr	r0, [pc, #220]	; (8006ecc <LIS2DW12_0_Probe+0x128>)
 8006df0:	f7fb fa64 	bl	80022bc <LIS2DW12_ReadID>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006dfa:	f06f 0306 	mvn.w	r3, #6
 8006dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006e00:	e055      	b.n	8006eae <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8006e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e06:	2b44      	cmp	r3, #68	; 0x44
 8006e08:	d003      	beq.n	8006e12 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006e0a:	f06f 0306 	mvn.w	r3, #6
 8006e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e10:	e04d      	b.n	8006eae <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	4619      	mov	r1, r3
 8006e18:	482c      	ldr	r0, [pc, #176]	; (8006ecc <LIS2DW12_0_Probe+0x128>)
 8006e1a:	f7fb fa65 	bl	80022e8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006e1e:	7a7b      	ldrb	r3, [r7, #9]
 8006e20:	461a      	mov	r2, r3
 8006e22:	7a3b      	ldrb	r3, [r7, #8]
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	431a      	orrs	r2, r3
 8006e28:	7abb      	ldrb	r3, [r7, #10]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <LIS2DW12_0_Probe+0x12c>)
 8006e30:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006e32:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <LIS2DW12_0_Probe+0x130>)
 8006e34:	4a25      	ldr	r2, [pc, #148]	; (8006ecc <LIS2DW12_0_Probe+0x128>)
 8006e36:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006e38:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <LIS2DW12_0_Probe+0x134>)
 8006e3a:	4a28      	ldr	r2, [pc, #160]	; (8006edc <LIS2DW12_0_Probe+0x138>)
 8006e3c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11e      	bne.n	8006e82 <LIS2DW12_0_Probe+0xde>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d019      	beq.n	8006e82 <LIS2DW12_0_Probe+0xde>
 8006e4e:	7a3b      	ldrb	r3, [r7, #8]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d116      	bne.n	8006e82 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006e54:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <LIS2DW12_0_Probe+0x13c>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <LIS2DW12_0_Probe+0x140>)
 8006e5a:	3303      	adds	r3, #3
 8006e5c:	4922      	ldr	r1, [pc, #136]	; (8006ee8 <LIS2DW12_0_Probe+0x144>)
 8006e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006e62:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <LIS2DW12_0_Probe+0x134>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1a      	ldr	r2, [pc, #104]	; (8006ed4 <LIS2DW12_0_Probe+0x130>)
 8006e6a:	6852      	ldr	r2, [r2, #4]
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e76:	f06f 0304 	mvn.w	r3, #4
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7c:	e001      	b.n	8006e82 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <LIS2DW12_0_Probe+0xf4>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e92:	f06f 0304 	mvn.w	r3, #4
 8006e96:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <LIS2DW12_0_Probe+0x10a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ea8:	f06f 0304 	mvn.w	r3, #4
 8006eac:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3748      	adds	r7, #72	; 0x48
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	08001bbd 	.word	0x08001bbd
 8006ebc:	08001c39 	.word	0x08001c39
 8006ec0:	08001ced 	.word	0x08001ced
 8006ec4:	08001c89 	.word	0x08001c89
 8006ec8:	08001d51 	.word	0x08001d51
 8006ecc:	20000c00 	.word	0x20000c00
 8006ed0:	20000bc4 	.word	0x20000bc4
 8006ed4:	20000b88 	.word	0x20000b88
 8006ed8:	20000bb8 	.word	0x20000bb8
 8006edc:	2000000c 	.word	0x2000000c
 8006ee0:	200000cc 	.word	0x200000cc
 8006ee4:	20000b94 	.word	0x20000b94
 8006ee8:	2000001c 	.word	0x2000001c

08006eec <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b092      	sub	sp, #72	; 0x48
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006ef8:	2300      	movs	r3, #0
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006efc:	233d      	movs	r3, #61	; 0x3d
 8006efe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006f02:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <LIS2MDL_0_Probe+0x114>)
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006f06:	4b3f      	ldr	r3, [pc, #252]	; (8007004 <LIS2MDL_0_Probe+0x118>)
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006f0a:	4b3f      	ldr	r3, [pc, #252]	; (8007008 <LIS2MDL_0_Probe+0x11c>)
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006f0e:	4b3f      	ldr	r3, [pc, #252]	; (800700c <LIS2MDL_0_Probe+0x120>)
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006f12:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <LIS2MDL_0_Probe+0x124>)
 8006f14:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	483d      	ldr	r0, [pc, #244]	; (8007014 <LIS2MDL_0_Probe+0x128>)
 8006f1e:	f7fc fc7d 	bl	800381c <LIS2MDL_RegisterBusIO>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006f28:	f06f 0306 	mvn.w	r3, #6
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2e:	e062      	b.n	8006ff6 <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006f30:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006f34:	4619      	mov	r1, r3
 8006f36:	4837      	ldr	r0, [pc, #220]	; (8007014 <LIS2MDL_0_Probe+0x128>)
 8006f38:	f7fc fd88 	bl	8003a4c <LIS2MDL_ReadID>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006f42:	f06f 0306 	mvn.w	r3, #6
 8006f46:	647b      	str	r3, [r7, #68]	; 0x44
 8006f48:	e055      	b.n	8006ff6 <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8006f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d003      	beq.n	8006f5a <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006f52:	f06f 0306 	mvn.w	r3, #6
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
 8006f58:	e04d      	b.n	8006ff6 <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	4619      	mov	r1, r3
 8006f60:	482c      	ldr	r0, [pc, #176]	; (8007014 <LIS2MDL_0_Probe+0x128>)
 8006f62:	f7fc fd99 	bl	8003a98 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006f66:	7a7b      	ldrb	r3, [r7, #9]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	7a3b      	ldrb	r3, [r7, #8]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	7abb      	ldrb	r3, [r7, #10]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4313      	orrs	r3, r2
 8006f76:	4a28      	ldr	r2, [pc, #160]	; (8007018 <LIS2MDL_0_Probe+0x12c>)
 8006f78:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006f7a:	4b28      	ldr	r3, [pc, #160]	; (800701c <LIS2MDL_0_Probe+0x130>)
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <LIS2MDL_0_Probe+0x128>)
 8006f7e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <LIS2MDL_0_Probe+0x134>)
 8006f82:	4a28      	ldr	r2, [pc, #160]	; (8007024 <LIS2MDL_0_Probe+0x138>)
 8006f84:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11e      	bne.n	8006fca <LIS2MDL_0_Probe+0xde>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d019      	beq.n	8006fca <LIS2MDL_0_Probe+0xde>
 8006f96:	7abb      	ldrb	r3, [r7, #10]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d116      	bne.n	8006fca <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006f9c:	4b22      	ldr	r3, [pc, #136]	; (8007028 <LIS2MDL_0_Probe+0x13c>)
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	4a22      	ldr	r2, [pc, #136]	; (800702c <LIS2MDL_0_Probe+0x140>)
 8006fa2:	3306      	adds	r3, #6
 8006fa4:	4922      	ldr	r1, [pc, #136]	; (8007030 <LIS2MDL_0_Probe+0x144>)
 8006fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006faa:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <LIS2MDL_0_Probe+0x134>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1a      	ldr	r2, [pc, #104]	; (800701c <LIS2MDL_0_Probe+0x130>)
 8006fb2:	6892      	ldr	r2, [r2, #8]
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fbe:	f06f 0304 	mvn.w	r3, #4
 8006fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc4:	e001      	b.n	8006fca <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d107      	bne.n	8006fe0 <LIS2MDL_0_Probe+0xf4>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fda:	f06f 0304 	mvn.w	r3, #4
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <LIS2MDL_0_Probe+0x10a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ff0:	f06f 0304 	mvn.w	r3, #4
 8006ff4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3748      	adds	r7, #72	; 0x48
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08001bbd 	.word	0x08001bbd
 8007004:	08001c39 	.word	0x08001c39
 8007008:	08001ced 	.word	0x08001ced
 800700c:	08001c89 	.word	0x08001c89
 8007010:	08001d51 	.word	0x08001d51
 8007014:	20000c34 	.word	0x20000c34
 8007018:	20000bc4 	.word	0x20000bc4
 800701c:	20000b88 	.word	0x20000b88
 8007020:	20000bb8 	.word	0x20000bb8
 8007024:	20000040 	.word	0x20000040
 8007028:	200000cc 	.word	0x200000cc
 800702c:	20000b94 	.word	0x20000b94
 8007030:	20000050 	.word	0x20000050

08007034 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status>:
  *         - MOTION_MAGNETO for instance IKS01A3_LIS2MDL_0
  * @param  Status the pointer to the status
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Get_DRDY_Status(uint32_t Instance, uint32_t Function, uint8_t *Status)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d056      	beq.n	80070f4 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xc0>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d86e      	bhi.n	800712a <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xf6>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x26>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d032      	beq.n	80070be <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x8a>
 8007058:	e067      	b.n	800712a <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xf6>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d011      	beq.n	8007088 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x54>
      {
        if (LSM6DSO_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8007064:	4a35      	ldr	r2, [pc, #212]	; (800713c <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x108>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fc2c 	bl	80058cc <LSM6DSO_ACC_Get_DRDY_Status>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x4e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800707a:	f06f 0304 	mvn.w	r3, #4
 800707e:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 8007080:	e057      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
          ret = BSP_ERROR_NONE;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
      break;
 8007086:	e054      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d011      	beq.n	80070b6 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x82>
        if (LSM6DSO_GYRO_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x108>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fc2b 	bl	80058f8 <LSM6DSO_GYRO_Get_DRDY_Status>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x7c>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80070a8:	f06f 0304 	mvn.w	r3, #4
 80070ac:	617b      	str	r3, [r7, #20]
      break;
 80070ae:	e040      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
          ret = BSP_ERROR_NONE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]
      break;
 80070b4:	e03d      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80070b6:	f06f 0304 	mvn.w	r3, #4
 80070ba:	617b      	str	r3, [r7, #20]
      break;
 80070bc:	e039      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xb8>
      {
        if (LIS2DW12_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80070c8:	4a1c      	ldr	r2, [pc, #112]	; (800713c <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x108>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fb fe1a 	bl	8002d0c <LIS2DW12_ACC_Get_DRDY_Status>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xb2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80070de:	f06f 0304 	mvn.w	r3, #4
 80070e2:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 80070e4:	e025      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
          ret = BSP_ERROR_NONE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
      break;
 80070ea:	e022      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80070ec:	f06f 0304 	mvn.w	r3, #4
 80070f0:	617b      	str	r3, [r7, #20]
      break;
 80070f2:	e01e      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if ((Function & MOTION_MAGNETO) == MOTION_MAGNETO)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xee>
      {
        if (LIS2MDL_MAG_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80070fe:	4a0f      	ldr	r2, [pc, #60]	; (800713c <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0x108>)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	f7fc ff51 	bl	8003fb0 <LIS2MDL_MAG_Get_DRDY_Status>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xe8>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007114:	f06f 0304 	mvn.w	r3, #4
 8007118:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 800711a:	e00a      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
          ret = BSP_ERROR_NONE;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
      break;
 8007120:	e007      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007122:	f06f 0304 	mvn.w	r3, #4
 8007126:	617b      	str	r3, [r7, #20]
      break;
 8007128:	e003      	b.n	8007132 <IKS01A3_MOTION_SENSOR_Get_DRDY_Status+0xfe>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800712a:	f06f 0301 	mvn.w	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
      break;
 8007130:	bf00      	nop
  }

  return ret;
 8007132:	697b      	ldr	r3, [r7, #20]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000b88 	.word	0x20000b88

08007140 <IKS01A3_MOTION_SENSOR_Read_Register>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written to
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	460b      	mov	r3, r1
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d02f      	beq.n	80071b4 <IKS01A3_MOTION_SENSOR_Read_Register+0x74>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d83f      	bhi.n	80071da <IKS01A3_MOTION_SENSOR_Read_Register+0x9a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <IKS01A3_MOTION_SENSOR_Read_Register+0x28>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d013      	beq.n	800718e <IKS01A3_MOTION_SENSOR_Read_Register+0x4e>
 8007166:	e038      	b.n	80071da <IKS01A3_MOTION_SENSOR_Read_Register+0x9a>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8007168:	4a20      	ldr	r2, [pc, #128]	; (80071ec <IKS01A3_MOTION_SENSOR_Read_Register+0xac>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	7af9      	ldrb	r1, [r7, #11]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fb74 	bl	8005862 <LSM6DSO_Read_Reg>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <IKS01A3_MOTION_SENSOR_Read_Register+0x48>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007180:	f06f 0304 	mvn.w	r3, #4
 8007184:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007186:	e02c      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
        ret = BSP_ERROR_NONE;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
      break;
 800718c:	e029      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <IKS01A3_MOTION_SENSOR_Read_Register+0xac>)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007196:	7af9      	ldrb	r1, [r7, #11]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4618      	mov	r0, r3
 800719c:	f7fb fd81 	bl	8002ca2 <LIS2DW12_Read_Reg>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <IKS01A3_MOTION_SENSOR_Read_Register+0x6e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80071a6:	f06f 0304 	mvn.w	r3, #4
 80071aa:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80071ac:	e019      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
        ret = BSP_ERROR_NONE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
      break;
 80071b2:	e016      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <IKS01A3_MOTION_SENSOR_Read_Register+0xac>)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071bc:	7af9      	ldrb	r1, [r7, #11]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fc fea0 	bl	8003f06 <LIS2MDL_Read_Reg>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <IKS01A3_MOTION_SENSOR_Read_Register+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80071cc:	f06f 0304 	mvn.w	r3, #4
 80071d0:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80071d2:	e006      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
        ret = BSP_ERROR_NONE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
      break;
 80071d8:	e003      	b.n	80071e2 <IKS01A3_MOTION_SENSOR_Read_Register+0xa2>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80071da:	f06f 0301 	mvn.w	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
      break;
 80071e0:	bf00      	nop
  }

  return ret;
 80071e2:	697b      	ldr	r3, [r7, #20]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000b88 	.word	0x20000b88

080071f0 <IKS01A3_MOTION_SENSOR_Write_Register>:
  * @param  Reg address to be read
  * @param  Data value to be written
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	4613      	mov	r3, r2
 80071fe:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d02f      	beq.n	8007266 <IKS01A3_MOTION_SENSOR_Write_Register+0x76>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d83f      	bhi.n	800728c <IKS01A3_MOTION_SENSOR_Write_Register+0x9c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <IKS01A3_MOTION_SENSOR_Write_Register+0x2a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d013      	beq.n	8007240 <IKS01A3_MOTION_SENSOR_Write_Register+0x50>
 8007218:	e038      	b.n	800728c <IKS01A3_MOTION_SENSOR_Write_Register+0x9c>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800721a:	4a21      	ldr	r2, [pc, #132]	; (80072a0 <IKS01A3_MOTION_SENSOR_Write_Register+0xb0>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007222:	78ba      	ldrb	r2, [r7, #2]
 8007224:	78f9      	ldrb	r1, [r7, #3]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fb35 	bl	8005896 <LSM6DSO_Write_Reg>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <IKS01A3_MOTION_SENSOR_Write_Register+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007232:	f06f 0304 	mvn.w	r3, #4
 8007236:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007238:	e02c      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
        ret = BSP_ERROR_NONE;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
      break;
 800723e:	e029      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8007240:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <IKS01A3_MOTION_SENSOR_Write_Register+0xb0>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007248:	78ba      	ldrb	r2, [r7, #2]
 800724a:	78f9      	ldrb	r1, [r7, #3]
 800724c:	4618      	mov	r0, r3
 800724e:	f7fb fd42 	bl	8002cd6 <LIS2DW12_Write_Reg>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <IKS01A3_MOTION_SENSOR_Write_Register+0x70>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007258:	f06f 0304 	mvn.w	r3, #4
 800725c:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800725e:	e019      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
        ret = BSP_ERROR_NONE;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
      break;
 8007264:	e016      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8007266:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <IKS01A3_MOTION_SENSOR_Write_Register+0xb0>)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726e:	78ba      	ldrb	r2, [r7, #2]
 8007270:	78f9      	ldrb	r1, [r7, #3]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fe71 	bl	8003f5a <LIS2MDL_Write_Reg>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <IKS01A3_MOTION_SENSOR_Write_Register+0x96>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800727e:	f06f 0304 	mvn.w	r3, #4
 8007282:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007284:	e006      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
        ret = BSP_ERROR_NONE;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
      break;
 800728a:	e003      	b.n	8007294 <IKS01A3_MOTION_SENSOR_Write_Register+0xa4>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800728c:	f06f 0301 	mvn.w	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
      break;
 8007292:	bf00      	nop
  }

  return ret;
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000b88 	.word	0x20000b88

080072a4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <BSP_LED_Init+0x20>)
 80072b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	0800e9b4 	.word	0x0800e9b4

080072c8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <BSP_LED_On+0x28>)
 80072d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072da:	2101      	movs	r1, #1
 80072dc:	2201      	movs	r2, #1
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f9da 	bl	8008698 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200000e0 	.word	0x200000e0

080072f4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	4a06      	ldr	r2, [pc, #24]	; (800731c <BSP_LED_Off+0x28>)
 8007302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007306:	2101      	movs	r1, #1
 8007308:	2200      	movs	r2, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f9c4 	bl	8008698 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200000e0 	.word	0x200000e0

08007320 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 800732c:	f043 0302 	orr.w	r3, r3, #2
 8007330:	6313      	str	r3, [r2, #48]	; 0x30
 8007332:	4b18      	ldr	r3, [pc, #96]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	609a      	str	r2, [r3, #8]
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	4a10      	ldr	r2, [pc, #64]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	6313      	str	r3, [r2, #48]	; 0x30
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <LED_USER_GPIO_Init+0x74>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8007366:	2200      	movs	r2, #0
 8007368:	2101      	movs	r1, #1
 800736a:	480b      	ldr	r0, [pc, #44]	; (8007398 <LED_USER_GPIO_Init+0x78>)
 800736c:	f001 f994 	bl	8008698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8007370:	2301      	movs	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007374:	2301      	movs	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	4619      	mov	r1, r3
 8007386:	4804      	ldr	r0, [pc, #16]	; (8007398 <LED_USER_GPIO_Init+0x78>)
 8007388:	f000 feb6 	bl	80080f8 <HAL_GPIO_Init>

}
 800738c:	bf00      	nop
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40023800 	.word	0x40023800
 8007398:	40020400 	.word	0x40020400

0800739c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	460a      	mov	r2, r1
 80073a6:	71fb      	strb	r3, [r7, #7]
 80073a8:	4613      	mov	r3, r2
 80073aa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <BSP_PB_Init+0x94>)
 80073b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80073ba:	79bb      	ldrb	r3, [r7, #6]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d132      	bne.n	8007426 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <BSP_PB_Init+0x98>)
 80073c6:	441a      	add	r2, r3
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	491b      	ldr	r1, [pc, #108]	; (8007438 <BSP_PB_Init+0x9c>)
 80073cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f000 fe58 	bl	8008088 <HAL_EXTI_GetHandle>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80073de:	f06f 0303 	mvn.w	r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e01f      	b.n	8007426 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4a12      	ldr	r2, [pc, #72]	; (8007434 <BSP_PB_Init+0x98>)
 80073ec:	1898      	adds	r0, r3, r2
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	4a12      	ldr	r2, [pc, #72]	; (800743c <BSP_PB_Init+0xa0>)
 80073f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f6:	461a      	mov	r2, r3
 80073f8:	2100      	movs	r1, #0
 80073fa:	f000 fe2b 	bl	8008054 <HAL_EXTI_RegisterCallback>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007404:	f06f 0303 	mvn.w	r3, #3
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e00c      	b.n	8007426 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800740c:	2028      	movs	r0, #40	; 0x28
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	4a0b      	ldr	r2, [pc, #44]	; (8007440 <BSP_PB_Init+0xa4>)
 8007412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007416:	2200      	movs	r2, #0
 8007418:	4619      	mov	r1, r3
 800741a:	f000 fabe 	bl	800799a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800741e:	2328      	movs	r3, #40	; 0x28
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fad6 	bl	80079d2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8007426:	68fb      	ldr	r3, [r7, #12]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	0800e9b8 	.word	0x0800e9b8
 8007434:	200000e8 	.word	0x200000e8
 8007438:	0800e9bc 	.word	0x0800e9bc
 800743c:	0800e9c0 	.word	0x0800e9c0
 8007440:	0800e9c4 	.word	0x0800e9c4

08007444 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	4a09      	ldr	r2, [pc, #36]	; (8007478 <BSP_PB_GetState+0x34>)
 8007452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f903 	bl	8008668 <HAL_GPIO_ReadPin>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200000e4 	.word	0x200000e4

0800747c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8007480:	2000      	movs	r0, #0
 8007482:	f004 f98d 	bl	800b7a0 <BSP_PB_Callback>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 8007498:	f043 0304 	orr.w	r3, r3, #4
 800749c:	6313      	str	r3, [r2, #48]	; 0x30
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ba:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a0e      	ldr	r2, [pc, #56]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 80074c0:	f043 0304 	orr.w	r3, r3, #4
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <BUTTON_USER_GPIO_Init+0x6c>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80074d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80074dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	4619      	mov	r1, r3
 80074e8:	4804      	ldr	r0, [pc, #16]	; (80074fc <BUTTON_USER_GPIO_Init+0x70>)
 80074ea:	f000 fe05 	bl	80080f8 <HAL_GPIO_Init>

}
 80074ee:	bf00      	nop
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40023800 	.word	0x40023800
 80074fc:	40020800 	.word	0x40020800

08007500 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d903      	bls.n	800751c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007514:	f06f 0301 	mvn.w	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e025      	b.n	8007568 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	79fa      	ldrb	r2, [r7, #7]
 8007520:	4914      	ldr	r1, [pc, #80]	; (8007574 <BSP_COM_Init+0x74>)
 8007522:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007526:	4814      	ldr	r0, [pc, #80]	; (8007578 <BSP_COM_Init+0x78>)
 8007528:	4613      	mov	r3, r2
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4403      	add	r3, r0
 8007532:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 8007534:	79fa      	ldrb	r2, [r7, #7]
 8007536:	4613      	mov	r3, r2
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	4413      	add	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4a0e      	ldr	r2, [pc, #56]	; (8007578 <BSP_COM_Init+0x78>)
 8007540:	4413      	add	r3, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f000 f86a 	bl	800761c <USART3_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 8007548:	79fa      	ldrb	r2, [r7, #7]
 800754a:	4613      	mov	r3, r2
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4a09      	ldr	r2, [pc, #36]	; (8007578 <BSP_COM_Init+0x78>)
 8007554:	4413      	add	r3, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f810 	bl	800757c <MX_USART3_UART_Init>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007562:	f06f 0303 	mvn.w	r3, #3
 8007566:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007568:	68fb      	ldr	r3, [r7, #12]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200000f0 	.word	0x200000f0
 8007578:	20000c60 	.word	0x20000c60

0800757c <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART3;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <MX_USART3_UART_Init+0x64>)
 800758c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007594:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	220c      	movs	r2, #12
 80075ac:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f003 f8e0 	bl	800a78c <HAL_UART_Init>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <MX_USART3_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40004800 	.word	0x40004800

080075e4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <__io_putchar+0x30>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	4613      	mov	r3, r2
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	4413      	add	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	4a07      	ldr	r2, [pc, #28]	; (8007618 <__io_putchar+0x34>)
 80075fc:	1898      	adds	r0, r3, r2
 80075fe:	1d39      	adds	r1, r7, #4
 8007600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007604:	2201      	movs	r2, #1
 8007606:	f003 f919 	bl	800a83c <HAL_UART_Transmit>
  return ch;
 800760a:	687b      	ldr	r3, [r7, #4]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000ce8 	.word	0x20000ce8
 8007618:	20000c60 	.word	0x20000c60

0800761c <USART3_MspInit>:
 * @param  huart USART3 handle
 * @retval None
 */

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b0aa      	sub	sp, #168	; 0xa8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007624:	f107 0310 	add.w	r3, r7, #16
 8007628:	2284      	movs	r2, #132	; 0x84
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f004 f8f1 	bl	800b814 <memset>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007636:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007638:	2300      	movs	r3, #0
 800763a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800763c:	f107 0310 	add.w	r3, r7, #16
 8007640:	4618      	mov	r0, r3
 8007642:	f002 fcb3 	bl	8009fac <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <USART3_MspInit+0xbc>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	4a23      	ldr	r2, [pc, #140]	; (80076d8 <USART3_MspInit+0xbc>)
 800764c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007650:	6413      	str	r3, [r2, #64]	; 0x40
 8007652:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <USART3_MspInit+0xbc>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800765e:	4b1e      	ldr	r3, [pc, #120]	; (80076d8 <USART3_MspInit+0xbc>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <USART3_MspInit+0xbc>)
 8007664:	f043 0308 	orr.w	r3, r3, #8
 8007668:	6313      	str	r3, [r2, #48]	; 0x30
 800766a:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <USART3_MspInit+0xbc>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 8007676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767e:	2302      	movs	r3, #2
 8007680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	2300      	movs	r3, #0
 8007686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800768a:	2303      	movs	r3, #3
 800768c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 8007690:	2307      	movs	r3, #7
 8007692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 8007696:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800769a:	4619      	mov	r1, r3
 800769c:	480f      	ldr	r0, [pc, #60]	; (80076dc <USART3_MspInit+0xc0>)
 800769e:	f000 fd2b 	bl	80080f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 80076a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076aa:	2302      	movs	r3, #2
 80076ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076b6:	2303      	movs	r3, #3
 80076b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 80076bc:	2307      	movs	r3, #7
 80076be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 80076c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80076c6:	4619      	mov	r1, r3
 80076c8:	4804      	ldr	r0, [pc, #16]	; (80076dc <USART3_MspInit+0xc0>)
 80076ca:	f000 fd15 	bl	80080f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 80076ce:	bf00      	nop
 80076d0:	37a8      	adds	r7, #168	; 0xa8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40023800 	.word	0x40023800
 80076dc:	40020c00 	.word	0x40020c00

080076e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076e4:	2003      	movs	r0, #3
 80076e6:	f000 f94d 	bl	8007984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076ea:	2000      	movs	r0, #0
 80076ec:	f000 f806 	bl	80076fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076f0:	f7fa f8da 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <HAL_InitTick+0x54>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b12      	ldr	r3, [pc, #72]	; (8007754 <HAL_InitTick+0x58>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007712:	fbb3 f3f1 	udiv	r3, r3, r1
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f967 	bl	80079ee <HAL_SYSTICK_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e00e      	b.n	8007748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d80a      	bhi.n	8007746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007730:	2200      	movs	r2, #0
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	f000 f92f 	bl	800799a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800773c:	4a06      	ldr	r2, [pc, #24]	; (8007758 <HAL_InitTick+0x5c>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000008 	.word	0x20000008
 8007754:	200000f8 	.word	0x200000f8
 8007758:	200000f4 	.word	0x200000f4

0800775c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_IncTick+0x20>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_IncTick+0x24>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4413      	add	r3, r2
 800776c:	4a04      	ldr	r2, [pc, #16]	; (8007780 <HAL_IncTick+0x24>)
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	200000f8 	.word	0x200000f8
 8007780:	20000cec 	.word	0x20000cec

08007784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return uwTick;
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <HAL_GetTick+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000cec 	.word	0x20000cec

0800779c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077a4:	f7ff ffee 	bl	8007784 <HAL_GetTick>
 80077a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d005      	beq.n	80077c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <HAL_Delay+0x44>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077c2:	bf00      	nop
 80077c4:	f7ff ffde 	bl	8007784 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d8f7      	bhi.n	80077c4 <HAL_Delay+0x28>
  {
  }
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200000f8 	.word	0x200000f8

080077e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <__NVIC_SetPriorityGrouping+0x40>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007800:	4013      	ands	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <__NVIC_SetPriorityGrouping+0x44>)
 800780e:	4313      	orrs	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007812:	4a04      	ldr	r2, [pc, #16]	; (8007824 <__NVIC_SetPriorityGrouping+0x40>)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	60d3      	str	r3, [r2, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	e000ed00 	.word	0xe000ed00
 8007828:	05fa0000 	.word	0x05fa0000

0800782c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <__NVIC_GetPriorityGrouping+0x18>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	0a1b      	lsrs	r3, r3, #8
 8007836:	f003 0307 	and.w	r3, r3, #7
}
 800783a:	4618      	mov	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	e000ed00 	.word	0xe000ed00

08007848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007856:	2b00      	cmp	r3, #0
 8007858:	db0b      	blt.n	8007872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	f003 021f 	and.w	r2, r3, #31
 8007860:	4907      	ldr	r1, [pc, #28]	; (8007880 <__NVIC_EnableIRQ+0x38>)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	2001      	movs	r0, #1
 800786a:	fa00 f202 	lsl.w	r2, r0, r2
 800786e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e100 	.word	0xe000e100

08007884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007894:	2b00      	cmp	r3, #0
 8007896:	db0a      	blt.n	80078ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	b2da      	uxtb	r2, r3
 800789c:	490c      	ldr	r1, [pc, #48]	; (80078d0 <__NVIC_SetPriority+0x4c>)
 800789e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a2:	0112      	lsls	r2, r2, #4
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	440b      	add	r3, r1
 80078a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078ac:	e00a      	b.n	80078c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	4908      	ldr	r1, [pc, #32]	; (80078d4 <__NVIC_SetPriority+0x50>)
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3b04      	subs	r3, #4
 80078bc:	0112      	lsls	r2, r2, #4
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	440b      	add	r3, r1
 80078c2:	761a      	strb	r2, [r3, #24]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	e000e100 	.word	0xe000e100
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f1c3 0307 	rsb	r3, r3, #7
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf28      	it	cs
 80078f6:	2304      	movcs	r3, #4
 80078f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d902      	bls.n	8007908 <NVIC_EncodePriority+0x30>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3b03      	subs	r3, #3
 8007906:	e000      	b.n	800790a <NVIC_EncodePriority+0x32>
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	43da      	mvns	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	401a      	ands	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007920:	f04f 31ff 	mov.w	r1, #4294967295
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	43d9      	mvns	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007930:	4313      	orrs	r3, r2
         );
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	; 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3b01      	subs	r3, #1
 800794c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007950:	d301      	bcc.n	8007956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007952:	2301      	movs	r3, #1
 8007954:	e00f      	b.n	8007976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007956:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <SysTick_Config+0x40>)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3b01      	subs	r3, #1
 800795c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800795e:	210f      	movs	r1, #15
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	f7ff ff8e 	bl	8007884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <SysTick_Config+0x40>)
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <SysTick_Config+0x40>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010

08007984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff29 	bl	80077e4 <__NVIC_SetPriorityGrouping>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	4603      	mov	r3, r0
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079ac:	f7ff ff3e 	bl	800782c <__NVIC_GetPriorityGrouping>
 80079b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7ff ff8e 	bl	80078d8 <NVIC_EncodePriority>
 80079bc:	4602      	mov	r2, r0
 80079be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff ff5d 	bl	8007884 <__NVIC_SetPriority>
}
 80079ca:	bf00      	nop
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4603      	mov	r3, r0
 80079da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff31 	bl	8007848 <__NVIC_EnableIRQ>
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ffa2 	bl	8007940 <SysTick_Config>
 80079fc:	4603      	mov	r3, r0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e06a      	b.n	8007af0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2223      	movs	r2, #35	; 0x23
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7f9 ff5f 	bl	80018f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a32:	4b31      	ldr	r3, [pc, #196]	; (8007af8 <HAL_ETH_Init+0xf0>)
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	4a30      	ldr	r2, [pc, #192]	; (8007af8 <HAL_ETH_Init+0xf0>)
 8007a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <HAL_ETH_Init+0xf0>)
 8007a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007a4a:	4b2c      	ldr	r3, [pc, #176]	; (8007afc <HAL_ETH_Init+0xf4>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4a2b      	ldr	r2, [pc, #172]	; (8007afc <HAL_ETH_Init+0xf4>)
 8007a50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <HAL_ETH_Init+0xf4>)
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4927      	ldr	r1, [pc, #156]	; (8007afc <HAL_ETH_Init+0xf4>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <HAL_ETH_Init+0xf4>)
 8007a66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a80:	f7ff fe80 	bl	8007784 <HAL_GetTick>
 8007a84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007a86:	e011      	b.n	8007aac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007a88:	f7ff fe7c 	bl	8007784 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a96:	d909      	bls.n	8007aac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	22e0      	movs	r2, #224	; 0xe0
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e021      	b.n	8007af0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e4      	bne.n	8007a88 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f958 	bl	8007d74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9ff 	bl	8007ec8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa55 	bl	8007f7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9bd 	bl	8007e58 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2210      	movs	r2, #16
 8007aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40023800 	.word	0x40023800
 8007afc:	40013800 	.word	0x40013800

08007b00 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4b51      	ldr	r3, [pc, #324]	; (8007c5c <ETH_SetMACConfig+0x15c>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <ETH_SetMACConfig+0x28>
 8007b22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007b26:	e000      	b.n	8007b2a <ETH_SetMACConfig+0x2a>
 8007b28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	7c5b      	ldrb	r3, [r3, #17]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <ETH_SetMACConfig+0x38>
 8007b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b36:	e000      	b.n	8007b3a <ETH_SetMACConfig+0x3a>
 8007b38:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007b3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007b40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	7fdb      	ldrb	r3, [r3, #31]
 8007b46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007b48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007b4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	7f92      	ldrb	r2, [r2, #30]
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	d102      	bne.n	8007b5e <ETH_SetMACConfig+0x5e>
 8007b58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b5c:	e000      	b.n	8007b60 <ETH_SetMACConfig+0x60>
 8007b5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007b60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	7f1b      	ldrb	r3, [r3, #28]
 8007b66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007b68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007b6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d102      	bne.n	8007b88 <ETH_SetMACConfig+0x88>
 8007b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b86:	e000      	b.n	8007b8a <ETH_SetMACConfig+0x8a>
 8007b88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007b8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	7bdb      	ldrb	r3, [r3, #15]
 8007b90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007b92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007b98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bba:	2001      	movs	r0, #1
 8007bbc:	f7ff fdee 	bl	800779c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bde:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	d101      	bne.n	8007bee <ETH_SetMACConfig+0xee>
 8007bea:	2280      	movs	r2, #128	; 0x80
 8007bec:	e000      	b.n	8007bf0 <ETH_SetMACConfig+0xf0>
 8007bee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007bf0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007bf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007bfe:	2a01      	cmp	r2, #1
 8007c00:	d101      	bne.n	8007c06 <ETH_SetMACConfig+0x106>
 8007c02:	2208      	movs	r2, #8
 8007c04:	e000      	b.n	8007c08 <ETH_SetMACConfig+0x108>
 8007c06:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007c08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8007c10:	2a01      	cmp	r2, #1
 8007c12:	d101      	bne.n	8007c18 <ETH_SetMACConfig+0x118>
 8007c14:	2204      	movs	r2, #4
 8007c16:	e000      	b.n	8007c1a <ETH_SetMACConfig+0x11a>
 8007c18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007c1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8007c22:	2a01      	cmp	r2, #1
 8007c24:	d101      	bne.n	8007c2a <ETH_SetMACConfig+0x12a>
 8007c26:	2202      	movs	r2, #2
 8007c28:	e000      	b.n	8007c2c <ETH_SetMACConfig+0x12c>
 8007c2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c44:	2001      	movs	r0, #1
 8007c46:	f7ff fda9 	bl	800779c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	619a      	str	r2, [r3, #24]
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	ff20810f 	.word	0xff20810f

08007c60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4b3d      	ldr	r3, [pc, #244]	; (8007d70 <ETH_SetDMAConfig+0x110>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	7b1b      	ldrb	r3, [r3, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <ETH_SetDMAConfig+0x2c>
 8007c86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007c8a:	e000      	b.n	8007c8e <ETH_SetDMAConfig+0x2e>
 8007c8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	7b5b      	ldrb	r3, [r3, #13]
 8007c92:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007c94:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	7f52      	ldrb	r2, [r2, #29]
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	d102      	bne.n	8007ca4 <ETH_SetDMAConfig+0x44>
 8007c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ca2:	e000      	b.n	8007ca6 <ETH_SetDMAConfig+0x46>
 8007ca4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007ca6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	7b9b      	ldrb	r3, [r3, #14]
 8007cac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007cae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007cb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	7f1b      	ldrb	r3, [r3, #28]
 8007cba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007cbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	7f9b      	ldrb	r3, [r3, #30]
 8007cc2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007cc4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007cca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cd2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	f7ff fd50 	bl	800779c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d04:	461a      	mov	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007d1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007d20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007d2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007d32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007d38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d54:	2001      	movs	r0, #1
 8007d56:	f7ff fd21 	bl	800779c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d62:	461a      	mov	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6013      	str	r3, [r2, #0]
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	f8de3f23 	.word	0xf8de3f23

08007d74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b0a6      	sub	sp, #152	; 0x98
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007db0:	2300      	movs	r3, #0
 8007db2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007dda:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fe86 	bl	8007b00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007df4:	2301      	movs	r3, #1
 8007df6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007e16:	2300      	movs	r3, #0
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e28:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff ff08 	bl	8007c60 <ETH_SetDMAConfig>
}
 8007e50:	bf00      	nop
 8007e52:	3798      	adds	r7, #152	; 0x98
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3305      	adds	r3, #5
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	3204      	adds	r2, #4
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <ETH_MACAddressConfig+0x68>)
 8007e7a:	4413      	add	r3, r2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3303      	adds	r3, #3
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	061a      	lsls	r2, r3, #24
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3301      	adds	r3, #1
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <ETH_MACAddressConfig+0x6c>)
 8007eaa:	4413      	add	r3, r2
 8007eac:	461a      	mov	r2, r3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6013      	str	r3, [r2, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40028040 	.word	0x40028040
 8007ec4:	40028044 	.word	0x40028044

08007ec8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e03e      	b.n	8007f54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68d9      	ldr	r1, [r3, #12]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	440b      	add	r3, r1
 8007ee6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2200      	movs	r2, #0
 8007efe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	3206      	adds	r2, #6
 8007f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d80c      	bhi.n	8007f38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68d9      	ldr	r1, [r3, #12]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	440b      	add	r3, r1
 8007f30:	461a      	mov	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	e004      	b.n	8007f42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3301      	adds	r3, #1
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d9bd      	bls.n	8007ed6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	611a      	str	r2, [r3, #16]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e046      	b.n	8008016 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6919      	ldr	r1, [r3, #16]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	00db      	lsls	r3, r3, #3
 8007f96:	440b      	add	r3, r1
 8007f98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8007fcc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	3212      	adds	r2, #18
 8007fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d80c      	bhi.n	8008006 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6919      	ldr	r1, [r3, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	440b      	add	r3, r1
 8007ffe:	461a      	mov	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	e004      	b.n	8008010 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	461a      	mov	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d9b5      	bls.n	8007f88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008046:	60da      	str	r2, [r3, #12]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	460b      	mov	r3, r1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d103      	bne.n	8008074 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	605a      	str	r2, [r3, #4]
      break;
 8008072:	e002      	b.n	800807a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	bf00      	nop
  }

  return status;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
}
 800807c:	4618      	mov	r0, r3
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e003      	b.n	80080a4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
  }
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2201      	movs	r2, #1
 80080c2:	fa02 f303 	lsl.w	r3, r2, r3
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <HAL_EXTI_IRQHandler+0x44>)
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4013      	ands	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d009      	beq.n	80080ec <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80080d8:	4a06      	ldr	r2, [pc, #24]	; (80080f4 <HAL_EXTI_IRQHandler+0x44>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	4798      	blx	r3
    }
  }
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40013c00 	.word	0x40013c00

080080f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b089      	sub	sp, #36	; 0x24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008102:	2300      	movs	r3, #0
 8008104:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800810e:	2300      	movs	r3, #0
 8008110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	e175      	b.n	8008404 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008118:	2201      	movs	r2, #1
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4013      	ands	r3, r2
 800812a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	429a      	cmp	r2, r3
 8008132:	f040 8164 	bne.w	80083fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b01      	cmp	r3, #1
 8008140:	d005      	beq.n	800814e <HAL_GPIO_Init+0x56>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d130      	bne.n	80081b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	2203      	movs	r2, #3
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	43db      	mvns	r3, r3
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	4013      	ands	r3, r2
 8008164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	4313      	orrs	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008184:	2201      	movs	r2, #1
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	fa02 f303 	lsl.w	r3, r2, r3
 800818c:	43db      	mvns	r3, r3
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	4013      	ands	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	091b      	lsrs	r3, r3, #4
 800819a:	f003 0201 	and.w	r2, r3, #1
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d017      	beq.n	80081ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	2203      	movs	r2, #3
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	43db      	mvns	r3, r3
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	4013      	ands	r3, r2
 80081d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	fa02 f303 	lsl.w	r3, r2, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d123      	bne.n	8008240 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	08da      	lsrs	r2, r3, #3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3208      	adds	r2, #8
 8008200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	220f      	movs	r2, #15
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4013      	ands	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	4313      	orrs	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	08da      	lsrs	r2, r3, #3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3208      	adds	r2, #8
 800823a:	69b9      	ldr	r1, [r7, #24]
 800823c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	2203      	movs	r2, #3
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	43db      	mvns	r3, r3
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	4013      	ands	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f003 0203 	and.w	r2, r3, #3
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	4313      	orrs	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80be 	beq.w	80083fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008282:	4b66      	ldr	r3, [pc, #408]	; (800841c <HAL_GPIO_Init+0x324>)
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	4a65      	ldr	r2, [pc, #404]	; (800841c <HAL_GPIO_Init+0x324>)
 8008288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800828c:	6453      	str	r3, [r2, #68]	; 0x44
 800828e:	4b63      	ldr	r3, [pc, #396]	; (800841c <HAL_GPIO_Init+0x324>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800829a:	4a61      	ldr	r2, [pc, #388]	; (8008420 <HAL_GPIO_Init+0x328>)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	089b      	lsrs	r3, r3, #2
 80082a0:	3302      	adds	r3, #2
 80082a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	220f      	movs	r2, #15
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a58      	ldr	r2, [pc, #352]	; (8008424 <HAL_GPIO_Init+0x32c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d037      	beq.n	8008336 <HAL_GPIO_Init+0x23e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a57      	ldr	r2, [pc, #348]	; (8008428 <HAL_GPIO_Init+0x330>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d031      	beq.n	8008332 <HAL_GPIO_Init+0x23a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a56      	ldr	r2, [pc, #344]	; (800842c <HAL_GPIO_Init+0x334>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d02b      	beq.n	800832e <HAL_GPIO_Init+0x236>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a55      	ldr	r2, [pc, #340]	; (8008430 <HAL_GPIO_Init+0x338>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d025      	beq.n	800832a <HAL_GPIO_Init+0x232>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a54      	ldr	r2, [pc, #336]	; (8008434 <HAL_GPIO_Init+0x33c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01f      	beq.n	8008326 <HAL_GPIO_Init+0x22e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a53      	ldr	r2, [pc, #332]	; (8008438 <HAL_GPIO_Init+0x340>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d019      	beq.n	8008322 <HAL_GPIO_Init+0x22a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a52      	ldr	r2, [pc, #328]	; (800843c <HAL_GPIO_Init+0x344>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <HAL_GPIO_Init+0x226>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a51      	ldr	r2, [pc, #324]	; (8008440 <HAL_GPIO_Init+0x348>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00d      	beq.n	800831a <HAL_GPIO_Init+0x222>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a50      	ldr	r2, [pc, #320]	; (8008444 <HAL_GPIO_Init+0x34c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d007      	beq.n	8008316 <HAL_GPIO_Init+0x21e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a4f      	ldr	r2, [pc, #316]	; (8008448 <HAL_GPIO_Init+0x350>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d101      	bne.n	8008312 <HAL_GPIO_Init+0x21a>
 800830e:	2309      	movs	r3, #9
 8008310:	e012      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008312:	230a      	movs	r3, #10
 8008314:	e010      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008316:	2308      	movs	r3, #8
 8008318:	e00e      	b.n	8008338 <HAL_GPIO_Init+0x240>
 800831a:	2307      	movs	r3, #7
 800831c:	e00c      	b.n	8008338 <HAL_GPIO_Init+0x240>
 800831e:	2306      	movs	r3, #6
 8008320:	e00a      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008322:	2305      	movs	r3, #5
 8008324:	e008      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008326:	2304      	movs	r3, #4
 8008328:	e006      	b.n	8008338 <HAL_GPIO_Init+0x240>
 800832a:	2303      	movs	r3, #3
 800832c:	e004      	b.n	8008338 <HAL_GPIO_Init+0x240>
 800832e:	2302      	movs	r3, #2
 8008330:	e002      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <HAL_GPIO_Init+0x240>
 8008336:	2300      	movs	r3, #0
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	f002 0203 	and.w	r2, r2, #3
 800833e:	0092      	lsls	r2, r2, #2
 8008340:	4093      	lsls	r3, r2
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	4313      	orrs	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008348:	4935      	ldr	r1, [pc, #212]	; (8008420 <HAL_GPIO_Init+0x328>)
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	089b      	lsrs	r3, r3, #2
 800834e:	3302      	adds	r3, #2
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008356:	4b3d      	ldr	r3, [pc, #244]	; (800844c <HAL_GPIO_Init+0x354>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	43db      	mvns	r3, r3
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	4013      	ands	r3, r2
 8008364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800837a:	4a34      	ldr	r2, [pc, #208]	; (800844c <HAL_GPIO_Init+0x354>)
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008380:	4b32      	ldr	r3, [pc, #200]	; (800844c <HAL_GPIO_Init+0x354>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	43db      	mvns	r3, r3
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	4013      	ands	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083a4:	4a29      	ldr	r2, [pc, #164]	; (800844c <HAL_GPIO_Init+0x354>)
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083aa:	4b28      	ldr	r3, [pc, #160]	; (800844c <HAL_GPIO_Init+0x354>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	43db      	mvns	r3, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4013      	ands	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083ce:	4a1f      	ldr	r2, [pc, #124]	; (800844c <HAL_GPIO_Init+0x354>)
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <HAL_GPIO_Init+0x354>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	43db      	mvns	r3, r3
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	4013      	ands	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083f8:	4a14      	ldr	r2, [pc, #80]	; (800844c <HAL_GPIO_Init+0x354>)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	3301      	adds	r3, #1
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	f67f ae86 	bls.w	8008118 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	3724      	adds	r7, #36	; 0x24
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40023800 	.word	0x40023800
 8008420:	40013800 	.word	0x40013800
 8008424:	40020000 	.word	0x40020000
 8008428:	40020400 	.word	0x40020400
 800842c:	40020800 	.word	0x40020800
 8008430:	40020c00 	.word	0x40020c00
 8008434:	40021000 	.word	0x40021000
 8008438:	40021400 	.word	0x40021400
 800843c:	40021800 	.word	0x40021800
 8008440:	40021c00 	.word	0x40021c00
 8008444:	40022000 	.word	0x40022000
 8008448:	40022400 	.word	0x40022400
 800844c:	40013c00 	.word	0x40013c00

08008450 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800845a:	2300      	movs	r3, #0
 800845c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008462:	2300      	movs	r3, #0
 8008464:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e0d9      	b.n	8008620 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800846c:	2201      	movs	r2, #1
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	fa02 f303 	lsl.w	r3, r2, r3
 8008474:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4013      	ands	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	429a      	cmp	r2, r3
 8008484:	f040 80c9 	bne.w	800861a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008488:	4a6b      	ldr	r2, [pc, #428]	; (8008638 <HAL_GPIO_DeInit+0x1e8>)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	3302      	adds	r3, #2
 8008490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008494:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	220f      	movs	r2, #15
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4013      	ands	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a63      	ldr	r2, [pc, #396]	; (800863c <HAL_GPIO_DeInit+0x1ec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d037      	beq.n	8008522 <HAL_GPIO_DeInit+0xd2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a62      	ldr	r2, [pc, #392]	; (8008640 <HAL_GPIO_DeInit+0x1f0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d031      	beq.n	800851e <HAL_GPIO_DeInit+0xce>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a61      	ldr	r2, [pc, #388]	; (8008644 <HAL_GPIO_DeInit+0x1f4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d02b      	beq.n	800851a <HAL_GPIO_DeInit+0xca>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a60      	ldr	r2, [pc, #384]	; (8008648 <HAL_GPIO_DeInit+0x1f8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d025      	beq.n	8008516 <HAL_GPIO_DeInit+0xc6>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a5f      	ldr	r2, [pc, #380]	; (800864c <HAL_GPIO_DeInit+0x1fc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d01f      	beq.n	8008512 <HAL_GPIO_DeInit+0xc2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a5e      	ldr	r2, [pc, #376]	; (8008650 <HAL_GPIO_DeInit+0x200>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d019      	beq.n	800850e <HAL_GPIO_DeInit+0xbe>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a5d      	ldr	r2, [pc, #372]	; (8008654 <HAL_GPIO_DeInit+0x204>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <HAL_GPIO_DeInit+0xba>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a5c      	ldr	r2, [pc, #368]	; (8008658 <HAL_GPIO_DeInit+0x208>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00d      	beq.n	8008506 <HAL_GPIO_DeInit+0xb6>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a5b      	ldr	r2, [pc, #364]	; (800865c <HAL_GPIO_DeInit+0x20c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d007      	beq.n	8008502 <HAL_GPIO_DeInit+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a5a      	ldr	r2, [pc, #360]	; (8008660 <HAL_GPIO_DeInit+0x210>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d101      	bne.n	80084fe <HAL_GPIO_DeInit+0xae>
 80084fa:	2309      	movs	r3, #9
 80084fc:	e012      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 80084fe:	230a      	movs	r3, #10
 8008500:	e010      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 8008502:	2308      	movs	r3, #8
 8008504:	e00e      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 8008506:	2307      	movs	r3, #7
 8008508:	e00c      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 800850a:	2306      	movs	r3, #6
 800850c:	e00a      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 800850e:	2305      	movs	r3, #5
 8008510:	e008      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 8008512:	2304      	movs	r3, #4
 8008514:	e006      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 8008516:	2303      	movs	r3, #3
 8008518:	e004      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 800851a:	2302      	movs	r3, #2
 800851c:	e002      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <HAL_GPIO_DeInit+0xd4>
 8008522:	2300      	movs	r3, #0
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	f002 0203 	and.w	r2, r2, #3
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	4093      	lsls	r3, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	429a      	cmp	r2, r3
 8008532:	d132      	bne.n	800859a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008534:	4b4b      	ldr	r3, [pc, #300]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	43db      	mvns	r3, r3
 800853c:	4949      	ldr	r1, [pc, #292]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 800853e:	4013      	ands	r3, r2
 8008540:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008542:	4b48      	ldr	r3, [pc, #288]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	43db      	mvns	r3, r3
 800854a:	4946      	ldr	r1, [pc, #280]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 800854c:	4013      	ands	r3, r2
 800854e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008550:	4b44      	ldr	r3, [pc, #272]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	43db      	mvns	r3, r3
 8008558:	4942      	ldr	r1, [pc, #264]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 800855a:	4013      	ands	r3, r2
 800855c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800855e:	4b41      	ldr	r3, [pc, #260]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	43db      	mvns	r3, r3
 8008566:	493f      	ldr	r1, [pc, #252]	; (8008664 <HAL_GPIO_DeInit+0x214>)
 8008568:	4013      	ands	r3, r2
 800856a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	220f      	movs	r2, #15
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800857c:	4a2e      	ldr	r2, [pc, #184]	; (8008638 <HAL_GPIO_DeInit+0x1e8>)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	089b      	lsrs	r3, r3, #2
 8008582:	3302      	adds	r3, #2
 8008584:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	43da      	mvns	r2, r3
 800858c:	482a      	ldr	r0, [pc, #168]	; (8008638 <HAL_GPIO_DeInit+0x1e8>)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	089b      	lsrs	r3, r3, #2
 8008592:	400a      	ands	r2, r1
 8008594:	3302      	adds	r3, #2
 8008596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	2103      	movs	r1, #3
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	401a      	ands	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	08da      	lsrs	r2, r3, #3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3208      	adds	r2, #8
 80085b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	220f      	movs	r2, #15
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	43db      	mvns	r3, r3
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	08d2      	lsrs	r2, r2, #3
 80085d0:	4019      	ands	r1, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3208      	adds	r2, #8
 80085d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	2103      	movs	r1, #3
 80085e4:	fa01 f303 	lsl.w	r3, r1, r3
 80085e8:	43db      	mvns	r3, r3
 80085ea:	401a      	ands	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	2101      	movs	r1, #1
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	401a      	ands	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	2103      	movs	r1, #3
 800860e:	fa01 f303 	lsl.w	r3, r1, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	401a      	ands	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	3301      	adds	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b0f      	cmp	r3, #15
 8008624:	f67f af22 	bls.w	800846c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40013800 	.word	0x40013800
 800863c:	40020000 	.word	0x40020000
 8008640:	40020400 	.word	0x40020400
 8008644:	40020800 	.word	0x40020800
 8008648:	40020c00 	.word	0x40020c00
 800864c:	40021000 	.word	0x40021000
 8008650:	40021400 	.word	0x40021400
 8008654:	40021800 	.word	0x40021800
 8008658:	40021c00 	.word	0x40021c00
 800865c:	40022000 	.word	0x40022000
 8008660:	40022400 	.word	0x40022400
 8008664:	40013c00 	.word	0x40013c00

08008668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691a      	ldr	r2, [r3, #16]
 8008678:	887b      	ldrh	r3, [r7, #2]
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
 8008684:	e001      	b.n	800868a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
 80086a4:	4613      	mov	r3, r2
 80086a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086a8:	787b      	ldrb	r3, [r7, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ae:	887a      	ldrh	r2, [r7, #2]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80086b4:	e003      	b.n	80086be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80086b6:	887b      	ldrh	r3, [r7, #2]
 80086b8:	041a      	lsls	r2, r3, #16
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	619a      	str	r2, [r3, #24]
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e07f      	b.n	80087de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f8a9 	bl	800884a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2224      	movs	r2, #36	; 0x24
 80086fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800871c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800872c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d107      	bne.n	8008746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008742:	609a      	str	r2, [r3, #8]
 8008744:	e006      	b.n	8008754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d104      	bne.n	8008766 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6859      	ldr	r1, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b1d      	ldr	r3, [pc, #116]	; (80087e8 <HAL_I2C_Init+0x11c>)
 8008772:	430b      	orrs	r3, r1
 8008774:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008784:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69d9      	ldr	r1, [r3, #28]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1a      	ldr	r2, [r3, #32]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	02008000 	.word	0x02008000

080087ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e021      	b.n	8008842 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2224      	movs	r2, #36	; 0x24
 8008802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f821 	bl	800885e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
	...

08008874 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af02      	add	r7, sp, #8
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	4603      	mov	r3, r0
 8008884:	817b      	strh	r3, [r7, #10]
 8008886:	460b      	mov	r3, r1
 8008888:	813b      	strh	r3, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b20      	cmp	r3, #32
 8008898:	f040 80f9 	bne.w	8008a8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <HAL_I2C_Mem_Write+0x34>
 80088a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e0ed      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_I2C_Mem_Write+0x4e>
 80088be:	2302      	movs	r3, #2
 80088c0:	e0e6      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ca:	f7fe ff5b 	bl	8007784 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	2319      	movs	r3, #25
 80088d6:	2201      	movs	r2, #1
 80088d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fadd 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0d1      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2221      	movs	r2, #33	; 0x21
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2240      	movs	r2, #64	; 0x40
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a3a      	ldr	r2, [r7, #32]
 8008906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800890c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008914:	88f8      	ldrh	r0, [r7, #6]
 8008916:	893a      	ldrh	r2, [r7, #8]
 8008918:	8979      	ldrh	r1, [r7, #10]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	4603      	mov	r3, r0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f9ed 	bl	8008d04 <I2C_RequestMemoryWrite>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e0a9      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	2bff      	cmp	r3, #255	; 0xff
 8008944:	d90e      	bls.n	8008964 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	22ff      	movs	r2, #255	; 0xff
 800894a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008950:	b2da      	uxtb	r2, r3
 8008952:	8979      	ldrh	r1, [r7, #10]
 8008954:	2300      	movs	r3, #0
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fc39 	bl	80091d4 <I2C_TransferConfig>
 8008962:	e00f      	b.n	8008984 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008972:	b2da      	uxtb	r2, r3
 8008974:	8979      	ldrh	r1, [r7, #10]
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fc28 	bl	80091d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fac7 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e07b      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d034      	beq.n	8008a3c <HAL_I2C_Mem_Write+0x1c8>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d130      	bne.n	8008a3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2200      	movs	r2, #0
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fa59 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e04d      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2bff      	cmp	r3, #255	; 0xff
 80089fc:	d90e      	bls.n	8008a1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	22ff      	movs	r2, #255	; 0xff
 8008a02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	8979      	ldrh	r1, [r7, #10]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fbdd 	bl	80091d4 <I2C_TransferConfig>
 8008a1a:	e00f      	b.n	8008a3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	8979      	ldrh	r1, [r7, #10]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fbcc 	bl	80091d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d19e      	bne.n	8008984 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 faa6 	bl	8008f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e01a      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6859      	ldr	r1, [r3, #4]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <HAL_I2C_Mem_Write+0x224>)
 8008a6e:	400b      	ands	r3, r1
 8008a70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e000      	b.n	8008a90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
  }
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	fe00e800 	.word	0xfe00e800

08008a9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	817b      	strh	r3, [r7, #10]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	813b      	strh	r3, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	f040 80fd 	bne.w	8008cbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_I2C_Mem_Read+0x34>
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d105      	bne.n	8008adc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e0f1      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_I2C_Mem_Read+0x4e>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e0ea      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008af2:	f7fe fe47 	bl	8007784 <HAL_GetTick>
 8008af6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	2319      	movs	r3, #25
 8008afe:	2201      	movs	r2, #1
 8008b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f9c9 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0d5      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2222      	movs	r2, #34	; 0x22
 8008b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2240      	movs	r2, #64	; 0x40
 8008b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a3a      	ldr	r2, [r7, #32]
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b3c:	88f8      	ldrh	r0, [r7, #6]
 8008b3e:	893a      	ldrh	r2, [r7, #8]
 8008b40:	8979      	ldrh	r1, [r7, #10]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f92d 	bl	8008dac <I2C_RequestMemoryRead>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e0ad      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2bff      	cmp	r3, #255	; 0xff
 8008b6c:	d90e      	bls.n	8008b8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	8979      	ldrh	r1, [r7, #10]
 8008b7c:	4b52      	ldr	r3, [pc, #328]	; (8008cc8 <HAL_I2C_Mem_Read+0x22c>)
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fb25 	bl	80091d4 <I2C_TransferConfig>
 8008b8a:	e00f      	b.n	8008bac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	8979      	ldrh	r1, [r7, #10]
 8008b9e:	4b4a      	ldr	r3, [pc, #296]	; (8008cc8 <HAL_I2C_Mem_Read+0x22c>)
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fb14 	bl	80091d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f970 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e07c      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be2:	3b01      	subs	r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d034      	beq.n	8008c6c <HAL_I2C_Mem_Read+0x1d0>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d130      	bne.n	8008c6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	2200      	movs	r2, #0
 8008c12:	2180      	movs	r1, #128	; 0x80
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f941 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e04d      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2bff      	cmp	r3, #255	; 0xff
 8008c2c:	d90e      	bls.n	8008c4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	22ff      	movs	r2, #255	; 0xff
 8008c32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	8979      	ldrh	r1, [r7, #10]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 fac5 	bl	80091d4 <I2C_TransferConfig>
 8008c4a:	e00f      	b.n	8008c6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	8979      	ldrh	r1, [r7, #10]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fab4 	bl	80091d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d19a      	bne.n	8008bac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f98e 	bl	8008f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e01a      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <HAL_I2C_Mem_Read+0x230>)
 8008c9e:	400b      	ands	r3, r1
 8008ca0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
  }
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	80002400 	.word	0x80002400
 8008ccc:	fe00e800 	.word	0xfe00e800

08008cd0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cde:	b2db      	uxtb	r3, r3
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	817b      	strh	r3, [r7, #10]
 8008d16:	460b      	mov	r3, r1
 8008d18:	813b      	strh	r3, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	8979      	ldrh	r1, [r7, #10]
 8008d24:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <I2C_RequestMemoryWrite+0xa4>)
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fa51 	bl	80091d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f8f0 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e02c      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d105      	bne.n	8008d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d4c:	893b      	ldrh	r3, [r7, #8]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	629a      	str	r2, [r3, #40]	; 0x28
 8008d56:	e015      	b.n	8008d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d58:	893b      	ldrh	r3, [r7, #8]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	69b9      	ldr	r1, [r7, #24]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f8d6 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e012      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d7a:	893b      	ldrh	r3, [r7, #8]
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2180      	movs	r1, #128	; 0x80
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f884 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	80002000 	.word	0x80002000

08008dac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	4608      	mov	r0, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4603      	mov	r3, r0
 8008dbc:	817b      	strh	r3, [r7, #10]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	813b      	strh	r3, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	8979      	ldrh	r1, [r7, #10]
 8008dcc:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <I2C_RequestMemoryRead+0xa4>)
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f9fe 	bl	80091d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	69b9      	ldr	r1, [r7, #24]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 f89d 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e02c      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d105      	bne.n	8008dfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008df2:	893b      	ldrh	r3, [r7, #8]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8008dfc:	e015      	b.n	8008e2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008dfe:	893b      	ldrh	r3, [r7, #8]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f883 	bl	8008f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e012      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e20:	893b      	ldrh	r3, [r7, #8]
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2200      	movs	r2, #0
 8008e32:	2140      	movs	r1, #64	; 0x40
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f831 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	80002000 	.word	0x80002000

08008e54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d103      	bne.n	8008e72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d007      	beq.n	8008e90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	619a      	str	r2, [r3, #24]
  }
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eac:	e022      	b.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d01e      	beq.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb6:	f7fe fc65 	bl	8007784 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d302      	bcc.n	8008ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d113      	bne.n	8008ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed0:	f043 0220 	orr.w	r2, r3, #32
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e00f      	b.n	8008f14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4013      	ands	r3, r2
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	bf0c      	ite	eq
 8008f04:	2301      	moveq	r3, #1
 8008f06:	2300      	movne	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d0cd      	beq.n	8008eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f28:	e02c      	b.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f870 	bl	8009014 <I2C_IsErrorOccurred>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e02a      	b.n	8008f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f44:	d01e      	beq.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f46:	f7fe fc1d 	bl	8007784 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d302      	bcc.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d113      	bne.n	8008f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e007      	b.n	8008f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d1cb      	bne.n	8008f2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fa8:	e028      	b.n	8008ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 f830 	bl	8009014 <I2C_IsErrorOccurred>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e026      	b.n	800900c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbe:	f7fe fbe1 	bl	8007784 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d302      	bcc.n	8008fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d113      	bne.n	8008ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd8:	f043 0220 	orr.w	r2, r3, #32
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e007      	b.n	800900c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b20      	cmp	r3, #32
 8009008:	d1cf      	bne.n	8008faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08a      	sub	sp, #40	; 0x28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d068      	beq.n	8009112 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2210      	movs	r2, #16
 8009046:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009048:	e049      	b.n	80090de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d045      	beq.n	80090de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009052:	f7fe fb97 	bl	8007784 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <I2C_IsErrorOccurred+0x54>
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d13a      	bne.n	80090de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009072:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800907a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908a:	d121      	bne.n	80090d0 <I2C_IsErrorOccurred+0xbc>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009092:	d01d      	beq.n	80090d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009094:	7cfb      	ldrb	r3, [r7, #19]
 8009096:	2b20      	cmp	r3, #32
 8009098:	d01a      	beq.n	80090d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80090aa:	f7fe fb6b 	bl	8007784 <HAL_GetTick>
 80090ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090b0:	e00e      	b.n	80090d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80090b2:	f7fe fb67 	bl	8007784 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b19      	cmp	r3, #25
 80090be:	d907      	bls.n	80090d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	f043 0320 	orr.w	r3, r3, #32
 80090c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80090ce:	e006      	b.n	80090de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d1e9      	bne.n	80090b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d003      	beq.n	80090f4 <I2C_IsErrorOccurred+0xe0>
 80090ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0aa      	beq.n	800904a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2220      	movs	r2, #32
 8009102:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	f043 0304 	orr.w	r3, r3, #4
 800910a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00b      	beq.n	800915e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	f043 0308 	orr.w	r3, r3, #8
 800914c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01c      	beq.n	80091c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff fe63 	bl	8008e54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6859      	ldr	r1, [r3, #4]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <I2C_IsErrorOccurred+0x1bc>)
 800919a:	400b      	ands	r3, r1
 800919c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80091c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3728      	adds	r7, #40	; 0x28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	fe00e800 	.word	0xfe00e800

080091d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	817b      	strh	r3, [r7, #10]
 80091e2:	4613      	mov	r3, r2
 80091e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091e6:	897b      	ldrh	r3, [r7, #10]
 80091e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091ec:	7a7b      	ldrb	r3, [r7, #9]
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009202:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	0d5b      	lsrs	r3, r3, #21
 800920e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <I2C_TransferConfig+0x60>)
 8009214:	430b      	orrs	r3, r1
 8009216:	43db      	mvns	r3, r3
 8009218:	ea02 0103 	and.w	r1, r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	430a      	orrs	r2, r1
 8009224:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	03ff63ff 	.word	0x03ff63ff

08009238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b20      	cmp	r3, #32
 800924c:	d138      	bne.n	80092c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009258:	2302      	movs	r3, #2
 800925a:	e032      	b.n	80092c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2224      	movs	r2, #36	; 0x24
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800928a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
  }
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d139      	bne.n	8009358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e033      	b.n	800935a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2224      	movs	r2, #36	; 0x24
 80092fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	021b      	lsls	r3, r3, #8
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0201 	orr.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009368:	b08f      	sub	sp, #60	; 0x3c
 800936a:	af0a      	add	r7, sp, #40	; 0x28
 800936c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e116      	b.n	80095a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7f8 fb64 	bl	8001a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2203      	movs	r2, #3
 800939c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 ff20 	bl	800b1fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	687e      	ldr	r6, [r7, #4]
 80093c4:	466d      	mov	r5, sp
 80093c6:	f106 0410 	add.w	r4, r6, #16
 80093ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80093da:	1d33      	adds	r3, r6, #4
 80093dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093de:	6838      	ldr	r0, [r7, #0]
 80093e0:	f001 feb4 	bl	800b14c <USB_CoreInit>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e0d7      	b.n	80095a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 ff0e 	bl	800b21e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
 8009406:	e04a      	b.n	800949e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	333d      	adds	r3, #61	; 0x3d
 8009418:	2201      	movs	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800941c:	7bfa      	ldrb	r2, [r7, #15]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	333c      	adds	r3, #60	; 0x3c
 800942c:	7bfa      	ldrb	r2, [r7, #15]
 800942e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009430:	7bfa      	ldrb	r2, [r7, #15]
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	b298      	uxth	r0, r3
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	3344      	adds	r3, #68	; 0x44
 8009444:	4602      	mov	r2, r0
 8009446:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009448:	7bfa      	ldrb	r2, [r7, #15]
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4613      	mov	r3, r2
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	3340      	adds	r3, #64	; 0x40
 8009458:	2200      	movs	r2, #0
 800945a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800945c:	7bfa      	ldrb	r2, [r7, #15]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	3348      	adds	r3, #72	; 0x48
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	334c      	adds	r3, #76	; 0x4c
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009484:	7bfa      	ldrb	r2, [r7, #15]
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	3354      	adds	r3, #84	; 0x54
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	3301      	adds	r3, #1
 800949c:	73fb      	strb	r3, [r7, #15]
 800949e:	7bfa      	ldrb	r2, [r7, #15]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3af      	bcc.n	8009408 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e044      	b.n	8009538 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80094ae:	7bfa      	ldrb	r2, [r7, #15]
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	00db      	lsls	r3, r3, #3
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80094c0:	2200      	movs	r2, #0
 80094c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80094c4:	7bfa      	ldrb	r2, [r7, #15]
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80094d6:	7bfa      	ldrb	r2, [r7, #15]
 80094d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80094da:	7bfa      	ldrb	r2, [r7, #15]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80094f0:	7bfa      	ldrb	r2, [r7, #15]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800951c:	7bfa      	ldrb	r2, [r7, #15]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	3301      	adds	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	7bfa      	ldrb	r2, [r7, #15]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d3b5      	bcc.n	80094ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	687e      	ldr	r6, [r7, #4]
 800954a:	466d      	mov	r5, sp
 800954c:	f106 0410 	add.w	r4, r6, #16
 8009550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800955c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009560:	1d33      	adds	r3, r6, #4
 8009562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009564:	6838      	ldr	r0, [r7, #0]
 8009566:	f001 fea7 	bl	800b2b8 <USB_DevInit>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e014      	b.n	80095a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b01      	cmp	r3, #1
 8009592:	d102      	bne.n	800959a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f80b 	bl	80095b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f865 	bl	800b66e <USB_DevDisconnect>

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080095b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	10000003 	.word	0x10000003

080095f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80095f8:	b480      	push	{r7}
 80095fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a04      	ldr	r2, [pc, #16]	; (8009614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40007000 	.word	0x40007000

08009618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009620:	2300      	movs	r3, #0
 8009622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e291      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8087 	beq.w	800974a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800963c:	4b96      	ldr	r3, [pc, #600]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f003 030c 	and.w	r3, r3, #12
 8009644:	2b04      	cmp	r3, #4
 8009646:	d00c      	beq.n	8009662 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009648:	4b93      	ldr	r3, [pc, #588]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f003 030c 	and.w	r3, r3, #12
 8009650:	2b08      	cmp	r3, #8
 8009652:	d112      	bne.n	800967a <HAL_RCC_OscConfig+0x62>
 8009654:	4b90      	ldr	r3, [pc, #576]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800965c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009660:	d10b      	bne.n	800967a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009662:	4b8d      	ldr	r3, [pc, #564]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d06c      	beq.n	8009748 <HAL_RCC_OscConfig+0x130>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d168      	bne.n	8009748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e26b      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009682:	d106      	bne.n	8009692 <HAL_RCC_OscConfig+0x7a>
 8009684:	4b84      	ldr	r3, [pc, #528]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a83      	ldr	r2, [pc, #524]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800968a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	e02e      	b.n	80096f0 <HAL_RCC_OscConfig+0xd8>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10c      	bne.n	80096b4 <HAL_RCC_OscConfig+0x9c>
 800969a:	4b7f      	ldr	r3, [pc, #508]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a7e      	ldr	r2, [pc, #504]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	4b7c      	ldr	r3, [pc, #496]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a7b      	ldr	r2, [pc, #492]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e01d      	b.n	80096f0 <HAL_RCC_OscConfig+0xd8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096bc:	d10c      	bne.n	80096d8 <HAL_RCC_OscConfig+0xc0>
 80096be:	4b76      	ldr	r3, [pc, #472]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a75      	ldr	r2, [pc, #468]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	4b73      	ldr	r3, [pc, #460]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a72      	ldr	r2, [pc, #456]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	e00b      	b.n	80096f0 <HAL_RCC_OscConfig+0xd8>
 80096d8:	4b6f      	ldr	r3, [pc, #444]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a6e      	ldr	r2, [pc, #440]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	4b6c      	ldr	r3, [pc, #432]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a6b      	ldr	r2, [pc, #428]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80096ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d013      	beq.n	8009720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f8:	f7fe f844 	bl	8007784 <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009700:	f7fe f840 	bl	8007784 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b64      	cmp	r3, #100	; 0x64
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e21f      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009712:	4b61      	ldr	r3, [pc, #388]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0f0      	beq.n	8009700 <HAL_RCC_OscConfig+0xe8>
 800971e:	e014      	b.n	800974a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009720:	f7fe f830 	bl	8007784 <HAL_GetTick>
 8009724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009726:	e008      	b.n	800973a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009728:	f7fe f82c 	bl	8007784 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b64      	cmp	r3, #100	; 0x64
 8009734:	d901      	bls.n	800973a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e20b      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800973a:	4b57      	ldr	r3, [pc, #348]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f0      	bne.n	8009728 <HAL_RCC_OscConfig+0x110>
 8009746:	e000      	b.n	800974a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d069      	beq.n	800982a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009756:	4b50      	ldr	r3, [pc, #320]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 030c 	and.w	r3, r3, #12
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009762:	4b4d      	ldr	r3, [pc, #308]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 030c 	and.w	r3, r3, #12
 800976a:	2b08      	cmp	r3, #8
 800976c:	d11c      	bne.n	80097a8 <HAL_RCC_OscConfig+0x190>
 800976e:	4b4a      	ldr	r3, [pc, #296]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d116      	bne.n	80097a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800977a:	4b47      	ldr	r3, [pc, #284]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d005      	beq.n	8009792 <HAL_RCC_OscConfig+0x17a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e1df      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009792:	4b41      	ldr	r3, [pc, #260]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	493d      	ldr	r1, [pc, #244]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097a6:	e040      	b.n	800982a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d023      	beq.n	80097f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097b0:	4b39      	ldr	r3, [pc, #228]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a38      	ldr	r2, [pc, #224]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097bc:	f7fd ffe2 	bl	8007784 <HAL_GetTick>
 80097c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097c2:	e008      	b.n	80097d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097c4:	f7fd ffde 	bl	8007784 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e1bd      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d6:	4b30      	ldr	r3, [pc, #192]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0f0      	beq.n	80097c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e2:	4b2d      	ldr	r3, [pc, #180]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4929      	ldr	r1, [pc, #164]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	600b      	str	r3, [r1, #0]
 80097f6:	e018      	b.n	800982a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097f8:	4b27      	ldr	r3, [pc, #156]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a26      	ldr	r2, [pc, #152]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 80097fe:	f023 0301 	bic.w	r3, r3, #1
 8009802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009804:	f7fd ffbe 	bl	8007784 <HAL_GetTick>
 8009808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800980a:	e008      	b.n	800981e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800980c:	f7fd ffba 	bl	8007784 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	d901      	bls.n	800981e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e199      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800981e:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1f0      	bne.n	800980c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d038      	beq.n	80098a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d019      	beq.n	8009872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800983e:	4b16      	ldr	r3, [pc, #88]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009842:	4a15      	ldr	r2, [pc, #84]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984a:	f7fd ff9b 	bl	8007784 <HAL_GetTick>
 800984e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009850:	e008      	b.n	8009864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009852:	f7fd ff97 	bl	8007784 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e176      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009864:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0f0      	beq.n	8009852 <HAL_RCC_OscConfig+0x23a>
 8009870:	e01a      	b.n	80098a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009876:	4a08      	ldr	r2, [pc, #32]	; (8009898 <HAL_RCC_OscConfig+0x280>)
 8009878:	f023 0301 	bic.w	r3, r3, #1
 800987c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800987e:	f7fd ff81 	bl	8007784 <HAL_GetTick>
 8009882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009884:	e00a      	b.n	800989c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009886:	f7fd ff7d 	bl	8007784 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b02      	cmp	r3, #2
 8009892:	d903      	bls.n	800989c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e15c      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
 8009898:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800989c:	4b91      	ldr	r3, [pc, #580]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800989e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1ee      	bne.n	8009886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80a4 	beq.w	80099fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098b6:	4b8b      	ldr	r3, [pc, #556]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10d      	bne.n	80098de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80098c2:	4b88      	ldr	r3, [pc, #544]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	4a87      	ldr	r2, [pc, #540]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80098c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098cc:	6413      	str	r3, [r2, #64]	; 0x40
 80098ce:	4b85      	ldr	r3, [pc, #532]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d6:	60bb      	str	r3, [r7, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098de:	4b82      	ldr	r3, [pc, #520]	; (8009ae8 <HAL_RCC_OscConfig+0x4d0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d118      	bne.n	800991c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80098ea:	4b7f      	ldr	r3, [pc, #508]	; (8009ae8 <HAL_RCC_OscConfig+0x4d0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a7e      	ldr	r2, [pc, #504]	; (8009ae8 <HAL_RCC_OscConfig+0x4d0>)
 80098f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098f6:	f7fd ff45 	bl	8007784 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098fe:	f7fd ff41 	bl	8007784 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b64      	cmp	r3, #100	; 0x64
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e120      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009910:	4b75      	ldr	r3, [pc, #468]	; (8009ae8 <HAL_RCC_OscConfig+0x4d0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <HAL_RCC_OscConfig+0x31a>
 8009924:	4b6f      	ldr	r3, [pc, #444]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009928:	4a6e      	ldr	r2, [pc, #440]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6713      	str	r3, [r2, #112]	; 0x70
 8009930:	e02d      	b.n	800998e <HAL_RCC_OscConfig+0x376>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <HAL_RCC_OscConfig+0x33c>
 800993a:	4b6a      	ldr	r3, [pc, #424]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	4a69      	ldr	r2, [pc, #420]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	6713      	str	r3, [r2, #112]	; 0x70
 8009946:	4b67      	ldr	r3, [pc, #412]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	4a66      	ldr	r2, [pc, #408]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800994c:	f023 0304 	bic.w	r3, r3, #4
 8009950:	6713      	str	r3, [r2, #112]	; 0x70
 8009952:	e01c      	b.n	800998e <HAL_RCC_OscConfig+0x376>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	2b05      	cmp	r3, #5
 800995a:	d10c      	bne.n	8009976 <HAL_RCC_OscConfig+0x35e>
 800995c:	4b61      	ldr	r3, [pc, #388]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	4a60      	ldr	r2, [pc, #384]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009962:	f043 0304 	orr.w	r3, r3, #4
 8009966:	6713      	str	r3, [r2, #112]	; 0x70
 8009968:	4b5e      	ldr	r3, [pc, #376]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800996a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996c:	4a5d      	ldr	r2, [pc, #372]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	6713      	str	r3, [r2, #112]	; 0x70
 8009974:	e00b      	b.n	800998e <HAL_RCC_OscConfig+0x376>
 8009976:	4b5b      	ldr	r3, [pc, #364]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997a:	4a5a      	ldr	r2, [pc, #360]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 800997c:	f023 0301 	bic.w	r3, r3, #1
 8009980:	6713      	str	r3, [r2, #112]	; 0x70
 8009982:	4b58      	ldr	r3, [pc, #352]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009986:	4a57      	ldr	r2, [pc, #348]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009988:	f023 0304 	bic.w	r3, r3, #4
 800998c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d015      	beq.n	80099c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009996:	f7fd fef5 	bl	8007784 <HAL_GetTick>
 800999a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800999c:	e00a      	b.n	80099b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999e:	f7fd fef1 	bl	8007784 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e0ce      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099b4:	4b4b      	ldr	r3, [pc, #300]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80099b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0ee      	beq.n	800999e <HAL_RCC_OscConfig+0x386>
 80099c0:	e014      	b.n	80099ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c2:	f7fd fedf 	bl	8007784 <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099c8:	e00a      	b.n	80099e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ca:	f7fd fedb 	bl	8007784 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d8:	4293      	cmp	r3, r2
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e0b8      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099e0:	4b40      	ldr	r3, [pc, #256]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80099e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1ee      	bne.n	80099ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d105      	bne.n	80099fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099f2:	4b3c      	ldr	r3, [pc, #240]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	4a3b      	ldr	r2, [pc, #236]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 80099f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80a4 	beq.w	8009b50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a08:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 030c 	and.w	r3, r3, #12
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d06b      	beq.n	8009aec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d149      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a1c:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a30      	ldr	r2, [pc, #192]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a28:	f7fd feac 	bl	8007784 <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a30:	f7fd fea8 	bl	8007784 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e087      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a42:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1f0      	bne.n	8009a30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69da      	ldr	r2, [r3, #28]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	019b      	lsls	r3, r3, #6
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	3b01      	subs	r3, #1
 8009a68:	041b      	lsls	r3, r3, #16
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	061b      	lsls	r3, r3, #24
 8009a72:	4313      	orrs	r3, r2
 8009a74:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a7c:	4b19      	ldr	r3, [pc, #100]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a88:	f7fd fe7c 	bl	8007784 <HAL_GetTick>
 8009a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a90:	f7fd fe78 	bl	8007784 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e057      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aa2:	4b10      	ldr	r3, [pc, #64]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x478>
 8009aae:	e04f      	b.n	8009b50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ab0:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a0b      	ldr	r2, [pc, #44]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009abc:	f7fd fe62 	bl	8007784 <HAL_GetTick>
 8009ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ac4:	f7fd fe5e 	bl	8007784 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e03d      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad6:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <HAL_RCC_OscConfig+0x4cc>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1f0      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x4ac>
 8009ae2:	e035      	b.n	8009b50 <HAL_RCC_OscConfig+0x538>
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <HAL_RCC_OscConfig+0x544>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d028      	beq.n	8009b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d121      	bne.n	8009b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d11a      	bne.n	8009b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d111      	bne.n	8009b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	3b01      	subs	r3, #1
 8009b36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d107      	bne.n	8009b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d001      	beq.n	8009b50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40023800 	.word	0x40023800

08009b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e0d0      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b78:	4b6a      	ldr	r3, [pc, #424]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d910      	bls.n	8009ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b86:	4b67      	ldr	r3, [pc, #412]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f023 020f 	bic.w	r2, r3, #15
 8009b8e:	4965      	ldr	r1, [pc, #404]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b96:	4b63      	ldr	r3, [pc, #396]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d001      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e0b8      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d020      	beq.n	8009bf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bc0:	4b59      	ldr	r3, [pc, #356]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4a58      	ldr	r2, [pc, #352]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bd8:	4b53      	ldr	r3, [pc, #332]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4a52      	ldr	r2, [pc, #328]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009be2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be4:	4b50      	ldr	r3, [pc, #320]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	494d      	ldr	r1, [pc, #308]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d040      	beq.n	8009c84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d107      	bne.n	8009c1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c0a:	4b47      	ldr	r3, [pc, #284]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d115      	bne.n	8009c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e07f      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d107      	bne.n	8009c32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c22:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e073      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c32:	4b3d      	ldr	r3, [pc, #244]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e06b      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c42:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f023 0203 	bic.w	r2, r3, #3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	4936      	ldr	r1, [pc, #216]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c50:	4313      	orrs	r3, r2
 8009c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c54:	f7fd fd96 	bl	8007784 <HAL_GetTick>
 8009c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c5a:	e00a      	b.n	8009c72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c5c:	f7fd fd92 	bl	8007784 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e053      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c72:	4b2d      	ldr	r3, [pc, #180]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f003 020c 	and.w	r2, r3, #12
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d1eb      	bne.n	8009c5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c84:	4b27      	ldr	r3, [pc, #156]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d210      	bcs.n	8009cb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f023 020f 	bic.w	r2, r3, #15
 8009c9a:	4922      	ldr	r1, [pc, #136]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ca2:	4b20      	ldr	r3, [pc, #128]	; (8009d24 <HAL_RCC_ClockConfig+0x1c4>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d001      	beq.n	8009cb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e032      	b.n	8009d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d008      	beq.n	8009cd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	4916      	ldr	r1, [pc, #88]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009cde:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	490e      	ldr	r1, [pc, #56]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009cf2:	f000 f821 	bl	8009d38 <HAL_RCC_GetSysClockFreq>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <HAL_RCC_ClockConfig+0x1c8>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	091b      	lsrs	r3, r3, #4
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	490a      	ldr	r1, [pc, #40]	; (8009d2c <HAL_RCC_ClockConfig+0x1cc>)
 8009d04:	5ccb      	ldrb	r3, [r1, r3]
 8009d06:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0a:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <HAL_RCC_ClockConfig+0x1d0>)
 8009d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009d0e:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <HAL_RCC_ClockConfig+0x1d4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fd fcf2 	bl	80076fc <HAL_InitTick>

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	40023c00 	.word	0x40023c00
 8009d28:	40023800 	.word	0x40023800
 8009d2c:	0800e99c 	.word	0x0800e99c
 8009d30:	20000008 	.word	0x20000008
 8009d34:	200000f4 	.word	0x200000f4

08009d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d3c:	b094      	sub	sp, #80	; 0x50
 8009d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44
 8009d44:	2300      	movs	r3, #0
 8009d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d48:	2300      	movs	r3, #0
 8009d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d50:	4b79      	ldr	r3, [pc, #484]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 030c 	and.w	r3, r3, #12
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d00d      	beq.n	8009d78 <HAL_RCC_GetSysClockFreq+0x40>
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	f200 80e1 	bhi.w	8009f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <HAL_RCC_GetSysClockFreq+0x34>
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d003      	beq.n	8009d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8009d6a:	e0db      	b.n	8009f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d6c:	4b73      	ldr	r3, [pc, #460]	; (8009f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8009d6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d70:	e0db      	b.n	8009f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d72:	4b73      	ldr	r3, [pc, #460]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8009d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d76:	e0d8      	b.n	8009f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d78:	4b6f      	ldr	r3, [pc, #444]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d80:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009d82:	4b6d      	ldr	r3, [pc, #436]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d063      	beq.n	8009e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d8e:	4b6a      	ldr	r3, [pc, #424]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	099b      	lsrs	r3, r3, #6
 8009d94:	2200      	movs	r2, #0
 8009d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da0:	633b      	str	r3, [r7, #48]	; 0x30
 8009da2:	2300      	movs	r3, #0
 8009da4:	637b      	str	r3, [r7, #52]	; 0x34
 8009da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009daa:	4622      	mov	r2, r4
 8009dac:	462b      	mov	r3, r5
 8009dae:	f04f 0000 	mov.w	r0, #0
 8009db2:	f04f 0100 	mov.w	r1, #0
 8009db6:	0159      	lsls	r1, r3, #5
 8009db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dbc:	0150      	lsls	r0, r2, #5
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	1a51      	subs	r1, r2, r1
 8009dc6:	6139      	str	r1, [r7, #16]
 8009dc8:	4629      	mov	r1, r5
 8009dca:	eb63 0301 	sbc.w	r3, r3, r1
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ddc:	4659      	mov	r1, fp
 8009dde:	018b      	lsls	r3, r1, #6
 8009de0:	4651      	mov	r1, sl
 8009de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009de6:	4651      	mov	r1, sl
 8009de8:	018a      	lsls	r2, r1, #6
 8009dea:	4651      	mov	r1, sl
 8009dec:	ebb2 0801 	subs.w	r8, r2, r1
 8009df0:	4659      	mov	r1, fp
 8009df2:	eb63 0901 	sbc.w	r9, r3, r1
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e0a:	4690      	mov	r8, r2
 8009e0c:	4699      	mov	r9, r3
 8009e0e:	4623      	mov	r3, r4
 8009e10:	eb18 0303 	adds.w	r3, r8, r3
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	462b      	mov	r3, r5
 8009e18:	eb49 0303 	adc.w	r3, r9, r3
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	024b      	lsls	r3, r1, #9
 8009e2e:	4621      	mov	r1, r4
 8009e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e34:	4621      	mov	r1, r4
 8009e36:	024a      	lsls	r2, r1, #9
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3e:	2200      	movs	r2, #0
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e48:	f7f6 ff1e 	bl	8000c88 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4613      	mov	r3, r2
 8009e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e54:	e058      	b.n	8009f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e56:	4b38      	ldr	r3, [pc, #224]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	099b      	lsrs	r3, r3, #6
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	4611      	mov	r1, r2
 8009e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e66:	623b      	str	r3, [r7, #32]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009e70:	4642      	mov	r2, r8
 8009e72:	464b      	mov	r3, r9
 8009e74:	f04f 0000 	mov.w	r0, #0
 8009e78:	f04f 0100 	mov.w	r1, #0
 8009e7c:	0159      	lsls	r1, r3, #5
 8009e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e82:	0150      	lsls	r0, r2, #5
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4641      	mov	r1, r8
 8009e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8009e8e:	4649      	mov	r1, r9
 8009e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8009eac:	eb63 050b 	sbc.w	r5, r3, fp
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	00eb      	lsls	r3, r5, #3
 8009eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ebe:	00e2      	lsls	r2, r4, #3
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	461d      	mov	r5, r3
 8009ec4:	4643      	mov	r3, r8
 8009ec6:	18e3      	adds	r3, r4, r3
 8009ec8:	603b      	str	r3, [r7, #0]
 8009eca:	464b      	mov	r3, r9
 8009ecc:	eb45 0303 	adc.w	r3, r5, r3
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	f04f 0300 	mov.w	r3, #0
 8009eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ede:	4629      	mov	r1, r5
 8009ee0:	028b      	lsls	r3, r1, #10
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ee8:	4621      	mov	r1, r4
 8009eea:	028a      	lsls	r2, r1, #10
 8009eec:	4610      	mov	r0, r2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	61bb      	str	r3, [r7, #24]
 8009ef6:	61fa      	str	r2, [r7, #28]
 8009ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009efc:	f7f6 fec4 	bl	8000c88 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4613      	mov	r3, r2
 8009f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	0c1b      	lsrs	r3, r3, #16
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	3301      	adds	r3, #1
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8009f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f22:	e002      	b.n	8009f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8009f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3750      	adds	r7, #80	; 0x50
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f36:	bf00      	nop
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	00f42400 	.word	0x00f42400
 8009f40:	007a1200 	.word	0x007a1200

08009f44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f44:	b480      	push	{r7}
 8009f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f48:	4b03      	ldr	r3, [pc, #12]	; (8009f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000008 	.word	0x20000008

08009f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009f60:	f7ff fff0 	bl	8009f44 <HAL_RCC_GetHCLKFreq>
 8009f64:	4602      	mov	r2, r0
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	0a9b      	lsrs	r3, r3, #10
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	4903      	ldr	r1, [pc, #12]	; (8009f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f72:	5ccb      	ldrb	r3, [r1, r3]
 8009f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40023800 	.word	0x40023800
 8009f80:	0800e9ac 	.word	0x0800e9ac

08009f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009f88:	f7ff ffdc 	bl	8009f44 <HAL_RCC_GetHCLKFreq>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	0b5b      	lsrs	r3, r3, #13
 8009f94:	f003 0307 	and.w	r3, r3, #7
 8009f98:	4903      	ldr	r1, [pc, #12]	; (8009fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f9a:	5ccb      	ldrb	r3, [r1, r3]
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	40023800 	.word	0x40023800
 8009fa8:	0800e9ac 	.word	0x0800e9ac

08009fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d012      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009fd4:	4b69      	ldr	r3, [pc, #420]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	4a68      	ldr	r2, [pc, #416]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009fde:	6093      	str	r3, [r2, #8]
 8009fe0:	4b66      	ldr	r3, [pc, #408]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	4964      	ldr	r1, [pc, #400]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d017      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a006:	4b5d      	ldr	r3, [pc, #372]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a014:	4959      	ldr	r1, [pc, #356]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a016:	4313      	orrs	r3, r2
 800a018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a024:	d101      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a026:	2301      	movs	r3, #1
 800a028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a032:	2301      	movs	r3, #1
 800a034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d017      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a042:	4b4e      	ldr	r3, [pc, #312]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a050:	494a      	ldr	r1, [pc, #296]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a052:	4313      	orrs	r3, r2
 800a054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a060:	d101      	bne.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a062:	2301      	movs	r3, #1
 800a064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a06e:	2301      	movs	r3, #1
 800a070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 808b 	beq.w	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a090:	4b3a      	ldr	r3, [pc, #232]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	4a39      	ldr	r2, [pc, #228]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a09a:	6413      	str	r3, [r2, #64]	; 0x40
 800a09c:	4b37      	ldr	r3, [pc, #220]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	60bb      	str	r3, [r7, #8]
 800a0a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0a8:	4b35      	ldr	r3, [pc, #212]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a34      	ldr	r2, [pc, #208]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b4:	f7fd fb66 	bl	8007784 <HAL_GetTick>
 800a0b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a0ba:	e008      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0bc:	f7fd fb62 	bl	8007784 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	2b64      	cmp	r3, #100	; 0x64
 800a0c8:	d901      	bls.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e357      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a0ce:	4b2c      	ldr	r3, [pc, #176]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f0      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a0da:	4b28      	ldr	r3, [pc, #160]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d035      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d02e      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a0f8:	4b20      	ldr	r3, [pc, #128]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a100:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a102:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a106:	4a1d      	ldr	r2, [pc, #116]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a10c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a10e:	4b1b      	ldr	r3, [pc, #108]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a112:	4a1a      	ldr	r2, [pc, #104]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a118:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a11a:	4a18      	ldr	r2, [pc, #96]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a120:	4b16      	ldr	r3, [pc, #88]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d114      	bne.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12c:	f7fd fb2a 	bl	8007784 <HAL_GetTick>
 800a130:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a132:	e00a      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a134:	f7fd fb26 	bl	8007784 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a142:	4293      	cmp	r3, r2
 800a144:	d901      	bls.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e319      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a14a:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0ee      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a162:	d111      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a170:	4b04      	ldr	r3, [pc, #16]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a172:	400b      	ands	r3, r1
 800a174:	4901      	ldr	r1, [pc, #4]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a176:	4313      	orrs	r3, r2
 800a178:	608b      	str	r3, [r1, #8]
 800a17a:	e00b      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a17c:	40023800 	.word	0x40023800
 800a180:	40007000 	.word	0x40007000
 800a184:	0ffffcff 	.word	0x0ffffcff
 800a188:	4baa      	ldr	r3, [pc, #680]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	4aa9      	ldr	r2, [pc, #676]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a18e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a192:	6093      	str	r3, [r2, #8]
 800a194:	4ba7      	ldr	r3, [pc, #668]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1a0:	49a4      	ldr	r1, [pc, #656]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0310 	and.w	r3, r3, #16
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1b2:	4ba0      	ldr	r3, [pc, #640]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b8:	4a9e      	ldr	r2, [pc, #632]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a1c2:	4b9c      	ldr	r3, [pc, #624]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	4999      	ldr	r1, [pc, #612]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a1e0:	4b94      	ldr	r3, [pc, #592]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ee:	4991      	ldr	r1, [pc, #580]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a202:	4b8c      	ldr	r3, [pc, #560]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a210:	4988      	ldr	r1, [pc, #544]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a212:	4313      	orrs	r3, r2
 800a214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a224:	4b83      	ldr	r3, [pc, #524]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a232:	4980      	ldr	r1, [pc, #512]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a246:	4b7b      	ldr	r3, [pc, #492]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a24c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a254:	4977      	ldr	r1, [pc, #476]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a256:	4313      	orrs	r3, r2
 800a258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a268:	4b72      	ldr	r3, [pc, #456]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a26e:	f023 0203 	bic.w	r2, r3, #3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a276:	496f      	ldr	r1, [pc, #444]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a28a:	4b6a      	ldr	r3, [pc, #424]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a290:	f023 020c 	bic.w	r2, r3, #12
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a298:	4966      	ldr	r1, [pc, #408]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a2ac:	4b61      	ldr	r3, [pc, #388]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ba:	495e      	ldr	r1, [pc, #376]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a2ce:	4b59      	ldr	r3, [pc, #356]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2dc:	4955      	ldr	r1, [pc, #340]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a2f0:	4b50      	ldr	r3, [pc, #320]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fe:	494d      	ldr	r1, [pc, #308]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a312:	4b48      	ldr	r3, [pc, #288]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a318:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a320:	4944      	ldr	r1, [pc, #272]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a322:	4313      	orrs	r3, r2
 800a324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a334:	4b3f      	ldr	r3, [pc, #252]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a342:	493c      	ldr	r1, [pc, #240]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a344:	4313      	orrs	r3, r2
 800a346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a356:	4b37      	ldr	r3, [pc, #220]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a364:	4933      	ldr	r1, [pc, #204]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a378:	4b2e      	ldr	r3, [pc, #184]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a386:	492b      	ldr	r1, [pc, #172]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d011      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a39a:	4b26      	ldr	r3, [pc, #152]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3a8:	4922      	ldr	r1, [pc, #136]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3b8:	d101      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00a      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3da:	4b16      	ldr	r3, [pc, #88]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e8:	4912      	ldr	r1, [pc, #72]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a402:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a40c:	4909      	ldr	r1, [pc, #36]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d006      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80d9 	beq.w	800a5da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a01      	ldr	r2, [pc, #4]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a42e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a432:	e001      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a434:	40023800 	.word	0x40023800
 800a438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a43a:	f7fd f9a3 	bl	8007784 <HAL_GetTick>
 800a43e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a440:	e008      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a442:	f7fd f99f 	bl	8007784 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b64      	cmp	r3, #100	; 0x64
 800a44e:	d901      	bls.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e194      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a454:	4b6c      	ldr	r3, [pc, #432]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1f0      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d021      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11d      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a474:	4b64      	ldr	r3, [pc, #400]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a47a:	0c1b      	lsrs	r3, r3, #16
 800a47c:	f003 0303 	and.w	r3, r3, #3
 800a480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a482:	4b61      	ldr	r3, [pc, #388]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a488:	0e1b      	lsrs	r3, r3, #24
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	019a      	lsls	r2, r3, #6
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	041b      	lsls	r3, r3, #16
 800a49a:	431a      	orrs	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	061b      	lsls	r3, r3, #24
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	071b      	lsls	r3, r3, #28
 800a4a8:	4957      	ldr	r1, [pc, #348]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d004      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c4:	d00a      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d02e      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4da:	d129      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a4dc:	4b4a      	ldr	r3, [pc, #296]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e2:	0c1b      	lsrs	r3, r3, #16
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4ea:	4b47      	ldr	r3, [pc, #284]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4f0:	0f1b      	lsrs	r3, r3, #28
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	019a      	lsls	r2, r3, #6
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	061b      	lsls	r3, r3, #24
 800a50a:	431a      	orrs	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	071b      	lsls	r3, r3, #28
 800a510:	493d      	ldr	r1, [pc, #244]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a512:	4313      	orrs	r3, r2
 800a514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a518:	4b3b      	ldr	r3, [pc, #236]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a51e:	f023 021f 	bic.w	r2, r3, #31
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	3b01      	subs	r3, #1
 800a528:	4937      	ldr	r1, [pc, #220]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01d      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a53c:	4b32      	ldr	r3, [pc, #200]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a542:	0e1b      	lsrs	r3, r3, #24
 800a544:	f003 030f 	and.w	r3, r3, #15
 800a548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a54a:	4b2f      	ldr	r3, [pc, #188]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a550:	0f1b      	lsrs	r3, r3, #28
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	019a      	lsls	r2, r3, #6
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	431a      	orrs	r2, r3
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	061b      	lsls	r3, r3, #24
 800a56a:	431a      	orrs	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	071b      	lsls	r3, r3, #28
 800a570:	4925      	ldr	r1, [pc, #148]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a572:	4313      	orrs	r3, r2
 800a574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d011      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	019a      	lsls	r2, r3, #6
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	041b      	lsls	r3, r3, #16
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	071b      	lsls	r3, r3, #28
 800a5a0:	4919      	ldr	r1, [pc, #100]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a5a8:	4b17      	ldr	r3, [pc, #92]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a16      	ldr	r2, [pc, #88]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b4:	f7fd f8e6 	bl	8007784 <HAL_GetTick>
 800a5b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a5bc:	f7fd f8e2 	bl	8007784 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b64      	cmp	r3, #100	; 0x64
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e0d7      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f0      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	f040 80cd 	bne.w	800a77c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a08      	ldr	r2, [pc, #32]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5ee:	f7fd f8c9 	bl	8007784 <HAL_GetTick>
 800a5f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a5f4:	e00a      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a5f6:	f7fd f8c5 	bl	8007784 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	2b64      	cmp	r3, #100	; 0x64
 800a602:	d903      	bls.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e0ba      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a608:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a60c:	4b5e      	ldr	r3, [pc, #376]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a618:	d0ed      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d009      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a636:	2b00      	cmp	r3, #0
 800a638:	d02e      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d12a      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a642:	4b51      	ldr	r3, [pc, #324]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	0c1b      	lsrs	r3, r3, #16
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a650:	4b4d      	ldr	r3, [pc, #308]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a656:	0f1b      	lsrs	r3, r3, #28
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	019a      	lsls	r2, r3, #6
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	041b      	lsls	r3, r3, #16
 800a668:	431a      	orrs	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	061b      	lsls	r3, r3, #24
 800a670:	431a      	orrs	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	071b      	lsls	r3, r3, #28
 800a676:	4944      	ldr	r1, [pc, #272]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a67e:	4b42      	ldr	r3, [pc, #264]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a684:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	3b01      	subs	r3, #1
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	493d      	ldr	r1, [pc, #244]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a692:	4313      	orrs	r3, r2
 800a694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d022      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ac:	d11d      	bne.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6ae:	4b36      	ldr	r3, [pc, #216]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b4:	0e1b      	lsrs	r3, r3, #24
 800a6b6:	f003 030f 	and.w	r3, r3, #15
 800a6ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a6bc:	4b32      	ldr	r3, [pc, #200]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c2:	0f1b      	lsrs	r3, r3, #28
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	019a      	lsls	r2, r3, #6
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	041b      	lsls	r3, r3, #16
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	061b      	lsls	r3, r3, #24
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	071b      	lsls	r3, r3, #28
 800a6e2:	4929      	ldr	r1, [pc, #164]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d028      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6f6:	4b24      	ldr	r3, [pc, #144]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	0e1b      	lsrs	r3, r3, #24
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a704:	4b20      	ldr	r3, [pc, #128]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	f003 0303 	and.w	r3, r3, #3
 800a710:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	019a      	lsls	r2, r3, #6
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	431a      	orrs	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	061b      	lsls	r3, r3, #24
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	071b      	lsls	r3, r3, #28
 800a72a:	4917      	ldr	r1, [pc, #92]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	4911      	ldr	r1, [pc, #68]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a742:	4313      	orrs	r3, r2
 800a744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a748:	4b0f      	ldr	r3, [pc, #60]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a0e      	ldr	r2, [pc, #56]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a74e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a754:	f7fd f816 	bl	8007784 <HAL_GetTick>
 800a758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a75a:	e008      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a75c:	f7fd f812 	bl	8007784 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	2b64      	cmp	r3, #100	; 0x64
 800a768:	d901      	bls.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e007      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a76e:	4b06      	ldr	r3, [pc, #24]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77a:	d1ef      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3720      	adds	r7, #32
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40023800 	.word	0x40023800

0800a78c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e040      	b.n	800a820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f83a 	bl	800a828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2224      	movs	r2, #36	; 0x24
 800a7b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0201 	bic.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f8ba 	bl	800a944 <UART_SetConfig>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e022      	b.n	800a820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fb12 	bl	800ae0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0201 	orr.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fb99 	bl	800af50 <UART_CheckIdleState>
 800a81e:	4603      	mov	r3, r0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08a      	sub	sp, #40	; 0x28
 800a840:	af02      	add	r7, sp, #8
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a850:	2b20      	cmp	r3, #32
 800a852:	d171      	bne.n	800a938 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_UART_Transmit+0x24>
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e06a      	b.n	800a93a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2221      	movs	r2, #33	; 0x21
 800a870:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a872:	f7fc ff87 	bl	8007784 <HAL_GetTick>
 800a876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	88fa      	ldrh	r2, [r7, #6]
 800a87c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a890:	d108      	bne.n	800a8a4 <HAL_UART_Transmit+0x68>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	61bb      	str	r3, [r7, #24]
 800a8a2:	e003      	b.n	800a8ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8ac:	e02c      	b.n	800a908 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2180      	movs	r1, #128	; 0x80
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fb80 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e038      	b.n	800a93a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10b      	bne.n	800a8e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	e007      	b.n	800a8f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	781a      	ldrb	r2, [r3, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	3b01      	subs	r3, #1
 800a900:	b29a      	uxth	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a90e:	b29b      	uxth	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1cc      	bne.n	800a8ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2200      	movs	r2, #0
 800a91c:	2140      	movs	r1, #64	; 0x40
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 fb4d 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e005      	b.n	800a93a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	e000      	b.n	800a93a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a938:	2302      	movs	r3, #2
  }
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689a      	ldr	r2, [r3, #8]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	431a      	orrs	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	431a      	orrs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	4313      	orrs	r3, r2
 800a966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	4ba6      	ldr	r3, [pc, #664]	; (800ac08 <UART_SetConfig+0x2c4>)
 800a970:	4013      	ands	r3, r2
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	6979      	ldr	r1, [r7, #20]
 800a978:	430b      	orrs	r3, r1
 800a97a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a94      	ldr	r2, [pc, #592]	; (800ac0c <UART_SetConfig+0x2c8>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d120      	bne.n	800aa02 <UART_SetConfig+0xbe>
 800a9c0:	4b93      	ldr	r3, [pc, #588]	; (800ac10 <UART_SetConfig+0x2cc>)
 800a9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d816      	bhi.n	800a9fc <UART_SetConfig+0xb8>
 800a9ce:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <UART_SetConfig+0x90>)
 800a9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d4:	0800a9e5 	.word	0x0800a9e5
 800a9d8:	0800a9f1 	.word	0x0800a9f1
 800a9dc:	0800a9eb 	.word	0x0800a9eb
 800a9e0:	0800a9f7 	.word	0x0800a9f7
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	77fb      	strb	r3, [r7, #31]
 800a9e8:	e150      	b.n	800ac8c <UART_SetConfig+0x348>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	77fb      	strb	r3, [r7, #31]
 800a9ee:	e14d      	b.n	800ac8c <UART_SetConfig+0x348>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	77fb      	strb	r3, [r7, #31]
 800a9f4:	e14a      	b.n	800ac8c <UART_SetConfig+0x348>
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	77fb      	strb	r3, [r7, #31]
 800a9fa:	e147      	b.n	800ac8c <UART_SetConfig+0x348>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	e144      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a83      	ldr	r2, [pc, #524]	; (800ac14 <UART_SetConfig+0x2d0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d132      	bne.n	800aa72 <UART_SetConfig+0x12e>
 800aa0c:	4b80      	ldr	r3, [pc, #512]	; (800ac10 <UART_SetConfig+0x2cc>)
 800aa0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa12:	f003 030c 	and.w	r3, r3, #12
 800aa16:	2b0c      	cmp	r3, #12
 800aa18:	d828      	bhi.n	800aa6c <UART_SetConfig+0x128>
 800aa1a:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <UART_SetConfig+0xdc>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa55 	.word	0x0800aa55
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa6d 	.word	0x0800aa6d
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa61 	.word	0x0800aa61
 800aa34:	0800aa6d 	.word	0x0800aa6d
 800aa38:	0800aa6d 	.word	0x0800aa6d
 800aa3c:	0800aa6d 	.word	0x0800aa6d
 800aa40:	0800aa5b 	.word	0x0800aa5b
 800aa44:	0800aa6d 	.word	0x0800aa6d
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa6d 	.word	0x0800aa6d
 800aa50:	0800aa67 	.word	0x0800aa67
 800aa54:	2300      	movs	r3, #0
 800aa56:	77fb      	strb	r3, [r7, #31]
 800aa58:	e118      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	77fb      	strb	r3, [r7, #31]
 800aa5e:	e115      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa60:	2304      	movs	r3, #4
 800aa62:	77fb      	strb	r3, [r7, #31]
 800aa64:	e112      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa66:	2308      	movs	r3, #8
 800aa68:	77fb      	strb	r3, [r7, #31]
 800aa6a:	e10f      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	77fb      	strb	r3, [r7, #31]
 800aa70:	e10c      	b.n	800ac8c <UART_SetConfig+0x348>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a68      	ldr	r2, [pc, #416]	; (800ac18 <UART_SetConfig+0x2d4>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d120      	bne.n	800aabe <UART_SetConfig+0x17a>
 800aa7c:	4b64      	ldr	r3, [pc, #400]	; (800ac10 <UART_SetConfig+0x2cc>)
 800aa7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa86:	2b30      	cmp	r3, #48	; 0x30
 800aa88:	d013      	beq.n	800aab2 <UART_SetConfig+0x16e>
 800aa8a:	2b30      	cmp	r3, #48	; 0x30
 800aa8c:	d814      	bhi.n	800aab8 <UART_SetConfig+0x174>
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	d009      	beq.n	800aaa6 <UART_SetConfig+0x162>
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	d810      	bhi.n	800aab8 <UART_SetConfig+0x174>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <UART_SetConfig+0x15c>
 800aa9a:	2b10      	cmp	r3, #16
 800aa9c:	d006      	beq.n	800aaac <UART_SetConfig+0x168>
 800aa9e:	e00b      	b.n	800aab8 <UART_SetConfig+0x174>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e0f2      	b.n	800ac8c <UART_SetConfig+0x348>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	77fb      	strb	r3, [r7, #31]
 800aaaa:	e0ef      	b.n	800ac8c <UART_SetConfig+0x348>
 800aaac:	2304      	movs	r3, #4
 800aaae:	77fb      	strb	r3, [r7, #31]
 800aab0:	e0ec      	b.n	800ac8c <UART_SetConfig+0x348>
 800aab2:	2308      	movs	r3, #8
 800aab4:	77fb      	strb	r3, [r7, #31]
 800aab6:	e0e9      	b.n	800ac8c <UART_SetConfig+0x348>
 800aab8:	2310      	movs	r3, #16
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	e0e6      	b.n	800ac8c <UART_SetConfig+0x348>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a56      	ldr	r2, [pc, #344]	; (800ac1c <UART_SetConfig+0x2d8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d120      	bne.n	800ab0a <UART_SetConfig+0x1c6>
 800aac8:	4b51      	ldr	r3, [pc, #324]	; (800ac10 <UART_SetConfig+0x2cc>)
 800aaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aace:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aad2:	2bc0      	cmp	r3, #192	; 0xc0
 800aad4:	d013      	beq.n	800aafe <UART_SetConfig+0x1ba>
 800aad6:	2bc0      	cmp	r3, #192	; 0xc0
 800aad8:	d814      	bhi.n	800ab04 <UART_SetConfig+0x1c0>
 800aada:	2b80      	cmp	r3, #128	; 0x80
 800aadc:	d009      	beq.n	800aaf2 <UART_SetConfig+0x1ae>
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	d810      	bhi.n	800ab04 <UART_SetConfig+0x1c0>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <UART_SetConfig+0x1a8>
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d006      	beq.n	800aaf8 <UART_SetConfig+0x1b4>
 800aaea:	e00b      	b.n	800ab04 <UART_SetConfig+0x1c0>
 800aaec:	2300      	movs	r3, #0
 800aaee:	77fb      	strb	r3, [r7, #31]
 800aaf0:	e0cc      	b.n	800ac8c <UART_SetConfig+0x348>
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	77fb      	strb	r3, [r7, #31]
 800aaf6:	e0c9      	b.n	800ac8c <UART_SetConfig+0x348>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	77fb      	strb	r3, [r7, #31]
 800aafc:	e0c6      	b.n	800ac8c <UART_SetConfig+0x348>
 800aafe:	2308      	movs	r3, #8
 800ab00:	77fb      	strb	r3, [r7, #31]
 800ab02:	e0c3      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab04:	2310      	movs	r3, #16
 800ab06:	77fb      	strb	r3, [r7, #31]
 800ab08:	e0c0      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a44      	ldr	r2, [pc, #272]	; (800ac20 <UART_SetConfig+0x2dc>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d125      	bne.n	800ab60 <UART_SetConfig+0x21c>
 800ab14:	4b3e      	ldr	r3, [pc, #248]	; (800ac10 <UART_SetConfig+0x2cc>)
 800ab16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab22:	d017      	beq.n	800ab54 <UART_SetConfig+0x210>
 800ab24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab28:	d817      	bhi.n	800ab5a <UART_SetConfig+0x216>
 800ab2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab2e:	d00b      	beq.n	800ab48 <UART_SetConfig+0x204>
 800ab30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab34:	d811      	bhi.n	800ab5a <UART_SetConfig+0x216>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <UART_SetConfig+0x1fe>
 800ab3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab3e:	d006      	beq.n	800ab4e <UART_SetConfig+0x20a>
 800ab40:	e00b      	b.n	800ab5a <UART_SetConfig+0x216>
 800ab42:	2300      	movs	r3, #0
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e0a1      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e09e      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab4e:	2304      	movs	r3, #4
 800ab50:	77fb      	strb	r3, [r7, #31]
 800ab52:	e09b      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab54:	2308      	movs	r3, #8
 800ab56:	77fb      	strb	r3, [r7, #31]
 800ab58:	e098      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab5a:	2310      	movs	r3, #16
 800ab5c:	77fb      	strb	r3, [r7, #31]
 800ab5e:	e095      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a2f      	ldr	r2, [pc, #188]	; (800ac24 <UART_SetConfig+0x2e0>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d125      	bne.n	800abb6 <UART_SetConfig+0x272>
 800ab6a:	4b29      	ldr	r3, [pc, #164]	; (800ac10 <UART_SetConfig+0x2cc>)
 800ab6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab78:	d017      	beq.n	800abaa <UART_SetConfig+0x266>
 800ab7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab7e:	d817      	bhi.n	800abb0 <UART_SetConfig+0x26c>
 800ab80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab84:	d00b      	beq.n	800ab9e <UART_SetConfig+0x25a>
 800ab86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8a:	d811      	bhi.n	800abb0 <UART_SetConfig+0x26c>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <UART_SetConfig+0x254>
 800ab90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab94:	d006      	beq.n	800aba4 <UART_SetConfig+0x260>
 800ab96:	e00b      	b.n	800abb0 <UART_SetConfig+0x26c>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e076      	b.n	800ac8c <UART_SetConfig+0x348>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	77fb      	strb	r3, [r7, #31]
 800aba2:	e073      	b.n	800ac8c <UART_SetConfig+0x348>
 800aba4:	2304      	movs	r3, #4
 800aba6:	77fb      	strb	r3, [r7, #31]
 800aba8:	e070      	b.n	800ac8c <UART_SetConfig+0x348>
 800abaa:	2308      	movs	r3, #8
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e06d      	b.n	800ac8c <UART_SetConfig+0x348>
 800abb0:	2310      	movs	r3, #16
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e06a      	b.n	800ac8c <UART_SetConfig+0x348>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <UART_SetConfig+0x2e4>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d138      	bne.n	800ac32 <UART_SetConfig+0x2ee>
 800abc0:	4b13      	ldr	r3, [pc, #76]	; (800ac10 <UART_SetConfig+0x2cc>)
 800abc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800abca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abce:	d017      	beq.n	800ac00 <UART_SetConfig+0x2bc>
 800abd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abd4:	d82a      	bhi.n	800ac2c <UART_SetConfig+0x2e8>
 800abd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abda:	d00b      	beq.n	800abf4 <UART_SetConfig+0x2b0>
 800abdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe0:	d824      	bhi.n	800ac2c <UART_SetConfig+0x2e8>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <UART_SetConfig+0x2aa>
 800abe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abea:	d006      	beq.n	800abfa <UART_SetConfig+0x2b6>
 800abec:	e01e      	b.n	800ac2c <UART_SetConfig+0x2e8>
 800abee:	2300      	movs	r3, #0
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e04b      	b.n	800ac8c <UART_SetConfig+0x348>
 800abf4:	2302      	movs	r3, #2
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e048      	b.n	800ac8c <UART_SetConfig+0x348>
 800abfa:	2304      	movs	r3, #4
 800abfc:	77fb      	strb	r3, [r7, #31]
 800abfe:	e045      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac00:	2308      	movs	r3, #8
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e042      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac06:	bf00      	nop
 800ac08:	efff69f3 	.word	0xefff69f3
 800ac0c:	40011000 	.word	0x40011000
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40004400 	.word	0x40004400
 800ac18:	40004800 	.word	0x40004800
 800ac1c:	40004c00 	.word	0x40004c00
 800ac20:	40005000 	.word	0x40005000
 800ac24:	40011400 	.word	0x40011400
 800ac28:	40007800 	.word	0x40007800
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	77fb      	strb	r3, [r7, #31]
 800ac30:	e02c      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a72      	ldr	r2, [pc, #456]	; (800ae00 <UART_SetConfig+0x4bc>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d125      	bne.n	800ac88 <UART_SetConfig+0x344>
 800ac3c:	4b71      	ldr	r3, [pc, #452]	; (800ae04 <UART_SetConfig+0x4c0>)
 800ac3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac4a:	d017      	beq.n	800ac7c <UART_SetConfig+0x338>
 800ac4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac50:	d817      	bhi.n	800ac82 <UART_SetConfig+0x33e>
 800ac52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac56:	d00b      	beq.n	800ac70 <UART_SetConfig+0x32c>
 800ac58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac5c:	d811      	bhi.n	800ac82 <UART_SetConfig+0x33e>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <UART_SetConfig+0x326>
 800ac62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac66:	d006      	beq.n	800ac76 <UART_SetConfig+0x332>
 800ac68:	e00b      	b.n	800ac82 <UART_SetConfig+0x33e>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e00d      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac70:	2302      	movs	r3, #2
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e00a      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac76:	2304      	movs	r3, #4
 800ac78:	77fb      	strb	r3, [r7, #31]
 800ac7a:	e007      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e004      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac82:	2310      	movs	r3, #16
 800ac84:	77fb      	strb	r3, [r7, #31]
 800ac86:	e001      	b.n	800ac8c <UART_SetConfig+0x348>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac94:	d15b      	bne.n	800ad4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ac96:	7ffb      	ldrb	r3, [r7, #31]
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d828      	bhi.n	800acee <UART_SetConfig+0x3aa>
 800ac9c:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <UART_SetConfig+0x360>)
 800ac9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca2:	bf00      	nop
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	0800acef 	.word	0x0800acef
 800acb4:	0800acdf 	.word	0x0800acdf
 800acb8:	0800acef 	.word	0x0800acef
 800acbc:	0800acef 	.word	0x0800acef
 800acc0:	0800acef 	.word	0x0800acef
 800acc4:	0800ace7 	.word	0x0800ace7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc8:	f7ff f948 	bl	8009f5c <HAL_RCC_GetPCLK1Freq>
 800accc:	61b8      	str	r0, [r7, #24]
        break;
 800acce:	e013      	b.n	800acf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acd0:	f7ff f958 	bl	8009f84 <HAL_RCC_GetPCLK2Freq>
 800acd4:	61b8      	str	r0, [r7, #24]
        break;
 800acd6:	e00f      	b.n	800acf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acd8:	4b4b      	ldr	r3, [pc, #300]	; (800ae08 <UART_SetConfig+0x4c4>)
 800acda:	61bb      	str	r3, [r7, #24]
        break;
 800acdc:	e00c      	b.n	800acf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acde:	f7ff f82b 	bl	8009d38 <HAL_RCC_GetSysClockFreq>
 800ace2:	61b8      	str	r0, [r7, #24]
        break;
 800ace4:	e008      	b.n	800acf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ace6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acea:	61bb      	str	r3, [r7, #24]
        break;
 800acec:	e004      	b.n	800acf8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	77bb      	strb	r3, [r7, #30]
        break;
 800acf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d074      	beq.n	800ade8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	005a      	lsls	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	085b      	lsrs	r3, r3, #1
 800ad08:	441a      	add	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2b0f      	cmp	r3, #15
 800ad18:	d916      	bls.n	800ad48 <UART_SetConfig+0x404>
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad20:	d212      	bcs.n	800ad48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f023 030f 	bic.w	r3, r3, #15
 800ad2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	89fb      	ldrh	r3, [r7, #14]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	89fa      	ldrh	r2, [r7, #14]
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	e04f      	b.n	800ade8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	77bb      	strb	r3, [r7, #30]
 800ad4c:	e04c      	b.n	800ade8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad4e:	7ffb      	ldrb	r3, [r7, #31]
 800ad50:	2b08      	cmp	r3, #8
 800ad52:	d828      	bhi.n	800ada6 <UART_SetConfig+0x462>
 800ad54:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <UART_SetConfig+0x418>)
 800ad56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5a:	bf00      	nop
 800ad5c:	0800ad81 	.word	0x0800ad81
 800ad60:	0800ad89 	.word	0x0800ad89
 800ad64:	0800ad91 	.word	0x0800ad91
 800ad68:	0800ada7 	.word	0x0800ada7
 800ad6c:	0800ad97 	.word	0x0800ad97
 800ad70:	0800ada7 	.word	0x0800ada7
 800ad74:	0800ada7 	.word	0x0800ada7
 800ad78:	0800ada7 	.word	0x0800ada7
 800ad7c:	0800ad9f 	.word	0x0800ad9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad80:	f7ff f8ec 	bl	8009f5c <HAL_RCC_GetPCLK1Freq>
 800ad84:	61b8      	str	r0, [r7, #24]
        break;
 800ad86:	e013      	b.n	800adb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad88:	f7ff f8fc 	bl	8009f84 <HAL_RCC_GetPCLK2Freq>
 800ad8c:	61b8      	str	r0, [r7, #24]
        break;
 800ad8e:	e00f      	b.n	800adb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad90:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <UART_SetConfig+0x4c4>)
 800ad92:	61bb      	str	r3, [r7, #24]
        break;
 800ad94:	e00c      	b.n	800adb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad96:	f7fe ffcf 	bl	8009d38 <HAL_RCC_GetSysClockFreq>
 800ad9a:	61b8      	str	r0, [r7, #24]
        break;
 800ad9c:	e008      	b.n	800adb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ada2:	61bb      	str	r3, [r7, #24]
        break;
 800ada4:	e004      	b.n	800adb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	77bb      	strb	r3, [r7, #30]
        break;
 800adae:	bf00      	nop
    }

    if (pclk != 0U)
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d018      	beq.n	800ade8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	085a      	lsrs	r2, r3, #1
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	441a      	add	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b0f      	cmp	r3, #15
 800adce:	d909      	bls.n	800ade4 <UART_SetConfig+0x4a0>
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add6:	d205      	bcs.n	800ade4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	e001      	b.n	800ade8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800adf4:	7fbb      	ldrb	r3, [r7, #30]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3720      	adds	r7, #32
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	40007c00 	.word	0x40007c00
 800ae04:	40023800 	.word	0x40023800
 800ae08:	00f42400 	.word	0x00f42400

0800ae0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00a      	beq.n	800ae7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	f003 0320 	and.w	r3, r3, #32
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01a      	beq.n	800af22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	430a      	orrs	r2, r1
 800af00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af0a:	d10a      	bne.n	800af22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]
  }
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af60:	f7fc fc10 	bl	8007784 <HAL_GetTick>
 800af64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0308 	and.w	r3, r3, #8
 800af70:	2b08      	cmp	r3, #8
 800af72:	d10e      	bne.n	800af92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f81b 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e011      	b.n	800afb6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2220      	movs	r2, #32
 800af96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b09c      	sub	sp, #112	; 0x70
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afce:	e0a7      	b.n	800b120 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	f000 80a3 	beq.w	800b120 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afda:	f7fc fbd3 	bl	8007784 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <UART_WaitOnFlagUntilTimeout+0x32>
 800afea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afec:	2b00      	cmp	r3, #0
 800afee:	d13f      	bne.n	800b070 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800affe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b004:	667b      	str	r3, [r7, #100]	; 0x64
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b00e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b010:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b01c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e6      	bne.n	800aff0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	663b      	str	r3, [r7, #96]	; 0x60
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3308      	adds	r3, #8
 800b040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b042:	64ba      	str	r2, [r7, #72]	; 0x48
 800b044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2220      	movs	r2, #32
 800b060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e068      	b.n	800b142 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d050      	beq.n	800b120 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b08c:	d148      	bne.n	800b120 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b096:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e6      	bne.n	800b098 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f023 0301 	bic.w	r3, r3, #1
 800b0e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0ea:	623a      	str	r2, [r7, #32]
 800b0ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	69f9      	ldr	r1, [r7, #28]
 800b0f0:	6a3a      	ldr	r2, [r7, #32]
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e5      	bne.n	800b0ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2220      	movs	r2, #32
 800b102:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2220      	movs	r2, #32
 800b108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2220      	movs	r2, #32
 800b110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e010      	b.n	800b142 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	69da      	ldr	r2, [r3, #28]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	4013      	ands	r3, r2
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	bf0c      	ite	eq
 800b130:	2301      	moveq	r3, #1
 800b132:	2300      	movne	r3, #0
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	f43f af48 	beq.w	800afd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3770      	adds	r7, #112	; 0x70
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b14c:	b084      	sub	sp, #16
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	f107 001c 	add.w	r0, r7, #28
 800b15a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	2b01      	cmp	r3, #1
 800b162:	d120      	bne.n	800b1a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	4b20      	ldr	r3, [pc, #128]	; (800b1f8 <USB_CoreInit+0xac>)
 800b176:	4013      	ands	r3, r2
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d105      	bne.n	800b19a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa96 	bl	800b6cc <USB_CoreReset>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e010      	b.n	800b1c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fa8a 	bl	800b6cc <USB_CoreReset>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d10b      	bne.n	800b1e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f043 0206 	orr.w	r2, r3, #6
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f043 0220 	orr.w	r2, r3, #32
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1f2:	b004      	add	sp, #16
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	ffbdffbf 	.word	0xffbdffbf

0800b1fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f023 0201 	bic.w	r2, r3, #1
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b23a:	78fb      	ldrb	r3, [r7, #3]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d115      	bne.n	800b26c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b24c:	2001      	movs	r0, #1
 800b24e:	f7fc faa5 	bl	800779c <HAL_Delay>
      ms++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa29 	bl	800b6b0 <USB_GetMode>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b01      	cmp	r3, #1
 800b262:	d01e      	beq.n	800b2a2 <USB_SetCurrentMode+0x84>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b31      	cmp	r3, #49	; 0x31
 800b268:	d9f0      	bls.n	800b24c <USB_SetCurrentMode+0x2e>
 800b26a:	e01a      	b.n	800b2a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b26c:	78fb      	ldrb	r3, [r7, #3]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d115      	bne.n	800b29e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b27e:	2001      	movs	r0, #1
 800b280:	f7fc fa8c 	bl	800779c <HAL_Delay>
      ms++;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3301      	adds	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa10 	bl	800b6b0 <USB_GetMode>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <USB_SetCurrentMode+0x84>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b31      	cmp	r3, #49	; 0x31
 800b29a:	d9f0      	bls.n	800b27e <USB_SetCurrentMode+0x60>
 800b29c:	e001      	b.n	800b2a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e005      	b.n	800b2ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b32      	cmp	r3, #50	; 0x32
 800b2a6:	d101      	bne.n	800b2ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b2c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	e009      	b.n	800b2ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3340      	adds	r3, #64	; 0x40
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	2b0e      	cmp	r3, #14
 800b2f0:	d9f2      	bls.n	800b2d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11c      	bne.n	800b332 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b306:	f043 0302 	orr.w	r3, r3, #2
 800b30a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b310:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	e005      	b.n	800b33e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b344:	461a      	mov	r2, r3
 800b346:	2300      	movs	r3, #0
 800b348:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b350:	4619      	mov	r1, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b358:	461a      	mov	r2, r3
 800b35a:	680b      	ldr	r3, [r1, #0]
 800b35c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	2b01      	cmp	r3, #1
 800b362:	d10c      	bne.n	800b37e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d104      	bne.n	800b374 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b36a:	2100      	movs	r1, #0
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f965 	bl	800b63c <USB_SetDevSpeed>
 800b372:	e008      	b.n	800b386 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b374:	2101      	movs	r1, #1
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f960 	bl	800b63c <USB_SetDevSpeed>
 800b37c:	e003      	b.n	800b386 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b37e:	2103      	movs	r1, #3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f95b 	bl	800b63c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b386:	2110      	movs	r1, #16
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f8f3 	bl	800b574 <USB_FlushTxFifo>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f91f 	bl	800b5dc <USB_FlushRxFifo>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	2300      	movs	r3, #0
 800b3be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	e043      	b.n	800b45a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3e8:	d118      	bne.n	800b41c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	e013      	b.n	800b42e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	015a      	lsls	r2, r3, #5
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b412:	461a      	mov	r2, r3
 800b414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	e008      	b.n	800b42e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b428:	461a      	mov	r2, r3
 800b42a:	2300      	movs	r3, #0
 800b42c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43a:	461a      	mov	r2, r3
 800b43c:	2300      	movs	r3, #0
 800b43e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44c:	461a      	mov	r2, r3
 800b44e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b452:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3301      	adds	r3, #1
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d3b7      	bcc.n	800b3d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b462:	2300      	movs	r3, #0
 800b464:	613b      	str	r3, [r7, #16]
 800b466:	e043      	b.n	800b4f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b47a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b47e:	d118      	bne.n	800b4b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b492:	461a      	mov	r2, r3
 800b494:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	e013      	b.n	800b4c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	e008      	b.n	800b4c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	613b      	str	r3, [r7, #16]
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d3b7      	bcc.n	800b468 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b50a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b518:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	f043 0210 	orr.w	r2, r3, #16
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	4b0e      	ldr	r3, [pc, #56]	; (800b56c <USB_DevInit+0x2b4>)
 800b532:	4313      	orrs	r3, r2
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f043 0208 	orr.w	r2, r3, #8
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d105      	bne.n	800b55c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699a      	ldr	r2, [r3, #24]
 800b554:	4b06      	ldr	r3, [pc, #24]	; (800b570 <USB_DevInit+0x2b8>)
 800b556:	4313      	orrs	r3, r2
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b568:	b004      	add	sp, #16
 800b56a:	4770      	bx	lr
 800b56c:	803c3800 	.word	0x803c3800
 800b570:	40000004 	.word	0x40000004

0800b574 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <USB_FlushTxFifo+0x64>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d901      	bls.n	800b594 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e01b      	b.n	800b5cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	daf2      	bge.n	800b582 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	019b      	lsls	r3, r3, #6
 800b5a4:	f043 0220 	orr.w	r2, r3, #32
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4a08      	ldr	r2, [pc, #32]	; (800b5d8 <USB_FlushTxFifo+0x64>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d901      	bls.n	800b5be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e006      	b.n	800b5cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	f003 0320 	and.w	r3, r3, #32
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d0f0      	beq.n	800b5ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	00030d40 	.word	0x00030d40

0800b5dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	4a11      	ldr	r2, [pc, #68]	; (800b638 <USB_FlushRxFifo+0x5c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d901      	bls.n	800b5fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e018      	b.n	800b62c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	daf2      	bge.n	800b5e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2210      	movs	r2, #16
 800b60a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3301      	adds	r3, #1
 800b610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4a08      	ldr	r2, [pc, #32]	; (800b638 <USB_FlushRxFifo+0x5c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d901      	bls.n	800b61e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e006      	b.n	800b62c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0310 	and.w	r3, r3, #16
 800b626:	2b10      	cmp	r3, #16
 800b628:	d0f0      	beq.n	800b60c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	00030d40 	.word	0x00030d40

0800b63c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	78fb      	ldrb	r3, [r7, #3]
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b65c:	4313      	orrs	r3, r2
 800b65e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b688:	f023 0303 	bic.w	r3, r3, #3
 800b68c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b69c:	f043 0302 	orr.w	r3, r3, #2
 800b6a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	4a13      	ldr	r2, [pc, #76]	; (800b730 <USB_CoreReset+0x64>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d901      	bls.n	800b6ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e01b      	b.n	800b722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	daf2      	bge.n	800b6d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f043 0201 	orr.w	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4a09      	ldr	r2, [pc, #36]	; (800b730 <USB_CoreReset+0x64>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d901      	bls.n	800b714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e006      	b.n	800b722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d0f0      	beq.n	800b702 <USB_CoreReset+0x36>

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	00030d40 	.word	0x00030d40

0800b734 <MX_MEMS_Init>:
static void Sleep_Mode(void);
static int32_t LIS2DW12_X_SelfTest(void);
static int32_t LIS2DW12_X_Get_Data(IKS01A3_MOTION_SENSOR_Axes_t *data);

void MX_MEMS_Init(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS01A3_LIS2DW12_SelfTest_Init();
 800b738:	f000 f802 	bl	800b740 <MX_IKS01A3_LIS2DW12_SelfTest_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800b73c:	bf00      	nop
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <MX_IKS01A3_LIS2DW12_SelfTest_Init>:
/**
  * @brief  Initialize the LIS2DW12 Self Test application
  * @retval None
  */
void MX_IKS01A3_LIS2DW12_SelfTest_Init(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 800b744:	2000      	movs	r0, #0
 800b746:	f7fb fdad 	bl	80072a4 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800b74a:	2101      	movs	r1, #1
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7fb fe25 	bl	800739c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800b752:	2000      	movs	r0, #0
 800b754:	f7fb fe76 	bl	8007444 <BSP_PB_GetState>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bf0c      	ite	eq
 800b75e:	2301      	moveq	r3, #1
 800b760:	2300      	movne	r3, #0
 800b762:	b2db      	uxtb	r3, r3
 800b764:	461a      	mov	r2, r3
 800b766:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <MX_IKS01A3_LIS2DW12_SelfTest_Init+0x50>)
 800b768:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800b76a:	2000      	movs	r0, #0
 800b76c:	f7fb fec8 	bl	8007500 <BSP_COM_Init>

  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800b770:	2102      	movs	r1, #2
 800b772:	2001      	movs	r0, #1
 800b774:	f7fb f91a 	bl	80069ac <IKS01A3_MOTION_SENSOR_Init>

  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n------ LIS2DW12 self-test DEMO ------\r\n");
 800b778:	4a06      	ldr	r2, [pc, #24]	; (800b794 <MX_IKS01A3_LIS2DW12_SelfTest_Init+0x54>)
 800b77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b77e:	4806      	ldr	r0, [pc, #24]	; (800b798 <MX_IKS01A3_LIS2DW12_SelfTest_Init+0x58>)
 800b780:	f000 fcd2 	bl	800c128 <sniprintf>
  printf("%s", dataOut);
 800b784:	4904      	ldr	r1, [pc, #16]	; (800b798 <MX_IKS01A3_LIS2DW12_SelfTest_Init+0x58>)
 800b786:	4805      	ldr	r0, [pc, #20]	; (800b79c <MX_IKS01A3_LIS2DW12_SelfTest_Init+0x5c>)
 800b788:	f000 fcb6 	bl	800c0f8 <iprintf>
}
 800b78c:	bf00      	nop
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20000df4 	.word	0x20000df4
 800b794:	0800e73c 	.word	0x0800e73c
 800b798:	20000cf4 	.word	0x20000cf4
 800b79c:	0800e768 	.word	0x0800e768

0800b7a0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800b7aa:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <BSP_PB_Callback+0x1c>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20000cf0 	.word	0x20000cf0

0800b7c0 <__errno>:
 800b7c0:	4b01      	ldr	r3, [pc, #4]	; (800b7c8 <__errno+0x8>)
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	200000fc 	.word	0x200000fc

0800b7cc <__libc_init_array>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	4d0d      	ldr	r5, [pc, #52]	; (800b804 <__libc_init_array+0x38>)
 800b7d0:	4c0d      	ldr	r4, [pc, #52]	; (800b808 <__libc_init_array+0x3c>)
 800b7d2:	1b64      	subs	r4, r4, r5
 800b7d4:	10a4      	asrs	r4, r4, #2
 800b7d6:	2600      	movs	r6, #0
 800b7d8:	42a6      	cmp	r6, r4
 800b7da:	d109      	bne.n	800b7f0 <__libc_init_array+0x24>
 800b7dc:	4d0b      	ldr	r5, [pc, #44]	; (800b80c <__libc_init_array+0x40>)
 800b7de:	4c0c      	ldr	r4, [pc, #48]	; (800b810 <__libc_init_array+0x44>)
 800b7e0:	f002 ff30 	bl	800e644 <_init>
 800b7e4:	1b64      	subs	r4, r4, r5
 800b7e6:	10a4      	asrs	r4, r4, #2
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	42a6      	cmp	r6, r4
 800b7ec:	d105      	bne.n	800b7fa <__libc_init_array+0x2e>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f4:	4798      	blx	r3
 800b7f6:	3601      	adds	r6, #1
 800b7f8:	e7ee      	b.n	800b7d8 <__libc_init_array+0xc>
 800b7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fe:	4798      	blx	r3
 800b800:	3601      	adds	r6, #1
 800b802:	e7f2      	b.n	800b7ea <__libc_init_array+0x1e>
 800b804:	0800edac 	.word	0x0800edac
 800b808:	0800edac 	.word	0x0800edac
 800b80c:	0800edac 	.word	0x0800edac
 800b810:	0800edb0 	.word	0x0800edb0

0800b814 <memset>:
 800b814:	4402      	add	r2, r0
 800b816:	4603      	mov	r3, r0
 800b818:	4293      	cmp	r3, r2
 800b81a:	d100      	bne.n	800b81e <memset+0xa>
 800b81c:	4770      	bx	lr
 800b81e:	f803 1b01 	strb.w	r1, [r3], #1
 800b822:	e7f9      	b.n	800b818 <memset+0x4>

0800b824 <__cvt>:
 800b824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	ec55 4b10 	vmov	r4, r5, d0
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	460e      	mov	r6, r1
 800b830:	4619      	mov	r1, r3
 800b832:	462b      	mov	r3, r5
 800b834:	bfbb      	ittet	lt
 800b836:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b83a:	461d      	movlt	r5, r3
 800b83c:	2300      	movge	r3, #0
 800b83e:	232d      	movlt	r3, #45	; 0x2d
 800b840:	700b      	strb	r3, [r1, #0]
 800b842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b844:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b848:	4691      	mov	r9, r2
 800b84a:	f023 0820 	bic.w	r8, r3, #32
 800b84e:	bfbc      	itt	lt
 800b850:	4622      	movlt	r2, r4
 800b852:	4614      	movlt	r4, r2
 800b854:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b858:	d005      	beq.n	800b866 <__cvt+0x42>
 800b85a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b85e:	d100      	bne.n	800b862 <__cvt+0x3e>
 800b860:	3601      	adds	r6, #1
 800b862:	2102      	movs	r1, #2
 800b864:	e000      	b.n	800b868 <__cvt+0x44>
 800b866:	2103      	movs	r1, #3
 800b868:	ab03      	add	r3, sp, #12
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	ab02      	add	r3, sp, #8
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	ec45 4b10 	vmov	d0, r4, r5
 800b874:	4653      	mov	r3, sl
 800b876:	4632      	mov	r2, r6
 800b878:	f000 fd16 	bl	800c2a8 <_dtoa_r>
 800b87c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b880:	4607      	mov	r7, r0
 800b882:	d102      	bne.n	800b88a <__cvt+0x66>
 800b884:	f019 0f01 	tst.w	r9, #1
 800b888:	d022      	beq.n	800b8d0 <__cvt+0xac>
 800b88a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b88e:	eb07 0906 	add.w	r9, r7, r6
 800b892:	d110      	bne.n	800b8b6 <__cvt+0x92>
 800b894:	783b      	ldrb	r3, [r7, #0]
 800b896:	2b30      	cmp	r3, #48	; 0x30
 800b898:	d10a      	bne.n	800b8b0 <__cvt+0x8c>
 800b89a:	2200      	movs	r2, #0
 800b89c:	2300      	movs	r3, #0
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f5 f931 	bl	8000b08 <__aeabi_dcmpeq>
 800b8a6:	b918      	cbnz	r0, 800b8b0 <__cvt+0x8c>
 800b8a8:	f1c6 0601 	rsb	r6, r6, #1
 800b8ac:	f8ca 6000 	str.w	r6, [sl]
 800b8b0:	f8da 3000 	ldr.w	r3, [sl]
 800b8b4:	4499      	add	r9, r3
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f5 f923 	bl	8000b08 <__aeabi_dcmpeq>
 800b8c2:	b108      	cbz	r0, 800b8c8 <__cvt+0xa4>
 800b8c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8c8:	2230      	movs	r2, #48	; 0x30
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	454b      	cmp	r3, r9
 800b8ce:	d307      	bcc.n	800b8e0 <__cvt+0xbc>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8d4:	1bdb      	subs	r3, r3, r7
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	1c59      	adds	r1, r3, #1
 800b8e2:	9103      	str	r1, [sp, #12]
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	e7f0      	b.n	800b8ca <__cvt+0xa6>

0800b8e8 <__exponent>:
 800b8e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	bfb8      	it	lt
 800b8f0:	4249      	neglt	r1, r1
 800b8f2:	f803 2b02 	strb.w	r2, [r3], #2
 800b8f6:	bfb4      	ite	lt
 800b8f8:	222d      	movlt	r2, #45	; 0x2d
 800b8fa:	222b      	movge	r2, #43	; 0x2b
 800b8fc:	2909      	cmp	r1, #9
 800b8fe:	7042      	strb	r2, [r0, #1]
 800b900:	dd2a      	ble.n	800b958 <__exponent+0x70>
 800b902:	f10d 0407 	add.w	r4, sp, #7
 800b906:	46a4      	mov	ip, r4
 800b908:	270a      	movs	r7, #10
 800b90a:	46a6      	mov	lr, r4
 800b90c:	460a      	mov	r2, r1
 800b90e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b912:	fb07 1516 	mls	r5, r7, r6, r1
 800b916:	3530      	adds	r5, #48	; 0x30
 800b918:	2a63      	cmp	r2, #99	; 0x63
 800b91a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b91e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b922:	4631      	mov	r1, r6
 800b924:	dcf1      	bgt.n	800b90a <__exponent+0x22>
 800b926:	3130      	adds	r1, #48	; 0x30
 800b928:	f1ae 0502 	sub.w	r5, lr, #2
 800b92c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b930:	1c44      	adds	r4, r0, #1
 800b932:	4629      	mov	r1, r5
 800b934:	4561      	cmp	r1, ip
 800b936:	d30a      	bcc.n	800b94e <__exponent+0x66>
 800b938:	f10d 0209 	add.w	r2, sp, #9
 800b93c:	eba2 020e 	sub.w	r2, r2, lr
 800b940:	4565      	cmp	r5, ip
 800b942:	bf88      	it	hi
 800b944:	2200      	movhi	r2, #0
 800b946:	4413      	add	r3, r2
 800b948:	1a18      	subs	r0, r3, r0
 800b94a:	b003      	add	sp, #12
 800b94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b952:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b956:	e7ed      	b.n	800b934 <__exponent+0x4c>
 800b958:	2330      	movs	r3, #48	; 0x30
 800b95a:	3130      	adds	r1, #48	; 0x30
 800b95c:	7083      	strb	r3, [r0, #2]
 800b95e:	70c1      	strb	r1, [r0, #3]
 800b960:	1d03      	adds	r3, r0, #4
 800b962:	e7f1      	b.n	800b948 <__exponent+0x60>

0800b964 <_printf_float>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	ed2d 8b02 	vpush	{d8}
 800b96c:	b08d      	sub	sp, #52	; 0x34
 800b96e:	460c      	mov	r4, r1
 800b970:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b974:	4616      	mov	r6, r2
 800b976:	461f      	mov	r7, r3
 800b978:	4605      	mov	r5, r0
 800b97a:	f001 fb79 	bl	800d070 <_localeconv_r>
 800b97e:	f8d0 a000 	ldr.w	sl, [r0]
 800b982:	4650      	mov	r0, sl
 800b984:	f7f4 fc44 	bl	8000210 <strlen>
 800b988:	2300      	movs	r3, #0
 800b98a:	930a      	str	r3, [sp, #40]	; 0x28
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	9305      	str	r3, [sp, #20]
 800b990:	f8d8 3000 	ldr.w	r3, [r8]
 800b994:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b998:	3307      	adds	r3, #7
 800b99a:	f023 0307 	bic.w	r3, r3, #7
 800b99e:	f103 0208 	add.w	r2, r3, #8
 800b9a2:	f8c8 2000 	str.w	r2, [r8]
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b9ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b9b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9b6:	9307      	str	r3, [sp, #28]
 800b9b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9bc:	ee08 0a10 	vmov	s16, r0
 800b9c0:	4b9f      	ldr	r3, [pc, #636]	; (800bc40 <_printf_float+0x2dc>)
 800b9c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ca:	f7f5 f8cf 	bl	8000b6c <__aeabi_dcmpun>
 800b9ce:	bb88      	cbnz	r0, 800ba34 <_printf_float+0xd0>
 800b9d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9d4:	4b9a      	ldr	r3, [pc, #616]	; (800bc40 <_printf_float+0x2dc>)
 800b9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9da:	f7f5 f8a9 	bl	8000b30 <__aeabi_dcmple>
 800b9de:	bb48      	cbnz	r0, 800ba34 <_printf_float+0xd0>
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f5 f898 	bl	8000b1c <__aeabi_dcmplt>
 800b9ec:	b110      	cbz	r0, 800b9f4 <_printf_float+0x90>
 800b9ee:	232d      	movs	r3, #45	; 0x2d
 800b9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f4:	4b93      	ldr	r3, [pc, #588]	; (800bc44 <_printf_float+0x2e0>)
 800b9f6:	4894      	ldr	r0, [pc, #592]	; (800bc48 <_printf_float+0x2e4>)
 800b9f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9fc:	bf94      	ite	ls
 800b9fe:	4698      	movls	r8, r3
 800ba00:	4680      	movhi	r8, r0
 800ba02:	2303      	movs	r3, #3
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	9b05      	ldr	r3, [sp, #20]
 800ba08:	f023 0204 	bic.w	r2, r3, #4
 800ba0c:	6022      	str	r2, [r4, #0]
 800ba0e:	f04f 0900 	mov.w	r9, #0
 800ba12:	9700      	str	r7, [sp, #0]
 800ba14:	4633      	mov	r3, r6
 800ba16:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f000 f9d8 	bl	800bdd0 <_printf_common>
 800ba20:	3001      	adds	r0, #1
 800ba22:	f040 8090 	bne.w	800bb46 <_printf_float+0x1e2>
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	b00d      	add	sp, #52	; 0x34
 800ba2c:	ecbd 8b02 	vpop	{d8}
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	4642      	mov	r2, r8
 800ba36:	464b      	mov	r3, r9
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f5 f896 	bl	8000b6c <__aeabi_dcmpun>
 800ba40:	b140      	cbz	r0, 800ba54 <_printf_float+0xf0>
 800ba42:	464b      	mov	r3, r9
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfbc      	itt	lt
 800ba48:	232d      	movlt	r3, #45	; 0x2d
 800ba4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba4e:	487f      	ldr	r0, [pc, #508]	; (800bc4c <_printf_float+0x2e8>)
 800ba50:	4b7f      	ldr	r3, [pc, #508]	; (800bc50 <_printf_float+0x2ec>)
 800ba52:	e7d1      	b.n	800b9f8 <_printf_float+0x94>
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba5a:	9206      	str	r2, [sp, #24]
 800ba5c:	1c5a      	adds	r2, r3, #1
 800ba5e:	d13f      	bne.n	800bae0 <_printf_float+0x17c>
 800ba60:	2306      	movs	r3, #6
 800ba62:	6063      	str	r3, [r4, #4]
 800ba64:	9b05      	ldr	r3, [sp, #20]
 800ba66:	6861      	ldr	r1, [r4, #4]
 800ba68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9303      	str	r3, [sp, #12]
 800ba70:	ab0a      	add	r3, sp, #40	; 0x28
 800ba72:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba76:	ab09      	add	r3, sp, #36	; 0x24
 800ba78:	ec49 8b10 	vmov	d0, r8, r9
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba84:	4628      	mov	r0, r5
 800ba86:	f7ff fecd 	bl	800b824 <__cvt>
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba8e:	2b47      	cmp	r3, #71	; 0x47
 800ba90:	4680      	mov	r8, r0
 800ba92:	d108      	bne.n	800baa6 <_printf_float+0x142>
 800ba94:	1cc8      	adds	r0, r1, #3
 800ba96:	db02      	blt.n	800ba9e <_printf_float+0x13a>
 800ba98:	6863      	ldr	r3, [r4, #4]
 800ba9a:	4299      	cmp	r1, r3
 800ba9c:	dd41      	ble.n	800bb22 <_printf_float+0x1be>
 800ba9e:	f1ab 0b02 	sub.w	fp, fp, #2
 800baa2:	fa5f fb8b 	uxtb.w	fp, fp
 800baa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800baaa:	d820      	bhi.n	800baee <_printf_float+0x18a>
 800baac:	3901      	subs	r1, #1
 800baae:	465a      	mov	r2, fp
 800bab0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bab4:	9109      	str	r1, [sp, #36]	; 0x24
 800bab6:	f7ff ff17 	bl	800b8e8 <__exponent>
 800baba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800babc:	1813      	adds	r3, r2, r0
 800babe:	2a01      	cmp	r2, #1
 800bac0:	4681      	mov	r9, r0
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	dc02      	bgt.n	800bacc <_printf_float+0x168>
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	07d2      	lsls	r2, r2, #31
 800baca:	d501      	bpl.n	800bad0 <_printf_float+0x16c>
 800bacc:	3301      	adds	r3, #1
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d09c      	beq.n	800ba12 <_printf_float+0xae>
 800bad8:	232d      	movs	r3, #45	; 0x2d
 800bada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bade:	e798      	b.n	800ba12 <_printf_float+0xae>
 800bae0:	9a06      	ldr	r2, [sp, #24]
 800bae2:	2a47      	cmp	r2, #71	; 0x47
 800bae4:	d1be      	bne.n	800ba64 <_printf_float+0x100>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1bc      	bne.n	800ba64 <_printf_float+0x100>
 800baea:	2301      	movs	r3, #1
 800baec:	e7b9      	b.n	800ba62 <_printf_float+0xfe>
 800baee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800baf2:	d118      	bne.n	800bb26 <_printf_float+0x1c2>
 800baf4:	2900      	cmp	r1, #0
 800baf6:	6863      	ldr	r3, [r4, #4]
 800baf8:	dd0b      	ble.n	800bb12 <_printf_float+0x1ae>
 800bafa:	6121      	str	r1, [r4, #16]
 800bafc:	b913      	cbnz	r3, 800bb04 <_printf_float+0x1a0>
 800bafe:	6822      	ldr	r2, [r4, #0]
 800bb00:	07d0      	lsls	r0, r2, #31
 800bb02:	d502      	bpl.n	800bb0a <_printf_float+0x1a6>
 800bb04:	3301      	adds	r3, #1
 800bb06:	440b      	add	r3, r1
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb0c:	f04f 0900 	mov.w	r9, #0
 800bb10:	e7de      	b.n	800bad0 <_printf_float+0x16c>
 800bb12:	b913      	cbnz	r3, 800bb1a <_printf_float+0x1b6>
 800bb14:	6822      	ldr	r2, [r4, #0]
 800bb16:	07d2      	lsls	r2, r2, #31
 800bb18:	d501      	bpl.n	800bb1e <_printf_float+0x1ba>
 800bb1a:	3302      	adds	r3, #2
 800bb1c:	e7f4      	b.n	800bb08 <_printf_float+0x1a4>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e7f2      	b.n	800bb08 <_printf_float+0x1a4>
 800bb22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	db05      	blt.n	800bb38 <_printf_float+0x1d4>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	6121      	str	r1, [r4, #16]
 800bb30:	07d8      	lsls	r0, r3, #31
 800bb32:	d5ea      	bpl.n	800bb0a <_printf_float+0x1a6>
 800bb34:	1c4b      	adds	r3, r1, #1
 800bb36:	e7e7      	b.n	800bb08 <_printf_float+0x1a4>
 800bb38:	2900      	cmp	r1, #0
 800bb3a:	bfd4      	ite	le
 800bb3c:	f1c1 0202 	rsble	r2, r1, #2
 800bb40:	2201      	movgt	r2, #1
 800bb42:	4413      	add	r3, r2
 800bb44:	e7e0      	b.n	800bb08 <_printf_float+0x1a4>
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	055a      	lsls	r2, r3, #21
 800bb4a:	d407      	bmi.n	800bb5c <_printf_float+0x1f8>
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	4642      	mov	r2, r8
 800bb50:	4631      	mov	r1, r6
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	d12c      	bne.n	800bbb4 <_printf_float+0x250>
 800bb5a:	e764      	b.n	800ba26 <_printf_float+0xc2>
 800bb5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb60:	f240 80e0 	bls.w	800bd24 <_printf_float+0x3c0>
 800bb64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f7f4 ffcc 	bl	8000b08 <__aeabi_dcmpeq>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d034      	beq.n	800bbde <_printf_float+0x27a>
 800bb74:	4a37      	ldr	r2, [pc, #220]	; (800bc54 <_printf_float+0x2f0>)
 800bb76:	2301      	movs	r3, #1
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af51 	beq.w	800ba26 <_printf_float+0xc2>
 800bb84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	db02      	blt.n	800bb92 <_printf_float+0x22e>
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	07d8      	lsls	r0, r3, #31
 800bb90:	d510      	bpl.n	800bbb4 <_printf_float+0x250>
 800bb92:	ee18 3a10 	vmov	r3, s16
 800bb96:	4652      	mov	r2, sl
 800bb98:	4631      	mov	r1, r6
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	47b8      	blx	r7
 800bb9e:	3001      	adds	r0, #1
 800bba0:	f43f af41 	beq.w	800ba26 <_printf_float+0xc2>
 800bba4:	f04f 0800 	mov.w	r8, #0
 800bba8:	f104 091a 	add.w	r9, r4, #26
 800bbac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	4543      	cmp	r3, r8
 800bbb2:	dc09      	bgt.n	800bbc8 <_printf_float+0x264>
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	079b      	lsls	r3, r3, #30
 800bbb8:	f100 8105 	bmi.w	800bdc6 <_printf_float+0x462>
 800bbbc:	68e0      	ldr	r0, [r4, #12]
 800bbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc0:	4298      	cmp	r0, r3
 800bbc2:	bfb8      	it	lt
 800bbc4:	4618      	movlt	r0, r3
 800bbc6:	e730      	b.n	800ba2a <_printf_float+0xc6>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	464a      	mov	r2, r9
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f af27 	beq.w	800ba26 <_printf_float+0xc2>
 800bbd8:	f108 0801 	add.w	r8, r8, #1
 800bbdc:	e7e6      	b.n	800bbac <_printf_float+0x248>
 800bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dc39      	bgt.n	800bc58 <_printf_float+0x2f4>
 800bbe4:	4a1b      	ldr	r2, [pc, #108]	; (800bc54 <_printf_float+0x2f0>)
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b8      	blx	r7
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f43f af19 	beq.w	800ba26 <_printf_float+0xc2>
 800bbf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	d102      	bne.n	800bc02 <_printf_float+0x29e>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	07d9      	lsls	r1, r3, #31
 800bc00:	d5d8      	bpl.n	800bbb4 <_printf_float+0x250>
 800bc02:	ee18 3a10 	vmov	r3, s16
 800bc06:	4652      	mov	r2, sl
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	47b8      	blx	r7
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f43f af09 	beq.w	800ba26 <_printf_float+0xc2>
 800bc14:	f04f 0900 	mov.w	r9, #0
 800bc18:	f104 0a1a 	add.w	sl, r4, #26
 800bc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1e:	425b      	negs	r3, r3
 800bc20:	454b      	cmp	r3, r9
 800bc22:	dc01      	bgt.n	800bc28 <_printf_float+0x2c4>
 800bc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc26:	e792      	b.n	800bb4e <_printf_float+0x1ea>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	4652      	mov	r2, sl
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	f43f aef7 	beq.w	800ba26 <_printf_float+0xc2>
 800bc38:	f109 0901 	add.w	r9, r9, #1
 800bc3c:	e7ee      	b.n	800bc1c <_printf_float+0x2b8>
 800bc3e:	bf00      	nop
 800bc40:	7fefffff 	.word	0x7fefffff
 800bc44:	0800e9cc 	.word	0x0800e9cc
 800bc48:	0800e9d0 	.word	0x0800e9d0
 800bc4c:	0800e9d8 	.word	0x0800e9d8
 800bc50:	0800e9d4 	.word	0x0800e9d4
 800bc54:	0800e9dc 	.word	0x0800e9dc
 800bc58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	bfa8      	it	ge
 800bc60:	461a      	movge	r2, r3
 800bc62:	2a00      	cmp	r2, #0
 800bc64:	4691      	mov	r9, r2
 800bc66:	dc37      	bgt.n	800bcd8 <_printf_float+0x374>
 800bc68:	f04f 0b00 	mov.w	fp, #0
 800bc6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc70:	f104 021a 	add.w	r2, r4, #26
 800bc74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	eba3 0309 	sub.w	r3, r3, r9
 800bc7c:	455b      	cmp	r3, fp
 800bc7e:	dc33      	bgt.n	800bce8 <_printf_float+0x384>
 800bc80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc84:	429a      	cmp	r2, r3
 800bc86:	db3b      	blt.n	800bd00 <_printf_float+0x39c>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	07da      	lsls	r2, r3, #31
 800bc8c:	d438      	bmi.n	800bd00 <_printf_float+0x39c>
 800bc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc90:	9a05      	ldr	r2, [sp, #20]
 800bc92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc94:	1a9a      	subs	r2, r3, r2
 800bc96:	eba3 0901 	sub.w	r9, r3, r1
 800bc9a:	4591      	cmp	r9, r2
 800bc9c:	bfa8      	it	ge
 800bc9e:	4691      	movge	r9, r2
 800bca0:	f1b9 0f00 	cmp.w	r9, #0
 800bca4:	dc35      	bgt.n	800bd12 <_printf_float+0x3ae>
 800bca6:	f04f 0800 	mov.w	r8, #0
 800bcaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcae:	f104 0a1a 	add.w	sl, r4, #26
 800bcb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcb6:	1a9b      	subs	r3, r3, r2
 800bcb8:	eba3 0309 	sub.w	r3, r3, r9
 800bcbc:	4543      	cmp	r3, r8
 800bcbe:	f77f af79 	ble.w	800bbb4 <_printf_float+0x250>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b8      	blx	r7
 800bccc:	3001      	adds	r0, #1
 800bcce:	f43f aeaa 	beq.w	800ba26 <_printf_float+0xc2>
 800bcd2:	f108 0801 	add.w	r8, r8, #1
 800bcd6:	e7ec      	b.n	800bcb2 <_printf_float+0x34e>
 800bcd8:	4613      	mov	r3, r2
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4642      	mov	r2, r8
 800bcde:	4628      	mov	r0, r5
 800bce0:	47b8      	blx	r7
 800bce2:	3001      	adds	r0, #1
 800bce4:	d1c0      	bne.n	800bc68 <_printf_float+0x304>
 800bce6:	e69e      	b.n	800ba26 <_printf_float+0xc2>
 800bce8:	2301      	movs	r3, #1
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	9205      	str	r2, [sp, #20]
 800bcf0:	47b8      	blx	r7
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f43f ae97 	beq.w	800ba26 <_printf_float+0xc2>
 800bcf8:	9a05      	ldr	r2, [sp, #20]
 800bcfa:	f10b 0b01 	add.w	fp, fp, #1
 800bcfe:	e7b9      	b.n	800bc74 <_printf_float+0x310>
 800bd00:	ee18 3a10 	vmov	r3, s16
 800bd04:	4652      	mov	r2, sl
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b8      	blx	r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d1be      	bne.n	800bc8e <_printf_float+0x32a>
 800bd10:	e689      	b.n	800ba26 <_printf_float+0xc2>
 800bd12:	9a05      	ldr	r2, [sp, #20]
 800bd14:	464b      	mov	r3, r9
 800bd16:	4442      	add	r2, r8
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b8      	blx	r7
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d1c1      	bne.n	800bca6 <_printf_float+0x342>
 800bd22:	e680      	b.n	800ba26 <_printf_float+0xc2>
 800bd24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd26:	2a01      	cmp	r2, #1
 800bd28:	dc01      	bgt.n	800bd2e <_printf_float+0x3ca>
 800bd2a:	07db      	lsls	r3, r3, #31
 800bd2c:	d538      	bpl.n	800bda0 <_printf_float+0x43c>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4642      	mov	r2, r8
 800bd32:	4631      	mov	r1, r6
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b8      	blx	r7
 800bd38:	3001      	adds	r0, #1
 800bd3a:	f43f ae74 	beq.w	800ba26 <_printf_float+0xc2>
 800bd3e:	ee18 3a10 	vmov	r3, s16
 800bd42:	4652      	mov	r2, sl
 800bd44:	4631      	mov	r1, r6
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b8      	blx	r7
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	f43f ae6b 	beq.w	800ba26 <_printf_float+0xc2>
 800bd50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd54:	2200      	movs	r2, #0
 800bd56:	2300      	movs	r3, #0
 800bd58:	f7f4 fed6 	bl	8000b08 <__aeabi_dcmpeq>
 800bd5c:	b9d8      	cbnz	r0, 800bd96 <_printf_float+0x432>
 800bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd60:	f108 0201 	add.w	r2, r8, #1
 800bd64:	3b01      	subs	r3, #1
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d10e      	bne.n	800bd8e <_printf_float+0x42a>
 800bd70:	e659      	b.n	800ba26 <_printf_float+0xc2>
 800bd72:	2301      	movs	r3, #1
 800bd74:	4652      	mov	r2, sl
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f43f ae52 	beq.w	800ba26 <_printf_float+0xc2>
 800bd82:	f108 0801 	add.w	r8, r8, #1
 800bd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	4543      	cmp	r3, r8
 800bd8c:	dcf1      	bgt.n	800bd72 <_printf_float+0x40e>
 800bd8e:	464b      	mov	r3, r9
 800bd90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd94:	e6dc      	b.n	800bb50 <_printf_float+0x1ec>
 800bd96:	f04f 0800 	mov.w	r8, #0
 800bd9a:	f104 0a1a 	add.w	sl, r4, #26
 800bd9e:	e7f2      	b.n	800bd86 <_printf_float+0x422>
 800bda0:	2301      	movs	r3, #1
 800bda2:	4642      	mov	r2, r8
 800bda4:	e7df      	b.n	800bd66 <_printf_float+0x402>
 800bda6:	2301      	movs	r3, #1
 800bda8:	464a      	mov	r2, r9
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4628      	mov	r0, r5
 800bdae:	47b8      	blx	r7
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	f43f ae38 	beq.w	800ba26 <_printf_float+0xc2>
 800bdb6:	f108 0801 	add.w	r8, r8, #1
 800bdba:	68e3      	ldr	r3, [r4, #12]
 800bdbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdbe:	1a5b      	subs	r3, r3, r1
 800bdc0:	4543      	cmp	r3, r8
 800bdc2:	dcf0      	bgt.n	800bda6 <_printf_float+0x442>
 800bdc4:	e6fa      	b.n	800bbbc <_printf_float+0x258>
 800bdc6:	f04f 0800 	mov.w	r8, #0
 800bdca:	f104 0919 	add.w	r9, r4, #25
 800bdce:	e7f4      	b.n	800bdba <_printf_float+0x456>

0800bdd0 <_printf_common>:
 800bdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd4:	4616      	mov	r6, r2
 800bdd6:	4699      	mov	r9, r3
 800bdd8:	688a      	ldr	r2, [r1, #8]
 800bdda:	690b      	ldr	r3, [r1, #16]
 800bddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bde0:	4293      	cmp	r3, r2
 800bde2:	bfb8      	it	lt
 800bde4:	4613      	movlt	r3, r2
 800bde6:	6033      	str	r3, [r6, #0]
 800bde8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdec:	4607      	mov	r7, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	b10a      	cbz	r2, 800bdf6 <_printf_common+0x26>
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	6033      	str	r3, [r6, #0]
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	0699      	lsls	r1, r3, #26
 800bdfa:	bf42      	ittt	mi
 800bdfc:	6833      	ldrmi	r3, [r6, #0]
 800bdfe:	3302      	addmi	r3, #2
 800be00:	6033      	strmi	r3, [r6, #0]
 800be02:	6825      	ldr	r5, [r4, #0]
 800be04:	f015 0506 	ands.w	r5, r5, #6
 800be08:	d106      	bne.n	800be18 <_printf_common+0x48>
 800be0a:	f104 0a19 	add.w	sl, r4, #25
 800be0e:	68e3      	ldr	r3, [r4, #12]
 800be10:	6832      	ldr	r2, [r6, #0]
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	42ab      	cmp	r3, r5
 800be16:	dc26      	bgt.n	800be66 <_printf_common+0x96>
 800be18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be1c:	1e13      	subs	r3, r2, #0
 800be1e:	6822      	ldr	r2, [r4, #0]
 800be20:	bf18      	it	ne
 800be22:	2301      	movne	r3, #1
 800be24:	0692      	lsls	r2, r2, #26
 800be26:	d42b      	bmi.n	800be80 <_printf_common+0xb0>
 800be28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be2c:	4649      	mov	r1, r9
 800be2e:	4638      	mov	r0, r7
 800be30:	47c0      	blx	r8
 800be32:	3001      	adds	r0, #1
 800be34:	d01e      	beq.n	800be74 <_printf_common+0xa4>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	68e5      	ldr	r5, [r4, #12]
 800be3a:	6832      	ldr	r2, [r6, #0]
 800be3c:	f003 0306 	and.w	r3, r3, #6
 800be40:	2b04      	cmp	r3, #4
 800be42:	bf08      	it	eq
 800be44:	1aad      	subeq	r5, r5, r2
 800be46:	68a3      	ldr	r3, [r4, #8]
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	bf0c      	ite	eq
 800be4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be50:	2500      	movne	r5, #0
 800be52:	4293      	cmp	r3, r2
 800be54:	bfc4      	itt	gt
 800be56:	1a9b      	subgt	r3, r3, r2
 800be58:	18ed      	addgt	r5, r5, r3
 800be5a:	2600      	movs	r6, #0
 800be5c:	341a      	adds	r4, #26
 800be5e:	42b5      	cmp	r5, r6
 800be60:	d11a      	bne.n	800be98 <_printf_common+0xc8>
 800be62:	2000      	movs	r0, #0
 800be64:	e008      	b.n	800be78 <_printf_common+0xa8>
 800be66:	2301      	movs	r3, #1
 800be68:	4652      	mov	r2, sl
 800be6a:	4649      	mov	r1, r9
 800be6c:	4638      	mov	r0, r7
 800be6e:	47c0      	blx	r8
 800be70:	3001      	adds	r0, #1
 800be72:	d103      	bne.n	800be7c <_printf_common+0xac>
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7c:	3501      	adds	r5, #1
 800be7e:	e7c6      	b.n	800be0e <_printf_common+0x3e>
 800be80:	18e1      	adds	r1, r4, r3
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	2030      	movs	r0, #48	; 0x30
 800be86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be8a:	4422      	add	r2, r4
 800be8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be94:	3302      	adds	r3, #2
 800be96:	e7c7      	b.n	800be28 <_printf_common+0x58>
 800be98:	2301      	movs	r3, #1
 800be9a:	4622      	mov	r2, r4
 800be9c:	4649      	mov	r1, r9
 800be9e:	4638      	mov	r0, r7
 800bea0:	47c0      	blx	r8
 800bea2:	3001      	adds	r0, #1
 800bea4:	d0e6      	beq.n	800be74 <_printf_common+0xa4>
 800bea6:	3601      	adds	r6, #1
 800bea8:	e7d9      	b.n	800be5e <_printf_common+0x8e>
	...

0800beac <_printf_i>:
 800beac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb0:	7e0f      	ldrb	r7, [r1, #24]
 800beb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800beb4:	2f78      	cmp	r7, #120	; 0x78
 800beb6:	4691      	mov	r9, r2
 800beb8:	4680      	mov	r8, r0
 800beba:	460c      	mov	r4, r1
 800bebc:	469a      	mov	sl, r3
 800bebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bec2:	d807      	bhi.n	800bed4 <_printf_i+0x28>
 800bec4:	2f62      	cmp	r7, #98	; 0x62
 800bec6:	d80a      	bhi.n	800bede <_printf_i+0x32>
 800bec8:	2f00      	cmp	r7, #0
 800beca:	f000 80d8 	beq.w	800c07e <_printf_i+0x1d2>
 800bece:	2f58      	cmp	r7, #88	; 0x58
 800bed0:	f000 80a3 	beq.w	800c01a <_printf_i+0x16e>
 800bed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bedc:	e03a      	b.n	800bf54 <_printf_i+0xa8>
 800bede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bee2:	2b15      	cmp	r3, #21
 800bee4:	d8f6      	bhi.n	800bed4 <_printf_i+0x28>
 800bee6:	a101      	add	r1, pc, #4	; (adr r1, 800beec <_printf_i+0x40>)
 800bee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800beec:	0800bf45 	.word	0x0800bf45
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bed5 	.word	0x0800bed5
 800bef8:	0800bed5 	.word	0x0800bed5
 800befc:	0800bed5 	.word	0x0800bed5
 800bf00:	0800bed5 	.word	0x0800bed5
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bed5 	.word	0x0800bed5
 800bf0c:	0800bed5 	.word	0x0800bed5
 800bf10:	0800bed5 	.word	0x0800bed5
 800bf14:	0800bed5 	.word	0x0800bed5
 800bf18:	0800c065 	.word	0x0800c065
 800bf1c:	0800bf89 	.word	0x0800bf89
 800bf20:	0800c047 	.word	0x0800c047
 800bf24:	0800bed5 	.word	0x0800bed5
 800bf28:	0800bed5 	.word	0x0800bed5
 800bf2c:	0800c087 	.word	0x0800c087
 800bf30:	0800bed5 	.word	0x0800bed5
 800bf34:	0800bf89 	.word	0x0800bf89
 800bf38:	0800bed5 	.word	0x0800bed5
 800bf3c:	0800bed5 	.word	0x0800bed5
 800bf40:	0800c04f 	.word	0x0800c04f
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	1d1a      	adds	r2, r3, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	602a      	str	r2, [r5, #0]
 800bf4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf54:	2301      	movs	r3, #1
 800bf56:	e0a3      	b.n	800c0a0 <_printf_i+0x1f4>
 800bf58:	6820      	ldr	r0, [r4, #0]
 800bf5a:	6829      	ldr	r1, [r5, #0]
 800bf5c:	0606      	lsls	r6, r0, #24
 800bf5e:	f101 0304 	add.w	r3, r1, #4
 800bf62:	d50a      	bpl.n	800bf7a <_printf_i+0xce>
 800bf64:	680e      	ldr	r6, [r1, #0]
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	da03      	bge.n	800bf74 <_printf_i+0xc8>
 800bf6c:	232d      	movs	r3, #45	; 0x2d
 800bf6e:	4276      	negs	r6, r6
 800bf70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf74:	485e      	ldr	r0, [pc, #376]	; (800c0f0 <_printf_i+0x244>)
 800bf76:	230a      	movs	r3, #10
 800bf78:	e019      	b.n	800bfae <_printf_i+0x102>
 800bf7a:	680e      	ldr	r6, [r1, #0]
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf82:	bf18      	it	ne
 800bf84:	b236      	sxthne	r6, r6
 800bf86:	e7ef      	b.n	800bf68 <_printf_i+0xbc>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	6820      	ldr	r0, [r4, #0]
 800bf8c:	1d19      	adds	r1, r3, #4
 800bf8e:	6029      	str	r1, [r5, #0]
 800bf90:	0601      	lsls	r1, r0, #24
 800bf92:	d501      	bpl.n	800bf98 <_printf_i+0xec>
 800bf94:	681e      	ldr	r6, [r3, #0]
 800bf96:	e002      	b.n	800bf9e <_printf_i+0xf2>
 800bf98:	0646      	lsls	r6, r0, #25
 800bf9a:	d5fb      	bpl.n	800bf94 <_printf_i+0xe8>
 800bf9c:	881e      	ldrh	r6, [r3, #0]
 800bf9e:	4854      	ldr	r0, [pc, #336]	; (800c0f0 <_printf_i+0x244>)
 800bfa0:	2f6f      	cmp	r7, #111	; 0x6f
 800bfa2:	bf0c      	ite	eq
 800bfa4:	2308      	moveq	r3, #8
 800bfa6:	230a      	movne	r3, #10
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfae:	6865      	ldr	r5, [r4, #4]
 800bfb0:	60a5      	str	r5, [r4, #8]
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	bfa2      	ittt	ge
 800bfb6:	6821      	ldrge	r1, [r4, #0]
 800bfb8:	f021 0104 	bicge.w	r1, r1, #4
 800bfbc:	6021      	strge	r1, [r4, #0]
 800bfbe:	b90e      	cbnz	r6, 800bfc4 <_printf_i+0x118>
 800bfc0:	2d00      	cmp	r5, #0
 800bfc2:	d04d      	beq.n	800c060 <_printf_i+0x1b4>
 800bfc4:	4615      	mov	r5, r2
 800bfc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfca:	fb03 6711 	mls	r7, r3, r1, r6
 800bfce:	5dc7      	ldrb	r7, [r0, r7]
 800bfd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfd4:	4637      	mov	r7, r6
 800bfd6:	42bb      	cmp	r3, r7
 800bfd8:	460e      	mov	r6, r1
 800bfda:	d9f4      	bls.n	800bfc6 <_printf_i+0x11a>
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d10b      	bne.n	800bff8 <_printf_i+0x14c>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	07de      	lsls	r6, r3, #31
 800bfe4:	d508      	bpl.n	800bff8 <_printf_i+0x14c>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	4299      	cmp	r1, r3
 800bfec:	bfde      	ittt	le
 800bfee:	2330      	movle	r3, #48	; 0x30
 800bff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bff8:	1b52      	subs	r2, r2, r5
 800bffa:	6122      	str	r2, [r4, #16]
 800bffc:	f8cd a000 	str.w	sl, [sp]
 800c000:	464b      	mov	r3, r9
 800c002:	aa03      	add	r2, sp, #12
 800c004:	4621      	mov	r1, r4
 800c006:	4640      	mov	r0, r8
 800c008:	f7ff fee2 	bl	800bdd0 <_printf_common>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d14c      	bne.n	800c0aa <_printf_i+0x1fe>
 800c010:	f04f 30ff 	mov.w	r0, #4294967295
 800c014:	b004      	add	sp, #16
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	4835      	ldr	r0, [pc, #212]	; (800c0f0 <_printf_i+0x244>)
 800c01c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c020:	6829      	ldr	r1, [r5, #0]
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	f851 6b04 	ldr.w	r6, [r1], #4
 800c028:	6029      	str	r1, [r5, #0]
 800c02a:	061d      	lsls	r5, r3, #24
 800c02c:	d514      	bpl.n	800c058 <_printf_i+0x1ac>
 800c02e:	07df      	lsls	r7, r3, #31
 800c030:	bf44      	itt	mi
 800c032:	f043 0320 	orrmi.w	r3, r3, #32
 800c036:	6023      	strmi	r3, [r4, #0]
 800c038:	b91e      	cbnz	r6, 800c042 <_printf_i+0x196>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	f023 0320 	bic.w	r3, r3, #32
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	2310      	movs	r3, #16
 800c044:	e7b0      	b.n	800bfa8 <_printf_i+0xfc>
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	f043 0320 	orr.w	r3, r3, #32
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	2378      	movs	r3, #120	; 0x78
 800c050:	4828      	ldr	r0, [pc, #160]	; (800c0f4 <_printf_i+0x248>)
 800c052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c056:	e7e3      	b.n	800c020 <_printf_i+0x174>
 800c058:	0659      	lsls	r1, r3, #25
 800c05a:	bf48      	it	mi
 800c05c:	b2b6      	uxthmi	r6, r6
 800c05e:	e7e6      	b.n	800c02e <_printf_i+0x182>
 800c060:	4615      	mov	r5, r2
 800c062:	e7bb      	b.n	800bfdc <_printf_i+0x130>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	6826      	ldr	r6, [r4, #0]
 800c068:	6961      	ldr	r1, [r4, #20]
 800c06a:	1d18      	adds	r0, r3, #4
 800c06c:	6028      	str	r0, [r5, #0]
 800c06e:	0635      	lsls	r5, r6, #24
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	d501      	bpl.n	800c078 <_printf_i+0x1cc>
 800c074:	6019      	str	r1, [r3, #0]
 800c076:	e002      	b.n	800c07e <_printf_i+0x1d2>
 800c078:	0670      	lsls	r0, r6, #25
 800c07a:	d5fb      	bpl.n	800c074 <_printf_i+0x1c8>
 800c07c:	8019      	strh	r1, [r3, #0]
 800c07e:	2300      	movs	r3, #0
 800c080:	6123      	str	r3, [r4, #16]
 800c082:	4615      	mov	r5, r2
 800c084:	e7ba      	b.n	800bffc <_printf_i+0x150>
 800c086:	682b      	ldr	r3, [r5, #0]
 800c088:	1d1a      	adds	r2, r3, #4
 800c08a:	602a      	str	r2, [r5, #0]
 800c08c:	681d      	ldr	r5, [r3, #0]
 800c08e:	6862      	ldr	r2, [r4, #4]
 800c090:	2100      	movs	r1, #0
 800c092:	4628      	mov	r0, r5
 800c094:	f7f4 f8c4 	bl	8000220 <memchr>
 800c098:	b108      	cbz	r0, 800c09e <_printf_i+0x1f2>
 800c09a:	1b40      	subs	r0, r0, r5
 800c09c:	6060      	str	r0, [r4, #4]
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a8:	e7a8      	b.n	800bffc <_printf_i+0x150>
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	47d0      	blx	sl
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d0ab      	beq.n	800c010 <_printf_i+0x164>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	079b      	lsls	r3, r3, #30
 800c0bc:	d413      	bmi.n	800c0e6 <_printf_i+0x23a>
 800c0be:	68e0      	ldr	r0, [r4, #12]
 800c0c0:	9b03      	ldr	r3, [sp, #12]
 800c0c2:	4298      	cmp	r0, r3
 800c0c4:	bfb8      	it	lt
 800c0c6:	4618      	movlt	r0, r3
 800c0c8:	e7a4      	b.n	800c014 <_printf_i+0x168>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	47d0      	blx	sl
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d09b      	beq.n	800c010 <_printf_i+0x164>
 800c0d8:	3501      	adds	r5, #1
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	9903      	ldr	r1, [sp, #12]
 800c0de:	1a5b      	subs	r3, r3, r1
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	dcf2      	bgt.n	800c0ca <_printf_i+0x21e>
 800c0e4:	e7eb      	b.n	800c0be <_printf_i+0x212>
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	f104 0619 	add.w	r6, r4, #25
 800c0ec:	e7f5      	b.n	800c0da <_printf_i+0x22e>
 800c0ee:	bf00      	nop
 800c0f0:	0800e9de 	.word	0x0800e9de
 800c0f4:	0800e9ef 	.word	0x0800e9ef

0800c0f8 <iprintf>:
 800c0f8:	b40f      	push	{r0, r1, r2, r3}
 800c0fa:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <iprintf+0x2c>)
 800c0fc:	b513      	push	{r0, r1, r4, lr}
 800c0fe:	681c      	ldr	r4, [r3, #0]
 800c100:	b124      	cbz	r4, 800c10c <iprintf+0x14>
 800c102:	69a3      	ldr	r3, [r4, #24]
 800c104:	b913      	cbnz	r3, 800c10c <iprintf+0x14>
 800c106:	4620      	mov	r0, r4
 800c108:	f000 ff14 	bl	800cf34 <__sinit>
 800c10c:	ab05      	add	r3, sp, #20
 800c10e:	9a04      	ldr	r2, [sp, #16]
 800c110:	68a1      	ldr	r1, [r4, #8]
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	4620      	mov	r0, r4
 800c116:	f001 fdc9 	bl	800dcac <_vfiprintf_r>
 800c11a:	b002      	add	sp, #8
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	b004      	add	sp, #16
 800c122:	4770      	bx	lr
 800c124:	200000fc 	.word	0x200000fc

0800c128 <sniprintf>:
 800c128:	b40c      	push	{r2, r3}
 800c12a:	b530      	push	{r4, r5, lr}
 800c12c:	4b17      	ldr	r3, [pc, #92]	; (800c18c <sniprintf+0x64>)
 800c12e:	1e0c      	subs	r4, r1, #0
 800c130:	681d      	ldr	r5, [r3, #0]
 800c132:	b09d      	sub	sp, #116	; 0x74
 800c134:	da08      	bge.n	800c148 <sniprintf+0x20>
 800c136:	238b      	movs	r3, #139	; 0x8b
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	b01d      	add	sp, #116	; 0x74
 800c140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c144:	b002      	add	sp, #8
 800c146:	4770      	bx	lr
 800c148:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c14c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c150:	bf14      	ite	ne
 800c152:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c156:	4623      	moveq	r3, r4
 800c158:	9304      	str	r3, [sp, #16]
 800c15a:	9307      	str	r3, [sp, #28]
 800c15c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c160:	9002      	str	r0, [sp, #8]
 800c162:	9006      	str	r0, [sp, #24]
 800c164:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c16a:	ab21      	add	r3, sp, #132	; 0x84
 800c16c:	a902      	add	r1, sp, #8
 800c16e:	4628      	mov	r0, r5
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	f001 fc71 	bl	800da58 <_svfiprintf_r>
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	bfbc      	itt	lt
 800c17a:	238b      	movlt	r3, #139	; 0x8b
 800c17c:	602b      	strlt	r3, [r5, #0]
 800c17e:	2c00      	cmp	r4, #0
 800c180:	d0dd      	beq.n	800c13e <sniprintf+0x16>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	2200      	movs	r2, #0
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e7d9      	b.n	800c13e <sniprintf+0x16>
 800c18a:	bf00      	nop
 800c18c:	200000fc 	.word	0x200000fc

0800c190 <quorem>:
 800c190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	6903      	ldr	r3, [r0, #16]
 800c196:	690c      	ldr	r4, [r1, #16]
 800c198:	42a3      	cmp	r3, r4
 800c19a:	4607      	mov	r7, r0
 800c19c:	f2c0 8081 	blt.w	800c2a2 <quorem+0x112>
 800c1a0:	3c01      	subs	r4, #1
 800c1a2:	f101 0814 	add.w	r8, r1, #20
 800c1a6:	f100 0514 	add.w	r5, r0, #20
 800c1aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1c8:	d331      	bcc.n	800c22e <quorem+0x9e>
 800c1ca:	f04f 0e00 	mov.w	lr, #0
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	46ac      	mov	ip, r5
 800c1d2:	46f2      	mov	sl, lr
 800c1d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1d8:	b293      	uxth	r3, r2
 800c1da:	fb06 e303 	mla	r3, r6, r3, lr
 800c1de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c1e8:	f8dc a000 	ldr.w	sl, [ip]
 800c1ec:	0c12      	lsrs	r2, r2, #16
 800c1ee:	fa13 f38a 	uxtah	r3, r3, sl
 800c1f2:	fb06 e202 	mla	r2, r6, r2, lr
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	9b00      	ldr	r3, [sp, #0]
 800c1fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1fe:	b292      	uxth	r2, r2
 800c200:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c208:	f8bd 3000 	ldrh.w	r3, [sp]
 800c20c:	4581      	cmp	r9, r0
 800c20e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c212:	f84c 3b04 	str.w	r3, [ip], #4
 800c216:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c21a:	d2db      	bcs.n	800c1d4 <quorem+0x44>
 800c21c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c220:	b92b      	cbnz	r3, 800c22e <quorem+0x9e>
 800c222:	9b01      	ldr	r3, [sp, #4]
 800c224:	3b04      	subs	r3, #4
 800c226:	429d      	cmp	r5, r3
 800c228:	461a      	mov	r2, r3
 800c22a:	d32e      	bcc.n	800c28a <quorem+0xfa>
 800c22c:	613c      	str	r4, [r7, #16]
 800c22e:	4638      	mov	r0, r7
 800c230:	f001 f9be 	bl	800d5b0 <__mcmp>
 800c234:	2800      	cmp	r0, #0
 800c236:	db24      	blt.n	800c282 <quorem+0xf2>
 800c238:	3601      	adds	r6, #1
 800c23a:	4628      	mov	r0, r5
 800c23c:	f04f 0c00 	mov.w	ip, #0
 800c240:	f858 2b04 	ldr.w	r2, [r8], #4
 800c244:	f8d0 e000 	ldr.w	lr, [r0]
 800c248:	b293      	uxth	r3, r2
 800c24a:	ebac 0303 	sub.w	r3, ip, r3
 800c24e:	0c12      	lsrs	r2, r2, #16
 800c250:	fa13 f38e 	uxtah	r3, r3, lr
 800c254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c262:	45c1      	cmp	r9, r8
 800c264:	f840 3b04 	str.w	r3, [r0], #4
 800c268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c26c:	d2e8      	bcs.n	800c240 <quorem+0xb0>
 800c26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c276:	b922      	cbnz	r2, 800c282 <quorem+0xf2>
 800c278:	3b04      	subs	r3, #4
 800c27a:	429d      	cmp	r5, r3
 800c27c:	461a      	mov	r2, r3
 800c27e:	d30a      	bcc.n	800c296 <quorem+0x106>
 800c280:	613c      	str	r4, [r7, #16]
 800c282:	4630      	mov	r0, r6
 800c284:	b003      	add	sp, #12
 800c286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28a:	6812      	ldr	r2, [r2, #0]
 800c28c:	3b04      	subs	r3, #4
 800c28e:	2a00      	cmp	r2, #0
 800c290:	d1cc      	bne.n	800c22c <quorem+0x9c>
 800c292:	3c01      	subs	r4, #1
 800c294:	e7c7      	b.n	800c226 <quorem+0x96>
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	3b04      	subs	r3, #4
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d1f0      	bne.n	800c280 <quorem+0xf0>
 800c29e:	3c01      	subs	r4, #1
 800c2a0:	e7eb      	b.n	800c27a <quorem+0xea>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e7ee      	b.n	800c284 <quorem+0xf4>
	...

0800c2a8 <_dtoa_r>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	ed2d 8b04 	vpush	{d8-d9}
 800c2b0:	ec57 6b10 	vmov	r6, r7, d0
 800c2b4:	b093      	sub	sp, #76	; 0x4c
 800c2b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2bc:	9106      	str	r1, [sp, #24]
 800c2be:	ee10 aa10 	vmov	sl, s0
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c2c8:	46bb      	mov	fp, r7
 800c2ca:	b975      	cbnz	r5, 800c2ea <_dtoa_r+0x42>
 800c2cc:	2010      	movs	r0, #16
 800c2ce:	f000 fed7 	bl	800d080 <malloc>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	6260      	str	r0, [r4, #36]	; 0x24
 800c2d6:	b920      	cbnz	r0, 800c2e2 <_dtoa_r+0x3a>
 800c2d8:	4ba7      	ldr	r3, [pc, #668]	; (800c578 <_dtoa_r+0x2d0>)
 800c2da:	21ea      	movs	r1, #234	; 0xea
 800c2dc:	48a7      	ldr	r0, [pc, #668]	; (800c57c <_dtoa_r+0x2d4>)
 800c2de:	f001 ff3b 	bl	800e158 <__assert_func>
 800c2e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2e6:	6005      	str	r5, [r0, #0]
 800c2e8:	60c5      	str	r5, [r0, #12]
 800c2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ec:	6819      	ldr	r1, [r3, #0]
 800c2ee:	b151      	cbz	r1, 800c306 <_dtoa_r+0x5e>
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	604a      	str	r2, [r1, #4]
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	4093      	lsls	r3, r2
 800c2f8:	608b      	str	r3, [r1, #8]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 ff16 	bl	800d12c <_Bfree>
 800c300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	1e3b      	subs	r3, r7, #0
 800c308:	bfaa      	itet	ge
 800c30a:	2300      	movge	r3, #0
 800c30c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c310:	f8c8 3000 	strge.w	r3, [r8]
 800c314:	4b9a      	ldr	r3, [pc, #616]	; (800c580 <_dtoa_r+0x2d8>)
 800c316:	bfbc      	itt	lt
 800c318:	2201      	movlt	r2, #1
 800c31a:	f8c8 2000 	strlt.w	r2, [r8]
 800c31e:	ea33 030b 	bics.w	r3, r3, fp
 800c322:	d11b      	bne.n	800c35c <_dtoa_r+0xb4>
 800c324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c326:	f242 730f 	movw	r3, #9999	; 0x270f
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c330:	4333      	orrs	r3, r6
 800c332:	f000 8592 	beq.w	800ce5a <_dtoa_r+0xbb2>
 800c336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c338:	b963      	cbnz	r3, 800c354 <_dtoa_r+0xac>
 800c33a:	4b92      	ldr	r3, [pc, #584]	; (800c584 <_dtoa_r+0x2dc>)
 800c33c:	e022      	b.n	800c384 <_dtoa_r+0xdc>
 800c33e:	4b92      	ldr	r3, [pc, #584]	; (800c588 <_dtoa_r+0x2e0>)
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	3308      	adds	r3, #8
 800c344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	9801      	ldr	r0, [sp, #4]
 800c34a:	b013      	add	sp, #76	; 0x4c
 800c34c:	ecbd 8b04 	vpop	{d8-d9}
 800c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c354:	4b8b      	ldr	r3, [pc, #556]	; (800c584 <_dtoa_r+0x2dc>)
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	3303      	adds	r3, #3
 800c35a:	e7f3      	b.n	800c344 <_dtoa_r+0x9c>
 800c35c:	2200      	movs	r2, #0
 800c35e:	2300      	movs	r3, #0
 800c360:	4650      	mov	r0, sl
 800c362:	4659      	mov	r1, fp
 800c364:	f7f4 fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 800c368:	ec4b ab19 	vmov	d9, sl, fp
 800c36c:	4680      	mov	r8, r0
 800c36e:	b158      	cbz	r0, 800c388 <_dtoa_r+0xe0>
 800c370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c372:	2301      	movs	r3, #1
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 856b 	beq.w	800ce54 <_dtoa_r+0xbac>
 800c37e:	4883      	ldr	r0, [pc, #524]	; (800c58c <_dtoa_r+0x2e4>)
 800c380:	6018      	str	r0, [r3, #0]
 800c382:	1e43      	subs	r3, r0, #1
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	e7df      	b.n	800c348 <_dtoa_r+0xa0>
 800c388:	ec4b ab10 	vmov	d0, sl, fp
 800c38c:	aa10      	add	r2, sp, #64	; 0x40
 800c38e:	a911      	add	r1, sp, #68	; 0x44
 800c390:	4620      	mov	r0, r4
 800c392:	f001 f9b3 	bl	800d6fc <__d2b>
 800c396:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c39a:	ee08 0a10 	vmov	s16, r0
 800c39e:	2d00      	cmp	r5, #0
 800c3a0:	f000 8084 	beq.w	800c4ac <_dtoa_r+0x204>
 800c3a4:	ee19 3a90 	vmov	r3, s19
 800c3a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c3b0:	4656      	mov	r6, sl
 800c3b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c3b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c3be:	4b74      	ldr	r3, [pc, #464]	; (800c590 <_dtoa_r+0x2e8>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f3 ff7f 	bl	80002c8 <__aeabi_dsub>
 800c3ca:	a365      	add	r3, pc, #404	; (adr r3, 800c560 <_dtoa_r+0x2b8>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f4 f932 	bl	8000638 <__aeabi_dmul>
 800c3d4:	a364      	add	r3, pc, #400	; (adr r3, 800c568 <_dtoa_r+0x2c0>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	f7f3 ff77 	bl	80002cc <__adddf3>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	460f      	mov	r7, r1
 800c3e4:	f7f4 f8be 	bl	8000564 <__aeabi_i2d>
 800c3e8:	a361      	add	r3, pc, #388	; (adr r3, 800c570 <_dtoa_r+0x2c8>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f4 f923 	bl	8000638 <__aeabi_dmul>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f3 ff67 	bl	80002cc <__adddf3>
 800c3fe:	4606      	mov	r6, r0
 800c400:	460f      	mov	r7, r1
 800c402:	f7f4 fbc9 	bl	8000b98 <__aeabi_d2iz>
 800c406:	2200      	movs	r2, #0
 800c408:	9000      	str	r0, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f7f4 fb84 	bl	8000b1c <__aeabi_dcmplt>
 800c414:	b150      	cbz	r0, 800c42c <_dtoa_r+0x184>
 800c416:	9800      	ldr	r0, [sp, #0]
 800c418:	f7f4 f8a4 	bl	8000564 <__aeabi_i2d>
 800c41c:	4632      	mov	r2, r6
 800c41e:	463b      	mov	r3, r7
 800c420:	f7f4 fb72 	bl	8000b08 <__aeabi_dcmpeq>
 800c424:	b910      	cbnz	r0, 800c42c <_dtoa_r+0x184>
 800c426:	9b00      	ldr	r3, [sp, #0]
 800c428:	3b01      	subs	r3, #1
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	2b16      	cmp	r3, #22
 800c430:	d85a      	bhi.n	800c4e8 <_dtoa_r+0x240>
 800c432:	9a00      	ldr	r2, [sp, #0]
 800c434:	4b57      	ldr	r3, [pc, #348]	; (800c594 <_dtoa_r+0x2ec>)
 800c436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	ec51 0b19 	vmov	r0, r1, d9
 800c442:	f7f4 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 800c446:	2800      	cmp	r0, #0
 800c448:	d050      	beq.n	800c4ec <_dtoa_r+0x244>
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	2300      	movs	r3, #0
 800c452:	930b      	str	r3, [sp, #44]	; 0x2c
 800c454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c456:	1b5d      	subs	r5, r3, r5
 800c458:	1e6b      	subs	r3, r5, #1
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	bf45      	ittet	mi
 800c45e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c462:	9304      	strmi	r3, [sp, #16]
 800c464:	2300      	movpl	r3, #0
 800c466:	2300      	movmi	r3, #0
 800c468:	bf4c      	ite	mi
 800c46a:	9305      	strmi	r3, [sp, #20]
 800c46c:	9304      	strpl	r3, [sp, #16]
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	db3d      	blt.n	800c4f0 <_dtoa_r+0x248>
 800c474:	9b05      	ldr	r3, [sp, #20]
 800c476:	9a00      	ldr	r2, [sp, #0]
 800c478:	920a      	str	r2, [sp, #40]	; 0x28
 800c47a:	4413      	add	r3, r2
 800c47c:	9305      	str	r3, [sp, #20]
 800c47e:	2300      	movs	r3, #0
 800c480:	9307      	str	r3, [sp, #28]
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	2b09      	cmp	r3, #9
 800c486:	f200 8089 	bhi.w	800c59c <_dtoa_r+0x2f4>
 800c48a:	2b05      	cmp	r3, #5
 800c48c:	bfc4      	itt	gt
 800c48e:	3b04      	subgt	r3, #4
 800c490:	9306      	strgt	r3, [sp, #24]
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	f1a3 0302 	sub.w	r3, r3, #2
 800c498:	bfcc      	ite	gt
 800c49a:	2500      	movgt	r5, #0
 800c49c:	2501      	movle	r5, #1
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	f200 8087 	bhi.w	800c5b2 <_dtoa_r+0x30a>
 800c4a4:	e8df f003 	tbb	[pc, r3]
 800c4a8:	59383a2d 	.word	0x59383a2d
 800c4ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4b0:	441d      	add	r5, r3
 800c4b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4b6:	2b20      	cmp	r3, #32
 800c4b8:	bfc1      	itttt	gt
 800c4ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c4c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c4c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c4ca:	bfda      	itte	le
 800c4cc:	f1c3 0320 	rsble	r3, r3, #32
 800c4d0:	fa06 f003 	lslle.w	r0, r6, r3
 800c4d4:	4318      	orrgt	r0, r3
 800c4d6:	f7f4 f835 	bl	8000544 <__aeabi_ui2d>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4606      	mov	r6, r0
 800c4de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c4e2:	3d01      	subs	r5, #1
 800c4e4:	930e      	str	r3, [sp, #56]	; 0x38
 800c4e6:	e76a      	b.n	800c3be <_dtoa_r+0x116>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e7b2      	b.n	800c452 <_dtoa_r+0x1aa>
 800c4ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4ee:	e7b1      	b.n	800c454 <_dtoa_r+0x1ac>
 800c4f0:	9b04      	ldr	r3, [sp, #16]
 800c4f2:	9a00      	ldr	r2, [sp, #0]
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	9304      	str	r3, [sp, #16]
 800c4f8:	4253      	negs	r3, r2
 800c4fa:	9307      	str	r3, [sp, #28]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c500:	e7bf      	b.n	800c482 <_dtoa_r+0x1da>
 800c502:	2300      	movs	r3, #0
 800c504:	9308      	str	r3, [sp, #32]
 800c506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dc55      	bgt.n	800c5b8 <_dtoa_r+0x310>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c512:	461a      	mov	r2, r3
 800c514:	9209      	str	r2, [sp, #36]	; 0x24
 800c516:	e00c      	b.n	800c532 <_dtoa_r+0x28a>
 800c518:	2301      	movs	r3, #1
 800c51a:	e7f3      	b.n	800c504 <_dtoa_r+0x25c>
 800c51c:	2300      	movs	r3, #0
 800c51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c520:	9308      	str	r3, [sp, #32]
 800c522:	9b00      	ldr	r3, [sp, #0]
 800c524:	4413      	add	r3, r2
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	3301      	adds	r3, #1
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	9303      	str	r3, [sp, #12]
 800c52e:	bfb8      	it	lt
 800c530:	2301      	movlt	r3, #1
 800c532:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c534:	2200      	movs	r2, #0
 800c536:	6042      	str	r2, [r0, #4]
 800c538:	2204      	movs	r2, #4
 800c53a:	f102 0614 	add.w	r6, r2, #20
 800c53e:	429e      	cmp	r6, r3
 800c540:	6841      	ldr	r1, [r0, #4]
 800c542:	d93d      	bls.n	800c5c0 <_dtoa_r+0x318>
 800c544:	4620      	mov	r0, r4
 800c546:	f000 fdb1 	bl	800d0ac <_Balloc>
 800c54a:	9001      	str	r0, [sp, #4]
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d13b      	bne.n	800c5c8 <_dtoa_r+0x320>
 800c550:	4b11      	ldr	r3, [pc, #68]	; (800c598 <_dtoa_r+0x2f0>)
 800c552:	4602      	mov	r2, r0
 800c554:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c558:	e6c0      	b.n	800c2dc <_dtoa_r+0x34>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e7df      	b.n	800c51e <_dtoa_r+0x276>
 800c55e:	bf00      	nop
 800c560:	636f4361 	.word	0x636f4361
 800c564:	3fd287a7 	.word	0x3fd287a7
 800c568:	8b60c8b3 	.word	0x8b60c8b3
 800c56c:	3fc68a28 	.word	0x3fc68a28
 800c570:	509f79fb 	.word	0x509f79fb
 800c574:	3fd34413 	.word	0x3fd34413
 800c578:	0800ea0d 	.word	0x0800ea0d
 800c57c:	0800ea24 	.word	0x0800ea24
 800c580:	7ff00000 	.word	0x7ff00000
 800c584:	0800ea09 	.word	0x0800ea09
 800c588:	0800ea00 	.word	0x0800ea00
 800c58c:	0800e9dd 	.word	0x0800e9dd
 800c590:	3ff80000 	.word	0x3ff80000
 800c594:	0800eb78 	.word	0x0800eb78
 800c598:	0800ea7f 	.word	0x0800ea7f
 800c59c:	2501      	movs	r5, #1
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9306      	str	r3, [sp, #24]
 800c5a2:	9508      	str	r5, [sp, #32]
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2312      	movs	r3, #18
 800c5b0:	e7b0      	b.n	800c514 <_dtoa_r+0x26c>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	9308      	str	r3, [sp, #32]
 800c5b6:	e7f5      	b.n	800c5a4 <_dtoa_r+0x2fc>
 800c5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5be:	e7b8      	b.n	800c532 <_dtoa_r+0x28a>
 800c5c0:	3101      	adds	r1, #1
 800c5c2:	6041      	str	r1, [r0, #4]
 800c5c4:	0052      	lsls	r2, r2, #1
 800c5c6:	e7b8      	b.n	800c53a <_dtoa_r+0x292>
 800c5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5ca:	9a01      	ldr	r2, [sp, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	2b0e      	cmp	r3, #14
 800c5d2:	f200 809d 	bhi.w	800c710 <_dtoa_r+0x468>
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	f000 809a 	beq.w	800c710 <_dtoa_r+0x468>
 800c5dc:	9b00      	ldr	r3, [sp, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	dd32      	ble.n	800c648 <_dtoa_r+0x3a0>
 800c5e2:	4ab7      	ldr	r2, [pc, #732]	; (800c8c0 <_dtoa_r+0x618>)
 800c5e4:	f003 030f 	and.w	r3, r3, #15
 800c5e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5f0:	9b00      	ldr	r3, [sp, #0]
 800c5f2:	05d8      	lsls	r0, r3, #23
 800c5f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c5f8:	d516      	bpl.n	800c628 <_dtoa_r+0x380>
 800c5fa:	4bb2      	ldr	r3, [pc, #712]	; (800c8c4 <_dtoa_r+0x61c>)
 800c5fc:	ec51 0b19 	vmov	r0, r1, d9
 800c600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c604:	f7f4 f942 	bl	800088c <__aeabi_ddiv>
 800c608:	f007 070f 	and.w	r7, r7, #15
 800c60c:	4682      	mov	sl, r0
 800c60e:	468b      	mov	fp, r1
 800c610:	2503      	movs	r5, #3
 800c612:	4eac      	ldr	r6, [pc, #688]	; (800c8c4 <_dtoa_r+0x61c>)
 800c614:	b957      	cbnz	r7, 800c62c <_dtoa_r+0x384>
 800c616:	4642      	mov	r2, r8
 800c618:	464b      	mov	r3, r9
 800c61a:	4650      	mov	r0, sl
 800c61c:	4659      	mov	r1, fp
 800c61e:	f7f4 f935 	bl	800088c <__aeabi_ddiv>
 800c622:	4682      	mov	sl, r0
 800c624:	468b      	mov	fp, r1
 800c626:	e028      	b.n	800c67a <_dtoa_r+0x3d2>
 800c628:	2502      	movs	r5, #2
 800c62a:	e7f2      	b.n	800c612 <_dtoa_r+0x36a>
 800c62c:	07f9      	lsls	r1, r7, #31
 800c62e:	d508      	bpl.n	800c642 <_dtoa_r+0x39a>
 800c630:	4640      	mov	r0, r8
 800c632:	4649      	mov	r1, r9
 800c634:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c638:	f7f3 fffe 	bl	8000638 <__aeabi_dmul>
 800c63c:	3501      	adds	r5, #1
 800c63e:	4680      	mov	r8, r0
 800c640:	4689      	mov	r9, r1
 800c642:	107f      	asrs	r7, r7, #1
 800c644:	3608      	adds	r6, #8
 800c646:	e7e5      	b.n	800c614 <_dtoa_r+0x36c>
 800c648:	f000 809b 	beq.w	800c782 <_dtoa_r+0x4da>
 800c64c:	9b00      	ldr	r3, [sp, #0]
 800c64e:	4f9d      	ldr	r7, [pc, #628]	; (800c8c4 <_dtoa_r+0x61c>)
 800c650:	425e      	negs	r6, r3
 800c652:	4b9b      	ldr	r3, [pc, #620]	; (800c8c0 <_dtoa_r+0x618>)
 800c654:	f006 020f 	and.w	r2, r6, #15
 800c658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c660:	ec51 0b19 	vmov	r0, r1, d9
 800c664:	f7f3 ffe8 	bl	8000638 <__aeabi_dmul>
 800c668:	1136      	asrs	r6, r6, #4
 800c66a:	4682      	mov	sl, r0
 800c66c:	468b      	mov	fp, r1
 800c66e:	2300      	movs	r3, #0
 800c670:	2502      	movs	r5, #2
 800c672:	2e00      	cmp	r6, #0
 800c674:	d17a      	bne.n	800c76c <_dtoa_r+0x4c4>
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1d3      	bne.n	800c622 <_dtoa_r+0x37a>
 800c67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 8082 	beq.w	800c786 <_dtoa_r+0x4de>
 800c682:	4b91      	ldr	r3, [pc, #580]	; (800c8c8 <_dtoa_r+0x620>)
 800c684:	2200      	movs	r2, #0
 800c686:	4650      	mov	r0, sl
 800c688:	4659      	mov	r1, fp
 800c68a:	f7f4 fa47 	bl	8000b1c <__aeabi_dcmplt>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d079      	beq.n	800c786 <_dtoa_r+0x4de>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d076      	beq.n	800c786 <_dtoa_r+0x4de>
 800c698:	9b02      	ldr	r3, [sp, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	dd36      	ble.n	800c70c <_dtoa_r+0x464>
 800c69e:	9b00      	ldr	r3, [sp, #0]
 800c6a0:	4650      	mov	r0, sl
 800c6a2:	4659      	mov	r1, fp
 800c6a4:	1e5f      	subs	r7, r3, #1
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	4b88      	ldr	r3, [pc, #544]	; (800c8cc <_dtoa_r+0x624>)
 800c6aa:	f7f3 ffc5 	bl	8000638 <__aeabi_dmul>
 800c6ae:	9e02      	ldr	r6, [sp, #8]
 800c6b0:	4682      	mov	sl, r0
 800c6b2:	468b      	mov	fp, r1
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f7f3 ff54 	bl	8000564 <__aeabi_i2d>
 800c6bc:	4652      	mov	r2, sl
 800c6be:	465b      	mov	r3, fp
 800c6c0:	f7f3 ffba 	bl	8000638 <__aeabi_dmul>
 800c6c4:	4b82      	ldr	r3, [pc, #520]	; (800c8d0 <_dtoa_r+0x628>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f7f3 fe00 	bl	80002cc <__adddf3>
 800c6cc:	46d0      	mov	r8, sl
 800c6ce:	46d9      	mov	r9, fp
 800c6d0:	4682      	mov	sl, r0
 800c6d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c6d6:	2e00      	cmp	r6, #0
 800c6d8:	d158      	bne.n	800c78c <_dtoa_r+0x4e4>
 800c6da:	4b7e      	ldr	r3, [pc, #504]	; (800c8d4 <_dtoa_r+0x62c>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	4640      	mov	r0, r8
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	f7f3 fdf1 	bl	80002c8 <__aeabi_dsub>
 800c6e6:	4652      	mov	r2, sl
 800c6e8:	465b      	mov	r3, fp
 800c6ea:	4680      	mov	r8, r0
 800c6ec:	4689      	mov	r9, r1
 800c6ee:	f7f4 fa33 	bl	8000b58 <__aeabi_dcmpgt>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	f040 8295 	bne.w	800cc22 <_dtoa_r+0x97a>
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f4 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800c706:	2800      	cmp	r0, #0
 800c708:	f040 8289 	bne.w	800cc1e <_dtoa_r+0x976>
 800c70c:	ec5b ab19 	vmov	sl, fp, d9
 800c710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c712:	2b00      	cmp	r3, #0
 800c714:	f2c0 8148 	blt.w	800c9a8 <_dtoa_r+0x700>
 800c718:	9a00      	ldr	r2, [sp, #0]
 800c71a:	2a0e      	cmp	r2, #14
 800c71c:	f300 8144 	bgt.w	800c9a8 <_dtoa_r+0x700>
 800c720:	4b67      	ldr	r3, [pc, #412]	; (800c8c0 <_dtoa_r+0x618>)
 800c722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f280 80d5 	bge.w	800c8dc <_dtoa_r+0x634>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f300 80d1 	bgt.w	800c8dc <_dtoa_r+0x634>
 800c73a:	f040 826f 	bne.w	800cc1c <_dtoa_r+0x974>
 800c73e:	4b65      	ldr	r3, [pc, #404]	; (800c8d4 <_dtoa_r+0x62c>)
 800c740:	2200      	movs	r2, #0
 800c742:	4640      	mov	r0, r8
 800c744:	4649      	mov	r1, r9
 800c746:	f7f3 ff77 	bl	8000638 <__aeabi_dmul>
 800c74a:	4652      	mov	r2, sl
 800c74c:	465b      	mov	r3, fp
 800c74e:	f7f4 f9f9 	bl	8000b44 <__aeabi_dcmpge>
 800c752:	9e03      	ldr	r6, [sp, #12]
 800c754:	4637      	mov	r7, r6
 800c756:	2800      	cmp	r0, #0
 800c758:	f040 8245 	bne.w	800cbe6 <_dtoa_r+0x93e>
 800c75c:	9d01      	ldr	r5, [sp, #4]
 800c75e:	2331      	movs	r3, #49	; 0x31
 800c760:	f805 3b01 	strb.w	r3, [r5], #1
 800c764:	9b00      	ldr	r3, [sp, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	e240      	b.n	800cbee <_dtoa_r+0x946>
 800c76c:	07f2      	lsls	r2, r6, #31
 800c76e:	d505      	bpl.n	800c77c <_dtoa_r+0x4d4>
 800c770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c774:	f7f3 ff60 	bl	8000638 <__aeabi_dmul>
 800c778:	3501      	adds	r5, #1
 800c77a:	2301      	movs	r3, #1
 800c77c:	1076      	asrs	r6, r6, #1
 800c77e:	3708      	adds	r7, #8
 800c780:	e777      	b.n	800c672 <_dtoa_r+0x3ca>
 800c782:	2502      	movs	r5, #2
 800c784:	e779      	b.n	800c67a <_dtoa_r+0x3d2>
 800c786:	9f00      	ldr	r7, [sp, #0]
 800c788:	9e03      	ldr	r6, [sp, #12]
 800c78a:	e794      	b.n	800c6b6 <_dtoa_r+0x40e>
 800c78c:	9901      	ldr	r1, [sp, #4]
 800c78e:	4b4c      	ldr	r3, [pc, #304]	; (800c8c0 <_dtoa_r+0x618>)
 800c790:	4431      	add	r1, r6
 800c792:	910d      	str	r1, [sp, #52]	; 0x34
 800c794:	9908      	ldr	r1, [sp, #32]
 800c796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c79a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c79e:	2900      	cmp	r1, #0
 800c7a0:	d043      	beq.n	800c82a <_dtoa_r+0x582>
 800c7a2:	494d      	ldr	r1, [pc, #308]	; (800c8d8 <_dtoa_r+0x630>)
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f7f4 f871 	bl	800088c <__aeabi_ddiv>
 800c7aa:	4652      	mov	r2, sl
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	f7f3 fd8b 	bl	80002c8 <__aeabi_dsub>
 800c7b2:	9d01      	ldr	r5, [sp, #4]
 800c7b4:	4682      	mov	sl, r0
 800c7b6:	468b      	mov	fp, r1
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	f7f4 f9ec 	bl	8000b98 <__aeabi_d2iz>
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	f7f3 fecf 	bl	8000564 <__aeabi_i2d>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	4649      	mov	r1, r9
 800c7ce:	f7f3 fd7b 	bl	80002c8 <__aeabi_dsub>
 800c7d2:	3630      	adds	r6, #48	; 0x30
 800c7d4:	f805 6b01 	strb.w	r6, [r5], #1
 800c7d8:	4652      	mov	r2, sl
 800c7da:	465b      	mov	r3, fp
 800c7dc:	4680      	mov	r8, r0
 800c7de:	4689      	mov	r9, r1
 800c7e0:	f7f4 f99c 	bl	8000b1c <__aeabi_dcmplt>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d163      	bne.n	800c8b0 <_dtoa_r+0x608>
 800c7e8:	4642      	mov	r2, r8
 800c7ea:	464b      	mov	r3, r9
 800c7ec:	4936      	ldr	r1, [pc, #216]	; (800c8c8 <_dtoa_r+0x620>)
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	f7f3 fd6a 	bl	80002c8 <__aeabi_dsub>
 800c7f4:	4652      	mov	r2, sl
 800c7f6:	465b      	mov	r3, fp
 800c7f8:	f7f4 f990 	bl	8000b1c <__aeabi_dcmplt>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	f040 80b5 	bne.w	800c96c <_dtoa_r+0x6c4>
 800c802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c804:	429d      	cmp	r5, r3
 800c806:	d081      	beq.n	800c70c <_dtoa_r+0x464>
 800c808:	4b30      	ldr	r3, [pc, #192]	; (800c8cc <_dtoa_r+0x624>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	4650      	mov	r0, sl
 800c80e:	4659      	mov	r1, fp
 800c810:	f7f3 ff12 	bl	8000638 <__aeabi_dmul>
 800c814:	4b2d      	ldr	r3, [pc, #180]	; (800c8cc <_dtoa_r+0x624>)
 800c816:	4682      	mov	sl, r0
 800c818:	468b      	mov	fp, r1
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	2200      	movs	r2, #0
 800c820:	f7f3 ff0a 	bl	8000638 <__aeabi_dmul>
 800c824:	4680      	mov	r8, r0
 800c826:	4689      	mov	r9, r1
 800c828:	e7c6      	b.n	800c7b8 <_dtoa_r+0x510>
 800c82a:	4650      	mov	r0, sl
 800c82c:	4659      	mov	r1, fp
 800c82e:	f7f3 ff03 	bl	8000638 <__aeabi_dmul>
 800c832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c834:	9d01      	ldr	r5, [sp, #4]
 800c836:	930f      	str	r3, [sp, #60]	; 0x3c
 800c838:	4682      	mov	sl, r0
 800c83a:	468b      	mov	fp, r1
 800c83c:	4649      	mov	r1, r9
 800c83e:	4640      	mov	r0, r8
 800c840:	f7f4 f9aa 	bl	8000b98 <__aeabi_d2iz>
 800c844:	4606      	mov	r6, r0
 800c846:	f7f3 fe8d 	bl	8000564 <__aeabi_i2d>
 800c84a:	3630      	adds	r6, #48	; 0x30
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f3 fd38 	bl	80002c8 <__aeabi_dsub>
 800c858:	f805 6b01 	strb.w	r6, [r5], #1
 800c85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c85e:	429d      	cmp	r5, r3
 800c860:	4680      	mov	r8, r0
 800c862:	4689      	mov	r9, r1
 800c864:	f04f 0200 	mov.w	r2, #0
 800c868:	d124      	bne.n	800c8b4 <_dtoa_r+0x60c>
 800c86a:	4b1b      	ldr	r3, [pc, #108]	; (800c8d8 <_dtoa_r+0x630>)
 800c86c:	4650      	mov	r0, sl
 800c86e:	4659      	mov	r1, fp
 800c870:	f7f3 fd2c 	bl	80002cc <__adddf3>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f4 f96c 	bl	8000b58 <__aeabi_dcmpgt>
 800c880:	2800      	cmp	r0, #0
 800c882:	d173      	bne.n	800c96c <_dtoa_r+0x6c4>
 800c884:	4652      	mov	r2, sl
 800c886:	465b      	mov	r3, fp
 800c888:	4913      	ldr	r1, [pc, #76]	; (800c8d8 <_dtoa_r+0x630>)
 800c88a:	2000      	movs	r0, #0
 800c88c:	f7f3 fd1c 	bl	80002c8 <__aeabi_dsub>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4640      	mov	r0, r8
 800c896:	4649      	mov	r1, r9
 800c898:	f7f4 f940 	bl	8000b1c <__aeabi_dcmplt>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	f43f af35 	beq.w	800c70c <_dtoa_r+0x464>
 800c8a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8a4:	1e6b      	subs	r3, r5, #1
 800c8a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8ac:	2b30      	cmp	r3, #48	; 0x30
 800c8ae:	d0f8      	beq.n	800c8a2 <_dtoa_r+0x5fa>
 800c8b0:	9700      	str	r7, [sp, #0]
 800c8b2:	e049      	b.n	800c948 <_dtoa_r+0x6a0>
 800c8b4:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <_dtoa_r+0x624>)
 800c8b6:	f7f3 febf 	bl	8000638 <__aeabi_dmul>
 800c8ba:	4680      	mov	r8, r0
 800c8bc:	4689      	mov	r9, r1
 800c8be:	e7bd      	b.n	800c83c <_dtoa_r+0x594>
 800c8c0:	0800eb78 	.word	0x0800eb78
 800c8c4:	0800eb50 	.word	0x0800eb50
 800c8c8:	3ff00000 	.word	0x3ff00000
 800c8cc:	40240000 	.word	0x40240000
 800c8d0:	401c0000 	.word	0x401c0000
 800c8d4:	40140000 	.word	0x40140000
 800c8d8:	3fe00000 	.word	0x3fe00000
 800c8dc:	9d01      	ldr	r5, [sp, #4]
 800c8de:	4656      	mov	r6, sl
 800c8e0:	465f      	mov	r7, fp
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 ffcf 	bl	800088c <__aeabi_ddiv>
 800c8ee:	f7f4 f953 	bl	8000b98 <__aeabi_d2iz>
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	f7f3 fe36 	bl	8000564 <__aeabi_i2d>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	f7f3 fe9c 	bl	8000638 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c90c:	f7f3 fcdc 	bl	80002c8 <__aeabi_dsub>
 800c910:	f805 6b01 	strb.w	r6, [r5], #1
 800c914:	9e01      	ldr	r6, [sp, #4]
 800c916:	9f03      	ldr	r7, [sp, #12]
 800c918:	1bae      	subs	r6, r5, r6
 800c91a:	42b7      	cmp	r7, r6
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	d135      	bne.n	800c98e <_dtoa_r+0x6e6>
 800c922:	f7f3 fcd3 	bl	80002cc <__adddf3>
 800c926:	4642      	mov	r2, r8
 800c928:	464b      	mov	r3, r9
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	f7f4 f913 	bl	8000b58 <__aeabi_dcmpgt>
 800c932:	b9d0      	cbnz	r0, 800c96a <_dtoa_r+0x6c2>
 800c934:	4642      	mov	r2, r8
 800c936:	464b      	mov	r3, r9
 800c938:	4630      	mov	r0, r6
 800c93a:	4639      	mov	r1, r7
 800c93c:	f7f4 f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 800c940:	b110      	cbz	r0, 800c948 <_dtoa_r+0x6a0>
 800c942:	f01a 0f01 	tst.w	sl, #1
 800c946:	d110      	bne.n	800c96a <_dtoa_r+0x6c2>
 800c948:	4620      	mov	r0, r4
 800c94a:	ee18 1a10 	vmov	r1, s16
 800c94e:	f000 fbed 	bl	800d12c <_Bfree>
 800c952:	2300      	movs	r3, #0
 800c954:	9800      	ldr	r0, [sp, #0]
 800c956:	702b      	strb	r3, [r5, #0]
 800c958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95a:	3001      	adds	r0, #1
 800c95c:	6018      	str	r0, [r3, #0]
 800c95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c960:	2b00      	cmp	r3, #0
 800c962:	f43f acf1 	beq.w	800c348 <_dtoa_r+0xa0>
 800c966:	601d      	str	r5, [r3, #0]
 800c968:	e4ee      	b.n	800c348 <_dtoa_r+0xa0>
 800c96a:	9f00      	ldr	r7, [sp, #0]
 800c96c:	462b      	mov	r3, r5
 800c96e:	461d      	mov	r5, r3
 800c970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c974:	2a39      	cmp	r2, #57	; 0x39
 800c976:	d106      	bne.n	800c986 <_dtoa_r+0x6de>
 800c978:	9a01      	ldr	r2, [sp, #4]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d1f7      	bne.n	800c96e <_dtoa_r+0x6c6>
 800c97e:	9901      	ldr	r1, [sp, #4]
 800c980:	2230      	movs	r2, #48	; 0x30
 800c982:	3701      	adds	r7, #1
 800c984:	700a      	strb	r2, [r1, #0]
 800c986:	781a      	ldrb	r2, [r3, #0]
 800c988:	3201      	adds	r2, #1
 800c98a:	701a      	strb	r2, [r3, #0]
 800c98c:	e790      	b.n	800c8b0 <_dtoa_r+0x608>
 800c98e:	4ba6      	ldr	r3, [pc, #664]	; (800cc28 <_dtoa_r+0x980>)
 800c990:	2200      	movs	r2, #0
 800c992:	f7f3 fe51 	bl	8000638 <__aeabi_dmul>
 800c996:	2200      	movs	r2, #0
 800c998:	2300      	movs	r3, #0
 800c99a:	4606      	mov	r6, r0
 800c99c:	460f      	mov	r7, r1
 800c99e:	f7f4 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d09d      	beq.n	800c8e2 <_dtoa_r+0x63a>
 800c9a6:	e7cf      	b.n	800c948 <_dtoa_r+0x6a0>
 800c9a8:	9a08      	ldr	r2, [sp, #32]
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	f000 80d7 	beq.w	800cb5e <_dtoa_r+0x8b6>
 800c9b0:	9a06      	ldr	r2, [sp, #24]
 800c9b2:	2a01      	cmp	r2, #1
 800c9b4:	f300 80ba 	bgt.w	800cb2c <_dtoa_r+0x884>
 800c9b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9ba:	2a00      	cmp	r2, #0
 800c9bc:	f000 80b2 	beq.w	800cb24 <_dtoa_r+0x87c>
 800c9c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9c4:	9e07      	ldr	r6, [sp, #28]
 800c9c6:	9d04      	ldr	r5, [sp, #16]
 800c9c8:	9a04      	ldr	r2, [sp, #16]
 800c9ca:	441a      	add	r2, r3
 800c9cc:	9204      	str	r2, [sp, #16]
 800c9ce:	9a05      	ldr	r2, [sp, #20]
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	441a      	add	r2, r3
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	9205      	str	r2, [sp, #20]
 800c9d8:	f000 fc60 	bl	800d29c <__i2b>
 800c9dc:	4607      	mov	r7, r0
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	dd0c      	ble.n	800c9fc <_dtoa_r+0x754>
 800c9e2:	9b05      	ldr	r3, [sp, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd09      	ble.n	800c9fc <_dtoa_r+0x754>
 800c9e8:	42ab      	cmp	r3, r5
 800c9ea:	9a04      	ldr	r2, [sp, #16]
 800c9ec:	bfa8      	it	ge
 800c9ee:	462b      	movge	r3, r5
 800c9f0:	1ad2      	subs	r2, r2, r3
 800c9f2:	9204      	str	r2, [sp, #16]
 800c9f4:	9a05      	ldr	r2, [sp, #20]
 800c9f6:	1aed      	subs	r5, r5, r3
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	9b07      	ldr	r3, [sp, #28]
 800c9fe:	b31b      	cbz	r3, 800ca48 <_dtoa_r+0x7a0>
 800ca00:	9b08      	ldr	r3, [sp, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 80af 	beq.w	800cb66 <_dtoa_r+0x8be>
 800ca08:	2e00      	cmp	r6, #0
 800ca0a:	dd13      	ble.n	800ca34 <_dtoa_r+0x78c>
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	4632      	mov	r2, r6
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 fd03 	bl	800d41c <__pow5mult>
 800ca16:	ee18 2a10 	vmov	r2, s16
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 fc52 	bl	800d2c8 <__multiply>
 800ca24:	ee18 1a10 	vmov	r1, s16
 800ca28:	4680      	mov	r8, r0
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 fb7e 	bl	800d12c <_Bfree>
 800ca30:	ee08 8a10 	vmov	s16, r8
 800ca34:	9b07      	ldr	r3, [sp, #28]
 800ca36:	1b9a      	subs	r2, r3, r6
 800ca38:	d006      	beq.n	800ca48 <_dtoa_r+0x7a0>
 800ca3a:	ee18 1a10 	vmov	r1, s16
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f000 fcec 	bl	800d41c <__pow5mult>
 800ca44:	ee08 0a10 	vmov	s16, r0
 800ca48:	2101      	movs	r1, #1
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 fc26 	bl	800d29c <__i2b>
 800ca50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	4606      	mov	r6, r0
 800ca56:	f340 8088 	ble.w	800cb6a <_dtoa_r+0x8c2>
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	4601      	mov	r1, r0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fcdc 	bl	800d41c <__pow5mult>
 800ca64:	9b06      	ldr	r3, [sp, #24]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	4606      	mov	r6, r0
 800ca6a:	f340 8081 	ble.w	800cb70 <_dtoa_r+0x8c8>
 800ca6e:	f04f 0800 	mov.w	r8, #0
 800ca72:	6933      	ldr	r3, [r6, #16]
 800ca74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca78:	6918      	ldr	r0, [r3, #16]
 800ca7a:	f000 fbbf 	bl	800d1fc <__hi0bits>
 800ca7e:	f1c0 0020 	rsb	r0, r0, #32
 800ca82:	9b05      	ldr	r3, [sp, #20]
 800ca84:	4418      	add	r0, r3
 800ca86:	f010 001f 	ands.w	r0, r0, #31
 800ca8a:	f000 8092 	beq.w	800cbb2 <_dtoa_r+0x90a>
 800ca8e:	f1c0 0320 	rsb	r3, r0, #32
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	f340 808a 	ble.w	800cbac <_dtoa_r+0x904>
 800ca98:	f1c0 001c 	rsb	r0, r0, #28
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	4403      	add	r3, r0
 800caa0:	9304      	str	r3, [sp, #16]
 800caa2:	9b05      	ldr	r3, [sp, #20]
 800caa4:	4403      	add	r3, r0
 800caa6:	4405      	add	r5, r0
 800caa8:	9305      	str	r3, [sp, #20]
 800caaa:	9b04      	ldr	r3, [sp, #16]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd07      	ble.n	800cac0 <_dtoa_r+0x818>
 800cab0:	ee18 1a10 	vmov	r1, s16
 800cab4:	461a      	mov	r2, r3
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 fd0a 	bl	800d4d0 <__lshift>
 800cabc:	ee08 0a10 	vmov	s16, r0
 800cac0:	9b05      	ldr	r3, [sp, #20]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	dd05      	ble.n	800cad2 <_dtoa_r+0x82a>
 800cac6:	4631      	mov	r1, r6
 800cac8:	461a      	mov	r2, r3
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 fd00 	bl	800d4d0 <__lshift>
 800cad0:	4606      	mov	r6, r0
 800cad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d06e      	beq.n	800cbb6 <_dtoa_r+0x90e>
 800cad8:	ee18 0a10 	vmov	r0, s16
 800cadc:	4631      	mov	r1, r6
 800cade:	f000 fd67 	bl	800d5b0 <__mcmp>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	da67      	bge.n	800cbb6 <_dtoa_r+0x90e>
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	3b01      	subs	r3, #1
 800caea:	ee18 1a10 	vmov	r1, s16
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	220a      	movs	r2, #10
 800caf2:	2300      	movs	r3, #0
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 fb3b 	bl	800d170 <__multadd>
 800cafa:	9b08      	ldr	r3, [sp, #32]
 800cafc:	ee08 0a10 	vmov	s16, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 81b1 	beq.w	800ce68 <_dtoa_r+0xbc0>
 800cb06:	2300      	movs	r3, #0
 800cb08:	4639      	mov	r1, r7
 800cb0a:	220a      	movs	r2, #10
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f000 fb2f 	bl	800d170 <__multadd>
 800cb12:	9b02      	ldr	r3, [sp, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	4607      	mov	r7, r0
 800cb18:	f300 808e 	bgt.w	800cc38 <_dtoa_r+0x990>
 800cb1c:	9b06      	ldr	r3, [sp, #24]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	dc51      	bgt.n	800cbc6 <_dtoa_r+0x91e>
 800cb22:	e089      	b.n	800cc38 <_dtoa_r+0x990>
 800cb24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb2a:	e74b      	b.n	800c9c4 <_dtoa_r+0x71c>
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	1e5e      	subs	r6, r3, #1
 800cb30:	9b07      	ldr	r3, [sp, #28]
 800cb32:	42b3      	cmp	r3, r6
 800cb34:	bfbf      	itttt	lt
 800cb36:	9b07      	ldrlt	r3, [sp, #28]
 800cb38:	9607      	strlt	r6, [sp, #28]
 800cb3a:	1af2      	sublt	r2, r6, r3
 800cb3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cb3e:	bfb6      	itet	lt
 800cb40:	189b      	addlt	r3, r3, r2
 800cb42:	1b9e      	subge	r6, r3, r6
 800cb44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	bfb8      	it	lt
 800cb4a:	2600      	movlt	r6, #0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bfb7      	itett	lt
 800cb50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cb54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cb58:	1a9d      	sublt	r5, r3, r2
 800cb5a:	2300      	movlt	r3, #0
 800cb5c:	e734      	b.n	800c9c8 <_dtoa_r+0x720>
 800cb5e:	9e07      	ldr	r6, [sp, #28]
 800cb60:	9d04      	ldr	r5, [sp, #16]
 800cb62:	9f08      	ldr	r7, [sp, #32]
 800cb64:	e73b      	b.n	800c9de <_dtoa_r+0x736>
 800cb66:	9a07      	ldr	r2, [sp, #28]
 800cb68:	e767      	b.n	800ca3a <_dtoa_r+0x792>
 800cb6a:	9b06      	ldr	r3, [sp, #24]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	dc18      	bgt.n	800cba2 <_dtoa_r+0x8fa>
 800cb70:	f1ba 0f00 	cmp.w	sl, #0
 800cb74:	d115      	bne.n	800cba2 <_dtoa_r+0x8fa>
 800cb76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb7a:	b993      	cbnz	r3, 800cba2 <_dtoa_r+0x8fa>
 800cb7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb80:	0d1b      	lsrs	r3, r3, #20
 800cb82:	051b      	lsls	r3, r3, #20
 800cb84:	b183      	cbz	r3, 800cba8 <_dtoa_r+0x900>
 800cb86:	9b04      	ldr	r3, [sp, #16]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	9b05      	ldr	r3, [sp, #20]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	f04f 0801 	mov.w	r8, #1
 800cb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f47f af6a 	bne.w	800ca72 <_dtoa_r+0x7ca>
 800cb9e:	2001      	movs	r0, #1
 800cba0:	e76f      	b.n	800ca82 <_dtoa_r+0x7da>
 800cba2:	f04f 0800 	mov.w	r8, #0
 800cba6:	e7f6      	b.n	800cb96 <_dtoa_r+0x8ee>
 800cba8:	4698      	mov	r8, r3
 800cbaa:	e7f4      	b.n	800cb96 <_dtoa_r+0x8ee>
 800cbac:	f43f af7d 	beq.w	800caaa <_dtoa_r+0x802>
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	301c      	adds	r0, #28
 800cbb4:	e772      	b.n	800ca9c <_dtoa_r+0x7f4>
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dc37      	bgt.n	800cc2c <_dtoa_r+0x984>
 800cbbc:	9b06      	ldr	r3, [sp, #24]
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	dd34      	ble.n	800cc2c <_dtoa_r+0x984>
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	9b02      	ldr	r3, [sp, #8]
 800cbc8:	b96b      	cbnz	r3, 800cbe6 <_dtoa_r+0x93e>
 800cbca:	4631      	mov	r1, r6
 800cbcc:	2205      	movs	r2, #5
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 face 	bl	800d170 <__multadd>
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	ee18 0a10 	vmov	r0, s16
 800cbdc:	f000 fce8 	bl	800d5b0 <__mcmp>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	f73f adbb 	bgt.w	800c75c <_dtoa_r+0x4b4>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	9d01      	ldr	r5, [sp, #4]
 800cbea:	43db      	mvns	r3, r3
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	f04f 0800 	mov.w	r8, #0
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 fa99 	bl	800d12c <_Bfree>
 800cbfa:	2f00      	cmp	r7, #0
 800cbfc:	f43f aea4 	beq.w	800c948 <_dtoa_r+0x6a0>
 800cc00:	f1b8 0f00 	cmp.w	r8, #0
 800cc04:	d005      	beq.n	800cc12 <_dtoa_r+0x96a>
 800cc06:	45b8      	cmp	r8, r7
 800cc08:	d003      	beq.n	800cc12 <_dtoa_r+0x96a>
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 fa8d 	bl	800d12c <_Bfree>
 800cc12:	4639      	mov	r1, r7
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 fa89 	bl	800d12c <_Bfree>
 800cc1a:	e695      	b.n	800c948 <_dtoa_r+0x6a0>
 800cc1c:	2600      	movs	r6, #0
 800cc1e:	4637      	mov	r7, r6
 800cc20:	e7e1      	b.n	800cbe6 <_dtoa_r+0x93e>
 800cc22:	9700      	str	r7, [sp, #0]
 800cc24:	4637      	mov	r7, r6
 800cc26:	e599      	b.n	800c75c <_dtoa_r+0x4b4>
 800cc28:	40240000 	.word	0x40240000
 800cc2c:	9b08      	ldr	r3, [sp, #32]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80ca 	beq.w	800cdc8 <_dtoa_r+0xb20>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9302      	str	r3, [sp, #8]
 800cc38:	2d00      	cmp	r5, #0
 800cc3a:	dd05      	ble.n	800cc48 <_dtoa_r+0x9a0>
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	462a      	mov	r2, r5
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 fc45 	bl	800d4d0 <__lshift>
 800cc46:	4607      	mov	r7, r0
 800cc48:	f1b8 0f00 	cmp.w	r8, #0
 800cc4c:	d05b      	beq.n	800cd06 <_dtoa_r+0xa5e>
 800cc4e:	6879      	ldr	r1, [r7, #4]
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fa2b 	bl	800d0ac <_Balloc>
 800cc56:	4605      	mov	r5, r0
 800cc58:	b928      	cbnz	r0, 800cc66 <_dtoa_r+0x9be>
 800cc5a:	4b87      	ldr	r3, [pc, #540]	; (800ce78 <_dtoa_r+0xbd0>)
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cc62:	f7ff bb3b 	b.w	800c2dc <_dtoa_r+0x34>
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	3202      	adds	r2, #2
 800cc6a:	0092      	lsls	r2, r2, #2
 800cc6c:	f107 010c 	add.w	r1, r7, #12
 800cc70:	300c      	adds	r0, #12
 800cc72:	f000 fa0d 	bl	800d090 <memcpy>
 800cc76:	2201      	movs	r2, #1
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f000 fc28 	bl	800d4d0 <__lshift>
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	f103 0901 	add.w	r9, r3, #1
 800cc86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	9305      	str	r3, [sp, #20]
 800cc8e:	f00a 0301 	and.w	r3, sl, #1
 800cc92:	46b8      	mov	r8, r7
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	4607      	mov	r7, r0
 800cc98:	4631      	mov	r1, r6
 800cc9a:	ee18 0a10 	vmov	r0, s16
 800cc9e:	f7ff fa77 	bl	800c190 <quorem>
 800cca2:	4641      	mov	r1, r8
 800cca4:	9002      	str	r0, [sp, #8]
 800cca6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ccaa:	ee18 0a10 	vmov	r0, s16
 800ccae:	f000 fc7f 	bl	800d5b0 <__mcmp>
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	9003      	str	r0, [sp, #12]
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 fc95 	bl	800d5e8 <__mdiff>
 800ccbe:	68c2      	ldr	r2, [r0, #12]
 800ccc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	bb02      	cbnz	r2, 800cd0a <_dtoa_r+0xa62>
 800ccc8:	4601      	mov	r1, r0
 800ccca:	ee18 0a10 	vmov	r0, s16
 800ccce:	f000 fc6f 	bl	800d5b0 <__mcmp>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	9207      	str	r2, [sp, #28]
 800ccda:	f000 fa27 	bl	800d12c <_Bfree>
 800ccde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cce2:	ea43 0102 	orr.w	r1, r3, r2
 800cce6:	9b04      	ldr	r3, [sp, #16]
 800cce8:	430b      	orrs	r3, r1
 800ccea:	464d      	mov	r5, r9
 800ccec:	d10f      	bne.n	800cd0e <_dtoa_r+0xa66>
 800ccee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ccf2:	d02a      	beq.n	800cd4a <_dtoa_r+0xaa2>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dd02      	ble.n	800cd00 <_dtoa_r+0xa58>
 800ccfa:	9b02      	ldr	r3, [sp, #8]
 800ccfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cd00:	f88b a000 	strb.w	sl, [fp]
 800cd04:	e775      	b.n	800cbf2 <_dtoa_r+0x94a>
 800cd06:	4638      	mov	r0, r7
 800cd08:	e7ba      	b.n	800cc80 <_dtoa_r+0x9d8>
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	e7e2      	b.n	800ccd4 <_dtoa_r+0xa2c>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	db04      	blt.n	800cd1e <_dtoa_r+0xa76>
 800cd14:	9906      	ldr	r1, [sp, #24]
 800cd16:	430b      	orrs	r3, r1
 800cd18:	9904      	ldr	r1, [sp, #16]
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	d122      	bne.n	800cd64 <_dtoa_r+0xabc>
 800cd1e:	2a00      	cmp	r2, #0
 800cd20:	ddee      	ble.n	800cd00 <_dtoa_r+0xa58>
 800cd22:	ee18 1a10 	vmov	r1, s16
 800cd26:	2201      	movs	r2, #1
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 fbd1 	bl	800d4d0 <__lshift>
 800cd2e:	4631      	mov	r1, r6
 800cd30:	ee08 0a10 	vmov	s16, r0
 800cd34:	f000 fc3c 	bl	800d5b0 <__mcmp>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	dc03      	bgt.n	800cd44 <_dtoa_r+0xa9c>
 800cd3c:	d1e0      	bne.n	800cd00 <_dtoa_r+0xa58>
 800cd3e:	f01a 0f01 	tst.w	sl, #1
 800cd42:	d0dd      	beq.n	800cd00 <_dtoa_r+0xa58>
 800cd44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd48:	d1d7      	bne.n	800ccfa <_dtoa_r+0xa52>
 800cd4a:	2339      	movs	r3, #57	; 0x39
 800cd4c:	f88b 3000 	strb.w	r3, [fp]
 800cd50:	462b      	mov	r3, r5
 800cd52:	461d      	mov	r5, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd5a:	2a39      	cmp	r2, #57	; 0x39
 800cd5c:	d071      	beq.n	800ce42 <_dtoa_r+0xb9a>
 800cd5e:	3201      	adds	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	e746      	b.n	800cbf2 <_dtoa_r+0x94a>
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	dd07      	ble.n	800cd78 <_dtoa_r+0xad0>
 800cd68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd6c:	d0ed      	beq.n	800cd4a <_dtoa_r+0xaa2>
 800cd6e:	f10a 0301 	add.w	r3, sl, #1
 800cd72:	f88b 3000 	strb.w	r3, [fp]
 800cd76:	e73c      	b.n	800cbf2 <_dtoa_r+0x94a>
 800cd78:	9b05      	ldr	r3, [sp, #20]
 800cd7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cd7e:	4599      	cmp	r9, r3
 800cd80:	d047      	beq.n	800ce12 <_dtoa_r+0xb6a>
 800cd82:	ee18 1a10 	vmov	r1, s16
 800cd86:	2300      	movs	r3, #0
 800cd88:	220a      	movs	r2, #10
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f9f0 	bl	800d170 <__multadd>
 800cd90:	45b8      	cmp	r8, r7
 800cd92:	ee08 0a10 	vmov	s16, r0
 800cd96:	f04f 0300 	mov.w	r3, #0
 800cd9a:	f04f 020a 	mov.w	r2, #10
 800cd9e:	4641      	mov	r1, r8
 800cda0:	4620      	mov	r0, r4
 800cda2:	d106      	bne.n	800cdb2 <_dtoa_r+0xb0a>
 800cda4:	f000 f9e4 	bl	800d170 <__multadd>
 800cda8:	4680      	mov	r8, r0
 800cdaa:	4607      	mov	r7, r0
 800cdac:	f109 0901 	add.w	r9, r9, #1
 800cdb0:	e772      	b.n	800cc98 <_dtoa_r+0x9f0>
 800cdb2:	f000 f9dd 	bl	800d170 <__multadd>
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	4680      	mov	r8, r0
 800cdba:	2300      	movs	r3, #0
 800cdbc:	220a      	movs	r2, #10
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 f9d6 	bl	800d170 <__multadd>
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	e7f1      	b.n	800cdac <_dtoa_r+0xb04>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	9302      	str	r3, [sp, #8]
 800cdcc:	9d01      	ldr	r5, [sp, #4]
 800cdce:	ee18 0a10 	vmov	r0, s16
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	f7ff f9dc 	bl	800c190 <quorem>
 800cdd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	f805 ab01 	strb.w	sl, [r5], #1
 800cde2:	1aea      	subs	r2, r5, r3
 800cde4:	9b02      	ldr	r3, [sp, #8]
 800cde6:	4293      	cmp	r3, r2
 800cde8:	dd09      	ble.n	800cdfe <_dtoa_r+0xb56>
 800cdea:	ee18 1a10 	vmov	r1, s16
 800cdee:	2300      	movs	r3, #0
 800cdf0:	220a      	movs	r2, #10
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 f9bc 	bl	800d170 <__multadd>
 800cdf8:	ee08 0a10 	vmov	s16, r0
 800cdfc:	e7e7      	b.n	800cdce <_dtoa_r+0xb26>
 800cdfe:	9b02      	ldr	r3, [sp, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	bfc8      	it	gt
 800ce04:	461d      	movgt	r5, r3
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	bfd8      	it	le
 800ce0a:	2501      	movle	r5, #1
 800ce0c:	441d      	add	r5, r3
 800ce0e:	f04f 0800 	mov.w	r8, #0
 800ce12:	ee18 1a10 	vmov	r1, s16
 800ce16:	2201      	movs	r2, #1
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fb59 	bl	800d4d0 <__lshift>
 800ce1e:	4631      	mov	r1, r6
 800ce20:	ee08 0a10 	vmov	s16, r0
 800ce24:	f000 fbc4 	bl	800d5b0 <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	dc91      	bgt.n	800cd50 <_dtoa_r+0xaa8>
 800ce2c:	d102      	bne.n	800ce34 <_dtoa_r+0xb8c>
 800ce2e:	f01a 0f01 	tst.w	sl, #1
 800ce32:	d18d      	bne.n	800cd50 <_dtoa_r+0xaa8>
 800ce34:	462b      	mov	r3, r5
 800ce36:	461d      	mov	r5, r3
 800ce38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce3c:	2a30      	cmp	r2, #48	; 0x30
 800ce3e:	d0fa      	beq.n	800ce36 <_dtoa_r+0xb8e>
 800ce40:	e6d7      	b.n	800cbf2 <_dtoa_r+0x94a>
 800ce42:	9a01      	ldr	r2, [sp, #4]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d184      	bne.n	800cd52 <_dtoa_r+0xaaa>
 800ce48:	9b00      	ldr	r3, [sp, #0]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	2331      	movs	r3, #49	; 0x31
 800ce50:	7013      	strb	r3, [r2, #0]
 800ce52:	e6ce      	b.n	800cbf2 <_dtoa_r+0x94a>
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <_dtoa_r+0xbd4>)
 800ce56:	f7ff ba95 	b.w	800c384 <_dtoa_r+0xdc>
 800ce5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f47f aa6e 	bne.w	800c33e <_dtoa_r+0x96>
 800ce62:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <_dtoa_r+0xbd8>)
 800ce64:	f7ff ba8e 	b.w	800c384 <_dtoa_r+0xdc>
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dcae      	bgt.n	800cdcc <_dtoa_r+0xb24>
 800ce6e:	9b06      	ldr	r3, [sp, #24]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	f73f aea8 	bgt.w	800cbc6 <_dtoa_r+0x91e>
 800ce76:	e7a9      	b.n	800cdcc <_dtoa_r+0xb24>
 800ce78:	0800ea7f 	.word	0x0800ea7f
 800ce7c:	0800e9dc 	.word	0x0800e9dc
 800ce80:	0800ea00 	.word	0x0800ea00

0800ce84 <std>:
 800ce84:	2300      	movs	r3, #0
 800ce86:	b510      	push	{r4, lr}
 800ce88:	4604      	mov	r4, r0
 800ce8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce92:	6083      	str	r3, [r0, #8]
 800ce94:	8181      	strh	r1, [r0, #12]
 800ce96:	6643      	str	r3, [r0, #100]	; 0x64
 800ce98:	81c2      	strh	r2, [r0, #14]
 800ce9a:	6183      	str	r3, [r0, #24]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	2208      	movs	r2, #8
 800cea0:	305c      	adds	r0, #92	; 0x5c
 800cea2:	f7fe fcb7 	bl	800b814 <memset>
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <std+0x38>)
 800cea8:	6263      	str	r3, [r4, #36]	; 0x24
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <std+0x3c>)
 800ceac:	62a3      	str	r3, [r4, #40]	; 0x28
 800ceae:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <std+0x40>)
 800ceb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <std+0x44>)
 800ceb4:	6224      	str	r4, [r4, #32]
 800ceb6:	6323      	str	r3, [r4, #48]	; 0x30
 800ceb8:	bd10      	pop	{r4, pc}
 800ceba:	bf00      	nop
 800cebc:	0800df2d 	.word	0x0800df2d
 800cec0:	0800df4f 	.word	0x0800df4f
 800cec4:	0800df87 	.word	0x0800df87
 800cec8:	0800dfab 	.word	0x0800dfab

0800cecc <_cleanup_r>:
 800cecc:	4901      	ldr	r1, [pc, #4]	; (800ced4 <_cleanup_r+0x8>)
 800cece:	f000 b8af 	b.w	800d030 <_fwalk_reent>
 800ced2:	bf00      	nop
 800ced4:	0800e2c1 	.word	0x0800e2c1

0800ced8 <__sfmoreglue>:
 800ced8:	b570      	push	{r4, r5, r6, lr}
 800ceda:	2268      	movs	r2, #104	; 0x68
 800cedc:	1e4d      	subs	r5, r1, #1
 800cede:	4355      	muls	r5, r2
 800cee0:	460e      	mov	r6, r1
 800cee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cee6:	f000 fce7 	bl	800d8b8 <_malloc_r>
 800ceea:	4604      	mov	r4, r0
 800ceec:	b140      	cbz	r0, 800cf00 <__sfmoreglue+0x28>
 800ceee:	2100      	movs	r1, #0
 800cef0:	e9c0 1600 	strd	r1, r6, [r0]
 800cef4:	300c      	adds	r0, #12
 800cef6:	60a0      	str	r0, [r4, #8]
 800cef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cefc:	f7fe fc8a 	bl	800b814 <memset>
 800cf00:	4620      	mov	r0, r4
 800cf02:	bd70      	pop	{r4, r5, r6, pc}

0800cf04 <__sfp_lock_acquire>:
 800cf04:	4801      	ldr	r0, [pc, #4]	; (800cf0c <__sfp_lock_acquire+0x8>)
 800cf06:	f000 b8b8 	b.w	800d07a <__retarget_lock_acquire_recursive>
 800cf0a:	bf00      	nop
 800cf0c:	20000df9 	.word	0x20000df9

0800cf10 <__sfp_lock_release>:
 800cf10:	4801      	ldr	r0, [pc, #4]	; (800cf18 <__sfp_lock_release+0x8>)
 800cf12:	f000 b8b3 	b.w	800d07c <__retarget_lock_release_recursive>
 800cf16:	bf00      	nop
 800cf18:	20000df9 	.word	0x20000df9

0800cf1c <__sinit_lock_acquire>:
 800cf1c:	4801      	ldr	r0, [pc, #4]	; (800cf24 <__sinit_lock_acquire+0x8>)
 800cf1e:	f000 b8ac 	b.w	800d07a <__retarget_lock_acquire_recursive>
 800cf22:	bf00      	nop
 800cf24:	20000dfa 	.word	0x20000dfa

0800cf28 <__sinit_lock_release>:
 800cf28:	4801      	ldr	r0, [pc, #4]	; (800cf30 <__sinit_lock_release+0x8>)
 800cf2a:	f000 b8a7 	b.w	800d07c <__retarget_lock_release_recursive>
 800cf2e:	bf00      	nop
 800cf30:	20000dfa 	.word	0x20000dfa

0800cf34 <__sinit>:
 800cf34:	b510      	push	{r4, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	f7ff fff0 	bl	800cf1c <__sinit_lock_acquire>
 800cf3c:	69a3      	ldr	r3, [r4, #24]
 800cf3e:	b11b      	cbz	r3, 800cf48 <__sinit+0x14>
 800cf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf44:	f7ff bff0 	b.w	800cf28 <__sinit_lock_release>
 800cf48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf4c:	6523      	str	r3, [r4, #80]	; 0x50
 800cf4e:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <__sinit+0x68>)
 800cf50:	4a13      	ldr	r2, [pc, #76]	; (800cfa0 <__sinit+0x6c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf56:	42a3      	cmp	r3, r4
 800cf58:	bf04      	itt	eq
 800cf5a:	2301      	moveq	r3, #1
 800cf5c:	61a3      	streq	r3, [r4, #24]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 f820 	bl	800cfa4 <__sfp>
 800cf64:	6060      	str	r0, [r4, #4]
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 f81c 	bl	800cfa4 <__sfp>
 800cf6c:	60a0      	str	r0, [r4, #8]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 f818 	bl	800cfa4 <__sfp>
 800cf74:	2200      	movs	r2, #0
 800cf76:	60e0      	str	r0, [r4, #12]
 800cf78:	2104      	movs	r1, #4
 800cf7a:	6860      	ldr	r0, [r4, #4]
 800cf7c:	f7ff ff82 	bl	800ce84 <std>
 800cf80:	68a0      	ldr	r0, [r4, #8]
 800cf82:	2201      	movs	r2, #1
 800cf84:	2109      	movs	r1, #9
 800cf86:	f7ff ff7d 	bl	800ce84 <std>
 800cf8a:	68e0      	ldr	r0, [r4, #12]
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	2112      	movs	r1, #18
 800cf90:	f7ff ff78 	bl	800ce84 <std>
 800cf94:	2301      	movs	r3, #1
 800cf96:	61a3      	str	r3, [r4, #24]
 800cf98:	e7d2      	b.n	800cf40 <__sinit+0xc>
 800cf9a:	bf00      	nop
 800cf9c:	0800e9c8 	.word	0x0800e9c8
 800cfa0:	0800cecd 	.word	0x0800cecd

0800cfa4 <__sfp>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	f7ff ffac 	bl	800cf04 <__sfp_lock_acquire>
 800cfac:	4b1e      	ldr	r3, [pc, #120]	; (800d028 <__sfp+0x84>)
 800cfae:	681e      	ldr	r6, [r3, #0]
 800cfb0:	69b3      	ldr	r3, [r6, #24]
 800cfb2:	b913      	cbnz	r3, 800cfba <__sfp+0x16>
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7ff ffbd 	bl	800cf34 <__sinit>
 800cfba:	3648      	adds	r6, #72	; 0x48
 800cfbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	d503      	bpl.n	800cfcc <__sfp+0x28>
 800cfc4:	6833      	ldr	r3, [r6, #0]
 800cfc6:	b30b      	cbz	r3, 800d00c <__sfp+0x68>
 800cfc8:	6836      	ldr	r6, [r6, #0]
 800cfca:	e7f7      	b.n	800cfbc <__sfp+0x18>
 800cfcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfd0:	b9d5      	cbnz	r5, 800d008 <__sfp+0x64>
 800cfd2:	4b16      	ldr	r3, [pc, #88]	; (800d02c <__sfp+0x88>)
 800cfd4:	60e3      	str	r3, [r4, #12]
 800cfd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfda:	6665      	str	r5, [r4, #100]	; 0x64
 800cfdc:	f000 f84c 	bl	800d078 <__retarget_lock_init_recursive>
 800cfe0:	f7ff ff96 	bl	800cf10 <__sfp_lock_release>
 800cfe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfec:	6025      	str	r5, [r4, #0]
 800cfee:	61a5      	str	r5, [r4, #24]
 800cff0:	2208      	movs	r2, #8
 800cff2:	4629      	mov	r1, r5
 800cff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cff8:	f7fe fc0c 	bl	800b814 <memset>
 800cffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d004:	4620      	mov	r0, r4
 800d006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d008:	3468      	adds	r4, #104	; 0x68
 800d00a:	e7d9      	b.n	800cfc0 <__sfp+0x1c>
 800d00c:	2104      	movs	r1, #4
 800d00e:	4638      	mov	r0, r7
 800d010:	f7ff ff62 	bl	800ced8 <__sfmoreglue>
 800d014:	4604      	mov	r4, r0
 800d016:	6030      	str	r0, [r6, #0]
 800d018:	2800      	cmp	r0, #0
 800d01a:	d1d5      	bne.n	800cfc8 <__sfp+0x24>
 800d01c:	f7ff ff78 	bl	800cf10 <__sfp_lock_release>
 800d020:	230c      	movs	r3, #12
 800d022:	603b      	str	r3, [r7, #0]
 800d024:	e7ee      	b.n	800d004 <__sfp+0x60>
 800d026:	bf00      	nop
 800d028:	0800e9c8 	.word	0x0800e9c8
 800d02c:	ffff0001 	.word	0xffff0001

0800d030 <_fwalk_reent>:
 800d030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d034:	4606      	mov	r6, r0
 800d036:	4688      	mov	r8, r1
 800d038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d03c:	2700      	movs	r7, #0
 800d03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d042:	f1b9 0901 	subs.w	r9, r9, #1
 800d046:	d505      	bpl.n	800d054 <_fwalk_reent+0x24>
 800d048:	6824      	ldr	r4, [r4, #0]
 800d04a:	2c00      	cmp	r4, #0
 800d04c:	d1f7      	bne.n	800d03e <_fwalk_reent+0xe>
 800d04e:	4638      	mov	r0, r7
 800d050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d054:	89ab      	ldrh	r3, [r5, #12]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d907      	bls.n	800d06a <_fwalk_reent+0x3a>
 800d05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d05e:	3301      	adds	r3, #1
 800d060:	d003      	beq.n	800d06a <_fwalk_reent+0x3a>
 800d062:	4629      	mov	r1, r5
 800d064:	4630      	mov	r0, r6
 800d066:	47c0      	blx	r8
 800d068:	4307      	orrs	r7, r0
 800d06a:	3568      	adds	r5, #104	; 0x68
 800d06c:	e7e9      	b.n	800d042 <_fwalk_reent+0x12>
	...

0800d070 <_localeconv_r>:
 800d070:	4800      	ldr	r0, [pc, #0]	; (800d074 <_localeconv_r+0x4>)
 800d072:	4770      	bx	lr
 800d074:	20000250 	.word	0x20000250

0800d078 <__retarget_lock_init_recursive>:
 800d078:	4770      	bx	lr

0800d07a <__retarget_lock_acquire_recursive>:
 800d07a:	4770      	bx	lr

0800d07c <__retarget_lock_release_recursive>:
 800d07c:	4770      	bx	lr
	...

0800d080 <malloc>:
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <malloc+0xc>)
 800d082:	4601      	mov	r1, r0
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	f000 bc17 	b.w	800d8b8 <_malloc_r>
 800d08a:	bf00      	nop
 800d08c:	200000fc 	.word	0x200000fc

0800d090 <memcpy>:
 800d090:	440a      	add	r2, r1
 800d092:	4291      	cmp	r1, r2
 800d094:	f100 33ff 	add.w	r3, r0, #4294967295
 800d098:	d100      	bne.n	800d09c <memcpy+0xc>
 800d09a:	4770      	bx	lr
 800d09c:	b510      	push	{r4, lr}
 800d09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a6:	4291      	cmp	r1, r2
 800d0a8:	d1f9      	bne.n	800d09e <memcpy+0xe>
 800d0aa:	bd10      	pop	{r4, pc}

0800d0ac <_Balloc>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	b976      	cbnz	r6, 800d0d4 <_Balloc+0x28>
 800d0b6:	2010      	movs	r0, #16
 800d0b8:	f7ff ffe2 	bl	800d080 <malloc>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	6260      	str	r0, [r4, #36]	; 0x24
 800d0c0:	b920      	cbnz	r0, 800d0cc <_Balloc+0x20>
 800d0c2:	4b18      	ldr	r3, [pc, #96]	; (800d124 <_Balloc+0x78>)
 800d0c4:	4818      	ldr	r0, [pc, #96]	; (800d128 <_Balloc+0x7c>)
 800d0c6:	2166      	movs	r1, #102	; 0x66
 800d0c8:	f001 f846 	bl	800e158 <__assert_func>
 800d0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0d0:	6006      	str	r6, [r0, #0]
 800d0d2:	60c6      	str	r6, [r0, #12]
 800d0d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d0d6:	68f3      	ldr	r3, [r6, #12]
 800d0d8:	b183      	cbz	r3, 800d0fc <_Balloc+0x50>
 800d0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0e2:	b9b8      	cbnz	r0, 800d114 <_Balloc+0x68>
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d0ea:	1d72      	adds	r2, r6, #5
 800d0ec:	0092      	lsls	r2, r2, #2
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f000 fb60 	bl	800d7b4 <_calloc_r>
 800d0f4:	b160      	cbz	r0, 800d110 <_Balloc+0x64>
 800d0f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0fa:	e00e      	b.n	800d11a <_Balloc+0x6e>
 800d0fc:	2221      	movs	r2, #33	; 0x21
 800d0fe:	2104      	movs	r1, #4
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fb57 	bl	800d7b4 <_calloc_r>
 800d106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d108:	60f0      	str	r0, [r6, #12]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e4      	bne.n	800d0da <_Balloc+0x2e>
 800d110:	2000      	movs	r0, #0
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	6802      	ldr	r2, [r0, #0]
 800d116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d11a:	2300      	movs	r3, #0
 800d11c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d120:	e7f7      	b.n	800d112 <_Balloc+0x66>
 800d122:	bf00      	nop
 800d124:	0800ea0d 	.word	0x0800ea0d
 800d128:	0800eaf0 	.word	0x0800eaf0

0800d12c <_Bfree>:
 800d12c:	b570      	push	{r4, r5, r6, lr}
 800d12e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	b976      	cbnz	r6, 800d154 <_Bfree+0x28>
 800d136:	2010      	movs	r0, #16
 800d138:	f7ff ffa2 	bl	800d080 <malloc>
 800d13c:	4602      	mov	r2, r0
 800d13e:	6268      	str	r0, [r5, #36]	; 0x24
 800d140:	b920      	cbnz	r0, 800d14c <_Bfree+0x20>
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <_Bfree+0x3c>)
 800d144:	4809      	ldr	r0, [pc, #36]	; (800d16c <_Bfree+0x40>)
 800d146:	218a      	movs	r1, #138	; 0x8a
 800d148:	f001 f806 	bl	800e158 <__assert_func>
 800d14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d150:	6006      	str	r6, [r0, #0]
 800d152:	60c6      	str	r6, [r0, #12]
 800d154:	b13c      	cbz	r4, 800d166 <_Bfree+0x3a>
 800d156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d158:	6862      	ldr	r2, [r4, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d160:	6021      	str	r1, [r4, #0]
 800d162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	0800ea0d 	.word	0x0800ea0d
 800d16c:	0800eaf0 	.word	0x0800eaf0

0800d170 <__multadd>:
 800d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d174:	690d      	ldr	r5, [r1, #16]
 800d176:	4607      	mov	r7, r0
 800d178:	460c      	mov	r4, r1
 800d17a:	461e      	mov	r6, r3
 800d17c:	f101 0c14 	add.w	ip, r1, #20
 800d180:	2000      	movs	r0, #0
 800d182:	f8dc 3000 	ldr.w	r3, [ip]
 800d186:	b299      	uxth	r1, r3
 800d188:	fb02 6101 	mla	r1, r2, r1, r6
 800d18c:	0c1e      	lsrs	r6, r3, #16
 800d18e:	0c0b      	lsrs	r3, r1, #16
 800d190:	fb02 3306 	mla	r3, r2, r6, r3
 800d194:	b289      	uxth	r1, r1
 800d196:	3001      	adds	r0, #1
 800d198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d19c:	4285      	cmp	r5, r0
 800d19e:	f84c 1b04 	str.w	r1, [ip], #4
 800d1a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1a6:	dcec      	bgt.n	800d182 <__multadd+0x12>
 800d1a8:	b30e      	cbz	r6, 800d1ee <__multadd+0x7e>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	42ab      	cmp	r3, r5
 800d1ae:	dc19      	bgt.n	800d1e4 <__multadd+0x74>
 800d1b0:	6861      	ldr	r1, [r4, #4]
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	3101      	adds	r1, #1
 800d1b6:	f7ff ff79 	bl	800d0ac <_Balloc>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	b928      	cbnz	r0, 800d1ca <__multadd+0x5a>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	4b0c      	ldr	r3, [pc, #48]	; (800d1f4 <__multadd+0x84>)
 800d1c2:	480d      	ldr	r0, [pc, #52]	; (800d1f8 <__multadd+0x88>)
 800d1c4:	21b5      	movs	r1, #181	; 0xb5
 800d1c6:	f000 ffc7 	bl	800e158 <__assert_func>
 800d1ca:	6922      	ldr	r2, [r4, #16]
 800d1cc:	3202      	adds	r2, #2
 800d1ce:	f104 010c 	add.w	r1, r4, #12
 800d1d2:	0092      	lsls	r2, r2, #2
 800d1d4:	300c      	adds	r0, #12
 800d1d6:	f7ff ff5b 	bl	800d090 <memcpy>
 800d1da:	4621      	mov	r1, r4
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff ffa5 	bl	800d12c <_Bfree>
 800d1e2:	4644      	mov	r4, r8
 800d1e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	615e      	str	r6, [r3, #20]
 800d1ec:	6125      	str	r5, [r4, #16]
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f4:	0800ea7f 	.word	0x0800ea7f
 800d1f8:	0800eaf0 	.word	0x0800eaf0

0800d1fc <__hi0bits>:
 800d1fc:	0c03      	lsrs	r3, r0, #16
 800d1fe:	041b      	lsls	r3, r3, #16
 800d200:	b9d3      	cbnz	r3, 800d238 <__hi0bits+0x3c>
 800d202:	0400      	lsls	r0, r0, #16
 800d204:	2310      	movs	r3, #16
 800d206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d20a:	bf04      	itt	eq
 800d20c:	0200      	lsleq	r0, r0, #8
 800d20e:	3308      	addeq	r3, #8
 800d210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d214:	bf04      	itt	eq
 800d216:	0100      	lsleq	r0, r0, #4
 800d218:	3304      	addeq	r3, #4
 800d21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d21e:	bf04      	itt	eq
 800d220:	0080      	lsleq	r0, r0, #2
 800d222:	3302      	addeq	r3, #2
 800d224:	2800      	cmp	r0, #0
 800d226:	db05      	blt.n	800d234 <__hi0bits+0x38>
 800d228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d22c:	f103 0301 	add.w	r3, r3, #1
 800d230:	bf08      	it	eq
 800d232:	2320      	moveq	r3, #32
 800d234:	4618      	mov	r0, r3
 800d236:	4770      	bx	lr
 800d238:	2300      	movs	r3, #0
 800d23a:	e7e4      	b.n	800d206 <__hi0bits+0xa>

0800d23c <__lo0bits>:
 800d23c:	6803      	ldr	r3, [r0, #0]
 800d23e:	f013 0207 	ands.w	r2, r3, #7
 800d242:	4601      	mov	r1, r0
 800d244:	d00b      	beq.n	800d25e <__lo0bits+0x22>
 800d246:	07da      	lsls	r2, r3, #31
 800d248:	d423      	bmi.n	800d292 <__lo0bits+0x56>
 800d24a:	0798      	lsls	r0, r3, #30
 800d24c:	bf49      	itett	mi
 800d24e:	085b      	lsrmi	r3, r3, #1
 800d250:	089b      	lsrpl	r3, r3, #2
 800d252:	2001      	movmi	r0, #1
 800d254:	600b      	strmi	r3, [r1, #0]
 800d256:	bf5c      	itt	pl
 800d258:	600b      	strpl	r3, [r1, #0]
 800d25a:	2002      	movpl	r0, #2
 800d25c:	4770      	bx	lr
 800d25e:	b298      	uxth	r0, r3
 800d260:	b9a8      	cbnz	r0, 800d28e <__lo0bits+0x52>
 800d262:	0c1b      	lsrs	r3, r3, #16
 800d264:	2010      	movs	r0, #16
 800d266:	b2da      	uxtb	r2, r3
 800d268:	b90a      	cbnz	r2, 800d26e <__lo0bits+0x32>
 800d26a:	3008      	adds	r0, #8
 800d26c:	0a1b      	lsrs	r3, r3, #8
 800d26e:	071a      	lsls	r2, r3, #28
 800d270:	bf04      	itt	eq
 800d272:	091b      	lsreq	r3, r3, #4
 800d274:	3004      	addeq	r0, #4
 800d276:	079a      	lsls	r2, r3, #30
 800d278:	bf04      	itt	eq
 800d27a:	089b      	lsreq	r3, r3, #2
 800d27c:	3002      	addeq	r0, #2
 800d27e:	07da      	lsls	r2, r3, #31
 800d280:	d403      	bmi.n	800d28a <__lo0bits+0x4e>
 800d282:	085b      	lsrs	r3, r3, #1
 800d284:	f100 0001 	add.w	r0, r0, #1
 800d288:	d005      	beq.n	800d296 <__lo0bits+0x5a>
 800d28a:	600b      	str	r3, [r1, #0]
 800d28c:	4770      	bx	lr
 800d28e:	4610      	mov	r0, r2
 800d290:	e7e9      	b.n	800d266 <__lo0bits+0x2a>
 800d292:	2000      	movs	r0, #0
 800d294:	4770      	bx	lr
 800d296:	2020      	movs	r0, #32
 800d298:	4770      	bx	lr
	...

0800d29c <__i2b>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	f7ff ff03 	bl	800d0ac <_Balloc>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	b928      	cbnz	r0, 800d2b6 <__i2b+0x1a>
 800d2aa:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <__i2b+0x24>)
 800d2ac:	4805      	ldr	r0, [pc, #20]	; (800d2c4 <__i2b+0x28>)
 800d2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2b2:	f000 ff51 	bl	800e158 <__assert_func>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	6144      	str	r4, [r0, #20]
 800d2ba:	6103      	str	r3, [r0, #16]
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop
 800d2c0:	0800ea7f 	.word	0x0800ea7f
 800d2c4:	0800eaf0 	.word	0x0800eaf0

0800d2c8 <__multiply>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	4691      	mov	r9, r2
 800d2ce:	690a      	ldr	r2, [r1, #16]
 800d2d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	bfb8      	it	lt
 800d2d8:	460b      	movlt	r3, r1
 800d2da:	460c      	mov	r4, r1
 800d2dc:	bfbc      	itt	lt
 800d2de:	464c      	movlt	r4, r9
 800d2e0:	4699      	movlt	r9, r3
 800d2e2:	6927      	ldr	r7, [r4, #16]
 800d2e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2e8:	68a3      	ldr	r3, [r4, #8]
 800d2ea:	6861      	ldr	r1, [r4, #4]
 800d2ec:	eb07 060a 	add.w	r6, r7, sl
 800d2f0:	42b3      	cmp	r3, r6
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	bfb8      	it	lt
 800d2f6:	3101      	addlt	r1, #1
 800d2f8:	f7ff fed8 	bl	800d0ac <_Balloc>
 800d2fc:	b930      	cbnz	r0, 800d30c <__multiply+0x44>
 800d2fe:	4602      	mov	r2, r0
 800d300:	4b44      	ldr	r3, [pc, #272]	; (800d414 <__multiply+0x14c>)
 800d302:	4845      	ldr	r0, [pc, #276]	; (800d418 <__multiply+0x150>)
 800d304:	f240 115d 	movw	r1, #349	; 0x15d
 800d308:	f000 ff26 	bl	800e158 <__assert_func>
 800d30c:	f100 0514 	add.w	r5, r0, #20
 800d310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d314:	462b      	mov	r3, r5
 800d316:	2200      	movs	r2, #0
 800d318:	4543      	cmp	r3, r8
 800d31a:	d321      	bcc.n	800d360 <__multiply+0x98>
 800d31c:	f104 0314 	add.w	r3, r4, #20
 800d320:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d324:	f109 0314 	add.w	r3, r9, #20
 800d328:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d32c:	9202      	str	r2, [sp, #8]
 800d32e:	1b3a      	subs	r2, r7, r4
 800d330:	3a15      	subs	r2, #21
 800d332:	f022 0203 	bic.w	r2, r2, #3
 800d336:	3204      	adds	r2, #4
 800d338:	f104 0115 	add.w	r1, r4, #21
 800d33c:	428f      	cmp	r7, r1
 800d33e:	bf38      	it	cc
 800d340:	2204      	movcc	r2, #4
 800d342:	9201      	str	r2, [sp, #4]
 800d344:	9a02      	ldr	r2, [sp, #8]
 800d346:	9303      	str	r3, [sp, #12]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d80c      	bhi.n	800d366 <__multiply+0x9e>
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	dd03      	ble.n	800d358 <__multiply+0x90>
 800d350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d354:	2b00      	cmp	r3, #0
 800d356:	d05a      	beq.n	800d40e <__multiply+0x146>
 800d358:	6106      	str	r6, [r0, #16]
 800d35a:	b005      	add	sp, #20
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	f843 2b04 	str.w	r2, [r3], #4
 800d364:	e7d8      	b.n	800d318 <__multiply+0x50>
 800d366:	f8b3 a000 	ldrh.w	sl, [r3]
 800d36a:	f1ba 0f00 	cmp.w	sl, #0
 800d36e:	d024      	beq.n	800d3ba <__multiply+0xf2>
 800d370:	f104 0e14 	add.w	lr, r4, #20
 800d374:	46a9      	mov	r9, r5
 800d376:	f04f 0c00 	mov.w	ip, #0
 800d37a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d37e:	f8d9 1000 	ldr.w	r1, [r9]
 800d382:	fa1f fb82 	uxth.w	fp, r2
 800d386:	b289      	uxth	r1, r1
 800d388:	fb0a 110b 	mla	r1, sl, fp, r1
 800d38c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d390:	f8d9 2000 	ldr.w	r2, [r9]
 800d394:	4461      	add	r1, ip
 800d396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d39a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d39e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3a2:	b289      	uxth	r1, r1
 800d3a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3a8:	4577      	cmp	r7, lr
 800d3aa:	f849 1b04 	str.w	r1, [r9], #4
 800d3ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3b2:	d8e2      	bhi.n	800d37a <__multiply+0xb2>
 800d3b4:	9a01      	ldr	r2, [sp, #4]
 800d3b6:	f845 c002 	str.w	ip, [r5, r2]
 800d3ba:	9a03      	ldr	r2, [sp, #12]
 800d3bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	f1b9 0f00 	cmp.w	r9, #0
 800d3c6:	d020      	beq.n	800d40a <__multiply+0x142>
 800d3c8:	6829      	ldr	r1, [r5, #0]
 800d3ca:	f104 0c14 	add.w	ip, r4, #20
 800d3ce:	46ae      	mov	lr, r5
 800d3d0:	f04f 0a00 	mov.w	sl, #0
 800d3d4:	f8bc b000 	ldrh.w	fp, [ip]
 800d3d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3dc:	fb09 220b 	mla	r2, r9, fp, r2
 800d3e0:	4492      	add	sl, r2
 800d3e2:	b289      	uxth	r1, r1
 800d3e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d3e8:	f84e 1b04 	str.w	r1, [lr], #4
 800d3ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d3f0:	f8be 1000 	ldrh.w	r1, [lr]
 800d3f4:	0c12      	lsrs	r2, r2, #16
 800d3f6:	fb09 1102 	mla	r1, r9, r2, r1
 800d3fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d3fe:	4567      	cmp	r7, ip
 800d400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d404:	d8e6      	bhi.n	800d3d4 <__multiply+0x10c>
 800d406:	9a01      	ldr	r2, [sp, #4]
 800d408:	50a9      	str	r1, [r5, r2]
 800d40a:	3504      	adds	r5, #4
 800d40c:	e79a      	b.n	800d344 <__multiply+0x7c>
 800d40e:	3e01      	subs	r6, #1
 800d410:	e79c      	b.n	800d34c <__multiply+0x84>
 800d412:	bf00      	nop
 800d414:	0800ea7f 	.word	0x0800ea7f
 800d418:	0800eaf0 	.word	0x0800eaf0

0800d41c <__pow5mult>:
 800d41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d420:	4615      	mov	r5, r2
 800d422:	f012 0203 	ands.w	r2, r2, #3
 800d426:	4606      	mov	r6, r0
 800d428:	460f      	mov	r7, r1
 800d42a:	d007      	beq.n	800d43c <__pow5mult+0x20>
 800d42c:	4c25      	ldr	r4, [pc, #148]	; (800d4c4 <__pow5mult+0xa8>)
 800d42e:	3a01      	subs	r2, #1
 800d430:	2300      	movs	r3, #0
 800d432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d436:	f7ff fe9b 	bl	800d170 <__multadd>
 800d43a:	4607      	mov	r7, r0
 800d43c:	10ad      	asrs	r5, r5, #2
 800d43e:	d03d      	beq.n	800d4bc <__pow5mult+0xa0>
 800d440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d442:	b97c      	cbnz	r4, 800d464 <__pow5mult+0x48>
 800d444:	2010      	movs	r0, #16
 800d446:	f7ff fe1b 	bl	800d080 <malloc>
 800d44a:	4602      	mov	r2, r0
 800d44c:	6270      	str	r0, [r6, #36]	; 0x24
 800d44e:	b928      	cbnz	r0, 800d45c <__pow5mult+0x40>
 800d450:	4b1d      	ldr	r3, [pc, #116]	; (800d4c8 <__pow5mult+0xac>)
 800d452:	481e      	ldr	r0, [pc, #120]	; (800d4cc <__pow5mult+0xb0>)
 800d454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d458:	f000 fe7e 	bl	800e158 <__assert_func>
 800d45c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d460:	6004      	str	r4, [r0, #0]
 800d462:	60c4      	str	r4, [r0, #12]
 800d464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d46c:	b94c      	cbnz	r4, 800d482 <__pow5mult+0x66>
 800d46e:	f240 2171 	movw	r1, #625	; 0x271
 800d472:	4630      	mov	r0, r6
 800d474:	f7ff ff12 	bl	800d29c <__i2b>
 800d478:	2300      	movs	r3, #0
 800d47a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d47e:	4604      	mov	r4, r0
 800d480:	6003      	str	r3, [r0, #0]
 800d482:	f04f 0900 	mov.w	r9, #0
 800d486:	07eb      	lsls	r3, r5, #31
 800d488:	d50a      	bpl.n	800d4a0 <__pow5mult+0x84>
 800d48a:	4639      	mov	r1, r7
 800d48c:	4622      	mov	r2, r4
 800d48e:	4630      	mov	r0, r6
 800d490:	f7ff ff1a 	bl	800d2c8 <__multiply>
 800d494:	4639      	mov	r1, r7
 800d496:	4680      	mov	r8, r0
 800d498:	4630      	mov	r0, r6
 800d49a:	f7ff fe47 	bl	800d12c <_Bfree>
 800d49e:	4647      	mov	r7, r8
 800d4a0:	106d      	asrs	r5, r5, #1
 800d4a2:	d00b      	beq.n	800d4bc <__pow5mult+0xa0>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	b938      	cbnz	r0, 800d4b8 <__pow5mult+0x9c>
 800d4a8:	4622      	mov	r2, r4
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7ff ff0b 	bl	800d2c8 <__multiply>
 800d4b2:	6020      	str	r0, [r4, #0]
 800d4b4:	f8c0 9000 	str.w	r9, [r0]
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	e7e4      	b.n	800d486 <__pow5mult+0x6a>
 800d4bc:	4638      	mov	r0, r7
 800d4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4c2:	bf00      	nop
 800d4c4:	0800ec40 	.word	0x0800ec40
 800d4c8:	0800ea0d 	.word	0x0800ea0d
 800d4cc:	0800eaf0 	.word	0x0800eaf0

0800d4d0 <__lshift>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	6849      	ldr	r1, [r1, #4]
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	4691      	mov	r9, r2
 800d4e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4e8:	f108 0601 	add.w	r6, r8, #1
 800d4ec:	42b3      	cmp	r3, r6
 800d4ee:	db0b      	blt.n	800d508 <__lshift+0x38>
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7ff fddb 	bl	800d0ac <_Balloc>
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	b948      	cbnz	r0, 800d50e <__lshift+0x3e>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	4b2a      	ldr	r3, [pc, #168]	; (800d5a8 <__lshift+0xd8>)
 800d4fe:	482b      	ldr	r0, [pc, #172]	; (800d5ac <__lshift+0xdc>)
 800d500:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d504:	f000 fe28 	bl	800e158 <__assert_func>
 800d508:	3101      	adds	r1, #1
 800d50a:	005b      	lsls	r3, r3, #1
 800d50c:	e7ee      	b.n	800d4ec <__lshift+0x1c>
 800d50e:	2300      	movs	r3, #0
 800d510:	f100 0114 	add.w	r1, r0, #20
 800d514:	f100 0210 	add.w	r2, r0, #16
 800d518:	4618      	mov	r0, r3
 800d51a:	4553      	cmp	r3, sl
 800d51c:	db37      	blt.n	800d58e <__lshift+0xbe>
 800d51e:	6920      	ldr	r0, [r4, #16]
 800d520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d524:	f104 0314 	add.w	r3, r4, #20
 800d528:	f019 091f 	ands.w	r9, r9, #31
 800d52c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d530:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d534:	d02f      	beq.n	800d596 <__lshift+0xc6>
 800d536:	f1c9 0e20 	rsb	lr, r9, #32
 800d53a:	468a      	mov	sl, r1
 800d53c:	f04f 0c00 	mov.w	ip, #0
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	fa02 f209 	lsl.w	r2, r2, r9
 800d546:	ea42 020c 	orr.w	r2, r2, ip
 800d54a:	f84a 2b04 	str.w	r2, [sl], #4
 800d54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d552:	4298      	cmp	r0, r3
 800d554:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d558:	d8f2      	bhi.n	800d540 <__lshift+0x70>
 800d55a:	1b03      	subs	r3, r0, r4
 800d55c:	3b15      	subs	r3, #21
 800d55e:	f023 0303 	bic.w	r3, r3, #3
 800d562:	3304      	adds	r3, #4
 800d564:	f104 0215 	add.w	r2, r4, #21
 800d568:	4290      	cmp	r0, r2
 800d56a:	bf38      	it	cc
 800d56c:	2304      	movcc	r3, #4
 800d56e:	f841 c003 	str.w	ip, [r1, r3]
 800d572:	f1bc 0f00 	cmp.w	ip, #0
 800d576:	d001      	beq.n	800d57c <__lshift+0xac>
 800d578:	f108 0602 	add.w	r6, r8, #2
 800d57c:	3e01      	subs	r6, #1
 800d57e:	4638      	mov	r0, r7
 800d580:	612e      	str	r6, [r5, #16]
 800d582:	4621      	mov	r1, r4
 800d584:	f7ff fdd2 	bl	800d12c <_Bfree>
 800d588:	4628      	mov	r0, r5
 800d58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d592:	3301      	adds	r3, #1
 800d594:	e7c1      	b.n	800d51a <__lshift+0x4a>
 800d596:	3904      	subs	r1, #4
 800d598:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5a0:	4298      	cmp	r0, r3
 800d5a2:	d8f9      	bhi.n	800d598 <__lshift+0xc8>
 800d5a4:	e7ea      	b.n	800d57c <__lshift+0xac>
 800d5a6:	bf00      	nop
 800d5a8:	0800ea7f 	.word	0x0800ea7f
 800d5ac:	0800eaf0 	.word	0x0800eaf0

0800d5b0 <__mcmp>:
 800d5b0:	b530      	push	{r4, r5, lr}
 800d5b2:	6902      	ldr	r2, [r0, #16]
 800d5b4:	690c      	ldr	r4, [r1, #16]
 800d5b6:	1b12      	subs	r2, r2, r4
 800d5b8:	d10e      	bne.n	800d5d8 <__mcmp+0x28>
 800d5ba:	f100 0314 	add.w	r3, r0, #20
 800d5be:	3114      	adds	r1, #20
 800d5c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5d0:	42a5      	cmp	r5, r4
 800d5d2:	d003      	beq.n	800d5dc <__mcmp+0x2c>
 800d5d4:	d305      	bcc.n	800d5e2 <__mcmp+0x32>
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4610      	mov	r0, r2
 800d5da:	bd30      	pop	{r4, r5, pc}
 800d5dc:	4283      	cmp	r3, r0
 800d5de:	d3f3      	bcc.n	800d5c8 <__mcmp+0x18>
 800d5e0:	e7fa      	b.n	800d5d8 <__mcmp+0x28>
 800d5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e6:	e7f7      	b.n	800d5d8 <__mcmp+0x28>

0800d5e8 <__mdiff>:
 800d5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	4690      	mov	r8, r2
 800d5f6:	f7ff ffdb 	bl	800d5b0 <__mcmp>
 800d5fa:	1e05      	subs	r5, r0, #0
 800d5fc:	d110      	bne.n	800d620 <__mdiff+0x38>
 800d5fe:	4629      	mov	r1, r5
 800d600:	4630      	mov	r0, r6
 800d602:	f7ff fd53 	bl	800d0ac <_Balloc>
 800d606:	b930      	cbnz	r0, 800d616 <__mdiff+0x2e>
 800d608:	4b3a      	ldr	r3, [pc, #232]	; (800d6f4 <__mdiff+0x10c>)
 800d60a:	4602      	mov	r2, r0
 800d60c:	f240 2132 	movw	r1, #562	; 0x232
 800d610:	4839      	ldr	r0, [pc, #228]	; (800d6f8 <__mdiff+0x110>)
 800d612:	f000 fda1 	bl	800e158 <__assert_func>
 800d616:	2301      	movs	r3, #1
 800d618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d61c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d620:	bfa4      	itt	ge
 800d622:	4643      	movge	r3, r8
 800d624:	46a0      	movge	r8, r4
 800d626:	4630      	mov	r0, r6
 800d628:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d62c:	bfa6      	itte	ge
 800d62e:	461c      	movge	r4, r3
 800d630:	2500      	movge	r5, #0
 800d632:	2501      	movlt	r5, #1
 800d634:	f7ff fd3a 	bl	800d0ac <_Balloc>
 800d638:	b920      	cbnz	r0, 800d644 <__mdiff+0x5c>
 800d63a:	4b2e      	ldr	r3, [pc, #184]	; (800d6f4 <__mdiff+0x10c>)
 800d63c:	4602      	mov	r2, r0
 800d63e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d642:	e7e5      	b.n	800d610 <__mdiff+0x28>
 800d644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d648:	6926      	ldr	r6, [r4, #16]
 800d64a:	60c5      	str	r5, [r0, #12]
 800d64c:	f104 0914 	add.w	r9, r4, #20
 800d650:	f108 0514 	add.w	r5, r8, #20
 800d654:	f100 0e14 	add.w	lr, r0, #20
 800d658:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d65c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d660:	f108 0210 	add.w	r2, r8, #16
 800d664:	46f2      	mov	sl, lr
 800d666:	2100      	movs	r1, #0
 800d668:	f859 3b04 	ldr.w	r3, [r9], #4
 800d66c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d670:	fa1f f883 	uxth.w	r8, r3
 800d674:	fa11 f18b 	uxtah	r1, r1, fp
 800d678:	0c1b      	lsrs	r3, r3, #16
 800d67a:	eba1 0808 	sub.w	r8, r1, r8
 800d67e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d686:	fa1f f888 	uxth.w	r8, r8
 800d68a:	1419      	asrs	r1, r3, #16
 800d68c:	454e      	cmp	r6, r9
 800d68e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d692:	f84a 3b04 	str.w	r3, [sl], #4
 800d696:	d8e7      	bhi.n	800d668 <__mdiff+0x80>
 800d698:	1b33      	subs	r3, r6, r4
 800d69a:	3b15      	subs	r3, #21
 800d69c:	f023 0303 	bic.w	r3, r3, #3
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	3415      	adds	r4, #21
 800d6a4:	42a6      	cmp	r6, r4
 800d6a6:	bf38      	it	cc
 800d6a8:	2304      	movcc	r3, #4
 800d6aa:	441d      	add	r5, r3
 800d6ac:	4473      	add	r3, lr
 800d6ae:	469e      	mov	lr, r3
 800d6b0:	462e      	mov	r6, r5
 800d6b2:	4566      	cmp	r6, ip
 800d6b4:	d30e      	bcc.n	800d6d4 <__mdiff+0xec>
 800d6b6:	f10c 0203 	add.w	r2, ip, #3
 800d6ba:	1b52      	subs	r2, r2, r5
 800d6bc:	f022 0203 	bic.w	r2, r2, #3
 800d6c0:	3d03      	subs	r5, #3
 800d6c2:	45ac      	cmp	ip, r5
 800d6c4:	bf38      	it	cc
 800d6c6:	2200      	movcc	r2, #0
 800d6c8:	441a      	add	r2, r3
 800d6ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6ce:	b17b      	cbz	r3, 800d6f0 <__mdiff+0x108>
 800d6d0:	6107      	str	r7, [r0, #16]
 800d6d2:	e7a3      	b.n	800d61c <__mdiff+0x34>
 800d6d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6d8:	fa11 f288 	uxtah	r2, r1, r8
 800d6dc:	1414      	asrs	r4, r2, #16
 800d6de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6e2:	b292      	uxth	r2, r2
 800d6e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d6e8:	f84e 2b04 	str.w	r2, [lr], #4
 800d6ec:	1421      	asrs	r1, r4, #16
 800d6ee:	e7e0      	b.n	800d6b2 <__mdiff+0xca>
 800d6f0:	3f01      	subs	r7, #1
 800d6f2:	e7ea      	b.n	800d6ca <__mdiff+0xe2>
 800d6f4:	0800ea7f 	.word	0x0800ea7f
 800d6f8:	0800eaf0 	.word	0x0800eaf0

0800d6fc <__d2b>:
 800d6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d700:	4689      	mov	r9, r1
 800d702:	2101      	movs	r1, #1
 800d704:	ec57 6b10 	vmov	r6, r7, d0
 800d708:	4690      	mov	r8, r2
 800d70a:	f7ff fccf 	bl	800d0ac <_Balloc>
 800d70e:	4604      	mov	r4, r0
 800d710:	b930      	cbnz	r0, 800d720 <__d2b+0x24>
 800d712:	4602      	mov	r2, r0
 800d714:	4b25      	ldr	r3, [pc, #148]	; (800d7ac <__d2b+0xb0>)
 800d716:	4826      	ldr	r0, [pc, #152]	; (800d7b0 <__d2b+0xb4>)
 800d718:	f240 310a 	movw	r1, #778	; 0x30a
 800d71c:	f000 fd1c 	bl	800e158 <__assert_func>
 800d720:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d724:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d728:	bb35      	cbnz	r5, 800d778 <__d2b+0x7c>
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	d028      	beq.n	800d782 <__d2b+0x86>
 800d730:	4668      	mov	r0, sp
 800d732:	9600      	str	r6, [sp, #0]
 800d734:	f7ff fd82 	bl	800d23c <__lo0bits>
 800d738:	9900      	ldr	r1, [sp, #0]
 800d73a:	b300      	cbz	r0, 800d77e <__d2b+0x82>
 800d73c:	9a01      	ldr	r2, [sp, #4]
 800d73e:	f1c0 0320 	rsb	r3, r0, #32
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	430b      	orrs	r3, r1
 800d748:	40c2      	lsrs	r2, r0
 800d74a:	6163      	str	r3, [r4, #20]
 800d74c:	9201      	str	r2, [sp, #4]
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	61a3      	str	r3, [r4, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	bf14      	ite	ne
 800d756:	2202      	movne	r2, #2
 800d758:	2201      	moveq	r2, #1
 800d75a:	6122      	str	r2, [r4, #16]
 800d75c:	b1d5      	cbz	r5, 800d794 <__d2b+0x98>
 800d75e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d762:	4405      	add	r5, r0
 800d764:	f8c9 5000 	str.w	r5, [r9]
 800d768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d76c:	f8c8 0000 	str.w	r0, [r8]
 800d770:	4620      	mov	r0, r4
 800d772:	b003      	add	sp, #12
 800d774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d77c:	e7d5      	b.n	800d72a <__d2b+0x2e>
 800d77e:	6161      	str	r1, [r4, #20]
 800d780:	e7e5      	b.n	800d74e <__d2b+0x52>
 800d782:	a801      	add	r0, sp, #4
 800d784:	f7ff fd5a 	bl	800d23c <__lo0bits>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	6163      	str	r3, [r4, #20]
 800d78c:	2201      	movs	r2, #1
 800d78e:	6122      	str	r2, [r4, #16]
 800d790:	3020      	adds	r0, #32
 800d792:	e7e3      	b.n	800d75c <__d2b+0x60>
 800d794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d79c:	f8c9 0000 	str.w	r0, [r9]
 800d7a0:	6918      	ldr	r0, [r3, #16]
 800d7a2:	f7ff fd2b 	bl	800d1fc <__hi0bits>
 800d7a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7aa:	e7df      	b.n	800d76c <__d2b+0x70>
 800d7ac:	0800ea7f 	.word	0x0800ea7f
 800d7b0:	0800eaf0 	.word	0x0800eaf0

0800d7b4 <_calloc_r>:
 800d7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7b6:	fba1 2402 	umull	r2, r4, r1, r2
 800d7ba:	b94c      	cbnz	r4, 800d7d0 <_calloc_r+0x1c>
 800d7bc:	4611      	mov	r1, r2
 800d7be:	9201      	str	r2, [sp, #4]
 800d7c0:	f000 f87a 	bl	800d8b8 <_malloc_r>
 800d7c4:	9a01      	ldr	r2, [sp, #4]
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	b930      	cbnz	r0, 800d7d8 <_calloc_r+0x24>
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	b003      	add	sp, #12
 800d7ce:	bd30      	pop	{r4, r5, pc}
 800d7d0:	220c      	movs	r2, #12
 800d7d2:	6002      	str	r2, [r0, #0]
 800d7d4:	2500      	movs	r5, #0
 800d7d6:	e7f8      	b.n	800d7ca <_calloc_r+0x16>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	f7fe f81b 	bl	800b814 <memset>
 800d7de:	e7f4      	b.n	800d7ca <_calloc_r+0x16>

0800d7e0 <_free_r>:
 800d7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7e2:	2900      	cmp	r1, #0
 800d7e4:	d044      	beq.n	800d870 <_free_r+0x90>
 800d7e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ea:	9001      	str	r0, [sp, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f1a1 0404 	sub.w	r4, r1, #4
 800d7f2:	bfb8      	it	lt
 800d7f4:	18e4      	addlt	r4, r4, r3
 800d7f6:	f000 fe55 	bl	800e4a4 <__malloc_lock>
 800d7fa:	4a1e      	ldr	r2, [pc, #120]	; (800d874 <_free_r+0x94>)
 800d7fc:	9801      	ldr	r0, [sp, #4]
 800d7fe:	6813      	ldr	r3, [r2, #0]
 800d800:	b933      	cbnz	r3, 800d810 <_free_r+0x30>
 800d802:	6063      	str	r3, [r4, #4]
 800d804:	6014      	str	r4, [r2, #0]
 800d806:	b003      	add	sp, #12
 800d808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d80c:	f000 be50 	b.w	800e4b0 <__malloc_unlock>
 800d810:	42a3      	cmp	r3, r4
 800d812:	d908      	bls.n	800d826 <_free_r+0x46>
 800d814:	6825      	ldr	r5, [r4, #0]
 800d816:	1961      	adds	r1, r4, r5
 800d818:	428b      	cmp	r3, r1
 800d81a:	bf01      	itttt	eq
 800d81c:	6819      	ldreq	r1, [r3, #0]
 800d81e:	685b      	ldreq	r3, [r3, #4]
 800d820:	1949      	addeq	r1, r1, r5
 800d822:	6021      	streq	r1, [r4, #0]
 800d824:	e7ed      	b.n	800d802 <_free_r+0x22>
 800d826:	461a      	mov	r2, r3
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	b10b      	cbz	r3, 800d830 <_free_r+0x50>
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d9fa      	bls.n	800d826 <_free_r+0x46>
 800d830:	6811      	ldr	r1, [r2, #0]
 800d832:	1855      	adds	r5, r2, r1
 800d834:	42a5      	cmp	r5, r4
 800d836:	d10b      	bne.n	800d850 <_free_r+0x70>
 800d838:	6824      	ldr	r4, [r4, #0]
 800d83a:	4421      	add	r1, r4
 800d83c:	1854      	adds	r4, r2, r1
 800d83e:	42a3      	cmp	r3, r4
 800d840:	6011      	str	r1, [r2, #0]
 800d842:	d1e0      	bne.n	800d806 <_free_r+0x26>
 800d844:	681c      	ldr	r4, [r3, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	6053      	str	r3, [r2, #4]
 800d84a:	4421      	add	r1, r4
 800d84c:	6011      	str	r1, [r2, #0]
 800d84e:	e7da      	b.n	800d806 <_free_r+0x26>
 800d850:	d902      	bls.n	800d858 <_free_r+0x78>
 800d852:	230c      	movs	r3, #12
 800d854:	6003      	str	r3, [r0, #0]
 800d856:	e7d6      	b.n	800d806 <_free_r+0x26>
 800d858:	6825      	ldr	r5, [r4, #0]
 800d85a:	1961      	adds	r1, r4, r5
 800d85c:	428b      	cmp	r3, r1
 800d85e:	bf04      	itt	eq
 800d860:	6819      	ldreq	r1, [r3, #0]
 800d862:	685b      	ldreq	r3, [r3, #4]
 800d864:	6063      	str	r3, [r4, #4]
 800d866:	bf04      	itt	eq
 800d868:	1949      	addeq	r1, r1, r5
 800d86a:	6021      	streq	r1, [r4, #0]
 800d86c:	6054      	str	r4, [r2, #4]
 800d86e:	e7ca      	b.n	800d806 <_free_r+0x26>
 800d870:	b003      	add	sp, #12
 800d872:	bd30      	pop	{r4, r5, pc}
 800d874:	20000dfc 	.word	0x20000dfc

0800d878 <sbrk_aligned>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	4e0e      	ldr	r6, [pc, #56]	; (800d8b4 <sbrk_aligned+0x3c>)
 800d87c:	460c      	mov	r4, r1
 800d87e:	6831      	ldr	r1, [r6, #0]
 800d880:	4605      	mov	r5, r0
 800d882:	b911      	cbnz	r1, 800d88a <sbrk_aligned+0x12>
 800d884:	f000 fb42 	bl	800df0c <_sbrk_r>
 800d888:	6030      	str	r0, [r6, #0]
 800d88a:	4621      	mov	r1, r4
 800d88c:	4628      	mov	r0, r5
 800d88e:	f000 fb3d 	bl	800df0c <_sbrk_r>
 800d892:	1c43      	adds	r3, r0, #1
 800d894:	d00a      	beq.n	800d8ac <sbrk_aligned+0x34>
 800d896:	1cc4      	adds	r4, r0, #3
 800d898:	f024 0403 	bic.w	r4, r4, #3
 800d89c:	42a0      	cmp	r0, r4
 800d89e:	d007      	beq.n	800d8b0 <sbrk_aligned+0x38>
 800d8a0:	1a21      	subs	r1, r4, r0
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f000 fb32 	bl	800df0c <_sbrk_r>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d101      	bne.n	800d8b0 <sbrk_aligned+0x38>
 800d8ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	20000e00 	.word	0x20000e00

0800d8b8 <_malloc_r>:
 800d8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8bc:	1ccd      	adds	r5, r1, #3
 800d8be:	f025 0503 	bic.w	r5, r5, #3
 800d8c2:	3508      	adds	r5, #8
 800d8c4:	2d0c      	cmp	r5, #12
 800d8c6:	bf38      	it	cc
 800d8c8:	250c      	movcc	r5, #12
 800d8ca:	2d00      	cmp	r5, #0
 800d8cc:	4607      	mov	r7, r0
 800d8ce:	db01      	blt.n	800d8d4 <_malloc_r+0x1c>
 800d8d0:	42a9      	cmp	r1, r5
 800d8d2:	d905      	bls.n	800d8e0 <_malloc_r+0x28>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	2600      	movs	r6, #0
 800d8da:	4630      	mov	r0, r6
 800d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e0:	4e2e      	ldr	r6, [pc, #184]	; (800d99c <_malloc_r+0xe4>)
 800d8e2:	f000 fddf 	bl	800e4a4 <__malloc_lock>
 800d8e6:	6833      	ldr	r3, [r6, #0]
 800d8e8:	461c      	mov	r4, r3
 800d8ea:	bb34      	cbnz	r4, 800d93a <_malloc_r+0x82>
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	f7ff ffc2 	bl	800d878 <sbrk_aligned>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	d14d      	bne.n	800d996 <_malloc_r+0xde>
 800d8fa:	6834      	ldr	r4, [r6, #0]
 800d8fc:	4626      	mov	r6, r4
 800d8fe:	2e00      	cmp	r6, #0
 800d900:	d140      	bne.n	800d984 <_malloc_r+0xcc>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	4631      	mov	r1, r6
 800d906:	4638      	mov	r0, r7
 800d908:	eb04 0803 	add.w	r8, r4, r3
 800d90c:	f000 fafe 	bl	800df0c <_sbrk_r>
 800d910:	4580      	cmp	r8, r0
 800d912:	d13a      	bne.n	800d98a <_malloc_r+0xd2>
 800d914:	6821      	ldr	r1, [r4, #0]
 800d916:	3503      	adds	r5, #3
 800d918:	1a6d      	subs	r5, r5, r1
 800d91a:	f025 0503 	bic.w	r5, r5, #3
 800d91e:	3508      	adds	r5, #8
 800d920:	2d0c      	cmp	r5, #12
 800d922:	bf38      	it	cc
 800d924:	250c      	movcc	r5, #12
 800d926:	4629      	mov	r1, r5
 800d928:	4638      	mov	r0, r7
 800d92a:	f7ff ffa5 	bl	800d878 <sbrk_aligned>
 800d92e:	3001      	adds	r0, #1
 800d930:	d02b      	beq.n	800d98a <_malloc_r+0xd2>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	442b      	add	r3, r5
 800d936:	6023      	str	r3, [r4, #0]
 800d938:	e00e      	b.n	800d958 <_malloc_r+0xa0>
 800d93a:	6822      	ldr	r2, [r4, #0]
 800d93c:	1b52      	subs	r2, r2, r5
 800d93e:	d41e      	bmi.n	800d97e <_malloc_r+0xc6>
 800d940:	2a0b      	cmp	r2, #11
 800d942:	d916      	bls.n	800d972 <_malloc_r+0xba>
 800d944:	1961      	adds	r1, r4, r5
 800d946:	42a3      	cmp	r3, r4
 800d948:	6025      	str	r5, [r4, #0]
 800d94a:	bf18      	it	ne
 800d94c:	6059      	strne	r1, [r3, #4]
 800d94e:	6863      	ldr	r3, [r4, #4]
 800d950:	bf08      	it	eq
 800d952:	6031      	streq	r1, [r6, #0]
 800d954:	5162      	str	r2, [r4, r5]
 800d956:	604b      	str	r3, [r1, #4]
 800d958:	4638      	mov	r0, r7
 800d95a:	f104 060b 	add.w	r6, r4, #11
 800d95e:	f000 fda7 	bl	800e4b0 <__malloc_unlock>
 800d962:	f026 0607 	bic.w	r6, r6, #7
 800d966:	1d23      	adds	r3, r4, #4
 800d968:	1af2      	subs	r2, r6, r3
 800d96a:	d0b6      	beq.n	800d8da <_malloc_r+0x22>
 800d96c:	1b9b      	subs	r3, r3, r6
 800d96e:	50a3      	str	r3, [r4, r2]
 800d970:	e7b3      	b.n	800d8da <_malloc_r+0x22>
 800d972:	6862      	ldr	r2, [r4, #4]
 800d974:	42a3      	cmp	r3, r4
 800d976:	bf0c      	ite	eq
 800d978:	6032      	streq	r2, [r6, #0]
 800d97a:	605a      	strne	r2, [r3, #4]
 800d97c:	e7ec      	b.n	800d958 <_malloc_r+0xa0>
 800d97e:	4623      	mov	r3, r4
 800d980:	6864      	ldr	r4, [r4, #4]
 800d982:	e7b2      	b.n	800d8ea <_malloc_r+0x32>
 800d984:	4634      	mov	r4, r6
 800d986:	6876      	ldr	r6, [r6, #4]
 800d988:	e7b9      	b.n	800d8fe <_malloc_r+0x46>
 800d98a:	230c      	movs	r3, #12
 800d98c:	603b      	str	r3, [r7, #0]
 800d98e:	4638      	mov	r0, r7
 800d990:	f000 fd8e 	bl	800e4b0 <__malloc_unlock>
 800d994:	e7a1      	b.n	800d8da <_malloc_r+0x22>
 800d996:	6025      	str	r5, [r4, #0]
 800d998:	e7de      	b.n	800d958 <_malloc_r+0xa0>
 800d99a:	bf00      	nop
 800d99c:	20000dfc 	.word	0x20000dfc

0800d9a0 <__ssputs_r>:
 800d9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a4:	688e      	ldr	r6, [r1, #8]
 800d9a6:	429e      	cmp	r6, r3
 800d9a8:	4682      	mov	sl, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	4690      	mov	r8, r2
 800d9ae:	461f      	mov	r7, r3
 800d9b0:	d838      	bhi.n	800da24 <__ssputs_r+0x84>
 800d9b2:	898a      	ldrh	r2, [r1, #12]
 800d9b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9b8:	d032      	beq.n	800da20 <__ssputs_r+0x80>
 800d9ba:	6825      	ldr	r5, [r4, #0]
 800d9bc:	6909      	ldr	r1, [r1, #16]
 800d9be:	eba5 0901 	sub.w	r9, r5, r1
 800d9c2:	6965      	ldr	r5, [r4, #20]
 800d9c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	444b      	add	r3, r9
 800d9d0:	106d      	asrs	r5, r5, #1
 800d9d2:	429d      	cmp	r5, r3
 800d9d4:	bf38      	it	cc
 800d9d6:	461d      	movcc	r5, r3
 800d9d8:	0553      	lsls	r3, r2, #21
 800d9da:	d531      	bpl.n	800da40 <__ssputs_r+0xa0>
 800d9dc:	4629      	mov	r1, r5
 800d9de:	f7ff ff6b 	bl	800d8b8 <_malloc_r>
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	b950      	cbnz	r0, 800d9fc <__ssputs_r+0x5c>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	f8ca 3000 	str.w	r3, [sl]
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fc:	6921      	ldr	r1, [r4, #16]
 800d9fe:	464a      	mov	r2, r9
 800da00:	f7ff fb46 	bl	800d090 <memcpy>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	6126      	str	r6, [r4, #16]
 800da12:	6165      	str	r5, [r4, #20]
 800da14:	444e      	add	r6, r9
 800da16:	eba5 0509 	sub.w	r5, r5, r9
 800da1a:	6026      	str	r6, [r4, #0]
 800da1c:	60a5      	str	r5, [r4, #8]
 800da1e:	463e      	mov	r6, r7
 800da20:	42be      	cmp	r6, r7
 800da22:	d900      	bls.n	800da26 <__ssputs_r+0x86>
 800da24:	463e      	mov	r6, r7
 800da26:	6820      	ldr	r0, [r4, #0]
 800da28:	4632      	mov	r2, r6
 800da2a:	4641      	mov	r1, r8
 800da2c:	f000 fd20 	bl	800e470 <memmove>
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	1b9b      	subs	r3, r3, r6
 800da34:	60a3      	str	r3, [r4, #8]
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	4433      	add	r3, r6
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	2000      	movs	r0, #0
 800da3e:	e7db      	b.n	800d9f8 <__ssputs_r+0x58>
 800da40:	462a      	mov	r2, r5
 800da42:	f000 fd3b 	bl	800e4bc <_realloc_r>
 800da46:	4606      	mov	r6, r0
 800da48:	2800      	cmp	r0, #0
 800da4a:	d1e1      	bne.n	800da10 <__ssputs_r+0x70>
 800da4c:	6921      	ldr	r1, [r4, #16]
 800da4e:	4650      	mov	r0, sl
 800da50:	f7ff fec6 	bl	800d7e0 <_free_r>
 800da54:	e7c7      	b.n	800d9e6 <__ssputs_r+0x46>
	...

0800da58 <_svfiprintf_r>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	4698      	mov	r8, r3
 800da5e:	898b      	ldrh	r3, [r1, #12]
 800da60:	061b      	lsls	r3, r3, #24
 800da62:	b09d      	sub	sp, #116	; 0x74
 800da64:	4607      	mov	r7, r0
 800da66:	460d      	mov	r5, r1
 800da68:	4614      	mov	r4, r2
 800da6a:	d50e      	bpl.n	800da8a <_svfiprintf_r+0x32>
 800da6c:	690b      	ldr	r3, [r1, #16]
 800da6e:	b963      	cbnz	r3, 800da8a <_svfiprintf_r+0x32>
 800da70:	2140      	movs	r1, #64	; 0x40
 800da72:	f7ff ff21 	bl	800d8b8 <_malloc_r>
 800da76:	6028      	str	r0, [r5, #0]
 800da78:	6128      	str	r0, [r5, #16]
 800da7a:	b920      	cbnz	r0, 800da86 <_svfiprintf_r+0x2e>
 800da7c:	230c      	movs	r3, #12
 800da7e:	603b      	str	r3, [r7, #0]
 800da80:	f04f 30ff 	mov.w	r0, #4294967295
 800da84:	e0d1      	b.n	800dc2a <_svfiprintf_r+0x1d2>
 800da86:	2340      	movs	r3, #64	; 0x40
 800da88:	616b      	str	r3, [r5, #20]
 800da8a:	2300      	movs	r3, #0
 800da8c:	9309      	str	r3, [sp, #36]	; 0x24
 800da8e:	2320      	movs	r3, #32
 800da90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da94:	f8cd 800c 	str.w	r8, [sp, #12]
 800da98:	2330      	movs	r3, #48	; 0x30
 800da9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc44 <_svfiprintf_r+0x1ec>
 800da9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa2:	f04f 0901 	mov.w	r9, #1
 800daa6:	4623      	mov	r3, r4
 800daa8:	469a      	mov	sl, r3
 800daaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daae:	b10a      	cbz	r2, 800dab4 <_svfiprintf_r+0x5c>
 800dab0:	2a25      	cmp	r2, #37	; 0x25
 800dab2:	d1f9      	bne.n	800daa8 <_svfiprintf_r+0x50>
 800dab4:	ebba 0b04 	subs.w	fp, sl, r4
 800dab8:	d00b      	beq.n	800dad2 <_svfiprintf_r+0x7a>
 800daba:	465b      	mov	r3, fp
 800dabc:	4622      	mov	r2, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7ff ff6d 	bl	800d9a0 <__ssputs_r>
 800dac6:	3001      	adds	r0, #1
 800dac8:	f000 80aa 	beq.w	800dc20 <_svfiprintf_r+0x1c8>
 800dacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dace:	445a      	add	r2, fp
 800dad0:	9209      	str	r2, [sp, #36]	; 0x24
 800dad2:	f89a 3000 	ldrb.w	r3, [sl]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	f000 80a2 	beq.w	800dc20 <_svfiprintf_r+0x1c8>
 800dadc:	2300      	movs	r3, #0
 800dade:	f04f 32ff 	mov.w	r2, #4294967295
 800dae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dae6:	f10a 0a01 	add.w	sl, sl, #1
 800daea:	9304      	str	r3, [sp, #16]
 800daec:	9307      	str	r3, [sp, #28]
 800daee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daf2:	931a      	str	r3, [sp, #104]	; 0x68
 800daf4:	4654      	mov	r4, sl
 800daf6:	2205      	movs	r2, #5
 800daf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafc:	4851      	ldr	r0, [pc, #324]	; (800dc44 <_svfiprintf_r+0x1ec>)
 800dafe:	f7f2 fb8f 	bl	8000220 <memchr>
 800db02:	9a04      	ldr	r2, [sp, #16]
 800db04:	b9d8      	cbnz	r0, 800db3e <_svfiprintf_r+0xe6>
 800db06:	06d0      	lsls	r0, r2, #27
 800db08:	bf44      	itt	mi
 800db0a:	2320      	movmi	r3, #32
 800db0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db10:	0711      	lsls	r1, r2, #28
 800db12:	bf44      	itt	mi
 800db14:	232b      	movmi	r3, #43	; 0x2b
 800db16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db1a:	f89a 3000 	ldrb.w	r3, [sl]
 800db1e:	2b2a      	cmp	r3, #42	; 0x2a
 800db20:	d015      	beq.n	800db4e <_svfiprintf_r+0xf6>
 800db22:	9a07      	ldr	r2, [sp, #28]
 800db24:	4654      	mov	r4, sl
 800db26:	2000      	movs	r0, #0
 800db28:	f04f 0c0a 	mov.w	ip, #10
 800db2c:	4621      	mov	r1, r4
 800db2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db32:	3b30      	subs	r3, #48	; 0x30
 800db34:	2b09      	cmp	r3, #9
 800db36:	d94e      	bls.n	800dbd6 <_svfiprintf_r+0x17e>
 800db38:	b1b0      	cbz	r0, 800db68 <_svfiprintf_r+0x110>
 800db3a:	9207      	str	r2, [sp, #28]
 800db3c:	e014      	b.n	800db68 <_svfiprintf_r+0x110>
 800db3e:	eba0 0308 	sub.w	r3, r0, r8
 800db42:	fa09 f303 	lsl.w	r3, r9, r3
 800db46:	4313      	orrs	r3, r2
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	46a2      	mov	sl, r4
 800db4c:	e7d2      	b.n	800daf4 <_svfiprintf_r+0x9c>
 800db4e:	9b03      	ldr	r3, [sp, #12]
 800db50:	1d19      	adds	r1, r3, #4
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	9103      	str	r1, [sp, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	bfbb      	ittet	lt
 800db5a:	425b      	neglt	r3, r3
 800db5c:	f042 0202 	orrlt.w	r2, r2, #2
 800db60:	9307      	strge	r3, [sp, #28]
 800db62:	9307      	strlt	r3, [sp, #28]
 800db64:	bfb8      	it	lt
 800db66:	9204      	strlt	r2, [sp, #16]
 800db68:	7823      	ldrb	r3, [r4, #0]
 800db6a:	2b2e      	cmp	r3, #46	; 0x2e
 800db6c:	d10c      	bne.n	800db88 <_svfiprintf_r+0x130>
 800db6e:	7863      	ldrb	r3, [r4, #1]
 800db70:	2b2a      	cmp	r3, #42	; 0x2a
 800db72:	d135      	bne.n	800dbe0 <_svfiprintf_r+0x188>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	1d1a      	adds	r2, r3, #4
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	9203      	str	r2, [sp, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	bfb8      	it	lt
 800db80:	f04f 33ff 	movlt.w	r3, #4294967295
 800db84:	3402      	adds	r4, #2
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc54 <_svfiprintf_r+0x1fc>
 800db8c:	7821      	ldrb	r1, [r4, #0]
 800db8e:	2203      	movs	r2, #3
 800db90:	4650      	mov	r0, sl
 800db92:	f7f2 fb45 	bl	8000220 <memchr>
 800db96:	b140      	cbz	r0, 800dbaa <_svfiprintf_r+0x152>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	eba0 000a 	sub.w	r0, r0, sl
 800db9e:	fa03 f000 	lsl.w	r0, r3, r0
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	4303      	orrs	r3, r0
 800dba6:	3401      	adds	r4, #1
 800dba8:	9304      	str	r3, [sp, #16]
 800dbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbae:	4826      	ldr	r0, [pc, #152]	; (800dc48 <_svfiprintf_r+0x1f0>)
 800dbb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbb4:	2206      	movs	r2, #6
 800dbb6:	f7f2 fb33 	bl	8000220 <memchr>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d038      	beq.n	800dc30 <_svfiprintf_r+0x1d8>
 800dbbe:	4b23      	ldr	r3, [pc, #140]	; (800dc4c <_svfiprintf_r+0x1f4>)
 800dbc0:	bb1b      	cbnz	r3, 800dc0a <_svfiprintf_r+0x1b2>
 800dbc2:	9b03      	ldr	r3, [sp, #12]
 800dbc4:	3307      	adds	r3, #7
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	3308      	adds	r3, #8
 800dbcc:	9303      	str	r3, [sp, #12]
 800dbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd0:	4433      	add	r3, r6
 800dbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd4:	e767      	b.n	800daa6 <_svfiprintf_r+0x4e>
 800dbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbda:	460c      	mov	r4, r1
 800dbdc:	2001      	movs	r0, #1
 800dbde:	e7a5      	b.n	800db2c <_svfiprintf_r+0xd4>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	3401      	adds	r4, #1
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	f04f 0c0a 	mov.w	ip, #10
 800dbec:	4620      	mov	r0, r4
 800dbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf2:	3a30      	subs	r2, #48	; 0x30
 800dbf4:	2a09      	cmp	r2, #9
 800dbf6:	d903      	bls.n	800dc00 <_svfiprintf_r+0x1a8>
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d0c5      	beq.n	800db88 <_svfiprintf_r+0x130>
 800dbfc:	9105      	str	r1, [sp, #20]
 800dbfe:	e7c3      	b.n	800db88 <_svfiprintf_r+0x130>
 800dc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc04:	4604      	mov	r4, r0
 800dc06:	2301      	movs	r3, #1
 800dc08:	e7f0      	b.n	800dbec <_svfiprintf_r+0x194>
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462a      	mov	r2, r5
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <_svfiprintf_r+0x1f8>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7fd fea5 	bl	800b964 <_printf_float>
 800dc1a:	1c42      	adds	r2, r0, #1
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	d1d6      	bne.n	800dbce <_svfiprintf_r+0x176>
 800dc20:	89ab      	ldrh	r3, [r5, #12]
 800dc22:	065b      	lsls	r3, r3, #25
 800dc24:	f53f af2c 	bmi.w	800da80 <_svfiprintf_r+0x28>
 800dc28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2a:	b01d      	add	sp, #116	; 0x74
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc30:	ab03      	add	r3, sp, #12
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	462a      	mov	r2, r5
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <_svfiprintf_r+0x1f8>)
 800dc38:	a904      	add	r1, sp, #16
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	f7fe f936 	bl	800beac <_printf_i>
 800dc40:	e7eb      	b.n	800dc1a <_svfiprintf_r+0x1c2>
 800dc42:	bf00      	nop
 800dc44:	0800ec4c 	.word	0x0800ec4c
 800dc48:	0800ec56 	.word	0x0800ec56
 800dc4c:	0800b965 	.word	0x0800b965
 800dc50:	0800d9a1 	.word	0x0800d9a1
 800dc54:	0800ec52 	.word	0x0800ec52

0800dc58 <__sfputc_r>:
 800dc58:	6893      	ldr	r3, [r2, #8]
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	b410      	push	{r4}
 800dc60:	6093      	str	r3, [r2, #8]
 800dc62:	da08      	bge.n	800dc76 <__sfputc_r+0x1e>
 800dc64:	6994      	ldr	r4, [r2, #24]
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	db01      	blt.n	800dc6e <__sfputc_r+0x16>
 800dc6a:	290a      	cmp	r1, #10
 800dc6c:	d103      	bne.n	800dc76 <__sfputc_r+0x1e>
 800dc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc72:	f000 b99f 	b.w	800dfb4 <__swbuf_r>
 800dc76:	6813      	ldr	r3, [r2, #0]
 800dc78:	1c58      	adds	r0, r3, #1
 800dc7a:	6010      	str	r0, [r2, #0]
 800dc7c:	7019      	strb	r1, [r3, #0]
 800dc7e:	4608      	mov	r0, r1
 800dc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <__sfputs_r>:
 800dc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc88:	4606      	mov	r6, r0
 800dc8a:	460f      	mov	r7, r1
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	18d5      	adds	r5, r2, r3
 800dc90:	42ac      	cmp	r4, r5
 800dc92:	d101      	bne.n	800dc98 <__sfputs_r+0x12>
 800dc94:	2000      	movs	r0, #0
 800dc96:	e007      	b.n	800dca8 <__sfputs_r+0x22>
 800dc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9c:	463a      	mov	r2, r7
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff ffda 	bl	800dc58 <__sfputc_r>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d1f3      	bne.n	800dc90 <__sfputs_r+0xa>
 800dca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcac <_vfiprintf_r>:
 800dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	b09d      	sub	sp, #116	; 0x74
 800dcb4:	4614      	mov	r4, r2
 800dcb6:	4698      	mov	r8, r3
 800dcb8:	4606      	mov	r6, r0
 800dcba:	b118      	cbz	r0, 800dcc4 <_vfiprintf_r+0x18>
 800dcbc:	6983      	ldr	r3, [r0, #24]
 800dcbe:	b90b      	cbnz	r3, 800dcc4 <_vfiprintf_r+0x18>
 800dcc0:	f7ff f938 	bl	800cf34 <__sinit>
 800dcc4:	4b89      	ldr	r3, [pc, #548]	; (800deec <_vfiprintf_r+0x240>)
 800dcc6:	429d      	cmp	r5, r3
 800dcc8:	d11b      	bne.n	800dd02 <_vfiprintf_r+0x56>
 800dcca:	6875      	ldr	r5, [r6, #4]
 800dccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcce:	07d9      	lsls	r1, r3, #31
 800dcd0:	d405      	bmi.n	800dcde <_vfiprintf_r+0x32>
 800dcd2:	89ab      	ldrh	r3, [r5, #12]
 800dcd4:	059a      	lsls	r2, r3, #22
 800dcd6:	d402      	bmi.n	800dcde <_vfiprintf_r+0x32>
 800dcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcda:	f7ff f9ce 	bl	800d07a <__retarget_lock_acquire_recursive>
 800dcde:	89ab      	ldrh	r3, [r5, #12]
 800dce0:	071b      	lsls	r3, r3, #28
 800dce2:	d501      	bpl.n	800dce8 <_vfiprintf_r+0x3c>
 800dce4:	692b      	ldr	r3, [r5, #16]
 800dce6:	b9eb      	cbnz	r3, 800dd24 <_vfiprintf_r+0x78>
 800dce8:	4629      	mov	r1, r5
 800dcea:	4630      	mov	r0, r6
 800dcec:	f000 f9c6 	bl	800e07c <__swsetup_r>
 800dcf0:	b1c0      	cbz	r0, 800dd24 <_vfiprintf_r+0x78>
 800dcf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcf4:	07dc      	lsls	r4, r3, #31
 800dcf6:	d50e      	bpl.n	800dd16 <_vfiprintf_r+0x6a>
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfc:	b01d      	add	sp, #116	; 0x74
 800dcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd02:	4b7b      	ldr	r3, [pc, #492]	; (800def0 <_vfiprintf_r+0x244>)
 800dd04:	429d      	cmp	r5, r3
 800dd06:	d101      	bne.n	800dd0c <_vfiprintf_r+0x60>
 800dd08:	68b5      	ldr	r5, [r6, #8]
 800dd0a:	e7df      	b.n	800dccc <_vfiprintf_r+0x20>
 800dd0c:	4b79      	ldr	r3, [pc, #484]	; (800def4 <_vfiprintf_r+0x248>)
 800dd0e:	429d      	cmp	r5, r3
 800dd10:	bf08      	it	eq
 800dd12:	68f5      	ldreq	r5, [r6, #12]
 800dd14:	e7da      	b.n	800dccc <_vfiprintf_r+0x20>
 800dd16:	89ab      	ldrh	r3, [r5, #12]
 800dd18:	0598      	lsls	r0, r3, #22
 800dd1a:	d4ed      	bmi.n	800dcf8 <_vfiprintf_r+0x4c>
 800dd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd1e:	f7ff f9ad 	bl	800d07c <__retarget_lock_release_recursive>
 800dd22:	e7e9      	b.n	800dcf8 <_vfiprintf_r+0x4c>
 800dd24:	2300      	movs	r3, #0
 800dd26:	9309      	str	r3, [sp, #36]	; 0x24
 800dd28:	2320      	movs	r3, #32
 800dd2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd32:	2330      	movs	r3, #48	; 0x30
 800dd34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800def8 <_vfiprintf_r+0x24c>
 800dd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd3c:	f04f 0901 	mov.w	r9, #1
 800dd40:	4623      	mov	r3, r4
 800dd42:	469a      	mov	sl, r3
 800dd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd48:	b10a      	cbz	r2, 800dd4e <_vfiprintf_r+0xa2>
 800dd4a:	2a25      	cmp	r2, #37	; 0x25
 800dd4c:	d1f9      	bne.n	800dd42 <_vfiprintf_r+0x96>
 800dd4e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd52:	d00b      	beq.n	800dd6c <_vfiprintf_r+0xc0>
 800dd54:	465b      	mov	r3, fp
 800dd56:	4622      	mov	r2, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7ff ff93 	bl	800dc86 <__sfputs_r>
 800dd60:	3001      	adds	r0, #1
 800dd62:	f000 80aa 	beq.w	800deba <_vfiprintf_r+0x20e>
 800dd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd68:	445a      	add	r2, fp
 800dd6a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 80a2 	beq.w	800deba <_vfiprintf_r+0x20e>
 800dd76:	2300      	movs	r3, #0
 800dd78:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd80:	f10a 0a01 	add.w	sl, sl, #1
 800dd84:	9304      	str	r3, [sp, #16]
 800dd86:	9307      	str	r3, [sp, #28]
 800dd88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd8c:	931a      	str	r3, [sp, #104]	; 0x68
 800dd8e:	4654      	mov	r4, sl
 800dd90:	2205      	movs	r2, #5
 800dd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd96:	4858      	ldr	r0, [pc, #352]	; (800def8 <_vfiprintf_r+0x24c>)
 800dd98:	f7f2 fa42 	bl	8000220 <memchr>
 800dd9c:	9a04      	ldr	r2, [sp, #16]
 800dd9e:	b9d8      	cbnz	r0, 800ddd8 <_vfiprintf_r+0x12c>
 800dda0:	06d1      	lsls	r1, r2, #27
 800dda2:	bf44      	itt	mi
 800dda4:	2320      	movmi	r3, #32
 800dda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddaa:	0713      	lsls	r3, r2, #28
 800ddac:	bf44      	itt	mi
 800ddae:	232b      	movmi	r3, #43	; 0x2b
 800ddb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddba:	d015      	beq.n	800dde8 <_vfiprintf_r+0x13c>
 800ddbc:	9a07      	ldr	r2, [sp, #28]
 800ddbe:	4654      	mov	r4, sl
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	f04f 0c0a 	mov.w	ip, #10
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddcc:	3b30      	subs	r3, #48	; 0x30
 800ddce:	2b09      	cmp	r3, #9
 800ddd0:	d94e      	bls.n	800de70 <_vfiprintf_r+0x1c4>
 800ddd2:	b1b0      	cbz	r0, 800de02 <_vfiprintf_r+0x156>
 800ddd4:	9207      	str	r2, [sp, #28]
 800ddd6:	e014      	b.n	800de02 <_vfiprintf_r+0x156>
 800ddd8:	eba0 0308 	sub.w	r3, r0, r8
 800dddc:	fa09 f303 	lsl.w	r3, r9, r3
 800dde0:	4313      	orrs	r3, r2
 800dde2:	9304      	str	r3, [sp, #16]
 800dde4:	46a2      	mov	sl, r4
 800dde6:	e7d2      	b.n	800dd8e <_vfiprintf_r+0xe2>
 800dde8:	9b03      	ldr	r3, [sp, #12]
 800ddea:	1d19      	adds	r1, r3, #4
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	9103      	str	r1, [sp, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfbb      	ittet	lt
 800ddf4:	425b      	neglt	r3, r3
 800ddf6:	f042 0202 	orrlt.w	r2, r2, #2
 800ddfa:	9307      	strge	r3, [sp, #28]
 800ddfc:	9307      	strlt	r3, [sp, #28]
 800ddfe:	bfb8      	it	lt
 800de00:	9204      	strlt	r2, [sp, #16]
 800de02:	7823      	ldrb	r3, [r4, #0]
 800de04:	2b2e      	cmp	r3, #46	; 0x2e
 800de06:	d10c      	bne.n	800de22 <_vfiprintf_r+0x176>
 800de08:	7863      	ldrb	r3, [r4, #1]
 800de0a:	2b2a      	cmp	r3, #42	; 0x2a
 800de0c:	d135      	bne.n	800de7a <_vfiprintf_r+0x1ce>
 800de0e:	9b03      	ldr	r3, [sp, #12]
 800de10:	1d1a      	adds	r2, r3, #4
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	9203      	str	r2, [sp, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfb8      	it	lt
 800de1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de1e:	3402      	adds	r4, #2
 800de20:	9305      	str	r3, [sp, #20]
 800de22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df08 <_vfiprintf_r+0x25c>
 800de26:	7821      	ldrb	r1, [r4, #0]
 800de28:	2203      	movs	r2, #3
 800de2a:	4650      	mov	r0, sl
 800de2c:	f7f2 f9f8 	bl	8000220 <memchr>
 800de30:	b140      	cbz	r0, 800de44 <_vfiprintf_r+0x198>
 800de32:	2340      	movs	r3, #64	; 0x40
 800de34:	eba0 000a 	sub.w	r0, r0, sl
 800de38:	fa03 f000 	lsl.w	r0, r3, r0
 800de3c:	9b04      	ldr	r3, [sp, #16]
 800de3e:	4303      	orrs	r3, r0
 800de40:	3401      	adds	r4, #1
 800de42:	9304      	str	r3, [sp, #16]
 800de44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de48:	482c      	ldr	r0, [pc, #176]	; (800defc <_vfiprintf_r+0x250>)
 800de4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de4e:	2206      	movs	r2, #6
 800de50:	f7f2 f9e6 	bl	8000220 <memchr>
 800de54:	2800      	cmp	r0, #0
 800de56:	d03f      	beq.n	800ded8 <_vfiprintf_r+0x22c>
 800de58:	4b29      	ldr	r3, [pc, #164]	; (800df00 <_vfiprintf_r+0x254>)
 800de5a:	bb1b      	cbnz	r3, 800dea4 <_vfiprintf_r+0x1f8>
 800de5c:	9b03      	ldr	r3, [sp, #12]
 800de5e:	3307      	adds	r3, #7
 800de60:	f023 0307 	bic.w	r3, r3, #7
 800de64:	3308      	adds	r3, #8
 800de66:	9303      	str	r3, [sp, #12]
 800de68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de6a:	443b      	add	r3, r7
 800de6c:	9309      	str	r3, [sp, #36]	; 0x24
 800de6e:	e767      	b.n	800dd40 <_vfiprintf_r+0x94>
 800de70:	fb0c 3202 	mla	r2, ip, r2, r3
 800de74:	460c      	mov	r4, r1
 800de76:	2001      	movs	r0, #1
 800de78:	e7a5      	b.n	800ddc6 <_vfiprintf_r+0x11a>
 800de7a:	2300      	movs	r3, #0
 800de7c:	3401      	adds	r4, #1
 800de7e:	9305      	str	r3, [sp, #20]
 800de80:	4619      	mov	r1, r3
 800de82:	f04f 0c0a 	mov.w	ip, #10
 800de86:	4620      	mov	r0, r4
 800de88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de8c:	3a30      	subs	r2, #48	; 0x30
 800de8e:	2a09      	cmp	r2, #9
 800de90:	d903      	bls.n	800de9a <_vfiprintf_r+0x1ee>
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0c5      	beq.n	800de22 <_vfiprintf_r+0x176>
 800de96:	9105      	str	r1, [sp, #20]
 800de98:	e7c3      	b.n	800de22 <_vfiprintf_r+0x176>
 800de9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de9e:	4604      	mov	r4, r0
 800dea0:	2301      	movs	r3, #1
 800dea2:	e7f0      	b.n	800de86 <_vfiprintf_r+0x1da>
 800dea4:	ab03      	add	r3, sp, #12
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	462a      	mov	r2, r5
 800deaa:	4b16      	ldr	r3, [pc, #88]	; (800df04 <_vfiprintf_r+0x258>)
 800deac:	a904      	add	r1, sp, #16
 800deae:	4630      	mov	r0, r6
 800deb0:	f7fd fd58 	bl	800b964 <_printf_float>
 800deb4:	4607      	mov	r7, r0
 800deb6:	1c78      	adds	r0, r7, #1
 800deb8:	d1d6      	bne.n	800de68 <_vfiprintf_r+0x1bc>
 800deba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800debc:	07d9      	lsls	r1, r3, #31
 800debe:	d405      	bmi.n	800decc <_vfiprintf_r+0x220>
 800dec0:	89ab      	ldrh	r3, [r5, #12]
 800dec2:	059a      	lsls	r2, r3, #22
 800dec4:	d402      	bmi.n	800decc <_vfiprintf_r+0x220>
 800dec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec8:	f7ff f8d8 	bl	800d07c <__retarget_lock_release_recursive>
 800decc:	89ab      	ldrh	r3, [r5, #12]
 800dece:	065b      	lsls	r3, r3, #25
 800ded0:	f53f af12 	bmi.w	800dcf8 <_vfiprintf_r+0x4c>
 800ded4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ded6:	e711      	b.n	800dcfc <_vfiprintf_r+0x50>
 800ded8:	ab03      	add	r3, sp, #12
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	462a      	mov	r2, r5
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <_vfiprintf_r+0x258>)
 800dee0:	a904      	add	r1, sp, #16
 800dee2:	4630      	mov	r0, r6
 800dee4:	f7fd ffe2 	bl	800beac <_printf_i>
 800dee8:	e7e4      	b.n	800deb4 <_vfiprintf_r+0x208>
 800deea:	bf00      	nop
 800deec:	0800eab0 	.word	0x0800eab0
 800def0:	0800ead0 	.word	0x0800ead0
 800def4:	0800ea90 	.word	0x0800ea90
 800def8:	0800ec4c 	.word	0x0800ec4c
 800defc:	0800ec56 	.word	0x0800ec56
 800df00:	0800b965 	.word	0x0800b965
 800df04:	0800dc87 	.word	0x0800dc87
 800df08:	0800ec52 	.word	0x0800ec52

0800df0c <_sbrk_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	4d06      	ldr	r5, [pc, #24]	; (800df28 <_sbrk_r+0x1c>)
 800df10:	2300      	movs	r3, #0
 800df12:	4604      	mov	r4, r0
 800df14:	4608      	mov	r0, r1
 800df16:	602b      	str	r3, [r5, #0]
 800df18:	f7f4 f874 	bl	8002004 <_sbrk>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	d102      	bne.n	800df26 <_sbrk_r+0x1a>
 800df20:	682b      	ldr	r3, [r5, #0]
 800df22:	b103      	cbz	r3, 800df26 <_sbrk_r+0x1a>
 800df24:	6023      	str	r3, [r4, #0]
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	20000e04 	.word	0x20000e04

0800df2c <__sread>:
 800df2c:	b510      	push	{r4, lr}
 800df2e:	460c      	mov	r4, r1
 800df30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df34:	f000 faf2 	bl	800e51c <_read_r>
 800df38:	2800      	cmp	r0, #0
 800df3a:	bfab      	itete	ge
 800df3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df3e:	89a3      	ldrhlt	r3, [r4, #12]
 800df40:	181b      	addge	r3, r3, r0
 800df42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df46:	bfac      	ite	ge
 800df48:	6563      	strge	r3, [r4, #84]	; 0x54
 800df4a:	81a3      	strhlt	r3, [r4, #12]
 800df4c:	bd10      	pop	{r4, pc}

0800df4e <__swrite>:
 800df4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df52:	461f      	mov	r7, r3
 800df54:	898b      	ldrh	r3, [r1, #12]
 800df56:	05db      	lsls	r3, r3, #23
 800df58:	4605      	mov	r5, r0
 800df5a:	460c      	mov	r4, r1
 800df5c:	4616      	mov	r6, r2
 800df5e:	d505      	bpl.n	800df6c <__swrite+0x1e>
 800df60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df64:	2302      	movs	r3, #2
 800df66:	2200      	movs	r2, #0
 800df68:	f000 f9f8 	bl	800e35c <_lseek_r>
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df76:	81a3      	strh	r3, [r4, #12]
 800df78:	4632      	mov	r2, r6
 800df7a:	463b      	mov	r3, r7
 800df7c:	4628      	mov	r0, r5
 800df7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df82:	f000 b869 	b.w	800e058 <_write_r>

0800df86 <__sseek>:
 800df86:	b510      	push	{r4, lr}
 800df88:	460c      	mov	r4, r1
 800df8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8e:	f000 f9e5 	bl	800e35c <_lseek_r>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	bf15      	itete	ne
 800df98:	6560      	strne	r0, [r4, #84]	; 0x54
 800df9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfa2:	81a3      	strheq	r3, [r4, #12]
 800dfa4:	bf18      	it	ne
 800dfa6:	81a3      	strhne	r3, [r4, #12]
 800dfa8:	bd10      	pop	{r4, pc}

0800dfaa <__sclose>:
 800dfaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfae:	f000 b8f1 	b.w	800e194 <_close_r>
	...

0800dfb4 <__swbuf_r>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	460e      	mov	r6, r1
 800dfb8:	4614      	mov	r4, r2
 800dfba:	4605      	mov	r5, r0
 800dfbc:	b118      	cbz	r0, 800dfc6 <__swbuf_r+0x12>
 800dfbe:	6983      	ldr	r3, [r0, #24]
 800dfc0:	b90b      	cbnz	r3, 800dfc6 <__swbuf_r+0x12>
 800dfc2:	f7fe ffb7 	bl	800cf34 <__sinit>
 800dfc6:	4b21      	ldr	r3, [pc, #132]	; (800e04c <__swbuf_r+0x98>)
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	d12b      	bne.n	800e024 <__swbuf_r+0x70>
 800dfcc:	686c      	ldr	r4, [r5, #4]
 800dfce:	69a3      	ldr	r3, [r4, #24]
 800dfd0:	60a3      	str	r3, [r4, #8]
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	071a      	lsls	r2, r3, #28
 800dfd6:	d52f      	bpl.n	800e038 <__swbuf_r+0x84>
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	b36b      	cbz	r3, 800e038 <__swbuf_r+0x84>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	6820      	ldr	r0, [r4, #0]
 800dfe0:	1ac0      	subs	r0, r0, r3
 800dfe2:	6963      	ldr	r3, [r4, #20]
 800dfe4:	b2f6      	uxtb	r6, r6
 800dfe6:	4283      	cmp	r3, r0
 800dfe8:	4637      	mov	r7, r6
 800dfea:	dc04      	bgt.n	800dff6 <__swbuf_r+0x42>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4628      	mov	r0, r5
 800dff0:	f000 f966 	bl	800e2c0 <_fflush_r>
 800dff4:	bb30      	cbnz	r0, 800e044 <__swbuf_r+0x90>
 800dff6:	68a3      	ldr	r3, [r4, #8]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	60a3      	str	r3, [r4, #8]
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	6022      	str	r2, [r4, #0]
 800e002:	701e      	strb	r6, [r3, #0]
 800e004:	6963      	ldr	r3, [r4, #20]
 800e006:	3001      	adds	r0, #1
 800e008:	4283      	cmp	r3, r0
 800e00a:	d004      	beq.n	800e016 <__swbuf_r+0x62>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	07db      	lsls	r3, r3, #31
 800e010:	d506      	bpl.n	800e020 <__swbuf_r+0x6c>
 800e012:	2e0a      	cmp	r6, #10
 800e014:	d104      	bne.n	800e020 <__swbuf_r+0x6c>
 800e016:	4621      	mov	r1, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f000 f951 	bl	800e2c0 <_fflush_r>
 800e01e:	b988      	cbnz	r0, 800e044 <__swbuf_r+0x90>
 800e020:	4638      	mov	r0, r7
 800e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e024:	4b0a      	ldr	r3, [pc, #40]	; (800e050 <__swbuf_r+0x9c>)
 800e026:	429c      	cmp	r4, r3
 800e028:	d101      	bne.n	800e02e <__swbuf_r+0x7a>
 800e02a:	68ac      	ldr	r4, [r5, #8]
 800e02c:	e7cf      	b.n	800dfce <__swbuf_r+0x1a>
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <__swbuf_r+0xa0>)
 800e030:	429c      	cmp	r4, r3
 800e032:	bf08      	it	eq
 800e034:	68ec      	ldreq	r4, [r5, #12]
 800e036:	e7ca      	b.n	800dfce <__swbuf_r+0x1a>
 800e038:	4621      	mov	r1, r4
 800e03a:	4628      	mov	r0, r5
 800e03c:	f000 f81e 	bl	800e07c <__swsetup_r>
 800e040:	2800      	cmp	r0, #0
 800e042:	d0cb      	beq.n	800dfdc <__swbuf_r+0x28>
 800e044:	f04f 37ff 	mov.w	r7, #4294967295
 800e048:	e7ea      	b.n	800e020 <__swbuf_r+0x6c>
 800e04a:	bf00      	nop
 800e04c:	0800eab0 	.word	0x0800eab0
 800e050:	0800ead0 	.word	0x0800ead0
 800e054:	0800ea90 	.word	0x0800ea90

0800e058 <_write_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d07      	ldr	r5, [pc, #28]	; (800e078 <_write_r+0x20>)
 800e05c:	4604      	mov	r4, r0
 800e05e:	4608      	mov	r0, r1
 800e060:	4611      	mov	r1, r2
 800e062:	2200      	movs	r2, #0
 800e064:	602a      	str	r2, [r5, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	f7f3 ff7b 	bl	8001f62 <_write>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d102      	bne.n	800e076 <_write_r+0x1e>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b103      	cbz	r3, 800e076 <_write_r+0x1e>
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	20000e04 	.word	0x20000e04

0800e07c <__swsetup_r>:
 800e07c:	4b32      	ldr	r3, [pc, #200]	; (800e148 <__swsetup_r+0xcc>)
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	681d      	ldr	r5, [r3, #0]
 800e082:	4606      	mov	r6, r0
 800e084:	460c      	mov	r4, r1
 800e086:	b125      	cbz	r5, 800e092 <__swsetup_r+0x16>
 800e088:	69ab      	ldr	r3, [r5, #24]
 800e08a:	b913      	cbnz	r3, 800e092 <__swsetup_r+0x16>
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7fe ff51 	bl	800cf34 <__sinit>
 800e092:	4b2e      	ldr	r3, [pc, #184]	; (800e14c <__swsetup_r+0xd0>)
 800e094:	429c      	cmp	r4, r3
 800e096:	d10f      	bne.n	800e0b8 <__swsetup_r+0x3c>
 800e098:	686c      	ldr	r4, [r5, #4]
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0a0:	0719      	lsls	r1, r3, #28
 800e0a2:	d42c      	bmi.n	800e0fe <__swsetup_r+0x82>
 800e0a4:	06dd      	lsls	r5, r3, #27
 800e0a6:	d411      	bmi.n	800e0cc <__swsetup_r+0x50>
 800e0a8:	2309      	movs	r3, #9
 800e0aa:	6033      	str	r3, [r6, #0]
 800e0ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0b0:	81a3      	strh	r3, [r4, #12]
 800e0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b6:	e03e      	b.n	800e136 <__swsetup_r+0xba>
 800e0b8:	4b25      	ldr	r3, [pc, #148]	; (800e150 <__swsetup_r+0xd4>)
 800e0ba:	429c      	cmp	r4, r3
 800e0bc:	d101      	bne.n	800e0c2 <__swsetup_r+0x46>
 800e0be:	68ac      	ldr	r4, [r5, #8]
 800e0c0:	e7eb      	b.n	800e09a <__swsetup_r+0x1e>
 800e0c2:	4b24      	ldr	r3, [pc, #144]	; (800e154 <__swsetup_r+0xd8>)
 800e0c4:	429c      	cmp	r4, r3
 800e0c6:	bf08      	it	eq
 800e0c8:	68ec      	ldreq	r4, [r5, #12]
 800e0ca:	e7e6      	b.n	800e09a <__swsetup_r+0x1e>
 800e0cc:	0758      	lsls	r0, r3, #29
 800e0ce:	d512      	bpl.n	800e0f6 <__swsetup_r+0x7a>
 800e0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0d2:	b141      	cbz	r1, 800e0e6 <__swsetup_r+0x6a>
 800e0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0d8:	4299      	cmp	r1, r3
 800e0da:	d002      	beq.n	800e0e2 <__swsetup_r+0x66>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f7ff fb7f 	bl	800d7e0 <_free_r>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6063      	str	r3, [r4, #4]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	6023      	str	r3, [r4, #0]
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f043 0308 	orr.w	r3, r3, #8
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	6923      	ldr	r3, [r4, #16]
 800e100:	b94b      	cbnz	r3, 800e116 <__swsetup_r+0x9a>
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e10c:	d003      	beq.n	800e116 <__swsetup_r+0x9a>
 800e10e:	4621      	mov	r1, r4
 800e110:	4630      	mov	r0, r6
 800e112:	f000 f95b 	bl	800e3cc <__smakebuf_r>
 800e116:	89a0      	ldrh	r0, [r4, #12]
 800e118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e11c:	f010 0301 	ands.w	r3, r0, #1
 800e120:	d00a      	beq.n	800e138 <__swsetup_r+0xbc>
 800e122:	2300      	movs	r3, #0
 800e124:	60a3      	str	r3, [r4, #8]
 800e126:	6963      	ldr	r3, [r4, #20]
 800e128:	425b      	negs	r3, r3
 800e12a:	61a3      	str	r3, [r4, #24]
 800e12c:	6923      	ldr	r3, [r4, #16]
 800e12e:	b943      	cbnz	r3, 800e142 <__swsetup_r+0xc6>
 800e130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e134:	d1ba      	bne.n	800e0ac <__swsetup_r+0x30>
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	0781      	lsls	r1, r0, #30
 800e13a:	bf58      	it	pl
 800e13c:	6963      	ldrpl	r3, [r4, #20]
 800e13e:	60a3      	str	r3, [r4, #8]
 800e140:	e7f4      	b.n	800e12c <__swsetup_r+0xb0>
 800e142:	2000      	movs	r0, #0
 800e144:	e7f7      	b.n	800e136 <__swsetup_r+0xba>
 800e146:	bf00      	nop
 800e148:	200000fc 	.word	0x200000fc
 800e14c:	0800eab0 	.word	0x0800eab0
 800e150:	0800ead0 	.word	0x0800ead0
 800e154:	0800ea90 	.word	0x0800ea90

0800e158 <__assert_func>:
 800e158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e15a:	4614      	mov	r4, r2
 800e15c:	461a      	mov	r2, r3
 800e15e:	4b09      	ldr	r3, [pc, #36]	; (800e184 <__assert_func+0x2c>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4605      	mov	r5, r0
 800e164:	68d8      	ldr	r0, [r3, #12]
 800e166:	b14c      	cbz	r4, 800e17c <__assert_func+0x24>
 800e168:	4b07      	ldr	r3, [pc, #28]	; (800e188 <__assert_func+0x30>)
 800e16a:	9100      	str	r1, [sp, #0]
 800e16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e170:	4906      	ldr	r1, [pc, #24]	; (800e18c <__assert_func+0x34>)
 800e172:	462b      	mov	r3, r5
 800e174:	f000 f8e0 	bl	800e338 <fiprintf>
 800e178:	f000 f9ef 	bl	800e55a <abort>
 800e17c:	4b04      	ldr	r3, [pc, #16]	; (800e190 <__assert_func+0x38>)
 800e17e:	461c      	mov	r4, r3
 800e180:	e7f3      	b.n	800e16a <__assert_func+0x12>
 800e182:	bf00      	nop
 800e184:	200000fc 	.word	0x200000fc
 800e188:	0800ec5d 	.word	0x0800ec5d
 800e18c:	0800ec6a 	.word	0x0800ec6a
 800e190:	0800ec98 	.word	0x0800ec98

0800e194 <_close_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	4d06      	ldr	r5, [pc, #24]	; (800e1b0 <_close_r+0x1c>)
 800e198:	2300      	movs	r3, #0
 800e19a:	4604      	mov	r4, r0
 800e19c:	4608      	mov	r0, r1
 800e19e:	602b      	str	r3, [r5, #0]
 800e1a0:	f7f3 fefb 	bl	8001f9a <_close>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	d102      	bne.n	800e1ae <_close_r+0x1a>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	b103      	cbz	r3, 800e1ae <_close_r+0x1a>
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	20000e04 	.word	0x20000e04

0800e1b4 <__sflush_r>:
 800e1b4:	898a      	ldrh	r2, [r1, #12]
 800e1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	0710      	lsls	r0, r2, #28
 800e1be:	460c      	mov	r4, r1
 800e1c0:	d458      	bmi.n	800e274 <__sflush_r+0xc0>
 800e1c2:	684b      	ldr	r3, [r1, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	dc05      	bgt.n	800e1d4 <__sflush_r+0x20>
 800e1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	dc02      	bgt.n	800e1d4 <__sflush_r+0x20>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	d0f9      	beq.n	800e1ce <__sflush_r+0x1a>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1e0:	682f      	ldr	r7, [r5, #0]
 800e1e2:	602b      	str	r3, [r5, #0]
 800e1e4:	d032      	beq.n	800e24c <__sflush_r+0x98>
 800e1e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	075a      	lsls	r2, r3, #29
 800e1ec:	d505      	bpl.n	800e1fa <__sflush_r+0x46>
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	1ac0      	subs	r0, r0, r3
 800e1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1f4:	b10b      	cbz	r3, 800e1fa <__sflush_r+0x46>
 800e1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1f8:	1ac0      	subs	r0, r0, r3
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e200:	6a21      	ldr	r1, [r4, #32]
 800e202:	4628      	mov	r0, r5
 800e204:	47b0      	blx	r6
 800e206:	1c43      	adds	r3, r0, #1
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	d106      	bne.n	800e21a <__sflush_r+0x66>
 800e20c:	6829      	ldr	r1, [r5, #0]
 800e20e:	291d      	cmp	r1, #29
 800e210:	d82c      	bhi.n	800e26c <__sflush_r+0xb8>
 800e212:	4a2a      	ldr	r2, [pc, #168]	; (800e2bc <__sflush_r+0x108>)
 800e214:	40ca      	lsrs	r2, r1
 800e216:	07d6      	lsls	r6, r2, #31
 800e218:	d528      	bpl.n	800e26c <__sflush_r+0xb8>
 800e21a:	2200      	movs	r2, #0
 800e21c:	6062      	str	r2, [r4, #4]
 800e21e:	04d9      	lsls	r1, r3, #19
 800e220:	6922      	ldr	r2, [r4, #16]
 800e222:	6022      	str	r2, [r4, #0]
 800e224:	d504      	bpl.n	800e230 <__sflush_r+0x7c>
 800e226:	1c42      	adds	r2, r0, #1
 800e228:	d101      	bne.n	800e22e <__sflush_r+0x7a>
 800e22a:	682b      	ldr	r3, [r5, #0]
 800e22c:	b903      	cbnz	r3, 800e230 <__sflush_r+0x7c>
 800e22e:	6560      	str	r0, [r4, #84]	; 0x54
 800e230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e232:	602f      	str	r7, [r5, #0]
 800e234:	2900      	cmp	r1, #0
 800e236:	d0ca      	beq.n	800e1ce <__sflush_r+0x1a>
 800e238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e23c:	4299      	cmp	r1, r3
 800e23e:	d002      	beq.n	800e246 <__sflush_r+0x92>
 800e240:	4628      	mov	r0, r5
 800e242:	f7ff facd 	bl	800d7e0 <_free_r>
 800e246:	2000      	movs	r0, #0
 800e248:	6360      	str	r0, [r4, #52]	; 0x34
 800e24a:	e7c1      	b.n	800e1d0 <__sflush_r+0x1c>
 800e24c:	6a21      	ldr	r1, [r4, #32]
 800e24e:	2301      	movs	r3, #1
 800e250:	4628      	mov	r0, r5
 800e252:	47b0      	blx	r6
 800e254:	1c41      	adds	r1, r0, #1
 800e256:	d1c7      	bne.n	800e1e8 <__sflush_r+0x34>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d0c4      	beq.n	800e1e8 <__sflush_r+0x34>
 800e25e:	2b1d      	cmp	r3, #29
 800e260:	d001      	beq.n	800e266 <__sflush_r+0xb2>
 800e262:	2b16      	cmp	r3, #22
 800e264:	d101      	bne.n	800e26a <__sflush_r+0xb6>
 800e266:	602f      	str	r7, [r5, #0]
 800e268:	e7b1      	b.n	800e1ce <__sflush_r+0x1a>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	e7ad      	b.n	800e1d0 <__sflush_r+0x1c>
 800e274:	690f      	ldr	r7, [r1, #16]
 800e276:	2f00      	cmp	r7, #0
 800e278:	d0a9      	beq.n	800e1ce <__sflush_r+0x1a>
 800e27a:	0793      	lsls	r3, r2, #30
 800e27c:	680e      	ldr	r6, [r1, #0]
 800e27e:	bf08      	it	eq
 800e280:	694b      	ldreq	r3, [r1, #20]
 800e282:	600f      	str	r7, [r1, #0]
 800e284:	bf18      	it	ne
 800e286:	2300      	movne	r3, #0
 800e288:	eba6 0807 	sub.w	r8, r6, r7
 800e28c:	608b      	str	r3, [r1, #8]
 800e28e:	f1b8 0f00 	cmp.w	r8, #0
 800e292:	dd9c      	ble.n	800e1ce <__sflush_r+0x1a>
 800e294:	6a21      	ldr	r1, [r4, #32]
 800e296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e298:	4643      	mov	r3, r8
 800e29a:	463a      	mov	r2, r7
 800e29c:	4628      	mov	r0, r5
 800e29e:	47b0      	blx	r6
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	dc06      	bgt.n	800e2b2 <__sflush_r+0xfe>
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	e78e      	b.n	800e1d0 <__sflush_r+0x1c>
 800e2b2:	4407      	add	r7, r0
 800e2b4:	eba8 0800 	sub.w	r8, r8, r0
 800e2b8:	e7e9      	b.n	800e28e <__sflush_r+0xda>
 800e2ba:	bf00      	nop
 800e2bc:	20400001 	.word	0x20400001

0800e2c0 <_fflush_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	690b      	ldr	r3, [r1, #16]
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	b913      	cbnz	r3, 800e2d0 <_fflush_r+0x10>
 800e2ca:	2500      	movs	r5, #0
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	bd38      	pop	{r3, r4, r5, pc}
 800e2d0:	b118      	cbz	r0, 800e2da <_fflush_r+0x1a>
 800e2d2:	6983      	ldr	r3, [r0, #24]
 800e2d4:	b90b      	cbnz	r3, 800e2da <_fflush_r+0x1a>
 800e2d6:	f7fe fe2d 	bl	800cf34 <__sinit>
 800e2da:	4b14      	ldr	r3, [pc, #80]	; (800e32c <_fflush_r+0x6c>)
 800e2dc:	429c      	cmp	r4, r3
 800e2de:	d11b      	bne.n	800e318 <_fflush_r+0x58>
 800e2e0:	686c      	ldr	r4, [r5, #4]
 800e2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0ef      	beq.n	800e2ca <_fflush_r+0xa>
 800e2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2ec:	07d0      	lsls	r0, r2, #31
 800e2ee:	d404      	bmi.n	800e2fa <_fflush_r+0x3a>
 800e2f0:	0599      	lsls	r1, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_fflush_r+0x3a>
 800e2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2f6:	f7fe fec0 	bl	800d07a <__retarget_lock_acquire_recursive>
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	f7ff ff59 	bl	800e1b4 <__sflush_r>
 800e302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e304:	07da      	lsls	r2, r3, #31
 800e306:	4605      	mov	r5, r0
 800e308:	d4e0      	bmi.n	800e2cc <_fflush_r+0xc>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	059b      	lsls	r3, r3, #22
 800e30e:	d4dd      	bmi.n	800e2cc <_fflush_r+0xc>
 800e310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e312:	f7fe feb3 	bl	800d07c <__retarget_lock_release_recursive>
 800e316:	e7d9      	b.n	800e2cc <_fflush_r+0xc>
 800e318:	4b05      	ldr	r3, [pc, #20]	; (800e330 <_fflush_r+0x70>)
 800e31a:	429c      	cmp	r4, r3
 800e31c:	d101      	bne.n	800e322 <_fflush_r+0x62>
 800e31e:	68ac      	ldr	r4, [r5, #8]
 800e320:	e7df      	b.n	800e2e2 <_fflush_r+0x22>
 800e322:	4b04      	ldr	r3, [pc, #16]	; (800e334 <_fflush_r+0x74>)
 800e324:	429c      	cmp	r4, r3
 800e326:	bf08      	it	eq
 800e328:	68ec      	ldreq	r4, [r5, #12]
 800e32a:	e7da      	b.n	800e2e2 <_fflush_r+0x22>
 800e32c:	0800eab0 	.word	0x0800eab0
 800e330:	0800ead0 	.word	0x0800ead0
 800e334:	0800ea90 	.word	0x0800ea90

0800e338 <fiprintf>:
 800e338:	b40e      	push	{r1, r2, r3}
 800e33a:	b503      	push	{r0, r1, lr}
 800e33c:	4601      	mov	r1, r0
 800e33e:	ab03      	add	r3, sp, #12
 800e340:	4805      	ldr	r0, [pc, #20]	; (800e358 <fiprintf+0x20>)
 800e342:	f853 2b04 	ldr.w	r2, [r3], #4
 800e346:	6800      	ldr	r0, [r0, #0]
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	f7ff fcaf 	bl	800dcac <_vfiprintf_r>
 800e34e:	b002      	add	sp, #8
 800e350:	f85d eb04 	ldr.w	lr, [sp], #4
 800e354:	b003      	add	sp, #12
 800e356:	4770      	bx	lr
 800e358:	200000fc 	.word	0x200000fc

0800e35c <_lseek_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d07      	ldr	r5, [pc, #28]	; (800e37c <_lseek_r+0x20>)
 800e360:	4604      	mov	r4, r0
 800e362:	4608      	mov	r0, r1
 800e364:	4611      	mov	r1, r2
 800e366:	2200      	movs	r2, #0
 800e368:	602a      	str	r2, [r5, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f7f3 fe3c 	bl	8001fe8 <_lseek>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_lseek_r+0x1e>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_lseek_r+0x1e>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20000e04 	.word	0x20000e04

0800e380 <__swhatbuf_r>:
 800e380:	b570      	push	{r4, r5, r6, lr}
 800e382:	460e      	mov	r6, r1
 800e384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e388:	2900      	cmp	r1, #0
 800e38a:	b096      	sub	sp, #88	; 0x58
 800e38c:	4614      	mov	r4, r2
 800e38e:	461d      	mov	r5, r3
 800e390:	da08      	bge.n	800e3a4 <__swhatbuf_r+0x24>
 800e392:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	602a      	str	r2, [r5, #0]
 800e39a:	061a      	lsls	r2, r3, #24
 800e39c:	d410      	bmi.n	800e3c0 <__swhatbuf_r+0x40>
 800e39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a2:	e00e      	b.n	800e3c2 <__swhatbuf_r+0x42>
 800e3a4:	466a      	mov	r2, sp
 800e3a6:	f000 f8df 	bl	800e568 <_fstat_r>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	dbf1      	blt.n	800e392 <__swhatbuf_r+0x12>
 800e3ae:	9a01      	ldr	r2, [sp, #4]
 800e3b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3b8:	425a      	negs	r2, r3
 800e3ba:	415a      	adcs	r2, r3
 800e3bc:	602a      	str	r2, [r5, #0]
 800e3be:	e7ee      	b.n	800e39e <__swhatbuf_r+0x1e>
 800e3c0:	2340      	movs	r3, #64	; 0x40
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	b016      	add	sp, #88	; 0x58
 800e3c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3cc <__smakebuf_r>:
 800e3cc:	898b      	ldrh	r3, [r1, #12]
 800e3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3d0:	079d      	lsls	r5, r3, #30
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	d507      	bpl.n	800e3e8 <__smakebuf_r+0x1c>
 800e3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	6123      	str	r3, [r4, #16]
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	6163      	str	r3, [r4, #20]
 800e3e4:	b002      	add	sp, #8
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	ab01      	add	r3, sp, #4
 800e3ea:	466a      	mov	r2, sp
 800e3ec:	f7ff ffc8 	bl	800e380 <__swhatbuf_r>
 800e3f0:	9900      	ldr	r1, [sp, #0]
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f7ff fa5f 	bl	800d8b8 <_malloc_r>
 800e3fa:	b948      	cbnz	r0, 800e410 <__smakebuf_r+0x44>
 800e3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e400:	059a      	lsls	r2, r3, #22
 800e402:	d4ef      	bmi.n	800e3e4 <__smakebuf_r+0x18>
 800e404:	f023 0303 	bic.w	r3, r3, #3
 800e408:	f043 0302 	orr.w	r3, r3, #2
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	e7e3      	b.n	800e3d8 <__smakebuf_r+0xc>
 800e410:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <__smakebuf_r+0x7c>)
 800e412:	62b3      	str	r3, [r6, #40]	; 0x28
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	6020      	str	r0, [r4, #0]
 800e418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e41c:	81a3      	strh	r3, [r4, #12]
 800e41e:	9b00      	ldr	r3, [sp, #0]
 800e420:	6163      	str	r3, [r4, #20]
 800e422:	9b01      	ldr	r3, [sp, #4]
 800e424:	6120      	str	r0, [r4, #16]
 800e426:	b15b      	cbz	r3, 800e440 <__smakebuf_r+0x74>
 800e428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e42c:	4630      	mov	r0, r6
 800e42e:	f000 f8ad 	bl	800e58c <_isatty_r>
 800e432:	b128      	cbz	r0, 800e440 <__smakebuf_r+0x74>
 800e434:	89a3      	ldrh	r3, [r4, #12]
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	f043 0301 	orr.w	r3, r3, #1
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	89a0      	ldrh	r0, [r4, #12]
 800e442:	4305      	orrs	r5, r0
 800e444:	81a5      	strh	r5, [r4, #12]
 800e446:	e7cd      	b.n	800e3e4 <__smakebuf_r+0x18>
 800e448:	0800cecd 	.word	0x0800cecd

0800e44c <__ascii_mbtowc>:
 800e44c:	b082      	sub	sp, #8
 800e44e:	b901      	cbnz	r1, 800e452 <__ascii_mbtowc+0x6>
 800e450:	a901      	add	r1, sp, #4
 800e452:	b142      	cbz	r2, 800e466 <__ascii_mbtowc+0x1a>
 800e454:	b14b      	cbz	r3, 800e46a <__ascii_mbtowc+0x1e>
 800e456:	7813      	ldrb	r3, [r2, #0]
 800e458:	600b      	str	r3, [r1, #0]
 800e45a:	7812      	ldrb	r2, [r2, #0]
 800e45c:	1e10      	subs	r0, r2, #0
 800e45e:	bf18      	it	ne
 800e460:	2001      	movne	r0, #1
 800e462:	b002      	add	sp, #8
 800e464:	4770      	bx	lr
 800e466:	4610      	mov	r0, r2
 800e468:	e7fb      	b.n	800e462 <__ascii_mbtowc+0x16>
 800e46a:	f06f 0001 	mvn.w	r0, #1
 800e46e:	e7f8      	b.n	800e462 <__ascii_mbtowc+0x16>

0800e470 <memmove>:
 800e470:	4288      	cmp	r0, r1
 800e472:	b510      	push	{r4, lr}
 800e474:	eb01 0402 	add.w	r4, r1, r2
 800e478:	d902      	bls.n	800e480 <memmove+0x10>
 800e47a:	4284      	cmp	r4, r0
 800e47c:	4623      	mov	r3, r4
 800e47e:	d807      	bhi.n	800e490 <memmove+0x20>
 800e480:	1e43      	subs	r3, r0, #1
 800e482:	42a1      	cmp	r1, r4
 800e484:	d008      	beq.n	800e498 <memmove+0x28>
 800e486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e48a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e48e:	e7f8      	b.n	800e482 <memmove+0x12>
 800e490:	4402      	add	r2, r0
 800e492:	4601      	mov	r1, r0
 800e494:	428a      	cmp	r2, r1
 800e496:	d100      	bne.n	800e49a <memmove+0x2a>
 800e498:	bd10      	pop	{r4, pc}
 800e49a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e49e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4a2:	e7f7      	b.n	800e494 <memmove+0x24>

0800e4a4 <__malloc_lock>:
 800e4a4:	4801      	ldr	r0, [pc, #4]	; (800e4ac <__malloc_lock+0x8>)
 800e4a6:	f7fe bde8 	b.w	800d07a <__retarget_lock_acquire_recursive>
 800e4aa:	bf00      	nop
 800e4ac:	20000df8 	.word	0x20000df8

0800e4b0 <__malloc_unlock>:
 800e4b0:	4801      	ldr	r0, [pc, #4]	; (800e4b8 <__malloc_unlock+0x8>)
 800e4b2:	f7fe bde3 	b.w	800d07c <__retarget_lock_release_recursive>
 800e4b6:	bf00      	nop
 800e4b8:	20000df8 	.word	0x20000df8

0800e4bc <_realloc_r>:
 800e4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c0:	4680      	mov	r8, r0
 800e4c2:	4614      	mov	r4, r2
 800e4c4:	460e      	mov	r6, r1
 800e4c6:	b921      	cbnz	r1, 800e4d2 <_realloc_r+0x16>
 800e4c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	f7ff b9f3 	b.w	800d8b8 <_malloc_r>
 800e4d2:	b92a      	cbnz	r2, 800e4e0 <_realloc_r+0x24>
 800e4d4:	f7ff f984 	bl	800d7e0 <_free_r>
 800e4d8:	4625      	mov	r5, r4
 800e4da:	4628      	mov	r0, r5
 800e4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e0:	f000 f864 	bl	800e5ac <_malloc_usable_size_r>
 800e4e4:	4284      	cmp	r4, r0
 800e4e6:	4607      	mov	r7, r0
 800e4e8:	d802      	bhi.n	800e4f0 <_realloc_r+0x34>
 800e4ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4ee:	d812      	bhi.n	800e516 <_realloc_r+0x5a>
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	f7ff f9e0 	bl	800d8b8 <_malloc_r>
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	d0ed      	beq.n	800e4da <_realloc_r+0x1e>
 800e4fe:	42bc      	cmp	r4, r7
 800e500:	4622      	mov	r2, r4
 800e502:	4631      	mov	r1, r6
 800e504:	bf28      	it	cs
 800e506:	463a      	movcs	r2, r7
 800e508:	f7fe fdc2 	bl	800d090 <memcpy>
 800e50c:	4631      	mov	r1, r6
 800e50e:	4640      	mov	r0, r8
 800e510:	f7ff f966 	bl	800d7e0 <_free_r>
 800e514:	e7e1      	b.n	800e4da <_realloc_r+0x1e>
 800e516:	4635      	mov	r5, r6
 800e518:	e7df      	b.n	800e4da <_realloc_r+0x1e>
	...

0800e51c <_read_r>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4d07      	ldr	r5, [pc, #28]	; (800e53c <_read_r+0x20>)
 800e520:	4604      	mov	r4, r0
 800e522:	4608      	mov	r0, r1
 800e524:	4611      	mov	r1, r2
 800e526:	2200      	movs	r2, #0
 800e528:	602a      	str	r2, [r5, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	f7f3 fcfc 	bl	8001f28 <_read>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_read_r+0x1e>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b103      	cbz	r3, 800e53a <_read_r+0x1e>
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20000e04 	.word	0x20000e04

0800e540 <__ascii_wctomb>:
 800e540:	b149      	cbz	r1, 800e556 <__ascii_wctomb+0x16>
 800e542:	2aff      	cmp	r2, #255	; 0xff
 800e544:	bf85      	ittet	hi
 800e546:	238a      	movhi	r3, #138	; 0x8a
 800e548:	6003      	strhi	r3, [r0, #0]
 800e54a:	700a      	strbls	r2, [r1, #0]
 800e54c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e550:	bf98      	it	ls
 800e552:	2001      	movls	r0, #1
 800e554:	4770      	bx	lr
 800e556:	4608      	mov	r0, r1
 800e558:	4770      	bx	lr

0800e55a <abort>:
 800e55a:	b508      	push	{r3, lr}
 800e55c:	2006      	movs	r0, #6
 800e55e:	f000 f855 	bl	800e60c <raise>
 800e562:	2001      	movs	r0, #1
 800e564:	f7f3 fcd6 	bl	8001f14 <_exit>

0800e568 <_fstat_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	; (800e588 <_fstat_r+0x20>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	4611      	mov	r1, r2
 800e574:	602b      	str	r3, [r5, #0]
 800e576:	f7f3 fd1c 	bl	8001fb2 <_fstat>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d102      	bne.n	800e584 <_fstat_r+0x1c>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	b103      	cbz	r3, 800e584 <_fstat_r+0x1c>
 800e582:	6023      	str	r3, [r4, #0]
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	bf00      	nop
 800e588:	20000e04 	.word	0x20000e04

0800e58c <_isatty_r>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4d06      	ldr	r5, [pc, #24]	; (800e5a8 <_isatty_r+0x1c>)
 800e590:	2300      	movs	r3, #0
 800e592:	4604      	mov	r4, r0
 800e594:	4608      	mov	r0, r1
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	f7f3 fd1b 	bl	8001fd2 <_isatty>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d102      	bne.n	800e5a6 <_isatty_r+0x1a>
 800e5a0:	682b      	ldr	r3, [r5, #0]
 800e5a2:	b103      	cbz	r3, 800e5a6 <_isatty_r+0x1a>
 800e5a4:	6023      	str	r3, [r4, #0]
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	20000e04 	.word	0x20000e04

0800e5ac <_malloc_usable_size_r>:
 800e5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5b0:	1f18      	subs	r0, r3, #4
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	bfbc      	itt	lt
 800e5b6:	580b      	ldrlt	r3, [r1, r0]
 800e5b8:	18c0      	addlt	r0, r0, r3
 800e5ba:	4770      	bx	lr

0800e5bc <_raise_r>:
 800e5bc:	291f      	cmp	r1, #31
 800e5be:	b538      	push	{r3, r4, r5, lr}
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	460d      	mov	r5, r1
 800e5c4:	d904      	bls.n	800e5d0 <_raise_r+0x14>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5d2:	b112      	cbz	r2, 800e5da <_raise_r+0x1e>
 800e5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5d8:	b94b      	cbnz	r3, 800e5ee <_raise_r+0x32>
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 f830 	bl	800e640 <_getpid_r>
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ea:	f000 b817 	b.w	800e61c <_kill_r>
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d00a      	beq.n	800e608 <_raise_r+0x4c>
 800e5f2:	1c59      	adds	r1, r3, #1
 800e5f4:	d103      	bne.n	800e5fe <_raise_r+0x42>
 800e5f6:	2316      	movs	r3, #22
 800e5f8:	6003      	str	r3, [r0, #0]
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	e7e7      	b.n	800e5ce <_raise_r+0x12>
 800e5fe:	2400      	movs	r4, #0
 800e600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e604:	4628      	mov	r0, r5
 800e606:	4798      	blx	r3
 800e608:	2000      	movs	r0, #0
 800e60a:	e7e0      	b.n	800e5ce <_raise_r+0x12>

0800e60c <raise>:
 800e60c:	4b02      	ldr	r3, [pc, #8]	; (800e618 <raise+0xc>)
 800e60e:	4601      	mov	r1, r0
 800e610:	6818      	ldr	r0, [r3, #0]
 800e612:	f7ff bfd3 	b.w	800e5bc <_raise_r>
 800e616:	bf00      	nop
 800e618:	200000fc 	.word	0x200000fc

0800e61c <_kill_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d07      	ldr	r5, [pc, #28]	; (800e63c <_kill_r+0x20>)
 800e620:	2300      	movs	r3, #0
 800e622:	4604      	mov	r4, r0
 800e624:	4608      	mov	r0, r1
 800e626:	4611      	mov	r1, r2
 800e628:	602b      	str	r3, [r5, #0]
 800e62a:	f7f3 fc63 	bl	8001ef4 <_kill>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	d102      	bne.n	800e638 <_kill_r+0x1c>
 800e632:	682b      	ldr	r3, [r5, #0]
 800e634:	b103      	cbz	r3, 800e638 <_kill_r+0x1c>
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	bd38      	pop	{r3, r4, r5, pc}
 800e63a:	bf00      	nop
 800e63c:	20000e04 	.word	0x20000e04

0800e640 <_getpid_r>:
 800e640:	f7f3 bc50 	b.w	8001ee4 <_getpid>

0800e644 <_init>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	bf00      	nop
 800e648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64a:	bc08      	pop	{r3}
 800e64c:	469e      	mov	lr, r3
 800e64e:	4770      	bx	lr

0800e650 <_fini>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	bf00      	nop
 800e654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e656:	bc08      	pop	{r3}
 800e658:	469e      	mov	lr, r3
 800e65a:	4770      	bx	lr
