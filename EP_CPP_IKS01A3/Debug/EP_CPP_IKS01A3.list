
EP_CPP_IKS01A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd24  0800bd24  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bd2c  0800bd2c  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800bd34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000144  0800be78  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001e4  0800bf18  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008d8  20000284  0800bfb8  00020284  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b5c  0800bfb8  00020b5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c5b4  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c17  00000000  00000000  0005c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002870  00000000  00000000  00061480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000026d0  00000000  00000000  00063cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e11d  00000000  00000000  000663c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027547  00000000  00000000  000944dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010695f  00000000  00000000  000bba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c2383  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b848  00000000  00000000  001c23d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbd0 	.word	0x0800bbd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0800bbd0 	.word	0x0800bbd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9bf 	b.w	8000650 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <_ZN13AccGyroSensorC1Ev>:
 *      Author: raphael.baumeler
 */

#include "AccGyroSensor.h"

AccGyroSensor::AccGyroSensor() {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <_ZN13AccGyroSensorC1Ev+0x44>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2203      	movs	r2, #3
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2202      	movs	r2, #2
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2201      	movs	r2, #1
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3314      	adds	r3, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f862 	bl	8000748 <_ZN14IKS01A3_MotionC1Ev>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3378      	adds	r3, #120	; 0x78
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f85d 	bl	8000748 <_ZN14IKS01A3_MotionC1Ev>
	// TODO Auto-generated constructor stub

}
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0800bc54 	.word	0x0800bc54

0800069c <_ZN13AccGyroSensorD1Ev>:

AccGyroSensor::~AccGyroSensor() {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <_ZN13AccGyroSensorD1Ev+0x2c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3378      	adds	r3, #120	; 0x78
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f888 	bl	80007c4 <_ZN14IKS01A3_MotionD1Ev>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3314      	adds	r3, #20
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f883 	bl	80007c4 <_ZN14IKS01A3_MotionD1Ev>
	// TODO Auto-generated destructor stub
}
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	0800bc54 	.word	0x0800bc54

080006cc <_ZN13AccGyroSensorD0Ev>:
AccGyroSensor::~AccGyroSensor() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
}
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffe1 	bl	800069c <_ZN13AccGyroSensorD1Ev>
 80006da:	21dc      	movs	r1, #220	; 0xdc
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f00a f9bd 	bl	800aa5c <_ZdlPvj>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_ZN13AccGyroSensor10initSensorEv>:

void AccGyroSensor::initSensor() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	AccGyroSensor::Gyro.init(INSTANCE, FUNCTION_INIT_ACC_GYRO);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f103 0014 	add.w	r0, r3, #20
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6859      	ldr	r1, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	461a      	mov	r2, r3
 8000704:	f000 f87e 	bl	8000804 <_ZN14IKS01A3_Motion4initEmm>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN13AccGyroSensor12updateValuesEv>:

void AccGyroSensor::updateValues() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	AccGyroSensor::Gyro.updateValues(INSTANCE, FUNCTION_GYRO);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f103 0014 	add.w	r0, r3, #20
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6859      	ldr	r1, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	461a      	mov	r2, r3
 8000728:	f000 f893 	bl	8000852 <_ZN14IKS01A3_Motion12updateValuesEmm>
	AccGyroSensor::Acc.updateValues(INSTANCE, FUNCTION_ACC);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6859      	ldr	r1, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	461a      	mov	r2, r3
 800073c:	f000 f889 	bl	8000852 <_ZN14IKS01A3_Motion12updateValuesEmm>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN14IKS01A3_MotionC1Ev>:
 *      Author: raphael.baumeler
 */

#include "IKS01A3Motion.h"

IKS01A3_Motion::IKS01A3_Motion() {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <_ZN14IKS01A3_MotionC1Ev+0x78>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	331c      	adds	r3, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3334      	adds	r3, #52	; 0x34
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	334c      	adds	r3, #76	; 0x4c
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
    AxisOffsets.x=0;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
    AxisValues.x=0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
    AxisOffsets.y=0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
    AxisValues.y=0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    AxisOffsets.z=0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
    AxisValues.z=0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
}
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	0800bc64 	.word	0x0800bc64

080007c4 <_ZN14IKS01A3_MotionD1Ev>:

IKS01A3_Motion::~IKS01A3_Motion() {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <_ZN14IKS01A3_MotionD1Ev+0x1c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	0800bc64 	.word	0x0800bc64

080007e4 <_ZN14IKS01A3_MotionD0Ev>:
IKS01A3_Motion::~IKS01A3_Motion() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
}
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ffe9 	bl	80007c4 <_ZN14IKS01A3_MotionD1Ev>
 80007f2:	2164      	movs	r1, #100	; 0x64
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f00a f931 	bl	800aa5c <_ZdlPvj>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZN14IKS01A3_Motion4initEmm>:

void IKS01A3_Motion::init(uint32_t instance, uint32_t function) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	IKS01A3_MOTION_SENSOR_Init(instance, function);
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	68b8      	ldr	r0, [r7, #8]
 8000814:	f005 fea6 	bl	8006564 <IKS01A3_MOTION_SENSOR_Init>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN14IKS01A3_Motion7setZeroEv>:
	*XAxis = AxisValues.x;
	*YAxis = AxisValues.y;
	*ZAxis = AxisValues.z;
}

void IKS01A3_Motion::setZero() {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    AxisOffsets.x=-AxisValues.x;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	425a      	negs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]
    AxisOffsets.y=-AxisValues.y;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	425a      	negs	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	615a      	str	r2, [r3, #20]
    AxisOffsets.z=-AxisValues.z;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	425a      	negs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	619a      	str	r2, [r3, #24]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_ZN14IKS01A3_Motion12updateValuesEmm>:

void IKS01A3_Motion::updateValues(uint32_t instance, uint32_t function) {
 8000852:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6178      	str	r0, [r7, #20]
 800085c:	6139      	str	r1, [r7, #16]
 800085e:	60fa      	str	r2, [r7, #12]
	IKS01A3_MOTION_SENSOR_Axes_t CurrentAxisValues;

    IKS01A3_MOTION_SENSOR_GetAxes(instance, function, &CurrentAxisValues);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	461a      	mov	r2, r3
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	6938      	ldr	r0, [r7, #16]
 800086a:	f005 ff77 	bl	800675c <IKS01A3_MOTION_SENSOR_GetAxes>

    // Fill Buffer's
    std::rotate(RingBufferAxisX.begin(),RingBufferAxisX.begin()+1,RingBufferAxisX.end());
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	331c      	adds	r3, #28
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8fd 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 8000878:	4605      	mov	r5, r0
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	331c      	adds	r3, #28
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f8f7 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 8000884:	4603      	mov	r3, r0
 8000886:	1d1c      	adds	r4, r3, #4
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	331c      	adds	r3, #28
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f8fc 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	4621      	mov	r1, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 f903 	bl	8000aa4 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisX[5]=CurrentAxisValues.x;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	331c      	adds	r3, #28
 80008a2:	2105      	movs	r1, #5
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f914 	bl	8000ad2 <_ZNSt5arrayIlLj6EEixEj>
 80008aa:	4602      	mov	r2, r0
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	6013      	str	r3, [r2, #0]

    std::rotate(RingBufferAxisY.begin(),RingBufferAxisY.begin()+1,RingBufferAxisY.end());
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3334      	adds	r3, #52	; 0x34
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f8dc 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 80008ba:	4605      	mov	r5, r0
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3334      	adds	r3, #52	; 0x34
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f8d6 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 80008c6:	4603      	mov	r3, r0
 80008c8:	1d1c      	adds	r4, r3, #4
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3334      	adds	r3, #52	; 0x34
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f8db 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4621      	mov	r1, r4
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 f8e2 	bl	8000aa4 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisY[5]=CurrentAxisValues.y;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3334      	adds	r3, #52	; 0x34
 80008e4:	2105      	movs	r1, #5
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f8f3 	bl	8000ad2 <_ZNSt5arrayIlLj6EEixEj>
 80008ec:	4602      	mov	r2, r0
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	6013      	str	r3, [r2, #0]

    std::rotate(RingBufferAxisZ.begin(),RingBufferAxisZ.begin()+1,RingBufferAxisZ.end());
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	334c      	adds	r3, #76	; 0x4c
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8bb 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 80008fc:	4605      	mov	r5, r0
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	334c      	adds	r3, #76	; 0x4c
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f8b5 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 8000908:	4603      	mov	r3, r0
 800090a:	1d1c      	adds	r4, r3, #4
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	334c      	adds	r3, #76	; 0x4c
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f8ba 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4621      	mov	r1, r4
 800091c:	4628      	mov	r0, r5
 800091e:	f000 f8c1 	bl	8000aa4 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisZ[5]=CurrentAxisValues.z;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	334c      	adds	r3, #76	; 0x4c
 8000926:	2105      	movs	r1, #5
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f8d2 	bl	8000ad2 <_ZNSt5arrayIlLj6EEixEj>
 800092e:	4602      	mov	r2, r0
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	6013      	str	r3, [r2, #0]

    // Make Average of Buffer's
    AxisValues.x = std::accumulate(RingBufferAxisX.begin(), RingBufferAxisX.end(), 0LL) / RingBufferAxisX.size();
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	331c      	adds	r3, #28
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f89a 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 800093e:	4604      	mov	r4, r0
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	331c      	adds	r3, #28
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f8a0 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 800094a:	4601      	mov	r1, r0
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	4620      	mov	r0, r4
 8000956:	f000 f8cb 	bl	8000af0 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 800095a:	4604      	mov	r4, r0
 800095c:	460d      	mov	r5, r1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	331c      	adds	r3, #28
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8ea 	bl	8000b3c <_ZNKSt5arrayIlLj6EE4sizeEv>
 8000968:	4603      	mov	r3, r0
 800096a:	2200      	movs	r2, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000974:	4620      	mov	r0, r4
 8000976:	4629      	mov	r1, r5
 8000978:	f7ff fc9a 	bl	80002b0 <__aeabi_ldivmod>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	605a      	str	r2, [r3, #4]
    AxisValues.y = std::accumulate(RingBufferAxisY.begin(), RingBufferAxisY.end(), 0LL) / RingBufferAxisY.size();
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3334      	adds	r3, #52	; 0x34
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f872 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 800098e:	4604      	mov	r4, r0
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	3334      	adds	r3, #52	; 0x34
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f878 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 800099a:	4601      	mov	r1, r0
 800099c:	f04f 0200 	mov.w	r2, #0
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	4620      	mov	r0, r4
 80009a6:	f000 f8a3 	bl	8000af0 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 80009aa:	4604      	mov	r4, r0
 80009ac:	460d      	mov	r5, r1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3334      	adds	r3, #52	; 0x34
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f8c2 	bl	8000b3c <_ZNKSt5arrayIlLj6EE4sizeEv>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2200      	movs	r2, #0
 80009bc:	469a      	mov	sl, r3
 80009be:	4693      	mov	fp, r2
 80009c0:	4652      	mov	r2, sl
 80009c2:	465b      	mov	r3, fp
 80009c4:	4620      	mov	r0, r4
 80009c6:	4629      	mov	r1, r5
 80009c8:	f7ff fc72 	bl	80002b0 <__aeabi_ldivmod>
 80009cc:	4602      	mov	r2, r0
 80009ce:	460b      	mov	r3, r1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	609a      	str	r2, [r3, #8]
    AxisValues.z = std::accumulate(RingBufferAxisZ.begin(), RingBufferAxisZ.end(), 0LL) / RingBufferAxisZ.size();
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	334c      	adds	r3, #76	; 0x4c
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f84a 	bl	8000a72 <_ZNSt5arrayIlLj6EE5beginEv>
 80009de:	4604      	mov	r4, r0
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	334c      	adds	r3, #76	; 0x4c
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f850 	bl	8000a8a <_ZNSt5arrayIlLj6EE3endEv>
 80009ea:	4601      	mov	r1, r0
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	4620      	mov	r0, r4
 80009f6:	f000 f87b 	bl	8000af0 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 80009fa:	4604      	mov	r4, r0
 80009fc:	460d      	mov	r5, r1
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	334c      	adds	r3, #76	; 0x4c
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f89a 	bl	8000b3c <_ZNKSt5arrayIlLj6EE4sizeEv>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	4691      	mov	r9, r2
 8000a10:	4642      	mov	r2, r8
 8000a12:	464b      	mov	r3, r9
 8000a14:	4620      	mov	r0, r4
 8000a16:	4629      	mov	r1, r5
 8000a18:	f7ff fc4a 	bl	80002b0 <__aeabi_ldivmod>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	460b      	mov	r3, r1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	60da      	str	r2, [r3, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000a2e <_ZN14IKS01A3_Motion12getAVGValuesEPlS0_S0_>:

void IKS01A3_Motion::getAVGValues(int32_t *XAxis, int32_t *YAxis,
		int32_t *ZAxis) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
    *XAxis=AxisValues.x+AxisOffsets.x;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	441a      	add	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	601a      	str	r2, [r3, #0]
    *YAxis=AxisValues.y+AxisOffsets.y;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	441a      	add	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
    *ZAxis=AxisValues.z+AxisOffsets.z;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	441a      	add	r2, r3
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_ZNSt5arrayIlLj6EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f869 	bl	8000b52 <_ZNSt5arrayIlLj6EE4dataEv>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_ZNSt5arrayIlLj6EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f85d 	bl	8000b52 <_ZNSt5arrayIlLj6EE4dataEv>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>:
   *  for each @p n in the range @p [0,__last-__first).
  */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      return std::__rotate(__first, __middle, __last,
 8000ab0:	68fc      	ldr	r4, [r7, #12]
			   std::__iterator_category(__first));
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f858 	bl	8000b6c <_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__rotate(__first, __middle, __last,
 8000abc:	462b      	mov	r3, r5
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f000 f85d 	bl	8000b82 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag>
 8000ac8:	4603      	mov	r3, r0
    }
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bdb0      	pop	{r4, r5, r7, pc}

08000ad2 <_ZNSt5arrayIlLj6EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f94c 	bl	8000d7e <_ZNSt14__array_traitsIlLj6EE6_S_refERA6_Klj>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZSt10accumulateIPlxET0_T_S2_S1_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 8000af0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	e9c7 2300 	strd	r2, r3, [r7]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d010      	beq.n	8000b2a <_ZSt10accumulateIPlxET0_T_S2_S1_+0x3a>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	17da      	asrs	r2, r3, #31
 8000b0e:	461c      	mov	r4, r3
 8000b10:	4615      	mov	r5, r2
 8000b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b16:	eb12 0804 	adds.w	r8, r2, r4
 8000b1a:	eb43 0905 	adc.w	r9, r3, r5
 8000b1e:	e9c7 8900 	strd	r8, r9, [r7]
      for (; __first != __last; ++__first)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3304      	adds	r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e7ea      	b.n	8000b00 <_ZSt10accumulateIPlxET0_T_S2_S1_+0x10>
      return __init;
 8000b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
    }
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000b3a:	4770      	bx	lr

08000b3c <_ZNKSt5arrayIlLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	2306      	movs	r3, #6
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_ZNSt5arrayIlLj6EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f91d 	bl	8000d9c <_ZNSt14__array_traitsIlLj6EE6_S_ptrERA6_Kl>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000b74:	bf00      	nop
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b08e      	sub	sp, #56	; 0x38
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d101      	bne.n	8000b9c <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1a>
	return __last;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	e0ec      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      else if (__last == __middle)
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d101      	bne.n	8000ba8 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x26>
	return __first;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	e0e6      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      _Distance __n = __last   - __first;
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	109b      	asrs	r3, r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
      _Distance __k = __middle - __first;
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	109b      	asrs	r3, r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
      if (__k == __n - __k)
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	1ad2      	subs	r2, r2, r3
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d106      	bne.n	8000bd6 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x54>
	  std::swap_ranges(__first, __middle, __middle);
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f000 f8f0 	bl	8000db2 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_>
	  return __middle;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	e0cf      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      _RandomAccessIterator __p = __first;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	623b      	str	r3, [r7, #32]
	  if (__k < __n - __k)
 8000be8:	69fa      	ldr	r2, [r7, #28]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	1ad2      	subs	r2, r2, r3
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dd59      	ble.n	8000ca8 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x126>
	      if (__is_pod(_ValueType) && __k == 1)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d121      	bne.n	8000c3e <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xbc>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8000bfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bfc:	f000 f8f3 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000c00:	4603      	mov	r3, r0
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8000c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c08:	1d18      	adds	r0, r3, #4
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c10:	4413      	add	r3, r2
 8000c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c14:	4619      	mov	r1, r3
 8000c16:	f000 f8f1 	bl	8000dfc <_ZSt4moveIPlS0_ET0_T_S2_S1_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f8e1 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000c24:	4601      	mov	r1, r0
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c34:	4413      	add	r3, r2
 8000c36:	680a      	ldr	r2, [r1, #0]
 8000c38:	601a      	str	r2, [r3, #0]
		  return __ret;
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	e09b      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      _RandomAccessIterator __q = __p + __k;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4413      	add	r3, r2
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	da0d      	bge.n	8000c74 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xf2>
		  std::iter_swap(__p, __q);
 8000c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c5c:	f000 f8e6 	bl	8000e2c <_ZSt9iter_swapIPlS0_EvT_T0_>
		  ++__p;
 8000c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c62:	3304      	adds	r3, #4
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
		  ++__q;
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	3304      	adds	r3, #4
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6e:	3301      	adds	r3, #1
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c72:	e7eb      	b.n	8000c4c <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xca>
	      __n %= __k;
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c7c:	fb01 f202 	mul.w	r2, r1, r2
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	61fb      	str	r3, [r7, #28]
	      if (__n == 0)
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x10c>
		return __ret;
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	e073      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      std::swap(__n, __k);
 8000c8e:	f107 0218 	add.w	r2, r7, #24
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f8df 	bl	8000e5c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	e79f      	b.n	8000be8 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
	      __k = __n - __k;
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	61bb      	str	r3, [r7, #24]
	      if (__is_pod(_ValueType) && __k == 1)
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d128      	bne.n	8000d08 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x186>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f88d 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	613b      	str	r3, [r7, #16]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce0:	18d1      	adds	r1, r2, r3
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce8:	4413      	add	r3, r2
 8000cea:	461a      	mov	r2, r3
 8000cec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cee:	f000 f8d4 	bl	8000e9a <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>
		  *__p = _GLIBCXX_MOVE(__t);
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f875 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	601a      	str	r2, [r3, #0]
		  return __ret;
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	e036      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      _RandomAccessIterator __q = __p + __n;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d0e:	4413      	add	r3, r2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
	      __p = __q - __k;
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	425b      	negs	r3, r3
 8000d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1a:	4413      	add	r3, r2
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	da0d      	bge.n	8000d4a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1c8>
		  --__p;
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	3b04      	subs	r3, #4
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
		  --__q;
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	3b04      	subs	r3, #4
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
		  std::iter_swap(__p, __q);
 8000d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d3e:	f000 f875 	bl	8000e2c <_ZSt9iter_swapIPlS0_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
 8000d48:	e7eb      	b.n	8000d22 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1a0>
	      __n %= __k;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d52:	fb01 f202 	mul.w	r2, r1, r2
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	61fb      	str	r3, [r7, #28]
	      if (__n == 0)
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1e2>
		return __ret;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	e008      	b.n	8000d76 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      std::swap(__n, __k);
 8000d64:	f107 0218 	add.w	r2, r7, #24
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f874 	bl	8000e5c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8000d74:	e738      	b.n	8000be8 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
    }
 8000d76:	4618      	mov	r0, r3
 8000d78:	3738      	adds	r7, #56	; 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_ZNSt14__array_traitsIlLj6EE6_S_refERA6_Klj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_ZNSt14__array_traitsIlLj6EE6_S_ptrERA6_Kl>:
      _S_ptr(const _Type& __t) noexcept
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_>:
   *  The ranges must not overlap.
  */
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
				  _ForwardIterator1>)
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator2>)
      __glibcxx_requires_valid_range(__first1, __last1);

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d00a      	beq.n	8000ddc <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_+0x2a>
	std::iter_swap(__first1, __first2);
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 f82f 	bl	8000e2c <_ZSt9iter_swapIPlS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e7f0      	b.n	8000dbe <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_+0xc>
      return __first2;
 8000ddc:	687b      	ldr	r3, [r7, #4]
    }
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_ZSt4moveIPlS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f000 f85e 	bl	8000eca <_ZSt12__miter_baseIPlET_S1_>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f000 f85a 	bl	8000eca <_ZSt12__miter_baseIPlET_S1_>
 8000e16:	4603      	mov	r3, r0
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f000 f85f 	bl	8000ee0 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_>
 8000e22:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}

08000e2c <_ZSt9iter_swapIPlS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 f874 	bl	8000f26 <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffed 	bl	8000e46 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f7ff ffe7 	bl	8000e46 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffde 	bl	8000e46 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	601a      	str	r2, [r3, #0]
    }
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8000e9a:	b590      	push	{r4, r7, lr}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f80f 	bl	8000eca <_ZSt12__miter_baseIPlET_S1_>
 8000eac:	4604      	mov	r4, r0
 8000eae:	68b8      	ldr	r0, [r7, #8]
 8000eb0:	f000 f80b 	bl	8000eca <_ZSt12__miter_baseIPlET_S1_>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f000 f852 	bl	8000f64 <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>
 8000ec0:	4603      	mov	r3, r0
					       std::__miter_base(__last),
					       __result);
    }
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}

08000eca <_ZSt12__miter_baseIPlET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f85c 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f000 f858 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000efa:	4605      	mov	r5, r0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f853 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4629      	mov	r1, r5
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f000 f858 	bl	8000fc0 <_ZSt14__copy_move_a1ILb1EPlS0_ET1_T0_S2_S1_>
 8000f10:	4602      	mov	r2, r0
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f862 	bl	8000fe0 <_ZSt12__niter_wrapIPlET_RKS1_S1_>
 8000f1c:	4603      	mov	r3, r0
    }
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}

08000f26 <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff58 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f36:	4603      	mov	r3, r0
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff ff52 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f42:	4603      	mov	r3, r0
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff49 	bl	8000de6 <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f54:	4603      	mov	r3, r0
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
    }
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f81a 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000f76:	4604      	mov	r4, r0
 8000f78:	68b8      	ldr	r0, [r7, #8]
 8000f7a:	f000 f816 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000f7e:	4605      	mov	r5, r0
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f811 	bl	8000faa <_ZSt12__niter_baseIPlET_S1_>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f000 f832 	bl	8000ff8 <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>
 8000f94:	4602      	mov	r2, r0
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f820 	bl	8000fe0 <_ZSt12__niter_wrapIPlET_RKS1_S1_>
 8000fa0:	4603      	mov	r3, r0
    }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}

08000faa <_ZSt12__niter_baseIPlET_S1_>:
    __niter_base(_Iterator __it)
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_ZSt14__copy_move_a1ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f821 	bl	8001018 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZSt12__niter_wrapIPlET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f815 	bl	8001038 <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 f815 	bl	8001058 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_>
 800102e:	4603      	mov	r3, r0
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 f822 	bl	8001092 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_>
 800104e:	4603      	mov	r3, r0
    }
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	109b      	asrs	r3, r3, #2
 800106c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	461a      	mov	r2, r3
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f009 fd23 	bl	800aac8 <memmove>
	  return __result + _Num;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4413      	add	r3, r2
	}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	109b      	asrs	r3, r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00a      	beq.n	80010c4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	425b      	negs	r3, r3
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	18d0      	adds	r0, r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	461a      	mov	r2, r3
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	f009 fd02 	bl	800aac8 <memmove>
	  return __result - _Num;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	425b      	negs	r3, r3
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
	}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <cpp_main>:
int32_t GyrAvgXAxis;
int32_t GyrAvgYAxis;
int32_t GyrAvgZAxis;
AccGyroSensor ObjAccGyroSensor;

void cpp_main(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	// Output to Console
	int cnt = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
	printf("CPP Main started!\n");
 80010e2:	4837      	ldr	r0, [pc, #220]	; (80011c0 <cpp_main+0xe8>)
 80010e4:	f009 fe8e 	bl	800ae04 <puts>
	printf("Cnt=%d",cnt); printf("\n");
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <cpp_main+0xec>)
 80010ec:	f009 fdee 	bl	800accc <iprintf>
 80010f0:	200a      	movs	r0, #10
 80010f2:	f009 fe03 	bl	800acfc <putchar>

	ObjAccGyroSensor.initSensor();
 80010f6:	4834      	ldr	r0, [pc, #208]	; (80011c8 <cpp_main+0xf0>)
 80010f8:	f7ff faf8 	bl	80006ec <_ZN13AccGyroSensor10initSensorEv>
	for(int i=0;i<6;i++) //fill the Ringbuffers
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b05      	cmp	r3, #5
 8001104:	dc06      	bgt.n	8001114 <cpp_main+0x3c>
	ObjAccGyroSensor.updateValues();
 8001106:	4830      	ldr	r0, [pc, #192]	; (80011c8 <cpp_main+0xf0>)
 8001108:	f7ff fb02 	bl	8000710 <_ZN13AccGyroSensor12updateValuesEv>
	for(int i=0;i<6;i++) //fill the Ringbuffers
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	e7f5      	b.n	8001100 <cpp_main+0x28>

	while (1)
		{
			ObjAccGyroSensor.updateValues();
 8001114:	482c      	ldr	r0, [pc, #176]	; (80011c8 <cpp_main+0xf0>)
 8001116:	f7ff fafb 	bl	8000710 <_ZN13AccGyroSensor12updateValuesEv>

			ObjAccGyroSensor.Acc.getAVGValues(&AccAvgXAxis, &AccAvgYAxis, &AccAvgZAxis);
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <cpp_main+0xf4>)
 800111c:	4a2c      	ldr	r2, [pc, #176]	; (80011d0 <cpp_main+0xf8>)
 800111e:	492d      	ldr	r1, [pc, #180]	; (80011d4 <cpp_main+0xfc>)
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <cpp_main+0x100>)
 8001122:	f7ff fc84 	bl	8000a2e <_ZN14IKS01A3_Motion12getAVGValuesEPlS0_S0_>
		    ObjAccGyroSensor.Gyro.getAVGValues(&GyrAvgXAxis, &GyrAvgYAxis, &GyrAvgZAxis);
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <cpp_main+0x104>)
 8001128:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <cpp_main+0x108>)
 800112a:	492e      	ldr	r1, [pc, #184]	; (80011e4 <cpp_main+0x10c>)
 800112c:	482e      	ldr	r0, [pc, #184]	; (80011e8 <cpp_main+0x110>)
 800112e:	f7ff fc7e 	bl	8000a2e <_ZN14IKS01A3_Motion12getAVGValuesEPlS0_S0_>

			if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	482d      	ldr	r0, [pc, #180]	; (80011ec <cpp_main+0x114>)
 8001138:	f006 fc9e 	bl	8007a78 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <cpp_main+0x80>
			{
				ObjAccGyroSensor.Acc.setZero();
 800114c:	4822      	ldr	r0, [pc, #136]	; (80011d8 <cpp_main+0x100>)
 800114e:	f7ff fb67 	bl	8000820 <_ZN14IKS01A3_Motion7setZeroEv>
				ObjAccGyroSensor.Gyro.setZero();
 8001152:	4825      	ldr	r0, [pc, #148]	; (80011e8 <cpp_main+0x110>)
 8001154:	f7ff fb64 	bl	8000820 <_ZN14IKS01A3_Motion7setZeroEv>
			}

		    printf("Acc.: \n");
 8001158:	4825      	ldr	r0, [pc, #148]	; (80011f0 <cpp_main+0x118>)
 800115a:	f009 fe53 	bl	800ae04 <puts>
		    printf("X-Axis: %d\n", (int)AccAvgXAxis);
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <cpp_main+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <cpp_main+0x11c>)
 8001166:	f009 fdb1 	bl	800accc <iprintf>
		    printf("Y-Axis: %d\n", (int)AccAvgYAxis);
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <cpp_main+0xf8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4821      	ldr	r0, [pc, #132]	; (80011f8 <cpp_main+0x120>)
 8001172:	f009 fdab 	bl	800accc <iprintf>
		    printf("Z-Axis: %d\n", (int)AccAvgZAxis);
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <cpp_main+0xf4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <cpp_main+0x124>)
 800117e:	f009 fda5 	bl	800accc <iprintf>

		    printf("Gyro.: \n");
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <cpp_main+0x128>)
 8001184:	f009 fe3e 	bl	800ae04 <puts>
		    printf("X-Axis: %d\n", (int)GyrAvgXAxis);
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <cpp_main+0x10c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <cpp_main+0x11c>)
 8001190:	f009 fd9c 	bl	800accc <iprintf>
		    printf("Y-Axis: %d\n", (int)GyrAvgYAxis);
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <cpp_main+0x108>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <cpp_main+0x120>)
 800119c:	f009 fd96 	bl	800accc <iprintf>
		    printf("Z-Axis: %d\n", (int)GyrAvgZAxis);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <cpp_main+0x104>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <cpp_main+0x124>)
 80011a8:	f009 fd90 	bl	800accc <iprintf>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4815      	ldr	r0, [pc, #84]	; (8001204 <cpp_main+0x12c>)
 80011b0:	f006 fc93 	bl	8007ada <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80011b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b8:	f005 fd76 	bl	8006ca8 <HAL_Delay>
			ObjAccGyroSensor.updateValues();
 80011bc:	e7aa      	b.n	8001114 <cpp_main+0x3c>
 80011be:	bf00      	nop
 80011c0:	0800bbe8 	.word	0x0800bbe8
 80011c4:	0800bbfc 	.word	0x0800bbfc
 80011c8:	200002b8 	.word	0x200002b8
 80011cc:	200002a8 	.word	0x200002a8
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	200002a0 	.word	0x200002a0
 80011d8:	20000330 	.word	0x20000330
 80011dc:	200002b4 	.word	0x200002b4
 80011e0:	200002b0 	.word	0x200002b0
 80011e4:	200002ac 	.word	0x200002ac
 80011e8:	200002cc 	.word	0x200002cc
 80011ec:	40020800 	.word	0x40020800
 80011f0:	0800bc04 	.word	0x0800bc04
 80011f4:	0800bc0c 	.word	0x0800bc0c
 80011f8:	0800bc18 	.word	0x0800bc18
 80011fc:	0800bc24 	.word	0x0800bc24
 8001200:	0800bc30 	.word	0x0800bc30
 8001204:	40020400 	.word	0x40020400

08001208 <_Z41__static_initialization_and_destruction_0ii>:
		}
}
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	4293      	cmp	r3, r2
 8001220:	d102      	bne.n	8001228 <_Z41__static_initialization_and_destruction_0ii+0x20>
AccGyroSensor ObjAccGyroSensor;
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001224:	f7ff fa16 	bl	8000654 <_ZN13AccGyroSensorC1Ev>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001234:	4293      	cmp	r3, r2
 8001236:	d102      	bne.n	800123e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800123a:	f7ff fa2f 	bl	800069c <_ZN13AccGyroSensorD1Ev>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002b8 	.word	0x200002b8

0800124c <_GLOBAL__sub_I_AccAvgXAxis>:
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
 8001250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ffd7 	bl	8001208 <_Z41__static_initialization_and_destruction_0ii>
 800125a:	bd80      	pop	{r7, pc}

0800125c <_GLOBAL__sub_D_AccAvgXAxis>:
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
 8001260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ffcf 	bl	8001208 <_Z41__static_initialization_and_destruction_0ii>
 800126a:	bd80      	pop	{r7, pc}

0800126c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001278:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001288:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800128c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001294:	e000      	b.n	8001298 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001296:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f005 fc94 	bl	8006bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f810 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 f922 	bl	8001510 <MX_GPIO_Init>
  MX_ETH_Init();
 80012cc:	f000 f874 	bl	80013b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012d0:	f000 f8c0 	bl	8001454 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d4:	f000 f8ee 	bl	80014b4 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <main+0x28>)
 80012da:	f009 fd93 	bl	800ae04 <puts>
	  cpp_main();
 80012de:	f7ff fefb 	bl	80010d8 <cpp_main>
	  printf(" C Main started!\n");
 80012e2:	e7f9      	b.n	80012d8 <main+0x1c>
 80012e4:	0800bc38 	.word	0x0800bc38

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f009 fc00 	bl	800aafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800130c:	f007 fb96 	bl	8008a3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <SystemClock_Config+0xc8>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xcc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xcc>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001348:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800135c:	2348      	movs	r3, #72	; 0x48
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001364:	2303      	movs	r3, #3
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f007 fb75 	bl	8008a5c <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f000 f988 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f007 fe03 	bl	8008fa4 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a4:	f000 f972 	bl	800168c <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ETH_Init+0x84>)
 80013be:	4a20      	ldr	r2, [pc, #128]	; (8001440 <MX_ETH_Init+0x88>)
 80013c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_ETH_Init+0x8c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_ETH_Init+0x8c>)
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_ETH_Init+0x8c>)
 80013d0:	22e1      	movs	r2, #225	; 0xe1
 80013d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_ETH_Init+0x8c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_ETH_Init+0x8c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_ETH_Init+0x8c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_ETH_Init+0x84>)
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <MX_ETH_Init+0x8c>)
 80013ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_ETH_Init+0x84>)
 80013ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ETH_Init+0x84>)
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <MX_ETH_Init+0x90>)
 80013f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_ETH_Init+0x84>)
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_ETH_Init+0x94>)
 80013fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_ETH_Init+0x84>)
 8001402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001406:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_ETH_Init+0x84>)
 800140a:	f005 fd57 	bl	8006ebc <HAL_ETH_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001414:	f000 f93a 	bl	800168c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001418:	2238      	movs	r2, #56	; 0x38
 800141a:	2100      	movs	r1, #0
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_ETH_Init+0x98>)
 800141e:	f009 fb6d 	bl	800aafc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_ETH_Init+0x98>)
 8001424:	2221      	movs	r2, #33	; 0x21
 8001426:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_ETH_Init+0x98>)
 800142a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800142e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_ETH_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200003cc 	.word	0x200003cc
 8001440:	40028000 	.word	0x40028000
 8001444:	20000a0c 	.word	0x20000a0c
 8001448:	200001e4 	.word	0x200001e4
 800144c:	20000144 	.word	0x20000144
 8001450:	20000394 	.word	0x20000394

08001454 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <MX_USART3_UART_Init+0x5c>)
 800145c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART3_UART_Init+0x58>)
 8001498:	f008 fb9a 	bl	8009bd0 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014a2:	f000 f8f3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000047c 	.word	0x2000047c
 80014b0:	40004800 	.word	0x40004800

080014b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c2:	2206      	movs	r2, #6
 80014c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2201      	movs	r2, #1
 80014dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f8:	f007 f957 	bl	80087aa <HAL_PCD_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001502:	f000 f8c3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000504 	.word	0x20000504

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <MX_GPIO_Init+0x134>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a46      	ldr	r2, [pc, #280]	; (8001644 <MX_GPIO_Init+0x134>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <MX_GPIO_Init+0x134>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <MX_GPIO_Init+0x134>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a40      	ldr	r2, [pc, #256]	; (8001644 <MX_GPIO_Init+0x134>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <MX_GPIO_Init+0x134>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x134>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <MX_GPIO_Init+0x134>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_GPIO_Init+0x134>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_GPIO_Init+0x134>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <MX_GPIO_Init+0x134>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_GPIO_Init+0x134>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <MX_GPIO_Init+0x134>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <MX_GPIO_Init+0x134>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_GPIO_Init+0x134>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_GPIO_Init+0x134>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <MX_GPIO_Init+0x134>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_GPIO_Init+0x134>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80015bc:	4822      	ldr	r0, [pc, #136]	; (8001648 <MX_GPIO_Init+0x138>)
 80015be:	f006 fa73 	bl	8007aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_GPIO_Init+0x13c>)
 80015c8:	f006 fa6e 	bl	8007aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481b      	ldr	r0, [pc, #108]	; (8001650 <MX_GPIO_Init+0x140>)
 80015e4:	f005 ff90 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Blue_Pin;
 80015e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_GPIO_Init+0x138>)
 8001602:	f005 ff81 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <MX_GPIO_Init+0x13c>)
 800161e:	f005 ff73 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_GPIO_Init+0x13c>)
 8001636:	f005 ff67 	bl	8007508 <HAL_GPIO_Init>

}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	; 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400
 800164c:	40021800 	.word	0x40021800
 8001650:	40020800 	.word	0x40020800

08001654 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fdfc 	bl	800126c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
  }
  return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x44>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x44>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x44>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x44>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x44>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a4e      	ldr	r2, [pc, #312]	; (8001838 <HAL_ETH_MspInit+0x158>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	f040 8096 	bne.w	8001830 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001704:	4b4d      	ldr	r3, [pc, #308]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800170a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b44      	ldr	r3, [pc, #272]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a40      	ldr	r2, [pc, #256]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800173a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a34      	ldr	r2, [pc, #208]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	4a2e      	ldr	r2, [pc, #184]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	6313      	str	r3, [r2, #48]	; 0x30
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_ETH_MspInit+0x15c>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_ETH_MspInit+0x15c>)
 800179a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_ETH_MspInit+0x15c>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ac:	2332      	movs	r3, #50	; 0x32
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017bc:	230b      	movs	r3, #11
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	481e      	ldr	r0, [pc, #120]	; (8001840 <HAL_ETH_MspInit+0x160>)
 80017c8:	f005 fe9e 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017cc:	2386      	movs	r3, #134	; 0x86
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017dc:	230b      	movs	r3, #11
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4817      	ldr	r0, [pc, #92]	; (8001844 <HAL_ETH_MspInit+0x164>)
 80017e8:	f005 fe8e 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80017ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017fe:	230b      	movs	r3, #11
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <HAL_ETH_MspInit+0x168>)
 800180a:	f005 fe7d 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800180e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001820:	230b      	movs	r3, #11
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <HAL_ETH_MspInit+0x16c>)
 800182c:	f005 fe6c 	bl	8007508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3738      	adds	r7, #56	; 0x38
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40028000 	.word	0x40028000
 800183c:	40023800 	.word	0x40023800
 8001840:	40020800 	.word	0x40020800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40021800 	.word	0x40021800

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0aa      	sub	sp, #168	; 0xa8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2284      	movs	r2, #132	; 0x84
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f009 f943 	bl	800aafc <memset>
  if(huart->Instance==USART3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_UART_MspInit+0xb4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13c      	bne.n	80018fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001884:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001886:	2300      	movs	r3, #0
 8001888:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f007 fdae 	bl	80093f0 <HAL_RCCEx_PeriphCLKConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800189a:	f7ff fef7 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0xb8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0xbc>)
 80018f6:	f005 fe07 	bl	8007508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	37a8      	adds	r7, #168	; 0xa8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40004800 	.word	0x40004800
 8001908:	40023800 	.word	0x40023800
 800190c:	40020c00 	.word	0x40020c00

08001910 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ac      	sub	sp, #176	; 0xb0
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	2284      	movs	r2, #132	; 0x84
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f009 f8e3 	bl	800aafc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800193e:	d159      	bne.n	80019f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001944:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4618      	mov	r0, r3
 8001952:	f007 fd4d 	bl	80093f0 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800195c:	f7ff fe96 	bl	800168c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_PCD_MspInit+0xec>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_PCD_MspInit+0xec>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_PCD_MspInit+0xec>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001978:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800197c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001992:	230a      	movs	r3, #10
 8001994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800199c:	4619      	mov	r1, r3
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <HAL_PCD_MspInit+0xf0>)
 80019a0:	f005 fdb2 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019bc:	4619      	mov	r1, r3
 80019be:	4810      	ldr	r0, [pc, #64]	; (8001a00 <HAL_PCD_MspInit+0xf0>)
 80019c0:	f005 fda2 	bl	8007508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ce:	6353      	str	r3, [r2, #52]	; 0x34
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e6:	6453      	str	r3, [r2, #68]	; 0x44
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_PCD_MspInit+0xec>)
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	37b0      	adds	r7, #176	; 0xb0
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f005 f90a 	bl	8006c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <BSP_I2C1_Init+0x70>)
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <BSP_I2C1_Init+0x74>)
 8001a66:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <BSP_I2C1_Init+0x78>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <BSP_I2C1_Init+0x78>)
 8001a70:	600a      	str	r2, [r1, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d122      	bne.n	8001abc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <BSP_I2C1_Init+0x70>)
 8001a78:	f006 fb4c 	bl	8008114 <HAL_I2C_GetState>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11c      	bne.n	8001abc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <BSP_I2C1_Init+0x70>)
 8001a84:	f000 f8fe 	bl	8001c84 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <BSP_I2C1_Init+0x70>)
 8001a90:	f000 f8b4 	bl	8001bfc <MX_I2C1_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a9a:	f06f 0307 	mvn.w	r3, #7
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	e00c      	b.n	8001abc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <BSP_I2C1_Init+0x70>)
 8001aa6:	f006 fde9 	bl	800867c <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001ab0:	f06f 0307 	mvn.w	r3, #7
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	e001      	b.n	8001abc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000a14 	.word	0x20000a14
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	20000a68 	.word	0x20000a68

08001ad4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <BSP_I2C1_DeInit+0x48>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d014      	beq.n	8001b10 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <BSP_I2C1_DeInit+0x48>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <BSP_I2C1_DeInit+0x48>)
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <BSP_I2C1_DeInit+0x48>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <BSP_I2C1_DeInit+0x4c>)
 8001afa:	f000 f925 	bl	8001d48 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <BSP_I2C1_DeInit+0x4c>)
 8001b00:	f006 f896 	bl	8007c30 <HAL_I2C_DeInit>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001b0a:	f06f 0307 	mvn.w	r3, #7
 8001b0e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000a68 	.word	0x20000a68
 8001b20:	20000a14 	.word	0x20000a14

08001b24 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	81fb      	strh	r3, [r7, #14]
 8001b32:	460b      	mov	r3, r1
 8001b34:	81bb      	strh	r3, [r7, #12]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b3e:	89ba      	ldrh	r2, [r7, #12]
 8001b40:	89f9      	ldrh	r1, [r7, #14]
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	480c      	ldr	r0, [pc, #48]	; (8001b84 <BSP_I2C1_WriteReg+0x60>)
 8001b54:	f006 f8b0 	bl	8007cb8 <HAL_I2C_Mem_Write>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <BSP_I2C1_WriteReg+0x60>)
 8001b60:	f006 fae6 	bl	8008130 <HAL_I2C_GetError>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d103      	bne.n	8001b72 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e002      	b.n	8001b78 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b72:	f06f 0303 	mvn.w	r3, #3
 8001b76:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b78:	697b      	ldr	r3, [r7, #20]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000a14 	.word	0x20000a14

08001b88 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	60ba      	str	r2, [r7, #8]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	460b      	mov	r3, r1
 8001b98:	81bb      	strh	r3, [r7, #12]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ba2:	89ba      	ldrh	r2, [r7, #12]
 8001ba4:	89f9      	ldrh	r1, [r7, #14]
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	480c      	ldr	r0, [pc, #48]	; (8001be8 <BSP_I2C1_ReadReg+0x60>)
 8001bb8:	f006 f992 	bl	8007ee0 <HAL_I2C_Mem_Read>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <BSP_I2C1_ReadReg+0x60>)
 8001bc4:	f006 fab4 	bl	8008130 <HAL_I2C_GetError>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d103      	bne.n	8001bd6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001bce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e002      	b.n	8001bdc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bd6:	f06f 0303 	mvn.w	r3, #3
 8001bda:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bdc:	697b      	ldr	r3, [r7, #20]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000a14 	.word	0x20000a14

08001bec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001bf0:	f005 f84e 	bl	8006c90 <HAL_GetTick>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <MX_I2C1_Init+0x80>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00808CD2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <MX_I2C1_Init+0x84>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f005 ff66 	bl	8007b10 <HAL_I2C_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f006 fd13 	bl	800867c <HAL_I2CEx_ConfigAnalogFilter>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f006 fd55 	bl	8008712 <HAL_I2CEx_ConfigDigitalFilter>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	00808cd2 	.word	0x00808cd2

08001c84 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0aa      	sub	sp, #168	; 0xa8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	2284      	movs	r2, #132	; 0x84
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f008 ff31 	bl	800aafc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f007 fba1 	bl	80093f0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ce6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cea:	4619      	mov	r1, r3
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <I2C1_MspInit+0xc0>)
 8001cee:	f005 fc0b 	bl	8007508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfa:	2312      	movs	r3, #18
 8001cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d16:	4619      	mov	r1, r3
 8001d18:	480a      	ldr	r0, [pc, #40]	; (8001d44 <I2C1_MspInit+0xc0>)
 8001d1a:	f005 fbf5 	bl	8007508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <I2C1_MspInit+0xbc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	37a8      	adds	r7, #168	; 0xa8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400

08001d48 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <I2C1_MspDeInit+0x30>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <I2C1_MspDeInit+0x30>)
 8001d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <I2C1_MspDeInit+0x34>)
 8001d62:	f005 fd7d 	bl	8007860 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6a:	4804      	ldr	r0, [pc, #16]	; (8001d7c <I2C1_MspDeInit+0x34>)
 8001d6c:	f005 fd78 	bl	8007860 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
	}

return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_close>:
	}
	return len;
}

int _close(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_isatty>:

int _isatty(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f008 fe06 	bl	800aa64 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20050000 	.word	0x20050000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	20000a6c 	.word	0x20000a6c
 8001e8c:	20000b60 	.word	0x20000b60

08001e90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ede:	f7ff ffd7 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f008 fdc5 	bl	800aa70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7ff f9e9 	bl	80012bc <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8001ef8:	0800bd34 	.word	0x0800bd34
  ldr r2, =_sbss
 8001efc:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8001f00:	20000b5c 	.word	0x20000b5c

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e04d      	b.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	7b1a      	ldrb	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <LIS2DW12_RegisterBusIO+0xc4>)
 8001f60:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <LIS2DW12_RegisterBusIO+0xc8>)
 8001f66:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e020      	b.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4798      	blx	r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e016      	b.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d112      	bne.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	461a      	mov	r2, r3
 8001fac:	2121      	movs	r1, #33	; 0x21
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fd87 	bl	8002ac2 <LIS2DW12_Write_Reg>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	08002e55 	.word	0x08002e55
 8001fd0:	08002e8b 	.word	0x08002e8b

08001fd4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	331c      	adds	r3, #28
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fa94 	bl	8003510 <lis2dw12_auto_increment_set>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	e04b      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	331c      	adds	r3, #28
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 f9a8 	bl	8003350 <lis2dw12_block_data_update_set>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e03f      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	331c      	adds	r3, #28
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f001 faa2 	bl	800355c <lis2dw12_fifo_mode_set>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e033      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	331c      	adds	r3, #28
 8002028:	2104      	movs	r1, #4
 800202a:	4618      	mov	r0, r3
 800202c:	f000 ff78 	bl	8002f20 <lis2dw12_power_mode_set>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e027      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <LIS2DW12_Init+0xc0>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	331c      	adds	r3, #28
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f869 	bl	8003130 <lis2dw12_data_rate_set>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e010      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	331c      	adds	r3, #28
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f001 f993 	bl	800339c <lis2dw12_full_scale_set>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	e004      	b.n	800208c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	42c80000 	.word	0x42c80000

08002098 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f888 	bl	80021b6 <LIS2DW12_ACC_Disable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	e010      	b.n	80020d4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	331c      	adds	r3, #28
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 f9fe 	bl	80034ee <lis2dw12_device_id_get>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	e000      	b.n	8002100 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2210      	movs	r2, #16
 8002134:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a06      	ldr	r2, [pc, #24]	; (8002160 <LIS2DW12_GetCapabilities+0x58>)
 8002148:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	44c80000 	.word	0x44c80000

08002164 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e019      	b.n	80021ae <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800218c:	461a      	mov	r2, r3
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fcb0 	bl	8002af8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e004      	b.n	80021ae <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e010      	b.n	80021ee <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	331c      	adds	r3, #28
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffac 	bl	8003130 <lis2dw12_data_rate_set>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e004      	b.n	80021ee <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	331c      	adds	r3, #28
 800220a:	f107 020b 	add.w	r2, r7, #11
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f001 f8e9 	bl	80033e8 <lis2dw12_full_scale_get>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e0a0      	b.n	8002364 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	331c      	adds	r3, #28
 8002226:	f107 020a 	add.w	r2, r7, #10
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fec5 	bl	8002fbc <lis2dw12_power_mode_get>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e092      	b.n	8002364 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800223e:	7abb      	ldrb	r3, [r7, #10]
 8002240:	2b1b      	cmp	r3, #27
 8002242:	f200 8087 	bhi.w	8002354 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	080022bd 	.word	0x080022bd
 8002250:	08002309 	.word	0x08002309
 8002254:	08002309 	.word	0x08002309
 8002258:	08002309 	.word	0x08002309
 800225c:	08002309 	.word	0x08002309
 8002260:	08002355 	.word	0x08002355
 8002264:	08002355 	.word	0x08002355
 8002268:	08002355 	.word	0x08002355
 800226c:	080022bd 	.word	0x080022bd
 8002270:	08002309 	.word	0x08002309
 8002274:	08002309 	.word	0x08002309
 8002278:	08002309 	.word	0x08002309
 800227c:	08002355 	.word	0x08002355
 8002280:	08002355 	.word	0x08002355
 8002284:	08002355 	.word	0x08002355
 8002288:	08002355 	.word	0x08002355
 800228c:	080022bd 	.word	0x080022bd
 8002290:	08002309 	.word	0x08002309
 8002294:	08002309 	.word	0x08002309
 8002298:	08002309 	.word	0x08002309
 800229c:	08002309 	.word	0x08002309
 80022a0:	08002355 	.word	0x08002355
 80022a4:	08002355 	.word	0x08002355
 80022a8:	08002355 	.word	0x08002355
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	08002309 	.word	0x08002309
 80022b4:	08002309 	.word	0x08002309
 80022b8:	08002309 	.word	0x08002309
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80022bc:	7afb      	ldrb	r3, [r7, #11]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d81a      	bhi.n	80022f8 <LIS2DW12_ACC_GetSensitivity+0x100>
 80022c2:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022e1 	.word	0x080022e1
 80022d0:	080022e9 	.word	0x080022e9
 80022d4:	080022f1 	.word	0x080022f1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4a24      	ldr	r2, [pc, #144]	; (800236c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80022dc:	601a      	str	r2, [r3, #0]
          break;
 80022de:	e012      	b.n	8002306 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80022e4:	601a      	str	r2, [r3, #0]
          break;
 80022e6:	e00e      	b.n	8002306 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4a22      	ldr	r2, [pc, #136]	; (8002374 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80022ec:	601a      	str	r2, [r3, #0]
          break;
 80022ee:	e00a      	b.n	8002306 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80022f4:	601a      	str	r2, [r3, #0]
          break;
 80022f6:	e006      	b.n	8002306 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80022fc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	60fb      	str	r3, [r7, #12]
          break;
 8002304:	bf00      	nop
      }
      break;
 8002306:	e02c      	b.n	8002362 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d81a      	bhi.n	8002344 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232d 	.word	0x0800232d
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233d 	.word	0x0800233d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002328:	601a      	str	r2, [r3, #0]
          break;
 800232a:	e012      	b.n	8002352 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002330:	601a      	str	r2, [r3, #0]
          break;
 8002332:	e00e      	b.n	8002352 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002338:	601a      	str	r2, [r3, #0]
          break;
 800233a:	e00a      	b.n	8002352 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002340:	601a      	str	r2, [r3, #0]
          break;
 8002342:	e006      	b.n	8002352 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002348:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	60fb      	str	r3, [r7, #12]
          break;
 8002350:	bf00      	nop
      }
      break;
 8002352:	e006      	b.n	8002362 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002358:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	60fb      	str	r3, [r7, #12]
      break;
 8002360:	bf00      	nop
  }

  return ret;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	3f79db23 	.word	0x3f79db23
 8002370:	3ff9db23 	.word	0x3ff9db23
 8002374:	4079db23 	.word	0x4079db23
 8002378:	40f9db23 	.word	0x40f9db23
 800237c:	bf800000 	.word	0xbf800000
 8002380:	3e79db23 	.word	0x3e79db23
 8002384:	3ef9db23 	.word	0x3ef9db23

08002388 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	331c      	adds	r3, #28
 800239a:	f107 020b 	add.w	r2, r7, #11
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 ff0b 	bl	80031bc <lis2dw12_data_rate_get>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	e1d4      	b.n	800275c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	331c      	adds	r3, #28
 80023b6:	f107 020a 	add.w	r2, r7, #10
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fdfd 	bl	8002fbc <lis2dw12_power_mode_get>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	e1c6      	b.n	800275c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	2b32      	cmp	r3, #50	; 0x32
 80023d2:	f200 81bb 	bhi.w	800274c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080024a9 	.word	0x080024a9
 80023e0:	080024b3 	.word	0x080024b3
 80023e4:	08002551 	.word	0x08002551
 80023e8:	08002559 	.word	0x08002559
 80023ec:	08002561 	.word	0x08002561
 80023f0:	08002569 	.word	0x08002569
 80023f4:	08002571 	.word	0x08002571
 80023f8:	08002579 	.word	0x08002579
 80023fc:	08002615 	.word	0x08002615
 8002400:	080026b1 	.word	0x080026b1
 8002404:	0800274d 	.word	0x0800274d
 8002408:	0800274d 	.word	0x0800274d
 800240c:	0800274d 	.word	0x0800274d
 8002410:	0800274d 	.word	0x0800274d
 8002414:	0800274d 	.word	0x0800274d
 8002418:	0800274d 	.word	0x0800274d
 800241c:	0800274d 	.word	0x0800274d
 8002420:	0800274d 	.word	0x0800274d
 8002424:	080024a9 	.word	0x080024a9
 8002428:	0800274d 	.word	0x0800274d
 800242c:	0800274d 	.word	0x0800274d
 8002430:	0800274d 	.word	0x0800274d
 8002434:	0800274d 	.word	0x0800274d
 8002438:	0800274d 	.word	0x0800274d
 800243c:	0800274d 	.word	0x0800274d
 8002440:	0800274d 	.word	0x0800274d
 8002444:	0800274d 	.word	0x0800274d
 8002448:	0800274d 	.word	0x0800274d
 800244c:	0800274d 	.word	0x0800274d
 8002450:	0800274d 	.word	0x0800274d
 8002454:	0800274d 	.word	0x0800274d
 8002458:	0800274d 	.word	0x0800274d
 800245c:	0800274d 	.word	0x0800274d
 8002460:	0800274d 	.word	0x0800274d
 8002464:	0800274d 	.word	0x0800274d
 8002468:	0800274d 	.word	0x0800274d
 800246c:	0800274d 	.word	0x0800274d
 8002470:	0800274d 	.word	0x0800274d
 8002474:	0800274d 	.word	0x0800274d
 8002478:	0800274d 	.word	0x0800274d
 800247c:	0800274d 	.word	0x0800274d
 8002480:	0800274d 	.word	0x0800274d
 8002484:	0800274d 	.word	0x0800274d
 8002488:	0800274d 	.word	0x0800274d
 800248c:	0800274d 	.word	0x0800274d
 8002490:	0800274d 	.word	0x0800274d
 8002494:	0800274d 	.word	0x0800274d
 8002498:	0800274d 	.word	0x0800274d
 800249c:	0800274d 	.word	0x0800274d
 80024a0:	0800274d 	.word	0x0800274d
 80024a4:	080024a9 	.word	0x080024a9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
      break;
 80024b0:	e153      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80024b2:	7abb      	ldrb	r3, [r7, #10]
 80024b4:	2b1b      	cmp	r3, #27
 80024b6:	d843      	bhi.n	8002540 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	08002539 	.word	0x08002539
 80024c4:	08002539 	.word	0x08002539
 80024c8:	08002539 	.word	0x08002539
 80024cc:	08002539 	.word	0x08002539
 80024d0:	08002531 	.word	0x08002531
 80024d4:	08002541 	.word	0x08002541
 80024d8:	08002541 	.word	0x08002541
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	08002539 	.word	0x08002539
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002541 	.word	0x08002541
 80024f8:	08002541 	.word	0x08002541
 80024fc:	08002541 	.word	0x08002541
 8002500:	08002539 	.word	0x08002539
 8002504:	08002539 	.word	0x08002539
 8002508:	08002539 	.word	0x08002539
 800250c:	08002539 	.word	0x08002539
 8002510:	08002531 	.word	0x08002531
 8002514:	08002541 	.word	0x08002541
 8002518:	08002541 	.word	0x08002541
 800251c:	08002541 	.word	0x08002541
 8002520:	08002539 	.word	0x08002539
 8002524:	08002539 	.word	0x08002539
 8002528:	08002539 	.word	0x08002539
 800252c:	08002539 	.word	0x08002539
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4a8c      	ldr	r2, [pc, #560]	; (8002764 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002534:	601a      	str	r2, [r3, #0]
          break;
 8002536:	e00a      	b.n	800254e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4a8b      	ldr	r2, [pc, #556]	; (8002768 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 800253c:	601a      	str	r2, [r3, #0]
          break;
 800253e:	e006      	b.n	800254e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4a8a      	ldr	r2, [pc, #552]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002544:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	60fb      	str	r3, [r7, #12]
          break;
 800254c:	bf00      	nop
      }
      break;
 800254e:	e104      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4a84      	ldr	r2, [pc, #528]	; (8002764 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002554:	601a      	str	r2, [r3, #0]
      break;
 8002556:	e100      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4a85      	ldr	r2, [pc, #532]	; (8002770 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 800255c:	601a      	str	r2, [r3, #0]
      break;
 800255e:	e0fc      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a84      	ldr	r2, [pc, #528]	; (8002774 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002564:	601a      	str	r2, [r3, #0]
      break;
 8002566:	e0f8      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4a83      	ldr	r2, [pc, #524]	; (8002778 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 800256c:	601a      	str	r2, [r3, #0]
      break;
 800256e:	e0f4      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a82      	ldr	r2, [pc, #520]	; (800277c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002574:	601a      	str	r2, [r3, #0]
      break;
 8002576:	e0f0      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002578:	7abb      	ldrb	r3, [r7, #10]
 800257a:	2b1b      	cmp	r3, #27
 800257c:	d842      	bhi.n	8002604 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025fd 	.word	0x080025fd
 8002588:	080025fd 	.word	0x080025fd
 800258c:	080025fd 	.word	0x080025fd
 8002590:	080025fd 	.word	0x080025fd
 8002594:	080025f5 	.word	0x080025f5
 8002598:	08002605 	.word	0x08002605
 800259c:	08002605 	.word	0x08002605
 80025a0:	08002605 	.word	0x08002605
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	080025fd 	.word	0x080025fd
 80025ac:	080025fd 	.word	0x080025fd
 80025b0:	080025fd 	.word	0x080025fd
 80025b4:	08002605 	.word	0x08002605
 80025b8:	08002605 	.word	0x08002605
 80025bc:	08002605 	.word	0x08002605
 80025c0:	08002605 	.word	0x08002605
 80025c4:	080025fd 	.word	0x080025fd
 80025c8:	080025fd 	.word	0x080025fd
 80025cc:	080025fd 	.word	0x080025fd
 80025d0:	080025fd 	.word	0x080025fd
 80025d4:	080025f5 	.word	0x080025f5
 80025d8:	08002605 	.word	0x08002605
 80025dc:	08002605 	.word	0x08002605
 80025e0:	08002605 	.word	0x08002605
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	080025fd 	.word	0x080025fd
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	080025fd 	.word	0x080025fd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4a62      	ldr	r2, [pc, #392]	; (8002780 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80025f8:	601a      	str	r2, [r3, #0]
          break;
 80025fa:	e00a      	b.n	8002612 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4a5f      	ldr	r2, [pc, #380]	; (800277c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002600:	601a      	str	r2, [r3, #0]
          break;
 8002602:	e006      	b.n	8002612 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4a59      	ldr	r2, [pc, #356]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002608:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	60fb      	str	r3, [r7, #12]
          break;
 8002610:	bf00      	nop
      }
      break;
 8002612:	e0a2      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002614:	7abb      	ldrb	r3, [r7, #10]
 8002616:	2b1b      	cmp	r3, #27
 8002618:	d842      	bhi.n	80026a0 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002699 	.word	0x08002699
 8002624:	08002699 	.word	0x08002699
 8002628:	08002699 	.word	0x08002699
 800262c:	08002699 	.word	0x08002699
 8002630:	08002691 	.word	0x08002691
 8002634:	080026a1 	.word	0x080026a1
 8002638:	080026a1 	.word	0x080026a1
 800263c:	080026a1 	.word	0x080026a1
 8002640:	08002699 	.word	0x08002699
 8002644:	08002699 	.word	0x08002699
 8002648:	08002699 	.word	0x08002699
 800264c:	08002699 	.word	0x08002699
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026a1 	.word	0x080026a1
 8002658:	080026a1 	.word	0x080026a1
 800265c:	080026a1 	.word	0x080026a1
 8002660:	08002699 	.word	0x08002699
 8002664:	08002699 	.word	0x08002699
 8002668:	08002699 	.word	0x08002699
 800266c:	08002699 	.word	0x08002699
 8002670:	08002691 	.word	0x08002691
 8002674:	080026a1 	.word	0x080026a1
 8002678:	080026a1 	.word	0x080026a1
 800267c:	080026a1 	.word	0x080026a1
 8002680:	08002699 	.word	0x08002699
 8002684:	08002699 	.word	0x08002699
 8002688:	08002699 	.word	0x08002699
 800268c:	08002699 	.word	0x08002699
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002694:	601a      	str	r2, [r3, #0]
          break;
 8002696:	e00a      	b.n	80026ae <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4a38      	ldr	r2, [pc, #224]	; (800277c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800269c:	601a      	str	r2, [r3, #0]
          break;
 800269e:	e006      	b.n	80026ae <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80026a4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	60fb      	str	r3, [r7, #12]
          break;
 80026ac:	bf00      	nop
      }
      break;
 80026ae:	e054      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80026b0:	7abb      	ldrb	r3, [r7, #10]
 80026b2:	2b1b      	cmp	r3, #27
 80026b4:	d842      	bhi.n	800273c <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80026b6:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	08002735 	.word	0x08002735
 80026c0:	08002735 	.word	0x08002735
 80026c4:	08002735 	.word	0x08002735
 80026c8:	08002735 	.word	0x08002735
 80026cc:	0800272d 	.word	0x0800272d
 80026d0:	0800273d 	.word	0x0800273d
 80026d4:	0800273d 	.word	0x0800273d
 80026d8:	0800273d 	.word	0x0800273d
 80026dc:	08002735 	.word	0x08002735
 80026e0:	08002735 	.word	0x08002735
 80026e4:	08002735 	.word	0x08002735
 80026e8:	08002735 	.word	0x08002735
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	0800273d 	.word	0x0800273d
 80026f4:	0800273d 	.word	0x0800273d
 80026f8:	0800273d 	.word	0x0800273d
 80026fc:	08002735 	.word	0x08002735
 8002700:	08002735 	.word	0x08002735
 8002704:	08002735 	.word	0x08002735
 8002708:	08002735 	.word	0x08002735
 800270c:	0800272d 	.word	0x0800272d
 8002710:	0800273d 	.word	0x0800273d
 8002714:	0800273d 	.word	0x0800273d
 8002718:	0800273d 	.word	0x0800273d
 800271c:	08002735 	.word	0x08002735
 8002720:	08002735 	.word	0x08002735
 8002724:	08002735 	.word	0x08002735
 8002728:	08002735 	.word	0x08002735
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002730:	601a      	str	r2, [r3, #0]
          break;
 8002732:	e00a      	b.n	800274a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002738:	601a      	str	r2, [r3, #0]
          break;
 800273a:	e006      	b.n	800274a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002740:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	60fb      	str	r3, [r7, #12]
          break;
 8002748:	bf00      	nop
      }
      break;
 800274a:	e006      	b.n	800275a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002750:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	60fb      	str	r3, [r7, #12]
      break;
 8002758:	bf00      	nop
  }

  return ret;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	41480000 	.word	0x41480000
 8002768:	3fcccccd 	.word	0x3fcccccd
 800276c:	bf800000 	.word	0xbf800000
 8002770:	41c80000 	.word	0x41c80000
 8002774:	42480000 	.word	0x42480000
 8002778:	42c80000 	.word	0x42c80000
 800277c:	43480000 	.word	0x43480000
 8002780:	43c80000 	.word	0x43c80000
 8002784:	44480000 	.word	0x44480000
 8002788:	44c80000 	.word	0x44c80000

0800278c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002798:	2200      	movs	r2, #0
 800279a:	2100      	movs	r1, #0
 800279c:	ed97 0a00 	vldr	s0, [r7]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f805 	bl	80027b0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027bc:	460b      	mov	r3, r1
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d109      	bne.n	80027e2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80027ce:	79ba      	ldrb	r2, [r7, #6]
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4619      	mov	r1, r3
 80027d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f98d 	bl	8002af8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80027de:	4603      	mov	r3, r0
 80027e0:	e008      	b.n	80027f4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80027e2:	79ba      	ldrb	r2, [r7, #6]
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4619      	mov	r1, r3
 80027e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fa9f 	bl	8002d30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80027f2:	4603      	mov	r3, r0
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	331c      	adds	r3, #28
 800280e:	f107 020b 	add.w	r2, r7, #11
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fde7 	bl	80033e8 <lis2dw12_full_scale_get>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
 8002824:	e027      	b.n	8002876 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d81b      	bhi.n	8002864 <LIS2DW12_ACC_GetFullScale+0x68>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <LIS2DW12_ACC_GetFullScale+0x38>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	0800284d 	.word	0x0800284d
 800283c:	08002855 	.word	0x08002855
 8002840:	0800285d 	.word	0x0800285d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2202      	movs	r2, #2
 8002848:	601a      	str	r2, [r3, #0]
      break;
 800284a:	e013      	b.n	8002874 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	601a      	str	r2, [r3, #0]
      break;
 8002852:	e00f      	b.n	8002874 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	601a      	str	r2, [r3, #0]
      break;
 800285a:	e00b      	b.n	8002874 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2210      	movs	r2, #16
 8002860:	601a      	str	r2, [r3, #0]
      break;
 8002862:	e007      	b.n	8002874 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	60fb      	str	r3, [r7, #12]
      break;
 8002872:	bf00      	nop
  }

  return ret;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop

08002880 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	dd0b      	ble.n	80028a8 <LIS2DW12_ACC_SetFullScale+0x28>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b04      	cmp	r3, #4
 8002894:	dd06      	ble.n	80028a4 <LIS2DW12_ACC_SetFullScale+0x24>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	dc01      	bgt.n	80028a0 <LIS2DW12_ACC_SetFullScale+0x20>
 800289c:	2302      	movs	r3, #2
 800289e:	e004      	b.n	80028aa <LIS2DW12_ACC_SetFullScale+0x2a>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e002      	b.n	80028aa <LIS2DW12_ACC_SetFullScale+0x2a>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LIS2DW12_ACC_SetFullScale+0x2a>
 80028a8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80028aa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	331c      	adds	r3, #28
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd71 	bl	800339c <lis2dw12_full_scale_set>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e000      	b.n	80028c8 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	331c      	adds	r3, #28
 80028e2:	f107 020b 	add.w	r2, r7, #11
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fb67 	bl	8002fbc <lis2dw12_power_mode_get>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	e089      	b.n	8002a0e <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	331c      	adds	r3, #28
 80028fe:	f107 020c 	add.w	r2, r7, #12
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fda7 	bl	8003458 <lis2dw12_acceleration_raw_get>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	e07b      	b.n	8002a0e <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	2b1b      	cmp	r3, #27
 800291a:	d873      	bhi.n	8002a04 <LIS2DW12_ACC_GetAxesRaw+0x134>
 800291c:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002995 	.word	0x08002995
 8002928:	080029cd 	.word	0x080029cd
 800292c:	080029cd 	.word	0x080029cd
 8002930:	080029cd 	.word	0x080029cd
 8002934:	080029cd 	.word	0x080029cd
 8002938:	08002a05 	.word	0x08002a05
 800293c:	08002a05 	.word	0x08002a05
 8002940:	08002a05 	.word	0x08002a05
 8002944:	08002995 	.word	0x08002995
 8002948:	080029cd 	.word	0x080029cd
 800294c:	080029cd 	.word	0x080029cd
 8002950:	080029cd 	.word	0x080029cd
 8002954:	08002a05 	.word	0x08002a05
 8002958:	08002a05 	.word	0x08002a05
 800295c:	08002a05 	.word	0x08002a05
 8002960:	08002a05 	.word	0x08002a05
 8002964:	08002995 	.word	0x08002995
 8002968:	080029cd 	.word	0x080029cd
 800296c:	080029cd 	.word	0x080029cd
 8002970:	080029cd 	.word	0x080029cd
 8002974:	080029cd 	.word	0x080029cd
 8002978:	08002a05 	.word	0x08002a05
 800297c:	08002a05 	.word	0x08002a05
 8002980:	08002a05 	.word	0x08002a05
 8002984:	08002995 	.word	0x08002995
 8002988:	080029cd 	.word	0x080029cd
 800298c:	080029cd 	.word	0x080029cd
 8002990:	080029cd 	.word	0x080029cd
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002994:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da00      	bge.n	800299e <LIS2DW12_ACC_GetAxesRaw+0xce>
 800299c:	330f      	adds	r3, #15
 800299e:	111b      	asrs	r3, r3, #4
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80029a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da00      	bge.n	80029b0 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80029ae:	330f      	adds	r3, #15
 80029b0:	111b      	asrs	r3, r3, #4
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80029b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da00      	bge.n	80029c2 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80029c0:	330f      	adds	r3, #15
 80029c2:	111b      	asrs	r3, r3, #4
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	809a      	strh	r2, [r3, #4]
      break;
 80029ca:	e01f      	b.n	8002a0c <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80029cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da00      	bge.n	80029d6 <LIS2DW12_ACC_GetAxesRaw+0x106>
 80029d4:	3303      	adds	r3, #3
 80029d6:	109b      	asrs	r3, r3, #2
 80029d8:	b21a      	sxth	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80029de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da00      	bge.n	80029e8 <LIS2DW12_ACC_GetAxesRaw+0x118>
 80029e6:	3303      	adds	r3, #3
 80029e8:	109b      	asrs	r3, r3, #2
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80029f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da00      	bge.n	80029fa <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80029f8:	3303      	adds	r3, #3
 80029fa:	109b      	asrs	r3, r3, #2
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	809a      	strh	r2, [r3, #4]
      break;
 8002a02:	e003      	b.n	8002a0c <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	617b      	str	r3, [r7, #20]
      break;
 8002a0a:	bf00      	nop
  }

  return ret;
 8002a0c:	697b      	ldr	r3, [r7, #20]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff4e 	bl	80028d0 <LIS2DW12_ACC_GetAxesRaw>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e03c      	b.n	8002aba <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fbd6 	bl	80021f8 <LIS2DW12_ACC_GetSensitivity>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e030      	b.n	8002aba <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002a58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a70:	ee17 2a90 	vmov	r2, s15
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002a78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a90:	ee17 2a90 	vmov	r2, s15
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab0:	ee17 2a90 	vmov	r2, s15
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 001c 	add.w	r0, r3, #28
 8002ad8:	1cba      	adds	r2, r7, #2
 8002ada:	78f9      	ldrb	r1, [r7, #3]
 8002adc:	2301      	movs	r3, #1
 8002ade:	f000 fa07 	bl	8002ef0 <lis2dw12_write_reg>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e000      	b.n	8002af0 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b04:	460b      	mov	r3, r1
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d80b      	bhi.n	8002b2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b59 	.word	0x08002b59
 8002b20:	08002b85 	.word	0x08002b85
 8002b24:	08002bb1 	.word	0x08002bb1
 8002b28:	08002bdd 	.word	0x08002bdd
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d002      	beq.n	8002b38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002b32:	2304      	movs	r3, #4
 8002b34:	75fb      	strb	r3, [r7, #23]
          break;
 8002b36:	e002      	b.n	8002b3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002b38:	2314      	movs	r3, #20
 8002b3a:	75fb      	strb	r3, [r7, #23]
          break;
 8002b3c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b42:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d400      	bmi.n	8002b52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002b50:	e05a      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002b54:	60bb      	str	r3, [r7, #8]
      break;
 8002b56:	e057      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002b58:	79bb      	ldrb	r3, [r7, #6]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	75fb      	strb	r3, [r7, #23]
          break;
 8002b62:	e002      	b.n	8002b6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002b64:	2313      	movs	r3, #19
 8002b66:	75fb      	strb	r3, [r7, #23]
          break;
 8002b68:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	dc00      	bgt.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002b7c:	e044      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002b7e:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b80:	60bb      	str	r3, [r7, #8]
      break;
 8002b82:	e041      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d002      	beq.n	8002b90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8002b8e:	e002      	b.n	8002b96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002b90:	2312      	movs	r3, #18
 8002b92:	75fb      	strb	r3, [r7, #23]
          break;
 8002b94:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	dc00      	bgt.n	8002baa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002ba8:	e02e      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002bac:	60bb      	str	r3, [r7, #8]
      break;
 8002bae:	e02b      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d002      	beq.n	8002bbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8002bba:	e002      	b.n	8002bc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002bbc:	2311      	movs	r3, #17
 8002bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8002bc0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	dc00      	bgt.n	8002bd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002bd4:	e018      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002bd6:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002bd8:	60bb      	str	r3, [r7, #8]
      break;
 8002bda:	e015      	b.n	8002c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d002      	beq.n	8002be8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
          break;
 8002be6:	e002      	b.n	8002bee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002be8:	2310      	movs	r3, #16
 8002bea:	75fb      	strb	r3, [r7, #23]
          break;
 8002bec:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	dc00      	bgt.n	8002c02 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002c00:	e001      	b.n	8002c06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002c02:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002c04:	60bb      	str	r3, [r7, #8]
      break;
 8002c06:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002d1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	d801      	bhi.n	8002c1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e04d      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c22:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d801      	bhi.n	8002c34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e042      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c38:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	d801      	bhi.n	8002c4a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e037      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c4e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d801      	bhi.n	8002c60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e02c      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	d801      	bhi.n	8002c76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002c72:	2305      	movs	r3, #5
 8002c74:	e021      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	d801      	bhi.n	8002c8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002c88:	2306      	movs	r3, #6
 8002c8a:	e016      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c90:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002d28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d801      	bhi.n	8002ca2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00b      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	d801      	bhi.n	8002cb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	e000      	b.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002cb8:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002cba:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	331c      	adds	r3, #28
 8002cc0:	7dba      	ldrb	r2, [r7, #22]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fa33 	bl	8003130 <lis2dw12_data_rate_set>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	e018      	b.n	8002d08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	331c      	adds	r3, #28
 8002cda:	7dfa      	ldrb	r2, [r7, #23]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f91e 	bl	8002f20 <lis2dw12_power_mode_set>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e00b      	b.n	8002d08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	79ba      	ldrb	r2, [r7, #6]
 8002d02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	41480000 	.word	0x41480000
 8002d14:	43480000 	.word	0x43480000
 8002d18:	43480000 	.word	0x43480000
 8002d1c:	3fcccccd 	.word	0x3fcccccd
 8002d20:	42480000 	.word	0x42480000
 8002d24:	42c80000 	.word	0x42c80000
 8002d28:	43c80000 	.word	0x43c80000
 8002d2c:	44480000 	.word	0x44480000

08002d30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	79fa      	ldrb	r2, [r7, #7]
 8002d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	79ba      	ldrb	r2, [r7, #6]
 8002d50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	d801      	bhi.n	8002d6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002d68:	e04d      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002d6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d6e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	d801      	bhi.n	8002d80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002d7e:	e042      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d84:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d801      	bhi.n	8002d96 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002d94:	e037      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d9a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d801      	bhi.n	8002dac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002daa:	e02c      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002dac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbc:	d801      	bhi.n	8002dc2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002dc0:	e021      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d801      	bhi.n	8002dd8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002dd6:	e016      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002dd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ddc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	d801      	bhi.n	8002dee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002dec:	e00b      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d801      	bhi.n	8002e04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002e02:	e000      	b.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	3fcccccd 	.word	0x3fcccccd
 8002e1c:	3fcccccd 	.word	0x3fcccccd
 8002e20:	41480000 	.word	0x41480000
 8002e24:	41c80000 	.word	0x41c80000
 8002e28:	42480000 	.word	0x42480000
 8002e2c:	42480000 	.word	0x42480000
 8002e30:	42c80000 	.word	0x42c80000
 8002e34:	42c80000 	.word	0x42c80000
 8002e38:	43480000 	.word	0x43480000
 8002e3c:	43480000 	.word	0x43480000
 8002e40:	43c80000 	.word	0x43c80000
 8002e44:	43c80000 	.word	0x43c80000
 8002e48:	44480000 	.word	0x44480000
 8002e4c:	44480000 	.word	0x44480000
 8002e50:	44c80000 	.word	0x44c80000

08002e54 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	460b      	mov	r3, r1
 8002e62:	72fb      	strb	r3, [r7, #11]
 8002e64:	4613      	mov	r3, r2
 8002e66:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	695c      	ldr	r4, [r3, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	7b1b      	ldrb	r3, [r3, #12]
 8002e74:	b298      	uxth	r0, r3
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	47a0      	blx	r4
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e8a:	b590      	push	{r4, r7, lr}
 8002e8c:	b087      	sub	sp, #28
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	691c      	ldr	r4, [r3, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	7b1b      	ldrb	r3, [r3, #12]
 8002eaa:	b298      	uxth	r0, r3
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	47a0      	blx	r4
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}

08002ec0 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	72fb      	strb	r3, [r7, #11]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685c      	ldr	r4, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6898      	ldr	r0, [r3, #8]
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	7af9      	ldrb	r1, [r7, #11]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	47a0      	blx	r4
 8002ee4:	6178      	str	r0, [r7, #20]

  return ret;
 8002ee6:	697b      	ldr	r3, [r7, #20]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	461a      	mov	r2, r3
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
 8002f00:	4613      	mov	r3, r2
 8002f02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681c      	ldr	r4, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6898      	ldr	r0, [r3, #8]
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	7af9      	ldrb	r1, [r7, #11]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	47a0      	blx	r4
 8002f14:	6178      	str	r0, [r7, #20]

  return ret;
 8002f16:	697b      	ldr	r3, [r7, #20]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}

08002f20 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f2c:	f107 0210 	add.w	r2, r7, #16
 8002f30:	2301      	movs	r3, #1
 8002f32:	2120      	movs	r1, #32
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ffc3 	bl	8002ec0 <lis2dw12_read_reg>
 8002f3a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	7c3b      	ldrb	r3, [r7, #16]
 8002f4e:	f362 0383 	bfi	r3, r2, #2, #2
 8002f52:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	7c3b      	ldrb	r3, [r7, #16]
 8002f5e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f62:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f64:	f107 0210 	add.w	r2, r7, #16
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffbf 	bl	8002ef0 <lis2dw12_write_reg>
 8002f72:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002f7a:	f107 020c 	add.w	r2, r7, #12
 8002f7e:	2301      	movs	r3, #1
 8002f80:	2125      	movs	r1, #37	; 0x25
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff9c 	bl	8002ec0 <lis2dw12_read_reg>
 8002f88:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d110      	bne.n	8002fb2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	7b3b      	ldrb	r3, [r7, #12]
 8002f9c:	f362 0382 	bfi	r3, r2, #2, #1
 8002fa0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	2125      	movs	r1, #37	; 0x25
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa0 	bl	8002ef0 <lis2dw12_write_reg>
 8002fb0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002fb2:	697b      	ldr	r3, [r7, #20]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002fc6:	f107 0210 	add.w	r2, r7, #16
 8002fca:	2301      	movs	r3, #1
 8002fcc:	2120      	movs	r1, #32
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff76 	bl	8002ec0 <lis2dw12_read_reg>
 8002fd4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 80a3 	bne.w	8003124 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002fde:	f107 020c 	add.w	r2, r7, #12
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2125      	movs	r1, #37	; 0x25
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff6a 	bl	8002ec0 <lis2dw12_read_reg>
 8002fec:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002fee:	7b3b      	ldrb	r3, [r7, #12]
 8002ff0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	011a      	lsls	r2, r3, #4
 8002ff8:	7c3b      	ldrb	r3, [r7, #16]
 8002ffa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8003004:	7c3a      	ldrb	r2, [r7, #16]
 8003006:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800300a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800300c:	4413      	add	r3, r2
 800300e:	2b1b      	cmp	r3, #27
 8003010:	f200 8084 	bhi.w	800311c <lis2dw12_power_mode_get+0x160>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <lis2dw12_power_mode_get+0x60>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	080030ad 	.word	0x080030ad
 8003020:	080030a5 	.word	0x080030a5
 8003024:	0800309d 	.word	0x0800309d
 8003028:	08003095 	.word	0x08003095
 800302c:	0800308d 	.word	0x0800308d
 8003030:	0800311d 	.word	0x0800311d
 8003034:	0800311d 	.word	0x0800311d
 8003038:	0800311d 	.word	0x0800311d
 800303c:	080030cd 	.word	0x080030cd
 8003040:	080030c5 	.word	0x080030c5
 8003044:	080030bd 	.word	0x080030bd
 8003048:	080030b5 	.word	0x080030b5
 800304c:	0800311d 	.word	0x0800311d
 8003050:	0800311d 	.word	0x0800311d
 8003054:	0800311d 	.word	0x0800311d
 8003058:	0800311d 	.word	0x0800311d
 800305c:	080030f5 	.word	0x080030f5
 8003060:	080030ed 	.word	0x080030ed
 8003064:	080030e5 	.word	0x080030e5
 8003068:	080030dd 	.word	0x080030dd
 800306c:	080030d5 	.word	0x080030d5
 8003070:	0800311d 	.word	0x0800311d
 8003074:	0800311d 	.word	0x0800311d
 8003078:	0800311d 	.word	0x0800311d
 800307c:	08003115 	.word	0x08003115
 8003080:	0800310d 	.word	0x0800310d
 8003084:	08003105 	.word	0x08003105
 8003088:	080030fd 	.word	0x080030fd
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2204      	movs	r2, #4
 8003090:	701a      	strb	r2, [r3, #0]
        break;
 8003092:	e048      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2203      	movs	r2, #3
 8003098:	701a      	strb	r2, [r3, #0]
        break;
 800309a:	e044      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
        break;
 80030a2:	e040      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
        break;
 80030aa:	e03c      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
        break;
 80030b2:	e038      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	220b      	movs	r2, #11
 80030b8:	701a      	strb	r2, [r3, #0]
        break;
 80030ba:	e034      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	220a      	movs	r2, #10
 80030c0:	701a      	strb	r2, [r3, #0]
        break;
 80030c2:	e030      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2209      	movs	r2, #9
 80030c8:	701a      	strb	r2, [r3, #0]
        break;
 80030ca:	e02c      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
        break;
 80030d2:	e028      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2214      	movs	r2, #20
 80030d8:	701a      	strb	r2, [r3, #0]
        break;
 80030da:	e024      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2213      	movs	r2, #19
 80030e0:	701a      	strb	r2, [r3, #0]
        break;
 80030e2:	e020      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2212      	movs	r2, #18
 80030e8:	701a      	strb	r2, [r3, #0]
        break;
 80030ea:	e01c      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2211      	movs	r2, #17
 80030f0:	701a      	strb	r2, [r3, #0]
        break;
 80030f2:	e018      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2210      	movs	r2, #16
 80030f8:	701a      	strb	r2, [r3, #0]
        break;
 80030fa:	e014      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	221b      	movs	r2, #27
 8003100:	701a      	strb	r2, [r3, #0]
        break;
 8003102:	e010      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	221a      	movs	r2, #26
 8003108:	701a      	strb	r2, [r3, #0]
        break;
 800310a:	e00c      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2219      	movs	r2, #25
 8003110:	701a      	strb	r2, [r3, #0]
        break;
 8003112:	e008      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2218      	movs	r2, #24
 8003118:	701a      	strb	r2, [r3, #0]
        break;
 800311a:	e004      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2204      	movs	r2, #4
 8003120:	701a      	strb	r2, [r3, #0]
        break;
 8003122:	e000      	b.n	8003126 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003124:	bf00      	nop

  return ret;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800313c:	f107 0210 	add.w	r2, r7, #16
 8003140:	2301      	movs	r3, #1
 8003142:	2120      	movs	r1, #32
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff febb 	bl	8002ec0 <lis2dw12_read_reg>
 800314a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	b2da      	uxtb	r2, r3
 800315a:	7c3b      	ldrb	r3, [r7, #16]
 800315c:	f362 1307 	bfi	r3, r2, #4, #4
 8003160:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003162:	f107 0210 	add.w	r2, r7, #16
 8003166:	2301      	movs	r3, #1
 8003168:	2120      	movs	r1, #32
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fec0 	bl	8002ef0 <lis2dw12_write_reg>
 8003170:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003178:	f107 020c 	add.w	r2, r7, #12
 800317c:	2301      	movs	r3, #1
 800317e:	2122      	movs	r1, #34	; 0x22
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fe9d 	bl	8002ec0 <lis2dw12_read_reg>
 8003186:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d110      	bne.n	80031b0 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	b2da      	uxtb	r2, r3
 8003198:	7b3b      	ldrb	r3, [r7, #12]
 800319a:	f362 0301 	bfi	r3, r2, #0, #2
 800319e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80031a0:	f107 020c 	add.w	r2, r7, #12
 80031a4:	2301      	movs	r3, #1
 80031a6:	2122      	movs	r1, #34	; 0x22
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fea1 	bl	8002ef0 <lis2dw12_write_reg>
 80031ae:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80031b0:	697b      	ldr	r3, [r7, #20]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80031c6:	f107 0210 	add.w	r2, r7, #16
 80031ca:	2301      	movs	r3, #1
 80031cc:	2120      	movs	r1, #32
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe76 	bl	8002ec0 <lis2dw12_read_reg>
 80031d4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 80b3 	bne.w	8003344 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80031de:	f107 020c 	add.w	r2, r7, #12
 80031e2:	2301      	movs	r3, #1
 80031e4:	2122      	movs	r1, #34	; 0x22
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fe6a 	bl	8002ec0 <lis2dw12_read_reg>
 80031ec:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80031ee:	7b3b      	ldrb	r3, [r7, #12]
 80031f0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	7c3a      	ldrb	r2, [r7, #16]
 80031fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4413      	add	r3, r2
 8003202:	2b32      	cmp	r3, #50	; 0x32
 8003204:	f200 809a 	bhi.w	800333c <lis2dw12_data_rate_get+0x180>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <lis2dw12_data_rate_get+0x54>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	080032dd 	.word	0x080032dd
 8003214:	080032e5 	.word	0x080032e5
 8003218:	080032ed 	.word	0x080032ed
 800321c:	080032f5 	.word	0x080032f5
 8003220:	080032fd 	.word	0x080032fd
 8003224:	08003305 	.word	0x08003305
 8003228:	0800330d 	.word	0x0800330d
 800322c:	08003315 	.word	0x08003315
 8003230:	0800331d 	.word	0x0800331d
 8003234:	08003325 	.word	0x08003325
 8003238:	0800333d 	.word	0x0800333d
 800323c:	0800333d 	.word	0x0800333d
 8003240:	0800333d 	.word	0x0800333d
 8003244:	0800333d 	.word	0x0800333d
 8003248:	0800333d 	.word	0x0800333d
 800324c:	0800333d 	.word	0x0800333d
 8003250:	0800333d 	.word	0x0800333d
 8003254:	0800333d 	.word	0x0800333d
 8003258:	08003335 	.word	0x08003335
 800325c:	0800333d 	.word	0x0800333d
 8003260:	0800333d 	.word	0x0800333d
 8003264:	0800333d 	.word	0x0800333d
 8003268:	0800333d 	.word	0x0800333d
 800326c:	0800333d 	.word	0x0800333d
 8003270:	0800333d 	.word	0x0800333d
 8003274:	0800333d 	.word	0x0800333d
 8003278:	0800333d 	.word	0x0800333d
 800327c:	0800333d 	.word	0x0800333d
 8003280:	0800333d 	.word	0x0800333d
 8003284:	0800333d 	.word	0x0800333d
 8003288:	0800333d 	.word	0x0800333d
 800328c:	0800333d 	.word	0x0800333d
 8003290:	0800333d 	.word	0x0800333d
 8003294:	0800333d 	.word	0x0800333d
 8003298:	0800333d 	.word	0x0800333d
 800329c:	0800333d 	.word	0x0800333d
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	0800333d 	.word	0x0800333d
 80032a8:	0800333d 	.word	0x0800333d
 80032ac:	0800333d 	.word	0x0800333d
 80032b0:	0800333d 	.word	0x0800333d
 80032b4:	0800333d 	.word	0x0800333d
 80032b8:	0800333d 	.word	0x0800333d
 80032bc:	0800333d 	.word	0x0800333d
 80032c0:	0800333d 	.word	0x0800333d
 80032c4:	0800333d 	.word	0x0800333d
 80032c8:	0800333d 	.word	0x0800333d
 80032cc:	0800333d 	.word	0x0800333d
 80032d0:	0800333d 	.word	0x0800333d
 80032d4:	0800333d 	.word	0x0800333d
 80032d8:	0800332d 	.word	0x0800332d
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
        break;
 80032e2:	e030      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
        break;
 80032ea:	e02c      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	701a      	strb	r2, [r3, #0]
        break;
 80032f2:	e028      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2203      	movs	r2, #3
 80032f8:	701a      	strb	r2, [r3, #0]
        break;
 80032fa:	e024      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2204      	movs	r2, #4
 8003300:	701a      	strb	r2, [r3, #0]
        break;
 8003302:	e020      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
        break;
 800330a:	e01c      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2206      	movs	r2, #6
 8003310:	701a      	strb	r2, [r3, #0]
        break;
 8003312:	e018      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2207      	movs	r2, #7
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	e014      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2208      	movs	r2, #8
 8003320:	701a      	strb	r2, [r3, #0]
        break;
 8003322:	e010      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2209      	movs	r2, #9
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	e00c      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2232      	movs	r2, #50	; 0x32
 8003330:	701a      	strb	r2, [r3, #0]
        break;
 8003332:	e008      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2212      	movs	r2, #18
 8003338:	701a      	strb	r2, [r3, #0]
        break;
 800333a:	e004      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
        break;
 8003342:	e000      	b.n	8003346 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003344:	bf00      	nop

  return ret;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800335c:	f107 0208 	add.w	r2, r7, #8
 8003360:	2301      	movs	r3, #1
 8003362:	2121      	movs	r1, #33	; 0x21
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fdab 	bl	8002ec0 <lis2dw12_read_reg>
 800336a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	7a3b      	ldrb	r3, [r7, #8]
 800337c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003380:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003382:	f107 0208 	add.w	r2, r7, #8
 8003386:	2301      	movs	r3, #1
 8003388:	2121      	movs	r1, #33	; 0x21
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fdb0 	bl	8002ef0 <lis2dw12_write_reg>
 8003390:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80033a8:	f107 0208 	add.w	r2, r7, #8
 80033ac:	2301      	movs	r3, #1
 80033ae:	2125      	movs	r1, #37	; 0x25
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fd85 	bl	8002ec0 <lis2dw12_read_reg>
 80033b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7a3b      	ldrb	r3, [r7, #8]
 80033c8:	f362 1305 	bfi	r3, r2, #4, #2
 80033cc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	2301      	movs	r3, #1
 80033d4:	2125      	movs	r1, #37	; 0x25
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fd8a 	bl	8002ef0 <lis2dw12_write_reg>
 80033dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80033f2:	f107 0208 	add.w	r2, r7, #8
 80033f6:	2301      	movs	r3, #1
 80033f8:	2125      	movs	r1, #37	; 0x25
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fd60 	bl	8002ec0 <lis2dw12_read_reg>
 8003400:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003402:	7a3b      	ldrb	r3, [r7, #8]
 8003404:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d81a      	bhi.n	8003444 <lis2dw12_full_scale_get+0x5c>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <lis2dw12_full_scale_get+0x2c>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003425 	.word	0x08003425
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003435 	.word	0x08003435
 8003420:	0800343d 	.word	0x0800343d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
      break;
 800342a:	e00f      	b.n	800344c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	e00b      	b.n	800344c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e007      	b.n	800344c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2203      	movs	r2, #3
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	e003      	b.n	800344c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	bf00      	nop
  }

  return ret;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop

08003458 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003462:	f107 020c 	add.w	r2, r7, #12
 8003466:	2306      	movs	r3, #6
 8003468:	2128      	movs	r1, #40	; 0x28
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fd28 	bl	8002ec0 <lis2dw12_read_reg>
 8003470:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	b21a      	sxth	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003480:	b29b      	uxth	r3, r3
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	b29a      	uxth	r2, r3
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	b29b      	uxth	r3, r3
 800348a:	4413      	add	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	b21a      	sxth	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3302      	adds	r3, #2
 800349a:	b212      	sxth	r2, r2
 800349c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	3302      	adds	r3, #2
 80034a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	7bbb      	ldrb	r3, [r7, #14]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	3302      	adds	r3, #2
 80034b8:	b212      	sxth	r2, r2
 80034ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80034bc:	7c7a      	ldrb	r2, [r7, #17]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	3304      	adds	r3, #4
 80034c2:	b212      	sxth	r2, r2
 80034c4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	3304      	adds	r3, #4
 80034ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	7c3b      	ldrb	r3, [r7, #16]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4413      	add	r3, r2
 80034da:	b29a      	uxth	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	3304      	adds	r3, #4
 80034e0:	b212      	sxth	r2, r2
 80034e2:	801a      	strh	r2, [r3, #0]

  return ret;
 80034e4:	697b      	ldr	r3, [r7, #20]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80034f8:	2301      	movs	r3, #1
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	210f      	movs	r1, #15
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fcde 	bl	8002ec0 <lis2dw12_read_reg>
 8003504:	60f8      	str	r0, [r7, #12]

  return ret;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800351c:	f107 0208 	add.w	r2, r7, #8
 8003520:	2301      	movs	r3, #1
 8003522:	2121      	movs	r1, #33	; 0x21
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fccb 	bl	8002ec0 <lis2dw12_read_reg>
 800352a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	7a3b      	ldrb	r3, [r7, #8]
 800353c:	f362 0382 	bfi	r3, r2, #2, #1
 8003540:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003542:	f107 0208 	add.w	r2, r7, #8
 8003546:	2301      	movs	r3, #1
 8003548:	2121      	movs	r1, #33	; 0x21
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fcd0 	bl	8002ef0 <lis2dw12_write_reg>
 8003550:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003568:	f107 0208 	add.w	r2, r7, #8
 800356c:	2301      	movs	r3, #1
 800356e:	212e      	movs	r1, #46	; 0x2e
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fca5 	bl	8002ec0 <lis2dw12_read_reg>
 8003576:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b2da      	uxtb	r2, r3
 8003586:	7a3b      	ldrb	r3, [r7, #8]
 8003588:	f362 1347 	bfi	r3, r2, #5, #3
 800358c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800358e:	f107 0208 	add.w	r2, r7, #8
 8003592:	2301      	movs	r3, #1
 8003594:	212e      	movs	r1, #46	; 0x2e
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fcaa 	bl	8002ef0 <lis2dw12_write_reg>
 800359c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e063      	b.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	7b1a      	ldrb	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a26      	ldr	r2, [pc, #152]	; (8003698 <LIS2MDL_RegisterBusIO+0xf0>)
 8003600:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a25      	ldr	r2, [pc, #148]	; (800369c <LIS2MDL_RegisterBusIO+0xf4>)
 8003606:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e036      	b.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4798      	blx	r3
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e02c      	b.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d123      	bne.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800364c:	2334      	movs	r3, #52	; 0x34
 800364e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	461a      	mov	r2, r3
 8003654:	2162      	movs	r1, #98	; 0x62
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb1b 	bl	8003c92 <LIS2MDL_Write_Reg>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e012      	b.n	800368e <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d101      	bne.n	8003674 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e00c      	b.n	800368e <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	331c      	adds	r3, #28
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ff70 	bl	8004560 <lis2mdl_i2c_interface_set>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	e000      	b.n	800368e <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	08003ce9 	.word	0x08003ce9
 800369c:	08003d6b 	.word	0x08003d6b

080036a0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d144      	bne.n	800373a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80036b0:	f107 0208 	add.w	r2, r7, #8
 80036b4:	2301      	movs	r3, #1
 80036b6:	2162      	movs	r1, #98	; 0x62
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fb97 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	e06c      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036ca:	f107 020c 	add.w	r2, r7, #12
 80036ce:	2301      	movs	r3, #1
 80036d0:	2160      	movs	r1, #96	; 0x60
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fb8a 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e05f      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80036e4:	7a3b      	ldrb	r3, [r7, #8]
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80036ec:	7a3b      	ldrb	r3, [r7, #8]
 80036ee:	f36f 0341 	bfc	r3, #1, #1
 80036f2:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80036f4:	7b3b      	ldrb	r3, [r7, #12]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f362 0301 	bfi	r3, r2, #0, #2
 80036fc:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80036fe:	7b3b      	ldrb	r3, [r7, #12]
 8003700:	f043 030c 	orr.w	r3, r3, #12
 8003704:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003706:	f107 0208 	add.w	r2, r7, #8
 800370a:	2301      	movs	r3, #1
 800370c:	2162      	movs	r1, #98	; 0x62
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fcab 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e041      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003720:	f107 020c 	add.w	r2, r7, #12
 8003724:	2301      	movs	r3, #1
 8003726:	2160      	movs	r1, #96	; 0x60
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fc9e 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d032      	beq.n	800379a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e034      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	331c      	adds	r3, #28
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fe65 	bl	8004410 <lis2mdl_block_data_update_set>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	e028      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	331c      	adds	r3, #28
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fdd4 	bl	8004306 <lis2mdl_operating_mode_set>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e01c      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	331c      	adds	r3, #28
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fdee 	bl	8004352 <lis2mdl_data_rate_set>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	e010      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	331c      	adds	r3, #28
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fec3 	bl	8004514 <lis2mdl_self_test_set>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	e004      	b.n	80037a4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8a5 	bl	8003904 <LIS2MDL_MAG_Disable>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	e004      	b.n	80037d0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d10b      	bne.n	8003802 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80037ea:	2301      	movs	r3, #1
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	214f      	movs	r1, #79	; 0x4f
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fafb 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e00c      	b.n	800381c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	331c      	adds	r3, #28
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fe72 	bl	80044f2 <lis2mdl_device_id_get>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e000      	b.n	800381c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2201      	movs	r2, #1
 800383e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2232      	movs	r2, #50	; 0x32
 8003856:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4a04      	ldr	r2, [pc, #16]	; (800387c <LIS2MDL_GetCapabilities+0x58>)
 800386c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	42c80000 	.word	0x42c80000

08003880 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e032      	b.n	80038fc <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d11d      	bne.n	80038da <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800389e:	f107 020c 	add.w	r2, r7, #12
 80038a2:	2301      	movs	r3, #1
 80038a4:	2160      	movs	r1, #96	; 0x60
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 faa0 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	e021      	b.n	80038fc <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80038b8:	7b3b      	ldrb	r3, [r7, #12]
 80038ba:	f36f 0301 	bfc	r3, #0, #2
 80038be:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80038c0:	f107 020c 	add.w	r2, r7, #12
 80038c4:	2301      	movs	r3, #1
 80038c6:	2160      	movs	r1, #96	; 0x60
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fbce 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	e010      	b.n	80038fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	331c      	adds	r3, #28
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd10 	bl	8004306 <lis2mdl_operating_mode_set>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295
 80038f0:	e004      	b.n	80038fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e033      	b.n	8003982 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d11e      	bne.n	8003960 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003922:	f107 020c 	add.w	r2, r7, #12
 8003926:	2301      	movs	r3, #1
 8003928:	2160      	movs	r1, #96	; 0x60
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa5e 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	e022      	b.n	8003982 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800393c:	7b3b      	ldrb	r3, [r7, #12]
 800393e:	2202      	movs	r2, #2
 8003940:	f362 0301 	bfi	r3, r2, #0, #2
 8003944:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003946:	f107 020c 	add.w	r2, r7, #12
 800394a:	2301      	movs	r3, #1
 800394c:	2160      	movs	r1, #96	; 0x60
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fb8b 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	e010      	b.n	8003982 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	331c      	adds	r3, #28
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fccd 	bl	8004306 <lis2mdl_operating_mode_set>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	e004      	b.n	8003982 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800399a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	331c      	adds	r3, #28
 80039be:	f107 020b 	add.w	r2, r7, #11
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fceb 	bl	80043a0 <lis2mdl_data_rate_get>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295
 80039d4:	e023      	b.n	8003a1e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d81b      	bhi.n	8003a14 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	080039fd 	.word	0x080039fd
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003a0d 	.word	0x08003a0d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80039f8:	601a      	str	r2, [r3, #0]
      break;
 80039fa:	e00f      	b.n	8003a1c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003a00:	601a      	str	r2, [r3, #0]
      break;
 8003a02:	e00b      	b.n	8003a1c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003a08:	601a      	str	r2, [r3, #0]
      break;
 8003a0a:	e007      	b.n	8003a1c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003a10:	601a      	str	r2, [r3, #0]
      break;
 8003a12:	e003      	b.n	8003a1c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	60fb      	str	r3, [r7, #12]
      break;
 8003a1a:	bf00      	nop
  }

  return ret;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	41200000 	.word	0x41200000
 8003a2c:	41a00000 	.word	0x41a00000
 8003a30:	42480000 	.word	0x42480000
 8003a34:	42c80000 	.word	0x42c80000

08003a38 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003a44:	edd7 7a00 	vldr	s15, [r7]
 8003a48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	d801      	bhi.n	8003a5a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003a56:	2300      	movs	r3, #0
 8003a58:	e016      	b.n	8003a88 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a5a:	edd7 7a00 	vldr	s15, [r7]
 8003a5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	d801      	bhi.n	8003a70 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e00b      	b.n	8003a88 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a70:	edd7 7a00 	vldr	s15, [r7]
 8003a74:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003afc <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d801      	bhi.n	8003a86 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e000      	b.n	8003a88 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a86:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003a88:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d121      	bne.n	8003ad6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a92:	f107 020c 	add.w	r2, r7, #12
 8003a96:	2301      	movs	r3, #1
 8003a98:	2160      	movs	r1, #96	; 0x60
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9a6 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	e022      	b.n	8003af2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	7b3b      	ldrb	r3, [r7, #12]
 8003ab6:	f362 0383 	bfi	r3, r2, #2, #2
 8003aba:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003abc:	f107 020c 	add.w	r2, r7, #12
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	2160      	movs	r1, #96	; 0x60
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fad0 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e00d      	b.n	8003af2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	331c      	adds	r3, #28
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fc37 	bl	8004352 <lis2mdl_data_rate_set>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e000      	b.n	8003af2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	42480000 	.word	0x42480000

08003b00 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2232      	movs	r2, #50	; 0x32
 8003b0e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	331c      	adds	r3, #28
 8003b44:	f107 0208 	add.w	r2, r7, #8
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fc86 	bl	800445c <lis2mdl_magnetic_raw_get>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	e00c      	b.n	8003b76 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d137      	bne.n	8003c00 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003b90:	f107 0218 	add.w	r2, r7, #24
 8003b94:	2306      	movs	r3, #6
 8003b96:	2168      	movs	r1, #104	; 0x68
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f927 	bl	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	e06f      	b.n	8003c8a <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003baa:	7e7b      	ldrb	r3, [r7, #25]
 8003bac:	b21b      	sxth	r3, r3
 8003bae:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003bb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	7e3b      	ldrb	r3, [r7, #24]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003bc6:	7efb      	ldrb	r3, [r7, #27]
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003bcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	7ebb      	ldrb	r3, [r7, #26]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003be2:	7f7b      	ldrb	r3, [r7, #29]
 8003be4:	b21b      	sxth	r3, r3
 8003be6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	7f3b      	ldrb	r3, [r7, #28]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	82bb      	strh	r3, [r7, #20]
 8003bfe:	e00d      	b.n	8003c1c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	331c      	adds	r3, #28
 8003c04:	f107 0210 	add.w	r2, r7, #16
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fc26 	bl	800445c <lis2mdl_magnetic_raw_get>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e036      	b.n	8003c8a <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff feb1 	bl	800398a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003c28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c40:	ee17 2a90 	vmov	r2, s15
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003c48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c60:	ee17 2a90 	vmov	r2, s15
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c80:	ee17 2a90 	vmov	r2, s15
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d10b      	bne.n	8003cc2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003caa:	1cba      	adds	r2, r7, #2
 8003cac:	78f9      	ldrb	r1, [r7, #3]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9da 	bl	800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	e00e      	b.n	8003ce0 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 001c 	add.w	r0, r3, #28
 8003cc8:	1cba      	adds	r2, r7, #2
 8003cca:	78f9      	ldrb	r1, [r7, #3]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f000 fb02 	bl	80042d6 <lis2mdl_write_reg>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e000      	b.n	8003ce0 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	72fb      	strb	r3, [r7, #11]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10e      	bne.n	8003d26 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	695c      	ldr	r4, [r3, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	7b1b      	ldrb	r3, [r3, #12]
 8003d10:	b298      	uxth	r0, r3
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	47a0      	blx	r4
 8003d22:	4603      	mov	r3, r0
 8003d24:	e01d      	b.n	8003d62 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d10b      	bne.n	8003d46 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	695c      	ldr	r4, [r3, #20]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	7b1b      	ldrb	r3, [r3, #12]
 8003d36:	b298      	uxth	r0, r3
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	b299      	uxth	r1, r3
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	47a0      	blx	r4
 8003d42:	4603      	mov	r3, r0
 8003d44:	e00d      	b.n	8003d62 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	695c      	ldr	r4, [r3, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	7b1b      	ldrb	r3, [r3, #12]
 8003d4e:	b298      	uxth	r0, r3
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	b299      	uxth	r1, r3
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	47a0      	blx	r4
 8003d60:	4603      	mov	r3, r0
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}

08003d6a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	461a      	mov	r2, r3
 8003d76:	460b      	mov	r3, r1
 8003d78:	72fb      	strb	r3, [r7, #11]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10e      	bne.n	8003da8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	691c      	ldr	r4, [r3, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	7b1b      	ldrb	r3, [r3, #12]
 8003d92:	b298      	uxth	r0, r3
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	47a0      	blx	r4
 8003da4:	4603      	mov	r3, r0
 8003da6:	e01d      	b.n	8003de4 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d10b      	bne.n	8003dc8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	691c      	ldr	r4, [r3, #16]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	7b1b      	ldrb	r3, [r3, #12]
 8003db8:	b298      	uxth	r0, r3
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	b299      	uxth	r1, r3
 8003dbe:	893b      	ldrh	r3, [r7, #8]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	47a0      	blx	r4
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	e00d      	b.n	8003de4 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	691c      	ldr	r4, [r3, #16]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	7b1b      	ldrb	r3, [r3, #12]
 8003dd0:	b298      	uxth	r0, r3
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	47a0      	blx	r4
 8003de2:	4603      	mov	r3, r0
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd90      	pop	{r4, r7, pc}

08003dec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	; 0x30
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	72fb      	strb	r3, [r7, #11]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003e06:	2340      	movs	r3, #64	; 0x40
 8003e08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003e12:	233d      	movs	r3, #61	; 0x3d
 8003e14:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003e16:	2315      	movs	r3, #21
 8003e18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003e1c:	2316      	movs	r3, #22
 8003e1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003e22:	2317      	movs	r3, #23
 8003e24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003e28:	2314      	movs	r3, #20
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003e2e:	2344      	movs	r3, #68	; 0x44
 8003e30:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003e32:	2302      	movs	r3, #2
 8003e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003e38:	2339      	movs	r3, #57	; 0x39
 8003e3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003e44:	2329      	movs	r3, #41	; 0x29
 8003e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003e4a:	231e      	movs	r3, #30
 8003e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003e56:	893b      	ldrh	r3, [r7, #8]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f103 001c 	add.w	r0, r3, #28
 8003e74:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003e78:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f000 fa2a 	bl	80042d6 <lis2mdl_write_reg>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	e0e9      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f103 001c 	add.w	r0, r3, #28
 8003e94:	f107 021f 	add.w	r2, r7, #31
 8003e98:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f000 fa1a 	bl	80042d6 <lis2mdl_write_reg>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	e0d9      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f103 001c 	add.w	r0, r3, #28
 8003eb4:	f107 020b 	add.w	r2, r7, #11
 8003eb8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f000 fa0a 	bl	80042d6 <lis2mdl_write_reg>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	e0c9      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f103 001c 	add.w	r0, r3, #28
 8003ed4:	f107 021d 	add.w	r2, r7, #29
 8003ed8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003edc:	2301      	movs	r3, #1
 8003ede:	f000 f9fa 	bl	80042d6 <lis2mdl_write_reg>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	e0b9      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f103 001c 	add.w	r0, r3, #28
 8003ef4:	f107 021e 	add.w	r2, r7, #30
 8003ef8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003efc:	2301      	movs	r3, #1
 8003efe:	f000 f9ea 	bl	80042d6 <lis2mdl_write_reg>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	e0a9      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 001c 	add.w	r0, r3, #28
 8003f14:	f107 0220 	add.w	r2, r7, #32
 8003f18:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f000 f9da 	bl	80042d6 <lis2mdl_write_reg>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	e099      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 001c 	add.w	r0, r3, #28
 8003f34:	f107 021c 	add.w	r2, r7, #28
 8003f38:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f000 f9b2 	bl	80042a6 <lis2mdl_read_reg>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4c:	e089      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003f4e:	7f3b      	ldrb	r3, [r7, #28]
 8003f50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d102      	bne.n	8003f5e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003f58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003f5c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f103 001c 	add.w	r0, r3, #28
 8003f64:	f107 021c 	add.w	r2, r7, #28
 8003f68:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f000 f9b2 	bl	80042d6 <lis2mdl_write_reg>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e071      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f103 001c 	add.w	r0, r3, #28
 8003f84:	f107 0214 	add.w	r2, r7, #20
 8003f88:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003f8c:	2306      	movs	r3, #6
 8003f8e:	f000 f98a 	bl	80042a6 <lis2mdl_read_reg>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	e061      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f103 001c 	add.w	r0, r3, #28
 8003fa4:	f107 021b 	add.w	r2, r7, #27
 8003fa8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003fac:	2301      	movs	r3, #1
 8003fae:	f000 f97a 	bl	80042a6 <lis2mdl_read_reg>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	e051      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003fbe:	7efa      	ldrb	r2, [r7, #27]
 8003fc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1e6      	bne.n	8003f9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f103 001c 	add.w	r0, r3, #28
 8003fd6:	f107 021b 	add.w	r2, r7, #27
 8003fda:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f000 f961 	bl	80042a6 <lis2mdl_read_reg>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	e038      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003ff0:	7efa      	ldrb	r2, [r7, #27]
 8003ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d1e6      	bne.n	8003fd0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f103 001c 	add.w	r0, r3, #28
 8004008:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800400c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004010:	2301      	movs	r3, #1
 8004012:	f000 f960 	bl	80042d6 <lis2mdl_write_reg>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
 8004020:	e01f      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f103 001c 	add.w	r0, r3, #28
 8004028:	893b      	ldrh	r3, [r7, #8]
 800402a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	f000 f939 	bl	80042a6 <lis2mdl_read_reg>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	e010      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f103 001c 	add.w	r0, r3, #28
 8004046:	f107 0220 	add.w	r2, r7, #32
 800404a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800404e:	2301      	movs	r3, #1
 8004050:	f000 f941 	bl	80042d6 <lis2mdl_write_reg>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	e000      	b.n	8004062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3730      	adds	r7, #48	; 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08c      	sub	sp, #48	; 0x30
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	461a      	mov	r2, r3
 8004076:	460b      	mov	r3, r1
 8004078:	72fb      	strb	r3, [r7, #11]
 800407a:	4613      	mov	r3, r2
 800407c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004090:	233c      	movs	r3, #60	; 0x3c
 8004092:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004094:	2315      	movs	r3, #21
 8004096:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800409a:	2316      	movs	r3, #22
 800409c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80040a0:	2317      	movs	r3, #23
 80040a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80040aa:	2314      	movs	r3, #20
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80040b0:	2344      	movs	r3, #68	; 0x44
 80040b2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80040b4:	2339      	movs	r3, #57	; 0x39
 80040b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80040c0:	2329      	movs	r3, #41	; 0x29
 80040c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80040c6:	231e      	movs	r3, #30
 80040c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80040d2:	2310      	movs	r3, #16
 80040d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80040e4:	230e      	movs	r3, #14
 80040e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f103 001c 	add.w	r0, r3, #28
 80040f0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80040f4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80040f8:	2301      	movs	r3, #1
 80040fa:	f000 f8ec 	bl	80042d6 <lis2mdl_write_reg>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
 8004108:	e0c9      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f103 001c 	add.w	r0, r3, #28
 8004110:	f107 021f 	add.w	r2, r7, #31
 8004114:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004118:	2301      	movs	r3, #1
 800411a:	f000 f8dc 	bl	80042d6 <lis2mdl_write_reg>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	e0b9      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f103 001c 	add.w	r0, r3, #28
 8004130:	f107 020b 	add.w	r2, r7, #11
 8004134:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004138:	2301      	movs	r3, #1
 800413a:	f000 f8cc 	bl	80042d6 <lis2mdl_write_reg>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	e0a9      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f103 001c 	add.w	r0, r3, #28
 8004150:	f107 021e 	add.w	r2, r7, #30
 8004154:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004158:	2301      	movs	r3, #1
 800415a:	f000 f8bc 	bl	80042d6 <lis2mdl_write_reg>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	e099      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f103 001c 	add.w	r0, r3, #28
 8004170:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004174:	2301      	movs	r3, #1
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	f000 f8ad 	bl	80042d6 <lis2mdl_write_reg>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	e08a      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f103 001c 	add.w	r0, r3, #28
 800418e:	f107 021d 	add.w	r2, r7, #29
 8004192:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004196:	2301      	movs	r3, #1
 8004198:	f000 f89d 	bl	80042d6 <lis2mdl_write_reg>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	e07a      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f103 001c 	add.w	r0, r3, #28
 80041ae:	f107 0220 	add.w	r2, r7, #32
 80041b2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80041b6:	2301      	movs	r3, #1
 80041b8:	f000 f88d 	bl	80042d6 <lis2mdl_write_reg>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e06a      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f103 001c 	add.w	r0, r3, #28
 80041ce:	f107 021c 	add.w	r2, r7, #28
 80041d2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80041d6:	2301      	movs	r3, #1
 80041d8:	f000 f865 	bl	80042a6 <lis2mdl_read_reg>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	e05a      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80041e8:	7f3b      	ldrb	r3, [r7, #28]
 80041ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d102      	bne.n	80041f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80041f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041f6:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f103 001c 	add.w	r0, r3, #28
 80041fe:	f107 021c 	add.w	r2, r7, #28
 8004202:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004206:	2301      	movs	r3, #1
 8004208:	f000 f865 	bl	80042d6 <lis2mdl_write_reg>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	e042      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f103 001c 	add.w	r0, r3, #28
 800421e:	f107 0214 	add.w	r2, r7, #20
 8004222:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004226:	2306      	movs	r3, #6
 8004228:	f000 f83d 	bl	80042a6 <lis2mdl_read_reg>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	e032      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f103 001c 	add.w	r0, r3, #28
 800423e:	f107 021b 	add.w	r2, r7, #27
 8004242:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004246:	2301      	movs	r3, #1
 8004248:	f000 f82d 	bl	80042a6 <lis2mdl_read_reg>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	e022      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004258:	7efa      	ldrb	r2, [r7, #27]
 800425a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800425e:	4013      	ands	r3, r2
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004266:	429a      	cmp	r2, r3
 8004268:	d1e6      	bne.n	8004238 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f103 001c 	add.w	r0, r3, #28
 8004270:	f107 021b 	add.w	r2, r7, #27
 8004274:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004278:	2301      	movs	r3, #1
 800427a:	f000 f814 	bl	80042a6 <lis2mdl_read_reg>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	e009      	b.n	800429e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800428a:	7efa      	ldrb	r2, [r7, #27]
 800428c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004290:	4013      	ands	r3, r2
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004298:	429a      	cmp	r2, r3
 800429a:	d1e6      	bne.n	800426a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3730      	adds	r7, #48	; 0x30
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80042a6:	b590      	push	{r4, r7, lr}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	461a      	mov	r2, r3
 80042b2:	460b      	mov	r3, r1
 80042b4:	72fb      	strb	r3, [r7, #11]
 80042b6:	4613      	mov	r3, r2
 80042b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685c      	ldr	r4, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6898      	ldr	r0, [r3, #8]
 80042c2:	893b      	ldrh	r3, [r7, #8]
 80042c4:	7af9      	ldrb	r1, [r7, #11]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	47a0      	blx	r4
 80042ca:	6178      	str	r0, [r7, #20]

  return ret;
 80042cc:	697b      	ldr	r3, [r7, #20]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd90      	pop	{r4, r7, pc}

080042d6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80042d6:	b590      	push	{r4, r7, lr}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	461a      	mov	r2, r3
 80042e2:	460b      	mov	r3, r1
 80042e4:	72fb      	strb	r3, [r7, #11]
 80042e6:	4613      	mov	r3, r2
 80042e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681c      	ldr	r4, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6898      	ldr	r0, [r3, #8]
 80042f2:	893b      	ldrh	r3, [r7, #8]
 80042f4:	7af9      	ldrb	r1, [r7, #11]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	47a0      	blx	r4
 80042fa:	6178      	str	r0, [r7, #20]

  return ret;
 80042fc:	697b      	ldr	r3, [r7, #20]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}

08004306 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004312:	f107 0208 	add.w	r2, r7, #8
 8004316:	2301      	movs	r3, #1
 8004318:	2160      	movs	r1, #96	; 0x60
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ffc3 	bl	80042a6 <lis2mdl_read_reg>
 8004320:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	7a3b      	ldrb	r3, [r7, #8]
 8004332:	f362 0301 	bfi	r3, r2, #0, #2
 8004336:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004338:	f107 0208 	add.w	r2, r7, #8
 800433c:	2301      	movs	r3, #1
 800433e:	2160      	movs	r1, #96	; 0x60
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ffc8 	bl	80042d6 <lis2mdl_write_reg>
 8004346:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004348:	68fb      	ldr	r3, [r7, #12]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800435e:	f107 0208 	add.w	r2, r7, #8
 8004362:	2301      	movs	r3, #1
 8004364:	2160      	movs	r1, #96	; 0x60
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ff9d 	bl	80042a6 <lis2mdl_read_reg>
 800436c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	b2da      	uxtb	r2, r3
 800437c:	7a3b      	ldrb	r3, [r7, #8]
 800437e:	f362 0383 	bfi	r3, r2, #2, #2
 8004382:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004384:	f107 0208 	add.w	r2, r7, #8
 8004388:	2301      	movs	r3, #1
 800438a:	2160      	movs	r1, #96	; 0x60
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ffa2 	bl	80042d6 <lis2mdl_write_reg>
 8004392:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80043aa:	f107 0208 	add.w	r2, r7, #8
 80043ae:	2301      	movs	r3, #1
 80043b0:	2160      	movs	r1, #96	; 0x60
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff77 	bl	80042a6 <lis2mdl_read_reg>
 80043b8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80043ba:	7a3b      	ldrb	r3, [r7, #8]
 80043bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d81a      	bhi.n	80043fc <lis2mdl_data_rate_get+0x5c>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <lis2mdl_data_rate_get+0x2c>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043e5 	.word	0x080043e5
 80043d4:	080043ed 	.word	0x080043ed
 80043d8:	080043f5 	.word	0x080043f5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
      break;
 80043e2:	e00f      	b.n	8004404 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
      break;
 80043ea:	e00b      	b.n	8004404 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2202      	movs	r2, #2
 80043f0:	701a      	strb	r2, [r3, #0]
      break;
 80043f2:	e007      	b.n	8004404 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2203      	movs	r2, #3
 80043f8:	701a      	strb	r2, [r3, #0]
      break;
 80043fa:	e003      	b.n	8004404 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
      break;
 8004402:	bf00      	nop
  }

  return ret;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800441c:	f107 0208 	add.w	r2, r7, #8
 8004420:	2301      	movs	r3, #1
 8004422:	2162      	movs	r1, #98	; 0x62
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ff3e 	bl	80042a6 <lis2mdl_read_reg>
 800442a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10f      	bne.n	8004452 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	7a3b      	ldrb	r3, [r7, #8]
 800443c:	f362 1304 	bfi	r3, r2, #4, #1
 8004440:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004442:	f107 0208 	add.w	r2, r7, #8
 8004446:	2301      	movs	r3, #1
 8004448:	2162      	movs	r1, #98	; 0x62
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff43 	bl	80042d6 <lis2mdl_write_reg>
 8004450:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004466:	f107 020c 	add.w	r2, r7, #12
 800446a:	2306      	movs	r3, #6
 800446c:	2168      	movs	r1, #104	; 0x68
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff19 	bl	80042a6 <lis2mdl_read_reg>
 8004474:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004476:	7b7b      	ldrb	r3, [r7, #13]
 8004478:	b21a      	sxth	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004484:	b29b      	uxth	r3, r3
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	b29a      	uxth	r2, r3
 800448a:	7b3b      	ldrb	r3, [r7, #12]
 800448c:	b29b      	uxth	r3, r3
 800448e:	4413      	add	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	b21a      	sxth	r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3302      	adds	r3, #2
 800449e:	b212      	sxth	r2, r2
 80044a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	3302      	adds	r3, #2
 80044a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	7bbb      	ldrb	r3, [r7, #14]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	3302      	adds	r3, #2
 80044bc:	b212      	sxth	r2, r2
 80044be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80044c0:	7c7a      	ldrb	r2, [r7, #17]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	3304      	adds	r3, #4
 80044c6:	b212      	sxth	r2, r2
 80044c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	7c3b      	ldrb	r3, [r7, #16]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4413      	add	r3, r2
 80044de:	b29a      	uxth	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3304      	adds	r3, #4
 80044e4:	b212      	sxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80044e8:	697b      	ldr	r3, [r7, #20]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80044fc:	2301      	movs	r3, #1
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	214f      	movs	r1, #79	; 0x4f
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fecf 	bl	80042a6 <lis2mdl_read_reg>
 8004508:	60f8      	str	r0, [r7, #12]

  return ret;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004520:	f107 0208 	add.w	r2, r7, #8
 8004524:	2301      	movs	r3, #1
 8004526:	2162      	movs	r1, #98	; 0x62
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff febc 	bl	80042a6 <lis2mdl_read_reg>
 800452e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	b2da      	uxtb	r2, r3
 800453e:	7a3b      	ldrb	r3, [r7, #8]
 8004540:	f362 0341 	bfi	r3, r2, #1, #1
 8004544:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	2301      	movs	r3, #1
 800454c:	2162      	movs	r1, #98	; 0x62
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fec1 	bl	80042d6 <lis2mdl_write_reg>
 8004554:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800456c:	f107 0208 	add.w	r2, r7, #8
 8004570:	2301      	movs	r3, #1
 8004572:	2162      	movs	r1, #98	; 0x62
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fe96 	bl	80042a6 <lis2mdl_read_reg>
 800457a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10f      	bne.n	80045a2 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	b2da      	uxtb	r2, r3
 800458a:	7a3b      	ldrb	r3, [r7, #8]
 800458c:	f362 1345 	bfi	r3, r2, #5, #1
 8004590:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004592:	f107 0208 	add.w	r2, r7, #8
 8004596:	2301      	movs	r3, #1
 8004598:	2162      	movs	r1, #98	; 0x62
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fe9b 	bl	80042d6 <lis2mdl_write_reg>
 80045a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e04d      	b.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	7b1a      	ldrb	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <LSM6DSO_RegisterBusIO+0xc4>)
 8004604:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <LSM6DSO_RegisterBusIO+0xc8>)
 800460a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e020      	b.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4798      	blx	r3
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e016      	b.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d112      	bne.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004648:	230c      	movs	r3, #12
 800464a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800464c:	7afb      	ldrb	r3, [r7, #11]
 800464e:	461a      	mov	r2, r3
 8004650:	2112      	movs	r1, #18
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff59 	bl	800550a <LSM6DSO_Write_Reg>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	080059ad 	.word	0x080059ad
 8004674:	080059e3 	.word	0x080059e3

08004678 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	331c      	adds	r3, #28
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	4618      	mov	r0, r3
 8004688:	f001 fe97 	bl	80063ba <lsm6dso_i3c_disable_set>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	e060      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	331c      	adds	r3, #28
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 fe65 	bl	800636e <lsm6dso_auto_increment_set>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e054      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	331c      	adds	r3, #28
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fd66 	bl	8006188 <lsm6dso_block_data_update_set>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e048      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	331c      	adds	r3, #28
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 feb9 	bl	8006446 <lsm6dso_fifo_mode_set>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	e03c      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2204      	movs	r2, #4
 80046e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	331c      	adds	r3, #28
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 fa20 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	e02c      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	331c      	adds	r3, #28
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f9b6 	bl	8005a78 <lsm6dso_xl_full_scale_set>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	e020      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2204      	movs	r2, #4
 800471c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	331c      	adds	r3, #28
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 fbd0 	bl	8005ecc <lsm6dso_gy_data_rate_set>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	e010      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	331c      	adds	r3, #28
 800473c:	2106      	movs	r1, #6
 800473e:	4618      	mov	r0, r3
 8004740:	f001 fb5c 	bl	8005dfc <lsm6dso_gy_full_scale_set>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e004      	b.n	800475a <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f888 	bl	8004880 <LSM6DSO_ACC_Disable>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	e015      	b.n	80047a8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fc2e 	bl	8004fde <LSM6DSO_GYRO_Disable>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
 800478c:	e00c      	b.n	80047a8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	331c      	adds	r3, #28
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fdc3 	bl	800634c <lsm6dso_device_id_get>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	e000      	b.n	80047d4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004804:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	4a07      	ldr	r2, [pc, #28]	; (8004834 <LSM6DSO_GetCapabilities+0x58>)
 8004816:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4a06      	ldr	r2, [pc, #24]	; (8004834 <LSM6DSO_GetCapabilities+0x58>)
 800481c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	45d02000 	.word	0x45d02000

08004838 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e014      	b.n	8004878 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 021c 	add.w	r2, r3, #28
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f001 f969 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e004      	b.n	8004878 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e01f      	b.n	80048d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 021c 	add.w	r2, r3, #28
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	332b      	adds	r3, #43	; 0x2b
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f001 fa42 	bl	8005d2c <lsm6dso_xl_data_rate_get>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
 80048b2:	e010      	b.n	80048d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	331c      	adds	r3, #28
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f93a 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	e004      	b.n	80048d6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	331c      	adds	r3, #28
 80048f2:	f107 020b 	add.w	r2, r7, #11
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 f8e3 	bl	8005ac4 <lsm6dso_xl_full_scale_get>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
 8004908:	e023      	b.n	8004952 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d81b      	bhi.n	8004948 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	08004941 	.word	0x08004941
 8004920:	08004931 	.word	0x08004931
 8004924:	08004939 	.word	0x08004939
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800492c:	601a      	str	r2, [r3, #0]
      break;
 800492e:	e00f      	b.n	8004950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004934:	601a      	str	r2, [r3, #0]
      break;
 8004936:	e00b      	b.n	8004950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800493c:	601a      	str	r2, [r3, #0]
      break;
 800493e:	e007      	b.n	8004950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004944:	601a      	str	r2, [r3, #0]
      break;
 8004946:	e003      	b.n	8004950 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	60fb      	str	r3, [r7, #12]
      break;
 800494e:	bf00      	nop
  }

  return ret;
 8004950:	68fb      	ldr	r3, [r7, #12]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	3d79db23 	.word	0x3d79db23
 8004960:	3df9db23 	.word	0x3df9db23
 8004964:	3e79db23 	.word	0x3e79db23
 8004968:	3ef9db23 	.word	0x3ef9db23

0800496c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	331c      	adds	r3, #28
 800497e:	f107 020b 	add.w	r2, r7, #11
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f9d1 	bl	8005d2c <lsm6dso_xl_data_rate_get>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	e054      	b.n	8004a40 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	2b0b      	cmp	r3, #11
 800499a:	d84c      	bhi.n	8004a36 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049d5 	.word	0x080049d5
 80049a8:	080049e7 	.word	0x080049e7
 80049ac:	080049ef 	.word	0x080049ef
 80049b0:	080049f7 	.word	0x080049f7
 80049b4:	080049ff 	.word	0x080049ff
 80049b8:	08004a07 	.word	0x08004a07
 80049bc:	08004a0f 	.word	0x08004a0f
 80049c0:	08004a17 	.word	0x08004a17
 80049c4:	08004a1f 	.word	0x08004a1f
 80049c8:	08004a27 	.word	0x08004a27
 80049cc:	08004a2f 	.word	0x08004a2f
 80049d0:	080049df 	.word	0x080049df
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
      break;
 80049dc:	e02f      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80049e2:	601a      	str	r2, [r3, #0]
      break;
 80049e4:	e02b      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80049ea:	601a      	str	r2, [r3, #0]
      break;
 80049ec:	e027      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80049f2:	601a      	str	r2, [r3, #0]
      break;
 80049f4:	e023      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80049fa:	601a      	str	r2, [r3, #0]
      break;
 80049fc:	e01f      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8004a02:	601a      	str	r2, [r3, #0]
      break;
 8004a04:	e01b      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004a0a:	601a      	str	r2, [r3, #0]
      break;
 8004a0c:	e017      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8004a12:	601a      	str	r2, [r3, #0]
      break;
 8004a14:	e013      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004a1a:	601a      	str	r2, [r3, #0]
      break;
 8004a1c:	e00f      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8004a22:	601a      	str	r2, [r3, #0]
      break;
 8004a24:	e00b      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004a2a:	601a      	str	r2, [r3, #0]
      break;
 8004a2c:	e007      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8004a32:	601a      	str	r2, [r3, #0]
      break;
 8004a34:	e003      	b.n	8004a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	60fb      	str	r3, [r7, #12]
      break;
 8004a3c:	bf00      	nop
  }

  return ret;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	3fcccccd 	.word	0x3fcccccd
 8004a4c:	41480000 	.word	0x41480000
 8004a50:	41d00000 	.word	0x41d00000
 8004a54:	42500000 	.word	0x42500000
 8004a58:	42d00000 	.word	0x42d00000
 8004a5c:	43500000 	.word	0x43500000
 8004a60:	43d08000 	.word	0x43d08000
 8004a64:	44504000 	.word	0x44504000
 8004a68:	44d06000 	.word	0x44d06000
 8004a6c:	45505000 	.word	0x45505000
 8004a70:	45d05800 	.word	0x45d05800

08004a74 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004a80:	2100      	movs	r1, #0
 8004a82:	ed97 0a00 	vldr	s0, [r7]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f806 	bl	8004a98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004a8c:	4603      	mov	r3, r0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08c      	sub	sp, #48	; 0x30
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	f000 80ea 	beq.w	8004c8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f300 8163 	bgt.w	8004d84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d074      	beq.n	8004bb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004ac6:	e15d      	b.n	8004d84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f103 001c 	add.w	r0, r3, #28
 8004ace:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	2114      	movs	r1, #20
 8004ad6:	f000 ff9f 	bl	8005a18 <lsm6dso_read_reg>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	e16c      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d025      	beq.n	8004b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d10b      	bne.n	8004b16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	331c      	adds	r3, #28
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f815 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	e154      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004b16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b1a:	f36f 13c7 	bfc	r3, #7, #1
 8004b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f103 001c 	add.w	r0, r3, #28
 8004b28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	2114      	movs	r1, #20
 8004b30:	f000 ff8a 	bl	8005a48 <lsm6dso_write_reg>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3e:	e13f      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f103 001c 	add.w	r0, r3, #28
 8004b46:	f107 0220 	add.w	r2, r7, #32
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	2115      	movs	r1, #21
 8004b4e:	f000 ff63 	bl	8005a18 <lsm6dso_read_reg>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	e130      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d014      	beq.n	8004b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b70:	f36f 1304 	bfc	r3, #4, #1
 8004b74:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f103 001c 	add.w	r0, r3, #28
 8004b7e:	f107 0220 	add.w	r2, r7, #32
 8004b82:	2301      	movs	r3, #1
 8004b84:	2115      	movs	r1, #21
 8004b86:	f000 ff5f 	bl	8005a48 <lsm6dso_write_reg>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
 8004b94:	e114      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004b96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b9a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d400      	bmi.n	8004baa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004ba8:	e0f0      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004baa:	4b87      	ldr	r3, [pc, #540]	; (8004dc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bae:	e0ed      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f103 001c 	add.w	r0, r3, #28
 8004bb6:	f107 021c 	add.w	r2, r7, #28
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2114      	movs	r1, #20
 8004bbe:	f000 ff2b 	bl	8005a18 <lsm6dso_read_reg>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	e0f8      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004bce:	7f3b      	ldrb	r3, [r7, #28]
 8004bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d023      	beq.n	8004c22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10b      	bne.n	8004bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	331c      	adds	r3, #28
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 ffa2 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e0e1      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004bfc:	7f3b      	ldrb	r3, [r7, #28]
 8004bfe:	f36f 13c7 	bfc	r3, #7, #1
 8004c02:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f103 001c 	add.w	r0, r3, #28
 8004c0a:	f107 021c 	add.w	r2, r7, #28
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2114      	movs	r1, #20
 8004c12:	f000 ff19 	bl	8005a48 <lsm6dso_write_reg>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e0ce      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f103 001c 	add.w	r0, r3, #28
 8004c28:	f107 0218 	add.w	r2, r7, #24
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	2115      	movs	r1, #21
 8004c30:	f000 fef2 	bl	8005a18 <lsm6dso_read_reg>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e0bf      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004c40:	7e3b      	ldrb	r3, [r7, #24]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d112      	bne.n	8004c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004c4c:	7e3b      	ldrb	r3, [r7, #24]
 8004c4e:	f043 0310 	orr.w	r3, r3, #16
 8004c52:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f103 001c 	add.w	r0, r3, #28
 8004c5a:	f107 0218 	add.w	r2, r7, #24
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2115      	movs	r1, #21
 8004c62:	f000 fef1 	bl	8005a48 <lsm6dso_write_reg>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	e0a6      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004c72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c76:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004dcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	dc00      	bgt.n	8004c86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004c84:	e082      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004c86:	4b52      	ldr	r3, [pc, #328]	; (8004dd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8a:	e07f      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f103 001c 	add.w	r0, r3, #28
 8004c92:	f107 0210 	add.w	r2, r7, #16
 8004c96:	2301      	movs	r3, #1
 8004c98:	2115      	movs	r1, #21
 8004c9a:	f000 febd 	bl	8005a18 <lsm6dso_read_reg>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	e08a      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004caa:	7c3b      	ldrb	r3, [r7, #16]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004cb6:	7c3b      	ldrb	r3, [r7, #16]
 8004cb8:	f36f 1304 	bfc	r3, #4, #1
 8004cbc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f103 001c 	add.w	r0, r3, #28
 8004cc4:	f107 0210 	add.w	r2, r7, #16
 8004cc8:	2301      	movs	r3, #1
 8004cca:	2115      	movs	r1, #21
 8004ccc:	f000 febc 	bl	8005a48 <lsm6dso_write_reg>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cda:	e071      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f979 	bl	8004fde <LSM6DSO_GYRO_Disable>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	e063      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f103 001c 	add.w	r0, r3, #28
 8004cfe:	f107 0214 	add.w	r2, r7, #20
 8004d02:	2301      	movs	r3, #1
 8004d04:	2114      	movs	r1, #20
 8004d06:	f000 fe87 	bl	8005a18 <lsm6dso_read_reg>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	e054      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004d16:	7d3b      	ldrb	r3, [r7, #20]
 8004d18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d123      	bne.n	8004d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10b      	bne.n	8004d44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	331c      	adds	r3, #28
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fefe 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e03d      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004d44:	7d3b      	ldrb	r3, [r7, #20]
 8004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f103 001c 	add.w	r0, r3, #28
 8004d52:	f107 0214 	add.w	r2, r7, #20
 8004d56:	2301      	movs	r3, #1
 8004d58:	2114      	movs	r1, #20
 8004d5a:	f000 fe75 	bl	8005a48 <lsm6dso_write_reg>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	e02a      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004d6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004d6e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004dcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	dc00      	bgt.n	8004d7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004d7c:	e006      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d82:	e003      	b.n	8004d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d8a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d102      	bne.n	8004d9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004d94:	f04f 33ff 	mov.w	r3, #4294967295
 8004d98:	e012      	b.n	8004dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004da4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fbc9 	bl	8005540 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004dae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004db0:	e005      	b.n	8004dbe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004db2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fc5a 	bl	8005670 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3730      	adds	r7, #48	; 0x30
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	41480000 	.word	0x41480000
 8004dcc:	43500000 	.word	0x43500000
 8004dd0:	43500000 	.word	0x43500000

08004dd4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	331c      	adds	r3, #28
 8004de6:	f107 020b 	add.w	r2, r7, #11
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fe69 	bl	8005ac4 <lsm6dso_xl_full_scale_get>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	e023      	b.n	8004e46 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004dfe:	7afb      	ldrb	r3, [r7, #11]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d81b      	bhi.n	8004e3c <LSM6DSO_ACC_GetFullScale+0x68>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <LSM6DSO_ACC_GetFullScale+0x38>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e2d 	.word	0x08004e2d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	601a      	str	r2, [r3, #0]
      break;
 8004e22:	e00f      	b.n	8004e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2204      	movs	r2, #4
 8004e28:	601a      	str	r2, [r3, #0]
      break;
 8004e2a:	e00b      	b.n	8004e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2208      	movs	r2, #8
 8004e30:	601a      	str	r2, [r3, #0]
      break;
 8004e32:	e007      	b.n	8004e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	601a      	str	r2, [r3, #0]
      break;
 8004e3a:	e003      	b.n	8004e44 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	60fb      	str	r3, [r7, #12]
      break;
 8004e42:	bf00      	nop
  }

  return ret;
 8004e44:	68fb      	ldr	r3, [r7, #12]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	dd0b      	ble.n	8004e78 <LSM6DSO_ACC_SetFullScale+0x28>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	dd06      	ble.n	8004e74 <LSM6DSO_ACC_SetFullScale+0x24>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	dc01      	bgt.n	8004e70 <LSM6DSO_ACC_SetFullScale+0x20>
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e004      	b.n	8004e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e002      	b.n	8004e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e000      	b.n	8004e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004e7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	331c      	adds	r3, #28
 8004e80:	7bfa      	ldrb	r2, [r7, #15]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fdf7 	bl	8005a78 <lsm6dso_xl_full_scale_set>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e000      	b.n	8004e98 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	331c      	adds	r3, #28
 8004eae:	f107 0208 	add.w	r2, r7, #8
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 f9d8 	bl	800626a <lsm6dso_acceleration_raw_get>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec4:	e00c      	b.n	8004ee0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ec6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ece:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ed6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	331c      	adds	r3, #28
 8004efc:	f107 0210 	add.w	r2, r7, #16
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 f9b1 	bl	800626a <lsm6dso_acceleration_raw_get>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	e03c      	b.n	8004f8e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fce0 	bl	80048e0 <LSM6DSO_ACC_GetSensitivity>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e030      	b.n	8004f8e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004f2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f44:	ee17 2a90 	vmov	r2, s15
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f64:	ee17 2a90 	vmov	r2, s15
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004f6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f84:	ee17 2a90 	vmov	r2, s15
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e014      	b.n	8004fd6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f103 021c 	add.w	r2, r3, #28
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 ff86 	bl	8005ecc <lsm6dso_gy_data_rate_set>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	e004      	b.n	8004fd6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e01f      	b.n	8005034 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f103 021c 	add.w	r2, r3, #28
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	332c      	adds	r3, #44	; 0x2c
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f001 f85f 	bl	80060c4 <lsm6dso_gy_data_rate_get>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	e010      	b.n	8005034 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	331c      	adds	r3, #28
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f000 ff57 	bl	8005ecc <lsm6dso_gy_data_rate_set>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	e004      	b.n	8005034 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	331c      	adds	r3, #28
 800504e:	f107 020b 	add.w	r2, r7, #11
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fef7 	bl	8005e48 <lsm6dso_gy_full_scale_get>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005060:	f04f 33ff 	mov.w	r3, #4294967295
 8005064:	e02d      	b.n	80050c2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d825      	bhi.n	80050b8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005099 	.word	0x08005099
 8005078:	08005091 	.word	0x08005091
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050b1 	.word	0x080050b1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4a0e      	ldr	r2, [pc, #56]	; (80050cc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005094:	601a      	str	r2, [r3, #0]
      break;
 8005096:	e013      	b.n	80050c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800509c:	601a      	str	r2, [r3, #0]
      break;
 800509e:	e00f      	b.n	80050c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80050a4:	601a      	str	r2, [r3, #0]
      break;
 80050a6:	e00b      	b.n	80050c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80050ac:	601a      	str	r2, [r3, #0]
      break;
 80050ae:	e007      	b.n	80050c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80050b4:	601a      	str	r2, [r3, #0]
      break;
 80050b6:	e003      	b.n	80050c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	60fb      	str	r3, [r7, #12]
      break;
 80050be:	bf00      	nop
  }

  return ret;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	408c0000 	.word	0x408c0000
 80050d0:	410c0000 	.word	0x410c0000
 80050d4:	418c0000 	.word	0x418c0000
 80050d8:	420c0000 	.word	0x420c0000
 80050dc:	428c0000 	.word	0x428c0000

080050e0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	331c      	adds	r3, #28
 80050f2:	f107 020b 	add.w	r2, r7, #11
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 ffe3 	bl	80060c4 <lsm6dso_gy_data_rate_get>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	e04e      	b.n	80051a8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	2b0a      	cmp	r3, #10
 800510e:	d846      	bhi.n	800519e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005145 	.word	0x08005145
 800511c:	0800514f 	.word	0x0800514f
 8005120:	08005157 	.word	0x08005157
 8005124:	0800515f 	.word	0x0800515f
 8005128:	08005167 	.word	0x08005167
 800512c:	0800516f 	.word	0x0800516f
 8005130:	08005177 	.word	0x08005177
 8005134:	0800517f 	.word	0x0800517f
 8005138:	08005187 	.word	0x08005187
 800513c:	0800518f 	.word	0x0800518f
 8005140:	08005197 	.word	0x08005197
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
      break;
 800514c:	e02b      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005152:	601a      	str	r2, [r3, #0]
      break;
 8005154:	e027      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800515a:	601a      	str	r2, [r3, #0]
      break;
 800515c:	e023      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005162:	601a      	str	r2, [r3, #0]
      break;
 8005164:	e01f      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800516a:	601a      	str	r2, [r3, #0]
      break;
 800516c:	e01b      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005172:	601a      	str	r2, [r3, #0]
      break;
 8005174:	e017      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800517a:	601a      	str	r2, [r3, #0]
      break;
 800517c:	e013      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005182:	601a      	str	r2, [r3, #0]
      break;
 8005184:	e00f      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	4a10      	ldr	r2, [pc, #64]	; (80051cc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800518a:	601a      	str	r2, [r3, #0]
      break;
 800518c:	e00b      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005192:	601a      	str	r2, [r3, #0]
      break;
 8005194:	e007      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800519a:	601a      	str	r2, [r3, #0]
      break;
 800519c:	e003      	b.n	80051a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	60fb      	str	r3, [r7, #12]
      break;
 80051a4:	bf00      	nop
  }

  return ret;
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	41480000 	.word	0x41480000
 80051b4:	41d00000 	.word	0x41d00000
 80051b8:	42500000 	.word	0x42500000
 80051bc:	42d00000 	.word	0x42d00000
 80051c0:	43500000 	.word	0x43500000
 80051c4:	43d08000 	.word	0x43d08000
 80051c8:	44504000 	.word	0x44504000
 80051cc:	44d06000 	.word	0x44d06000
 80051d0:	45505000 	.word	0x45505000
 80051d4:	45d05800 	.word	0x45d05800

080051d8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80051e4:	2100      	movs	r1, #0
 80051e6:	ed97 0a00 	vldr	s0, [r7]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f806 	bl	80051fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80051f0:	4603      	mov	r3, r0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	ed87 0a02 	vstr	s0, [r7, #8]
 8005208:	460b      	mov	r3, r1
 800520a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800521a:	2b01      	cmp	r3, #1
 800521c:	d028      	beq.n	8005270 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800521e:	e05c      	b.n	80052da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f103 001c 	add.w	r0, r3, #28
 8005226:	f107 0214 	add.w	r2, r7, #20
 800522a:	2301      	movs	r3, #1
 800522c:	2116      	movs	r1, #22
 800522e:	f000 fbf3 	bl	8005a18 <lsm6dso_read_reg>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	e06c      	b.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800523e:	7d3b      	ldrb	r3, [r7, #20]
 8005240:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04b      	beq.n	80052e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800524a:	7d3b      	ldrb	r3, [r7, #20]
 800524c:	f36f 13c7 	bfc	r3, #7, #1
 8005250:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f103 001c 	add.w	r0, r3, #28
 8005258:	f107 0214 	add.w	r2, r7, #20
 800525c:	2301      	movs	r3, #1
 800525e:	2116      	movs	r1, #22
 8005260:	f000 fbf2 	bl	8005a48 <lsm6dso_write_reg>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d03b      	beq.n	80052e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295
 800526e:	e053      	b.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f103 001c 	add.w	r0, r3, #28
 8005276:	f107 0210 	add.w	r2, r7, #16
 800527a:	2301      	movs	r3, #1
 800527c:	2116      	movs	r1, #22
 800527e:	f000 fbcb 	bl	8005a18 <lsm6dso_read_reg>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	e044      	b.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800528e:	7c3b      	ldrb	r3, [r7, #16]
 8005290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d112      	bne.n	80052c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800529a:	7c3b      	ldrb	r3, [r7, #16]
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f103 001c 	add.w	r0, r3, #28
 80052a8:	f107 0210 	add.w	r2, r7, #16
 80052ac:	2301      	movs	r3, #1
 80052ae:	2116      	movs	r1, #22
 80052b0:	f000 fbca 	bl	8005a48 <lsm6dso_write_reg>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	e02b      	b.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80052c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80052c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005320 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	dc00      	bgt.n	80052d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80052d2:	e007      	b.n	80052e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	e004      	b.n	80052e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	61fb      	str	r3, [r7, #28]
      break;
 80052e0:	e000      	b.n	80052e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80052e2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d102      	bne.n	80052f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	e012      	b.n	8005318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d106      	bne.n	800530a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80052fc:	ed97 0a06 	vldr	s0, [r7, #24]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fa45 	bl	8005790 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005306:	61f8      	str	r0, [r7, #28]
 8005308:	e005      	b.n	8005316 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800530a:	ed97 0a06 	vldr	s0, [r7, #24]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 faca 	bl	80058a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005314:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005316:	69fb      	ldr	r3, [r7, #28]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	43500000 	.word	0x43500000
 8005324:	43500000 	.word	0x43500000

08005328 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	331c      	adds	r3, #28
 800533a:	f107 020b 	add.w	r2, r7, #11
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd81 	bl	8005e48 <lsm6dso_gy_full_scale_get>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800534c:	f04f 33ff 	mov.w	r3, #4294967295
 8005350:	e030      	b.n	80053b4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d828      	bhi.n	80053aa <LSM6DSO_GYRO_GetFullScale+0x82>
 8005358:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	08005385 	.word	0x08005385
 8005364:	0800537d 	.word	0x0800537d
 8005368:	0800538d 	.word	0x0800538d
 800536c:	080053ab 	.word	0x080053ab
 8005370:	08005397 	.word	0x08005397
 8005374:	080053ab 	.word	0x080053ab
 8005378:	080053a1 	.word	0x080053a1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	227d      	movs	r2, #125	; 0x7d
 8005380:	601a      	str	r2, [r3, #0]
      break;
 8005382:	e016      	b.n	80053b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	22fa      	movs	r2, #250	; 0xfa
 8005388:	601a      	str	r2, [r3, #0]
      break;
 800538a:	e012      	b.n	80053b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005392:	601a      	str	r2, [r3, #0]
      break;
 8005394:	e00d      	b.n	80053b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539c:	601a      	str	r2, [r3, #0]
      break;
 800539e:	e008      	b.n	80053b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80053a6:	601a      	str	r2, [r3, #0]
      break;
 80053a8:	e003      	b.n	80053b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295
 80053ae:	60fb      	str	r3, [r7, #12]
      break;
 80053b0:	bf00      	nop
  }

  return ret;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b7d      	cmp	r3, #125	; 0x7d
 80053ca:	dd12      	ble.n	80053f2 <LSM6DSO_GYRO_SetFullScale+0x36>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2bfa      	cmp	r3, #250	; 0xfa
 80053d0:	dd0d      	ble.n	80053ee <LSM6DSO_GYRO_SetFullScale+0x32>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053d8:	dd07      	ble.n	80053ea <LSM6DSO_GYRO_SetFullScale+0x2e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e0:	dc01      	bgt.n	80053e6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80053e2:	2304      	movs	r3, #4
 80053e4:	e006      	b.n	80053f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053e6:	2306      	movs	r3, #6
 80053e8:	e004      	b.n	80053f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e002      	b.n	80053f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053f2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80053f4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	331c      	adds	r3, #28
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fcfc 	bl	8005dfc <lsm6dso_gy_full_scale_set>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e000      	b.n	8005412 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	331c      	adds	r3, #28
 8005428:	f107 0208 	add.w	r2, r7, #8
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fed0 	bl	80061d4 <lsm6dso_angular_rate_raw_get>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e00c      	b.n	800545a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005440:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005448:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005450:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	331c      	adds	r3, #28
 8005470:	f107 0210 	add.w	r2, r7, #16
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 feac 	bl	80061d4 <lsm6dso_angular_rate_raw_get>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e03c      	b.n	8005502 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005488:	f107 030c 	add.w	r3, r7, #12
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fdd4 	bl	800503c <LSM6DSO_GYRO_GetSensitivity>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e030      	b.n	8005502 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80054a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054a4:	ee07 3a90 	vmov	s15, r3
 80054a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80054b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b8:	ee17 2a90 	vmov	r2, s15
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80054c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d8:	ee17 2a90 	vmov	r2, s15
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80054e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f8:	ee17 2a90 	vmov	r2, s15
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
 8005516:	4613      	mov	r3, r2
 8005518:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f103 001c 	add.w	r0, r3, #28
 8005520:	1cba      	adds	r2, r7, #2
 8005522:	78f9      	ldrb	r1, [r7, #3]
 8005524:	2301      	movs	r3, #1
 8005526:	f000 fa8f 	bl	8005a48 <lsm6dso_write_reg>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e000      	b.n	8005538 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800554c:	edd7 7a00 	vldr	s15, [r7]
 8005550:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	d801      	bhi.n	8005562 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800555e:	230b      	movs	r3, #11
 8005560:	e063      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005562:	edd7 7a00 	vldr	s15, [r7]
 8005566:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800556a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d801      	bhi.n	8005578 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005574:	2301      	movs	r3, #1
 8005576:	e058      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005578:	edd7 7a00 	vldr	s15, [r7]
 800557c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005588:	d801      	bhi.n	800558e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800558a:	2302      	movs	r3, #2
 800558c:	e04d      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800558e:	edd7 7a00 	vldr	s15, [r7]
 8005592:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005654 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	d801      	bhi.n	80055a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80055a0:	2303      	movs	r3, #3
 80055a2:	e042      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055a4:	edd7 7a00 	vldr	s15, [r7]
 80055a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005658 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80055ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	d801      	bhi.n	80055ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80055b6:	2304      	movs	r3, #4
 80055b8:	e037      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055ba:	edd7 7a00 	vldr	s15, [r7]
 80055be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800565c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80055c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ca:	d801      	bhi.n	80055d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80055cc:	2305      	movs	r3, #5
 80055ce:	e02c      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055d0:	edd7 7a00 	vldr	s15, [r7]
 80055d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005660 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80055d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	d801      	bhi.n	80055e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80055e2:	2306      	movs	r3, #6
 80055e4:	e021      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055e6:	edd7 7a00 	vldr	s15, [r7]
 80055ea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005664 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80055ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	d801      	bhi.n	80055fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80055f8:	2307      	movs	r3, #7
 80055fa:	e016      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055fc:	edd7 7a00 	vldr	s15, [r7]
 8005600:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005668 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	d801      	bhi.n	8005612 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800560e:	2308      	movs	r3, #8
 8005610:	e00b      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005612:	edd7 7a00 	vldr	s15, [r7]
 8005616:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800566c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800561a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	d801      	bhi.n	8005628 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005624:	2309      	movs	r3, #9
 8005626:	e000      	b.n	800562a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005628:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800562a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	331c      	adds	r3, #28
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fa7d 	bl	8005b34 <lsm6dso_xl_data_rate_set>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	e000      	b.n	8005648 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	3fcccccd 	.word	0x3fcccccd
 8005654:	42500000 	.word	0x42500000
 8005658:	42d00000 	.word	0x42d00000
 800565c:	43500000 	.word	0x43500000
 8005660:	43d08000 	.word	0x43d08000
 8005664:	44504000 	.word	0x44504000
 8005668:	44d06000 	.word	0x44d06000
 800566c:	45505000 	.word	0x45505000

08005670 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800567c:	edd7 7a00 	vldr	s15, [r7]
 8005680:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d801      	bhi.n	8005692 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800568e:	230b      	movs	r3, #11
 8005690:	e063      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005692:	edd7 7a00 	vldr	s15, [r7]
 8005696:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800569a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	d801      	bhi.n	80056a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e058      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056a8:	edd7 7a00 	vldr	s15, [r7]
 80056ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80056b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b8:	d801      	bhi.n	80056be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e04d      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056be:	edd7 7a00 	vldr	s15, [r7]
 80056c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005774 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80056c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ce:	d801      	bhi.n	80056d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80056d0:	2303      	movs	r3, #3
 80056d2:	e042      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056d4:	edd7 7a00 	vldr	s15, [r7]
 80056d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005778 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80056dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d801      	bhi.n	80056ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80056e6:	2304      	movs	r3, #4
 80056e8:	e037      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056ea:	edd7 7a00 	vldr	s15, [r7]
 80056ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800577c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80056f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fa:	d801      	bhi.n	8005700 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80056fc:	2305      	movs	r3, #5
 80056fe:	e02c      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005700:	edd7 7a00 	vldr	s15, [r7]
 8005704:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005780 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d801      	bhi.n	8005716 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005712:	2306      	movs	r3, #6
 8005714:	e021      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005716:	edd7 7a00 	vldr	s15, [r7]
 800571a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005784 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800571e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d801      	bhi.n	800572c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005728:	2307      	movs	r3, #7
 800572a:	e016      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800572c:	edd7 7a00 	vldr	s15, [r7]
 8005730:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005788 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d801      	bhi.n	8005742 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800573e:	2308      	movs	r3, #8
 8005740:	e00b      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005742:	edd7 7a00 	vldr	s15, [r7]
 8005746:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800578c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800574a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d801      	bhi.n	8005758 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005754:	2309      	movs	r3, #9
 8005756:	e000      	b.n	800575a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005758:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	3fcccccd 	.word	0x3fcccccd
 8005774:	42500000 	.word	0x42500000
 8005778:	42d00000 	.word	0x42d00000
 800577c:	43500000 	.word	0x43500000
 8005780:	43d08000 	.word	0x43d08000
 8005784:	44504000 	.word	0x44504000
 8005788:	44d06000 	.word	0x44d06000
 800578c:	45505000 	.word	0x45505000

08005790 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800579c:	edd7 7a00 	vldr	s15, [r7]
 80057a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80057a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ac:	d801      	bhi.n	80057b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e058      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057b2:	edd7 7a00 	vldr	s15, [r7]
 80057b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80057ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d801      	bhi.n	80057c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e04d      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057c8:	edd7 7a00 	vldr	s15, [r7]
 80057cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800588c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80057d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d8:	d801      	bhi.n	80057de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80057da:	2303      	movs	r3, #3
 80057dc:	e042      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057de:	edd7 7a00 	vldr	s15, [r7]
 80057e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80057e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	d801      	bhi.n	80057f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80057f0:	2304      	movs	r3, #4
 80057f2:	e037      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057f4:	edd7 7a00 	vldr	s15, [r7]
 80057f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005894 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80057fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	d801      	bhi.n	800580a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005806:	2305      	movs	r3, #5
 8005808:	e02c      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800580a:	edd7 7a00 	vldr	s15, [r7]
 800580e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005898 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	d801      	bhi.n	8005820 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800581c:	2306      	movs	r3, #6
 800581e:	e021      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005820:	edd7 7a00 	vldr	s15, [r7]
 8005824:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800589c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	d801      	bhi.n	8005836 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005832:	2307      	movs	r3, #7
 8005834:	e016      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005836:	edd7 7a00 	vldr	s15, [r7]
 800583a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80058a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800583e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005846:	d801      	bhi.n	800584c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005848:	2308      	movs	r3, #8
 800584a:	e00b      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800584c:	edd7 7a00 	vldr	s15, [r7]
 8005850:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80058a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585c:	d801      	bhi.n	8005862 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800585e:	2309      	movs	r3, #9
 8005860:	e000      	b.n	8005864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005862:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005864:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	331c      	adds	r3, #28
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fb2c 	bl	8005ecc <lsm6dso_gy_data_rate_set>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	e000      	b.n	8005882 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	42500000 	.word	0x42500000
 8005890:	42d00000 	.word	0x42d00000
 8005894:	43500000 	.word	0x43500000
 8005898:	43d08000 	.word	0x43d08000
 800589c:	44504000 	.word	0x44504000
 80058a0:	44d06000 	.word	0x44d06000
 80058a4:	45505000 	.word	0x45505000

080058a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80058b4:	edd7 7a00 	vldr	s15, [r7]
 80058b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80058bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	d801      	bhi.n	80058ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e058      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058ca:	edd7 7a00 	vldr	s15, [r7]
 80058ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80058d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	d801      	bhi.n	80058e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80058dc:	2302      	movs	r3, #2
 80058de:	e04d      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058e0:	edd7 7a00 	vldr	s15, [r7]
 80058e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80058e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f0:	d801      	bhi.n	80058f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e042      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058f6:	edd7 7a00 	vldr	s15, [r7]
 80058fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005994 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80058fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005906:	d801      	bhi.n	800590c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005908:	2304      	movs	r3, #4
 800590a:	e037      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800590c:	edd7 7a00 	vldr	s15, [r7]
 8005910:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005998 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591c:	d801      	bhi.n	8005922 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800591e:	2305      	movs	r3, #5
 8005920:	e02c      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005922:	edd7 7a00 	vldr	s15, [r7]
 8005926:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800599c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800592a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	d801      	bhi.n	8005938 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005934:	2306      	movs	r3, #6
 8005936:	e021      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005938:	edd7 7a00 	vldr	s15, [r7]
 800593c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80059a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005948:	d801      	bhi.n	800594e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800594a:	2307      	movs	r3, #7
 800594c:	e016      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800594e:	edd7 7a00 	vldr	s15, [r7]
 8005952:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80059a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	d801      	bhi.n	8005964 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005960:	2308      	movs	r3, #8
 8005962:	e00b      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005964:	edd7 7a00 	vldr	s15, [r7]
 8005968:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80059a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800596c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005974:	d801      	bhi.n	800597a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005976:	2309      	movs	r3, #9
 8005978:	e000      	b.n	800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800597a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	42500000 	.word	0x42500000
 8005994:	42d00000 	.word	0x42d00000
 8005998:	43500000 	.word	0x43500000
 800599c:	43d08000 	.word	0x43d08000
 80059a0:	44504000 	.word	0x44504000
 80059a4:	44d06000 	.word	0x44d06000
 80059a8:	45505000 	.word	0x45505000

080059ac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	461a      	mov	r2, r3
 80059b8:	460b      	mov	r3, r1
 80059ba:	72fb      	strb	r3, [r7, #11]
 80059bc:	4613      	mov	r3, r2
 80059be:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	695c      	ldr	r4, [r3, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	7b1b      	ldrb	r3, [r3, #12]
 80059cc:	b298      	uxth	r0, r3
 80059ce:	7afb      	ldrb	r3, [r7, #11]
 80059d0:	b299      	uxth	r1, r3
 80059d2:	893b      	ldrh	r3, [r7, #8]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	47a0      	blx	r4
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}

080059e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80059e2:	b590      	push	{r4, r7, lr}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	461a      	mov	r2, r3
 80059ee:	460b      	mov	r3, r1
 80059f0:	72fb      	strb	r3, [r7, #11]
 80059f2:	4613      	mov	r3, r2
 80059f4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	691c      	ldr	r4, [r3, #16]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	7b1b      	ldrb	r3, [r3, #12]
 8005a02:	b298      	uxth	r0, r3
 8005a04:	7afb      	ldrb	r3, [r7, #11]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	47a0      	blx	r4
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd90      	pop	{r4, r7, pc}

08005a18 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	460b      	mov	r3, r1
 8005a26:	72fb      	strb	r3, [r7, #11]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685c      	ldr	r4, [r3, #4]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6898      	ldr	r0, [r3, #8]
 8005a34:	893b      	ldrh	r3, [r7, #8]
 8005a36:	7af9      	ldrb	r1, [r7, #11]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	47a0      	blx	r4
 8005a3c:	6178      	str	r0, [r7, #20]

  return ret;
 8005a3e:	697b      	ldr	r3, [r7, #20]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd90      	pop	{r4, r7, pc}

08005a48 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	461a      	mov	r2, r3
 8005a54:	460b      	mov	r3, r1
 8005a56:	72fb      	strb	r3, [r7, #11]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681c      	ldr	r4, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6898      	ldr	r0, [r3, #8]
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	7af9      	ldrb	r1, [r7, #11]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	47a0      	blx	r4
 8005a6c:	6178      	str	r0, [r7, #20]

  return ret;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}

08005a78 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005a84:	f107 0208 	add.w	r2, r7, #8
 8005a88:	2301      	movs	r3, #1
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ffc3 	bl	8005a18 <lsm6dso_read_reg>
 8005a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	7a3b      	ldrb	r3, [r7, #8]
 8005aa4:	f362 0383 	bfi	r3, r2, #2, #2
 8005aa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005aaa:	f107 0208 	add.w	r2, r7, #8
 8005aae:	2301      	movs	r3, #1
 8005ab0:	2110      	movs	r1, #16
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ffc8 	bl	8005a48 <lsm6dso_write_reg>
 8005ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005aba:	68fb      	ldr	r3, [r7, #12]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005ace:	f107 0208 	add.w	r2, r7, #8
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff9e 	bl	8005a18 <lsm6dso_read_reg>
 8005adc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005ade:	7a3b      	ldrb	r3, [r7, #8]
 8005ae0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d81a      	bhi.n	8005b20 <lsm6dso_xl_full_scale_get+0x5c>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <lsm6dso_xl_full_scale_get+0x2c>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b09 	.word	0x08005b09
 8005af8:	08005b11 	.word	0x08005b11
 8005afc:	08005b19 	.word	0x08005b19
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
      break;
 8005b06:	e00f      	b.n	8005b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
      break;
 8005b0e:	e00b      	b.n	8005b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2202      	movs	r2, #2
 8005b14:	701a      	strb	r2, [r3, #0]
      break;
 8005b16:	e007      	b.n	8005b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	701a      	strb	r2, [r3, #0]
      break;
 8005b1e:	e003      	b.n	8005b28 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	bf00      	nop
  }

  return ret;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fca1 	bl	8006492 <lsm6dso_fsm_enable_get>
 8005b50:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 80c4 	bne.w	8005ce2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b5a:	7b3b      	ldrb	r3, [r7, #12]
 8005b5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005b62:	7b3b      	ldrb	r3, [r7, #12]
 8005b64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b68:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005b6e:	7b3b      	ldrb	r3, [r7, #12]
 8005b70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005b76:	4313      	orrs	r3, r2
 8005b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005b7a:	7b3b      	ldrb	r3, [r7, #12]
 8005b7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005b86:	7b3b      	ldrb	r3, [r7, #12]
 8005b88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005b92:	7b3b      	ldrb	r3, [r7, #12]
 8005b94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005b9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ba4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005baa:	7b3b      	ldrb	r3, [r7, #12]
 8005bac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005bb6:	7b7b      	ldrb	r3, [r7, #13]
 8005bb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005bc2:	7b7b      	ldrb	r3, [r7, #13]
 8005bc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005bda:	7b7b      	ldrb	r3, [r7, #13]
 8005bdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005be0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005be2:	4313      	orrs	r3, r2
 8005be4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005be6:	7b7b      	ldrb	r3, [r7, #13]
 8005be8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005bf2:	7b7b      	ldrb	r3, [r7, #13]
 8005bf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005bfe:	7b7b      	ldrb	r3, [r7, #13]
 8005c00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005c0a:	7b7b      	ldrb	r3, [r7, #13]
 8005c0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d163      	bne.n	8005ce2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005c1a:	f107 030b 	add.w	r3, r7, #11
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc57 	bl	80064d4 <lsm6dso_fsm_data_rate_get>
 8005c26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d159      	bne.n	8005ce2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d853      	bhi.n	8005cdc <lsm6dso_xl_data_rate_set+0x1a8>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <lsm6dso_xl_data_rate_set+0x108>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005c5f 	.word	0x08005c5f
 8005c44:	08005c7d 	.word	0x08005c7d
 8005c48:	08005ca7 	.word	0x08005ca7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005c56:	e045      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005c5c:	e042      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c64:	2302      	movs	r3, #2
 8005c66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005c68:	e03c      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d102      	bne.n	8005c76 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c70:	2302      	movs	r3, #2
 8005c72:	75fb      	strb	r3, [r7, #23]
            break;
 8005c74:	e036      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	75fb      	strb	r3, [r7, #23]
            break;
 8005c7a:	e033      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c82:	2303      	movs	r3, #3
 8005c84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005c86:	e02d      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d102      	bne.n	8005c94 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	75fb      	strb	r3, [r7, #23]
            break;
 8005c92:	e027      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d102      	bne.n	8005ca0 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	75fb      	strb	r3, [r7, #23]
            break;
 8005c9e:	e021      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ca4:	e01e      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cac:	2304      	movs	r3, #4
 8005cae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005cb0:	e018      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d102      	bne.n	8005cbe <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cb8:	2304      	movs	r3, #4
 8005cba:	75fb      	strb	r3, [r7, #23]
            break;
 8005cbc:	e012      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d102      	bne.n	8005cca <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	75fb      	strb	r3, [r7, #23]
            break;
 8005cc8:	e00c      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d102      	bne.n	8005cd6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	75fb      	strb	r3, [r7, #23]
            break;
 8005cd4:	e006      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	75fb      	strb	r3, [r7, #23]
            break;
 8005cda:	e003      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	75fb      	strb	r3, [r7, #23]
            break;
 8005ce0:	e000      	b.n	8005ce4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8005ce2:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005cea:	f107 0208 	add.w	r2, r7, #8
 8005cee:	2301      	movs	r3, #1
 8005cf0:	2110      	movs	r1, #16
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fe90 	bl	8005a18 <lsm6dso_read_reg>
 8005cf8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10f      	bne.n	8005d20 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	7a3b      	ldrb	r3, [r7, #8]
 8005d0a:	f362 1307 	bfi	r3, r2, #4, #4
 8005d0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d10:	f107 0208 	add.w	r2, r7, #8
 8005d14:	2301      	movs	r3, #1
 8005d16:	2110      	movs	r1, #16
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fe95 	bl	8005a48 <lsm6dso_write_reg>
 8005d1e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005d20:	693b      	ldr	r3, [r7, #16]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop

08005d2c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d36:	f107 0208 	add.w	r2, r7, #8
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fe6a 	bl	8005a18 <lsm6dso_read_reg>
 8005d44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005d46:	7a3b      	ldrb	r3, [r7, #8]
 8005d48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b0b      	cmp	r3, #11
 8005d50:	d84a      	bhi.n	8005de8 <lsm6dso_xl_data_rate_get+0xbc>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <lsm6dso_xl_data_rate_get+0x2c>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d89 	.word	0x08005d89
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da9 	.word	0x08005da9
 8005d6c:	08005db1 	.word	0x08005db1
 8005d70:	08005db9 	.word	0x08005db9
 8005d74:	08005dc1 	.word	0x08005dc1
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005de1 	.word	0x08005de1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
      break;
 8005d8e:	e02f      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
      break;
 8005d96:	e02b      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	701a      	strb	r2, [r3, #0]
      break;
 8005d9e:	e027      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2203      	movs	r2, #3
 8005da4:	701a      	strb	r2, [r3, #0]
      break;
 8005da6:	e023      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2204      	movs	r2, #4
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	e01f      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2205      	movs	r2, #5
 8005db4:	701a      	strb	r2, [r3, #0]
      break;
 8005db6:	e01b      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2206      	movs	r2, #6
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e017      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2207      	movs	r2, #7
 8005dc4:	701a      	strb	r2, [r3, #0]
      break;
 8005dc6:	e013      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	701a      	strb	r2, [r3, #0]
      break;
 8005dce:	e00f      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2209      	movs	r2, #9
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	e00b      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	220a      	movs	r2, #10
 8005ddc:	701a      	strb	r2, [r3, #0]
      break;
 8005dde:	e007      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	220b      	movs	r2, #11
 8005de4:	701a      	strb	r2, [r3, #0]
      break;
 8005de6:	e003      	b.n	8005df0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
      break;
 8005dee:	bf00      	nop
  }

  return ret;
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop

08005dfc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e08:	f107 0208 	add.w	r2, r7, #8
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	2111      	movs	r1, #17
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fe01 	bl	8005a18 <lsm6dso_read_reg>
 8005e16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	7a3b      	ldrb	r3, [r7, #8]
 8005e28:	f362 0343 	bfi	r3, r2, #1, #3
 8005e2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e2e:	f107 0208 	add.w	r2, r7, #8
 8005e32:	2301      	movs	r3, #1
 8005e34:	2111      	movs	r1, #17
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fe06 	bl	8005a48 <lsm6dso_write_reg>
 8005e3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e52:	f107 0208 	add.w	r2, r7, #8
 8005e56:	2301      	movs	r3, #1
 8005e58:	2111      	movs	r1, #17
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fddc 	bl	8005a18 <lsm6dso_read_reg>
 8005e60:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8005e62:	7a3b      	ldrb	r3, [r7, #8]
 8005e64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d824      	bhi.n	8005eb8 <lsm6dso_gy_full_scale_get+0x70>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <lsm6dso_gy_full_scale_get+0x2c>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005eb9 	.word	0x08005eb9
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005eb9 	.word	0x08005eb9
 8005e8c:	08005eb1 	.word	0x08005eb1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
      break;
 8005e96:	e013      	b.n	8005ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
      break;
 8005e9e:	e00f      	b.n	8005ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	701a      	strb	r2, [r3, #0]
      break;
 8005ea6:	e00b      	b.n	8005ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	701a      	strb	r2, [r3, #0]
      break;
 8005eae:	e007      	b.n	8005ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2206      	movs	r2, #6
 8005eb4:	701a      	strb	r2, [r3, #0]
      break;
 8005eb6:	e003      	b.n	8005ec0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
      break;
 8005ebe:	bf00      	nop
  }

  return ret;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005edc:	f107 030c 	add.w	r3, r7, #12
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fad5 	bl	8006492 <lsm6dso_fsm_enable_get>
 8005ee8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 80c4 	bne.w	800607a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ef2:	7b3b      	ldrb	r3, [r7, #12]
 8005ef4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ef8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005efa:	7b3b      	ldrb	r3, [r7, #12]
 8005efc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f00:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f06:	7b3b      	ldrb	r3, [r7, #12]
 8005f08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f12:	7b3b      	ldrb	r3, [r7, #12]
 8005f14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005f1e:	7b3b      	ldrb	r3, [r7, #12]
 8005f20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005f2a:	7b3b      	ldrb	r3, [r7, #12]
 8005f2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005f36:	7b3b      	ldrb	r3, [r7, #12]
 8005f38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005f42:	7b3b      	ldrb	r3, [r7, #12]
 8005f44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005f56:	4313      	orrs	r3, r2
 8005f58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005f5a:	7b7b      	ldrb	r3, [r7, #13]
 8005f5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005f66:	7b7b      	ldrb	r3, [r7, #13]
 8005f68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005f72:	7b7b      	ldrb	r3, [r7, #13]
 8005f74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005f7e:	7b7b      	ldrb	r3, [r7, #13]
 8005f80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005f8a:	7b7b      	ldrb	r3, [r7, #13]
 8005f8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005f96:	7b7b      	ldrb	r3, [r7, #13]
 8005f98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005fa2:	7b7b      	ldrb	r3, [r7, #13]
 8005fa4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fa8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d163      	bne.n	800607a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005fb2:	f107 030b 	add.w	r3, r7, #11
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa8b 	bl	80064d4 <lsm6dso_fsm_data_rate_get>
 8005fbe:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d159      	bne.n	800607a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d853      	bhi.n	8006074 <lsm6dso_gy_data_rate_set+0x1a8>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <lsm6dso_gy_data_rate_set+0x108>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005ff7 	.word	0x08005ff7
 8005fdc:	08006015 	.word	0x08006015
 8005fe0:	0800603f 	.word	0x0800603f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005fee:	e045      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ff4:	e042      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006000:	e03c      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006008:	2302      	movs	r3, #2
 800600a:	75fb      	strb	r3, [r7, #23]
            break;
 800600c:	e036      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	75fb      	strb	r3, [r7, #23]
            break;
 8006012:	e033      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800601a:	2303      	movs	r3, #3
 800601c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800601e:	e02d      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d102      	bne.n	800602c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006026:	2303      	movs	r3, #3
 8006028:	75fb      	strb	r3, [r7, #23]
            break;
 800602a:	e027      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d102      	bne.n	8006038 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006032:	2303      	movs	r3, #3
 8006034:	75fb      	strb	r3, [r7, #23]
            break;
 8006036:	e021      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	75fb      	strb	r3, [r7, #23]
            break;
 800603c:	e01e      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006044:	2304      	movs	r3, #4
 8006046:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006048:	e018      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006050:	2304      	movs	r3, #4
 8006052:	75fb      	strb	r3, [r7, #23]
            break;
 8006054:	e012      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d102      	bne.n	8006062 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800605c:	2304      	movs	r3, #4
 800605e:	75fb      	strb	r3, [r7, #23]
            break;
 8006060:	e00c      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d102      	bne.n	800606e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006068:	2304      	movs	r3, #4
 800606a:	75fb      	strb	r3, [r7, #23]
            break;
 800606c:	e006      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	75fb      	strb	r3, [r7, #23]
            break;
 8006072:	e003      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	75fb      	strb	r3, [r7, #23]
            break;
 8006078:	e000      	b.n	800607c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800607a:	bf00      	nop
    }
  }

  if (ret == 0)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006082:	f107 0208 	add.w	r2, r7, #8
 8006086:	2301      	movs	r3, #1
 8006088:	2111      	movs	r1, #17
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fcc4 	bl	8005a18 <lsm6dso_read_reg>
 8006090:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10f      	bne.n	80060b8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	7a3b      	ldrb	r3, [r7, #8]
 80060a2:	f362 1307 	bfi	r3, r2, #4, #4
 80060a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80060a8:	f107 0208 	add.w	r2, r7, #8
 80060ac:	2301      	movs	r3, #1
 80060ae:	2111      	movs	r1, #17
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fcc9 	bl	8005a48 <lsm6dso_write_reg>
 80060b6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80060b8:	693b      	ldr	r3, [r7, #16]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop

080060c4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80060ce:	f107 0208 	add.w	r2, r7, #8
 80060d2:	2301      	movs	r3, #1
 80060d4:	2111      	movs	r1, #17
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fc9e 	bl	8005a18 <lsm6dso_read_reg>
 80060dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80060de:	7a3b      	ldrb	r3, [r7, #8]
 80060e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b0a      	cmp	r3, #10
 80060e8:	d844      	bhi.n	8006174 <lsm6dso_gy_data_rate_get+0xb0>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <lsm6dso_gy_data_rate_get+0x2c>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	0800611d 	.word	0x0800611d
 80060f4:	08006125 	.word	0x08006125
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	08006135 	.word	0x08006135
 8006100:	0800613d 	.word	0x0800613d
 8006104:	08006145 	.word	0x08006145
 8006108:	0800614d 	.word	0x0800614d
 800610c:	08006155 	.word	0x08006155
 8006110:	0800615d 	.word	0x0800615d
 8006114:	08006165 	.word	0x08006165
 8006118:	0800616d 	.word	0x0800616d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
      break;
 8006122:	e02b      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
      break;
 800612a:	e027      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2202      	movs	r2, #2
 8006130:	701a      	strb	r2, [r3, #0]
      break;
 8006132:	e023      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2203      	movs	r2, #3
 8006138:	701a      	strb	r2, [r3, #0]
      break;
 800613a:	e01f      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2204      	movs	r2, #4
 8006140:	701a      	strb	r2, [r3, #0]
      break;
 8006142:	e01b      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2205      	movs	r2, #5
 8006148:	701a      	strb	r2, [r3, #0]
      break;
 800614a:	e017      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2206      	movs	r2, #6
 8006150:	701a      	strb	r2, [r3, #0]
      break;
 8006152:	e013      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2207      	movs	r2, #7
 8006158:	701a      	strb	r2, [r3, #0]
      break;
 800615a:	e00f      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2208      	movs	r2, #8
 8006160:	701a      	strb	r2, [r3, #0]
      break;
 8006162:	e00b      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2209      	movs	r2, #9
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e007      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	220a      	movs	r2, #10
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e003      	b.n	800617c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
      break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	68fb      	ldr	r3, [r7, #12]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006194:	f107 0208 	add.w	r2, r7, #8
 8006198:	2301      	movs	r3, #1
 800619a:	2112      	movs	r1, #18
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fc3b 	bl	8005a18 <lsm6dso_read_reg>
 80061a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	7a3b      	ldrb	r3, [r7, #8]
 80061b4:	f362 1386 	bfi	r3, r2, #6, #1
 80061b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80061ba:	f107 0208 	add.w	r2, r7, #8
 80061be:	2301      	movs	r3, #1
 80061c0:	2112      	movs	r1, #18
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fc40 	bl	8005a48 <lsm6dso_write_reg>
 80061c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80061de:	f107 020c 	add.w	r2, r7, #12
 80061e2:	2306      	movs	r3, #6
 80061e4:	2122      	movs	r1, #34	; 0x22
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fc16 	bl	8005a18 <lsm6dso_read_reg>
 80061ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80061ee:	7b7b      	ldrb	r3, [r7, #13]
 80061f0:	b21a      	sxth	r2, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	b29a      	uxth	r2, r3
 8006202:	7b3b      	ldrb	r3, [r7, #12]
 8006204:	b29b      	uxth	r3, r3
 8006206:	4413      	add	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	b21a      	sxth	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	3302      	adds	r3, #2
 8006216:	b212      	sxth	r2, r2
 8006218:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3302      	adds	r3, #2
 800621e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006222:	b29b      	uxth	r3, r3
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	b29a      	uxth	r2, r3
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	b29b      	uxth	r3, r3
 800622c:	4413      	add	r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	3302      	adds	r3, #2
 8006234:	b212      	sxth	r2, r2
 8006236:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006238:	7c7a      	ldrb	r2, [r7, #17]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	b212      	sxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800624a:	b29b      	uxth	r3, r3
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	b29a      	uxth	r2, r3
 8006250:	7c3b      	ldrb	r3, [r7, #16]
 8006252:	b29b      	uxth	r3, r3
 8006254:	4413      	add	r3, r2
 8006256:	b29a      	uxth	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	3304      	adds	r3, #4
 800625c:	b212      	sxth	r2, r2
 800625e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006260:	697b      	ldr	r3, [r7, #20]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006274:	f107 020c 	add.w	r2, r7, #12
 8006278:	2306      	movs	r3, #6
 800627a:	2128      	movs	r1, #40	; 0x28
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fbcb 	bl	8005a18 <lsm6dso_read_reg>
 8006282:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006284:	7b7b      	ldrb	r3, [r7, #13]
 8006286:	b21a      	sxth	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006292:	b29b      	uxth	r3, r3
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	b29a      	uxth	r2, r3
 8006298:	7b3b      	ldrb	r3, [r7, #12]
 800629a:	b29b      	uxth	r3, r3
 800629c:	4413      	add	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	b21a      	sxth	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3302      	adds	r3, #2
 80062ac:	b212      	sxth	r2, r2
 80062ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	3302      	adds	r3, #2
 80062b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	b29a      	uxth	r2, r3
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	3302      	adds	r3, #2
 80062ca:	b212      	sxth	r2, r2
 80062cc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80062ce:	7c7a      	ldrb	r2, [r7, #17]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	b212      	sxth	r2, r2
 80062d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3304      	adds	r3, #4
 80062dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	7c3b      	ldrb	r3, [r7, #16]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3304      	adds	r3, #4
 80062f2:	b212      	sxth	r2, r2
 80062f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80062f6:	697b      	ldr	r3, [r7, #20]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800630c:	f107 0208 	add.w	r2, r7, #8
 8006310:	2301      	movs	r3, #1
 8006312:	2101      	movs	r1, #1
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fb7f 	bl	8005a18 <lsm6dso_read_reg>
 800631a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	b2da      	uxtb	r2, r3
 800632a:	7a3b      	ldrb	r3, [r7, #8]
 800632c:	f362 1387 	bfi	r3, r2, #6, #2
 8006330:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006332:	f107 0208 	add.w	r2, r7, #8
 8006336:	2301      	movs	r3, #1
 8006338:	2101      	movs	r1, #1
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fb84 	bl	8005a48 <lsm6dso_write_reg>
 8006340:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006356:	2301      	movs	r3, #1
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	210f      	movs	r1, #15
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fb5b 	bl	8005a18 <lsm6dso_read_reg>
 8006362:	60f8      	str	r0, [r7, #12]

  return ret;
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	2301      	movs	r3, #1
 8006380:	2112      	movs	r1, #18
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff fb48 	bl	8005a18 <lsm6dso_read_reg>
 8006388:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10f      	bne.n	80063b0 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	7a3b      	ldrb	r3, [r7, #8]
 800639a:	f362 0382 	bfi	r3, r2, #2, #1
 800639e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80063a0:	f107 0208 	add.w	r2, r7, #8
 80063a4:	2301      	movs	r3, #1
 80063a6:	2112      	movs	r1, #18
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff fb4d 	bl	8005a48 <lsm6dso_write_reg>
 80063ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80063c6:	f107 020c 	add.w	r2, r7, #12
 80063ca:	2301      	movs	r3, #1
 80063cc:	2118      	movs	r1, #24
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fb22 	bl	8005a18 <lsm6dso_read_reg>
 80063d4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d111      	bne.n	8006400 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	7b3b      	ldrb	r3, [r7, #12]
 80063ea:	f362 0341 	bfi	r3, r2, #1, #1
 80063ee:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80063f0:	f107 020c 	add.w	r2, r7, #12
 80063f4:	2301      	movs	r3, #1
 80063f6:	2118      	movs	r1, #24
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff fb25 	bl	8005a48 <lsm6dso_write_reg>
 80063fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d107      	bne.n	8006416 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006406:	f107 0210 	add.w	r2, r7, #16
 800640a:	2301      	movs	r3, #1
 800640c:	2162      	movs	r1, #98	; 0x62
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fb02 	bl	8005a18 <lsm6dso_read_reg>
 8006414:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10f      	bne.n	800643c <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	b2da      	uxtb	r2, r3
 8006424:	7c3b      	ldrb	r3, [r7, #16]
 8006426:	f362 03c4 	bfi	r3, r2, #3, #2
 800642a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800642c:	f107 0210 	add.w	r2, r7, #16
 8006430:	2301      	movs	r3, #1
 8006432:	2162      	movs	r1, #98	; 0x62
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fb07 	bl	8005a48 <lsm6dso_write_reg>
 800643a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800643c:	697b      	ldr	r3, [r7, #20]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006452:	f107 0208 	add.w	r2, r7, #8
 8006456:	2301      	movs	r3, #1
 8006458:	210a      	movs	r1, #10
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff fadc 	bl	8005a18 <lsm6dso_read_reg>
 8006460:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10f      	bne.n	8006488 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b2da      	uxtb	r2, r3
 8006470:	7a3b      	ldrb	r3, [r7, #8]
 8006472:	f362 0302 	bfi	r3, r2, #0, #3
 8006476:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006478:	f107 0208 	add.w	r2, r7, #8
 800647c:	2301      	movs	r3, #1
 800647e:	210a      	movs	r1, #10
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fae1 	bl	8005a48 <lsm6dso_write_reg>
 8006486:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006488:	68fb      	ldr	r3, [r7, #12]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800649c:	2102      	movs	r1, #2
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ff2e 	bl	8006300 <lsm6dso_mem_bank_set>
 80064a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80064ac:	2302      	movs	r3, #2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	2146      	movs	r1, #70	; 0x46
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fab0 	bl	8005a18 <lsm6dso_read_reg>
 80064b8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ff1c 	bl	8006300 <lsm6dso_mem_bank_set>
 80064c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80064de:	2102      	movs	r1, #2
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff0d 	bl	8006300 <lsm6dso_mem_bank_set>
 80064e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d107      	bne.n	80064fe <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80064ee:	f107 0208 	add.w	r2, r7, #8
 80064f2:	2301      	movs	r3, #1
 80064f4:	215f      	movs	r1, #95	; 0x5f
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fa8e 	bl	8005a18 <lsm6dso_read_reg>
 80064fc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d12a      	bne.n	800655a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8006504:	7a3b      	ldrb	r3, [r7, #8]
 8006506:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b03      	cmp	r3, #3
 800650e:	d81b      	bhi.n	8006548 <lsm6dso_fsm_data_rate_get+0x74>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <lsm6dso_fsm_data_rate_get+0x44>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	08006529 	.word	0x08006529
 800651c:	08006531 	.word	0x08006531
 8006520:	08006539 	.word	0x08006539
 8006524:	08006541 	.word	0x08006541
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
        break;
 800652e:	e00f      	b.n	8006550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
        break;
 8006536:	e00b      	b.n	8006550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2202      	movs	r2, #2
 800653c:	701a      	strb	r2, [r3, #0]
        break;
 800653e:	e007      	b.n	8006550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2203      	movs	r2, #3
 8006544:	701a      	strb	r2, [r3, #0]
        break;
 8006546:	e003      	b.n	8006550 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
        break;
 800654e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fed4 	bl	8006300 <lsm6dso_mem_bank_set>
 8006558:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08e      	sub	sp, #56	; 0x38
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800656e:	2300      	movs	r3, #0
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006572:	2301      	movs	r3, #1
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d06e      	beq.n	800665e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	f200 809d 	bhi.w	80066c2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d032      	beq.n	80065fa <IKS01A3_MOTION_SENSOR_Init+0x96>
 8006594:	e095      	b.n	80066c2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8006596:	6838      	ldr	r0, [r7, #0]
 8006598:	f000 f924 	bl	80067e4 <LSM6DSO_0_Probe>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	e0cc      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80065a8:	4a68      	ldr	r2, [pc, #416]	; (800674c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4967      	ldr	r1, [pc, #412]	; (8006750 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065ba:	f107 010c 	add.w	r1, r7, #12
 80065be:	4610      	mov	r0, r2
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065c8:	f06f 0306 	mvn.w	r3, #6
 80065cc:	e0b9      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80065ce:	7b3b      	ldrb	r3, [r7, #12]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d103      	bne.n	80065dc <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	f043 0302 	orr.w	r3, r3, #2
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80065dc:	7b7b      	ldrb	r3, [r7, #13]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d103      	bne.n	80065ea <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d16c      	bne.n	80066ca <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	f043 0304 	orr.w	r3, r3, #4
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80065f8:	e067      	b.n	80066ca <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f000 f9ae 	bl	800695c <LIS2DW12_0_Probe>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	e09a      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800660c:	4a4f      	ldr	r2, [pc, #316]	; (800674c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	494e      	ldr	r1, [pc, #312]	; (8006750 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800661e:	f107 010c 	add.w	r1, r7, #12
 8006622:	4610      	mov	r0, r2
 8006624:	4798      	blx	r3
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800662c:	f06f 0306 	mvn.w	r3, #6
 8006630:	e087      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006632:	7b3b      	ldrb	r3, [r7, #12]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d103      	bne.n	8006640 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	f043 0302 	orr.w	r3, r3, #2
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006640:	7b7b      	ldrb	r3, [r7, #13]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d103      	bne.n	800664e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d13c      	bne.n	80066ce <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800665c:	e037      	b.n	80066ce <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800665e:	6838      	ldr	r0, [r7, #0]
 8006660:	f000 fa20 	bl	8006aa4 <LIS2MDL_0_Probe>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800666a:	f04f 33ff 	mov.w	r3, #4294967295
 800666e:	e068      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006670:	4a36      	ldr	r2, [pc, #216]	; (800674c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4935      	ldr	r1, [pc, #212]	; (8006750 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006682:	f107 010c 	add.w	r1, r7, #12
 8006686:	4610      	mov	r0, r2
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006690:	f06f 0306 	mvn.w	r3, #6
 8006694:	e055      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006696:	7b3b      	ldrb	r3, [r7, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d103      	bne.n	80066a4 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80066a4:	7b7b      	ldrb	r3, [r7, #13]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d103      	bne.n	80066b2 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d10c      	bne.n	80066d2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80066c0:	e007      	b.n	80066d2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80066c2:	f06f 0301 	mvn.w	r3, #1
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80066c8:	e004      	b.n	80066d4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066d2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	e031      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80066de:	2300      	movs	r3, #0
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e2:	e02a      	b.n	800673a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	4013      	ands	r3, r2
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d11e      	bne.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80066f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	4013      	ands	r3, r2
 80066f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d118      	bne.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006704:	4814      	ldr	r0, [pc, #80]	; (8006758 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	4413      	add	r3, r2
 800670e:	440b      	add	r3, r1
 8006710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	490e      	ldr	r1, [pc, #56]	; (8006750 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800671e:	4610      	mov	r0, r2
 8006720:	4798      	blx	r3
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006728:	f06f 0304 	mvn.w	r3, #4
 800672c:	e009      	b.n	8006742 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	3301      	adds	r3, #1
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	2b02      	cmp	r3, #2
 800673e:	d9d1      	bls.n	80066e4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006742:	4618      	mov	r0, r3
 8006744:	3738      	adds	r7, #56	; 0x38
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000aa0 	.word	0x20000aa0
 8006750:	20000a70 	.word	0x20000a70
 8006754:	200000c4 	.word	0x200000c4
 8006758:	20000a7c 	.word	0x20000a7c

0800675c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d903      	bls.n	8006776 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800676e:	f06f 0301 	mvn.w	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e029      	b.n	80067ca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006776:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d11d      	bne.n	80067c4 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006790:	4812      	ldr	r0, [pc, #72]	; (80067dc <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4613      	mov	r3, r2
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	4413      	add	r3, r2
 800679a:	440b      	add	r3, r1
 800679c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	490f      	ldr	r1, [pc, #60]	; (80067e0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067b6:	f06f 0304 	mvn.w	r3, #4
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e005      	b.n	80067ca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e002      	b.n	80067ca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80067c4:	f06f 0301 	mvn.w	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80067ca:	697b      	ldr	r3, [r7, #20]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000aac 	.word	0x20000aac
 80067d8:	200000c4 	.word	0x200000c4
 80067dc:	20000a7c 	.word	0x20000a7c
 80067e0:	20000a70 	.word	0x20000a70

080067e4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b092      	sub	sp, #72	; 0x48
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80067f0:	2300      	movs	r3, #0
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80067f4:	23d7      	movs	r3, #215	; 0xd7
 80067f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80067fa:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <LSM6DSO_0_Probe+0x140>)
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80067fe:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <LSM6DSO_0_Probe+0x144>)
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006802:	4b4a      	ldr	r3, [pc, #296]	; (800692c <LSM6DSO_0_Probe+0x148>)
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006806:	4b4a      	ldr	r3, [pc, #296]	; (8006930 <LSM6DSO_0_Probe+0x14c>)
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800680a:	4b4a      	ldr	r3, [pc, #296]	; (8006934 <LSM6DSO_0_Probe+0x150>)
 800680c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800680e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006812:	4619      	mov	r1, r3
 8006814:	4848      	ldr	r0, [pc, #288]	; (8006938 <LSM6DSO_0_Probe+0x154>)
 8006816:	f7fd fec9 	bl	80045ac <LSM6DSO_RegisterBusIO>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006820:	f06f 0306 	mvn.w	r3, #6
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
 8006826:	e077      	b.n	8006918 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8006828:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800682c:	4619      	mov	r1, r3
 800682e:	4842      	ldr	r0, [pc, #264]	; (8006938 <LSM6DSO_0_Probe+0x154>)
 8006830:	f7fd ffbe 	bl	80047b0 <LSM6DSO_ReadID>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800683a:	f06f 0306 	mvn.w	r3, #6
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
 8006840:	e06a      	b.n	8006918 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8006842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006846:	2b6c      	cmp	r3, #108	; 0x6c
 8006848:	d003      	beq.n	8006852 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800684a:	f06f 0306 	mvn.w	r3, #6
 800684e:	647b      	str	r3, [r7, #68]	; 0x44
 8006850:	e062      	b.n	8006918 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4619      	mov	r1, r3
 8006858:	4837      	ldr	r0, [pc, #220]	; (8006938 <LSM6DSO_0_Probe+0x154>)
 800685a:	f7fd ffbf 	bl	80047dc <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800685e:	7a7b      	ldrb	r3, [r7, #9]
 8006860:	461a      	mov	r2, r3
 8006862:	7a3b      	ldrb	r3, [r7, #8]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	431a      	orrs	r2, r3
 8006868:	7abb      	ldrb	r3, [r7, #10]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4313      	orrs	r3, r2
 800686e:	4a33      	ldr	r2, [pc, #204]	; (800693c <LSM6DSO_0_Probe+0x158>)
 8006870:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006872:	4b33      	ldr	r3, [pc, #204]	; (8006940 <LSM6DSO_0_Probe+0x15c>)
 8006874:	4a30      	ldr	r2, [pc, #192]	; (8006938 <LSM6DSO_0_Probe+0x154>)
 8006876:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006878:	4b32      	ldr	r3, [pc, #200]	; (8006944 <LSM6DSO_0_Probe+0x160>)
 800687a:	4a33      	ldr	r2, [pc, #204]	; (8006948 <LSM6DSO_0_Probe+0x164>)
 800687c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800687e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11d      	bne.n	80068c0 <LSM6DSO_0_Probe+0xdc>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <LSM6DSO_0_Probe+0xdc>
 800688e:	7a7b      	ldrb	r3, [r7, #9]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d115      	bne.n	80068c0 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006894:	4b2d      	ldr	r3, [pc, #180]	; (800694c <LSM6DSO_0_Probe+0x168>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <LSM6DSO_0_Probe+0x16c>)
 800689a:	492e      	ldr	r1, [pc, #184]	; (8006954 <LSM6DSO_0_Probe+0x170>)
 800689c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80068a0:	4b28      	ldr	r3, [pc, #160]	; (8006944 <LSM6DSO_0_Probe+0x160>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <LSM6DSO_0_Probe+0x15c>)
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	4610      	mov	r0, r2
 80068ac:	4798      	blx	r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068b4:	f06f 0304 	mvn.w	r3, #4
 80068b8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ba:	e001      	b.n	80068c0 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068bc:	2300      	movs	r3, #0
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80068c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11d      	bne.n	8006902 <LSM6DSO_0_Probe+0x11e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d018      	beq.n	8006902 <LSM6DSO_0_Probe+0x11e>
 80068d0:	7a3b      	ldrb	r3, [r7, #8]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d115      	bne.n	8006902 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80068d6:	4b1d      	ldr	r3, [pc, #116]	; (800694c <LSM6DSO_0_Probe+0x168>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <LSM6DSO_0_Probe+0x16c>)
 80068dc:	491e      	ldr	r1, [pc, #120]	; (8006958 <LSM6DSO_0_Probe+0x174>)
 80068de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <LSM6DSO_0_Probe+0x160>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <LSM6DSO_0_Probe+0x15c>)
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068f6:	f06f 0304 	mvn.w	r3, #4
 80068fa:	647b      	str	r3, [r7, #68]	; 0x44
 80068fc:	e001      	b.n	8006902 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068fe:	2300      	movs	r3, #0
 8006900:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <LSM6DSO_0_Probe+0x134>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006912:	f06f 0304 	mvn.w	r3, #4
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800691a:	4618      	mov	r0, r3
 800691c:	3748      	adds	r7, #72	; 0x48
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	08001a59 	.word	0x08001a59
 8006928:	08001ad5 	.word	0x08001ad5
 800692c:	08001b89 	.word	0x08001b89
 8006930:	08001b25 	.word	0x08001b25
 8006934:	08001bed 	.word	0x08001bed
 8006938:	20000ab8 	.word	0x20000ab8
 800693c:	20000aac 	.word	0x20000aac
 8006940:	20000a70 	.word	0x20000a70
 8006944:	20000aa0 	.word	0x20000aa0
 8006948:	2000006c 	.word	0x2000006c
 800694c:	200000c4 	.word	0x200000c4
 8006950:	20000a7c 	.word	0x20000a7c
 8006954:	200000a0 	.word	0x200000a0
 8006958:	2000007c 	.word	0x2000007c

0800695c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b092      	sub	sp, #72	; 0x48
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006964:	2300      	movs	r3, #0
 8006966:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006968:	2300      	movs	r3, #0
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800696c:	2333      	movs	r3, #51	; 0x33
 800696e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006972:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <LIS2DW12_0_Probe+0x114>)
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006976:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <LIS2DW12_0_Probe+0x118>)
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800697a:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <LIS2DW12_0_Probe+0x11c>)
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800697e:	4b3f      	ldr	r3, [pc, #252]	; (8006a7c <LIS2DW12_0_Probe+0x120>)
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006982:	4b3f      	ldr	r3, [pc, #252]	; (8006a80 <LIS2DW12_0_Probe+0x124>)
 8006984:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800698a:	4619      	mov	r1, r3
 800698c:	483d      	ldr	r0, [pc, #244]	; (8006a84 <LIS2DW12_0_Probe+0x128>)
 800698e:	f7fb fabb 	bl	8001f08 <LIS2DW12_RegisterBusIO>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006998:	f06f 0306 	mvn.w	r3, #6
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
 800699e:	e062      	b.n	8006a66 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80069a0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80069a4:	4619      	mov	r1, r3
 80069a6:	4837      	ldr	r0, [pc, #220]	; (8006a84 <LIS2DW12_0_Probe+0x128>)
 80069a8:	f7fb fb98 	bl	80020dc <LIS2DW12_ReadID>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069b2:	f06f 0306 	mvn.w	r3, #6
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	e055      	b.n	8006a66 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 80069ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069be:	2b44      	cmp	r3, #68	; 0x44
 80069c0:	d003      	beq.n	80069ca <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069c2:	f06f 0306 	mvn.w	r3, #6
 80069c6:	647b      	str	r3, [r7, #68]	; 0x44
 80069c8:	e04d      	b.n	8006a66 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80069ca:	f107 0308 	add.w	r3, r7, #8
 80069ce:	4619      	mov	r1, r3
 80069d0:	482c      	ldr	r0, [pc, #176]	; (8006a84 <LIS2DW12_0_Probe+0x128>)
 80069d2:	f7fb fb99 	bl	8002108 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80069d6:	7a7b      	ldrb	r3, [r7, #9]
 80069d8:	461a      	mov	r2, r3
 80069da:	7a3b      	ldrb	r3, [r7, #8]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	431a      	orrs	r2, r3
 80069e0:	7abb      	ldrb	r3, [r7, #10]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4313      	orrs	r3, r2
 80069e6:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <LIS2DW12_0_Probe+0x12c>)
 80069e8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80069ea:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <LIS2DW12_0_Probe+0x130>)
 80069ec:	4a25      	ldr	r2, [pc, #148]	; (8006a84 <LIS2DW12_0_Probe+0x128>)
 80069ee:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <LIS2DW12_0_Probe+0x134>)
 80069f2:	4a28      	ldr	r2, [pc, #160]	; (8006a94 <LIS2DW12_0_Probe+0x138>)
 80069f4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11e      	bne.n	8006a3a <LIS2DW12_0_Probe+0xde>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d019      	beq.n	8006a3a <LIS2DW12_0_Probe+0xde>
 8006a06:	7a3b      	ldrb	r3, [r7, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d116      	bne.n	8006a3a <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006a0c:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <LIS2DW12_0_Probe+0x13c>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <LIS2DW12_0_Probe+0x140>)
 8006a12:	3303      	adds	r3, #3
 8006a14:	4922      	ldr	r1, [pc, #136]	; (8006aa0 <LIS2DW12_0_Probe+0x144>)
 8006a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <LIS2DW12_0_Probe+0x134>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <LIS2DW12_0_Probe+0x130>)
 8006a22:	6852      	ldr	r2, [r2, #4]
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a2e:	f06f 0304 	mvn.w	r3, #4
 8006a32:	647b      	str	r3, [r7, #68]	; 0x44
 8006a34:	e001      	b.n	8006a3a <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <LIS2DW12_0_Probe+0xf4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a4a:	f06f 0304 	mvn.w	r3, #4
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <LIS2DW12_0_Probe+0x10a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a60:	f06f 0304 	mvn.w	r3, #4
 8006a64:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3748      	adds	r7, #72	; 0x48
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	08001a59 	.word	0x08001a59
 8006a74:	08001ad5 	.word	0x08001ad5
 8006a78:	08001b89 	.word	0x08001b89
 8006a7c:	08001b25 	.word	0x08001b25
 8006a80:	08001bed 	.word	0x08001bed
 8006a84:	20000ae8 	.word	0x20000ae8
 8006a88:	20000aac 	.word	0x20000aac
 8006a8c:	20000a70 	.word	0x20000a70
 8006a90:	20000aa0 	.word	0x20000aa0
 8006a94:	20000004 	.word	0x20000004
 8006a98:	200000c4 	.word	0x200000c4
 8006a9c:	20000a7c 	.word	0x20000a7c
 8006aa0:	20000014 	.word	0x20000014

08006aa4 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b092      	sub	sp, #72	; 0x48
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006ab4:	233d      	movs	r3, #61	; 0x3d
 8006ab6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006aba:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <LIS2MDL_0_Probe+0x114>)
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006abe:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <LIS2MDL_0_Probe+0x118>)
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006ac2:	4b3f      	ldr	r3, [pc, #252]	; (8006bc0 <LIS2MDL_0_Probe+0x11c>)
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006ac6:	4b3f      	ldr	r3, [pc, #252]	; (8006bc4 <LIS2MDL_0_Probe+0x120>)
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006aca:	4b3f      	ldr	r3, [pc, #252]	; (8006bc8 <LIS2MDL_0_Probe+0x124>)
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	483d      	ldr	r0, [pc, #244]	; (8006bcc <LIS2MDL_0_Probe+0x128>)
 8006ad6:	f7fc fd67 	bl	80035a8 <LIS2MDL_RegisterBusIO>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ae0:	f06f 0306 	mvn.w	r3, #6
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	e062      	b.n	8006bae <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006ae8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006aec:	4619      	mov	r1, r3
 8006aee:	4837      	ldr	r0, [pc, #220]	; (8006bcc <LIS2MDL_0_Probe+0x128>)
 8006af0:	f7fc fe72 	bl	80037d8 <LIS2MDL_ReadID>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006afa:	f06f 0306 	mvn.w	r3, #6
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
 8006b00:	e055      	b.n	8006bae <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8006b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d003      	beq.n	8006b12 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b0a:	f06f 0306 	mvn.w	r3, #6
 8006b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b10:	e04d      	b.n	8006bae <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006b12:	f107 0308 	add.w	r3, r7, #8
 8006b16:	4619      	mov	r1, r3
 8006b18:	482c      	ldr	r0, [pc, #176]	; (8006bcc <LIS2MDL_0_Probe+0x128>)
 8006b1a:	f7fc fe83 	bl	8003824 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b1e:	7a7b      	ldrb	r3, [r7, #9]
 8006b20:	461a      	mov	r2, r3
 8006b22:	7a3b      	ldrb	r3, [r7, #8]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	431a      	orrs	r2, r3
 8006b28:	7abb      	ldrb	r3, [r7, #10]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <LIS2MDL_0_Probe+0x12c>)
 8006b30:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006b32:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <LIS2MDL_0_Probe+0x130>)
 8006b34:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <LIS2MDL_0_Probe+0x128>)
 8006b36:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006b38:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <LIS2MDL_0_Probe+0x134>)
 8006b3a:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <LIS2MDL_0_Probe+0x138>)
 8006b3c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11e      	bne.n	8006b82 <LIS2MDL_0_Probe+0xde>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d019      	beq.n	8006b82 <LIS2MDL_0_Probe+0xde>
 8006b4e:	7abb      	ldrb	r3, [r7, #10]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d116      	bne.n	8006b82 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b54:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <LIS2MDL_0_Probe+0x13c>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <LIS2MDL_0_Probe+0x140>)
 8006b5a:	3306      	adds	r3, #6
 8006b5c:	4922      	ldr	r1, [pc, #136]	; (8006be8 <LIS2MDL_0_Probe+0x144>)
 8006b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <LIS2MDL_0_Probe+0x134>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <LIS2MDL_0_Probe+0x130>)
 8006b6a:	6892      	ldr	r2, [r2, #8]
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b76:	f06f 0304 	mvn.w	r3, #4
 8006b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7c:	e001      	b.n	8006b82 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <LIS2MDL_0_Probe+0xf4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b92:	f06f 0304 	mvn.w	r3, #4
 8006b96:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d107      	bne.n	8006bae <LIS2MDL_0_Probe+0x10a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ba8:	f06f 0304 	mvn.w	r3, #4
 8006bac:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3748      	adds	r7, #72	; 0x48
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08001a59 	.word	0x08001a59
 8006bbc:	08001ad5 	.word	0x08001ad5
 8006bc0:	08001b89 	.word	0x08001b89
 8006bc4:	08001b25 	.word	0x08001b25
 8006bc8:	08001bed 	.word	0x08001bed
 8006bcc:	20000b1c 	.word	0x20000b1c
 8006bd0:	20000aac 	.word	0x20000aac
 8006bd4:	20000a70 	.word	0x20000a70
 8006bd8:	20000aa0 	.word	0x20000aa0
 8006bdc:	20000038 	.word	0x20000038
 8006be0:	200000c4 	.word	0x200000c4
 8006be4:	20000a7c 	.word	0x20000a7c
 8006be8:	20000048 	.word	0x20000048

08006bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf0:	2003      	movs	r0, #3
 8006bf2:	f000 f92f 	bl	8006e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f000 f806 	bl	8006c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bfc:	f7fa fd4c 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c10:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <HAL_InitTick+0x54>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_InitTick+0x58>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f93b 	bl	8006ea2 <HAL_SYSTICK_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00e      	b.n	8006c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b0f      	cmp	r3, #15
 8006c3a:	d80a      	bhi.n	8006c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	f000 f911 	bl	8006e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c48:	4a06      	ldr	r2, [pc, #24]	; (8006c64 <HAL_InitTick+0x5c>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000000 	.word	0x20000000
 8006c60:	200000dc 	.word	0x200000dc
 8006c64:	200000d8 	.word	0x200000d8

08006c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_IncTick+0x20>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_IncTick+0x24>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4413      	add	r3, r2
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <HAL_IncTick+0x24>)
 8006c7a:	6013      	str	r3, [r2, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	200000dc 	.word	0x200000dc
 8006c8c:	20000b48 	.word	0x20000b48

08006c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return uwTick;
 8006c94:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <HAL_GetTick+0x14>)
 8006c96:	681b      	ldr	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000b48 	.word	0x20000b48

08006ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cb0:	f7ff ffee 	bl	8006c90 <HAL_GetTick>
 8006cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d005      	beq.n	8006cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <HAL_Delay+0x44>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cce:	bf00      	nop
 8006cd0:	f7ff ffde 	bl	8006c90 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d8f7      	bhi.n	8006cd0 <HAL_Delay+0x28>
  {
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200000dc 	.word	0x200000dc

08006cf0 <__NVIC_SetPriorityGrouping>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <__NVIC_SetPriorityGrouping+0x40>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <__NVIC_SetPriorityGrouping+0x44>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <__NVIC_SetPriorityGrouping+0x40>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	60d3      	str	r3, [r2, #12]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	e000ed00 	.word	0xe000ed00
 8006d34:	05fa0000 	.word	0x05fa0000

08006d38 <__NVIC_GetPriorityGrouping>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <__NVIC_GetPriorityGrouping+0x18>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	f003 0307 	and.w	r3, r3, #7
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <__NVIC_SetPriority>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db0a      	blt.n	8006d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	490c      	ldr	r1, [pc, #48]	; (8006da0 <__NVIC_SetPriority+0x4c>)
 8006d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d72:	0112      	lsls	r2, r2, #4
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	440b      	add	r3, r1
 8006d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d7c:	e00a      	b.n	8006d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4908      	ldr	r1, [pc, #32]	; (8006da4 <__NVIC_SetPriority+0x50>)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	3b04      	subs	r3, #4
 8006d8c:	0112      	lsls	r2, r2, #4
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	440b      	add	r3, r1
 8006d92:	761a      	strb	r2, [r3, #24]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	e000e100 	.word	0xe000e100
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <NVIC_EncodePriority>:
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f1c3 0307 	rsb	r3, r3, #7
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	bf28      	it	cs
 8006dc6:	2304      	movcs	r3, #4
 8006dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d902      	bls.n	8006dd8 <NVIC_EncodePriority+0x30>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3b03      	subs	r3, #3
 8006dd6:	e000      	b.n	8006dda <NVIC_EncodePriority+0x32>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	43da      	mvns	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	401a      	ands	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006df0:	f04f 31ff 	mov.w	r1, #4294967295
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfa:	43d9      	mvns	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e00:	4313      	orrs	r3, r2
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	; 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <SysTick_Config>:
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e20:	d301      	bcc.n	8006e26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006e22:	2301      	movs	r3, #1
 8006e24:	e00f      	b.n	8006e46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <SysTick_Config+0x40>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e2e:	210f      	movs	r1, #15
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	f7ff ff8e 	bl	8006d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <SysTick_Config+0x40>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <SysTick_Config+0x40>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010

08006e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff47 	bl	8006cf0 <__NVIC_SetPriorityGrouping>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	4603      	mov	r3, r0
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e7c:	f7ff ff5c 	bl	8006d38 <__NVIC_GetPriorityGrouping>
 8006e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	6978      	ldr	r0, [r7, #20]
 8006e88:	f7ff ff8e 	bl	8006da8 <NVIC_EncodePriority>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff5d 	bl	8006d54 <__NVIC_SetPriority>
}
 8006e9a:	bf00      	nop
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff ffb0 	bl	8006e10 <SysTick_Config>
 8006eb0:	4603      	mov	r3, r0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e06a      	b.n	8006fa4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2223      	movs	r2, #35	; 0x23
 8006edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fa fbfd 	bl	80016e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee6:	4b31      	ldr	r3, [pc, #196]	; (8006fac <HAL_ETH_Init+0xf0>)
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	4a30      	ldr	r2, [pc, #192]	; (8006fac <HAL_ETH_Init+0xf0>)
 8006eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ef2:	4b2e      	ldr	r3, [pc, #184]	; (8006fac <HAL_ETH_Init+0xf0>)
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006efe:	4b2c      	ldr	r3, [pc, #176]	; (8006fb0 <HAL_ETH_Init+0xf4>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4a2b      	ldr	r2, [pc, #172]	; (8006fb0 <HAL_ETH_Init+0xf4>)
 8006f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <HAL_ETH_Init+0xf4>)
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	4927      	ldr	r1, [pc, #156]	; (8006fb0 <HAL_ETH_Init+0xf4>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <HAL_ETH_Init+0xf4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f34:	f7ff feac 	bl	8006c90 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006f3a:	e011      	b.n	8006f60 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006f3c:	f7ff fea8 	bl	8006c90 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f4a:	d909      	bls.n	8006f60 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22e0      	movs	r2, #224	; 0xe0
 8006f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e021      	b.n	8006fa4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e4      	bne.n	8006f3c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f958 	bl	8007228 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9ff 	bl	800737c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa55 	bl	800742e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f9bd 	bl	800730c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	40013800 	.word	0x40013800

08006fb4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4b51      	ldr	r3, [pc, #324]	; (8007110 <ETH_SetMACConfig+0x15c>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	7c1b      	ldrb	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <ETH_SetMACConfig+0x28>
 8006fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006fda:	e000      	b.n	8006fde <ETH_SetMACConfig+0x2a>
 8006fdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	7c5b      	ldrb	r3, [r3, #17]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <ETH_SetMACConfig+0x38>
 8006fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fea:	e000      	b.n	8006fee <ETH_SetMACConfig+0x3a>
 8006fec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006fee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006ff4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	7fdb      	ldrb	r3, [r3, #31]
 8006ffa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006ffc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007002:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	7f92      	ldrb	r2, [r2, #30]
 8007008:	2a00      	cmp	r2, #0
 800700a:	d102      	bne.n	8007012 <ETH_SetMACConfig+0x5e>
 800700c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007010:	e000      	b.n	8007014 <ETH_SetMACConfig+0x60>
 8007012:	2200      	movs	r2, #0
                        macconf->Speed |
 8007014:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	7f1b      	ldrb	r3, [r3, #28]
 800701a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800701c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007022:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800702a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007032:	2a00      	cmp	r2, #0
 8007034:	d102      	bne.n	800703c <ETH_SetMACConfig+0x88>
 8007036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703a:	e000      	b.n	800703e <ETH_SetMACConfig+0x8a>
 800703c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800703e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	7bdb      	ldrb	r3, [r3, #15]
 8007044:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007046:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800704c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007054:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007056:	4313      	orrs	r3, r2
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800706e:	2001      	movs	r0, #1
 8007070:	f7ff fe1a 	bl	8006ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f64f 7341 	movw	r3, #65345	; 0xff41
 800708a:	4013      	ands	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007092:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800709a:	2a00      	cmp	r2, #0
 800709c:	d101      	bne.n	80070a2 <ETH_SetMACConfig+0xee>
 800709e:	2280      	movs	r2, #128	; 0x80
 80070a0:	e000      	b.n	80070a4 <ETH_SetMACConfig+0xf0>
 80070a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80070a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80070aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80070b2:	2a01      	cmp	r2, #1
 80070b4:	d101      	bne.n	80070ba <ETH_SetMACConfig+0x106>
 80070b6:	2208      	movs	r2, #8
 80070b8:	e000      	b.n	80070bc <ETH_SetMACConfig+0x108>
 80070ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80070bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	d101      	bne.n	80070cc <ETH_SetMACConfig+0x118>
 80070c8:	2204      	movs	r2, #4
 80070ca:	e000      	b.n	80070ce <ETH_SetMACConfig+0x11a>
 80070cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80070ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80070d6:	2a01      	cmp	r2, #1
 80070d8:	d101      	bne.n	80070de <ETH_SetMACConfig+0x12a>
 80070da:	2202      	movs	r2, #2
 80070dc:	e000      	b.n	80070e0 <ETH_SetMACConfig+0x12c>
 80070de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80070e0:	4313      	orrs	r3, r2
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80070f8:	2001      	movs	r0, #1
 80070fa:	f7ff fdd5 	bl	8006ca8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	619a      	str	r2, [r3, #24]
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	ff20810f 	.word	0xff20810f

08007114 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4b3d      	ldr	r3, [pc, #244]	; (8007224 <ETH_SetDMAConfig+0x110>)
 800712e:	4013      	ands	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	7b1b      	ldrb	r3, [r3, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <ETH_SetDMAConfig+0x2c>
 800713a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800713e:	e000      	b.n	8007142 <ETH_SetDMAConfig+0x2e>
 8007140:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	7b5b      	ldrb	r3, [r3, #13]
 8007146:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007148:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	7f52      	ldrb	r2, [r2, #29]
 800714e:	2a00      	cmp	r2, #0
 8007150:	d102      	bne.n	8007158 <ETH_SetDMAConfig+0x44>
 8007152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007156:	e000      	b.n	800715a <ETH_SetDMAConfig+0x46>
 8007158:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800715a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	7b9b      	ldrb	r3, [r3, #14]
 8007160:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007162:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007168:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	7f1b      	ldrb	r3, [r3, #28]
 800716e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007170:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	7f9b      	ldrb	r3, [r3, #30]
 8007176:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007178:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800717e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007186:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007188:	4313      	orrs	r3, r2
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007198:	461a      	mov	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071aa:	2001      	movs	r0, #1
 80071ac:	f7ff fd7c 	bl	8006ca8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b8:	461a      	mov	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80071c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80071ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80071d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80071de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80071e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80071ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007208:	2001      	movs	r0, #1
 800720a:	f7ff fd4d 	bl	8006ca8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	461a      	mov	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	f8de3f23 	.word	0xf8de3f23

08007228 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b0a6      	sub	sp, #152	; 0x98
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8007236:	2301      	movs	r3, #1
 8007238:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800725e:	2300      	movs	r3, #0
 8007260:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007264:	2300      	movs	r3, #0
 8007266:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007268:	2300      	movs	r3, #0
 800726a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800726e:	2300      	movs	r3, #0
 8007270:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007272:	2300      	movs	r3, #0
 8007274:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800727e:	2300      	movs	r3, #0
 8007280:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800728a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800728e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007294:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800729c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fe86 	bl	8006fb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80072ca:	2300      	movs	r3, #0
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80072d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80072de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80072e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff ff08 	bl	8007114 <ETH_SetDMAConfig>
}
 8007304:	bf00      	nop
 8007306:	3798      	adds	r7, #152	; 0x98
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3305      	adds	r3, #5
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	3204      	adds	r2, #4
 8007324:	7812      	ldrb	r2, [r2, #0]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <ETH_MACAddressConfig+0x68>)
 800732e:	4413      	add	r3, r2
 8007330:	461a      	mov	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3303      	adds	r3, #3
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	061a      	lsls	r2, r3, #24
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3302      	adds	r3, #2
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3301      	adds	r3, #1
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	4313      	orrs	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <ETH_MACAddressConfig+0x6c>)
 800735e:	4413      	add	r3, r2
 8007360:	461a      	mov	r2, r3
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6013      	str	r3, [r2, #0]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40028040 	.word	0x40028040
 8007378:	40028044 	.word	0x40028044

0800737c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e03e      	b.n	8007408 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68d9      	ldr	r1, [r3, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	440b      	add	r3, r1
 800739a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2200      	movs	r2, #0
 80073b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	3206      	adds	r2, #6
 80073bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d80c      	bhi.n	80073ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68d9      	ldr	r1, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	440b      	add	r3, r1
 80073e4:	461a      	mov	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e004      	b.n	80073f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d9bd      	bls.n	800738a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007420:	611a      	str	r2, [r3, #16]
}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e046      	b.n	80074ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6919      	ldr	r1, [r3, #16]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2200      	movs	r2, #0
 8007464:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007478:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8007480:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	3212      	adds	r2, #18
 8007496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d80c      	bhi.n	80074ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6919      	ldr	r1, [r3, #16]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	440b      	add	r3, r1
 80074b2:	461a      	mov	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e004      	b.n	80074c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	461a      	mov	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d9b5      	bls.n	800743c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fa:	60da      	str	r2, [r3, #12]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	; 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e175      	b.n	8007814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007528:	2201      	movs	r2, #1
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4013      	ands	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	429a      	cmp	r2, r3
 8007542:	f040 8164 	bne.w	800780e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d005      	beq.n	800755e <HAL_GPIO_Init+0x56>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d130      	bne.n	80075c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	2203      	movs	r2, #3
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	4313      	orrs	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007594:	2201      	movs	r2, #1
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	4013      	ands	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	f003 0201 	and.w	r2, r3, #1
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d017      	beq.n	80075fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	2203      	movs	r2, #3
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	43db      	mvns	r3, r3
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4013      	ands	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d123      	bne.n	8007650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	08da      	lsrs	r2, r3, #3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3208      	adds	r2, #8
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	220f      	movs	r2, #15
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4313      	orrs	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	08da      	lsrs	r2, r3, #3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3208      	adds	r2, #8
 800764a:	69b9      	ldr	r1, [r7, #24]
 800764c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	2203      	movs	r2, #3
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	43db      	mvns	r3, r3
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	4013      	ands	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0203 	and.w	r2, r3, #3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4313      	orrs	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80be 	beq.w	800780e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007692:	4b66      	ldr	r3, [pc, #408]	; (800782c <HAL_GPIO_Init+0x324>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	4a65      	ldr	r2, [pc, #404]	; (800782c <HAL_GPIO_Init+0x324>)
 8007698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769c:	6453      	str	r3, [r2, #68]	; 0x44
 800769e:	4b63      	ldr	r3, [pc, #396]	; (800782c <HAL_GPIO_Init+0x324>)
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80076aa:	4a61      	ldr	r2, [pc, #388]	; (8007830 <HAL_GPIO_Init+0x328>)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	089b      	lsrs	r3, r3, #2
 80076b0:	3302      	adds	r3, #2
 80076b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	220f      	movs	r2, #15
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43db      	mvns	r3, r3
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	4013      	ands	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a58      	ldr	r2, [pc, #352]	; (8007834 <HAL_GPIO_Init+0x32c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d037      	beq.n	8007746 <HAL_GPIO_Init+0x23e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a57      	ldr	r2, [pc, #348]	; (8007838 <HAL_GPIO_Init+0x330>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d031      	beq.n	8007742 <HAL_GPIO_Init+0x23a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a56      	ldr	r2, [pc, #344]	; (800783c <HAL_GPIO_Init+0x334>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d02b      	beq.n	800773e <HAL_GPIO_Init+0x236>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a55      	ldr	r2, [pc, #340]	; (8007840 <HAL_GPIO_Init+0x338>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d025      	beq.n	800773a <HAL_GPIO_Init+0x232>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a54      	ldr	r2, [pc, #336]	; (8007844 <HAL_GPIO_Init+0x33c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01f      	beq.n	8007736 <HAL_GPIO_Init+0x22e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a53      	ldr	r2, [pc, #332]	; (8007848 <HAL_GPIO_Init+0x340>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d019      	beq.n	8007732 <HAL_GPIO_Init+0x22a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a52      	ldr	r2, [pc, #328]	; (800784c <HAL_GPIO_Init+0x344>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <HAL_GPIO_Init+0x226>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a51      	ldr	r2, [pc, #324]	; (8007850 <HAL_GPIO_Init+0x348>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00d      	beq.n	800772a <HAL_GPIO_Init+0x222>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a50      	ldr	r2, [pc, #320]	; (8007854 <HAL_GPIO_Init+0x34c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d007      	beq.n	8007726 <HAL_GPIO_Init+0x21e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a4f      	ldr	r2, [pc, #316]	; (8007858 <HAL_GPIO_Init+0x350>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <HAL_GPIO_Init+0x21a>
 800771e:	2309      	movs	r3, #9
 8007720:	e012      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007722:	230a      	movs	r3, #10
 8007724:	e010      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007726:	2308      	movs	r3, #8
 8007728:	e00e      	b.n	8007748 <HAL_GPIO_Init+0x240>
 800772a:	2307      	movs	r3, #7
 800772c:	e00c      	b.n	8007748 <HAL_GPIO_Init+0x240>
 800772e:	2306      	movs	r3, #6
 8007730:	e00a      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007732:	2305      	movs	r3, #5
 8007734:	e008      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007736:	2304      	movs	r3, #4
 8007738:	e006      	b.n	8007748 <HAL_GPIO_Init+0x240>
 800773a:	2303      	movs	r3, #3
 800773c:	e004      	b.n	8007748 <HAL_GPIO_Init+0x240>
 800773e:	2302      	movs	r3, #2
 8007740:	e002      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <HAL_GPIO_Init+0x240>
 8007746:	2300      	movs	r3, #0
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	f002 0203 	and.w	r2, r2, #3
 800774e:	0092      	lsls	r2, r2, #2
 8007750:	4093      	lsls	r3, r2
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4313      	orrs	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007758:	4935      	ldr	r1, [pc, #212]	; (8007830 <HAL_GPIO_Init+0x328>)
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	089b      	lsrs	r3, r3, #2
 800775e:	3302      	adds	r3, #2
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007766:	4b3d      	ldr	r3, [pc, #244]	; (800785c <HAL_GPIO_Init+0x354>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	43db      	mvns	r3, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4013      	ands	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800778a:	4a34      	ldr	r2, [pc, #208]	; (800785c <HAL_GPIO_Init+0x354>)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007790:	4b32      	ldr	r3, [pc, #200]	; (800785c <HAL_GPIO_Init+0x354>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80077b4:	4a29      	ldr	r2, [pc, #164]	; (800785c <HAL_GPIO_Init+0x354>)
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80077ba:	4b28      	ldr	r3, [pc, #160]	; (800785c <HAL_GPIO_Init+0x354>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077de:	4a1f      	ldr	r2, [pc, #124]	; (800785c <HAL_GPIO_Init+0x354>)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077e4:	4b1d      	ldr	r3, [pc, #116]	; (800785c <HAL_GPIO_Init+0x354>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4013      	ands	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <HAL_GPIO_Init+0x354>)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3301      	adds	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	f67f ae86 	bls.w	8007528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3724      	adds	r7, #36	; 0x24
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40023800 	.word	0x40023800
 8007830:	40013800 	.word	0x40013800
 8007834:	40020000 	.word	0x40020000
 8007838:	40020400 	.word	0x40020400
 800783c:	40020800 	.word	0x40020800
 8007840:	40020c00 	.word	0x40020c00
 8007844:	40021000 	.word	0x40021000
 8007848:	40021400 	.word	0x40021400
 800784c:	40021800 	.word	0x40021800
 8007850:	40021c00 	.word	0x40021c00
 8007854:	40022000 	.word	0x40022000
 8007858:	40022400 	.word	0x40022400
 800785c:	40013c00 	.word	0x40013c00

08007860 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e0d9      	b.n	8007a30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800787c:	2201      	movs	r2, #1
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4013      	ands	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	429a      	cmp	r2, r3
 8007894:	f040 80c9 	bne.w	8007a2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007898:	4a6b      	ldr	r2, [pc, #428]	; (8007a48 <HAL_GPIO_DeInit+0x1e8>)
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	089b      	lsrs	r3, r3, #2
 800789e:	3302      	adds	r3, #2
 80078a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	220f      	movs	r2, #15
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a63      	ldr	r2, [pc, #396]	; (8007a4c <HAL_GPIO_DeInit+0x1ec>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d037      	beq.n	8007932 <HAL_GPIO_DeInit+0xd2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a62      	ldr	r2, [pc, #392]	; (8007a50 <HAL_GPIO_DeInit+0x1f0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d031      	beq.n	800792e <HAL_GPIO_DeInit+0xce>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a61      	ldr	r2, [pc, #388]	; (8007a54 <HAL_GPIO_DeInit+0x1f4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d02b      	beq.n	800792a <HAL_GPIO_DeInit+0xca>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a60      	ldr	r2, [pc, #384]	; (8007a58 <HAL_GPIO_DeInit+0x1f8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d025      	beq.n	8007926 <HAL_GPIO_DeInit+0xc6>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a5f      	ldr	r2, [pc, #380]	; (8007a5c <HAL_GPIO_DeInit+0x1fc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01f      	beq.n	8007922 <HAL_GPIO_DeInit+0xc2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a5e      	ldr	r2, [pc, #376]	; (8007a60 <HAL_GPIO_DeInit+0x200>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d019      	beq.n	800791e <HAL_GPIO_DeInit+0xbe>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a5d      	ldr	r2, [pc, #372]	; (8007a64 <HAL_GPIO_DeInit+0x204>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <HAL_GPIO_DeInit+0xba>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a5c      	ldr	r2, [pc, #368]	; (8007a68 <HAL_GPIO_DeInit+0x208>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00d      	beq.n	8007916 <HAL_GPIO_DeInit+0xb6>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a5b      	ldr	r2, [pc, #364]	; (8007a6c <HAL_GPIO_DeInit+0x20c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d007      	beq.n	8007912 <HAL_GPIO_DeInit+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a5a      	ldr	r2, [pc, #360]	; (8007a70 <HAL_GPIO_DeInit+0x210>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <HAL_GPIO_DeInit+0xae>
 800790a:	2309      	movs	r3, #9
 800790c:	e012      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 800790e:	230a      	movs	r3, #10
 8007910:	e010      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 8007912:	2308      	movs	r3, #8
 8007914:	e00e      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 8007916:	2307      	movs	r3, #7
 8007918:	e00c      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 800791a:	2306      	movs	r3, #6
 800791c:	e00a      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 800791e:	2305      	movs	r3, #5
 8007920:	e008      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 8007922:	2304      	movs	r3, #4
 8007924:	e006      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 8007926:	2303      	movs	r3, #3
 8007928:	e004      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 800792a:	2302      	movs	r3, #2
 800792c:	e002      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <HAL_GPIO_DeInit+0xd4>
 8007932:	2300      	movs	r3, #0
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	f002 0203 	and.w	r2, r2, #3
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	4093      	lsls	r3, r2
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	d132      	bne.n	80079aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007944:	4b4b      	ldr	r3, [pc, #300]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	43db      	mvns	r3, r3
 800794c:	4949      	ldr	r1, [pc, #292]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 800794e:	4013      	ands	r3, r2
 8007950:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007952:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	43db      	mvns	r3, r3
 800795a:	4946      	ldr	r1, [pc, #280]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 800795c:	4013      	ands	r3, r2
 800795e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007960:	4b44      	ldr	r3, [pc, #272]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43db      	mvns	r3, r3
 8007968:	4942      	ldr	r1, [pc, #264]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 800796a:	4013      	ands	r3, r2
 800796c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800796e:	4b41      	ldr	r3, [pc, #260]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	43db      	mvns	r3, r3
 8007976:	493f      	ldr	r1, [pc, #252]	; (8007a74 <HAL_GPIO_DeInit+0x214>)
 8007978:	4013      	ands	r3, r2
 800797a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	220f      	movs	r2, #15
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800798c:	4a2e      	ldr	r2, [pc, #184]	; (8007a48 <HAL_GPIO_DeInit+0x1e8>)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	3302      	adds	r3, #2
 8007994:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	43da      	mvns	r2, r3
 800799c:	482a      	ldr	r0, [pc, #168]	; (8007a48 <HAL_GPIO_DeInit+0x1e8>)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	400a      	ands	r2, r1
 80079a4:	3302      	adds	r3, #2
 80079a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	2103      	movs	r1, #3
 80079b4:	fa01 f303 	lsl.w	r3, r1, r3
 80079b8:	43db      	mvns	r3, r3
 80079ba:	401a      	ands	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	08da      	lsrs	r2, r3, #3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3208      	adds	r2, #8
 80079c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	220f      	movs	r2, #15
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	43db      	mvns	r3, r3
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	08d2      	lsrs	r2, r2, #3
 80079e0:	4019      	ands	r1, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3208      	adds	r2, #8
 80079e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	2103      	movs	r1, #3
 80079f4:	fa01 f303 	lsl.w	r3, r1, r3
 80079f8:	43db      	mvns	r3, r3
 80079fa:	401a      	ands	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	2101      	movs	r1, #1
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	401a      	ands	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	2103      	movs	r1, #3
 8007a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a22:	43db      	mvns	r3, r3
 8007a24:	401a      	ands	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	f67f af22 	bls.w	800787c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40013800 	.word	0x40013800
 8007a4c:	40020000 	.word	0x40020000
 8007a50:	40020400 	.word	0x40020400
 8007a54:	40020800 	.word	0x40020800
 8007a58:	40020c00 	.word	0x40020c00
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40021400 	.word	0x40021400
 8007a64:	40021800 	.word	0x40021800
 8007a68:	40021c00 	.word	0x40021c00
 8007a6c:	40022000 	.word	0x40022000
 8007a70:	40022400 	.word	0x40022400
 8007a74:	40013c00 	.word	0x40013c00

08007a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
 8007a94:	e001      	b.n	8007a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	807b      	strh	r3, [r7, #2]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ab8:	787b      	ldrb	r3, [r7, #1]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007abe:	887a      	ldrh	r2, [r7, #2]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007ac4:	e003      	b.n	8007ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007ac6:	887b      	ldrh	r3, [r7, #2]
 8007ac8:	041a      	lsls	r2, r3, #16
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	619a      	str	r2, [r3, #24]
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4013      	ands	r3, r2
 8007af2:	041a      	lsls	r2, r3, #16
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	43d9      	mvns	r1, r3
 8007af8:	887b      	ldrh	r3, [r7, #2]
 8007afa:	400b      	ands	r3, r1
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	619a      	str	r2, [r3, #24]
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e07f      	b.n	8007c22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f8a9 	bl	8007c8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	; 0x24
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d107      	bne.n	8007b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	e006      	b.n	8007b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d104      	bne.n	8007baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6859      	ldr	r1, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <HAL_I2C_Init+0x11c>)
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69d9      	ldr	r1, [r3, #28]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	02008000 	.word	0x02008000

08007c30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e021      	b.n	8007c86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2224      	movs	r2, #36	; 0x24
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0201 	bic.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f821 	bl	8007ca2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	817b      	strh	r3, [r7, #10]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	813b      	strh	r3, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	f040 80f9 	bne.w	8007ed2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_I2C_Mem_Write+0x34>
 8007ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0ed      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_I2C_Mem_Write+0x4e>
 8007d02:	2302      	movs	r3, #2
 8007d04:	e0e6      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d0e:	f7fe ffbf 	bl	8006c90 <HAL_GetTick>
 8007d12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2319      	movs	r3, #25
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fadd 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0d1      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2221      	movs	r2, #33	; 0x21
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2240      	movs	r2, #64	; 0x40
 8007d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d58:	88f8      	ldrh	r0, [r7, #6]
 8007d5a:	893a      	ldrh	r2, [r7, #8]
 8007d5c:	8979      	ldrh	r1, [r7, #10]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4603      	mov	r3, r0
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f9ed 	bl	8008148 <I2C_RequestMemoryWrite>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0a9      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d90e      	bls.n	8007da8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	8979      	ldrh	r1, [r7, #10]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fc39 	bl	8008618 <I2C_TransferConfig>
 8007da6:	e00f      	b.n	8007dc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	8979      	ldrh	r1, [r7, #10]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fc28 	bl	8008618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fac7 	bl	8008360 <I2C_WaitOnTXISFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e07b      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d034      	beq.n	8007e80 <HAL_I2C_Mem_Write+0x1c8>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d130      	bne.n	8007e80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2200      	movs	r2, #0
 8007e26:	2180      	movs	r1, #128	; 0x80
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fa59 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e04d      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2bff      	cmp	r3, #255	; 0xff
 8007e40:	d90e      	bls.n	8007e60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	8979      	ldrh	r1, [r7, #10]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fbdd 	bl	8008618 <I2C_TransferConfig>
 8007e5e:	e00f      	b.n	8007e80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	8979      	ldrh	r1, [r7, #10]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fbcc 	bl	8008618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d19e      	bne.n	8007dc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 faa6 	bl	80083e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e01a      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <HAL_I2C_Mem_Write+0x224>)
 8007eb2:	400b      	ands	r3, r1
 8007eb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	fe00e800 	.word	0xfe00e800

08007ee0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	817b      	strh	r3, [r7, #10]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	813b      	strh	r3, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	f040 80fd 	bne.w	8008102 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <HAL_I2C_Mem_Read+0x34>
 8007f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d105      	bne.n	8007f20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0f1      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_I2C_Mem_Read+0x4e>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e0ea      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f36:	f7fe feab 	bl	8006c90 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	2319      	movs	r3, #25
 8007f42:	2201      	movs	r2, #1
 8007f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f9c9 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0d5      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2222      	movs	r2, #34	; 0x22
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2240      	movs	r2, #64	; 0x40
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f80:	88f8      	ldrh	r0, [r7, #6]
 8007f82:	893a      	ldrh	r2, [r7, #8]
 8007f84:	8979      	ldrh	r1, [r7, #10]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4603      	mov	r3, r0
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f92d 	bl	80081f0 <I2C_RequestMemoryRead>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0ad      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d90e      	bls.n	8007fd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	22ff      	movs	r2, #255	; 0xff
 8007fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	8979      	ldrh	r1, [r7, #10]
 8007fc0:	4b52      	ldr	r3, [pc, #328]	; (800810c <HAL_I2C_Mem_Read+0x22c>)
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fb25 	bl	8008618 <I2C_TransferConfig>
 8007fce:	e00f      	b.n	8007ff0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	8979      	ldrh	r1, [r7, #10]
 8007fe2:	4b4a      	ldr	r3, [pc, #296]	; (800810c <HAL_I2C_Mem_Read+0x22c>)
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fb14 	bl	8008618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f970 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e07c      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d034      	beq.n	80080b0 <HAL_I2C_Mem_Read+0x1d0>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d130      	bne.n	80080b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	2200      	movs	r2, #0
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f941 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e04d      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806c:	b29b      	uxth	r3, r3
 800806e:	2bff      	cmp	r3, #255	; 0xff
 8008070:	d90e      	bls.n	8008090 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	b2da      	uxtb	r2, r3
 800807e:	8979      	ldrh	r1, [r7, #10]
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fac5 	bl	8008618 <I2C_TransferConfig>
 800808e:	e00f      	b.n	80080b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	8979      	ldrh	r1, [r7, #10]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fab4 	bl	8008618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d19a      	bne.n	8007ff0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f98e 	bl	80083e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e01a      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2220      	movs	r2, #32
 80080d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <HAL_I2C_Mem_Read+0x230>)
 80080e2:	400b      	ands	r3, r1
 80080e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008102:	2302      	movs	r3, #2
  }
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	80002400 	.word	0x80002400
 8008110:	fe00e800 	.word	0xfe00e800

08008114 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008122:	b2db      	uxtb	r3, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	461a      	mov	r2, r3
 8008156:	4603      	mov	r3, r0
 8008158:	817b      	strh	r3, [r7, #10]
 800815a:	460b      	mov	r3, r1
 800815c:	813b      	strh	r3, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	8979      	ldrh	r1, [r7, #10]
 8008168:	4b20      	ldr	r3, [pc, #128]	; (80081ec <I2C_RequestMemoryWrite+0xa4>)
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 fa51 	bl	8008618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f8f0 	bl	8008360 <I2C_WaitOnTXISFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e02c      	b.n	80081e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d105      	bne.n	800819c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008190:	893b      	ldrh	r3, [r7, #8]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	629a      	str	r2, [r3, #40]	; 0x28
 800819a:	e015      	b.n	80081c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800819c:	893b      	ldrh	r3, [r7, #8]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081aa:	69fa      	ldr	r2, [r7, #28]
 80081ac:	69b9      	ldr	r1, [r7, #24]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f8d6 	bl	8008360 <I2C_WaitOnTXISFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e012      	b.n	80081e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081be:	893b      	ldrh	r3, [r7, #8]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f884 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	80002000 	.word	0x80002000

080081f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	817b      	strh	r3, [r7, #10]
 8008202:	460b      	mov	r3, r1
 8008204:	813b      	strh	r3, [r7, #8]
 8008206:	4613      	mov	r3, r2
 8008208:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	b2da      	uxtb	r2, r3
 800820e:	8979      	ldrh	r1, [r7, #10]
 8008210:	4b20      	ldr	r3, [pc, #128]	; (8008294 <I2C_RequestMemoryRead+0xa4>)
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 f9fe 	bl	8008618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800821c:	69fa      	ldr	r2, [r7, #28]
 800821e:	69b9      	ldr	r1, [r7, #24]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f89d 	bl	8008360 <I2C_WaitOnTXISFlagUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e02c      	b.n	800828a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008236:	893b      	ldrh	r3, [r7, #8]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
 8008240:	e015      	b.n	800826e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008242:	893b      	ldrh	r3, [r7, #8]
 8008244:	0a1b      	lsrs	r3, r3, #8
 8008246:	b29b      	uxth	r3, r3
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	69b9      	ldr	r1, [r7, #24]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f883 	bl	8008360 <I2C_WaitOnTXISFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e012      	b.n	800828a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008264:	893b      	ldrh	r3, [r7, #8]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	2200      	movs	r2, #0
 8008276:	2140      	movs	r1, #64	; 0x40
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f831 	bl	80082e0 <I2C_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	80002000 	.word	0x80002000

08008298 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d103      	bne.n	80082b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d007      	beq.n	80082d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	619a      	str	r2, [r3, #24]
  }
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082f0:	e022      	b.n	8008338 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d01e      	beq.n	8008338 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fe fcc9 	bl	8006c90 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d113      	bne.n	8008338 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	f043 0220 	orr.w	r2, r3, #32
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e00f      	b.n	8008358 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	429a      	cmp	r2, r3
 8008354:	d0cd      	beq.n	80082f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800836c:	e02c      	b.n	80083c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f870 	bl	8008458 <I2C_IsErrorOccurred>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e02a      	b.n	80083d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d01e      	beq.n	80083c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838a:	f7fe fc81 	bl	8006c90 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d302      	bcc.n	80083a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d113      	bne.n	80083c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a4:	f043 0220 	orr.w	r2, r3, #32
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e007      	b.n	80083d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d1cb      	bne.n	800836e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083ec:	e028      	b.n	8008440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f830 	bl	8008458 <I2C_IsErrorOccurred>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e026      	b.n	8008450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008402:	f7fe fc45 	bl	8006c90 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d113      	bne.n	8008440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	f043 0220 	orr.w	r2, r3, #32
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e007      	b.n	8008450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b20      	cmp	r3, #32
 800844c:	d1cf      	bne.n	80083ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	; 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d068      	beq.n	8008556 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2210      	movs	r2, #16
 800848a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800848c:	e049      	b.n	8008522 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d045      	beq.n	8008522 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008496:	f7fe fbfb 	bl	8006c90 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d302      	bcc.n	80084ac <I2C_IsErrorOccurred+0x54>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d13a      	bne.n	8008522 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ce:	d121      	bne.n	8008514 <I2C_IsErrorOccurred+0xbc>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084d6:	d01d      	beq.n	8008514 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80084d8:	7cfb      	ldrb	r3, [r7, #19]
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d01a      	beq.n	8008514 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80084ee:	f7fe fbcf 	bl	8006c90 <HAL_GetTick>
 80084f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084f4:	e00e      	b.n	8008514 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80084f6:	f7fe fbcb 	bl	8006c90 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b19      	cmp	r3, #25
 8008502:	d907      	bls.n	8008514 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	f043 0320 	orr.w	r3, r3, #32
 800850a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008512:	e006      	b.n	8008522 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b20      	cmp	r3, #32
 8008520:	d1e9      	bne.n	80084f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b20      	cmp	r3, #32
 800852e:	d003      	beq.n	8008538 <I2C_IsErrorOccurred+0xe0>
 8008530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0aa      	beq.n	800848e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800853c:	2b00      	cmp	r3, #0
 800853e:	d103      	bne.n	8008548 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2220      	movs	r2, #32
 8008546:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f043 0304 	orr.w	r3, r3, #4
 800854e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f043 0308 	orr.w	r3, r3, #8
 8008590:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800859a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	f043 0302 	orr.w	r3, r3, #2
 80085b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80085c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01c      	beq.n	8008606 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff fe63 	bl	8008298 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6859      	ldr	r1, [r3, #4]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <I2C_IsErrorOccurred+0x1bc>)
 80085de:	400b      	ands	r3, r1
 80085e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	fe00e800 	.word	0xfe00e800

08008618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	817b      	strh	r3, [r7, #10]
 8008626:	4613      	mov	r3, r2
 8008628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800862a:	897b      	ldrh	r3, [r7, #10]
 800862c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008630:	7a7b      	ldrb	r3, [r7, #9]
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008638:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	4313      	orrs	r3, r2
 8008642:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008646:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	0d5b      	lsrs	r3, r3, #21
 8008652:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <I2C_TransferConfig+0x60>)
 8008658:	430b      	orrs	r3, r1
 800865a:	43db      	mvns	r3, r3
 800865c:	ea02 0103 	and.w	r1, r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	430a      	orrs	r2, r1
 8008668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	03ff63ff 	.word	0x03ff63ff

0800867c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b20      	cmp	r3, #32
 8008690:	d138      	bne.n	8008704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008698:	2b01      	cmp	r3, #1
 800869a:	d101      	bne.n	80086a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800869c:	2302      	movs	r3, #2
 800869e:	e032      	b.n	8008706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	; 0x24
 80086ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6819      	ldr	r1, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	e000      	b.n	8008706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008712:	b480      	push	{r7}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b20      	cmp	r3, #32
 8008726:	d139      	bne.n	800879c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008732:	2302      	movs	r3, #2
 8008734:	e033      	b.n	800879e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2224      	movs	r2, #36	; 0x24
 8008742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008764:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ac:	b08f      	sub	sp, #60	; 0x3c
 80087ae:	af0a      	add	r7, sp, #40	; 0x28
 80087b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e116      	b.n	80089ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f9 f89a 	bl	8001910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2203      	movs	r2, #3
 80087e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fe92 	bl	800a524 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	687e      	ldr	r6, [r7, #4]
 8008808:	466d      	mov	r5, sp
 800880a:	f106 0410 	add.w	r4, r6, #16
 800880e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008816:	e894 0003 	ldmia.w	r4, {r0, r1}
 800881a:	e885 0003 	stmia.w	r5, {r0, r1}
 800881e:	1d33      	adds	r3, r6, #4
 8008820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008822:	6838      	ldr	r0, [r7, #0]
 8008824:	f001 fe26 	bl	800a474 <USB_CoreInit>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e0d7      	b.n	80089ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fe80 	bl	800a546 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
 800884a:	e04a      	b.n	80088e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	333d      	adds	r3, #61	; 0x3d
 800885c:	2201      	movs	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008860:	7bfa      	ldrb	r2, [r7, #15]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	333c      	adds	r3, #60	; 0x3c
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008874:	7bfa      	ldrb	r2, [r7, #15]
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	b298      	uxth	r0, r3
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4613      	mov	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	3344      	adds	r3, #68	; 0x44
 8008888:	4602      	mov	r2, r0
 800888a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800888c:	7bfa      	ldrb	r2, [r7, #15]
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	3340      	adds	r3, #64	; 0x40
 800889c:	2200      	movs	r2, #0
 800889e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088a0:	7bfa      	ldrb	r2, [r7, #15]
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	3348      	adds	r3, #72	; 0x48
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088b4:	7bfa      	ldrb	r2, [r7, #15]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	334c      	adds	r3, #76	; 0x4c
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088c8:	7bfa      	ldrb	r2, [r7, #15]
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	3354      	adds	r3, #84	; 0x54
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	3301      	adds	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
 80088e2:	7bfa      	ldrb	r2, [r7, #15]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3af      	bcc.n	800884c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
 80088f0:	e044      	b.n	800897c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800891a:	7bfa      	ldrb	r2, [r7, #15]
 800891c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800891e:	7bfa      	ldrb	r2, [r7, #15]
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800894a:	7bfa      	ldrb	r2, [r7, #15]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	4413      	add	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	3301      	adds	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d3b5      	bcc.n	80088f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	687e      	ldr	r6, [r7, #4]
 800898e:	466d      	mov	r5, sp
 8008990:	f106 0410 	add.w	r4, r6, #16
 8008994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800899a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800899c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80089a4:	1d33      	adds	r3, r6, #4
 80089a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a8:	6838      	ldr	r0, [r7, #0]
 80089aa:	f001 fe19 	bl	800a5e0 <USB_DevInit>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e014      	b.n	80089ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d102      	bne.n	80089de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f80b 	bl	80089f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 ffd7 	bl	800a996 <USB_DevDisconnect>

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080089f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <HAL_PCDEx_ActivateLPM+0x44>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	10000003 	.word	0x10000003

08008a3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a04      	ldr	r2, [pc, #16]	; (8008a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a4a:	6013      	str	r3, [r2, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40007000 	.word	0x40007000

08008a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008a64:	2300      	movs	r3, #0
 8008a66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e291      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8087 	beq.w	8008b8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a80:	4b96      	ldr	r3, [pc, #600]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d00c      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a8c:	4b93      	ldr	r3, [pc, #588]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 030c 	and.w	r3, r3, #12
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d112      	bne.n	8008abe <HAL_RCC_OscConfig+0x62>
 8008a98:	4b90      	ldr	r3, [pc, #576]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aa4:	d10b      	bne.n	8008abe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa6:	4b8d      	ldr	r3, [pc, #564]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d06c      	beq.n	8008b8c <HAL_RCC_OscConfig+0x130>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d168      	bne.n	8008b8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e26b      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x7a>
 8008ac8:	4b84      	ldr	r3, [pc, #528]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a83      	ldr	r2, [pc, #524]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e02e      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <HAL_RCC_OscConfig+0x9c>
 8008ade:	4b7f      	ldr	r3, [pc, #508]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a7e      	ldr	r2, [pc, #504]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b7c      	ldr	r3, [pc, #496]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a7b      	ldr	r2, [pc, #492]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e01d      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0xc0>
 8008b02:	4b76      	ldr	r3, [pc, #472]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a75      	ldr	r2, [pc, #468]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4b73      	ldr	r3, [pc, #460]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a72      	ldr	r2, [pc, #456]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e00b      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008b1c:	4b6f      	ldr	r3, [pc, #444]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a6e      	ldr	r2, [pc, #440]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	4b6c      	ldr	r3, [pc, #432]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a6b      	ldr	r2, [pc, #428]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d013      	beq.n	8008b64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3c:	f7fe f8a8 	bl	8006c90 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b44:	f7fe f8a4 	bl	8006c90 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b64      	cmp	r3, #100	; 0x64
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e21f      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b56:	4b61      	ldr	r3, [pc, #388]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCC_OscConfig+0xe8>
 8008b62:	e014      	b.n	8008b8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7fe f894 	bl	8006c90 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b6c:	f7fe f890 	bl	8006c90 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b64      	cmp	r3, #100	; 0x64
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e20b      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b7e:	4b57      	ldr	r3, [pc, #348]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x110>
 8008b8a:	e000      	b.n	8008b8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d069      	beq.n	8008c6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b9a:	4b50      	ldr	r3, [pc, #320]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ba6:	4b4d      	ldr	r3, [pc, #308]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	d11c      	bne.n	8008bec <HAL_RCC_OscConfig+0x190>
 8008bb2:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d116      	bne.n	8008bec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bbe:	4b47      	ldr	r3, [pc, #284]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x17a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d001      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e1df      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd6:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	493d      	ldr	r1, [pc, #244]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bea:	e040      	b.n	8008c6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d023      	beq.n	8008c3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf4:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a38      	ldr	r2, [pc, #224]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c00:	f7fe f846 	bl	8006c90 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c08:	f7fe f842 	bl	8006c90 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e1bd      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c1a:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f0      	beq.n	8008c08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c26:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4929      	ldr	r1, [pc, #164]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	600b      	str	r3, [r1, #0]
 8008c3a:	e018      	b.n	8008c6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c3c:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c48:	f7fe f822 	bl	8006c90 <HAL_GetTick>
 8008c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c50:	f7fe f81e 	bl	8006c90 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e199      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c62:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f0      	bne.n	8008c50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d038      	beq.n	8008cec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d019      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c86:	4a15      	ldr	r2, [pc, #84]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8e:	f7fd ffff 	bl	8006c90 <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c96:	f7fd fffb 	bl	8006c90 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e176      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ca8:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0f0      	beq.n	8008c96 <HAL_RCC_OscConfig+0x23a>
 8008cb4:	e01a      	b.n	8008cec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cb6:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cba:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <HAL_RCC_OscConfig+0x280>)
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc2:	f7fd ffe5 	bl	8006c90 <HAL_GetTick>
 8008cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cc8:	e00a      	b.n	8008ce0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cca:	f7fd ffe1 	bl	8006c90 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d903      	bls.n	8008ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e15c      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
 8008cdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ce0:	4b91      	ldr	r3, [pc, #580]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1ee      	bne.n	8008cca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80a4 	beq.w	8008e42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cfa:	4b8b      	ldr	r3, [pc, #556]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10d      	bne.n	8008d22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d06:	4b88      	ldr	r3, [pc, #544]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	4a87      	ldr	r2, [pc, #540]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d10:	6413      	str	r3, [r2, #64]	; 0x40
 8008d12:	4b85      	ldr	r3, [pc, #532]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1a:	60bb      	str	r3, [r7, #8]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d22:	4b82      	ldr	r3, [pc, #520]	; (8008f2c <HAL_RCC_OscConfig+0x4d0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d118      	bne.n	8008d60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d2e:	4b7f      	ldr	r3, [pc, #508]	; (8008f2c <HAL_RCC_OscConfig+0x4d0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a7e      	ldr	r2, [pc, #504]	; (8008f2c <HAL_RCC_OscConfig+0x4d0>)
 8008d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d3a:	f7fd ffa9 	bl	8006c90 <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d42:	f7fd ffa5 	bl	8006c90 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b64      	cmp	r3, #100	; 0x64
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e120      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d54:	4b75      	ldr	r3, [pc, #468]	; (8008f2c <HAL_RCC_OscConfig+0x4d0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <HAL_RCC_OscConfig+0x31a>
 8008d68:	4b6f      	ldr	r3, [pc, #444]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6c:	4a6e      	ldr	r2, [pc, #440]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d6e:	f043 0301 	orr.w	r3, r3, #1
 8008d72:	6713      	str	r3, [r2, #112]	; 0x70
 8008d74:	e02d      	b.n	8008dd2 <HAL_RCC_OscConfig+0x376>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10c      	bne.n	8008d98 <HAL_RCC_OscConfig+0x33c>
 8008d7e:	4b6a      	ldr	r3, [pc, #424]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	4a69      	ldr	r2, [pc, #420]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	6713      	str	r3, [r2, #112]	; 0x70
 8008d8a:	4b67      	ldr	r3, [pc, #412]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	4a66      	ldr	r2, [pc, #408]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008d90:	f023 0304 	bic.w	r3, r3, #4
 8008d94:	6713      	str	r3, [r2, #112]	; 0x70
 8008d96:	e01c      	b.n	8008dd2 <HAL_RCC_OscConfig+0x376>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCC_OscConfig+0x35e>
 8008da0:	4b61      	ldr	r3, [pc, #388]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	4a60      	ldr	r2, [pc, #384]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008da6:	f043 0304 	orr.w	r3, r3, #4
 8008daa:	6713      	str	r3, [r2, #112]	; 0x70
 8008dac:	4b5e      	ldr	r3, [pc, #376]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	4a5d      	ldr	r2, [pc, #372]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	6713      	str	r3, [r2, #112]	; 0x70
 8008db8:	e00b      	b.n	8008dd2 <HAL_RCC_OscConfig+0x376>
 8008dba:	4b5b      	ldr	r3, [pc, #364]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	4a5a      	ldr	r2, [pc, #360]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc6:	4b58      	ldr	r3, [pc, #352]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dca:	4a57      	ldr	r2, [pc, #348]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dcc:	f023 0304 	bic.w	r3, r3, #4
 8008dd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d015      	beq.n	8008e06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dda:	f7fd ff59 	bl	8006c90 <HAL_GetTick>
 8008dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008de0:	e00a      	b.n	8008df8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de2:	f7fd ff55 	bl	8006c90 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e0ce      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df8:	4b4b      	ldr	r3, [pc, #300]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ee      	beq.n	8008de2 <HAL_RCC_OscConfig+0x386>
 8008e04:	e014      	b.n	8008e30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e06:	f7fd ff43 	bl	8006c90 <HAL_GetTick>
 8008e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e0c:	e00a      	b.n	8008e24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0e:	f7fd ff3f 	bl	8006c90 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e0b8      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e24:	4b40      	ldr	r3, [pc, #256]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ee      	bne.n	8008e0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d105      	bne.n	8008e42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e36:	4b3c      	ldr	r3, [pc, #240]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	4a3b      	ldr	r2, [pc, #236]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 80a4 	beq.w	8008f94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e4c:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f003 030c 	and.w	r3, r3, #12
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d06b      	beq.n	8008f30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d149      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e60:	4b31      	ldr	r3, [pc, #196]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a30      	ldr	r2, [pc, #192]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6c:	f7fd ff10 	bl	8006c90 <HAL_GetTick>
 8008e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e74:	f7fd ff0c 	bl	8006c90 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e087      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e86:	4b28      	ldr	r3, [pc, #160]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f0      	bne.n	8008e74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69da      	ldr	r2, [r3, #28]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	019b      	lsls	r3, r3, #6
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	041b      	lsls	r3, r3, #16
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	061b      	lsls	r3, r3, #24
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	4a1b      	ldr	r2, [pc, #108]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ebe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ec0:	4b19      	ldr	r3, [pc, #100]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ecc:	f7fd fee0 	bl	8006c90 <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed4:	f7fd fedc 	bl	8006c90 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e057      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ee6:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f0      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x478>
 8008ef2:	e04f      	b.n	8008f94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f00:	f7fd fec6 	bl	8006c90 <HAL_GetTick>
 8008f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f06:	e008      	b.n	8008f1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f08:	f7fd fec2 	bl	8006c90 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e03d      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f1a:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <HAL_RCC_OscConfig+0x4cc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f0      	bne.n	8008f08 <HAL_RCC_OscConfig+0x4ac>
 8008f26:	e035      	b.n	8008f94 <HAL_RCC_OscConfig+0x538>
 8008f28:	40023800 	.word	0x40023800
 8008f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f30:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <HAL_RCC_OscConfig+0x544>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d028      	beq.n	8008f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d121      	bne.n	8008f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d11a      	bne.n	8008f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f60:	4013      	ands	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d111      	bne.n	8008f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40023800 	.word	0x40023800

08008fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0d0      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fbc:	4b6a      	ldr	r3, [pc, #424]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d910      	bls.n	8008fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fca:	4b67      	ldr	r3, [pc, #412]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f023 020f 	bic.w	r2, r3, #15
 8008fd2:	4965      	ldr	r1, [pc, #404]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fda:	4b63      	ldr	r3, [pc, #396]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d001      	beq.n	8008fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0b8      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d020      	beq.n	800903a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009004:	4b59      	ldr	r3, [pc, #356]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	4a58      	ldr	r2, [pc, #352]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 800900a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800900e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800901c:	4b53      	ldr	r3, [pc, #332]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	4a52      	ldr	r2, [pc, #328]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009028:	4b50      	ldr	r3, [pc, #320]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	494d      	ldr	r1, [pc, #308]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009036:	4313      	orrs	r3, r2
 8009038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d040      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d107      	bne.n	800905e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800904e:	4b47      	ldr	r3, [pc, #284]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d115      	bne.n	8009086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e07f      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d107      	bne.n	8009076 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009066:	4b41      	ldr	r3, [pc, #260]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e073      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009076:	4b3d      	ldr	r3, [pc, #244]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e06b      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009086:	4b39      	ldr	r3, [pc, #228]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f023 0203 	bic.w	r2, r3, #3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4936      	ldr	r1, [pc, #216]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009094:	4313      	orrs	r3, r2
 8009096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009098:	f7fd fdfa 	bl	8006c90 <HAL_GetTick>
 800909c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909e:	e00a      	b.n	80090b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090a0:	f7fd fdf6 	bl	8006c90 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e053      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b6:	4b2d      	ldr	r3, [pc, #180]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 020c 	and.w	r2, r3, #12
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d1eb      	bne.n	80090a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c8:	4b27      	ldr	r3, [pc, #156]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d210      	bcs.n	80090f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d6:	4b24      	ldr	r3, [pc, #144]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f023 020f 	bic.w	r2, r3, #15
 80090de:	4922      	ldr	r1, [pc, #136]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e6:	4b20      	ldr	r3, [pc, #128]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d001      	beq.n	80090f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e032      	b.n	800915e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d008      	beq.n	8009116 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009104:	4b19      	ldr	r3, [pc, #100]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4916      	ldr	r1, [pc, #88]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009112:	4313      	orrs	r3, r2
 8009114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d009      	beq.n	8009136 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009122:	4b12      	ldr	r3, [pc, #72]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	490e      	ldr	r1, [pc, #56]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009132:	4313      	orrs	r3, r2
 8009134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009136:	f000 f821 	bl	800917c <HAL_RCC_GetSysClockFreq>
 800913a:	4602      	mov	r2, r0
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	091b      	lsrs	r3, r3, #4
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	490a      	ldr	r1, [pc, #40]	; (8009170 <HAL_RCC_ClockConfig+0x1cc>)
 8009148:	5ccb      	ldrb	r3, [r1, r3]
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	4a09      	ldr	r2, [pc, #36]	; (8009174 <HAL_RCC_ClockConfig+0x1d0>)
 8009150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <HAL_RCC_ClockConfig+0x1d4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fd56 	bl	8006c08 <HAL_InitTick>

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	40023c00 	.word	0x40023c00
 800916c:	40023800 	.word	0x40023800
 8009170:	0800bc6c 	.word	0x0800bc6c
 8009174:	20000000 	.word	0x20000000
 8009178:	200000d8 	.word	0x200000d8

0800917c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800917c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009180:	b094      	sub	sp, #80	; 0x50
 8009182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	647b      	str	r3, [r7, #68]	; 0x44
 8009188:	2300      	movs	r3, #0
 800918a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800918c:	2300      	movs	r3, #0
 800918e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009194:	4b79      	ldr	r3, [pc, #484]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f003 030c 	and.w	r3, r3, #12
 800919c:	2b08      	cmp	r3, #8
 800919e:	d00d      	beq.n	80091bc <HAL_RCC_GetSysClockFreq+0x40>
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	f200 80e1 	bhi.w	8009368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_RCC_GetSysClockFreq+0x34>
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d003      	beq.n	80091b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80091ae:	e0db      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091b0:	4b73      	ldr	r3, [pc, #460]	; (8009380 <HAL_RCC_GetSysClockFreq+0x204>)
 80091b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091b4:	e0db      	b.n	800936e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091b6:	4b73      	ldr	r3, [pc, #460]	; (8009384 <HAL_RCC_GetSysClockFreq+0x208>)
 80091b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091ba:	e0d8      	b.n	800936e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091bc:	4b6f      	ldr	r3, [pc, #444]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091c4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80091c6:	4b6d      	ldr	r3, [pc, #436]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d063      	beq.n	800929a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091d2:	4b6a      	ldr	r3, [pc, #424]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	099b      	lsrs	r3, r3, #6
 80091d8:	2200      	movs	r2, #0
 80091da:	63bb      	str	r3, [r7, #56]	; 0x38
 80091dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e4:	633b      	str	r3, [r7, #48]	; 0x30
 80091e6:	2300      	movs	r3, #0
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	f04f 0000 	mov.w	r0, #0
 80091f6:	f04f 0100 	mov.w	r1, #0
 80091fa:	0159      	lsls	r1, r3, #5
 80091fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009200:	0150      	lsls	r0, r2, #5
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	4621      	mov	r1, r4
 8009208:	1a51      	subs	r1, r2, r1
 800920a:	6139      	str	r1, [r7, #16]
 800920c:	4629      	mov	r1, r5
 800920e:	eb63 0301 	sbc.w	r3, r3, r1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009220:	4659      	mov	r1, fp
 8009222:	018b      	lsls	r3, r1, #6
 8009224:	4651      	mov	r1, sl
 8009226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800922a:	4651      	mov	r1, sl
 800922c:	018a      	lsls	r2, r1, #6
 800922e:	4651      	mov	r1, sl
 8009230:	ebb2 0801 	subs.w	r8, r2, r1
 8009234:	4659      	mov	r1, fp
 8009236:	eb63 0901 	sbc.w	r9, r3, r1
 800923a:	f04f 0200 	mov.w	r2, #0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800924a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800924e:	4690      	mov	r8, r2
 8009250:	4699      	mov	r9, r3
 8009252:	4623      	mov	r3, r4
 8009254:	eb18 0303 	adds.w	r3, r8, r3
 8009258:	60bb      	str	r3, [r7, #8]
 800925a:	462b      	mov	r3, r5
 800925c:	eb49 0303 	adc.w	r3, r9, r3
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800926e:	4629      	mov	r1, r5
 8009270:	024b      	lsls	r3, r1, #9
 8009272:	4621      	mov	r1, r4
 8009274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009278:	4621      	mov	r1, r4
 800927a:	024a      	lsls	r2, r1, #9
 800927c:	4610      	mov	r0, r2
 800927e:	4619      	mov	r1, r3
 8009280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009282:	2200      	movs	r2, #0
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
 8009286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800928c:	f7f7 f860 	bl	8000350 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4613      	mov	r3, r2
 8009296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009298:	e058      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800929a:	4b38      	ldr	r3, [pc, #224]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	099b      	lsrs	r3, r3, #6
 80092a0:	2200      	movs	r2, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	4611      	mov	r1, r2
 80092a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80092aa:	623b      	str	r3, [r7, #32]
 80092ac:	2300      	movs	r3, #0
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
 80092b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	f04f 0000 	mov.w	r0, #0
 80092bc:	f04f 0100 	mov.w	r1, #0
 80092c0:	0159      	lsls	r1, r3, #5
 80092c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092c6:	0150      	lsls	r0, r2, #5
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4641      	mov	r1, r8
 80092ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80092d2:	4649      	mov	r1, r9
 80092d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80092d8:	f04f 0200 	mov.w	r2, #0
 80092dc:	f04f 0300 	mov.w	r3, #0
 80092e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092ec:	ebb2 040a 	subs.w	r4, r2, sl
 80092f0:	eb63 050b 	sbc.w	r5, r3, fp
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	00eb      	lsls	r3, r5, #3
 80092fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009302:	00e2      	lsls	r2, r4, #3
 8009304:	4614      	mov	r4, r2
 8009306:	461d      	mov	r5, r3
 8009308:	4643      	mov	r3, r8
 800930a:	18e3      	adds	r3, r4, r3
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	464b      	mov	r3, r9
 8009310:	eb45 0303 	adc.w	r3, r5, r3
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009322:	4629      	mov	r1, r5
 8009324:	028b      	lsls	r3, r1, #10
 8009326:	4621      	mov	r1, r4
 8009328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800932c:	4621      	mov	r1, r4
 800932e:	028a      	lsls	r2, r1, #10
 8009330:	4610      	mov	r0, r2
 8009332:	4619      	mov	r1, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009336:	2200      	movs	r2, #0
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	61fa      	str	r2, [r7, #28]
 800933c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009340:	f7f7 f806 	bl	8000350 <__aeabi_uldivmod>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4613      	mov	r3, r2
 800934a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800934c:	4b0b      	ldr	r3, [pc, #44]	; (800937c <HAL_RCC_GetSysClockFreq+0x200>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	0c1b      	lsrs	r3, r3, #16
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	3301      	adds	r3, #1
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800935c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800935e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009360:	fbb2 f3f3 	udiv	r3, r2, r3
 8009364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009366:	e002      	b.n	800936e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009368:	4b05      	ldr	r3, [pc, #20]	; (8009380 <HAL_RCC_GetSysClockFreq+0x204>)
 800936a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800936c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800936e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009370:	4618      	mov	r0, r3
 8009372:	3750      	adds	r7, #80	; 0x50
 8009374:	46bd      	mov	sp, r7
 8009376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800937a:	bf00      	nop
 800937c:	40023800 	.word	0x40023800
 8009380:	00f42400 	.word	0x00f42400
 8009384:	007a1200 	.word	0x007a1200

08009388 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800938c:	4b03      	ldr	r3, [pc, #12]	; (800939c <HAL_RCC_GetHCLKFreq+0x14>)
 800938e:	681b      	ldr	r3, [r3, #0]
}
 8009390:	4618      	mov	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000000 	.word	0x20000000

080093a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093a4:	f7ff fff0 	bl	8009388 <HAL_RCC_GetHCLKFreq>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	0a9b      	lsrs	r3, r3, #10
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	4903      	ldr	r1, [pc, #12]	; (80093c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093b6:	5ccb      	ldrb	r3, [r1, r3]
 80093b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093bc:	4618      	mov	r0, r3
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	40023800 	.word	0x40023800
 80093c4:	0800bc7c 	.word	0x0800bc7c

080093c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093cc:	f7ff ffdc 	bl	8009388 <HAL_RCC_GetHCLKFreq>
 80093d0:	4602      	mov	r2, r0
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	0b5b      	lsrs	r3, r3, #13
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	4903      	ldr	r1, [pc, #12]	; (80093ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80093de:	5ccb      	ldrb	r3, [r1, r3]
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40023800 	.word	0x40023800
 80093ec:	0800bc7c 	.word	0x0800bc7c

080093f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d012      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009418:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	4a68      	ldr	r2, [pc, #416]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800941e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009422:	6093      	str	r3, [r2, #8]
 8009424:	4b66      	ldr	r3, [pc, #408]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	4964      	ldr	r1, [pc, #400]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800942e:	4313      	orrs	r3, r2
 8009430:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800943a:	2301      	movs	r3, #1
 800943c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d017      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800944c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	4959      	ldr	r1, [pc, #356]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800945a:	4313      	orrs	r3, r2
 800945c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009468:	d101      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d017      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009486:	4b4e      	ldr	r3, [pc, #312]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800948c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	494a      	ldr	r1, [pc, #296]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a4:	d101      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80094b2:	2301      	movs	r3, #1
 80094b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80094c2:	2301      	movs	r3, #1
 80094c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 808b 	beq.w	80095ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	4a39      	ldr	r2, [pc, #228]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094de:	6413      	str	r3, [r2, #64]	; 0x40
 80094e0:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e8:	60bb      	str	r3, [r7, #8]
 80094ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094ec:	4b35      	ldr	r3, [pc, #212]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a34      	ldr	r2, [pc, #208]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f8:	f7fd fbca 	bl	8006c90 <HAL_GetTick>
 80094fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80094fe:	e008      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009500:	f7fd fbc6 	bl	8006c90 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b64      	cmp	r3, #100	; 0x64
 800950c:	d901      	bls.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e357      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009512:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f0      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800951e:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009526:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d035      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	429a      	cmp	r2, r3
 800953a:	d02e      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800953c:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800953e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009544:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009546:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	4a1d      	ldr	r2, [pc, #116]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009550:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009552:	4b1b      	ldr	r3, [pc, #108]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009556:	4a1a      	ldr	r2, [pc, #104]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800955c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800955e:	4a18      	ldr	r2, [pc, #96]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009564:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b01      	cmp	r3, #1
 800956e:	d114      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009570:	f7fd fb8e 	bl	8006c90 <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009576:	e00a      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009578:	f7fd fb8a 	bl	8006c90 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	f241 3288 	movw	r2, #5000	; 0x1388
 8009586:	4293      	cmp	r3, r2
 8009588:	d901      	bls.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e319      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800958e:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0ee      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a6:	d111      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095b6:	400b      	ands	r3, r1
 80095b8:	4901      	ldr	r1, [pc, #4]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
 80095be:	e00b      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40007000 	.word	0x40007000
 80095c8:	0ffffcff 	.word	0x0ffffcff
 80095cc:	4baa      	ldr	r3, [pc, #680]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	4aa9      	ldr	r2, [pc, #676]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80095d6:	6093      	str	r3, [r2, #8]
 80095d8:	4ba7      	ldr	r3, [pc, #668]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e4:	49a4      	ldr	r1, [pc, #656]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0310 	and.w	r3, r3, #16
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d010      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095f6:	4ba0      	ldr	r3, [pc, #640]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fc:	4a9e      	ldr	r2, [pc, #632]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009602:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009606:	4b9c      	ldr	r3, [pc, #624]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009608:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	4999      	ldr	r1, [pc, #612]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009624:	4b94      	ldr	r3, [pc, #592]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009632:	4991      	ldr	r1, [pc, #580]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009646:	4b8c      	ldr	r3, [pc, #560]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009654:	4988      	ldr	r1, [pc, #544]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009668:	4b83      	ldr	r3, [pc, #524]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	4980      	ldr	r1, [pc, #512]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009678:	4313      	orrs	r3, r2
 800967a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800968a:	4b7b      	ldr	r3, [pc, #492]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800968c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009690:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009698:	4977      	ldr	r1, [pc, #476]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800969a:	4313      	orrs	r3, r2
 800969c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096ac:	4b72      	ldr	r3, [pc, #456]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b2:	f023 0203 	bic.w	r2, r3, #3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	496f      	ldr	r1, [pc, #444]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096ce:	4b6a      	ldr	r3, [pc, #424]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	f023 020c 	bic.w	r2, r3, #12
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096dc:	4966      	ldr	r1, [pc, #408]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096f0:	4b61      	ldr	r3, [pc, #388]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fe:	495e      	ldr	r1, [pc, #376]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009712:	4b59      	ldr	r3, [pc, #356]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009718:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009720:	4955      	ldr	r1, [pc, #340]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009722:	4313      	orrs	r3, r2
 8009724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009734:	4b50      	ldr	r3, [pc, #320]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009742:	494d      	ldr	r1, [pc, #308]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009756:	4b48      	ldr	r3, [pc, #288]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800975c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009764:	4944      	ldr	r1, [pc, #272]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009778:	4b3f      	ldr	r3, [pc, #252]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009786:	493c      	ldr	r1, [pc, #240]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800979a:	4b37      	ldr	r3, [pc, #220]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800979c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a8:	4933      	ldr	r1, [pc, #204]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097bc:	4b2e      	ldr	r3, [pc, #184]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ca:	492b      	ldr	r1, [pc, #172]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80097de:	4b26      	ldr	r3, [pc, #152]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ec:	4922      	ldr	r1, [pc, #136]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097fc:	d101      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80097fe:	2301      	movs	r3, #1
 8009800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800980e:	2301      	movs	r3, #1
 8009810:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800981e:	4b16      	ldr	r3, [pc, #88]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009824:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982c:	4912      	ldr	r1, [pc, #72]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800982e:	4313      	orrs	r3, r2
 8009830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009840:	4b0d      	ldr	r3, [pc, #52]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009846:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009850:	4909      	ldr	r1, [pc, #36]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009852:	4313      	orrs	r3, r2
 8009854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d006      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 80d9 	beq.w	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a01      	ldr	r2, [pc, #4]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009876:	e001      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009878:	40023800 	.word	0x40023800
 800987c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987e:	f7fd fa07 	bl	8006c90 <HAL_GetTick>
 8009882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009884:	e008      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009886:	f7fd fa03 	bl	8006c90 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b64      	cmp	r3, #100	; 0x64
 8009892:	d901      	bls.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e194      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009898:	4b6c      	ldr	r3, [pc, #432]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f0      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d021      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d11d      	bne.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80098b8:	4b64      	ldr	r3, [pc, #400]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	f003 0303 	and.w	r3, r3, #3
 80098c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80098c6:	4b61      	ldr	r3, [pc, #388]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098cc:	0e1b      	lsrs	r3, r3, #24
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	019a      	lsls	r2, r3, #6
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	041b      	lsls	r3, r3, #16
 80098de:	431a      	orrs	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	061b      	lsls	r3, r3, #24
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	071b      	lsls	r3, r3, #28
 80098ec:	4957      	ldr	r1, [pc, #348]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009908:	d00a      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02e      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800991e:	d129      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009920:	4b4a      	ldr	r3, [pc, #296]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009926:	0c1b      	lsrs	r3, r3, #16
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800992e:	4b47      	ldr	r3, [pc, #284]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009934:	0f1b      	lsrs	r3, r3, #28
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	019a      	lsls	r2, r3, #6
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	041b      	lsls	r3, r3, #16
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	061b      	lsls	r3, r3, #24
 800994e:	431a      	orrs	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	071b      	lsls	r3, r3, #28
 8009954:	493d      	ldr	r1, [pc, #244]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800995c:	4b3b      	ldr	r3, [pc, #236]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800995e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009962:	f023 021f 	bic.w	r2, r3, #31
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	3b01      	subs	r3, #1
 800996c:	4937      	ldr	r1, [pc, #220]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01d      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009980:	4b32      	ldr	r3, [pc, #200]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009986:	0e1b      	lsrs	r3, r3, #24
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800998e:	4b2f      	ldr	r3, [pc, #188]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009994:	0f1b      	lsrs	r3, r3, #28
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	019a      	lsls	r2, r3, #6
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	431a      	orrs	r2, r3
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	071b      	lsls	r3, r3, #28
 80099b4:	4925      	ldr	r1, [pc, #148]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d011      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	019a      	lsls	r2, r3, #6
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	041b      	lsls	r3, r3, #16
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	061b      	lsls	r3, r3, #24
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	071b      	lsls	r3, r3, #28
 80099e4:	4919      	ldr	r1, [pc, #100]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099ec:	4b17      	ldr	r3, [pc, #92]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099f8:	f7fd f94a 	bl	8006c90 <HAL_GetTick>
 80099fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099fe:	e008      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a00:	f7fd f946 	bl	8006c90 <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b64      	cmp	r3, #100	; 0x64
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e0d7      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0f0      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	f040 80cd 	bne.w	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a32:	f7fd f92d 	bl	8006c90 <HAL_GetTick>
 8009a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a38:	e00a      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a3a:	f7fd f929 	bl	8006c90 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b64      	cmp	r3, #100	; 0x64
 8009a46:	d903      	bls.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e0ba      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009a4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a50:	4b5e      	ldr	r3, [pc, #376]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a5c:	d0ed      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d009      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d02e      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d12a      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a86:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8c:	0c1b      	lsrs	r3, r3, #16
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a94:	4b4d      	ldr	r3, [pc, #308]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9a:	0f1b      	lsrs	r3, r3, #28
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	019a      	lsls	r2, r3, #6
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	041b      	lsls	r3, r3, #16
 8009aac:	431a      	orrs	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	061b      	lsls	r3, r3, #24
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	071b      	lsls	r3, r3, #28
 8009aba:	4944      	ldr	r1, [pc, #272]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ac2:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	493d      	ldr	r1, [pc, #244]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d022      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009af0:	d11d      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009af2:	4b36      	ldr	r3, [pc, #216]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	0e1b      	lsrs	r3, r3, #24
 8009afa:	f003 030f 	and.w	r3, r3, #15
 8009afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b00:	4b32      	ldr	r3, [pc, #200]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	0f1b      	lsrs	r3, r3, #28
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	019a      	lsls	r2, r3, #6
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	041b      	lsls	r3, r3, #16
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	061b      	lsls	r3, r3, #24
 8009b20:	431a      	orrs	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	071b      	lsls	r3, r3, #28
 8009b26:	4929      	ldr	r1, [pc, #164]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d028      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b3a:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	0e1b      	lsrs	r3, r3, #24
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b48:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4e:	0c1b      	lsrs	r3, r3, #16
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	019a      	lsls	r2, r3, #6
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	431a      	orrs	r2, r3
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	061b      	lsls	r3, r3, #24
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	071b      	lsls	r3, r3, #28
 8009b6e:	4917      	ldr	r1, [pc, #92]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b76:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4911      	ldr	r1, [pc, #68]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b98:	f7fd f87a 	bl	8006c90 <HAL_GetTick>
 8009b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ba0:	f7fd f876 	bl	8006c90 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b64      	cmp	r3, #100	; 0x64
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e007      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bb2:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bbe:	d1ef      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	40023800 	.word	0x40023800

08009bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e040      	b.n	8009c64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7f7 fe2c 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2224      	movs	r2, #36	; 0x24
 8009bfc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0201 	bic.w	r2, r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f82c 	bl	8009c6c <UART_SetConfig>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e022      	b.n	8009c64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa84 	bl	800a134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb0b 	bl	800a278 <UART_CheckIdleState>
 8009c62:	4603      	mov	r3, r0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4ba6      	ldr	r3, [pc, #664]	; (8009f30 <UART_SetConfig+0x2c4>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a94      	ldr	r2, [pc, #592]	; (8009f34 <UART_SetConfig+0x2c8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d120      	bne.n	8009d2a <UART_SetConfig+0xbe>
 8009ce8:	4b93      	ldr	r3, [pc, #588]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d816      	bhi.n	8009d24 <UART_SetConfig+0xb8>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <UART_SetConfig+0x90>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d13 	.word	0x08009d13
 8009d08:	08009d1f 	.word	0x08009d1f
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	77fb      	strb	r3, [r7, #31]
 8009d10:	e150      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d12:	2302      	movs	r3, #2
 8009d14:	77fb      	strb	r3, [r7, #31]
 8009d16:	e14d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	77fb      	strb	r3, [r7, #31]
 8009d1c:	e14a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d1e:	2308      	movs	r3, #8
 8009d20:	77fb      	strb	r3, [r7, #31]
 8009d22:	e147      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d24:	2310      	movs	r3, #16
 8009d26:	77fb      	strb	r3, [r7, #31]
 8009d28:	e144      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a83      	ldr	r2, [pc, #524]	; (8009f3c <UART_SetConfig+0x2d0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d132      	bne.n	8009d9a <UART_SetConfig+0x12e>
 8009d34:	4b80      	ldr	r3, [pc, #512]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3a:	f003 030c 	and.w	r3, r3, #12
 8009d3e:	2b0c      	cmp	r3, #12
 8009d40:	d828      	bhi.n	8009d94 <UART_SetConfig+0x128>
 8009d42:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <UART_SetConfig+0xdc>)
 8009d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d48:	08009d7d 	.word	0x08009d7d
 8009d4c:	08009d95 	.word	0x08009d95
 8009d50:	08009d95 	.word	0x08009d95
 8009d54:	08009d95 	.word	0x08009d95
 8009d58:	08009d89 	.word	0x08009d89
 8009d5c:	08009d95 	.word	0x08009d95
 8009d60:	08009d95 	.word	0x08009d95
 8009d64:	08009d95 	.word	0x08009d95
 8009d68:	08009d83 	.word	0x08009d83
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	08009d8f 	.word	0x08009d8f
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	e118      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d82:	2302      	movs	r3, #2
 8009d84:	77fb      	strb	r3, [r7, #31]
 8009d86:	e115      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e112      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d8e:	2308      	movs	r3, #8
 8009d90:	77fb      	strb	r3, [r7, #31]
 8009d92:	e10f      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d94:	2310      	movs	r3, #16
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e10c      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a68      	ldr	r2, [pc, #416]	; (8009f40 <UART_SetConfig+0x2d4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d120      	bne.n	8009de6 <UART_SetConfig+0x17a>
 8009da4:	4b64      	ldr	r3, [pc, #400]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009dae:	2b30      	cmp	r3, #48	; 0x30
 8009db0:	d013      	beq.n	8009dda <UART_SetConfig+0x16e>
 8009db2:	2b30      	cmp	r3, #48	; 0x30
 8009db4:	d814      	bhi.n	8009de0 <UART_SetConfig+0x174>
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d009      	beq.n	8009dce <UART_SetConfig+0x162>
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d810      	bhi.n	8009de0 <UART_SetConfig+0x174>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <UART_SetConfig+0x15c>
 8009dc2:	2b10      	cmp	r3, #16
 8009dc4:	d006      	beq.n	8009dd4 <UART_SetConfig+0x168>
 8009dc6:	e00b      	b.n	8009de0 <UART_SetConfig+0x174>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e0f2      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	77fb      	strb	r3, [r7, #31]
 8009dd2:	e0ef      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dd4:	2304      	movs	r3, #4
 8009dd6:	77fb      	strb	r3, [r7, #31]
 8009dd8:	e0ec      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dda:	2308      	movs	r3, #8
 8009ddc:	77fb      	strb	r3, [r7, #31]
 8009dde:	e0e9      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009de0:	2310      	movs	r3, #16
 8009de2:	77fb      	strb	r3, [r7, #31]
 8009de4:	e0e6      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a56      	ldr	r2, [pc, #344]	; (8009f44 <UART_SetConfig+0x2d8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d120      	bne.n	8009e32 <UART_SetConfig+0x1c6>
 8009df0:	4b51      	ldr	r3, [pc, #324]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8009dfc:	d013      	beq.n	8009e26 <UART_SetConfig+0x1ba>
 8009dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8009e00:	d814      	bhi.n	8009e2c <UART_SetConfig+0x1c0>
 8009e02:	2b80      	cmp	r3, #128	; 0x80
 8009e04:	d009      	beq.n	8009e1a <UART_SetConfig+0x1ae>
 8009e06:	2b80      	cmp	r3, #128	; 0x80
 8009e08:	d810      	bhi.n	8009e2c <UART_SetConfig+0x1c0>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <UART_SetConfig+0x1a8>
 8009e0e:	2b40      	cmp	r3, #64	; 0x40
 8009e10:	d006      	beq.n	8009e20 <UART_SetConfig+0x1b4>
 8009e12:	e00b      	b.n	8009e2c <UART_SetConfig+0x1c0>
 8009e14:	2300      	movs	r3, #0
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e0cc      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	77fb      	strb	r3, [r7, #31]
 8009e1e:	e0c9      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e20:	2304      	movs	r3, #4
 8009e22:	77fb      	strb	r3, [r7, #31]
 8009e24:	e0c6      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e26:	2308      	movs	r3, #8
 8009e28:	77fb      	strb	r3, [r7, #31]
 8009e2a:	e0c3      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	77fb      	strb	r3, [r7, #31]
 8009e30:	e0c0      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a44      	ldr	r2, [pc, #272]	; (8009f48 <UART_SetConfig+0x2dc>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d125      	bne.n	8009e88 <UART_SetConfig+0x21c>
 8009e3c:	4b3e      	ldr	r3, [pc, #248]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e4a:	d017      	beq.n	8009e7c <UART_SetConfig+0x210>
 8009e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e50:	d817      	bhi.n	8009e82 <UART_SetConfig+0x216>
 8009e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e56:	d00b      	beq.n	8009e70 <UART_SetConfig+0x204>
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e5c:	d811      	bhi.n	8009e82 <UART_SetConfig+0x216>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <UART_SetConfig+0x1fe>
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	d006      	beq.n	8009e76 <UART_SetConfig+0x20a>
 8009e68:	e00b      	b.n	8009e82 <UART_SetConfig+0x216>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	77fb      	strb	r3, [r7, #31]
 8009e6e:	e0a1      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e70:	2302      	movs	r3, #2
 8009e72:	77fb      	strb	r3, [r7, #31]
 8009e74:	e09e      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e76:	2304      	movs	r3, #4
 8009e78:	77fb      	strb	r3, [r7, #31]
 8009e7a:	e09b      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	77fb      	strb	r3, [r7, #31]
 8009e80:	e098      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e82:	2310      	movs	r3, #16
 8009e84:	77fb      	strb	r3, [r7, #31]
 8009e86:	e095      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a2f      	ldr	r2, [pc, #188]	; (8009f4c <UART_SetConfig+0x2e0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d125      	bne.n	8009ede <UART_SetConfig+0x272>
 8009e92:	4b29      	ldr	r3, [pc, #164]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ea0:	d017      	beq.n	8009ed2 <UART_SetConfig+0x266>
 8009ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ea6:	d817      	bhi.n	8009ed8 <UART_SetConfig+0x26c>
 8009ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eac:	d00b      	beq.n	8009ec6 <UART_SetConfig+0x25a>
 8009eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb2:	d811      	bhi.n	8009ed8 <UART_SetConfig+0x26c>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <UART_SetConfig+0x254>
 8009eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ebc:	d006      	beq.n	8009ecc <UART_SetConfig+0x260>
 8009ebe:	e00b      	b.n	8009ed8 <UART_SetConfig+0x26c>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	77fb      	strb	r3, [r7, #31]
 8009ec4:	e076      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	77fb      	strb	r3, [r7, #31]
 8009eca:	e073      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ecc:	2304      	movs	r3, #4
 8009ece:	77fb      	strb	r3, [r7, #31]
 8009ed0:	e070      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ed2:	2308      	movs	r3, #8
 8009ed4:	77fb      	strb	r3, [r7, #31]
 8009ed6:	e06d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	77fb      	strb	r3, [r7, #31]
 8009edc:	e06a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <UART_SetConfig+0x2e4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d138      	bne.n	8009f5a <UART_SetConfig+0x2ee>
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <UART_SetConfig+0x2cc>)
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ef6:	d017      	beq.n	8009f28 <UART_SetConfig+0x2bc>
 8009ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009efc:	d82a      	bhi.n	8009f54 <UART_SetConfig+0x2e8>
 8009efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f02:	d00b      	beq.n	8009f1c <UART_SetConfig+0x2b0>
 8009f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f08:	d824      	bhi.n	8009f54 <UART_SetConfig+0x2e8>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <UART_SetConfig+0x2aa>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f12:	d006      	beq.n	8009f22 <UART_SetConfig+0x2b6>
 8009f14:	e01e      	b.n	8009f54 <UART_SetConfig+0x2e8>
 8009f16:	2300      	movs	r3, #0
 8009f18:	77fb      	strb	r3, [r7, #31]
 8009f1a:	e04b      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	77fb      	strb	r3, [r7, #31]
 8009f20:	e048      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f22:	2304      	movs	r3, #4
 8009f24:	77fb      	strb	r3, [r7, #31]
 8009f26:	e045      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	77fb      	strb	r3, [r7, #31]
 8009f2c:	e042      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f2e:	bf00      	nop
 8009f30:	efff69f3 	.word	0xefff69f3
 8009f34:	40011000 	.word	0x40011000
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	40004400 	.word	0x40004400
 8009f40:	40004800 	.word	0x40004800
 8009f44:	40004c00 	.word	0x40004c00
 8009f48:	40005000 	.word	0x40005000
 8009f4c:	40011400 	.word	0x40011400
 8009f50:	40007800 	.word	0x40007800
 8009f54:	2310      	movs	r3, #16
 8009f56:	77fb      	strb	r3, [r7, #31]
 8009f58:	e02c      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a72      	ldr	r2, [pc, #456]	; (800a128 <UART_SetConfig+0x4bc>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d125      	bne.n	8009fb0 <UART_SetConfig+0x344>
 8009f64:	4b71      	ldr	r3, [pc, #452]	; (800a12c <UART_SetConfig+0x4c0>)
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009f72:	d017      	beq.n	8009fa4 <UART_SetConfig+0x338>
 8009f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009f78:	d817      	bhi.n	8009faa <UART_SetConfig+0x33e>
 8009f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f7e:	d00b      	beq.n	8009f98 <UART_SetConfig+0x32c>
 8009f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f84:	d811      	bhi.n	8009faa <UART_SetConfig+0x33e>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <UART_SetConfig+0x326>
 8009f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f8e:	d006      	beq.n	8009f9e <UART_SetConfig+0x332>
 8009f90:	e00b      	b.n	8009faa <UART_SetConfig+0x33e>
 8009f92:	2300      	movs	r3, #0
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e00d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	e00a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f9e:	2304      	movs	r3, #4
 8009fa0:	77fb      	strb	r3, [r7, #31]
 8009fa2:	e007      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	77fb      	strb	r3, [r7, #31]
 8009fa8:	e004      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009faa:	2310      	movs	r3, #16
 8009fac:	77fb      	strb	r3, [r7, #31]
 8009fae:	e001      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fbc:	d15b      	bne.n	800a076 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009fbe:	7ffb      	ldrb	r3, [r7, #31]
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d828      	bhi.n	800a016 <UART_SetConfig+0x3aa>
 8009fc4:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <UART_SetConfig+0x360>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff9 	.word	0x08009ff9
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	0800a017 	.word	0x0800a017
 8009fdc:	0800a007 	.word	0x0800a007
 8009fe0:	0800a017 	.word	0x0800a017
 8009fe4:	0800a017 	.word	0x0800a017
 8009fe8:	0800a017 	.word	0x0800a017
 8009fec:	0800a00f 	.word	0x0800a00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ff0:	f7ff f9d6 	bl	80093a0 <HAL_RCC_GetPCLK1Freq>
 8009ff4:	61b8      	str	r0, [r7, #24]
        break;
 8009ff6:	e013      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ff8:	f7ff f9e6 	bl	80093c8 <HAL_RCC_GetPCLK2Freq>
 8009ffc:	61b8      	str	r0, [r7, #24]
        break;
 8009ffe:	e00f      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a000:	4b4b      	ldr	r3, [pc, #300]	; (800a130 <UART_SetConfig+0x4c4>)
 800a002:	61bb      	str	r3, [r7, #24]
        break;
 800a004:	e00c      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a006:	f7ff f8b9 	bl	800917c <HAL_RCC_GetSysClockFreq>
 800a00a:	61b8      	str	r0, [r7, #24]
        break;
 800a00c:	e008      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a00e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a012:	61bb      	str	r3, [r7, #24]
        break;
 800a014:	e004      	b.n	800a020 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	77bb      	strb	r3, [r7, #30]
        break;
 800a01e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d074      	beq.n	800a110 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	005a      	lsls	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	441a      	add	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d916      	bls.n	800a070 <UART_SetConfig+0x404>
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a048:	d212      	bcs.n	800a070 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f023 030f 	bic.w	r3, r3, #15
 800a052:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	085b      	lsrs	r3, r3, #1
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	b29a      	uxth	r2, r3
 800a060:	89fb      	ldrh	r3, [r7, #14]
 800a062:	4313      	orrs	r3, r2
 800a064:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	89fa      	ldrh	r2, [r7, #14]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e04f      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	77bb      	strb	r3, [r7, #30]
 800a074:	e04c      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d828      	bhi.n	800a0ce <UART_SetConfig+0x462>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <UART_SetConfig+0x418>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0b1 	.word	0x0800a0b1
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	0800a0cf 	.word	0x0800a0cf
 800a094:	0800a0bf 	.word	0x0800a0bf
 800a098:	0800a0cf 	.word	0x0800a0cf
 800a09c:	0800a0cf 	.word	0x0800a0cf
 800a0a0:	0800a0cf 	.word	0x0800a0cf
 800a0a4:	0800a0c7 	.word	0x0800a0c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a8:	f7ff f97a 	bl	80093a0 <HAL_RCC_GetPCLK1Freq>
 800a0ac:	61b8      	str	r0, [r7, #24]
        break;
 800a0ae:	e013      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7ff f98a 	bl	80093c8 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	61b8      	str	r0, [r7, #24]
        break;
 800a0b6:	e00f      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <UART_SetConfig+0x4c4>)
 800a0ba:	61bb      	str	r3, [r7, #24]
        break;
 800a0bc:	e00c      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0be:	f7ff f85d 	bl	800917c <HAL_RCC_GetSysClockFreq>
 800a0c2:	61b8      	str	r0, [r7, #24]
        break;
 800a0c4:	e008      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ca:	61bb      	str	r3, [r7, #24]
        break;
 800a0cc:	e004      	b.n	800a0d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	77bb      	strb	r3, [r7, #30]
        break;
 800a0d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d018      	beq.n	800a110 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	085a      	lsrs	r2, r3, #1
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	441a      	add	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b0f      	cmp	r3, #15
 800a0f6:	d909      	bls.n	800a10c <UART_SetConfig+0x4a0>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fe:	d205      	bcs.n	800a10c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60da      	str	r2, [r3, #12]
 800a10a:	e001      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a11c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40007c00 	.word	0x40007c00
 800a12c:	40023800 	.word	0x40023800
 800a130:	00f42400 	.word	0x00f42400

0800a134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01a      	beq.n	800a24a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a232:	d10a      	bne.n	800a24a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	605a      	str	r2, [r3, #4]
  }
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a288:	f7fc fd02 	bl	8006c90 <HAL_GetTick>
 800a28c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d10e      	bne.n	800a2ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f81b 	bl	800a2e6 <UART_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e011      	b.n	800a2de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b09c      	sub	sp, #112	; 0x70
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	603b      	str	r3, [r7, #0]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f6:	e0a7      	b.n	800a448 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fe:	f000 80a3 	beq.w	800a448 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a302:	f7fc fcc5 	bl	8006c90 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a30e:	429a      	cmp	r2, r3
 800a310:	d302      	bcc.n	800a318 <UART_WaitOnFlagUntilTimeout+0x32>
 800a312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a314:	2b00      	cmp	r3, #0
 800a316:	d13f      	bne.n	800a398 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a32c:	667b      	str	r3, [r7, #100]	; 0x64
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a336:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a338:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a33c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e6      	bne.n	800a318 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a354:	e853 3f00 	ldrex	r3, [r3]
 800a358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	663b      	str	r3, [r7, #96]	; 0x60
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3308      	adds	r3, #8
 800a368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a36a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a36c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a372:	e841 2300 	strex	r3, r2, [r1]
 800a376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1e5      	bne.n	800a34a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2220      	movs	r2, #32
 800a382:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2220      	movs	r2, #32
 800a388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e068      	b.n	800a46a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d050      	beq.n	800a448 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3b4:	d148      	bne.n	800a448 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3de:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e6      	bne.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	613b      	str	r3, [r7, #16]
   return(result);
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	66bb      	str	r3, [r7, #104]	; 0x68
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a412:	623a      	str	r2, [r7, #32]
 800a414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	69f9      	ldr	r1, [r7, #28]
 800a418:	6a3a      	ldr	r2, [r7, #32]
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e5      	bne.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2220      	movs	r2, #32
 800a42a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2220      	movs	r2, #32
 800a430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2220      	movs	r2, #32
 800a438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e010      	b.n	800a46a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	69da      	ldr	r2, [r3, #28]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	4013      	ands	r3, r2
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	429a      	cmp	r2, r3
 800a456:	bf0c      	ite	eq
 800a458:	2301      	moveq	r3, #1
 800a45a:	2300      	movne	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	429a      	cmp	r2, r3
 800a464:	f43f af48 	beq.w	800a2f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3770      	adds	r7, #112	; 0x70
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a474:	b084      	sub	sp, #16
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	f107 001c 	add.w	r0, r7, #28
 800a482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d120      	bne.n	800a4ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	4b20      	ldr	r3, [pc, #128]	; (800a520 <USB_CoreInit+0xac>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d105      	bne.n	800a4c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa96 	bl	800a9f4 <USB_CoreReset>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
 800a4cc:	e010      	b.n	800a4f0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fa8a 	bl	800a9f4 <USB_CoreReset>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d10b      	bne.n	800a50e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f043 0206 	orr.w	r2, r3, #6
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f043 0220 	orr.w	r2, r3, #32
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a51a:	b004      	add	sp, #16
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	ffbdffbf 	.word	0xffbdffbf

0800a524 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f023 0201 	bic.w	r2, r3, #1
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d115      	bne.n	800a594 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a574:	2001      	movs	r0, #1
 800a576:	f7fc fb97 	bl	8006ca8 <HAL_Delay>
      ms++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fa29 	bl	800a9d8 <USB_GetMode>
 800a586:	4603      	mov	r3, r0
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d01e      	beq.n	800a5ca <USB_SetCurrentMode+0x84>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b31      	cmp	r3, #49	; 0x31
 800a590:	d9f0      	bls.n	800a574 <USB_SetCurrentMode+0x2e>
 800a592:	e01a      	b.n	800a5ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d115      	bne.n	800a5c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	f7fc fb7e 	bl	8006ca8 <HAL_Delay>
      ms++;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fa10 	bl	800a9d8 <USB_GetMode>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <USB_SetCurrentMode+0x84>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b31      	cmp	r3, #49	; 0x31
 800a5c2:	d9f0      	bls.n	800a5a6 <USB_SetCurrentMode+0x60>
 800a5c4:	e001      	b.n	800a5ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e005      	b.n	800a5d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b32      	cmp	r3, #50	; 0x32
 800a5ce:	d101      	bne.n	800a5d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e009      	b.n	800a614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	3340      	adds	r3, #64	; 0x40
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3301      	adds	r3, #1
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b0e      	cmp	r3, #14
 800a618:	d9f2      	bls.n	800a600 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11c      	bne.n	800a65a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a62e:	f043 0302 	orr.w	r3, r3, #2
 800a632:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	e005      	b.n	800a666 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a66c:	461a      	mov	r2, r3
 800a66e:	2300      	movs	r3, #0
 800a670:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a678:	4619      	mov	r1, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a680:	461a      	mov	r2, r3
 800a682:	680b      	ldr	r3, [r1, #0]
 800a684:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d10c      	bne.n	800a6a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d104      	bne.n	800a69c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a692:	2100      	movs	r1, #0
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f965 	bl	800a964 <USB_SetDevSpeed>
 800a69a:	e008      	b.n	800a6ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a69c:	2101      	movs	r1, #1
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f960 	bl	800a964 <USB_SetDevSpeed>
 800a6a4:	e003      	b.n	800a6ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6a6:	2103      	movs	r1, #3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f95b 	bl	800a964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6ae:	2110      	movs	r1, #16
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f8f3 	bl	800a89c <USB_FlushTxFifo>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f91f 	bl	800a904 <USB_FlushRxFifo>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	e043      	b.n	800a782 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a70c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a710:	d118      	bne.n	800a744 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a724:	461a      	mov	r2, r3
 800a726:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e013      	b.n	800a756 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73a:	461a      	mov	r2, r3
 800a73c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	e008      	b.n	800a756 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a750:	461a      	mov	r2, r3
 800a752:	2300      	movs	r3, #0
 800a754:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a762:	461a      	mov	r2, r3
 800a764:	2300      	movs	r3, #0
 800a766:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a774:	461a      	mov	r2, r3
 800a776:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a77a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3301      	adds	r3, #1
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	429a      	cmp	r2, r3
 800a788:	d3b7      	bcc.n	800a6fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	e043      	b.n	800a818 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a6:	d118      	bne.n	800a7da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e013      	b.n	800a7ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e008      	b.n	800a7ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80a:	461a      	mov	r2, r3
 800a80c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	3301      	adds	r3, #1
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d3b7      	bcc.n	800a790 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a832:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a840:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d105      	bne.n	800a854 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f043 0210 	orr.w	r2, r3, #16
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <USB_DevInit+0x2b4>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	f043 0208 	orr.w	r2, r3, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a874:	2b01      	cmp	r3, #1
 800a876:	d105      	bne.n	800a884 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699a      	ldr	r2, [r3, #24]
 800a87c:	4b06      	ldr	r3, [pc, #24]	; (800a898 <USB_DevInit+0x2b8>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a890:	b004      	add	sp, #16
 800a892:	4770      	bx	lr
 800a894:	803c3800 	.word	0x803c3800
 800a898:	40000004 	.word	0x40000004

0800a89c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a13      	ldr	r2, [pc, #76]	; (800a900 <USB_FlushTxFifo+0x64>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e01b      	b.n	800a8f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	daf2      	bge.n	800a8aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	019b      	lsls	r3, r3, #6
 800a8cc:	f043 0220 	orr.w	r2, r3, #32
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a08      	ldr	r2, [pc, #32]	; (800a900 <USB_FlushTxFifo+0x64>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d901      	bls.n	800a8e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e006      	b.n	800a8f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d0f0      	beq.n	800a8d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	00030d40 	.word	0x00030d40

0800a904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4a11      	ldr	r2, [pc, #68]	; (800a960 <USB_FlushRxFifo+0x5c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d901      	bls.n	800a922 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e018      	b.n	800a954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	daf2      	bge.n	800a910 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2210      	movs	r2, #16
 800a932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a08      	ldr	r2, [pc, #32]	; (800a960 <USB_FlushRxFifo+0x5c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d901      	bls.n	800a946 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e006      	b.n	800a954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0310 	and.w	r3, r3, #16
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d0f0      	beq.n	800a934 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	00030d40 	.word	0x00030d40

0800a964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a984:	4313      	orrs	r3, r2
 800a986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a996:	b480      	push	{r7}
 800a998:	b085      	sub	sp, #20
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9b0:	f023 0303 	bic.w	r3, r3, #3
 800a9b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3301      	adds	r3, #1
 800aa04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4a13      	ldr	r2, [pc, #76]	; (800aa58 <USB_CoreReset+0x64>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d901      	bls.n	800aa12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e01b      	b.n	800aa4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	daf2      	bge.n	800aa00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f043 0201 	orr.w	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a09      	ldr	r2, [pc, #36]	; (800aa58 <USB_CoreReset+0x64>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d901      	bls.n	800aa3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e006      	b.n	800aa4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d0f0      	beq.n	800aa2a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	00030d40 	.word	0x00030d40

0800aa5c <_ZdlPvj>:
 800aa5c:	f000 b800 	b.w	800aa60 <_ZdlPv>

0800aa60 <_ZdlPv>:
 800aa60:	f000 b82a 	b.w	800aab8 <free>

0800aa64 <__errno>:
 800aa64:	4b01      	ldr	r3, [pc, #4]	; (800aa6c <__errno+0x8>)
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	200000e0 	.word	0x200000e0

0800aa70 <__libc_init_array>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	4d0d      	ldr	r5, [pc, #52]	; (800aaa8 <__libc_init_array+0x38>)
 800aa74:	4c0d      	ldr	r4, [pc, #52]	; (800aaac <__libc_init_array+0x3c>)
 800aa76:	1b64      	subs	r4, r4, r5
 800aa78:	10a4      	asrs	r4, r4, #2
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	42a6      	cmp	r6, r4
 800aa7e:	d109      	bne.n	800aa94 <__libc_init_array+0x24>
 800aa80:	4d0b      	ldr	r5, [pc, #44]	; (800aab0 <__libc_init_array+0x40>)
 800aa82:	4c0c      	ldr	r4, [pc, #48]	; (800aab4 <__libc_init_array+0x44>)
 800aa84:	f001 f8a4 	bl	800bbd0 <_init>
 800aa88:	1b64      	subs	r4, r4, r5
 800aa8a:	10a4      	asrs	r4, r4, #2
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	d105      	bne.n	800aa9e <__libc_init_array+0x2e>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa98:	4798      	blx	r3
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7ee      	b.n	800aa7c <__libc_init_array+0xc>
 800aa9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa2:	4798      	blx	r3
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	e7f2      	b.n	800aa8e <__libc_init_array+0x1e>
 800aaa8:	0800bd24 	.word	0x0800bd24
 800aaac:	0800bd24 	.word	0x0800bd24
 800aab0:	0800bd24 	.word	0x0800bd24
 800aab4:	0800bd2c 	.word	0x0800bd2c

0800aab8 <free>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <free+0xc>)
 800aaba:	4601      	mov	r1, r0
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f000 b825 	b.w	800ab0c <_free_r>
 800aac2:	bf00      	nop
 800aac4:	200000e0 	.word	0x200000e0

0800aac8 <memmove>:
 800aac8:	4288      	cmp	r0, r1
 800aaca:	b510      	push	{r4, lr}
 800aacc:	eb01 0402 	add.w	r4, r1, r2
 800aad0:	d902      	bls.n	800aad8 <memmove+0x10>
 800aad2:	4284      	cmp	r4, r0
 800aad4:	4623      	mov	r3, r4
 800aad6:	d807      	bhi.n	800aae8 <memmove+0x20>
 800aad8:	1e43      	subs	r3, r0, #1
 800aada:	42a1      	cmp	r1, r4
 800aadc:	d008      	beq.n	800aaf0 <memmove+0x28>
 800aade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae6:	e7f8      	b.n	800aada <memmove+0x12>
 800aae8:	4402      	add	r2, r0
 800aaea:	4601      	mov	r1, r0
 800aaec:	428a      	cmp	r2, r1
 800aaee:	d100      	bne.n	800aaf2 <memmove+0x2a>
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aafa:	e7f7      	b.n	800aaec <memmove+0x24>

0800aafc <memset>:
 800aafc:	4402      	add	r2, r0
 800aafe:	4603      	mov	r3, r0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d100      	bne.n	800ab06 <memset+0xa>
 800ab04:	4770      	bx	lr
 800ab06:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0a:	e7f9      	b.n	800ab00 <memset+0x4>

0800ab0c <_free_r>:
 800ab0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab0e:	2900      	cmp	r1, #0
 800ab10:	d044      	beq.n	800ab9c <_free_r+0x90>
 800ab12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab16:	9001      	str	r0, [sp, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab1e:	bfb8      	it	lt
 800ab20:	18e4      	addlt	r4, r4, r3
 800ab22:	f000 fc67 	bl	800b3f4 <__malloc_lock>
 800ab26:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <_free_r+0x94>)
 800ab28:	9801      	ldr	r0, [sp, #4]
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	b933      	cbnz	r3, 800ab3c <_free_r+0x30>
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	6014      	str	r4, [r2, #0]
 800ab32:	b003      	add	sp, #12
 800ab34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab38:	f000 bc62 	b.w	800b400 <__malloc_unlock>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d908      	bls.n	800ab52 <_free_r+0x46>
 800ab40:	6825      	ldr	r5, [r4, #0]
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf01      	itttt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	1949      	addeq	r1, r1, r5
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	e7ed      	b.n	800ab2e <_free_r+0x22>
 800ab52:	461a      	mov	r2, r3
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	b10b      	cbz	r3, 800ab5c <_free_r+0x50>
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d9fa      	bls.n	800ab52 <_free_r+0x46>
 800ab5c:	6811      	ldr	r1, [r2, #0]
 800ab5e:	1855      	adds	r5, r2, r1
 800ab60:	42a5      	cmp	r5, r4
 800ab62:	d10b      	bne.n	800ab7c <_free_r+0x70>
 800ab64:	6824      	ldr	r4, [r4, #0]
 800ab66:	4421      	add	r1, r4
 800ab68:	1854      	adds	r4, r2, r1
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	d1e0      	bne.n	800ab32 <_free_r+0x26>
 800ab70:	681c      	ldr	r4, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	4421      	add	r1, r4
 800ab78:	6011      	str	r1, [r2, #0]
 800ab7a:	e7da      	b.n	800ab32 <_free_r+0x26>
 800ab7c:	d902      	bls.n	800ab84 <_free_r+0x78>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7d6      	b.n	800ab32 <_free_r+0x26>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf04      	itt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	bf04      	itt	eq
 800ab94:	1949      	addeq	r1, r1, r5
 800ab96:	6021      	streq	r1, [r4, #0]
 800ab98:	6054      	str	r4, [r2, #4]
 800ab9a:	e7ca      	b.n	800ab32 <_free_r+0x26>
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bd30      	pop	{r4, r5, pc}
 800aba0:	20000b4c 	.word	0x20000b4c

0800aba4 <sbrk_aligned>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	4e0e      	ldr	r6, [pc, #56]	; (800abe0 <sbrk_aligned+0x3c>)
 800aba8:	460c      	mov	r4, r1
 800abaa:	6831      	ldr	r1, [r6, #0]
 800abac:	4605      	mov	r5, r0
 800abae:	b911      	cbnz	r1, 800abb6 <sbrk_aligned+0x12>
 800abb0:	f000 f930 	bl	800ae14 <_sbrk_r>
 800abb4:	6030      	str	r0, [r6, #0]
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f92b 	bl	800ae14 <_sbrk_r>
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	d00a      	beq.n	800abd8 <sbrk_aligned+0x34>
 800abc2:	1cc4      	adds	r4, r0, #3
 800abc4:	f024 0403 	bic.w	r4, r4, #3
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d007      	beq.n	800abdc <sbrk_aligned+0x38>
 800abcc:	1a21      	subs	r1, r4, r0
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 f920 	bl	800ae14 <_sbrk_r>
 800abd4:	3001      	adds	r0, #1
 800abd6:	d101      	bne.n	800abdc <sbrk_aligned+0x38>
 800abd8:	f04f 34ff 	mov.w	r4, #4294967295
 800abdc:	4620      	mov	r0, r4
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	20000b50 	.word	0x20000b50

0800abe4 <_malloc_r>:
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	1ccd      	adds	r5, r1, #3
 800abea:	f025 0503 	bic.w	r5, r5, #3
 800abee:	3508      	adds	r5, #8
 800abf0:	2d0c      	cmp	r5, #12
 800abf2:	bf38      	it	cc
 800abf4:	250c      	movcc	r5, #12
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	4607      	mov	r7, r0
 800abfa:	db01      	blt.n	800ac00 <_malloc_r+0x1c>
 800abfc:	42a9      	cmp	r1, r5
 800abfe:	d905      	bls.n	800ac0c <_malloc_r+0x28>
 800ac00:	230c      	movs	r3, #12
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	2600      	movs	r6, #0
 800ac06:	4630      	mov	r0, r6
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	4e2e      	ldr	r6, [pc, #184]	; (800acc8 <_malloc_r+0xe4>)
 800ac0e:	f000 fbf1 	bl	800b3f4 <__malloc_lock>
 800ac12:	6833      	ldr	r3, [r6, #0]
 800ac14:	461c      	mov	r4, r3
 800ac16:	bb34      	cbnz	r4, 800ac66 <_malloc_r+0x82>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f7ff ffc2 	bl	800aba4 <sbrk_aligned>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	4604      	mov	r4, r0
 800ac24:	d14d      	bne.n	800acc2 <_malloc_r+0xde>
 800ac26:	6834      	ldr	r4, [r6, #0]
 800ac28:	4626      	mov	r6, r4
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d140      	bne.n	800acb0 <_malloc_r+0xcc>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	4631      	mov	r1, r6
 800ac32:	4638      	mov	r0, r7
 800ac34:	eb04 0803 	add.w	r8, r4, r3
 800ac38:	f000 f8ec 	bl	800ae14 <_sbrk_r>
 800ac3c:	4580      	cmp	r8, r0
 800ac3e:	d13a      	bne.n	800acb6 <_malloc_r+0xd2>
 800ac40:	6821      	ldr	r1, [r4, #0]
 800ac42:	3503      	adds	r5, #3
 800ac44:	1a6d      	subs	r5, r5, r1
 800ac46:	f025 0503 	bic.w	r5, r5, #3
 800ac4a:	3508      	adds	r5, #8
 800ac4c:	2d0c      	cmp	r5, #12
 800ac4e:	bf38      	it	cc
 800ac50:	250c      	movcc	r5, #12
 800ac52:	4629      	mov	r1, r5
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff ffa5 	bl	800aba4 <sbrk_aligned>
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d02b      	beq.n	800acb6 <_malloc_r+0xd2>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	442b      	add	r3, r5
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	e00e      	b.n	800ac84 <_malloc_r+0xa0>
 800ac66:	6822      	ldr	r2, [r4, #0]
 800ac68:	1b52      	subs	r2, r2, r5
 800ac6a:	d41e      	bmi.n	800acaa <_malloc_r+0xc6>
 800ac6c:	2a0b      	cmp	r2, #11
 800ac6e:	d916      	bls.n	800ac9e <_malloc_r+0xba>
 800ac70:	1961      	adds	r1, r4, r5
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	6025      	str	r5, [r4, #0]
 800ac76:	bf18      	it	ne
 800ac78:	6059      	strne	r1, [r3, #4]
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	bf08      	it	eq
 800ac7e:	6031      	streq	r1, [r6, #0]
 800ac80:	5162      	str	r2, [r4, r5]
 800ac82:	604b      	str	r3, [r1, #4]
 800ac84:	4638      	mov	r0, r7
 800ac86:	f104 060b 	add.w	r6, r4, #11
 800ac8a:	f000 fbb9 	bl	800b400 <__malloc_unlock>
 800ac8e:	f026 0607 	bic.w	r6, r6, #7
 800ac92:	1d23      	adds	r3, r4, #4
 800ac94:	1af2      	subs	r2, r6, r3
 800ac96:	d0b6      	beq.n	800ac06 <_malloc_r+0x22>
 800ac98:	1b9b      	subs	r3, r3, r6
 800ac9a:	50a3      	str	r3, [r4, r2]
 800ac9c:	e7b3      	b.n	800ac06 <_malloc_r+0x22>
 800ac9e:	6862      	ldr	r2, [r4, #4]
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	bf0c      	ite	eq
 800aca4:	6032      	streq	r2, [r6, #0]
 800aca6:	605a      	strne	r2, [r3, #4]
 800aca8:	e7ec      	b.n	800ac84 <_malloc_r+0xa0>
 800acaa:	4623      	mov	r3, r4
 800acac:	6864      	ldr	r4, [r4, #4]
 800acae:	e7b2      	b.n	800ac16 <_malloc_r+0x32>
 800acb0:	4634      	mov	r4, r6
 800acb2:	6876      	ldr	r6, [r6, #4]
 800acb4:	e7b9      	b.n	800ac2a <_malloc_r+0x46>
 800acb6:	230c      	movs	r3, #12
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	4638      	mov	r0, r7
 800acbc:	f000 fba0 	bl	800b400 <__malloc_unlock>
 800acc0:	e7a1      	b.n	800ac06 <_malloc_r+0x22>
 800acc2:	6025      	str	r5, [r4, #0]
 800acc4:	e7de      	b.n	800ac84 <_malloc_r+0xa0>
 800acc6:	bf00      	nop
 800acc8:	20000b4c 	.word	0x20000b4c

0800accc <iprintf>:
 800accc:	b40f      	push	{r0, r1, r2, r3}
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <iprintf+0x2c>)
 800acd0:	b513      	push	{r0, r1, r4, lr}
 800acd2:	681c      	ldr	r4, [r3, #0]
 800acd4:	b124      	cbz	r4, 800ace0 <iprintf+0x14>
 800acd6:	69a3      	ldr	r3, [r4, #24]
 800acd8:	b913      	cbnz	r3, 800ace0 <iprintf+0x14>
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 fa84 	bl	800b1e8 <__sinit>
 800ace0:	ab05      	add	r3, sp, #20
 800ace2:	9a04      	ldr	r2, [sp, #16]
 800ace4:	68a1      	ldr	r1, [r4, #8]
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fbb9 	bl	800b460 <_vfiprintf_r>
 800acee:	b002      	add	sp, #8
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	b004      	add	sp, #16
 800acf6:	4770      	bx	lr
 800acf8:	200000e0 	.word	0x200000e0

0800acfc <putchar>:
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <putchar+0x28>)
 800acfe:	b513      	push	{r0, r1, r4, lr}
 800ad00:	681c      	ldr	r4, [r3, #0]
 800ad02:	4601      	mov	r1, r0
 800ad04:	b134      	cbz	r4, 800ad14 <putchar+0x18>
 800ad06:	69a3      	ldr	r3, [r4, #24]
 800ad08:	b923      	cbnz	r3, 800ad14 <putchar+0x18>
 800ad0a:	9001      	str	r0, [sp, #4]
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fa6b 	bl	800b1e8 <__sinit>
 800ad12:	9901      	ldr	r1, [sp, #4]
 800ad14:	68a2      	ldr	r2, [r4, #8]
 800ad16:	4620      	mov	r0, r4
 800ad18:	b002      	add	sp, #8
 800ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1e:	f000 be63 	b.w	800b9e8 <_putc_r>
 800ad22:	bf00      	nop
 800ad24:	200000e0 	.word	0x200000e0

0800ad28 <_puts_r>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	b118      	cbz	r0, 800ad38 <_puts_r+0x10>
 800ad30:	6983      	ldr	r3, [r0, #24]
 800ad32:	b90b      	cbnz	r3, 800ad38 <_puts_r+0x10>
 800ad34:	f000 fa58 	bl	800b1e8 <__sinit>
 800ad38:	69ab      	ldr	r3, [r5, #24]
 800ad3a:	68ac      	ldr	r4, [r5, #8]
 800ad3c:	b913      	cbnz	r3, 800ad44 <_puts_r+0x1c>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 fa52 	bl	800b1e8 <__sinit>
 800ad44:	4b2c      	ldr	r3, [pc, #176]	; (800adf8 <_puts_r+0xd0>)
 800ad46:	429c      	cmp	r4, r3
 800ad48:	d120      	bne.n	800ad8c <_puts_r+0x64>
 800ad4a:	686c      	ldr	r4, [r5, #4]
 800ad4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad4e:	07db      	lsls	r3, r3, #31
 800ad50:	d405      	bmi.n	800ad5e <_puts_r+0x36>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	0598      	lsls	r0, r3, #22
 800ad56:	d402      	bmi.n	800ad5e <_puts_r+0x36>
 800ad58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5a:	f000 fae3 	bl	800b324 <__retarget_lock_acquire_recursive>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	0719      	lsls	r1, r3, #28
 800ad62:	d51d      	bpl.n	800ada0 <_puts_r+0x78>
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	b1db      	cbz	r3, 800ada0 <_puts_r+0x78>
 800ad68:	3e01      	subs	r6, #1
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad70:	3b01      	subs	r3, #1
 800ad72:	60a3      	str	r3, [r4, #8]
 800ad74:	bb39      	cbnz	r1, 800adc6 <_puts_r+0x9e>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	da38      	bge.n	800adec <_puts_r+0xc4>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	210a      	movs	r1, #10
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 f858 	bl	800ae34 <__swbuf_r>
 800ad84:	3001      	adds	r0, #1
 800ad86:	d011      	beq.n	800adac <_puts_r+0x84>
 800ad88:	250a      	movs	r5, #10
 800ad8a:	e011      	b.n	800adb0 <_puts_r+0x88>
 800ad8c:	4b1b      	ldr	r3, [pc, #108]	; (800adfc <_puts_r+0xd4>)
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	d101      	bne.n	800ad96 <_puts_r+0x6e>
 800ad92:	68ac      	ldr	r4, [r5, #8]
 800ad94:	e7da      	b.n	800ad4c <_puts_r+0x24>
 800ad96:	4b1a      	ldr	r3, [pc, #104]	; (800ae00 <_puts_r+0xd8>)
 800ad98:	429c      	cmp	r4, r3
 800ad9a:	bf08      	it	eq
 800ad9c:	68ec      	ldreq	r4, [r5, #12]
 800ad9e:	e7d5      	b.n	800ad4c <_puts_r+0x24>
 800ada0:	4621      	mov	r1, r4
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 f898 	bl	800aed8 <__swsetup_r>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d0dd      	beq.n	800ad68 <_puts_r+0x40>
 800adac:	f04f 35ff 	mov.w	r5, #4294967295
 800adb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb2:	07da      	lsls	r2, r3, #31
 800adb4:	d405      	bmi.n	800adc2 <_puts_r+0x9a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	059b      	lsls	r3, r3, #22
 800adba:	d402      	bmi.n	800adc2 <_puts_r+0x9a>
 800adbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adbe:	f000 fab2 	bl	800b326 <__retarget_lock_release_recursive>
 800adc2:	4628      	mov	r0, r5
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da04      	bge.n	800add4 <_puts_r+0xac>
 800adca:	69a2      	ldr	r2, [r4, #24]
 800adcc:	429a      	cmp	r2, r3
 800adce:	dc06      	bgt.n	800adde <_puts_r+0xb6>
 800add0:	290a      	cmp	r1, #10
 800add2:	d004      	beq.n	800adde <_puts_r+0xb6>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	6022      	str	r2, [r4, #0]
 800adda:	7019      	strb	r1, [r3, #0]
 800addc:	e7c5      	b.n	800ad6a <_puts_r+0x42>
 800adde:	4622      	mov	r2, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f000 f827 	bl	800ae34 <__swbuf_r>
 800ade6:	3001      	adds	r0, #1
 800ade8:	d1bf      	bne.n	800ad6a <_puts_r+0x42>
 800adea:	e7df      	b.n	800adac <_puts_r+0x84>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	250a      	movs	r5, #10
 800adf0:	1c5a      	adds	r2, r3, #1
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	701d      	strb	r5, [r3, #0]
 800adf6:	e7db      	b.n	800adb0 <_puts_r+0x88>
 800adf8:	0800bca8 	.word	0x0800bca8
 800adfc:	0800bcc8 	.word	0x0800bcc8
 800ae00:	0800bc88 	.word	0x0800bc88

0800ae04 <puts>:
 800ae04:	4b02      	ldr	r3, [pc, #8]	; (800ae10 <puts+0xc>)
 800ae06:	4601      	mov	r1, r0
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	f7ff bf8d 	b.w	800ad28 <_puts_r>
 800ae0e:	bf00      	nop
 800ae10:	200000e0 	.word	0x200000e0

0800ae14 <_sbrk_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d06      	ldr	r5, [pc, #24]	; (800ae30 <_sbrk_r+0x1c>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f7 f800 	bl	8001e24 <_sbrk>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_sbrk_r+0x1a>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_sbrk_r+0x1a>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20000b58 	.word	0x20000b58

0800ae34 <__swbuf_r>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	460e      	mov	r6, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b118      	cbz	r0, 800ae46 <__swbuf_r+0x12>
 800ae3e:	6983      	ldr	r3, [r0, #24]
 800ae40:	b90b      	cbnz	r3, 800ae46 <__swbuf_r+0x12>
 800ae42:	f000 f9d1 	bl	800b1e8 <__sinit>
 800ae46:	4b21      	ldr	r3, [pc, #132]	; (800aecc <__swbuf_r+0x98>)
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d12b      	bne.n	800aea4 <__swbuf_r+0x70>
 800ae4c:	686c      	ldr	r4, [r5, #4]
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	071a      	lsls	r2, r3, #28
 800ae56:	d52f      	bpl.n	800aeb8 <__swbuf_r+0x84>
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	b36b      	cbz	r3, 800aeb8 <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	6963      	ldr	r3, [r4, #20]
 800ae64:	b2f6      	uxtb	r6, r6
 800ae66:	4283      	cmp	r3, r0
 800ae68:	4637      	mov	r7, r6
 800ae6a:	dc04      	bgt.n	800ae76 <__swbuf_r+0x42>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f926 	bl	800b0c0 <_fflush_r>
 800ae74:	bb30      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	60a3      	str	r3, [r4, #8]
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	6022      	str	r2, [r4, #0]
 800ae82:	701e      	strb	r6, [r3, #0]
 800ae84:	6963      	ldr	r3, [r4, #20]
 800ae86:	3001      	adds	r0, #1
 800ae88:	4283      	cmp	r3, r0
 800ae8a:	d004      	beq.n	800ae96 <__swbuf_r+0x62>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	07db      	lsls	r3, r3, #31
 800ae90:	d506      	bpl.n	800aea0 <__swbuf_r+0x6c>
 800ae92:	2e0a      	cmp	r6, #10
 800ae94:	d104      	bne.n	800aea0 <__swbuf_r+0x6c>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f911 	bl	800b0c0 <_fflush_r>
 800ae9e:	b988      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800aea0:	4638      	mov	r0, r7
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <__swbuf_r+0x9c>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d101      	bne.n	800aeae <__swbuf_r+0x7a>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	e7cf      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <__swbuf_r+0xa0>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	bf08      	it	eq
 800aeb4:	68ec      	ldreq	r4, [r5, #12]
 800aeb6:	e7ca      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f80c 	bl	800aed8 <__swsetup_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d0cb      	beq.n	800ae5c <__swbuf_r+0x28>
 800aec4:	f04f 37ff 	mov.w	r7, #4294967295
 800aec8:	e7ea      	b.n	800aea0 <__swbuf_r+0x6c>
 800aeca:	bf00      	nop
 800aecc:	0800bca8 	.word	0x0800bca8
 800aed0:	0800bcc8 	.word	0x0800bcc8
 800aed4:	0800bc88 	.word	0x0800bc88

0800aed8 <__swsetup_r>:
 800aed8:	4b32      	ldr	r3, [pc, #200]	; (800afa4 <__swsetup_r+0xcc>)
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	681d      	ldr	r5, [r3, #0]
 800aede:	4606      	mov	r6, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	b125      	cbz	r5, 800aeee <__swsetup_r+0x16>
 800aee4:	69ab      	ldr	r3, [r5, #24]
 800aee6:	b913      	cbnz	r3, 800aeee <__swsetup_r+0x16>
 800aee8:	4628      	mov	r0, r5
 800aeea:	f000 f97d 	bl	800b1e8 <__sinit>
 800aeee:	4b2e      	ldr	r3, [pc, #184]	; (800afa8 <__swsetup_r+0xd0>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d10f      	bne.n	800af14 <__swsetup_r+0x3c>
 800aef4:	686c      	ldr	r4, [r5, #4]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aefc:	0719      	lsls	r1, r3, #28
 800aefe:	d42c      	bmi.n	800af5a <__swsetup_r+0x82>
 800af00:	06dd      	lsls	r5, r3, #27
 800af02:	d411      	bmi.n	800af28 <__swsetup_r+0x50>
 800af04:	2309      	movs	r3, #9
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	e03e      	b.n	800af92 <__swsetup_r+0xba>
 800af14:	4b25      	ldr	r3, [pc, #148]	; (800afac <__swsetup_r+0xd4>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <__swsetup_r+0x46>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7eb      	b.n	800aef6 <__swsetup_r+0x1e>
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <__swsetup_r+0xd8>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7e6      	b.n	800aef6 <__swsetup_r+0x1e>
 800af28:	0758      	lsls	r0, r3, #29
 800af2a:	d512      	bpl.n	800af52 <__swsetup_r+0x7a>
 800af2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af2e:	b141      	cbz	r1, 800af42 <__swsetup_r+0x6a>
 800af30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <__swsetup_r+0x66>
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff fde7 	bl	800ab0c <_free_r>
 800af3e:	2300      	movs	r3, #0
 800af40:	6363      	str	r3, [r4, #52]	; 0x34
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	2300      	movs	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	b94b      	cbnz	r3, 800af72 <__swsetup_r+0x9a>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af68:	d003      	beq.n	800af72 <__swsetup_r+0x9a>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4630      	mov	r0, r6
 800af6e:	f000 fa01 	bl	800b374 <__smakebuf_r>
 800af72:	89a0      	ldrh	r0, [r4, #12]
 800af74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af78:	f010 0301 	ands.w	r3, r0, #1
 800af7c:	d00a      	beq.n	800af94 <__swsetup_r+0xbc>
 800af7e:	2300      	movs	r3, #0
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	425b      	negs	r3, r3
 800af86:	61a3      	str	r3, [r4, #24]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b943      	cbnz	r3, 800af9e <__swsetup_r+0xc6>
 800af8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af90:	d1ba      	bne.n	800af08 <__swsetup_r+0x30>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	0781      	lsls	r1, r0, #30
 800af96:	bf58      	it	pl
 800af98:	6963      	ldrpl	r3, [r4, #20]
 800af9a:	60a3      	str	r3, [r4, #8]
 800af9c:	e7f4      	b.n	800af88 <__swsetup_r+0xb0>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7f7      	b.n	800af92 <__swsetup_r+0xba>
 800afa2:	bf00      	nop
 800afa4:	200000e0 	.word	0x200000e0
 800afa8:	0800bca8 	.word	0x0800bca8
 800afac:	0800bcc8 	.word	0x0800bcc8
 800afb0:	0800bc88 	.word	0x0800bc88

0800afb4 <__sflush_r>:
 800afb4:	898a      	ldrh	r2, [r1, #12]
 800afb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afba:	4605      	mov	r5, r0
 800afbc:	0710      	lsls	r0, r2, #28
 800afbe:	460c      	mov	r4, r1
 800afc0:	d458      	bmi.n	800b074 <__sflush_r+0xc0>
 800afc2:	684b      	ldr	r3, [r1, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dc05      	bgt.n	800afd4 <__sflush_r+0x20>
 800afc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dc02      	bgt.n	800afd4 <__sflush_r+0x20>
 800afce:	2000      	movs	r0, #0
 800afd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afd6:	2e00      	cmp	r6, #0
 800afd8:	d0f9      	beq.n	800afce <__sflush_r+0x1a>
 800afda:	2300      	movs	r3, #0
 800afdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afe0:	682f      	ldr	r7, [r5, #0]
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	d032      	beq.n	800b04c <__sflush_r+0x98>
 800afe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	075a      	lsls	r2, r3, #29
 800afec:	d505      	bpl.n	800affa <__sflush_r+0x46>
 800afee:	6863      	ldr	r3, [r4, #4]
 800aff0:	1ac0      	subs	r0, r0, r3
 800aff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff4:	b10b      	cbz	r3, 800affa <__sflush_r+0x46>
 800aff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aff8:	1ac0      	subs	r0, r0, r3
 800affa:	2300      	movs	r3, #0
 800affc:	4602      	mov	r2, r0
 800affe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b000:	6a21      	ldr	r1, [r4, #32]
 800b002:	4628      	mov	r0, r5
 800b004:	47b0      	blx	r6
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	d106      	bne.n	800b01a <__sflush_r+0x66>
 800b00c:	6829      	ldr	r1, [r5, #0]
 800b00e:	291d      	cmp	r1, #29
 800b010:	d82c      	bhi.n	800b06c <__sflush_r+0xb8>
 800b012:	4a2a      	ldr	r2, [pc, #168]	; (800b0bc <__sflush_r+0x108>)
 800b014:	40ca      	lsrs	r2, r1
 800b016:	07d6      	lsls	r6, r2, #31
 800b018:	d528      	bpl.n	800b06c <__sflush_r+0xb8>
 800b01a:	2200      	movs	r2, #0
 800b01c:	6062      	str	r2, [r4, #4]
 800b01e:	04d9      	lsls	r1, r3, #19
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	6022      	str	r2, [r4, #0]
 800b024:	d504      	bpl.n	800b030 <__sflush_r+0x7c>
 800b026:	1c42      	adds	r2, r0, #1
 800b028:	d101      	bne.n	800b02e <__sflush_r+0x7a>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	b903      	cbnz	r3, 800b030 <__sflush_r+0x7c>
 800b02e:	6560      	str	r0, [r4, #84]	; 0x54
 800b030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b032:	602f      	str	r7, [r5, #0]
 800b034:	2900      	cmp	r1, #0
 800b036:	d0ca      	beq.n	800afce <__sflush_r+0x1a>
 800b038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b03c:	4299      	cmp	r1, r3
 800b03e:	d002      	beq.n	800b046 <__sflush_r+0x92>
 800b040:	4628      	mov	r0, r5
 800b042:	f7ff fd63 	bl	800ab0c <_free_r>
 800b046:	2000      	movs	r0, #0
 800b048:	6360      	str	r0, [r4, #52]	; 0x34
 800b04a:	e7c1      	b.n	800afd0 <__sflush_r+0x1c>
 800b04c:	6a21      	ldr	r1, [r4, #32]
 800b04e:	2301      	movs	r3, #1
 800b050:	4628      	mov	r0, r5
 800b052:	47b0      	blx	r6
 800b054:	1c41      	adds	r1, r0, #1
 800b056:	d1c7      	bne.n	800afe8 <__sflush_r+0x34>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0c4      	beq.n	800afe8 <__sflush_r+0x34>
 800b05e:	2b1d      	cmp	r3, #29
 800b060:	d001      	beq.n	800b066 <__sflush_r+0xb2>
 800b062:	2b16      	cmp	r3, #22
 800b064:	d101      	bne.n	800b06a <__sflush_r+0xb6>
 800b066:	602f      	str	r7, [r5, #0]
 800b068:	e7b1      	b.n	800afce <__sflush_r+0x1a>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	e7ad      	b.n	800afd0 <__sflush_r+0x1c>
 800b074:	690f      	ldr	r7, [r1, #16]
 800b076:	2f00      	cmp	r7, #0
 800b078:	d0a9      	beq.n	800afce <__sflush_r+0x1a>
 800b07a:	0793      	lsls	r3, r2, #30
 800b07c:	680e      	ldr	r6, [r1, #0]
 800b07e:	bf08      	it	eq
 800b080:	694b      	ldreq	r3, [r1, #20]
 800b082:	600f      	str	r7, [r1, #0]
 800b084:	bf18      	it	ne
 800b086:	2300      	movne	r3, #0
 800b088:	eba6 0807 	sub.w	r8, r6, r7
 800b08c:	608b      	str	r3, [r1, #8]
 800b08e:	f1b8 0f00 	cmp.w	r8, #0
 800b092:	dd9c      	ble.n	800afce <__sflush_r+0x1a>
 800b094:	6a21      	ldr	r1, [r4, #32]
 800b096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b098:	4643      	mov	r3, r8
 800b09a:	463a      	mov	r2, r7
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b0      	blx	r6
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	dc06      	bgt.n	800b0b2 <__sflush_r+0xfe>
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0aa:	81a3      	strh	r3, [r4, #12]
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	e78e      	b.n	800afd0 <__sflush_r+0x1c>
 800b0b2:	4407      	add	r7, r0
 800b0b4:	eba8 0800 	sub.w	r8, r8, r0
 800b0b8:	e7e9      	b.n	800b08e <__sflush_r+0xda>
 800b0ba:	bf00      	nop
 800b0bc:	20400001 	.word	0x20400001

0800b0c0 <_fflush_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	690b      	ldr	r3, [r1, #16]
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	b913      	cbnz	r3, 800b0d0 <_fflush_r+0x10>
 800b0ca:	2500      	movs	r5, #0
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	b118      	cbz	r0, 800b0da <_fflush_r+0x1a>
 800b0d2:	6983      	ldr	r3, [r0, #24]
 800b0d4:	b90b      	cbnz	r3, 800b0da <_fflush_r+0x1a>
 800b0d6:	f000 f887 	bl	800b1e8 <__sinit>
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <_fflush_r+0x6c>)
 800b0dc:	429c      	cmp	r4, r3
 800b0de:	d11b      	bne.n	800b118 <_fflush_r+0x58>
 800b0e0:	686c      	ldr	r4, [r5, #4]
 800b0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0ef      	beq.n	800b0ca <_fflush_r+0xa>
 800b0ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0ec:	07d0      	lsls	r0, r2, #31
 800b0ee:	d404      	bmi.n	800b0fa <_fflush_r+0x3a>
 800b0f0:	0599      	lsls	r1, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_fflush_r+0x3a>
 800b0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f6:	f000 f915 	bl	800b324 <__retarget_lock_acquire_recursive>
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	f7ff ff59 	bl	800afb4 <__sflush_r>
 800b102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b104:	07da      	lsls	r2, r3, #31
 800b106:	4605      	mov	r5, r0
 800b108:	d4e0      	bmi.n	800b0cc <_fflush_r+0xc>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	059b      	lsls	r3, r3, #22
 800b10e:	d4dd      	bmi.n	800b0cc <_fflush_r+0xc>
 800b110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b112:	f000 f908 	bl	800b326 <__retarget_lock_release_recursive>
 800b116:	e7d9      	b.n	800b0cc <_fflush_r+0xc>
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <_fflush_r+0x70>)
 800b11a:	429c      	cmp	r4, r3
 800b11c:	d101      	bne.n	800b122 <_fflush_r+0x62>
 800b11e:	68ac      	ldr	r4, [r5, #8]
 800b120:	e7df      	b.n	800b0e2 <_fflush_r+0x22>
 800b122:	4b04      	ldr	r3, [pc, #16]	; (800b134 <_fflush_r+0x74>)
 800b124:	429c      	cmp	r4, r3
 800b126:	bf08      	it	eq
 800b128:	68ec      	ldreq	r4, [r5, #12]
 800b12a:	e7da      	b.n	800b0e2 <_fflush_r+0x22>
 800b12c:	0800bca8 	.word	0x0800bca8
 800b130:	0800bcc8 	.word	0x0800bcc8
 800b134:	0800bc88 	.word	0x0800bc88

0800b138 <std>:
 800b138:	2300      	movs	r3, #0
 800b13a:	b510      	push	{r4, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	e9c0 3300 	strd	r3, r3, [r0]
 800b142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b146:	6083      	str	r3, [r0, #8]
 800b148:	8181      	strh	r1, [r0, #12]
 800b14a:	6643      	str	r3, [r0, #100]	; 0x64
 800b14c:	81c2      	strh	r2, [r0, #14]
 800b14e:	6183      	str	r3, [r0, #24]
 800b150:	4619      	mov	r1, r3
 800b152:	2208      	movs	r2, #8
 800b154:	305c      	adds	r0, #92	; 0x5c
 800b156:	f7ff fcd1 	bl	800aafc <memset>
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <std+0x38>)
 800b15c:	6263      	str	r3, [r4, #36]	; 0x24
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <std+0x3c>)
 800b160:	62a3      	str	r3, [r4, #40]	; 0x28
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <std+0x40>)
 800b164:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <std+0x44>)
 800b168:	6224      	str	r4, [r4, #32]
 800b16a:	6323      	str	r3, [r4, #48]	; 0x30
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	bf00      	nop
 800b170:	0800ba79 	.word	0x0800ba79
 800b174:	0800ba9b 	.word	0x0800ba9b
 800b178:	0800bad3 	.word	0x0800bad3
 800b17c:	0800baf7 	.word	0x0800baf7

0800b180 <_cleanup_r>:
 800b180:	4901      	ldr	r1, [pc, #4]	; (800b188 <_cleanup_r+0x8>)
 800b182:	f000 b8af 	b.w	800b2e4 <_fwalk_reent>
 800b186:	bf00      	nop
 800b188:	0800b0c1 	.word	0x0800b0c1

0800b18c <__sfmoreglue>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	2268      	movs	r2, #104	; 0x68
 800b190:	1e4d      	subs	r5, r1, #1
 800b192:	4355      	muls	r5, r2
 800b194:	460e      	mov	r6, r1
 800b196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b19a:	f7ff fd23 	bl	800abe4 <_malloc_r>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b140      	cbz	r0, 800b1b4 <__sfmoreglue+0x28>
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1a8:	300c      	adds	r0, #12
 800b1aa:	60a0      	str	r0, [r4, #8]
 800b1ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1b0:	f7ff fca4 	bl	800aafc <memset>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}

0800b1b8 <__sfp_lock_acquire>:
 800b1b8:	4801      	ldr	r0, [pc, #4]	; (800b1c0 <__sfp_lock_acquire+0x8>)
 800b1ba:	f000 b8b3 	b.w	800b324 <__retarget_lock_acquire_recursive>
 800b1be:	bf00      	nop
 800b1c0:	20000b55 	.word	0x20000b55

0800b1c4 <__sfp_lock_release>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	; (800b1cc <__sfp_lock_release+0x8>)
 800b1c6:	f000 b8ae 	b.w	800b326 <__retarget_lock_release_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	20000b55 	.word	0x20000b55

0800b1d0 <__sinit_lock_acquire>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	; (800b1d8 <__sinit_lock_acquire+0x8>)
 800b1d2:	f000 b8a7 	b.w	800b324 <__retarget_lock_acquire_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	20000b56 	.word	0x20000b56

0800b1dc <__sinit_lock_release>:
 800b1dc:	4801      	ldr	r0, [pc, #4]	; (800b1e4 <__sinit_lock_release+0x8>)
 800b1de:	f000 b8a2 	b.w	800b326 <__retarget_lock_release_recursive>
 800b1e2:	bf00      	nop
 800b1e4:	20000b56 	.word	0x20000b56

0800b1e8 <__sinit>:
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	f7ff fff0 	bl	800b1d0 <__sinit_lock_acquire>
 800b1f0:	69a3      	ldr	r3, [r4, #24]
 800b1f2:	b11b      	cbz	r3, 800b1fc <__sinit+0x14>
 800b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f8:	f7ff bff0 	b.w	800b1dc <__sinit_lock_release>
 800b1fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b200:	6523      	str	r3, [r4, #80]	; 0x50
 800b202:	4b13      	ldr	r3, [pc, #76]	; (800b250 <__sinit+0x68>)
 800b204:	4a13      	ldr	r2, [pc, #76]	; (800b254 <__sinit+0x6c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	62a2      	str	r2, [r4, #40]	; 0x28
 800b20a:	42a3      	cmp	r3, r4
 800b20c:	bf04      	itt	eq
 800b20e:	2301      	moveq	r3, #1
 800b210:	61a3      	streq	r3, [r4, #24]
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f820 	bl	800b258 <__sfp>
 800b218:	6060      	str	r0, [r4, #4]
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 f81c 	bl	800b258 <__sfp>
 800b220:	60a0      	str	r0, [r4, #8]
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f818 	bl	800b258 <__sfp>
 800b228:	2200      	movs	r2, #0
 800b22a:	60e0      	str	r0, [r4, #12]
 800b22c:	2104      	movs	r1, #4
 800b22e:	6860      	ldr	r0, [r4, #4]
 800b230:	f7ff ff82 	bl	800b138 <std>
 800b234:	68a0      	ldr	r0, [r4, #8]
 800b236:	2201      	movs	r2, #1
 800b238:	2109      	movs	r1, #9
 800b23a:	f7ff ff7d 	bl	800b138 <std>
 800b23e:	68e0      	ldr	r0, [r4, #12]
 800b240:	2202      	movs	r2, #2
 800b242:	2112      	movs	r1, #18
 800b244:	f7ff ff78 	bl	800b138 <std>
 800b248:	2301      	movs	r3, #1
 800b24a:	61a3      	str	r3, [r4, #24]
 800b24c:	e7d2      	b.n	800b1f4 <__sinit+0xc>
 800b24e:	bf00      	nop
 800b250:	0800bc84 	.word	0x0800bc84
 800b254:	0800b181 	.word	0x0800b181

0800b258 <__sfp>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	4607      	mov	r7, r0
 800b25c:	f7ff ffac 	bl	800b1b8 <__sfp_lock_acquire>
 800b260:	4b1e      	ldr	r3, [pc, #120]	; (800b2dc <__sfp+0x84>)
 800b262:	681e      	ldr	r6, [r3, #0]
 800b264:	69b3      	ldr	r3, [r6, #24]
 800b266:	b913      	cbnz	r3, 800b26e <__sfp+0x16>
 800b268:	4630      	mov	r0, r6
 800b26a:	f7ff ffbd 	bl	800b1e8 <__sinit>
 800b26e:	3648      	adds	r6, #72	; 0x48
 800b270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b274:	3b01      	subs	r3, #1
 800b276:	d503      	bpl.n	800b280 <__sfp+0x28>
 800b278:	6833      	ldr	r3, [r6, #0]
 800b27a:	b30b      	cbz	r3, 800b2c0 <__sfp+0x68>
 800b27c:	6836      	ldr	r6, [r6, #0]
 800b27e:	e7f7      	b.n	800b270 <__sfp+0x18>
 800b280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b284:	b9d5      	cbnz	r5, 800b2bc <__sfp+0x64>
 800b286:	4b16      	ldr	r3, [pc, #88]	; (800b2e0 <__sfp+0x88>)
 800b288:	60e3      	str	r3, [r4, #12]
 800b28a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b28e:	6665      	str	r5, [r4, #100]	; 0x64
 800b290:	f000 f847 	bl	800b322 <__retarget_lock_init_recursive>
 800b294:	f7ff ff96 	bl	800b1c4 <__sfp_lock_release>
 800b298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b29c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2a0:	6025      	str	r5, [r4, #0]
 800b2a2:	61a5      	str	r5, [r4, #24]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2ac:	f7ff fc26 	bl	800aafc <memset>
 800b2b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2bc:	3468      	adds	r4, #104	; 0x68
 800b2be:	e7d9      	b.n	800b274 <__sfp+0x1c>
 800b2c0:	2104      	movs	r1, #4
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff ff62 	bl	800b18c <__sfmoreglue>
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	6030      	str	r0, [r6, #0]
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d1d5      	bne.n	800b27c <__sfp+0x24>
 800b2d0:	f7ff ff78 	bl	800b1c4 <__sfp_lock_release>
 800b2d4:	230c      	movs	r3, #12
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	e7ee      	b.n	800b2b8 <__sfp+0x60>
 800b2da:	bf00      	nop
 800b2dc:	0800bc84 	.word	0x0800bc84
 800b2e0:	ffff0001 	.word	0xffff0001

0800b2e4 <_fwalk_reent>:
 800b2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	4688      	mov	r8, r1
 800b2ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2f0:	2700      	movs	r7, #0
 800b2f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2f6:	f1b9 0901 	subs.w	r9, r9, #1
 800b2fa:	d505      	bpl.n	800b308 <_fwalk_reent+0x24>
 800b2fc:	6824      	ldr	r4, [r4, #0]
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	d1f7      	bne.n	800b2f2 <_fwalk_reent+0xe>
 800b302:	4638      	mov	r0, r7
 800b304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b308:	89ab      	ldrh	r3, [r5, #12]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d907      	bls.n	800b31e <_fwalk_reent+0x3a>
 800b30e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b312:	3301      	adds	r3, #1
 800b314:	d003      	beq.n	800b31e <_fwalk_reent+0x3a>
 800b316:	4629      	mov	r1, r5
 800b318:	4630      	mov	r0, r6
 800b31a:	47c0      	blx	r8
 800b31c:	4307      	orrs	r7, r0
 800b31e:	3568      	adds	r5, #104	; 0x68
 800b320:	e7e9      	b.n	800b2f6 <_fwalk_reent+0x12>

0800b322 <__retarget_lock_init_recursive>:
 800b322:	4770      	bx	lr

0800b324 <__retarget_lock_acquire_recursive>:
 800b324:	4770      	bx	lr

0800b326 <__retarget_lock_release_recursive>:
 800b326:	4770      	bx	lr

0800b328 <__swhatbuf_r>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	460e      	mov	r6, r1
 800b32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b330:	2900      	cmp	r1, #0
 800b332:	b096      	sub	sp, #88	; 0x58
 800b334:	4614      	mov	r4, r2
 800b336:	461d      	mov	r5, r3
 800b338:	da08      	bge.n	800b34c <__swhatbuf_r+0x24>
 800b33a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	602a      	str	r2, [r5, #0]
 800b342:	061a      	lsls	r2, r3, #24
 800b344:	d410      	bmi.n	800b368 <__swhatbuf_r+0x40>
 800b346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b34a:	e00e      	b.n	800b36a <__swhatbuf_r+0x42>
 800b34c:	466a      	mov	r2, sp
 800b34e:	f000 fbf9 	bl	800bb44 <_fstat_r>
 800b352:	2800      	cmp	r0, #0
 800b354:	dbf1      	blt.n	800b33a <__swhatbuf_r+0x12>
 800b356:	9a01      	ldr	r2, [sp, #4]
 800b358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b35c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b360:	425a      	negs	r2, r3
 800b362:	415a      	adcs	r2, r3
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	e7ee      	b.n	800b346 <__swhatbuf_r+0x1e>
 800b368:	2340      	movs	r3, #64	; 0x40
 800b36a:	2000      	movs	r0, #0
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	b016      	add	sp, #88	; 0x58
 800b370:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b374 <__smakebuf_r>:
 800b374:	898b      	ldrh	r3, [r1, #12]
 800b376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b378:	079d      	lsls	r5, r3, #30
 800b37a:	4606      	mov	r6, r0
 800b37c:	460c      	mov	r4, r1
 800b37e:	d507      	bpl.n	800b390 <__smakebuf_r+0x1c>
 800b380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	6123      	str	r3, [r4, #16]
 800b388:	2301      	movs	r3, #1
 800b38a:	6163      	str	r3, [r4, #20]
 800b38c:	b002      	add	sp, #8
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	ab01      	add	r3, sp, #4
 800b392:	466a      	mov	r2, sp
 800b394:	f7ff ffc8 	bl	800b328 <__swhatbuf_r>
 800b398:	9900      	ldr	r1, [sp, #0]
 800b39a:	4605      	mov	r5, r0
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff fc21 	bl	800abe4 <_malloc_r>
 800b3a2:	b948      	cbnz	r0, 800b3b8 <__smakebuf_r+0x44>
 800b3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a8:	059a      	lsls	r2, r3, #22
 800b3aa:	d4ef      	bmi.n	800b38c <__smakebuf_r+0x18>
 800b3ac:	f023 0303 	bic.w	r3, r3, #3
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	e7e3      	b.n	800b380 <__smakebuf_r+0xc>
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <__smakebuf_r+0x7c>)
 800b3ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	9b00      	ldr	r3, [sp, #0]
 800b3c8:	6163      	str	r3, [r4, #20]
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	6120      	str	r0, [r4, #16]
 800b3ce:	b15b      	cbz	r3, 800b3e8 <__smakebuf_r+0x74>
 800b3d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f000 fbc7 	bl	800bb68 <_isatty_r>
 800b3da:	b128      	cbz	r0, 800b3e8 <__smakebuf_r+0x74>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	f043 0301 	orr.w	r3, r3, #1
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	89a0      	ldrh	r0, [r4, #12]
 800b3ea:	4305      	orrs	r5, r0
 800b3ec:	81a5      	strh	r5, [r4, #12]
 800b3ee:	e7cd      	b.n	800b38c <__smakebuf_r+0x18>
 800b3f0:	0800b181 	.word	0x0800b181

0800b3f4 <__malloc_lock>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	; (800b3fc <__malloc_lock+0x8>)
 800b3f6:	f7ff bf95 	b.w	800b324 <__retarget_lock_acquire_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	20000b54 	.word	0x20000b54

0800b400 <__malloc_unlock>:
 800b400:	4801      	ldr	r0, [pc, #4]	; (800b408 <__malloc_unlock+0x8>)
 800b402:	f7ff bf90 	b.w	800b326 <__retarget_lock_release_recursive>
 800b406:	bf00      	nop
 800b408:	20000b54 	.word	0x20000b54

0800b40c <__sfputc_r>:
 800b40c:	6893      	ldr	r3, [r2, #8]
 800b40e:	3b01      	subs	r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	b410      	push	{r4}
 800b414:	6093      	str	r3, [r2, #8]
 800b416:	da08      	bge.n	800b42a <__sfputc_r+0x1e>
 800b418:	6994      	ldr	r4, [r2, #24]
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	db01      	blt.n	800b422 <__sfputc_r+0x16>
 800b41e:	290a      	cmp	r1, #10
 800b420:	d103      	bne.n	800b42a <__sfputc_r+0x1e>
 800b422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b426:	f7ff bd05 	b.w	800ae34 <__swbuf_r>
 800b42a:	6813      	ldr	r3, [r2, #0]
 800b42c:	1c58      	adds	r0, r3, #1
 800b42e:	6010      	str	r0, [r2, #0]
 800b430:	7019      	strb	r1, [r3, #0]
 800b432:	4608      	mov	r0, r1
 800b434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <__sfputs_r>:
 800b43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	4614      	mov	r4, r2
 800b442:	18d5      	adds	r5, r2, r3
 800b444:	42ac      	cmp	r4, r5
 800b446:	d101      	bne.n	800b44c <__sfputs_r+0x12>
 800b448:	2000      	movs	r0, #0
 800b44a:	e007      	b.n	800b45c <__sfputs_r+0x22>
 800b44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b450:	463a      	mov	r2, r7
 800b452:	4630      	mov	r0, r6
 800b454:	f7ff ffda 	bl	800b40c <__sfputc_r>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d1f3      	bne.n	800b444 <__sfputs_r+0xa>
 800b45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b460 <_vfiprintf_r>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	460d      	mov	r5, r1
 800b466:	b09d      	sub	sp, #116	; 0x74
 800b468:	4614      	mov	r4, r2
 800b46a:	4698      	mov	r8, r3
 800b46c:	4606      	mov	r6, r0
 800b46e:	b118      	cbz	r0, 800b478 <_vfiprintf_r+0x18>
 800b470:	6983      	ldr	r3, [r0, #24]
 800b472:	b90b      	cbnz	r3, 800b478 <_vfiprintf_r+0x18>
 800b474:	f7ff feb8 	bl	800b1e8 <__sinit>
 800b478:	4b89      	ldr	r3, [pc, #548]	; (800b6a0 <_vfiprintf_r+0x240>)
 800b47a:	429d      	cmp	r5, r3
 800b47c:	d11b      	bne.n	800b4b6 <_vfiprintf_r+0x56>
 800b47e:	6875      	ldr	r5, [r6, #4]
 800b480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b482:	07d9      	lsls	r1, r3, #31
 800b484:	d405      	bmi.n	800b492 <_vfiprintf_r+0x32>
 800b486:	89ab      	ldrh	r3, [r5, #12]
 800b488:	059a      	lsls	r2, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_vfiprintf_r+0x32>
 800b48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b48e:	f7ff ff49 	bl	800b324 <__retarget_lock_acquire_recursive>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	071b      	lsls	r3, r3, #28
 800b496:	d501      	bpl.n	800b49c <_vfiprintf_r+0x3c>
 800b498:	692b      	ldr	r3, [r5, #16]
 800b49a:	b9eb      	cbnz	r3, 800b4d8 <_vfiprintf_r+0x78>
 800b49c:	4629      	mov	r1, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff fd1a 	bl	800aed8 <__swsetup_r>
 800b4a4:	b1c0      	cbz	r0, 800b4d8 <_vfiprintf_r+0x78>
 800b4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a8:	07dc      	lsls	r4, r3, #31
 800b4aa:	d50e      	bpl.n	800b4ca <_vfiprintf_r+0x6a>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	b01d      	add	sp, #116	; 0x74
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	4b7b      	ldr	r3, [pc, #492]	; (800b6a4 <_vfiprintf_r+0x244>)
 800b4b8:	429d      	cmp	r5, r3
 800b4ba:	d101      	bne.n	800b4c0 <_vfiprintf_r+0x60>
 800b4bc:	68b5      	ldr	r5, [r6, #8]
 800b4be:	e7df      	b.n	800b480 <_vfiprintf_r+0x20>
 800b4c0:	4b79      	ldr	r3, [pc, #484]	; (800b6a8 <_vfiprintf_r+0x248>)
 800b4c2:	429d      	cmp	r5, r3
 800b4c4:	bf08      	it	eq
 800b4c6:	68f5      	ldreq	r5, [r6, #12]
 800b4c8:	e7da      	b.n	800b480 <_vfiprintf_r+0x20>
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	0598      	lsls	r0, r3, #22
 800b4ce:	d4ed      	bmi.n	800b4ac <_vfiprintf_r+0x4c>
 800b4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4d2:	f7ff ff28 	bl	800b326 <__retarget_lock_release_recursive>
 800b4d6:	e7e9      	b.n	800b4ac <_vfiprintf_r+0x4c>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9309      	str	r3, [sp, #36]	; 0x24
 800b4dc:	2320      	movs	r3, #32
 800b4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4e6:	2330      	movs	r3, #48	; 0x30
 800b4e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b6ac <_vfiprintf_r+0x24c>
 800b4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4f0:	f04f 0901 	mov.w	r9, #1
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	469a      	mov	sl, r3
 800b4f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4fc:	b10a      	cbz	r2, 800b502 <_vfiprintf_r+0xa2>
 800b4fe:	2a25      	cmp	r2, #37	; 0x25
 800b500:	d1f9      	bne.n	800b4f6 <_vfiprintf_r+0x96>
 800b502:	ebba 0b04 	subs.w	fp, sl, r4
 800b506:	d00b      	beq.n	800b520 <_vfiprintf_r+0xc0>
 800b508:	465b      	mov	r3, fp
 800b50a:	4622      	mov	r2, r4
 800b50c:	4629      	mov	r1, r5
 800b50e:	4630      	mov	r0, r6
 800b510:	f7ff ff93 	bl	800b43a <__sfputs_r>
 800b514:	3001      	adds	r0, #1
 800b516:	f000 80aa 	beq.w	800b66e <_vfiprintf_r+0x20e>
 800b51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b51c:	445a      	add	r2, fp
 800b51e:	9209      	str	r2, [sp, #36]	; 0x24
 800b520:	f89a 3000 	ldrb.w	r3, [sl]
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 80a2 	beq.w	800b66e <_vfiprintf_r+0x20e>
 800b52a:	2300      	movs	r3, #0
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b534:	f10a 0a01 	add.w	sl, sl, #1
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	9307      	str	r3, [sp, #28]
 800b53c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b540:	931a      	str	r3, [sp, #104]	; 0x68
 800b542:	4654      	mov	r4, sl
 800b544:	2205      	movs	r2, #5
 800b546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54a:	4858      	ldr	r0, [pc, #352]	; (800b6ac <_vfiprintf_r+0x24c>)
 800b54c:	f7f4 fe60 	bl	8000210 <memchr>
 800b550:	9a04      	ldr	r2, [sp, #16]
 800b552:	b9d8      	cbnz	r0, 800b58c <_vfiprintf_r+0x12c>
 800b554:	06d1      	lsls	r1, r2, #27
 800b556:	bf44      	itt	mi
 800b558:	2320      	movmi	r3, #32
 800b55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b55e:	0713      	lsls	r3, r2, #28
 800b560:	bf44      	itt	mi
 800b562:	232b      	movmi	r3, #43	; 0x2b
 800b564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b568:	f89a 3000 	ldrb.w	r3, [sl]
 800b56c:	2b2a      	cmp	r3, #42	; 0x2a
 800b56e:	d015      	beq.n	800b59c <_vfiprintf_r+0x13c>
 800b570:	9a07      	ldr	r2, [sp, #28]
 800b572:	4654      	mov	r4, sl
 800b574:	2000      	movs	r0, #0
 800b576:	f04f 0c0a 	mov.w	ip, #10
 800b57a:	4621      	mov	r1, r4
 800b57c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b580:	3b30      	subs	r3, #48	; 0x30
 800b582:	2b09      	cmp	r3, #9
 800b584:	d94e      	bls.n	800b624 <_vfiprintf_r+0x1c4>
 800b586:	b1b0      	cbz	r0, 800b5b6 <_vfiprintf_r+0x156>
 800b588:	9207      	str	r2, [sp, #28]
 800b58a:	e014      	b.n	800b5b6 <_vfiprintf_r+0x156>
 800b58c:	eba0 0308 	sub.w	r3, r0, r8
 800b590:	fa09 f303 	lsl.w	r3, r9, r3
 800b594:	4313      	orrs	r3, r2
 800b596:	9304      	str	r3, [sp, #16]
 800b598:	46a2      	mov	sl, r4
 800b59a:	e7d2      	b.n	800b542 <_vfiprintf_r+0xe2>
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	1d19      	adds	r1, r3, #4
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	9103      	str	r1, [sp, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	bfbb      	ittet	lt
 800b5a8:	425b      	neglt	r3, r3
 800b5aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ae:	9307      	strge	r3, [sp, #28]
 800b5b0:	9307      	strlt	r3, [sp, #28]
 800b5b2:	bfb8      	it	lt
 800b5b4:	9204      	strlt	r2, [sp, #16]
 800b5b6:	7823      	ldrb	r3, [r4, #0]
 800b5b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ba:	d10c      	bne.n	800b5d6 <_vfiprintf_r+0x176>
 800b5bc:	7863      	ldrb	r3, [r4, #1]
 800b5be:	2b2a      	cmp	r3, #42	; 0x2a
 800b5c0:	d135      	bne.n	800b62e <_vfiprintf_r+0x1ce>
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	1d1a      	adds	r2, r3, #4
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	9203      	str	r2, [sp, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bfb8      	it	lt
 800b5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5d2:	3402      	adds	r4, #2
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b6bc <_vfiprintf_r+0x25c>
 800b5da:	7821      	ldrb	r1, [r4, #0]
 800b5dc:	2203      	movs	r2, #3
 800b5de:	4650      	mov	r0, sl
 800b5e0:	f7f4 fe16 	bl	8000210 <memchr>
 800b5e4:	b140      	cbz	r0, 800b5f8 <_vfiprintf_r+0x198>
 800b5e6:	2340      	movs	r3, #64	; 0x40
 800b5e8:	eba0 000a 	sub.w	r0, r0, sl
 800b5ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b5f0:	9b04      	ldr	r3, [sp, #16]
 800b5f2:	4303      	orrs	r3, r0
 800b5f4:	3401      	adds	r4, #1
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5fc:	482c      	ldr	r0, [pc, #176]	; (800b6b0 <_vfiprintf_r+0x250>)
 800b5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b602:	2206      	movs	r2, #6
 800b604:	f7f4 fe04 	bl	8000210 <memchr>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d03f      	beq.n	800b68c <_vfiprintf_r+0x22c>
 800b60c:	4b29      	ldr	r3, [pc, #164]	; (800b6b4 <_vfiprintf_r+0x254>)
 800b60e:	bb1b      	cbnz	r3, 800b658 <_vfiprintf_r+0x1f8>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	3307      	adds	r3, #7
 800b614:	f023 0307 	bic.w	r3, r3, #7
 800b618:	3308      	adds	r3, #8
 800b61a:	9303      	str	r3, [sp, #12]
 800b61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61e:	443b      	add	r3, r7
 800b620:	9309      	str	r3, [sp, #36]	; 0x24
 800b622:	e767      	b.n	800b4f4 <_vfiprintf_r+0x94>
 800b624:	fb0c 3202 	mla	r2, ip, r2, r3
 800b628:	460c      	mov	r4, r1
 800b62a:	2001      	movs	r0, #1
 800b62c:	e7a5      	b.n	800b57a <_vfiprintf_r+0x11a>
 800b62e:	2300      	movs	r3, #0
 800b630:	3401      	adds	r4, #1
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	4619      	mov	r1, r3
 800b636:	f04f 0c0a 	mov.w	ip, #10
 800b63a:	4620      	mov	r0, r4
 800b63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b640:	3a30      	subs	r2, #48	; 0x30
 800b642:	2a09      	cmp	r2, #9
 800b644:	d903      	bls.n	800b64e <_vfiprintf_r+0x1ee>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0c5      	beq.n	800b5d6 <_vfiprintf_r+0x176>
 800b64a:	9105      	str	r1, [sp, #20]
 800b64c:	e7c3      	b.n	800b5d6 <_vfiprintf_r+0x176>
 800b64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b652:	4604      	mov	r4, r0
 800b654:	2301      	movs	r3, #1
 800b656:	e7f0      	b.n	800b63a <_vfiprintf_r+0x1da>
 800b658:	ab03      	add	r3, sp, #12
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	462a      	mov	r2, r5
 800b65e:	4b16      	ldr	r3, [pc, #88]	; (800b6b8 <_vfiprintf_r+0x258>)
 800b660:	a904      	add	r1, sp, #16
 800b662:	4630      	mov	r0, r6
 800b664:	f3af 8000 	nop.w
 800b668:	4607      	mov	r7, r0
 800b66a:	1c78      	adds	r0, r7, #1
 800b66c:	d1d6      	bne.n	800b61c <_vfiprintf_r+0x1bc>
 800b66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b670:	07d9      	lsls	r1, r3, #31
 800b672:	d405      	bmi.n	800b680 <_vfiprintf_r+0x220>
 800b674:	89ab      	ldrh	r3, [r5, #12]
 800b676:	059a      	lsls	r2, r3, #22
 800b678:	d402      	bmi.n	800b680 <_vfiprintf_r+0x220>
 800b67a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b67c:	f7ff fe53 	bl	800b326 <__retarget_lock_release_recursive>
 800b680:	89ab      	ldrh	r3, [r5, #12]
 800b682:	065b      	lsls	r3, r3, #25
 800b684:	f53f af12 	bmi.w	800b4ac <_vfiprintf_r+0x4c>
 800b688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b68a:	e711      	b.n	800b4b0 <_vfiprintf_r+0x50>
 800b68c:	ab03      	add	r3, sp, #12
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	462a      	mov	r2, r5
 800b692:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <_vfiprintf_r+0x258>)
 800b694:	a904      	add	r1, sp, #16
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f880 	bl	800b79c <_printf_i>
 800b69c:	e7e4      	b.n	800b668 <_vfiprintf_r+0x208>
 800b69e:	bf00      	nop
 800b6a0:	0800bca8 	.word	0x0800bca8
 800b6a4:	0800bcc8 	.word	0x0800bcc8
 800b6a8:	0800bc88 	.word	0x0800bc88
 800b6ac:	0800bce8 	.word	0x0800bce8
 800b6b0:	0800bcf2 	.word	0x0800bcf2
 800b6b4:	00000000 	.word	0x00000000
 800b6b8:	0800b43b 	.word	0x0800b43b
 800b6bc:	0800bcee 	.word	0x0800bcee

0800b6c0 <_printf_common>:
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	4699      	mov	r9, r3
 800b6c8:	688a      	ldr	r2, [r1, #8]
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bfb8      	it	lt
 800b6d4:	4613      	movlt	r3, r2
 800b6d6:	6033      	str	r3, [r6, #0]
 800b6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6dc:	4607      	mov	r7, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	b10a      	cbz	r2, 800b6e6 <_printf_common+0x26>
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	6033      	str	r3, [r6, #0]
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	0699      	lsls	r1, r3, #26
 800b6ea:	bf42      	ittt	mi
 800b6ec:	6833      	ldrmi	r3, [r6, #0]
 800b6ee:	3302      	addmi	r3, #2
 800b6f0:	6033      	strmi	r3, [r6, #0]
 800b6f2:	6825      	ldr	r5, [r4, #0]
 800b6f4:	f015 0506 	ands.w	r5, r5, #6
 800b6f8:	d106      	bne.n	800b708 <_printf_common+0x48>
 800b6fa:	f104 0a19 	add.w	sl, r4, #25
 800b6fe:	68e3      	ldr	r3, [r4, #12]
 800b700:	6832      	ldr	r2, [r6, #0]
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	42ab      	cmp	r3, r5
 800b706:	dc26      	bgt.n	800b756 <_printf_common+0x96>
 800b708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b70c:	1e13      	subs	r3, r2, #0
 800b70e:	6822      	ldr	r2, [r4, #0]
 800b710:	bf18      	it	ne
 800b712:	2301      	movne	r3, #1
 800b714:	0692      	lsls	r2, r2, #26
 800b716:	d42b      	bmi.n	800b770 <_printf_common+0xb0>
 800b718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b71c:	4649      	mov	r1, r9
 800b71e:	4638      	mov	r0, r7
 800b720:	47c0      	blx	r8
 800b722:	3001      	adds	r0, #1
 800b724:	d01e      	beq.n	800b764 <_printf_common+0xa4>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	68e5      	ldr	r5, [r4, #12]
 800b72a:	6832      	ldr	r2, [r6, #0]
 800b72c:	f003 0306 	and.w	r3, r3, #6
 800b730:	2b04      	cmp	r3, #4
 800b732:	bf08      	it	eq
 800b734:	1aad      	subeq	r5, r5, r2
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	bf0c      	ite	eq
 800b73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b740:	2500      	movne	r5, #0
 800b742:	4293      	cmp	r3, r2
 800b744:	bfc4      	itt	gt
 800b746:	1a9b      	subgt	r3, r3, r2
 800b748:	18ed      	addgt	r5, r5, r3
 800b74a:	2600      	movs	r6, #0
 800b74c:	341a      	adds	r4, #26
 800b74e:	42b5      	cmp	r5, r6
 800b750:	d11a      	bne.n	800b788 <_printf_common+0xc8>
 800b752:	2000      	movs	r0, #0
 800b754:	e008      	b.n	800b768 <_printf_common+0xa8>
 800b756:	2301      	movs	r3, #1
 800b758:	4652      	mov	r2, sl
 800b75a:	4649      	mov	r1, r9
 800b75c:	4638      	mov	r0, r7
 800b75e:	47c0      	blx	r8
 800b760:	3001      	adds	r0, #1
 800b762:	d103      	bne.n	800b76c <_printf_common+0xac>
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76c:	3501      	adds	r5, #1
 800b76e:	e7c6      	b.n	800b6fe <_printf_common+0x3e>
 800b770:	18e1      	adds	r1, r4, r3
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	2030      	movs	r0, #48	; 0x30
 800b776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b77a:	4422      	add	r2, r4
 800b77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b784:	3302      	adds	r3, #2
 800b786:	e7c7      	b.n	800b718 <_printf_common+0x58>
 800b788:	2301      	movs	r3, #1
 800b78a:	4622      	mov	r2, r4
 800b78c:	4649      	mov	r1, r9
 800b78e:	4638      	mov	r0, r7
 800b790:	47c0      	blx	r8
 800b792:	3001      	adds	r0, #1
 800b794:	d0e6      	beq.n	800b764 <_printf_common+0xa4>
 800b796:	3601      	adds	r6, #1
 800b798:	e7d9      	b.n	800b74e <_printf_common+0x8e>
	...

0800b79c <_printf_i>:
 800b79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a0:	7e0f      	ldrb	r7, [r1, #24]
 800b7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7a4:	2f78      	cmp	r7, #120	; 0x78
 800b7a6:	4691      	mov	r9, r2
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	469a      	mov	sl, r3
 800b7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7b2:	d807      	bhi.n	800b7c4 <_printf_i+0x28>
 800b7b4:	2f62      	cmp	r7, #98	; 0x62
 800b7b6:	d80a      	bhi.n	800b7ce <_printf_i+0x32>
 800b7b8:	2f00      	cmp	r7, #0
 800b7ba:	f000 80d8 	beq.w	800b96e <_printf_i+0x1d2>
 800b7be:	2f58      	cmp	r7, #88	; 0x58
 800b7c0:	f000 80a3 	beq.w	800b90a <_printf_i+0x16e>
 800b7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7cc:	e03a      	b.n	800b844 <_printf_i+0xa8>
 800b7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7d2:	2b15      	cmp	r3, #21
 800b7d4:	d8f6      	bhi.n	800b7c4 <_printf_i+0x28>
 800b7d6:	a101      	add	r1, pc, #4	; (adr r1, 800b7dc <_printf_i+0x40>)
 800b7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7dc:	0800b835 	.word	0x0800b835
 800b7e0:	0800b849 	.word	0x0800b849
 800b7e4:	0800b7c5 	.word	0x0800b7c5
 800b7e8:	0800b7c5 	.word	0x0800b7c5
 800b7ec:	0800b7c5 	.word	0x0800b7c5
 800b7f0:	0800b7c5 	.word	0x0800b7c5
 800b7f4:	0800b849 	.word	0x0800b849
 800b7f8:	0800b7c5 	.word	0x0800b7c5
 800b7fc:	0800b7c5 	.word	0x0800b7c5
 800b800:	0800b7c5 	.word	0x0800b7c5
 800b804:	0800b7c5 	.word	0x0800b7c5
 800b808:	0800b955 	.word	0x0800b955
 800b80c:	0800b879 	.word	0x0800b879
 800b810:	0800b937 	.word	0x0800b937
 800b814:	0800b7c5 	.word	0x0800b7c5
 800b818:	0800b7c5 	.word	0x0800b7c5
 800b81c:	0800b977 	.word	0x0800b977
 800b820:	0800b7c5 	.word	0x0800b7c5
 800b824:	0800b879 	.word	0x0800b879
 800b828:	0800b7c5 	.word	0x0800b7c5
 800b82c:	0800b7c5 	.word	0x0800b7c5
 800b830:	0800b93f 	.word	0x0800b93f
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	602a      	str	r2, [r5, #0]
 800b83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b844:	2301      	movs	r3, #1
 800b846:	e0a3      	b.n	800b990 <_printf_i+0x1f4>
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	6829      	ldr	r1, [r5, #0]
 800b84c:	0606      	lsls	r6, r0, #24
 800b84e:	f101 0304 	add.w	r3, r1, #4
 800b852:	d50a      	bpl.n	800b86a <_printf_i+0xce>
 800b854:	680e      	ldr	r6, [r1, #0]
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	2e00      	cmp	r6, #0
 800b85a:	da03      	bge.n	800b864 <_printf_i+0xc8>
 800b85c:	232d      	movs	r3, #45	; 0x2d
 800b85e:	4276      	negs	r6, r6
 800b860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b864:	485e      	ldr	r0, [pc, #376]	; (800b9e0 <_printf_i+0x244>)
 800b866:	230a      	movs	r3, #10
 800b868:	e019      	b.n	800b89e <_printf_i+0x102>
 800b86a:	680e      	ldr	r6, [r1, #0]
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b872:	bf18      	it	ne
 800b874:	b236      	sxthne	r6, r6
 800b876:	e7ef      	b.n	800b858 <_printf_i+0xbc>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	1d19      	adds	r1, r3, #4
 800b87e:	6029      	str	r1, [r5, #0]
 800b880:	0601      	lsls	r1, r0, #24
 800b882:	d501      	bpl.n	800b888 <_printf_i+0xec>
 800b884:	681e      	ldr	r6, [r3, #0]
 800b886:	e002      	b.n	800b88e <_printf_i+0xf2>
 800b888:	0646      	lsls	r6, r0, #25
 800b88a:	d5fb      	bpl.n	800b884 <_printf_i+0xe8>
 800b88c:	881e      	ldrh	r6, [r3, #0]
 800b88e:	4854      	ldr	r0, [pc, #336]	; (800b9e0 <_printf_i+0x244>)
 800b890:	2f6f      	cmp	r7, #111	; 0x6f
 800b892:	bf0c      	ite	eq
 800b894:	2308      	moveq	r3, #8
 800b896:	230a      	movne	r3, #10
 800b898:	2100      	movs	r1, #0
 800b89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b89e:	6865      	ldr	r5, [r4, #4]
 800b8a0:	60a5      	str	r5, [r4, #8]
 800b8a2:	2d00      	cmp	r5, #0
 800b8a4:	bfa2      	ittt	ge
 800b8a6:	6821      	ldrge	r1, [r4, #0]
 800b8a8:	f021 0104 	bicge.w	r1, r1, #4
 800b8ac:	6021      	strge	r1, [r4, #0]
 800b8ae:	b90e      	cbnz	r6, 800b8b4 <_printf_i+0x118>
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d04d      	beq.n	800b950 <_printf_i+0x1b4>
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b8be:	5dc7      	ldrb	r7, [r0, r7]
 800b8c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8c4:	4637      	mov	r7, r6
 800b8c6:	42bb      	cmp	r3, r7
 800b8c8:	460e      	mov	r6, r1
 800b8ca:	d9f4      	bls.n	800b8b6 <_printf_i+0x11a>
 800b8cc:	2b08      	cmp	r3, #8
 800b8ce:	d10b      	bne.n	800b8e8 <_printf_i+0x14c>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	07de      	lsls	r6, r3, #31
 800b8d4:	d508      	bpl.n	800b8e8 <_printf_i+0x14c>
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	6861      	ldr	r1, [r4, #4]
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	bfde      	ittt	le
 800b8de:	2330      	movle	r3, #48	; 0x30
 800b8e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8e8:	1b52      	subs	r2, r2, r5
 800b8ea:	6122      	str	r2, [r4, #16]
 800b8ec:	f8cd a000 	str.w	sl, [sp]
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	aa03      	add	r2, sp, #12
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	f7ff fee2 	bl	800b6c0 <_printf_common>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d14c      	bne.n	800b99a <_printf_i+0x1fe>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b004      	add	sp, #16
 800b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b90a:	4835      	ldr	r0, [pc, #212]	; (800b9e0 <_printf_i+0x244>)
 800b90c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b910:	6829      	ldr	r1, [r5, #0]
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	f851 6b04 	ldr.w	r6, [r1], #4
 800b918:	6029      	str	r1, [r5, #0]
 800b91a:	061d      	lsls	r5, r3, #24
 800b91c:	d514      	bpl.n	800b948 <_printf_i+0x1ac>
 800b91e:	07df      	lsls	r7, r3, #31
 800b920:	bf44      	itt	mi
 800b922:	f043 0320 	orrmi.w	r3, r3, #32
 800b926:	6023      	strmi	r3, [r4, #0]
 800b928:	b91e      	cbnz	r6, 800b932 <_printf_i+0x196>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	f023 0320 	bic.w	r3, r3, #32
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	2310      	movs	r3, #16
 800b934:	e7b0      	b.n	800b898 <_printf_i+0xfc>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	f043 0320 	orr.w	r3, r3, #32
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	2378      	movs	r3, #120	; 0x78
 800b940:	4828      	ldr	r0, [pc, #160]	; (800b9e4 <_printf_i+0x248>)
 800b942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b946:	e7e3      	b.n	800b910 <_printf_i+0x174>
 800b948:	0659      	lsls	r1, r3, #25
 800b94a:	bf48      	it	mi
 800b94c:	b2b6      	uxthmi	r6, r6
 800b94e:	e7e6      	b.n	800b91e <_printf_i+0x182>
 800b950:	4615      	mov	r5, r2
 800b952:	e7bb      	b.n	800b8cc <_printf_i+0x130>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	6826      	ldr	r6, [r4, #0]
 800b958:	6961      	ldr	r1, [r4, #20]
 800b95a:	1d18      	adds	r0, r3, #4
 800b95c:	6028      	str	r0, [r5, #0]
 800b95e:	0635      	lsls	r5, r6, #24
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	d501      	bpl.n	800b968 <_printf_i+0x1cc>
 800b964:	6019      	str	r1, [r3, #0]
 800b966:	e002      	b.n	800b96e <_printf_i+0x1d2>
 800b968:	0670      	lsls	r0, r6, #25
 800b96a:	d5fb      	bpl.n	800b964 <_printf_i+0x1c8>
 800b96c:	8019      	strh	r1, [r3, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	4615      	mov	r5, r2
 800b974:	e7ba      	b.n	800b8ec <_printf_i+0x150>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	1d1a      	adds	r2, r3, #4
 800b97a:	602a      	str	r2, [r5, #0]
 800b97c:	681d      	ldr	r5, [r3, #0]
 800b97e:	6862      	ldr	r2, [r4, #4]
 800b980:	2100      	movs	r1, #0
 800b982:	4628      	mov	r0, r5
 800b984:	f7f4 fc44 	bl	8000210 <memchr>
 800b988:	b108      	cbz	r0, 800b98e <_printf_i+0x1f2>
 800b98a:	1b40      	subs	r0, r0, r5
 800b98c:	6060      	str	r0, [r4, #4]
 800b98e:	6863      	ldr	r3, [r4, #4]
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	2300      	movs	r3, #0
 800b994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b998:	e7a8      	b.n	800b8ec <_printf_i+0x150>
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	47d0      	blx	sl
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d0ab      	beq.n	800b900 <_printf_i+0x164>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	079b      	lsls	r3, r3, #30
 800b9ac:	d413      	bmi.n	800b9d6 <_printf_i+0x23a>
 800b9ae:	68e0      	ldr	r0, [r4, #12]
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	4298      	cmp	r0, r3
 800b9b4:	bfb8      	it	lt
 800b9b6:	4618      	movlt	r0, r3
 800b9b8:	e7a4      	b.n	800b904 <_printf_i+0x168>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4649      	mov	r1, r9
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	47d0      	blx	sl
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d09b      	beq.n	800b900 <_printf_i+0x164>
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	68e3      	ldr	r3, [r4, #12]
 800b9cc:	9903      	ldr	r1, [sp, #12]
 800b9ce:	1a5b      	subs	r3, r3, r1
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	dcf2      	bgt.n	800b9ba <_printf_i+0x21e>
 800b9d4:	e7eb      	b.n	800b9ae <_printf_i+0x212>
 800b9d6:	2500      	movs	r5, #0
 800b9d8:	f104 0619 	add.w	r6, r4, #25
 800b9dc:	e7f5      	b.n	800b9ca <_printf_i+0x22e>
 800b9de:	bf00      	nop
 800b9e0:	0800bcf9 	.word	0x0800bcf9
 800b9e4:	0800bd0a 	.word	0x0800bd0a

0800b9e8 <_putc_r>:
 800b9e8:	b570      	push	{r4, r5, r6, lr}
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	b118      	cbz	r0, 800b9fa <_putc_r+0x12>
 800b9f2:	6983      	ldr	r3, [r0, #24]
 800b9f4:	b90b      	cbnz	r3, 800b9fa <_putc_r+0x12>
 800b9f6:	f7ff fbf7 	bl	800b1e8 <__sinit>
 800b9fa:	4b1c      	ldr	r3, [pc, #112]	; (800ba6c <_putc_r+0x84>)
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	d124      	bne.n	800ba4a <_putc_r+0x62>
 800ba00:	6874      	ldr	r4, [r6, #4]
 800ba02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba04:	07d8      	lsls	r0, r3, #31
 800ba06:	d405      	bmi.n	800ba14 <_putc_r+0x2c>
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	0599      	lsls	r1, r3, #22
 800ba0c:	d402      	bmi.n	800ba14 <_putc_r+0x2c>
 800ba0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba10:	f7ff fc88 	bl	800b324 <__retarget_lock_acquire_recursive>
 800ba14:	68a3      	ldr	r3, [r4, #8]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	da05      	bge.n	800ba2a <_putc_r+0x42>
 800ba1e:	69a2      	ldr	r2, [r4, #24]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	db1c      	blt.n	800ba5e <_putc_r+0x76>
 800ba24:	b2eb      	uxtb	r3, r5
 800ba26:	2b0a      	cmp	r3, #10
 800ba28:	d019      	beq.n	800ba5e <_putc_r+0x76>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	6022      	str	r2, [r4, #0]
 800ba30:	701d      	strb	r5, [r3, #0]
 800ba32:	b2ed      	uxtb	r5, r5
 800ba34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba36:	07da      	lsls	r2, r3, #31
 800ba38:	d405      	bmi.n	800ba46 <_putc_r+0x5e>
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	059b      	lsls	r3, r3, #22
 800ba3e:	d402      	bmi.n	800ba46 <_putc_r+0x5e>
 800ba40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba42:	f7ff fc70 	bl	800b326 <__retarget_lock_release_recursive>
 800ba46:	4628      	mov	r0, r5
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <_putc_r+0x88>)
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d101      	bne.n	800ba54 <_putc_r+0x6c>
 800ba50:	68b4      	ldr	r4, [r6, #8]
 800ba52:	e7d6      	b.n	800ba02 <_putc_r+0x1a>
 800ba54:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <_putc_r+0x8c>)
 800ba56:	429c      	cmp	r4, r3
 800ba58:	bf08      	it	eq
 800ba5a:	68f4      	ldreq	r4, [r6, #12]
 800ba5c:	e7d1      	b.n	800ba02 <_putc_r+0x1a>
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4622      	mov	r2, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff f9e6 	bl	800ae34 <__swbuf_r>
 800ba68:	4605      	mov	r5, r0
 800ba6a:	e7e3      	b.n	800ba34 <_putc_r+0x4c>
 800ba6c:	0800bca8 	.word	0x0800bca8
 800ba70:	0800bcc8 	.word	0x0800bcc8
 800ba74:	0800bc88 	.word	0x0800bc88

0800ba78 <__sread>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba80:	f000 f894 	bl	800bbac <_read_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	bfab      	itete	ge
 800ba88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba8c:	181b      	addge	r3, r3, r0
 800ba8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba92:	bfac      	ite	ge
 800ba94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba96:	81a3      	strhlt	r3, [r4, #12]
 800ba98:	bd10      	pop	{r4, pc}

0800ba9a <__swrite>:
 800ba9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9e:	461f      	mov	r7, r3
 800baa0:	898b      	ldrh	r3, [r1, #12]
 800baa2:	05db      	lsls	r3, r3, #23
 800baa4:	4605      	mov	r5, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	4616      	mov	r6, r2
 800baaa:	d505      	bpl.n	800bab8 <__swrite+0x1e>
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	2302      	movs	r3, #2
 800bab2:	2200      	movs	r2, #0
 800bab4:	f000 f868 	bl	800bb88 <_lseek_r>
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	4632      	mov	r2, r6
 800bac6:	463b      	mov	r3, r7
 800bac8:	4628      	mov	r0, r5
 800baca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	f000 b817 	b.w	800bb00 <_write_r>

0800bad2 <__sseek>:
 800bad2:	b510      	push	{r4, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bada:	f000 f855 	bl	800bb88 <_lseek_r>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	bf15      	itete	ne
 800bae4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baee:	81a3      	strheq	r3, [r4, #12]
 800baf0:	bf18      	it	ne
 800baf2:	81a3      	strhne	r3, [r4, #12]
 800baf4:	bd10      	pop	{r4, pc}

0800baf6 <__sclose>:
 800baf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafa:	f000 b813 	b.w	800bb24 <_close_r>
	...

0800bb00 <_write_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	; (800bb20 <_write_r+0x20>)
 800bb04:	4604      	mov	r4, r0
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	602a      	str	r2, [r5, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7f5 fda0 	bl	8001654 <_write>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_write_r+0x1e>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_write_r+0x1e>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	20000b58 	.word	0x20000b58

0800bb24 <_close_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d06      	ldr	r5, [pc, #24]	; (800bb40 <_close_r+0x1c>)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f6 f943 	bl	8001dba <_close>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_close_r+0x1a>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_close_r+0x1a>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20000b58 	.word	0x20000b58

0800bb44 <_fstat_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	; (800bb64 <_fstat_r+0x20>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	4611      	mov	r1, r2
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	f7f6 f93e 	bl	8001dd2 <_fstat>
 800bb56:	1c43      	adds	r3, r0, #1
 800bb58:	d102      	bne.n	800bb60 <_fstat_r+0x1c>
 800bb5a:	682b      	ldr	r3, [r5, #0]
 800bb5c:	b103      	cbz	r3, 800bb60 <_fstat_r+0x1c>
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	bf00      	nop
 800bb64:	20000b58 	.word	0x20000b58

0800bb68 <_isatty_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d06      	ldr	r5, [pc, #24]	; (800bb84 <_isatty_r+0x1c>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	602b      	str	r3, [r5, #0]
 800bb74:	f7f6 f93d 	bl	8001df2 <_isatty>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_isatty_r+0x1a>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_isatty_r+0x1a>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20000b58 	.word	0x20000b58

0800bb88 <_lseek_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	; (800bba8 <_lseek_r+0x20>)
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	4611      	mov	r1, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	602a      	str	r2, [r5, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f7f6 f936 	bl	8001e08 <_lseek>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_lseek_r+0x1e>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_lseek_r+0x1e>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20000b58 	.word	0x20000b58

0800bbac <_read_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	; (800bbcc <_read_r+0x20>)
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	602a      	str	r2, [r5, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f7f6 f8e0 	bl	8001d80 <_read>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_read_r+0x1e>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_read_r+0x1e>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	20000b58 	.word	0x20000b58

0800bbd0 <_init>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr

0800bbdc <_fini>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr
