
Example_IKS01A3_DataLogTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080108c8  080108c8  000208c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d98  08010d98  0003033c  2**0
                  CONTENTS
  4 .ARM          00000008  08010d98  08010d98  00020d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010da0  08010da0  0003033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010da0  08010da0  00020da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010da4  08010da4  00020da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010da8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001fc  08010fa4  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000029c  08011044  0003029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a44  2000033c  080110e4  0003033c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d80  080110e4  00030d80  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003eee0  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000051e0  00000000  00000000  0006f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003078  00000000  00000000  00074430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002e68  00000000  00000000  000774a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b315  00000000  00000000  0007a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b3fb  00000000  00000000  000a5625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104137  00000000  00000000  000d0a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d4b57  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000df48  00000000  00000000  001d4ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000033c 	.word	0x2000033c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080108ac 	.word	0x080108ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000340 	.word	0x20000340
 800020c:	080108ac 	.word	0x080108ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f008 fc86 	bl	8009890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f80c 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 f8ee 	bl	8001168 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f8c:	f000 f870 	bl	8001070 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f90:	f000 f8bc 	bl	800110c <MX_USB_OTG_FS_PCD_Init>
  MX_MEMS_Init();
 8000f94:	f00c fcca 	bl	800d92c <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f98:	f00c fcce 	bl	800d938 <MX_MEMS_Process>
 8000f9c:	e7fc      	b.n	8000f98 <main+0x1c>
	...

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00e faf6 	bl	800f5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc4:	f00a fc14 	bl	800b7f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <SystemClock_Config+0xc8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <SystemClock_Config+0xc8>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <SystemClock_Config+0xcc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <SystemClock_Config+0xcc>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001000:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001014:	2348      	movs	r3, #72	; 0x48
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800101c:	2303      	movs	r3, #3
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f00a fbf3 	bl	800b810 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001030:	f000 f97c 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f00a fe81 	bl	800bd58 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800105c:	f000 f966 	bl	800132c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_ETH_Init+0x84>)
 8001076:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <MX_ETH_Init+0x88>)
 8001078:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_ETH_Init+0x8c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_ETH_Init+0x8c>)
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ETH_Init+0x8c>)
 8001088:	22e1      	movs	r2, #225	; 0xe1
 800108a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ETH_Init+0x8c>)
 800108e:	2200      	movs	r2, #0
 8001090:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ETH_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_ETH_Init+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_ETH_Init+0x84>)
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <MX_ETH_Init+0x8c>)
 80010a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ETH_Init+0x84>)
 80010a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010aa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_ETH_Init+0x84>)
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <MX_ETH_Init+0x90>)
 80010b0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_ETH_Init+0x84>)
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_ETH_Init+0x94>)
 80010b6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_ETH_Init+0x84>)
 80010ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010be:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_ETH_Init+0x84>)
 80010c2:	f008 fd79 	bl	8009bb8 <HAL_ETH_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 f92e 	bl	800132c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010d0:	2238      	movs	r2, #56	; 0x38
 80010d2:	2100      	movs	r1, #0
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_ETH_Init+0x98>)
 80010d6:	f00e fa63 	bl	800f5a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_ETH_Init+0x98>)
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_ETH_Init+0x98>)
 80010e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_ETH_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000390 	.word	0x20000390
 80010f8:	40028000 	.word	0x40028000
 80010fc:	20000948 	.word	0x20000948
 8001100:	2000029c 	.word	0x2000029c
 8001104:	200001fc 	.word	0x200001fc
 8001108:	20000358 	.word	0x20000358

0800110c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001116:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111a:	2206      	movs	r2, #6
 800111c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001120:	2202      	movs	r2, #2
 8001122:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112c:	2202      	movs	r2, #2
 800112e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001132:	2201      	movs	r2, #1
 8001134:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001144:	2201      	movs	r2, #1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001150:	f00a fa05 	bl	800b55e <HAL_PCD_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 f8e7 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000440 	.word	0x20000440

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a65      	ldr	r2, [pc, #404]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <MX_GPIO_Init+0x1b0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a5f      	ldr	r2, [pc, #380]	; (8001318 <MX_GPIO_Init+0x1b0>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a59      	ldr	r2, [pc, #356]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a53      	ldr	r2, [pc, #332]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4b48      	ldr	r3, [pc, #288]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a47      	ldr	r2, [pc, #284]	; (8001318 <MX_GPIO_Init+0x1b0>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <MX_GPIO_Init+0x1b0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a3b      	ldr	r2, [pc, #236]	; (8001318 <MX_GPIO_Init+0x1b0>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <MX_GPIO_Init+0x1b0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f244 0101 	movw	r1, #16385	; 0x4001
 8001244:	4835      	ldr	r0, [pc, #212]	; (800131c <MX_GPIO_Init+0x1b4>)
 8001246:	f009 faff 	bl	800a848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4834      	ldr	r0, [pc, #208]	; (8001320 <MX_GPIO_Init+0x1b8>)
 8001250:	f009 fafa 	bl	800a848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF5 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_14;
 8001254:	f244 0328 	movw	r3, #16424	; 0x4028
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	482e      	ldr	r0, [pc, #184]	; (8001324 <MX_GPIO_Init+0x1bc>)
 800126c:	f009 f81c 	bl	800a2a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin;
 8001270:	f244 0301 	movw	r3, #16385	; 0x4001
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4824      	ldr	r0, [pc, #144]	; (800131c <MX_GPIO_Init+0x1b4>)
 800128a:	f009 f80d 	bl	800a2a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800128e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001294:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x1c0>)
 80012a6:	f008 ffff 	bl	800a2a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <MX_GPIO_Init+0x1b8>)
 80012c2:	f008 fff1 	bl	800a2a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_GPIO_Init+0x1b8>)
 80012da:	f008 ffe5 	bl	800a2a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2009      	movs	r0, #9
 80012e4:	f008 fc31 	bl	8009b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012e8:	2009      	movs	r0, #9
 80012ea:	f008 fc4a 	bl	8009b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2017      	movs	r0, #23
 80012f4:	f008 fc29 	bl	8009b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f8:	2017      	movs	r0, #23
 80012fa:	f008 fc42 	bl	8009b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2028      	movs	r0, #40	; 0x28
 8001304:	f008 fc21 	bl	8009b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001308:	2028      	movs	r0, #40	; 0x28
 800130a:	f008 fc3a 	bl	8009b82 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3738      	adds	r7, #56	; 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021400 	.word	0x40021400
 8001328:	40021000 	.word	0x40021000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	; 0x38
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_ETH_MspInit+0x158>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	f040 8096 	bne.w	80014d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a4c      	ldr	r2, [pc, #304]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a46      	ldr	r2, [pc, #280]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a40      	ldr	r2, [pc, #256]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a34      	ldr	r2, [pc, #208]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 800143a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_ETH_MspInit+0x15c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800144c:	2332      	movs	r3, #50	; 0x32
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145c:	230b      	movs	r3, #11
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <HAL_ETH_MspInit+0x160>)
 8001468:	f008 ff1e 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800146c:	2386      	movs	r3, #134	; 0x86
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <HAL_ETH_MspInit+0x164>)
 8001488:	f008 ff0e 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149e:	230b      	movs	r3, #11
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	480f      	ldr	r0, [pc, #60]	; (80014e8 <HAL_ETH_MspInit+0x168>)
 80014aa:	f008 fefd 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c0:	230b      	movs	r3, #11
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <HAL_ETH_MspInit+0x16c>)
 80014cc:	f008 feec 	bl	800a2a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40028000 	.word	0x40028000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40021800 	.word	0x40021800

080014f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ac      	sub	sp, #176	; 0xb0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	2284      	movs	r2, #132	; 0x84
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f00e f845 	bl	800f5a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151e:	d159      	bne.n	80015d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001524:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fe37 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800153c:	f7ff fef6 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_PCD_MspInit+0xec>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_PCD_MspInit+0xec>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_PCD_MspInit+0xec>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001558:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800155c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001572:	230a      	movs	r3, #10
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157c:	4619      	mov	r1, r3
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <HAL_PCD_MspInit+0xf0>)
 8001580:	f008 fe92 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800159c:	4619      	mov	r1, r3
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <HAL_PCD_MspInit+0xf0>)
 80015a0:	f008 fe82 	bl	800a2a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ae:	6353      	str	r3, [r2, #52]	; 0x34
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6453      	str	r3, [r2, #68]	; 0x44
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_PCD_MspInit+0xec>)
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	37b0      	adds	r7, #176	; 0xb0
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f008 f96c 	bl	800990c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800163c:	2008      	movs	r0, #8
 800163e:	f009 f91d 	bl	800a87c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}

08001646 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800164a:	2020      	movs	r0, #32
 800164c:	f009 f916 	bl	800a87c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001654:	f009 f912 	bl	800a87c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001660:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001664:	f009 f90a 	bl	800a87c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <EXTI15_10_IRQHandler+0x20>)
 800166a:	f008 fdf9 	bl	800a260 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800166e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001672:	f009 f903 	bl	800a87c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000184 	.word	0x20000184

08001680 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <BSP_I2C1_Init+0x70>)
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <BSP_I2C1_Init+0x74>)
 800168e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <BSP_I2C1_Init+0x78>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4918      	ldr	r1, [pc, #96]	; (80016f8 <BSP_I2C1_Init+0x78>)
 8001698:	600a      	str	r2, [r1, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d122      	bne.n	80016e4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <BSP_I2C1_Init+0x70>)
 80016a0:	f009 fc12 	bl	800aec8 <HAL_I2C_GetState>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11c      	bne.n	80016e4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80016aa:	4811      	ldr	r0, [pc, #68]	; (80016f0 <BSP_I2C1_Init+0x70>)
 80016ac:	f000 f8fe 	bl	80018ac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <BSP_I2C1_Init+0x70>)
 80016b8:	f000 f8b4 	bl	8001824 <MX_I2C1_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016c2:	f06f 0307 	mvn.w	r3, #7
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e00c      	b.n	80016e4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <BSP_I2C1_Init+0x70>)
 80016ce:	f009 feaf 	bl	800b430 <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016d8:	f06f 0307 	mvn.w	r3, #7
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	e001      	b.n	80016e4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000950 	.word	0x20000950
 80016f4:	40005400 	.word	0x40005400
 80016f8:	200009a4 	.word	0x200009a4

080016fc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <BSP_I2C1_DeInit+0x48>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d014      	beq.n	8001738 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <BSP_I2C1_DeInit+0x48>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3b01      	subs	r3, #1
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <BSP_I2C1_DeInit+0x48>)
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <BSP_I2C1_DeInit+0x48>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10b      	bne.n	8001738 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <BSP_I2C1_DeInit+0x4c>)
 8001722:	f000 f925 	bl	8001970 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <BSP_I2C1_DeInit+0x4c>)
 8001728:	f009 f95c 	bl	800a9e4 <HAL_I2C_DeInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001732:	f06f 0307 	mvn.w	r3, #7
 8001736:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200009a4 	.word	0x200009a4
 8001748:	20000950 	.word	0x20000950

0800174c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af04      	add	r7, sp, #16
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	460b      	mov	r3, r1
 800175c:	81bb      	strh	r3, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001766:	89ba      	ldrh	r2, [r7, #12]
 8001768:	89f9      	ldrh	r1, [r7, #14]
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <BSP_I2C1_WriteReg+0x60>)
 800177c:	f009 f976 	bl	800aa6c <HAL_I2C_Mem_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <BSP_I2C1_WriteReg+0x60>)
 8001788:	f009 fbac 	bl	800aee4 <HAL_I2C_GetError>
 800178c:	4603      	mov	r3, r0
 800178e:	2b04      	cmp	r3, #4
 8001790:	d103      	bne.n	800179a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001792:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e002      	b.n	80017a0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800179a:	f06f 0303 	mvn.w	r3, #3
 800179e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80017a0:	697b      	ldr	r3, [r7, #20]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000950 	.word	0x20000950

080017b0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	81fb      	strh	r3, [r7, #14]
 80017be:	460b      	mov	r3, r1
 80017c0:	81bb      	strh	r3, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80017ca:	89ba      	ldrh	r2, [r7, #12]
 80017cc:	89f9      	ldrh	r1, [r7, #14]
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <BSP_I2C1_ReadReg+0x60>)
 80017e0:	f009 fa58 	bl	800ac94 <HAL_I2C_Mem_Read>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <BSP_I2C1_ReadReg+0x60>)
 80017ec:	f009 fb7a 	bl	800aee4 <HAL_I2C_GetError>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d103      	bne.n	80017fe <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80017f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e002      	b.n	8001804 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017fe:	f06f 0303 	mvn.w	r3, #3
 8001802:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001804:	697b      	ldr	r3, [r7, #20]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000950 	.word	0x20000950

08001814 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001818:	f008 f88c 	bl	8009934 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C1_Init+0x80>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00301739;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C1_Init+0x84>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f009 f82c 	bl	800a8c4 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f009 fdd9 	bl	800b430 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f009 fe1b 	bl	800b4c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40005400 	.word	0x40005400
 80018a8:	00301739 	.word	0x00301739

080018ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0aa      	sub	sp, #168	; 0xa8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2284      	movs	r2, #132	; 0x84
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00d fe6f 	bl	800f5a0 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a fc67 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <I2C1_MspInit+0xbc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <I2C1_MspInit+0xbc>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <I2C1_MspInit+0xbc>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001908:	2304      	movs	r3, #4
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800190e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001912:	4619      	mov	r1, r3
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <I2C1_MspInit+0xc0>)
 8001916:	f008 fcc7 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001934:	2304      	movs	r3, #4
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800193a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800193e:	4619      	mov	r1, r3
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <I2C1_MspInit+0xc0>)
 8001942:	f008 fcb1 	bl	800a2a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <I2C1_MspInit+0xbc>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <I2C1_MspInit+0xbc>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <I2C1_MspInit+0xbc>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	37a8      	adds	r7, #168	; 0xa8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400

08001970 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <I2C1_MspDeInit+0x30>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <I2C1_MspDeInit+0x30>)
 800197e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001988:	4806      	ldr	r0, [pc, #24]	; (80019a4 <I2C1_MspDeInit+0x34>)
 800198a:	f008 fe39 	bl	800a600 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <I2C1_MspDeInit+0x34>)
 8001994:	f008 fe34 	bl	800a600 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400

080019a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e00a      	b.n	80019d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ba:	f3af 8000 	nop.w
 80019be:	4601      	mov	r1, r0
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf0      	blt.n	80019ba <_read+0x12>
	}

return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e009      	b.n	8001a08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	60ba      	str	r2, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f007 fec9 	bl	8009794 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf1      	blt.n	80019f4 <_write+0x12>
	}
	return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_close>:

int _close(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
	return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a42:	605a      	str	r2, [r3, #4]
	return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_isatty>:

int _isatty(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f00d fd4a 	bl	800f54c <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20050000 	.word	0x20050000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	200009a8 	.word	0x200009a8
 8001aec:	20000d80 	.word	0x20000d80

08001af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ffd7 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f00d fd09 	bl	800f558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fa19 	bl	8000f7c <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001b58:	08010da8 	.word	0x08010da8
  ldr r2, =_sbss
 8001b5c:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8001b60:	20000d80 	.word	0x20000d80

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d103      	bne.n	8001b80 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e030      	b.n	8001be2 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	7b1a      	ldrb	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HTS221_RegisterBusIO+0x84>)
 8001bbc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HTS221_RegisterBusIO+0x88>)
 8001bc2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4798      	blx	r3
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	e002      	b.n	8001be2 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001be0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0800221f 	.word	0x0800221f
 8001bf0:	08002281 	.word	0x08002281

08001bf4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d108      	bne.n	8001c18 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 faa4 	bl	8002154 <HTS221_Initialize>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e004      	b.n	8001c22 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d111      	bne.n	8001c60 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f878 	bl	8001d32 <HTS221_HUM_Disable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	e00d      	b.n	8001c6a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f95f 	bl	8001f12 <HTS221_TEMP_Disable>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e004      	b.n	8001c6a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	331c      	adds	r3, #28
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fc28 	bl	80024d8 <hts221_device_id_get>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e000      	b.n	8001c96 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HTS221_GetCapabilities+0x44>)
 8001cc6:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HTS221_GetCapabilities+0x44>)
 8001ccc:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	41480000 	.word	0x41480000

08001ce8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e015      	b.n	8001d2a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	331c      	adds	r3, #28
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fbf3 	bl	80024fa <hts221_power_on_set>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e004      	b.n	8001d2a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e015      	b.n	8001d74 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	331c      	adds	r3, #28
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fbce 	bl	80024fa <hts221_power_on_set>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	e004      	b.n	8001d74 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f96f 	bl	800206c <HTS221_GetOutputDataRate>
 8001d8e:	4603      	mov	r3, r0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001da4:	ed97 0a00 	vldr	s0, [r7]
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f9a3 	bl	80020f4 <HTS221_SetOutputDataRate>
 8001dae:	4603      	mov	r3, r0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	331c      	adds	r3, #28
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fc58 	bl	8002682 <hts221_hum_adc_point_0_get>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	e06b      	b.n	8001eb6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f103 021c 	add.w	r2, r3, #28
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	3304      	adds	r3, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f000 fbaa 	bl	8002546 <hts221_hum_rh_point_0_get>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	e05b      	b.n	8001eb6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f103 021c 	add.w	r2, r3, #28
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	3308      	adds	r3, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f000 fc5c 	bl	80026ca <hts221_hum_adc_point_1_get>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e04b      	b.n	8001eb6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 021c 	add.w	r2, r3, #28
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	330c      	adds	r3, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f000 fba8 	bl	8002582 <hts221_hum_rh_point_1_get>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	e03b      	b.n	8001eb6 <HTS221_HUM_GetHumidity+0xfe>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	331c      	adds	r3, #28
 8001e46:	f107 021c 	add.w	r2, r7, #28
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fafd 	bl	800244c <hts221_humidity_raw_get>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	e02b      	b.n	8001eb6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001e5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f99a 	bl	80021ac <Linear_Interpolation>
 8001e78:	eef0 7a40 	vmov.f32	s15, s0
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	d503      	bpl.n	8001e9a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ec0 <HTS221_HUM_GetHumidity+0x108>
 8001ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	dd02      	ble.n	8001eb4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HTS221_HUM_GetHumidity+0x10c>)
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	42c80000 	.word	0x42c80000
 8001ec4:	42c80000 	.word	0x42c80000

08001ec8 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e015      	b.n	8001f0a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	331c      	adds	r3, #28
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb03 	bl	80024fa <hts221_power_on_set>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e004      	b.n	8001f0a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e015      	b.n	8001f54 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	331c      	adds	r3, #28
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fade 	bl	80024fa <hts221_power_on_set>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	e004      	b.n	8001f54 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f87f 	bl	800206c <HTS221_GetOutputDataRate>
 8001f6e:	4603      	mov	r3, r0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001f84:	ed97 0a00 	vldr	s0, [r7]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8b3 	bl	80020f4 <HTS221_SetOutputDataRate>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	331c      	adds	r3, #28
 8001fa6:	f107 020c 	add.w	r2, r7, #12
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fbb0 	bl	8002712 <hts221_temp_adc_point_0_get>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	e052      	b.n	8002064 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f103 021c 	add.w	r2, r3, #28
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	3304      	adds	r3, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f000 faf6 	bl	80025be <hts221_temp_deg_point_0_get>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fdc:	e042      	b.n	8002064 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 021c 	add.w	r2, r3, #28
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	3308      	adds	r3, #8
 8001fea:	4619      	mov	r1, r3
 8001fec:	4610      	mov	r0, r2
 8001fee:	f000 fbb4 	bl	800275a <hts221_temp_adc_point_1_get>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	e032      	b.n	8002064 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f103 021c 	add.w	r2, r3, #28
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	330c      	adds	r3, #12
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f000 fb07 	bl	8002620 <hts221_temp_deg_point_1_get>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e022      	b.n	8002064 <HTS221_TEMP_GetTemperature+0xcc>
 800201e:	2300      	movs	r3, #0
 8002020:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	331c      	adds	r3, #28
 8002026:	f107 021c 	add.w	r2, r7, #28
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fa30 	bl	8002492 <hts221_temperature_raw_get>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e012      	b.n	8002064 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800203e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f8aa 	bl	80021ac <Linear_Interpolation>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	331c      	adds	r3, #28
 800207e:	f107 020b 	add.w	r2, r7, #11
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f983 	bl	8002390 <hts221_data_rate_get>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e025      	b.n	80020e2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d81d      	bhi.n	80020d8 <HTS221_GetOutputDataRate+0x6c>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <HTS221_GetOutputDataRate+0x38>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020bf 	.word	0x080020bf
 80020ac:	080020c9 	.word	0x080020c9
 80020b0:	080020d1 	.word	0x080020d1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
      break;
 80020bc:	e010      	b.n	80020e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020c4:	601a      	str	r2, [r3, #0]
      break;
 80020c6:	e00b      	b.n	80020e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HTS221_GetOutputDataRate+0x80>)
 80020cc:	601a      	str	r2, [r3, #0]
      break;
 80020ce:	e007      	b.n	80020e0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HTS221_GetOutputDataRate+0x84>)
 80020d4:	601a      	str	r2, [r3, #0]
      break;
 80020d6:	e003      	b.n	80020e0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	60fb      	str	r3, [r7, #12]
      break;
 80020de:	bf00      	nop
  }

  return ret;
 80020e0:	68fb      	ldr	r3, [r7, #12]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40e00000 	.word	0x40e00000
 80020f0:	41480000 	.word	0x41480000

080020f4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002100:	edd7 7a00 	vldr	s15, [r7]
 8002104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	d801      	bhi.n	8002116 <HTS221_SetOutputDataRate+0x22>
 8002112:	2301      	movs	r3, #1
 8002114:	e00b      	b.n	800212e <HTS221_SetOutputDataRate+0x3a>
 8002116:	edd7 7a00 	vldr	s15, [r7]
 800211a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800211e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d801      	bhi.n	800212c <HTS221_SetOutputDataRate+0x38>
 8002128:	2302      	movs	r3, #2
 800212a:	e000      	b.n	800212e <HTS221_SetOutputDataRate+0x3a>
 800212c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800212e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	331c      	adds	r3, #28
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f902 	bl	8002342 <hts221_data_rate_set>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
 8002148:	e000      	b.n	800214c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	331c      	adds	r3, #28
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f9c9 	bl	80024fa <hts221_power_on_set>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e017      	b.n	80021a4 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	331c      	adds	r3, #28
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f940 	bl	8002400 <hts221_block_data_update_set>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e00b      	b.n	80021a4 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800218c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffaf 	bl	80020f4 <HTS221_SetOutputDataRate>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	e000      	b.n	80021a4 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c8:	edd7 7a00 	vldr	s15, [r7]
 80021cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	ed93 6a00 	vldr	s12, [r3]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002208:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800220c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800221e:	b590      	push	{r4, r7, lr}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	461a      	mov	r2, r3
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
 800222e:	4613      	mov	r3, r2
 8002230:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10e      	bne.n	800225c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	695c      	ldr	r4, [r3, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	7b1b      	ldrb	r3, [r3, #12]
 8002246:	b298      	uxth	r0, r3
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800224e:	b2db      	uxtb	r3, r3
 8002250:	b299      	uxth	r1, r3
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	47a0      	blx	r4
 8002258:	4603      	mov	r3, r0
 800225a:	e00d      	b.n	8002278 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	695c      	ldr	r4, [r3, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	7b1b      	ldrb	r3, [r3, #12]
 8002264:	b298      	uxth	r0, r3
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	b2db      	uxtb	r3, r3
 800226e:	b299      	uxth	r1, r3
 8002270:	893b      	ldrh	r3, [r7, #8]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	47a0      	blx	r4
 8002276:	4603      	mov	r3, r0
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd90      	pop	{r4, r7, pc}

08002280 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	72fb      	strb	r3, [r7, #11]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10e      	bne.n	80022be <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	691c      	ldr	r4, [r3, #16]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	7b1b      	ldrb	r3, [r3, #12]
 80022a8:	b298      	uxth	r0, r3
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	b299      	uxth	r1, r3
 80022b4:	893b      	ldrh	r3, [r7, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	47a0      	blx	r4
 80022ba:	4603      	mov	r3, r0
 80022bc:	e00d      	b.n	80022da <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	691c      	ldr	r4, [r3, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	7b1b      	ldrb	r3, [r3, #12]
 80022c6:	b298      	uxth	r0, r3
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b299      	uxth	r1, r3
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	47a0      	blx	r4
 80022d8:	4603      	mov	r3, r0
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}

080022e2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	460b      	mov	r3, r1
 80022f0:	72fb      	strb	r3, [r7, #11]
 80022f2:	4613      	mov	r3, r2
 80022f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685c      	ldr	r4, [r3, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6898      	ldr	r0, [r3, #8]
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	7af9      	ldrb	r1, [r7, #11]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	47a0      	blx	r4
 8002306:	6178      	str	r0, [r7, #20]

  return ret;
 8002308:	697b      	ldr	r3, [r7, #20]
}
 800230a:	4618      	mov	r0, r3
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}

08002312 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002312:	b590      	push	{r4, r7, lr}
 8002314:	b087      	sub	sp, #28
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	461a      	mov	r2, r3
 800231e:	460b      	mov	r3, r1
 8002320:	72fb      	strb	r3, [r7, #11]
 8002322:	4613      	mov	r3, r2
 8002324:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681c      	ldr	r4, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6898      	ldr	r0, [r3, #8]
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	7af9      	ldrb	r1, [r7, #11]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	47a0      	blx	r4
 8002336:	6178      	str	r0, [r7, #20]

  return ret;
 8002338:	697b      	ldr	r3, [r7, #20]
}
 800233a:	4618      	mov	r0, r3
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}

08002342 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800234e:	f107 0208 	add.w	r2, r7, #8
 8002352:	2301      	movs	r3, #1
 8002354:	2120      	movs	r1, #32
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffc3 	bl	80022e2 <hts221_read_reg>
 800235c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10f      	bne.n	8002384 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	b2da      	uxtb	r2, r3
 800236c:	7a3b      	ldrb	r3, [r7, #8]
 800236e:	f362 0301 	bfi	r3, r2, #0, #2
 8002372:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002374:	f107 0208 	add.w	r2, r7, #8
 8002378:	2301      	movs	r3, #1
 800237a:	2120      	movs	r1, #32
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffc8 	bl	8002312 <hts221_write_reg>
 8002382:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800239a:	f107 0208 	add.w	r2, r7, #8
 800239e:	2301      	movs	r3, #1
 80023a0:	2120      	movs	r1, #32
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff9d 	bl	80022e2 <hts221_read_reg>
 80023a8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80023aa:	7a3b      	ldrb	r3, [r7, #8]
 80023ac:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d81a      	bhi.n	80023ec <hts221_data_rate_get+0x5c>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <hts221_data_rate_get+0x2c>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023d5 	.word	0x080023d5
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023e5 	.word	0x080023e5
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
      break;
 80023d2:	e00f      	b.n	80023f4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
      break;
 80023da:	e00b      	b.n	80023f4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
      break;
 80023e2:	e007      	b.n	80023f4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
      break;
 80023ea:	e003      	b.n	80023f4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
      break;
 80023f2:	bf00      	nop
  }

  return ret;
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800240c:	f107 0208 	add.w	r2, r7, #8
 8002410:	2301      	movs	r3, #1
 8002412:	2120      	movs	r1, #32
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff64 	bl	80022e2 <hts221_read_reg>
 800241a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	7a3b      	ldrb	r3, [r7, #8]
 800242c:	f362 0382 	bfi	r3, r2, #2, #1
 8002430:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002432:	f107 0208 	add.w	r2, r7, #8
 8002436:	2301      	movs	r3, #1
 8002438:	2120      	movs	r1, #32
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff69 	bl	8002312 <hts221_write_reg>
 8002440:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002456:	f107 0208 	add.w	r2, r7, #8
 800245a:	2302      	movs	r3, #2
 800245c:	2128      	movs	r1, #40	; 0x28
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff3f 	bl	80022e2 <hts221_read_reg>
 8002464:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002466:	7a7b      	ldrb	r3, [r7, #9]
 8002468:	b21a      	sxth	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002474:	b29b      	uxth	r3, r3
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b29a      	uxth	r2, r3
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	b21a      	sxth	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	801a      	strh	r2, [r3, #0]

  return ret;
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800249c:	f107 0208 	add.w	r2, r7, #8
 80024a0:	2302      	movs	r3, #2
 80024a2:	212a      	movs	r1, #42	; 0x2a
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff1c 	bl	80022e2 <hts221_read_reg>
 80024aa:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b29a      	uxth	r2, r3
 80024c0:	7a3b      	ldrb	r3, [r7, #8]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	801a      	strh	r2, [r3, #0]

  return ret;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80024e2:	2301      	movs	r3, #1
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	210f      	movs	r1, #15
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fefa 	bl	80022e2 <hts221_read_reg>
 80024ee:	60f8      	str	r0, [r7, #12]

  return ret;
 80024f0:	68fb      	ldr	r3, [r7, #12]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002506:	f107 0208 	add.w	r2, r7, #8
 800250a:	2301      	movs	r3, #1
 800250c:	2120      	movs	r1, #32
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fee7 	bl	80022e2 <hts221_read_reg>
 8002514:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10f      	bne.n	800253c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	7a3b      	ldrb	r3, [r7, #8]
 8002526:	f362 13c7 	bfi	r3, r2, #7, #1
 800252a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800252c:	f107 0208 	add.w	r2, r7, #8
 8002530:	2301      	movs	r3, #1
 8002532:	2120      	movs	r1, #32
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff feec 	bl	8002312 <hts221_write_reg>
 800253a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002550:	f107 020b 	add.w	r2, r7, #11
 8002554:	2301      	movs	r3, #1
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fec2 	bl	80022e2 <hts221_read_reg>
 800255e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800256e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800258c:	f107 020b 	add.w	r2, r7, #11
 8002590:	2301      	movs	r3, #1
 8002592:	2131      	movs	r1, #49	; 0x31
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fea4 	bl	80022e2 <hts221_read_reg>
 800259a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800259c:	7afb      	ldrb	r3, [r7, #11]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80025c8:	f107 020f 	add.w	r2, r7, #15
 80025cc:	2301      	movs	r3, #1
 80025ce:	2132      	movs	r1, #50	; 0x32
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fe86 	bl	80022e2 <hts221_read_reg>
 80025d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11b      	bne.n	8002616 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80025de:	f107 0210 	add.w	r2, r7, #16
 80025e2:	2301      	movs	r3, #1
 80025e4:	2135      	movs	r1, #53	; 0x35
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fe7b 	bl	80022e2 <hts221_read_reg>
 80025ec:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80025ee:	7c3b      	ldrb	r3, [r7, #16]
 80025f0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	4413      	add	r3, r2
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002608:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800260c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002616:	697b      	ldr	r3, [r7, #20]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800262a:	f107 020f 	add.w	r2, r7, #15
 800262e:	2301      	movs	r3, #1
 8002630:	2133      	movs	r1, #51	; 0x33
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fe55 	bl	80022e2 <hts221_read_reg>
 8002638:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11b      	bne.n	8002678 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002640:	f107 0210 	add.w	r2, r7, #16
 8002644:	2301      	movs	r3, #1
 8002646:	2135      	movs	r1, #53	; 0x35
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fe4a 	bl	80022e2 <hts221_read_reg>
 800264e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002650:	7c3b      	ldrb	r3, [r7, #16]
 8002652:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002656:	b2db      	uxtb	r3, r3
 8002658:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	4413      	add	r3, r2
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002678:	697b      	ldr	r3, [r7, #20]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800268c:	f107 0208 	add.w	r2, r7, #8
 8002690:	2302      	movs	r3, #2
 8002692:	2136      	movs	r1, #54	; 0x36
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fe24 	bl	80022e2 <hts221_read_reg>
 800269a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800269c:	7a7b      	ldrb	r3, [r7, #9]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	7a3b      	ldrb	r3, [r7, #8]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80026ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80026c0:	68fb      	ldr	r3, [r7, #12]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80026d4:	f107 0208 	add.w	r2, r7, #8
 80026d8:	2302      	movs	r3, #2
 80026da:	213a      	movs	r1, #58	; 0x3a
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fe00 	bl	80022e2 <hts221_read_reg>
 80026e2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80026e4:	7a7b      	ldrb	r3, [r7, #9]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	7a3b      	ldrb	r3, [r7, #8]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80026f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	2302      	movs	r3, #2
 8002722:	213c      	movs	r1, #60	; 0x3c
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fddc 	bl	80022e2 <hts221_read_reg>
 800272a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800272c:	7a7b      	ldrb	r3, [r7, #9]
 800272e:	b29b      	uxth	r3, r3
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	b29a      	uxth	r2, r3
 8002734:	7a3b      	ldrb	r3, [r7, #8]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800273e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002764:	f107 0208 	add.w	r2, r7, #8
 8002768:	2302      	movs	r3, #2
 800276a:	213e      	movs	r1, #62	; 0x3e
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fdb8 	bl	80022e2 <hts221_read_reg>
 8002772:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002774:	7a7b      	ldrb	r3, [r7, #9]
 8002776:	b29b      	uxth	r3, r3
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	7a3b      	ldrb	r3, [r7, #8]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002786:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e04d      	b.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	7b1a      	ldrb	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <LIS2DW12_RegisterBusIO+0xc4>)
 80027fc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <LIS2DW12_RegisterBusIO+0xc8>)
 8002802:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e020      	b.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4798      	blx	r3
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e016      	b.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d112      	bne.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002840:	2305      	movs	r3, #5
 8002842:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	461a      	mov	r2, r3
 8002848:	2121      	movs	r1, #33	; 0x21
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fd87 	bl	800335e <LIS2DW12_Write_Reg>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	080036f1 	.word	0x080036f1
 800286c:	08003727 	.word	0x08003727

08002870 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	331c      	adds	r3, #28
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fa94 	bl	8003dac <lis2dw12_auto_increment_set>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e04b      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	331c      	adds	r3, #28
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f001 f9a8 	bl	8003bec <lis2dw12_block_data_update_set>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e03f      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	331c      	adds	r3, #28
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 faa2 	bl	8003df8 <lis2dw12_fifo_mode_set>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e033      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	331c      	adds	r3, #28
 80028c4:	2104      	movs	r1, #4
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 ff78 	bl	80037bc <lis2dw12_power_mode_set>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e027      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <LIS2DW12_Init+0xc0>)
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	331c      	adds	r3, #28
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 f869 	bl	80039cc <lis2dw12_data_rate_set>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e010      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	331c      	adds	r3, #28
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f993 	bl	8003c38 <lis2dw12_full_scale_set>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	e004      	b.n	8002928 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	42c80000 	.word	0x42c80000

08002934 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f888 	bl	8002a52 <LIS2DW12_ACC_Disable>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	e010      	b.n	8002970 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	331c      	adds	r3, #28
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f001 f9fe 	bl	8003d8a <lis2dw12_device_id_get>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	e000      	b.n	800299c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <LIS2DW12_GetCapabilities+0x58>)
 80029e4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	44c80000 	.word	0x44c80000

08002a00 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e019      	b.n	8002a4a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a28:	461a      	mov	r2, r3
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fcb0 	bl	8003394 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e004      	b.n	8002a4a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e010      	b.n	8002a8a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	331c      	adds	r3, #28
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ffac 	bl	80039cc <lis2dw12_data_rate_set>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e004      	b.n	8002a8a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	331c      	adds	r3, #28
 8002aa6:	f107 020b 	add.w	r2, r7, #11
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f8e9 	bl	8003c84 <lis2dw12_full_scale_get>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	e0a0      	b.n	8002c00 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	331c      	adds	r3, #28
 8002ac2:	f107 020a 	add.w	r2, r7, #10
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fec5 	bl	8003858 <lis2dw12_power_mode_get>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e092      	b.n	8002c00 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8002ada:	7abb      	ldrb	r3, [r7, #10]
 8002adc:	2b1b      	cmp	r3, #27
 8002ade:	f200 8087 	bhi.w	8002bf0 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b59 	.word	0x08002b59
 8002aec:	08002ba5 	.word	0x08002ba5
 8002af0:	08002ba5 	.word	0x08002ba5
 8002af4:	08002ba5 	.word	0x08002ba5
 8002af8:	08002ba5 	.word	0x08002ba5
 8002afc:	08002bf1 	.word	0x08002bf1
 8002b00:	08002bf1 	.word	0x08002bf1
 8002b04:	08002bf1 	.word	0x08002bf1
 8002b08:	08002b59 	.word	0x08002b59
 8002b0c:	08002ba5 	.word	0x08002ba5
 8002b10:	08002ba5 	.word	0x08002ba5
 8002b14:	08002ba5 	.word	0x08002ba5
 8002b18:	08002bf1 	.word	0x08002bf1
 8002b1c:	08002bf1 	.word	0x08002bf1
 8002b20:	08002bf1 	.word	0x08002bf1
 8002b24:	08002bf1 	.word	0x08002bf1
 8002b28:	08002b59 	.word	0x08002b59
 8002b2c:	08002ba5 	.word	0x08002ba5
 8002b30:	08002ba5 	.word	0x08002ba5
 8002b34:	08002ba5 	.word	0x08002ba5
 8002b38:	08002ba5 	.word	0x08002ba5
 8002b3c:	08002bf1 	.word	0x08002bf1
 8002b40:	08002bf1 	.word	0x08002bf1
 8002b44:	08002bf1 	.word	0x08002bf1
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002ba5 	.word	0x08002ba5
 8002b50:	08002ba5 	.word	0x08002ba5
 8002b54:	08002ba5 	.word	0x08002ba5
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d81a      	bhi.n	8002b94 <LIS2DW12_ACC_GetSensitivity+0x100>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b7d 	.word	0x08002b7d
 8002b6c:	08002b85 	.word	0x08002b85
 8002b70:	08002b8d 	.word	0x08002b8d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002b78:	601a      	str	r2, [r3, #0]
          break;
 8002b7a:	e012      	b.n	8002ba2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002b80:	601a      	str	r2, [r3, #0]
          break;
 8002b82:	e00e      	b.n	8002ba2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002b88:	601a      	str	r2, [r3, #0]
          break;
 8002b8a:	e00a      	b.n	8002ba2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002b90:	601a      	str	r2, [r3, #0]
          break;
 8002b92:	e006      	b.n	8002ba2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002b98:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	60fb      	str	r3, [r7, #12]
          break;
 8002ba0:	bf00      	nop
      }
      break;
 8002ba2:	e02c      	b.n	8002bfe <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d81a      	bhi.n	8002be0 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002bd1 	.word	0x08002bd1
 8002bbc:	08002bd9 	.word	0x08002bd9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002bc4:	601a      	str	r2, [r3, #0]
          break;
 8002bc6:	e012      	b.n	8002bee <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002bcc:	601a      	str	r2, [r3, #0]
          break;
 8002bce:	e00e      	b.n	8002bee <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002bd4:	601a      	str	r2, [r3, #0]
          break;
 8002bd6:	e00a      	b.n	8002bee <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002bdc:	601a      	str	r2, [r3, #0]
          break;
 8002bde:	e006      	b.n	8002bee <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002be4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	60fb      	str	r3, [r7, #12]
          break;
 8002bec:	bf00      	nop
      }
      break;
 8002bee:	e006      	b.n	8002bfe <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002bf4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	60fb      	str	r3, [r7, #12]
      break;
 8002bfc:	bf00      	nop
  }

  return ret;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	3f79db23 	.word	0x3f79db23
 8002c0c:	3ff9db23 	.word	0x3ff9db23
 8002c10:	4079db23 	.word	0x4079db23
 8002c14:	40f9db23 	.word	0x40f9db23
 8002c18:	bf800000 	.word	0xbf800000
 8002c1c:	3e79db23 	.word	0x3e79db23
 8002c20:	3ef9db23 	.word	0x3ef9db23

08002c24 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	331c      	adds	r3, #28
 8002c36:	f107 020b 	add.w	r2, r7, #11
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 ff0b 	bl	8003a58 <lis2dw12_data_rate_get>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	e1d4      	b.n	8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	331c      	adds	r3, #28
 8002c52:	f107 020a 	add.w	r2, r7, #10
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fdfd 	bl	8003858 <lis2dw12_power_mode_get>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e1c6      	b.n	8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	2b32      	cmp	r3, #50	; 0x32
 8002c6e:	f200 81bb 	bhi.w	8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002d45 	.word	0x08002d45
 8002c7c:	08002d4f 	.word	0x08002d4f
 8002c80:	08002ded 	.word	0x08002ded
 8002c84:	08002df5 	.word	0x08002df5
 8002c88:	08002dfd 	.word	0x08002dfd
 8002c8c:	08002e05 	.word	0x08002e05
 8002c90:	08002e0d 	.word	0x08002e0d
 8002c94:	08002e15 	.word	0x08002e15
 8002c98:	08002eb1 	.word	0x08002eb1
 8002c9c:	08002f4d 	.word	0x08002f4d
 8002ca0:	08002fe9 	.word	0x08002fe9
 8002ca4:	08002fe9 	.word	0x08002fe9
 8002ca8:	08002fe9 	.word	0x08002fe9
 8002cac:	08002fe9 	.word	0x08002fe9
 8002cb0:	08002fe9 	.word	0x08002fe9
 8002cb4:	08002fe9 	.word	0x08002fe9
 8002cb8:	08002fe9 	.word	0x08002fe9
 8002cbc:	08002fe9 	.word	0x08002fe9
 8002cc0:	08002d45 	.word	0x08002d45
 8002cc4:	08002fe9 	.word	0x08002fe9
 8002cc8:	08002fe9 	.word	0x08002fe9
 8002ccc:	08002fe9 	.word	0x08002fe9
 8002cd0:	08002fe9 	.word	0x08002fe9
 8002cd4:	08002fe9 	.word	0x08002fe9
 8002cd8:	08002fe9 	.word	0x08002fe9
 8002cdc:	08002fe9 	.word	0x08002fe9
 8002ce0:	08002fe9 	.word	0x08002fe9
 8002ce4:	08002fe9 	.word	0x08002fe9
 8002ce8:	08002fe9 	.word	0x08002fe9
 8002cec:	08002fe9 	.word	0x08002fe9
 8002cf0:	08002fe9 	.word	0x08002fe9
 8002cf4:	08002fe9 	.word	0x08002fe9
 8002cf8:	08002fe9 	.word	0x08002fe9
 8002cfc:	08002fe9 	.word	0x08002fe9
 8002d00:	08002fe9 	.word	0x08002fe9
 8002d04:	08002fe9 	.word	0x08002fe9
 8002d08:	08002fe9 	.word	0x08002fe9
 8002d0c:	08002fe9 	.word	0x08002fe9
 8002d10:	08002fe9 	.word	0x08002fe9
 8002d14:	08002fe9 	.word	0x08002fe9
 8002d18:	08002fe9 	.word	0x08002fe9
 8002d1c:	08002fe9 	.word	0x08002fe9
 8002d20:	08002fe9 	.word	0x08002fe9
 8002d24:	08002fe9 	.word	0x08002fe9
 8002d28:	08002fe9 	.word	0x08002fe9
 8002d2c:	08002fe9 	.word	0x08002fe9
 8002d30:	08002fe9 	.word	0x08002fe9
 8002d34:	08002fe9 	.word	0x08002fe9
 8002d38:	08002fe9 	.word	0x08002fe9
 8002d3c:	08002fe9 	.word	0x08002fe9
 8002d40:	08002d45 	.word	0x08002d45
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
      break;
 8002d4c:	e153      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	2b1b      	cmp	r3, #27
 8002d52:	d843      	bhi.n	8002ddc <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002dd5 	.word	0x08002dd5
 8002d60:	08002dd5 	.word	0x08002dd5
 8002d64:	08002dd5 	.word	0x08002dd5
 8002d68:	08002dd5 	.word	0x08002dd5
 8002d6c:	08002dcd 	.word	0x08002dcd
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002ddd 	.word	0x08002ddd
 8002d78:	08002ddd 	.word	0x08002ddd
 8002d7c:	08002dd5 	.word	0x08002dd5
 8002d80:	08002dd5 	.word	0x08002dd5
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002dd5 	.word	0x08002dd5
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002ddd 	.word	0x08002ddd
 8002d94:	08002ddd 	.word	0x08002ddd
 8002d98:	08002ddd 	.word	0x08002ddd
 8002d9c:	08002dd5 	.word	0x08002dd5
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002dd5 	.word	0x08002dd5
 8002da8:	08002dd5 	.word	0x08002dd5
 8002dac:	08002dcd 	.word	0x08002dcd
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	08002ddd 	.word	0x08002ddd
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002dd5 	.word	0x08002dd5
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002dd5 	.word	0x08002dd5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4a8c      	ldr	r2, [pc, #560]	; (8003000 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002dd0:	601a      	str	r2, [r3, #0]
          break;
 8002dd2:	e00a      	b.n	8002dea <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4a8b      	ldr	r2, [pc, #556]	; (8003004 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002dd8:	601a      	str	r2, [r3, #0]
          break;
 8002dda:	e006      	b.n	8002dea <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4a8a      	ldr	r2, [pc, #552]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002de0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	60fb      	str	r3, [r7, #12]
          break;
 8002de8:	bf00      	nop
      }
      break;
 8002dea:	e104      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4a84      	ldr	r2, [pc, #528]	; (8003000 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002df0:	601a      	str	r2, [r3, #0]
      break;
 8002df2:	e100      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4a85      	ldr	r2, [pc, #532]	; (800300c <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002df8:	601a      	str	r2, [r3, #0]
      break;
 8002dfa:	e0fc      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4a84      	ldr	r2, [pc, #528]	; (8003010 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002e00:	601a      	str	r2, [r3, #0]
      break;
 8002e02:	e0f8      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4a83      	ldr	r2, [pc, #524]	; (8003014 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002e08:	601a      	str	r2, [r3, #0]
      break;
 8002e0a:	e0f4      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4a82      	ldr	r2, [pc, #520]	; (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002e10:	601a      	str	r2, [r3, #0]
      break;
 8002e12:	e0f0      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002e14:	7abb      	ldrb	r3, [r7, #10]
 8002e16:	2b1b      	cmp	r3, #27
 8002e18:	d842      	bhi.n	8002ea0 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e99 	.word	0x08002e99
 8002e24:	08002e99 	.word	0x08002e99
 8002e28:	08002e99 	.word	0x08002e99
 8002e2c:	08002e99 	.word	0x08002e99
 8002e30:	08002e91 	.word	0x08002e91
 8002e34:	08002ea1 	.word	0x08002ea1
 8002e38:	08002ea1 	.word	0x08002ea1
 8002e3c:	08002ea1 	.word	0x08002ea1
 8002e40:	08002e99 	.word	0x08002e99
 8002e44:	08002e99 	.word	0x08002e99
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e99 	.word	0x08002e99
 8002e50:	08002ea1 	.word	0x08002ea1
 8002e54:	08002ea1 	.word	0x08002ea1
 8002e58:	08002ea1 	.word	0x08002ea1
 8002e5c:	08002ea1 	.word	0x08002ea1
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	08002e91 	.word	0x08002e91
 8002e74:	08002ea1 	.word	0x08002ea1
 8002e78:	08002ea1 	.word	0x08002ea1
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002e99 	.word	0x08002e99
 8002e84:	08002e99 	.word	0x08002e99
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002e99 	.word	0x08002e99
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4a62      	ldr	r2, [pc, #392]	; (800301c <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002e94:	601a      	str	r2, [r3, #0]
          break;
 8002e96:	e00a      	b.n	8002eae <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002e9c:	601a      	str	r2, [r3, #0]
          break;
 8002e9e:	e006      	b.n	8002eae <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4a59      	ldr	r2, [pc, #356]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002ea4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	60fb      	str	r3, [r7, #12]
          break;
 8002eac:	bf00      	nop
      }
      break;
 8002eae:	e0a2      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002eb0:	7abb      	ldrb	r3, [r7, #10]
 8002eb2:	2b1b      	cmp	r3, #27
 8002eb4:	d842      	bhi.n	8002f3c <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002f35 	.word	0x08002f35
 8002ec0:	08002f35 	.word	0x08002f35
 8002ec4:	08002f35 	.word	0x08002f35
 8002ec8:	08002f35 	.word	0x08002f35
 8002ecc:	08002f2d 	.word	0x08002f2d
 8002ed0:	08002f3d 	.word	0x08002f3d
 8002ed4:	08002f3d 	.word	0x08002f3d
 8002ed8:	08002f3d 	.word	0x08002f3d
 8002edc:	08002f35 	.word	0x08002f35
 8002ee0:	08002f35 	.word	0x08002f35
 8002ee4:	08002f35 	.word	0x08002f35
 8002ee8:	08002f35 	.word	0x08002f35
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f3d 	.word	0x08002f3d
 8002ef4:	08002f3d 	.word	0x08002f3d
 8002ef8:	08002f3d 	.word	0x08002f3d
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f35 	.word	0x08002f35
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f3d 	.word	0x08002f3d
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f35 	.word	0x08002f35
 8002f20:	08002f35 	.word	0x08002f35
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f35 	.word	0x08002f35
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002f30:	601a      	str	r2, [r3, #0]
          break;
 8002f32:	e00a      	b.n	8002f4a <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002f38:	601a      	str	r2, [r3, #0]
          break;
 8002f3a:	e006      	b.n	8002f4a <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4a32      	ldr	r2, [pc, #200]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002f40:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	60fb      	str	r3, [r7, #12]
          break;
 8002f48:	bf00      	nop
      }
      break;
 8002f4a:	e054      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002f4c:	7abb      	ldrb	r3, [r7, #10]
 8002f4e:	2b1b      	cmp	r3, #27
 8002f50:	d842      	bhi.n	8002fd8 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002fd1 	.word	0x08002fd1
 8002f5c:	08002fd1 	.word	0x08002fd1
 8002f60:	08002fd1 	.word	0x08002fd1
 8002f64:	08002fd1 	.word	0x08002fd1
 8002f68:	08002fc9 	.word	0x08002fc9
 8002f6c:	08002fd9 	.word	0x08002fd9
 8002f70:	08002fd9 	.word	0x08002fd9
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	08002fd1 	.word	0x08002fd1
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fd9 	.word	0x08002fd9
 8002f94:	08002fd9 	.word	0x08002fd9
 8002f98:	08002fd1 	.word	0x08002fd1
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fd1 	.word	0x08002fd1
 8002fa8:	08002fc9 	.word	0x08002fc9
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fd1 	.word	0x08002fd1
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd1 	.word	0x08002fd1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002fcc:	601a      	str	r2, [r3, #0]
          break;
 8002fce:	e00a      	b.n	8002fe6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4a11      	ldr	r2, [pc, #68]	; (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002fd4:	601a      	str	r2, [r3, #0]
          break;
 8002fd6:	e006      	b.n	8002fe6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002fdc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	60fb      	str	r3, [r7, #12]
          break;
 8002fe4:	bf00      	nop
      }
      break;
 8002fe6:	e006      	b.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002fec:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	60fb      	str	r3, [r7, #12]
      break;
 8002ff4:	bf00      	nop
  }

  return ret;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	41480000 	.word	0x41480000
 8003004:	3fcccccd 	.word	0x3fcccccd
 8003008:	bf800000 	.word	0xbf800000
 800300c:	41c80000 	.word	0x41c80000
 8003010:	42480000 	.word	0x42480000
 8003014:	42c80000 	.word	0x42c80000
 8003018:	43480000 	.word	0x43480000
 800301c:	43c80000 	.word	0x43c80000
 8003020:	44480000 	.word	0x44480000
 8003024:	44c80000 	.word	0x44c80000

08003028 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	ed97 0a00 	vldr	s0, [r7]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f805 	bl	800304c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	ed87 0a02 	vstr	s0, [r7, #8]
 8003058:	460b      	mov	r3, r1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003066:	2b01      	cmp	r3, #1
 8003068:	d109      	bne.n	800307e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800306a:	79ba      	ldrb	r2, [r7, #6]
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4619      	mov	r1, r3
 8003070:	ed97 0a02 	vldr	s0, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f98d 	bl	8003394 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800307a:	4603      	mov	r3, r0
 800307c:	e008      	b.n	8003090 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800307e:	79ba      	ldrb	r2, [r7, #6]
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	4619      	mov	r1, r3
 8003084:	ed97 0a02 	vldr	s0, [r7, #8]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa9f 	bl	80035cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800308e:	4603      	mov	r3, r0
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	331c      	adds	r3, #28
 80030aa:	f107 020b 	add.w	r2, r7, #11
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fde7 	bl	8003c84 <lis2dw12_full_scale_get>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e027      	b.n	8003112 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d81b      	bhi.n	8003100 <LIS2DW12_ACC_GetFullScale+0x68>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <LIS2DW12_ACC_GetFullScale+0x38>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030f1 	.word	0x080030f1
 80030dc:	080030f9 	.word	0x080030f9
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2202      	movs	r2, #2
 80030e4:	601a      	str	r2, [r3, #0]
      break;
 80030e6:	e013      	b.n	8003110 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	601a      	str	r2, [r3, #0]
      break;
 80030ee:	e00f      	b.n	8003110 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2208      	movs	r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
      break;
 80030f6:	e00b      	b.n	8003110 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	601a      	str	r2, [r3, #0]
      break;
 80030fe:	e007      	b.n	8003110 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	60fb      	str	r3, [r7, #12]
      break;
 800310e:	bf00      	nop
  }

  return ret;
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	dd0b      	ble.n	8003144 <LIS2DW12_ACC_SetFullScale+0x28>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b04      	cmp	r3, #4
 8003130:	dd06      	ble.n	8003140 <LIS2DW12_ACC_SetFullScale+0x24>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	dc01      	bgt.n	800313c <LIS2DW12_ACC_SetFullScale+0x20>
 8003138:	2302      	movs	r3, #2
 800313a:	e004      	b.n	8003146 <LIS2DW12_ACC_SetFullScale+0x2a>
 800313c:	2303      	movs	r3, #3
 800313e:	e002      	b.n	8003146 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003144:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003146:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	331c      	adds	r3, #28
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fd71 	bl	8003c38 <lis2dw12_full_scale_set>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e000      	b.n	8003164 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	331c      	adds	r3, #28
 800317e:	f107 020b 	add.w	r2, r7, #11
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fb67 	bl	8003858 <lis2dw12_power_mode_get>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e089      	b.n	80032aa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	331c      	adds	r3, #28
 800319a:	f107 020c 	add.w	r2, r7, #12
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fda7 	bl	8003cf4 <lis2dw12_acceleration_raw_get>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	e07b      	b.n	80032aa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	2b1b      	cmp	r3, #27
 80031b6:	d873      	bhi.n	80032a0 <LIS2DW12_ACC_GetAxesRaw+0x134>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003231 	.word	0x08003231
 80031c4:	08003269 	.word	0x08003269
 80031c8:	08003269 	.word	0x08003269
 80031cc:	08003269 	.word	0x08003269
 80031d0:	08003269 	.word	0x08003269
 80031d4:	080032a1 	.word	0x080032a1
 80031d8:	080032a1 	.word	0x080032a1
 80031dc:	080032a1 	.word	0x080032a1
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003269 	.word	0x08003269
 80031e8:	08003269 	.word	0x08003269
 80031ec:	08003269 	.word	0x08003269
 80031f0:	080032a1 	.word	0x080032a1
 80031f4:	080032a1 	.word	0x080032a1
 80031f8:	080032a1 	.word	0x080032a1
 80031fc:	080032a1 	.word	0x080032a1
 8003200:	08003231 	.word	0x08003231
 8003204:	08003269 	.word	0x08003269
 8003208:	08003269 	.word	0x08003269
 800320c:	08003269 	.word	0x08003269
 8003210:	08003269 	.word	0x08003269
 8003214:	080032a1 	.word	0x080032a1
 8003218:	080032a1 	.word	0x080032a1
 800321c:	080032a1 	.word	0x080032a1
 8003220:	08003231 	.word	0x08003231
 8003224:	08003269 	.word	0x08003269
 8003228:	08003269 	.word	0x08003269
 800322c:	08003269 	.word	0x08003269
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003230:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da00      	bge.n	800323a <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003238:	330f      	adds	r3, #15
 800323a:	111b      	asrs	r3, r3, #4
 800323c:	b21a      	sxth	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da00      	bge.n	800324c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 800324a:	330f      	adds	r3, #15
 800324c:	111b      	asrs	r3, r3, #4
 800324e:	b21a      	sxth	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003254:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	da00      	bge.n	800325e <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800325c:	330f      	adds	r3, #15
 800325e:	111b      	asrs	r3, r3, #4
 8003260:	b21a      	sxth	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	809a      	strh	r2, [r3, #4]
      break;
 8003266:	e01f      	b.n	80032a8 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003268:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da00      	bge.n	8003272 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003270:	3303      	adds	r3, #3
 8003272:	109b      	asrs	r3, r3, #2
 8003274:	b21a      	sxth	r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800327a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da00      	bge.n	8003284 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8003282:	3303      	adds	r3, #3
 8003284:	109b      	asrs	r3, r3, #2
 8003286:	b21a      	sxth	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800328c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	da00      	bge.n	8003296 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8003294:	3303      	adds	r3, #3
 8003296:	109b      	asrs	r3, r3, #2
 8003298:	b21a      	sxth	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	809a      	strh	r2, [r3, #4]
      break;
 800329e:	e003      	b.n	80032a8 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	617b      	str	r3, [r7, #20]
      break;
 80032a6:	bf00      	nop
  }

  return ret;
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80032c4:	f107 0310 	add.w	r3, r7, #16
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff4e 	bl	800316c <LIS2DW12_ACC_GetAxesRaw>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	e03c      	b.n	8003356 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fbd6 	bl	8002a94 <LIS2DW12_ACC_GetSensitivity>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e030      	b.n	8003356 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80032f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003300:	edd7 7a03 	vldr	s15, [r7, #12]
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800330c:	ee17 2a90 	vmov	r2, s15
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800332c:	ee17 2a90 	vmov	r2, s15
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003334:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003340:	edd7 7a03 	vldr	s15, [r7, #12]
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800334c:	ee17 2a90 	vmov	r2, s15
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
 800336a:	4613      	mov	r3, r2
 800336c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 001c 	add.w	r0, r3, #28
 8003374:	1cba      	adds	r2, r7, #2
 8003376:	78f9      	ldrb	r1, [r7, #3]
 8003378:	2301      	movs	r3, #1
 800337a:	f000 fa07 	bl	800378c <lis2dw12_write_reg>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	e000      	b.n	800338c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a0:	460b      	mov	r3, r1
 80033a2:	71fb      	strb	r3, [r7, #7]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d80b      	bhi.n	80033c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033f5 	.word	0x080033f5
 80033bc:	08003421 	.word	0x08003421
 80033c0:	0800344d 	.word	0x0800344d
 80033c4:	08003479 	.word	0x08003479
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80033c8:	79bb      	ldrb	r3, [r7, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80033ce:	2304      	movs	r3, #4
 80033d0:	75fb      	strb	r3, [r7, #23]
          break;
 80033d2:	e002      	b.n	80033da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80033d4:	2314      	movs	r3, #20
 80033d6:	75fb      	strb	r3, [r7, #23]
          break;
 80033d8:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80033da:	edd7 7a02 	vldr	s15, [r7, #8]
 80033de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80033e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d400      	bmi.n	80033ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80033ec:	e05a      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80033f0:	60bb      	str	r3, [r7, #8]
      break;
 80033f2:	e057      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80033f4:	79bb      	ldrb	r3, [r7, #6]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80033fa:	2303      	movs	r3, #3
 80033fc:	75fb      	strb	r3, [r7, #23]
          break;
 80033fe:	e002      	b.n	8003406 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003400:	2313      	movs	r3, #19
 8003402:	75fb      	strb	r3, [r7, #23]
          break;
 8003404:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003406:	edd7 7a02 	vldr	s15, [r7, #8]
 800340a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80035b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800340e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	dc00      	bgt.n	800341a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003418:	e044      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800341a:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800341c:	60bb      	str	r3, [r7, #8]
      break;
 800341e:	e041      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d002      	beq.n	800342c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003426:	2302      	movs	r3, #2
 8003428:	75fb      	strb	r3, [r7, #23]
          break;
 800342a:	e002      	b.n	8003432 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800342c:	2312      	movs	r3, #18
 800342e:	75fb      	strb	r3, [r7, #23]
          break;
 8003430:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003432:	edd7 7a02 	vldr	s15, [r7, #8]
 8003436:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80035b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800343a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	dc00      	bgt.n	8003446 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8003444:	e02e      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003448:	60bb      	str	r3, [r7, #8]
      break;
 800344a:	e02b      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 800344c:	79bb      	ldrb	r3, [r7, #6]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d002      	beq.n	8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
          break;
 8003456:	e002      	b.n	800345e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003458:	2311      	movs	r3, #17
 800345a:	75fb      	strb	r3, [r7, #23]
          break;
 800345c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800345e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003462:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80035b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	dc00      	bgt.n	8003472 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003470:	e018      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003472:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003474:	60bb      	str	r3, [r7, #8]
      break;
 8003476:	e015      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003478:	79bb      	ldrb	r3, [r7, #6]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
          break;
 8003482:	e002      	b.n	800348a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003484:	2310      	movs	r3, #16
 8003486:	75fb      	strb	r3, [r7, #23]
          break;
 8003488:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800348a:	edd7 7a02 	vldr	s15, [r7, #8]
 800348e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80035b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	dc00      	bgt.n	800349e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 800349c:	e001      	b.n	80034a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800349e:	4b45      	ldr	r3, [pc, #276]	; (80035b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80034a0:	60bb      	str	r3, [r7, #8]
      break;
 80034a2:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80034a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80035b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	d801      	bhi.n	80034ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e04d      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80034be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80034c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d801      	bhi.n	80034d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e042      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80034d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d801      	bhi.n	80034e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e037      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80035bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80034ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	d801      	bhi.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e02c      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003500:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80035c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8003504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d801      	bhi.n	8003512 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800350e:	2305      	movs	r3, #5
 8003510:	e021      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003512:	edd7 7a02 	vldr	s15, [r7, #8]
 8003516:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80035b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800351a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d801      	bhi.n	8003528 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003524:	2306      	movs	r3, #6
 8003526:	e016      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003528:	edd7 7a02 	vldr	s15, [r7, #8]
 800352c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80035c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	d801      	bhi.n	800353e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800353a:	2307      	movs	r3, #7
 800353c:	e00b      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800353e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003542:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80035c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8003546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	d801      	bhi.n	8003554 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8003550:	2308      	movs	r3, #8
 8003552:	e000      	b.n	8003556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003554:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8003556:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	331c      	adds	r3, #28
 800355c:	7dba      	ldrb	r2, [r7, #22]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa33 	bl	80039cc <lis2dw12_data_rate_set>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	e018      	b.n	80035a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	331c      	adds	r3, #28
 8003576:	7dfa      	ldrb	r2, [r7, #23]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f91e 	bl	80037bc <lis2dw12_power_mode_set>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e00b      	b.n	80035a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	79fa      	ldrb	r2, [r7, #7]
 8003596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	79ba      	ldrb	r2, [r7, #6]
 800359e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	41480000 	.word	0x41480000
 80035b0:	43480000 	.word	0x43480000
 80035b4:	43480000 	.word	0x43480000
 80035b8:	3fcccccd 	.word	0x3fcccccd
 80035bc:	42480000 	.word	0x42480000
 80035c0:	42c80000 	.word	0x42c80000
 80035c4:	43c80000 	.word	0x43c80000
 80035c8:	44480000 	.word	0x44480000

080035cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80035d8:	460b      	mov	r3, r1
 80035da:	71fb      	strb	r3, [r7, #7]
 80035dc:	4613      	mov	r3, r2
 80035de:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	79ba      	ldrb	r2, [r7, #6]
 80035ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80035f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80036b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80035f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003600:	d801      	bhi.n	8003606 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8003604:	e04d      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8003606:	edd7 7a02 	vldr	s15, [r7, #8]
 800360a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800360e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d801      	bhi.n	800361c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800361a:	e042      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 800361c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003620:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362c:	d801      	bhi.n	8003632 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003630:	e037      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8003632:	edd7 7a02 	vldr	s15, [r7, #8]
 8003636:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80036c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800363a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	d801      	bhi.n	8003648 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8003644:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8003646:	e02c      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8003648:	edd7 7a02 	vldr	s15, [r7, #8]
 800364c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80036cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	d801      	bhi.n	800365e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 800365c:	e021      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800365e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003662:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	d801      	bhi.n	8003674 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8003672:	e016      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003674:	edd7 7a02 	vldr	s15, [r7, #8]
 8003678:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80036dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 800367c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	d801      	bhi.n	800368a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003688:	e00b      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800368a:	edd7 7a02 	vldr	s15, [r7, #8]
 800368e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	d801      	bhi.n	80036a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800369e:	e000      	b.n	80036a2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	3fcccccd 	.word	0x3fcccccd
 80036b8:	3fcccccd 	.word	0x3fcccccd
 80036bc:	41480000 	.word	0x41480000
 80036c0:	41c80000 	.word	0x41c80000
 80036c4:	42480000 	.word	0x42480000
 80036c8:	42480000 	.word	0x42480000
 80036cc:	42c80000 	.word	0x42c80000
 80036d0:	42c80000 	.word	0x42c80000
 80036d4:	43480000 	.word	0x43480000
 80036d8:	43480000 	.word	0x43480000
 80036dc:	43c80000 	.word	0x43c80000
 80036e0:	43c80000 	.word	0x43c80000
 80036e4:	44480000 	.word	0x44480000
 80036e8:	44480000 	.word	0x44480000
 80036ec:	44c80000 	.word	0x44c80000

080036f0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	72fb      	strb	r3, [r7, #11]
 8003700:	4613      	mov	r3, r2
 8003702:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	695c      	ldr	r4, [r3, #20]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	7b1b      	ldrb	r3, [r3, #12]
 8003710:	b298      	uxth	r0, r3
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	b299      	uxth	r1, r3
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	47a0      	blx	r4
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd90      	pop	{r4, r7, pc}

08003726 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003726:	b590      	push	{r4, r7, lr}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	461a      	mov	r2, r3
 8003732:	460b      	mov	r3, r1
 8003734:	72fb      	strb	r3, [r7, #11]
 8003736:	4613      	mov	r3, r2
 8003738:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	691c      	ldr	r4, [r3, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	7b1b      	ldrb	r3, [r3, #12]
 8003746:	b298      	uxth	r0, r3
 8003748:	7afb      	ldrb	r3, [r7, #11]
 800374a:	b299      	uxth	r1, r3
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	47a0      	blx	r4
 8003752:	4603      	mov	r3, r0
}
 8003754:	4618      	mov	r0, r3
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	460b      	mov	r3, r1
 800376a:	72fb      	strb	r3, [r7, #11]
 800376c:	4613      	mov	r3, r2
 800376e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685c      	ldr	r4, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6898      	ldr	r0, [r3, #8]
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	7af9      	ldrb	r1, [r7, #11]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	47a0      	blx	r4
 8003780:	6178      	str	r0, [r7, #20]

  return ret;
 8003782:	697b      	ldr	r3, [r7, #20]
}
 8003784:	4618      	mov	r0, r3
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd90      	pop	{r4, r7, pc}

0800378c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	461a      	mov	r2, r3
 8003798:	460b      	mov	r3, r1
 800379a:	72fb      	strb	r3, [r7, #11]
 800379c:	4613      	mov	r3, r2
 800379e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681c      	ldr	r4, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6898      	ldr	r0, [r3, #8]
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	7af9      	ldrb	r1, [r7, #11]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	47a0      	blx	r4
 80037b0:	6178      	str	r0, [r7, #20]

  return ret;
 80037b2:	697b      	ldr	r3, [r7, #20]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}

080037bc <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80037c8:	f107 0210 	add.w	r2, r7, #16
 80037cc:	2301      	movs	r3, #1
 80037ce:	2120      	movs	r1, #32
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ffc3 	bl	800375c <lis2dw12_read_reg>
 80037d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	7c3b      	ldrb	r3, [r7, #16]
 80037ea:	f362 0383 	bfi	r3, r2, #2, #2
 80037ee:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	7c3b      	ldrb	r3, [r7, #16]
 80037fa:	f362 0301 	bfi	r3, r2, #0, #2
 80037fe:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003800:	f107 0210 	add.w	r2, r7, #16
 8003804:	2301      	movs	r3, #1
 8003806:	2120      	movs	r1, #32
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ffbf 	bl	800378c <lis2dw12_write_reg>
 800380e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d107      	bne.n	8003826 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003816:	f107 020c 	add.w	r2, r7, #12
 800381a:	2301      	movs	r3, #1
 800381c:	2125      	movs	r1, #37	; 0x25
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff9c 	bl	800375c <lis2dw12_read_reg>
 8003824:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d110      	bne.n	800384e <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	7b3b      	ldrb	r3, [r7, #12]
 8003838:	f362 0382 	bfi	r3, r2, #2, #1
 800383c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800383e:	f107 020c 	add.w	r2, r7, #12
 8003842:	2301      	movs	r3, #1
 8003844:	2125      	movs	r1, #37	; 0x25
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa0 	bl	800378c <lis2dw12_write_reg>
 800384c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003862:	f107 0210 	add.w	r2, r7, #16
 8003866:	2301      	movs	r3, #1
 8003868:	2120      	movs	r1, #32
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff76 	bl	800375c <lis2dw12_read_reg>
 8003870:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 80a3 	bne.w	80039c0 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800387a:	f107 020c 	add.w	r2, r7, #12
 800387e:	2301      	movs	r3, #1
 8003880:	2125      	movs	r1, #37	; 0x25
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff6a 	bl	800375c <lis2dw12_read_reg>
 8003888:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800388a:	7b3b      	ldrb	r3, [r7, #12]
 800388c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	011a      	lsls	r2, r3, #4
 8003894:	7c3b      	ldrb	r3, [r7, #16]
 8003896:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800389a:	b2db      	uxtb	r3, r3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80038a0:	7c3a      	ldrb	r2, [r7, #16]
 80038a2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80038a6:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80038a8:	4413      	add	r3, r2
 80038aa:	2b1b      	cmp	r3, #27
 80038ac:	f200 8084 	bhi.w	80039b8 <lis2dw12_power_mode_get+0x160>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <lis2dw12_power_mode_get+0x60>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	08003949 	.word	0x08003949
 80038bc:	08003941 	.word	0x08003941
 80038c0:	08003939 	.word	0x08003939
 80038c4:	08003931 	.word	0x08003931
 80038c8:	08003929 	.word	0x08003929
 80038cc:	080039b9 	.word	0x080039b9
 80038d0:	080039b9 	.word	0x080039b9
 80038d4:	080039b9 	.word	0x080039b9
 80038d8:	08003969 	.word	0x08003969
 80038dc:	08003961 	.word	0x08003961
 80038e0:	08003959 	.word	0x08003959
 80038e4:	08003951 	.word	0x08003951
 80038e8:	080039b9 	.word	0x080039b9
 80038ec:	080039b9 	.word	0x080039b9
 80038f0:	080039b9 	.word	0x080039b9
 80038f4:	080039b9 	.word	0x080039b9
 80038f8:	08003991 	.word	0x08003991
 80038fc:	08003989 	.word	0x08003989
 8003900:	08003981 	.word	0x08003981
 8003904:	08003979 	.word	0x08003979
 8003908:	08003971 	.word	0x08003971
 800390c:	080039b9 	.word	0x080039b9
 8003910:	080039b9 	.word	0x080039b9
 8003914:	080039b9 	.word	0x080039b9
 8003918:	080039b1 	.word	0x080039b1
 800391c:	080039a9 	.word	0x080039a9
 8003920:	080039a1 	.word	0x080039a1
 8003924:	08003999 	.word	0x08003999
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]
        break;
 800392e:	e048      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2203      	movs	r2, #3
 8003934:	701a      	strb	r2, [r3, #0]
        break;
 8003936:	e044      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2202      	movs	r2, #2
 800393c:	701a      	strb	r2, [r3, #0]
        break;
 800393e:	e040      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
        break;
 8003946:	e03c      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
        break;
 800394e:	e038      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	220b      	movs	r2, #11
 8003954:	701a      	strb	r2, [r3, #0]
        break;
 8003956:	e034      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	220a      	movs	r2, #10
 800395c:	701a      	strb	r2, [r3, #0]
        break;
 800395e:	e030      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2209      	movs	r2, #9
 8003964:	701a      	strb	r2, [r3, #0]
        break;
 8003966:	e02c      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	701a      	strb	r2, [r3, #0]
        break;
 800396e:	e028      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2214      	movs	r2, #20
 8003974:	701a      	strb	r2, [r3, #0]
        break;
 8003976:	e024      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2213      	movs	r2, #19
 800397c:	701a      	strb	r2, [r3, #0]
        break;
 800397e:	e020      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2212      	movs	r2, #18
 8003984:	701a      	strb	r2, [r3, #0]
        break;
 8003986:	e01c      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2211      	movs	r2, #17
 800398c:	701a      	strb	r2, [r3, #0]
        break;
 800398e:	e018      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	701a      	strb	r2, [r3, #0]
        break;
 8003996:	e014      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	221b      	movs	r2, #27
 800399c:	701a      	strb	r2, [r3, #0]
        break;
 800399e:	e010      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	221a      	movs	r2, #26
 80039a4:	701a      	strb	r2, [r3, #0]
        break;
 80039a6:	e00c      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2219      	movs	r2, #25
 80039ac:	701a      	strb	r2, [r3, #0]
        break;
 80039ae:	e008      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2218      	movs	r2, #24
 80039b4:	701a      	strb	r2, [r3, #0]
        break;
 80039b6:	e004      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2204      	movs	r2, #4
 80039bc:	701a      	strb	r2, [r3, #0]
        break;
 80039be:	e000      	b.n	80039c2 <lis2dw12_power_mode_get+0x16a>
    }
  }
 80039c0:	bf00      	nop

  return ret;
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80039d8:	f107 0210 	add.w	r2, r7, #16
 80039dc:	2301      	movs	r3, #1
 80039de:	2120      	movs	r1, #32
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff febb 	bl	800375c <lis2dw12_read_reg>
 80039e6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	7c3b      	ldrb	r3, [r7, #16]
 80039f8:	f362 1307 	bfi	r3, r2, #4, #4
 80039fc:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80039fe:	f107 0210 	add.w	r2, r7, #16
 8003a02:	2301      	movs	r3, #1
 8003a04:	2120      	movs	r1, #32
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fec0 	bl	800378c <lis2dw12_write_reg>
 8003a0c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003a14:	f107 020c 	add.w	r2, r7, #12
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2122      	movs	r1, #34	; 0x22
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe9d 	bl	800375c <lis2dw12_read_reg>
 8003a22:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d110      	bne.n	8003a4c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	f362 0301 	bfi	r3, r2, #0, #2
 8003a3a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003a3c:	f107 020c 	add.w	r2, r7, #12
 8003a40:	2301      	movs	r3, #1
 8003a42:	2122      	movs	r1, #34	; 0x22
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fea1 	bl	800378c <lis2dw12_write_reg>
 8003a4a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003a4c:	697b      	ldr	r3, [r7, #20]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a62:	f107 0210 	add.w	r2, r7, #16
 8003a66:	2301      	movs	r3, #1
 8003a68:	2120      	movs	r1, #32
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe76 	bl	800375c <lis2dw12_read_reg>
 8003a70:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 80b3 	bne.w	8003be0 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2122      	movs	r1, #34	; 0x22
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe6a 	bl	800375c <lis2dw12_read_reg>
 8003a88:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003a8a:	7b3b      	ldrb	r3, [r7, #12]
 8003a8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	7c3a      	ldrb	r2, [r7, #16]
 8003a96:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	2b32      	cmp	r3, #50	; 0x32
 8003aa0:	f200 809a 	bhi.w	8003bd8 <lis2dw12_data_rate_get+0x180>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <lis2dw12_data_rate_get+0x54>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003b79 	.word	0x08003b79
 8003ab0:	08003b81 	.word	0x08003b81
 8003ab4:	08003b89 	.word	0x08003b89
 8003ab8:	08003b91 	.word	0x08003b91
 8003abc:	08003b99 	.word	0x08003b99
 8003ac0:	08003ba1 	.word	0x08003ba1
 8003ac4:	08003ba9 	.word	0x08003ba9
 8003ac8:	08003bb1 	.word	0x08003bb1
 8003acc:	08003bb9 	.word	0x08003bb9
 8003ad0:	08003bc1 	.word	0x08003bc1
 8003ad4:	08003bd9 	.word	0x08003bd9
 8003ad8:	08003bd9 	.word	0x08003bd9
 8003adc:	08003bd9 	.word	0x08003bd9
 8003ae0:	08003bd9 	.word	0x08003bd9
 8003ae4:	08003bd9 	.word	0x08003bd9
 8003ae8:	08003bd9 	.word	0x08003bd9
 8003aec:	08003bd9 	.word	0x08003bd9
 8003af0:	08003bd9 	.word	0x08003bd9
 8003af4:	08003bd1 	.word	0x08003bd1
 8003af8:	08003bd9 	.word	0x08003bd9
 8003afc:	08003bd9 	.word	0x08003bd9
 8003b00:	08003bd9 	.word	0x08003bd9
 8003b04:	08003bd9 	.word	0x08003bd9
 8003b08:	08003bd9 	.word	0x08003bd9
 8003b0c:	08003bd9 	.word	0x08003bd9
 8003b10:	08003bd9 	.word	0x08003bd9
 8003b14:	08003bd9 	.word	0x08003bd9
 8003b18:	08003bd9 	.word	0x08003bd9
 8003b1c:	08003bd9 	.word	0x08003bd9
 8003b20:	08003bd9 	.word	0x08003bd9
 8003b24:	08003bd9 	.word	0x08003bd9
 8003b28:	08003bd9 	.word	0x08003bd9
 8003b2c:	08003bd9 	.word	0x08003bd9
 8003b30:	08003bd9 	.word	0x08003bd9
 8003b34:	08003bd9 	.word	0x08003bd9
 8003b38:	08003bd9 	.word	0x08003bd9
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003bd9 	.word	0x08003bd9
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bd9 	.word	0x08003bd9
 8003b54:	08003bd9 	.word	0x08003bd9
 8003b58:	08003bd9 	.word	0x08003bd9
 8003b5c:	08003bd9 	.word	0x08003bd9
 8003b60:	08003bd9 	.word	0x08003bd9
 8003b64:	08003bd9 	.word	0x08003bd9
 8003b68:	08003bd9 	.word	0x08003bd9
 8003b6c:	08003bd9 	.word	0x08003bd9
 8003b70:	08003bd9 	.word	0x08003bd9
 8003b74:	08003bc9 	.word	0x08003bc9
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
        break;
 8003b7e:	e030      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
        break;
 8003b86:	e02c      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
        break;
 8003b8e:	e028      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2203      	movs	r2, #3
 8003b94:	701a      	strb	r2, [r3, #0]
        break;
 8003b96:	e024      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	701a      	strb	r2, [r3, #0]
        break;
 8003b9e:	e020      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	701a      	strb	r2, [r3, #0]
        break;
 8003ba6:	e01c      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2206      	movs	r2, #6
 8003bac:	701a      	strb	r2, [r3, #0]
        break;
 8003bae:	e018      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	701a      	strb	r2, [r3, #0]
        break;
 8003bb6:	e014      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	701a      	strb	r2, [r3, #0]
        break;
 8003bbe:	e010      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2209      	movs	r2, #9
 8003bc4:	701a      	strb	r2, [r3, #0]
        break;
 8003bc6:	e00c      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2232      	movs	r2, #50	; 0x32
 8003bcc:	701a      	strb	r2, [r3, #0]
        break;
 8003bce:	e008      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2212      	movs	r2, #18
 8003bd4:	701a      	strb	r2, [r3, #0]
        break;
 8003bd6:	e004      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
        break;
 8003bde:	e000      	b.n	8003be2 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003be0:	bf00      	nop

  return ret;
 8003be2:	697b      	ldr	r3, [r7, #20]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003bf8:	f107 0208 	add.w	r2, r7, #8
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	2121      	movs	r1, #33	; 0x21
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fdab 	bl	800375c <lis2dw12_read_reg>
 8003c06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	7a3b      	ldrb	r3, [r7, #8]
 8003c18:	f362 03c3 	bfi	r3, r2, #3, #1
 8003c1c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003c1e:	f107 0208 	add.w	r2, r7, #8
 8003c22:	2301      	movs	r3, #1
 8003c24:	2121      	movs	r1, #33	; 0x21
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdb0 	bl	800378c <lis2dw12_write_reg>
 8003c2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003c44:	f107 0208 	add.w	r2, r7, #8
 8003c48:	2301      	movs	r3, #1
 8003c4a:	2125      	movs	r1, #37	; 0x25
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fd85 	bl	800375c <lis2dw12_read_reg>
 8003c52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	7a3b      	ldrb	r3, [r7, #8]
 8003c64:	f362 1305 	bfi	r3, r2, #4, #2
 8003c68:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003c6a:	f107 0208 	add.w	r2, r7, #8
 8003c6e:	2301      	movs	r3, #1
 8003c70:	2125      	movs	r1, #37	; 0x25
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fd8a 	bl	800378c <lis2dw12_write_reg>
 8003c78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003c8e:	f107 0208 	add.w	r2, r7, #8
 8003c92:	2301      	movs	r3, #1
 8003c94:	2125      	movs	r1, #37	; 0x25
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fd60 	bl	800375c <lis2dw12_read_reg>
 8003c9c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003c9e:	7a3b      	ldrb	r3, [r7, #8]
 8003ca0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d81a      	bhi.n	8003ce0 <lis2dw12_full_scale_get+0x5c>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <lis2dw12_full_scale_get+0x2c>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003cd9 	.word	0x08003cd9
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e00f      	b.n	8003ce8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
      break;
 8003cce:	e00b      	b.n	8003ce8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e007      	b.n	8003ce8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e003      	b.n	8003ce8 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	bf00      	nop
  }

  return ret;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop

08003cf4 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003cfe:	f107 020c 	add.w	r2, r7, #12
 8003d02:	2306      	movs	r3, #6
 8003d04:	2128      	movs	r1, #40	; 0x28
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fd28 	bl	800375c <lis2dw12_read_reg>
 8003d0c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d0e:	7b7b      	ldrb	r3, [r7, #13]
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	7b3b      	ldrb	r3, [r7, #12]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	3302      	adds	r3, #2
 8003d36:	b212      	sxth	r2, r2
 8003d38:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	7bbb      	ldrb	r3, [r7, #14]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	3302      	adds	r3, #2
 8003d54:	b212      	sxth	r2, r2
 8003d56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003d58:	7c7a      	ldrb	r2, [r7, #17]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	b212      	sxth	r2, r2
 8003d60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3304      	adds	r3, #4
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	7c3b      	ldrb	r3, [r7, #16]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	b212      	sxth	r2, r2
 8003d7e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003d80:	697b      	ldr	r3, [r7, #20]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003d94:	2301      	movs	r3, #1
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	210f      	movs	r1, #15
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fcde 	bl	800375c <lis2dw12_read_reg>
 8003da0:	60f8      	str	r0, [r7, #12]

  return ret;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003db8:	f107 0208 	add.w	r2, r7, #8
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	2121      	movs	r1, #33	; 0x21
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fccb 	bl	800375c <lis2dw12_read_reg>
 8003dc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	7a3b      	ldrb	r3, [r7, #8]
 8003dd8:	f362 0382 	bfi	r3, r2, #2, #1
 8003ddc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003dde:	f107 0208 	add.w	r2, r7, #8
 8003de2:	2301      	movs	r3, #1
 8003de4:	2121      	movs	r1, #33	; 0x21
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fcd0 	bl	800378c <lis2dw12_write_reg>
 8003dec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003e04:	f107 0208 	add.w	r2, r7, #8
 8003e08:	2301      	movs	r3, #1
 8003e0a:	212e      	movs	r1, #46	; 0x2e
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fca5 	bl	800375c <lis2dw12_read_reg>
 8003e12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	7a3b      	ldrb	r3, [r7, #8]
 8003e24:	f362 1347 	bfi	r3, r2, #5, #3
 8003e28:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003e2a:	f107 0208 	add.w	r2, r7, #8
 8003e2e:	2301      	movs	r3, #1
 8003e30:	212e      	movs	r1, #46	; 0x2e
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fcaa 	bl	800378c <lis2dw12_write_reg>
 8003e38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e063      	b.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	7b1a      	ldrb	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <LIS2MDL_RegisterBusIO+0xf0>)
 8003e9c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <LIS2MDL_RegisterBusIO+0xf4>)
 8003ea2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e036      	b.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4798      	blx	r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e02c      	b.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d028      	beq.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d123      	bne.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10d      	bne.n	8003f04 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003ee8:	2334      	movs	r3, #52	; 0x34
 8003eea:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2162      	movs	r1, #98	; 0x62
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fb1b 	bl	800452e <LIS2MDL_Write_Reg>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d014      	beq.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e012      	b.n	8003f2a <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d101      	bne.n	8003f10 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e00c      	b.n	8003f2a <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	331c      	adds	r3, #28
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 ff70 	bl	8004dfc <lis2mdl_i2c_interface_set>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e000      	b.n	8003f2a <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004585 	.word	0x08004585
 8003f38:	08004607 	.word	0x08004607

08003f3c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d144      	bne.n	8003fd6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003f4c:	f107 0208 	add.w	r2, r7, #8
 8003f50:	2301      	movs	r3, #1
 8003f52:	2162      	movs	r1, #98	; 0x62
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb97 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e06c      	b.n	8004040 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003f66:	f107 020c 	add.w	r2, r7, #12
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	2160      	movs	r1, #96	; 0x60
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fb8a 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7e:	e05f      	b.n	8004040 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003f80:	7a3b      	ldrb	r3, [r7, #8]
 8003f82:	f043 0310 	orr.w	r3, r3, #16
 8003f86:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003f88:	7a3b      	ldrb	r3, [r7, #8]
 8003f8a:	f36f 0341 	bfc	r3, #1, #1
 8003f8e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003f90:	7b3b      	ldrb	r3, [r7, #12]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f362 0301 	bfi	r3, r2, #0, #2
 8003f98:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003f9a:	7b3b      	ldrb	r3, [r7, #12]
 8003f9c:	f043 030c 	orr.w	r3, r3, #12
 8003fa0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003fa2:	f107 0208 	add.w	r2, r7, #8
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	2162      	movs	r1, #98	; 0x62
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fcab 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	e041      	b.n	8004040 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003fbc:	f107 020c 	add.w	r2, r7, #12
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2160      	movs	r1, #96	; 0x60
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fc9e 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d032      	beq.n	8004036 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	e034      	b.n	8004040 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	331c      	adds	r3, #28
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fe65 	bl	8004cac <lis2mdl_block_data_update_set>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	e028      	b.n	8004040 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	331c      	adds	r3, #28
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fdd4 	bl	8004ba2 <lis2mdl_operating_mode_set>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295
 8004004:	e01c      	b.n	8004040 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	331c      	adds	r3, #28
 800400a:	2103      	movs	r1, #3
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fdee 	bl	8004bee <lis2mdl_data_rate_set>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	e010      	b.n	8004040 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	331c      	adds	r3, #28
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fec3 	bl	8004db0 <lis2mdl_self_test_set>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e004      	b.n	8004040 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8a5 	bl	80041a0 <LIS2MDL_MAG_Disable>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800405c:	f04f 33ff 	mov.w	r3, #4294967295
 8004060:	e004      	b.n	800406c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d10b      	bne.n	800409e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004086:	2301      	movs	r3, #1
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	214f      	movs	r1, #79	; 0x4f
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fafb 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	e00c      	b.n	80040b8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	331c      	adds	r3, #28
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fe72 	bl	8004d8e <lis2mdl_device_id_get>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	e000      	b.n	80040b8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2232      	movs	r2, #50	; 0x32
 80040f2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <LIS2MDL_GetCapabilities+0x58>)
 8004108:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	42c80000 	.word	0x42c80000

0800411c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e032      	b.n	8004198 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d11d      	bne.n	8004176 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800413a:	f107 020c 	add.w	r2, r7, #12
 800413e:	2301      	movs	r3, #1
 8004140:	2160      	movs	r1, #96	; 0x60
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 faa0 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e021      	b.n	8004198 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004154:	7b3b      	ldrb	r3, [r7, #12]
 8004156:	f36f 0301 	bfc	r3, #0, #2
 800415a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800415c:	f107 020c 	add.w	r2, r7, #12
 8004160:	2301      	movs	r3, #1
 8004162:	2160      	movs	r1, #96	; 0x60
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fbce 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
 8004174:	e010      	b.n	8004198 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	331c      	adds	r3, #28
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd10 	bl	8004ba2 <lis2mdl_operating_mode_set>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	e004      	b.n	8004198 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e033      	b.n	800421e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d11e      	bne.n	80041fc <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80041be:	f107 020c 	add.w	r2, r7, #12
 80041c2:	2301      	movs	r3, #1
 80041c4:	2160      	movs	r1, #96	; 0x60
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa5e 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e022      	b.n	800421e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80041d8:	7b3b      	ldrb	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	f362 0301 	bfi	r3, r2, #0, #2
 80041e0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80041e2:	f107 020c 	add.w	r2, r7, #12
 80041e6:	2301      	movs	r3, #1
 80041e8:	2160      	movs	r1, #96	; 0x60
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fb8b 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	e010      	b.n	800421e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	331c      	adds	r3, #28
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fccd 	bl	8004ba2 <lis2mdl_operating_mode_set>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	e004      	b.n	800421e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004236:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	331c      	adds	r3, #28
 800425a:	f107 020b 	add.w	r2, r7, #11
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fceb 	bl	8004c3c <lis2mdl_data_rate_get>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	e023      	b.n	80042ba <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d81b      	bhi.n	80042b0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	08004299 	.word	0x08004299
 8004288:	080042a1 	.word	0x080042a1
 800428c:	080042a9 	.word	0x080042a9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004294:	601a      	str	r2, [r3, #0]
      break;
 8004296:	e00f      	b.n	80042b8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800429c:	601a      	str	r2, [r3, #0]
      break;
 800429e:	e00b      	b.n	80042b8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80042a4:	601a      	str	r2, [r3, #0]
      break;
 80042a6:	e007      	b.n	80042b8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80042ac:	601a      	str	r2, [r3, #0]
      break;
 80042ae:	e003      	b.n	80042b8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	60fb      	str	r3, [r7, #12]
      break;
 80042b6:	bf00      	nop
  }

  return ret;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	41200000 	.word	0x41200000
 80042c8:	41a00000 	.word	0x41a00000
 80042cc:	42480000 	.word	0x42480000
 80042d0:	42c80000 	.word	0x42c80000

080042d4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80042e0:	edd7 7a00 	vldr	s15, [r7]
 80042e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d801      	bhi.n	80042f6 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80042f2:	2300      	movs	r3, #0
 80042f4:	e016      	b.n	8004324 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80042f6:	edd7 7a00 	vldr	s15, [r7]
 80042fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80042fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	d801      	bhi.n	800430c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004308:	2301      	movs	r3, #1
 800430a:	e00b      	b.n	8004324 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800430c:	edd7 7a00 	vldr	s15, [r7]
 8004310:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004398 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	d801      	bhi.n	8004322 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800431e:	2302      	movs	r3, #2
 8004320:	e000      	b.n	8004324 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004322:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004324:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d121      	bne.n	8004372 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800432e:	f107 020c 	add.w	r2, r7, #12
 8004332:	2301      	movs	r3, #1
 8004334:	2160      	movs	r1, #96	; 0x60
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9a6 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	e022      	b.n	800438e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	b2da      	uxtb	r2, r3
 8004350:	7b3b      	ldrb	r3, [r7, #12]
 8004352:	f362 0383 	bfi	r3, r2, #2, #2
 8004356:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004358:	f107 020c 	add.w	r2, r7, #12
 800435c:	2301      	movs	r3, #1
 800435e:	2160      	movs	r1, #96	; 0x60
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fad0 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00f      	beq.n	800438c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	e00d      	b.n	800438e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	331c      	adds	r3, #28
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fc37 	bl	8004bee <lis2mdl_data_rate_set>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e000      	b.n	800438e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	42480000 	.word	0x42480000

0800439c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2232      	movs	r2, #50	; 0x32
 80043aa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	331c      	adds	r3, #28
 80043e0:	f107 0208 	add.w	r2, r7, #8
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fc86 	bl	8004cf8 <lis2mdl_magnetic_raw_get>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	e00c      	b.n	8004412 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80043f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004400:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004408:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d137      	bne.n	800449c <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800442c:	f107 0218 	add.w	r2, r7, #24
 8004430:	2306      	movs	r3, #6
 8004432:	2168      	movs	r1, #104	; 0x68
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f927 	bl	8004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
 8004444:	e06f      	b.n	8004526 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004446:	7e7b      	ldrb	r3, [r7, #25]
 8004448:	b21b      	sxth	r3, r3
 800444a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800444c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004450:	b29b      	uxth	r3, r3
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b29a      	uxth	r2, r3
 8004456:	7e3b      	ldrb	r3, [r7, #24]
 8004458:	b29b      	uxth	r3, r3
 800445a:	4413      	add	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	b21b      	sxth	r3, r3
 8004460:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	b21b      	sxth	r3, r3
 8004466:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800446c:	b29b      	uxth	r3, r3
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	b29a      	uxth	r2, r3
 8004472:	7ebb      	ldrb	r3, [r7, #26]
 8004474:	b29b      	uxth	r3, r3
 8004476:	4413      	add	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	b21b      	sxth	r3, r3
 800447c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800447e:	7f7b      	ldrb	r3, [r7, #29]
 8004480:	b21b      	sxth	r3, r3
 8004482:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004484:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004488:	b29b      	uxth	r3, r3
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	b29a      	uxth	r2, r3
 800448e:	7f3b      	ldrb	r3, [r7, #28]
 8004490:	b29b      	uxth	r3, r3
 8004492:	4413      	add	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	b21b      	sxth	r3, r3
 8004498:	82bb      	strh	r3, [r7, #20]
 800449a:	e00d      	b.n	80044b8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	331c      	adds	r3, #28
 80044a0:	f107 0210 	add.w	r2, r7, #16
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fc26 	bl	8004cf8 <lis2mdl_magnetic_raw_get>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	e036      	b.n	8004526 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff feb1 	bl	8004226 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80044c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044dc:	ee17 2a90 	vmov	r2, s15
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80044e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fc:	ee17 2a90 	vmov	r2, s15
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004504:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004510:	edd7 7a03 	vldr	s15, [r7, #12]
 8004514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800451c:	ee17 2a90 	vmov	r2, s15
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
 800453a:	4613      	mov	r3, r2
 800453c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d10b      	bne.n	800455e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004546:	1cba      	adds	r2, r7, #2
 8004548:	78f9      	ldrb	r1, [r7, #3]
 800454a:	2301      	movs	r3, #1
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9da 	bl	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e00e      	b.n	800457c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f103 001c 	add.w	r0, r3, #28
 8004564:	1cba      	adds	r2, r7, #2
 8004566:	78f9      	ldrb	r1, [r7, #3]
 8004568:	2301      	movs	r3, #1
 800456a:	f000 fb02 	bl	8004b72 <lis2mdl_write_reg>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	e000      	b.n	800457c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	460b      	mov	r3, r1
 8004592:	72fb      	strb	r3, [r7, #11]
 8004594:	4613      	mov	r3, r2
 8004596:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10e      	bne.n	80045c2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	695c      	ldr	r4, [r3, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	7b1b      	ldrb	r3, [r3, #12]
 80045ac:	b298      	uxth	r0, r3
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	b299      	uxth	r1, r3
 80045b8:	893b      	ldrh	r3, [r7, #8]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	47a0      	blx	r4
 80045be:	4603      	mov	r3, r0
 80045c0:	e01d      	b.n	80045fe <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d10b      	bne.n	80045e2 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	695c      	ldr	r4, [r3, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	7b1b      	ldrb	r3, [r3, #12]
 80045d2:	b298      	uxth	r0, r3
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	b299      	uxth	r1, r3
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	47a0      	blx	r4
 80045de:	4603      	mov	r3, r0
 80045e0:	e00d      	b.n	80045fe <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	695c      	ldr	r4, [r3, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	7b1b      	ldrb	r3, [r3, #12]
 80045ea:	b298      	uxth	r0, r3
 80045ec:	7afb      	ldrb	r3, [r7, #11]
 80045ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	b299      	uxth	r1, r3
 80045f6:	893b      	ldrh	r3, [r7, #8]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	47a0      	blx	r4
 80045fc:	4603      	mov	r3, r0
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}

08004606 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004606:	b590      	push	{r4, r7, lr}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	461a      	mov	r2, r3
 8004612:	460b      	mov	r3, r1
 8004614:	72fb      	strb	r3, [r7, #11]
 8004616:	4613      	mov	r3, r2
 8004618:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	691c      	ldr	r4, [r3, #16]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	7b1b      	ldrb	r3, [r3, #12]
 800462e:	b298      	uxth	r0, r3
 8004630:	7afb      	ldrb	r3, [r7, #11]
 8004632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004636:	b2db      	uxtb	r3, r3
 8004638:	b299      	uxth	r1, r3
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	47a0      	blx	r4
 8004640:	4603      	mov	r3, r0
 8004642:	e01d      	b.n	8004680 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d10b      	bne.n	8004664 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	691c      	ldr	r4, [r3, #16]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	7b1b      	ldrb	r3, [r3, #12]
 8004654:	b298      	uxth	r0, r3
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	b299      	uxth	r1, r3
 800465a:	893b      	ldrh	r3, [r7, #8]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	47a0      	blx	r4
 8004660:	4603      	mov	r3, r0
 8004662:	e00d      	b.n	8004680 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	691c      	ldr	r4, [r3, #16]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	7b1b      	ldrb	r3, [r3, #12]
 800466c:	b298      	uxth	r0, r3
 800466e:	7afb      	ldrb	r3, [r7, #11]
 8004670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004674:	b2db      	uxtb	r3, r3
 8004676:	b299      	uxth	r1, r3
 8004678:	893b      	ldrh	r3, [r7, #8]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	47a0      	blx	r4
 800467e:	4603      	mov	r3, r0
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd90      	pop	{r4, r7, pc}

08004688 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	; 0x30
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	460b      	mov	r3, r1
 8004696:	72fb      	strb	r3, [r7, #11]
 8004698:	4613      	mov	r3, r2
 800469a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80046ae:	233d      	movs	r3, #61	; 0x3d
 80046b0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80046b2:	2315      	movs	r3, #21
 80046b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80046b8:	2316      	movs	r3, #22
 80046ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80046be:	2317      	movs	r3, #23
 80046c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 80046c4:	2314      	movs	r3, #20
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80046ca:	2344      	movs	r3, #68	; 0x44
 80046cc:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80046ce:	2302      	movs	r3, #2
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80046d4:	2339      	movs	r3, #57	; 0x39
 80046d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80046e0:	2329      	movs	r3, #41	; 0x29
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80046e6:	231e      	movs	r3, #30
 80046e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80046f2:	893b      	ldrh	r3, [r7, #8]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f103 001c 	add.w	r0, r3, #28
 8004710:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004714:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004718:	2301      	movs	r3, #1
 800471a:	f000 fa2a 	bl	8004b72 <lis2mdl_write_reg>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	e0e9      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f103 001c 	add.w	r0, r3, #28
 8004730:	f107 021f 	add.w	r2, r7, #31
 8004734:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004738:	2301      	movs	r3, #1
 800473a:	f000 fa1a 	bl	8004b72 <lis2mdl_write_reg>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	e0d9      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f103 001c 	add.w	r0, r3, #28
 8004750:	f107 020b 	add.w	r2, r7, #11
 8004754:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004758:	2301      	movs	r3, #1
 800475a:	f000 fa0a 	bl	8004b72 <lis2mdl_write_reg>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004764:	f04f 33ff 	mov.w	r3, #4294967295
 8004768:	e0c9      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f103 001c 	add.w	r0, r3, #28
 8004770:	f107 021d 	add.w	r2, r7, #29
 8004774:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004778:	2301      	movs	r3, #1
 800477a:	f000 f9fa 	bl	8004b72 <lis2mdl_write_reg>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004784:	f04f 33ff 	mov.w	r3, #4294967295
 8004788:	e0b9      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f103 001c 	add.w	r0, r3, #28
 8004790:	f107 021e 	add.w	r2, r7, #30
 8004794:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004798:	2301      	movs	r3, #1
 800479a:	f000 f9ea 	bl	8004b72 <lis2mdl_write_reg>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	e0a9      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f103 001c 	add.w	r0, r3, #28
 80047b0:	f107 0220 	add.w	r2, r7, #32
 80047b4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80047b8:	2301      	movs	r3, #1
 80047ba:	f000 f9da 	bl	8004b72 <lis2mdl_write_reg>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	e099      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f103 001c 	add.w	r0, r3, #28
 80047d0:	f107 021c 	add.w	r2, r7, #28
 80047d4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80047d8:	2301      	movs	r3, #1
 80047da:	f000 f9b2 	bl	8004b42 <lis2mdl_read_reg>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	e089      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80047ea:	7f3b      	ldrb	r3, [r7, #28]
 80047ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d102      	bne.n	80047fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80047f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80047f8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f103 001c 	add.w	r0, r3, #28
 8004800:	f107 021c 	add.w	r2, r7, #28
 8004804:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004808:	2301      	movs	r3, #1
 800480a:	f000 f9b2 	bl	8004b72 <lis2mdl_write_reg>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	e071      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f103 001c 	add.w	r0, r3, #28
 8004820:	f107 0214 	add.w	r2, r7, #20
 8004824:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004828:	2306      	movs	r3, #6
 800482a:	f000 f98a 	bl	8004b42 <lis2mdl_read_reg>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004834:	f04f 33ff 	mov.w	r3, #4294967295
 8004838:	e061      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f103 001c 	add.w	r0, r3, #28
 8004840:	f107 021b 	add.w	r2, r7, #27
 8004844:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004848:	2301      	movs	r3, #1
 800484a:	f000 f97a 	bl	8004b42 <lis2mdl_read_reg>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	e051      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800485a:	7efa      	ldrb	r2, [r7, #27]
 800485c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004860:	4013      	ands	r3, r2
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004868:	429a      	cmp	r2, r3
 800486a:	d1e6      	bne.n	800483a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f103 001c 	add.w	r0, r3, #28
 8004872:	f107 021b 	add.w	r2, r7, #27
 8004876:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800487a:	2301      	movs	r3, #1
 800487c:	f000 f961 	bl	8004b42 <lis2mdl_read_reg>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	e038      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800488c:	7efa      	ldrb	r2, [r7, #27]
 800488e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004892:	4013      	ands	r3, r2
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800489a:	429a      	cmp	r2, r3
 800489c:	d1e6      	bne.n	800486c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f103 001c 	add.w	r0, r3, #28
 80048a4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80048a8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80048ac:	2301      	movs	r3, #1
 80048ae:	f000 f960 	bl	8004b72 <lis2mdl_write_reg>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e01f      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f103 001c 	add.w	r0, r3, #28
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	f000 f939 	bl	8004b42 <lis2mdl_read_reg>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	e010      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f103 001c 	add.w	r0, r3, #28
 80048e2:	f107 0220 	add.w	r2, r7, #32
 80048e6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80048ea:	2301      	movs	r3, #1
 80048ec:	f000 f941 	bl	8004b72 <lis2mdl_write_reg>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e000      	b.n	80048fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3730      	adds	r7, #48	; 0x30
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b08c      	sub	sp, #48	; 0x30
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	461a      	mov	r2, r3
 8004912:	460b      	mov	r3, r1
 8004914:	72fb      	strb	r3, [r7, #11]
 8004916:	4613      	mov	r3, r2
 8004918:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004920:	2340      	movs	r3, #64	; 0x40
 8004922:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800492c:	233c      	movs	r3, #60	; 0x3c
 800492e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004930:	2315      	movs	r3, #21
 8004932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004936:	2316      	movs	r3, #22
 8004938:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800493c:	2317      	movs	r3, #23
 800493e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004946:	2314      	movs	r3, #20
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800494c:	2344      	movs	r3, #68	; 0x44
 800494e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004950:	2339      	movs	r3, #57	; 0x39
 8004952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800495c:	2329      	movs	r3, #41	; 0x29
 800495e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004962:	231e      	movs	r3, #30
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800496e:	2310      	movs	r3, #16
 8004970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004980:	230e      	movs	r3, #14
 8004982:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f103 001c 	add.w	r0, r3, #28
 800498c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004990:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004994:	2301      	movs	r3, #1
 8004996:	f000 f8ec 	bl	8004b72 <lis2mdl_write_reg>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295
 80049a4:	e0c9      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f103 001c 	add.w	r0, r3, #28
 80049ac:	f107 021f 	add.w	r2, r7, #31
 80049b0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80049b4:	2301      	movs	r3, #1
 80049b6:	f000 f8dc 	bl	8004b72 <lis2mdl_write_reg>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
 80049c4:	e0b9      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f103 001c 	add.w	r0, r3, #28
 80049cc:	f107 020b 	add.w	r2, r7, #11
 80049d0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80049d4:	2301      	movs	r3, #1
 80049d6:	f000 f8cc 	bl	8004b72 <lis2mdl_write_reg>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	e0a9      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f103 001c 	add.w	r0, r3, #28
 80049ec:	f107 021e 	add.w	r2, r7, #30
 80049f0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80049f4:	2301      	movs	r3, #1
 80049f6:	f000 f8bc 	bl	8004b72 <lis2mdl_write_reg>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	e099      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f103 001c 	add.w	r0, r3, #28
 8004a0c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004a10:	2301      	movs	r3, #1
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	f000 f8ad 	bl	8004b72 <lis2mdl_write_reg>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	e08a      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f103 001c 	add.w	r0, r3, #28
 8004a2a:	f107 021d 	add.w	r2, r7, #29
 8004a2e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004a32:	2301      	movs	r3, #1
 8004a34:	f000 f89d 	bl	8004b72 <lis2mdl_write_reg>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	e07a      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f103 001c 	add.w	r0, r3, #28
 8004a4a:	f107 0220 	add.w	r2, r7, #32
 8004a4e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004a52:	2301      	movs	r3, #1
 8004a54:	f000 f88d 	bl	8004b72 <lis2mdl_write_reg>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	e06a      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f103 001c 	add.w	r0, r3, #28
 8004a6a:	f107 021c 	add.w	r2, r7, #28
 8004a6e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004a72:	2301      	movs	r3, #1
 8004a74:	f000 f865 	bl	8004b42 <lis2mdl_read_reg>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a82:	e05a      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004a84:	7f3b      	ldrb	r3, [r7, #28]
 8004a86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d102      	bne.n	8004a94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a92:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f103 001c 	add.w	r0, r3, #28
 8004a9a:	f107 021c 	add.w	r2, r7, #28
 8004a9e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f000 f865 	bl	8004b72 <lis2mdl_write_reg>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e042      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f103 001c 	add.w	r0, r3, #28
 8004aba:	f107 0214 	add.w	r2, r7, #20
 8004abe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	f000 f83d 	bl	8004b42 <lis2mdl_read_reg>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e032      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f103 001c 	add.w	r0, r3, #28
 8004ada:	f107 021b 	add.w	r2, r7, #27
 8004ade:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f000 f82d 	bl	8004b42 <lis2mdl_read_reg>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	e022      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004af4:	7efa      	ldrb	r2, [r7, #27]
 8004af6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004afa:	4013      	ands	r3, r2
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d1e6      	bne.n	8004ad4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f103 001c 	add.w	r0, r3, #28
 8004b0c:	f107 021b 	add.w	r2, r7, #27
 8004b10:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004b14:	2301      	movs	r3, #1
 8004b16:	f000 f814 	bl	8004b42 <lis2mdl_read_reg>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	e009      	b.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004b26:	7efa      	ldrb	r2, [r7, #27]
 8004b28:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1e6      	bne.n	8004b06 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3730      	adds	r7, #48	; 0x30
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004b42:	b590      	push	{r4, r7, lr}
 8004b44:	b087      	sub	sp, #28
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	460b      	mov	r3, r1
 8004b50:	72fb      	strb	r3, [r7, #11]
 8004b52:	4613      	mov	r3, r2
 8004b54:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685c      	ldr	r4, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6898      	ldr	r0, [r3, #8]
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	7af9      	ldrb	r1, [r7, #11]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	47a0      	blx	r4
 8004b66:	6178      	str	r0, [r7, #20]

  return ret;
 8004b68:	697b      	ldr	r3, [r7, #20]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd90      	pop	{r4, r7, pc}

08004b72 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004b72:	b590      	push	{r4, r7, lr}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	460b      	mov	r3, r1
 8004b80:	72fb      	strb	r3, [r7, #11]
 8004b82:	4613      	mov	r3, r2
 8004b84:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681c      	ldr	r4, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6898      	ldr	r0, [r3, #8]
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	7af9      	ldrb	r1, [r7, #11]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	47a0      	blx	r4
 8004b96:	6178      	str	r0, [r7, #20]

  return ret;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bae:	f107 0208 	add.w	r2, r7, #8
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	2160      	movs	r1, #96	; 0x60
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ffc3 	bl	8004b42 <lis2mdl_read_reg>
 8004bbc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	7a3b      	ldrb	r3, [r7, #8]
 8004bce:	f362 0301 	bfi	r3, r2, #0, #2
 8004bd2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bd4:	f107 0208 	add.w	r2, r7, #8
 8004bd8:	2301      	movs	r3, #1
 8004bda:	2160      	movs	r1, #96	; 0x60
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ffc8 	bl	8004b72 <lis2mdl_write_reg>
 8004be2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004be4:	68fb      	ldr	r3, [r7, #12]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004bfa:	f107 0208 	add.w	r2, r7, #8
 8004bfe:	2301      	movs	r3, #1
 8004c00:	2160      	movs	r1, #96	; 0x60
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff9d 	bl	8004b42 <lis2mdl_read_reg>
 8004c08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	7a3b      	ldrb	r3, [r7, #8]
 8004c1a:	f362 0383 	bfi	r3, r2, #2, #2
 8004c1e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c20:	f107 0208 	add.w	r2, r7, #8
 8004c24:	2301      	movs	r3, #1
 8004c26:	2160      	movs	r1, #96	; 0x60
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffa2 	bl	8004b72 <lis2mdl_write_reg>
 8004c2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c46:	f107 0208 	add.w	r2, r7, #8
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2160      	movs	r1, #96	; 0x60
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff ff77 	bl	8004b42 <lis2mdl_read_reg>
 8004c54:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004c56:	7a3b      	ldrb	r3, [r7, #8]
 8004c58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d81a      	bhi.n	8004c98 <lis2mdl_data_rate_get+0x5c>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <lis2mdl_data_rate_get+0x2c>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c81 	.word	0x08004c81
 8004c70:	08004c89 	.word	0x08004c89
 8004c74:	08004c91 	.word	0x08004c91
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
      break;
 8004c7e:	e00f      	b.n	8004ca0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
      break;
 8004c86:	e00b      	b.n	8004ca0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	701a      	strb	r2, [r3, #0]
      break;
 8004c8e:	e007      	b.n	8004ca0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2203      	movs	r2, #3
 8004c94:	701a      	strb	r2, [r3, #0]
      break;
 8004c96:	e003      	b.n	8004ca0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
      break;
 8004c9e:	bf00      	nop
  }

  return ret;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop

08004cac <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004cb8:	f107 0208 	add.w	r2, r7, #8
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	2162      	movs	r1, #98	; 0x62
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff3e 	bl	8004b42 <lis2mdl_read_reg>
 8004cc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	7a3b      	ldrb	r3, [r7, #8]
 8004cd8:	f362 1304 	bfi	r3, r2, #4, #1
 8004cdc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004cde:	f107 0208 	add.w	r2, r7, #8
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	2162      	movs	r1, #98	; 0x62
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff43 	bl	8004b72 <lis2mdl_write_reg>
 8004cec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004d02:	f107 020c 	add.w	r2, r7, #12
 8004d06:	2306      	movs	r3, #6
 8004d08:	2168      	movs	r1, #104	; 0x68
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff ff19 	bl	8004b42 <lis2mdl_read_reg>
 8004d10:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004d12:	7b7b      	ldrb	r3, [r7, #13]
 8004d14:	b21a      	sxth	r2, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	7b3b      	ldrb	r3, [r7, #12]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b21a      	sxth	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	b212      	sxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	3302      	adds	r3, #2
 8004d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	7bbb      	ldrb	r3, [r7, #14]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	3302      	adds	r3, #2
 8004d58:	b212      	sxth	r2, r2
 8004d5a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004d5c:	7c7a      	ldrb	r2, [r7, #17]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	3304      	adds	r3, #4
 8004d62:	b212      	sxth	r2, r2
 8004d64:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	7c3b      	ldrb	r3, [r7, #16]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	b212      	sxth	r2, r2
 8004d82:	801a      	strh	r2, [r3, #0]

  return ret;
 8004d84:	697b      	ldr	r3, [r7, #20]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004d98:	2301      	movs	r3, #1
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	214f      	movs	r1, #79	; 0x4f
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fecf 	bl	8004b42 <lis2mdl_read_reg>
 8004da4:	60f8      	str	r0, [r7, #12]

  return ret;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004dbc:	f107 0208 	add.w	r2, r7, #8
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	2162      	movs	r1, #98	; 0x62
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff febc 	bl	8004b42 <lis2mdl_read_reg>
 8004dca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	7a3b      	ldrb	r3, [r7, #8]
 8004ddc:	f362 0341 	bfi	r3, r2, #1, #1
 8004de0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004de2:	f107 0208 	add.w	r2, r7, #8
 8004de6:	2301      	movs	r3, #1
 8004de8:	2162      	movs	r1, #98	; 0x62
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fec1 	bl	8004b72 <lis2mdl_write_reg>
 8004df0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e08:	f107 0208 	add.w	r2, r7, #8
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	2162      	movs	r1, #98	; 0x62
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fe96 	bl	8004b42 <lis2mdl_read_reg>
 8004e16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	7a3b      	ldrb	r3, [r7, #8]
 8004e28:	f362 1345 	bfi	r3, r2, #5, #1
 8004e2c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e2e:	f107 0208 	add.w	r2, r7, #8
 8004e32:	2301      	movs	r3, #1
 8004e34:	2162      	movs	r1, #98	; 0x62
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fe9b 	bl	8004b72 <lis2mdl_write_reg>
 8004e3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e04d      	b.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	7b1a      	ldrb	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <LPS22HH_RegisterBusIO+0xc4>)
 8004ea0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <LPS22HH_RegisterBusIO+0xc8>)
 8004ea6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e020      	b.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4798      	blx	r3
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 8004eca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e016      	b.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d112      	bne.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10d      	bne.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004ee8:	7afb      	ldrb	r3, [r7, #11]
 8004eea:	461a      	mov	r2, r3
 8004eec:	2110      	movs	r1, #16
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f9df 	bl	80052b2 <LPS22HH_Write_Reg>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	080055db 	.word	0x080055db
 8004f10:	08005611 	.word	0x08005611

08004f14 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fb0e 	bl	8005548 <LPS22HH_Initialize>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e004      	b.n	8004f42 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d111      	bne.n	8004f80 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f877 	bl	8005050 <LPS22HH_PRESS_Disable>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	e00d      	b.n	8004f8a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f918 	bl	80051a4 <LPS22HH_TEMP_Disable>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	e004      	b.n	8004f8a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	331c      	adds	r3, #28
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fd1a 	bl	80059dc <lps22hh_device_id_get>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb2:	e000      	b.n	8004fb6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <LPS22HH_GetCapabilities+0x44>)
 8004fee:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4a04      	ldr	r2, [pc, #16]	; (8005004 <LPS22HH_GetCapabilities+0x44>)
 8004ff4:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	43480000 	.word	0x43480000

08005008 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e014      	b.n	8005048 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f103 021c 	add.w	r2, r3, #28
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 fb93 	bl	8005758 <lps22hh_data_rate_set>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005038:	f04f 33ff 	mov.w	r3, #4294967295
 800503c:	e004      	b.n	8005048 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e024      	b.n	80050b0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11a      	bne.n	80050a6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 021c 	add.w	r2, r3, #28
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	332b      	adds	r3, #43	; 0x2b
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 fbb9 	bl	80057f4 <lps22hh_data_rate_get>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	e010      	b.n	80050b0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	331c      	adds	r3, #28
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fb5f 	bl	8005758 <lps22hh_data_rate_set>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80050a0:	f04f 33ff 	mov.w	r3, #4294967295
 80050a4:	e004      	b.n	80050b0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f90f 	bl	80052e8 <LPS22HH_GetOutputDataRate>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d106      	bne.n	80050f8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80050ea:	ed97 0a00 	vldr	s0, [r7]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f95e 	bl	80053b0 <LPS22HH_SetOutputDataRate_When_Enabled>
 80050f4:	4603      	mov	r3, r0
 80050f6:	e005      	b.n	8005104 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80050f8:	ed97 0a00 	vldr	s0, [r7]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9c9 	bl	8005494 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005102:	4603      	mov	r3, r0
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005116:	f107 030c 	add.w	r3, r7, #12
 800511a:	2204      	movs	r2, #4
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f00a fa3e 	bl	800f5a0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	331c      	adds	r3, #28
 8005128:	f107 020c 	add.w	r2, r7, #12
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fc08 	bl	8005944 <lps22hh_pressure_raw_get>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	e009      	b.n	8005154 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fab0 	bl	80056a8 <lps22hh_from_lsb_to_hpa>
 8005148:	eef0 7a40 	vmov.f32	s15, s0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e014      	b.n	800519c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 021c 	add.w	r2, r3, #28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f000 fae9 	bl	8005758 <lps22hh_data_rate_set>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	e004      	b.n	800519c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e024      	b.n	8005204 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d11a      	bne.n	80051fa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f103 021c 	add.w	r2, r3, #28
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	332b      	adds	r3, #43	; 0x2b
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f000 fb0f 	bl	80057f4 <lps22hh_data_rate_get>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80051dc:	f04f 33ff 	mov.w	r3, #4294967295
 80051e0:	e010      	b.n	8005204 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	331c      	adds	r3, #28
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fab5 	bl	8005758 <lps22hh_data_rate_set>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	e004      	b.n	8005204 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f865 	bl	80052e8 <LPS22HH_GetOutputDataRate>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800523a:	2b01      	cmp	r3, #1
 800523c:	d106      	bne.n	800524c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800523e:	ed97 0a00 	vldr	s0, [r7]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8b4 	bl	80053b0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005248:	4603      	mov	r3, r0
 800524a:	e005      	b.n	8005258 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800524c:	ed97 0a00 	vldr	s0, [r7]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f91f 	bl	8005494 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005256:	4603      	mov	r3, r0
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800526a:	f107 030c 	add.w	r3, r7, #12
 800526e:	2202      	movs	r2, #2
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f00a f994 	bl	800f5a0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	331c      	adds	r3, #28
 800527c:	f107 020c 	add.w	r2, r7, #12
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fb87 	bl	8005996 <lps22hh_temperature_raw_get>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e00a      	b.n	80052aa <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005294:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa1d 	bl	80056d8 <lps22hh_from_lsb_to_celsius>
 800529e:	eef0 7a40 	vmov.f32	s15, s0
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
 80052be:	4613      	mov	r3, r2
 80052c0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f103 001c 	add.w	r0, r3, #28
 80052c8:	1cba      	adds	r2, r7, #2
 80052ca:	78f9      	ldrb	r1, [r7, #3]
 80052cc:	2301      	movs	r3, #1
 80052ce:	f000 f9d2 	bl	8005676 <lps22hh_write_reg>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	e000      	b.n	80052e0 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	331c      	adds	r3, #28
 80052fa:	f107 020b 	add.w	r2, r7, #11
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fa77 	bl	80057f4 <lps22hh_data_rate_get>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	e03d      	b.n	800538e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	2b07      	cmp	r3, #7
 8005316:	d835      	bhi.n	8005384 <LPS22HH_GetOutputDataRate+0x9c>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <LPS22HH_GetOutputDataRate+0x38>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005341 	.word	0x08005341
 8005324:	0800534b 	.word	0x0800534b
 8005328:	08005355 	.word	0x08005355
 800532c:	0800535d 	.word	0x0800535d
 8005330:	08005365 	.word	0x08005365
 8005334:	0800536d 	.word	0x0800536d
 8005338:	08005375 	.word	0x08005375
 800533c:	0800537d 	.word	0x0800537d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
      break;
 8005348:	e020      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005350:	601a      	str	r2, [r3, #0]
      break;
 8005352:	e01b      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <LPS22HH_GetOutputDataRate+0xb0>)
 8005358:	601a      	str	r2, [r3, #0]
      break;
 800535a:	e017      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4a0f      	ldr	r2, [pc, #60]	; (800539c <LPS22HH_GetOutputDataRate+0xb4>)
 8005360:	601a      	str	r2, [r3, #0]
      break;
 8005362:	e013      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <LPS22HH_GetOutputDataRate+0xb8>)
 8005368:	601a      	str	r2, [r3, #0]
      break;
 800536a:	e00f      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <LPS22HH_GetOutputDataRate+0xbc>)
 8005370:	601a      	str	r2, [r3, #0]
      break;
 8005372:	e00b      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <LPS22HH_GetOutputDataRate+0xc0>)
 8005378:	601a      	str	r2, [r3, #0]
      break;
 800537a:	e007      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <LPS22HH_GetOutputDataRate+0xc4>)
 8005380:	601a      	str	r2, [r3, #0]
      break;
 8005382:	e003      	b.n	800538c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	60fb      	str	r3, [r7, #12]
      break;
 800538a:	bf00      	nop
  }

  return ret;
 800538c:	68fb      	ldr	r3, [r7, #12]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	41200000 	.word	0x41200000
 800539c:	41c80000 	.word	0x41c80000
 80053a0:	42480000 	.word	0x42480000
 80053a4:	42960000 	.word	0x42960000
 80053a8:	42c80000 	.word	0x42c80000
 80053ac:	43480000 	.word	0x43480000

080053b0 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80053bc:	edd7 7a00 	vldr	s15, [r7]
 80053c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053cc:	d801      	bhi.n	80053d2 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e037      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80053d2:	edd7 7a00 	vldr	s15, [r7]
 80053d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	d801      	bhi.n	80053e8 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e02c      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80053e8:	edd7 7a00 	vldr	s15, [r7]
 80053ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80053f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	d801      	bhi.n	80053fe <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 80053fa:	2303      	movs	r3, #3
 80053fc:	e021      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80053fe:	edd7 7a00 	vldr	s15, [r7]
 8005402:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005488 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540e:	d801      	bhi.n	8005414 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005410:	2304      	movs	r3, #4
 8005412:	e016      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005414:	edd7 7a00 	vldr	s15, [r7]
 8005418:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800548c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 800541c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	d801      	bhi.n	800542a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005426:	2305      	movs	r3, #5
 8005428:	e00b      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800542a:	edd7 7a00 	vldr	s15, [r7]
 800542e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005490 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d801      	bhi.n	8005440 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 800543c:	2306      	movs	r3, #6
 800543e:	e000      	b.n	8005442 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005440:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005442:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	331c      	adds	r3, #28
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f983 	bl	8005758 <lps22hh_data_rate_set>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	e00f      	b.n	800547e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f103 021c 	add.w	r2, r3, #28
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	332b      	adds	r3, #43	; 0x2b
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 f9c2 	bl	80057f4 <lps22hh_data_rate_get>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	e000      	b.n	800547e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	42480000 	.word	0x42480000
 800548c:	42960000 	.word	0x42960000
 8005490:	42c80000 	.word	0x42c80000

08005494 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80054a0:	edd7 7a00 	vldr	s15, [r7]
 80054a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	d801      	bhi.n	80054b6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e037      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80054b6:	edd7 7a00 	vldr	s15, [r7]
 80054ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80054be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d801      	bhi.n	80054cc <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e02c      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80054cc:	edd7 7a00 	vldr	s15, [r7]
 80054d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d801      	bhi.n	80054e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 80054de:	2303      	movs	r3, #3
 80054e0:	e021      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80054e2:	edd7 7a00 	vldr	s15, [r7]
 80054e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800553c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	d801      	bhi.n	80054f8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 80054f4:	2304      	movs	r3, #4
 80054f6:	e016      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80054f8:	edd7 7a00 	vldr	s15, [r7]
 80054fc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005540 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d801      	bhi.n	800550e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800550a:	2305      	movs	r3, #5
 800550c:	e00b      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800550e:	edd7 7a00 	vldr	s15, [r7]
 8005512:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005544 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d801      	bhi.n	8005524 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005520:	2306      	movs	r3, #6
 8005522:	e000      	b.n	8005526 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005524:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	42480000 	.word	0x42480000
 8005540:	42960000 	.word	0x42960000
 8005544:	42c80000 	.word	0x42c80000

08005548 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	331c      	adds	r3, #28
 8005554:	2111      	movs	r1, #17
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fa9d 	bl	8005a96 <lps22hh_i3c_interface_set>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	e034      	b.n	80055d2 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	331c      	adds	r3, #28
 800556c:	2110      	movs	r1, #16
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f8f2 	bl	8005758 <lps22hh_data_rate_set>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	e028      	b.n	80055d2 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	331c      	adds	r3, #28
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa5f 	bl	8005a4a <lps22hh_lp_bandwidth_set>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	e01c      	b.n	80055d2 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	331c      	adds	r3, #28
 800559c:	2101      	movs	r1, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f8b4 	bl	800570c <lps22hh_block_data_update_set>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	e010      	b.n	80055d2 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	331c      	adds	r3, #28
 80055b4:	2101      	movs	r1, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa21 	bl	80059fe <lps22hh_auto_increment_set>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	e004      	b.n	80055d2 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2203      	movs	r2, #3
 80055cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055da:	b590      	push	{r4, r7, lr}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	461a      	mov	r2, r3
 80055e6:	460b      	mov	r3, r1
 80055e8:	72fb      	strb	r3, [r7, #11]
 80055ea:	4613      	mov	r3, r2
 80055ec:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	695c      	ldr	r4, [r3, #20]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	7b1b      	ldrb	r3, [r3, #12]
 80055fa:	b298      	uxth	r0, r3
 80055fc:	7afb      	ldrb	r3, [r7, #11]
 80055fe:	b299      	uxth	r1, r3
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	47a0      	blx	r4
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}

08005610 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	461a      	mov	r2, r3
 800561c:	460b      	mov	r3, r1
 800561e:	72fb      	strb	r3, [r7, #11]
 8005620:	4613      	mov	r3, r2
 8005622:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	691c      	ldr	r4, [r3, #16]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	b298      	uxth	r0, r3
 8005632:	7afb      	ldrb	r3, [r7, #11]
 8005634:	b299      	uxth	r1, r3
 8005636:	893b      	ldrh	r3, [r7, #8]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	47a0      	blx	r4
 800563c:	4603      	mov	r3, r0
}
 800563e:	4618      	mov	r0, r3
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}

08005646 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005646:	b590      	push	{r4, r7, lr}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	461a      	mov	r2, r3
 8005652:	460b      	mov	r3, r1
 8005654:	72fb      	strb	r3, [r7, #11]
 8005656:	4613      	mov	r3, r2
 8005658:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685c      	ldr	r4, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6898      	ldr	r0, [r3, #8]
 8005662:	893b      	ldrh	r3, [r7, #8]
 8005664:	7af9      	ldrb	r1, [r7, #11]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	47a0      	blx	r4
 800566a:	6178      	str	r0, [r7, #20]

  return ret;
 800566c:	697b      	ldr	r3, [r7, #20]
}
 800566e:	4618      	mov	r0, r3
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}

08005676 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005676:	b590      	push	{r4, r7, lr}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	461a      	mov	r2, r3
 8005682:	460b      	mov	r3, r1
 8005684:	72fb      	strb	r3, [r7, #11]
 8005686:	4613      	mov	r3, r2
 8005688:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681c      	ldr	r4, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6898      	ldr	r0, [r3, #8]
 8005692:	893b      	ldrh	r3, [r7, #8]
 8005694:	7af9      	ldrb	r1, [r7, #11]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	47a0      	blx	r4
 800569a:	6178      	str	r0, [r7, #20]

  return ret;
 800569c:	697b      	ldr	r3, [r7, #20]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}
	...

080056a8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80056d4 <lps22hh_from_lsb_to_hpa+0x2c>
 80056be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80056c6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	49800000 	.word	0x49800000

080056d8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80056e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005708 <lps22hh_from_lsb_to_celsius+0x30>
 80056f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80056fa:	eeb0 0a67 	vmov.f32	s0, s15
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	42c80000 	.word	0x42c80000

0800570c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005718:	f107 0208 	add.w	r2, r7, #8
 800571c:	2301      	movs	r3, #1
 800571e:	2110      	movs	r1, #16
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff ff90 	bl	8005646 <lps22hh_read_reg>
 8005726:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	7a3b      	ldrb	r3, [r7, #8]
 8005738:	f362 0341 	bfi	r3, r2, #1, #1
 800573c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800573e:	f107 0208 	add.w	r2, r7, #8
 8005742:	2301      	movs	r3, #1
 8005744:	2110      	movs	r1, #16
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff95 	bl	8005676 <lps22hh_write_reg>
 800574c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005764:	f107 0210 	add.w	r2, r7, #16
 8005768:	2301      	movs	r3, #1
 800576a:	2110      	movs	r1, #16
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff6a 	bl	8005646 <lps22hh_read_reg>
 8005772:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800577a:	f107 020c 	add.w	r2, r7, #12
 800577e:	2301      	movs	r3, #1
 8005780:	2111      	movs	r1, #17
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff5f 	bl	8005646 <lps22hh_read_reg>
 8005788:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10f      	bne.n	80057b0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	b2da      	uxtb	r2, r3
 8005798:	7c3b      	ldrb	r3, [r7, #16]
 800579a:	f362 1306 	bfi	r3, r2, #4, #3
 800579e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80057a0:	f107 0210 	add.w	r2, r7, #16
 80057a4:	2301      	movs	r3, #1
 80057a6:	2110      	movs	r1, #16
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff64 	bl	8005676 <lps22hh_write_reg>
 80057ae:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d119      	bne.n	80057ea <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	7b3b      	ldrb	r3, [r7, #12]
 80057c2:	f362 0341 	bfi	r3, r2, #1, #1
 80057c6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	08db      	lsrs	r3, r3, #3
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	f362 0300 	bfi	r3, r2, #0, #1
 80057d8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80057da:	f107 020c 	add.w	r2, r7, #12
 80057de:	2301      	movs	r3, #1
 80057e0:	2111      	movs	r1, #17
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff ff47 	bl	8005676 <lps22hh_write_reg>
 80057e8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80057fe:	f107 0210 	add.w	r2, r7, #16
 8005802:	2301      	movs	r3, #1
 8005804:	2110      	movs	r1, #16
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff1d 	bl	8005646 <lps22hh_read_reg>
 800580c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005814:	f107 020c 	add.w	r2, r7, #12
 8005818:	2301      	movs	r3, #1
 800581a:	2111      	movs	r1, #17
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff12 	bl	8005646 <lps22hh_read_reg>
 8005822:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 8086 	bne.w	8005938 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800582c:	f107 020c 	add.w	r2, r7, #12
 8005830:	2301      	movs	r3, #1
 8005832:	2111      	movs	r1, #17
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff06 	bl	8005646 <lps22hh_read_reg>
 800583a:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800583c:	7b3b      	ldrb	r3, [r7, #12]
 800583e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	7b3b      	ldrb	r3, [r7, #12]
 8005848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8005852:	7c3a      	ldrb	r2, [r7, #16]
 8005854:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005858:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800585a:	4413      	add	r3, r2
 800585c:	2b15      	cmp	r3, #21
 800585e:	d867      	bhi.n	8005930 <lps22hh_data_rate_get+0x13c>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <lps22hh_data_rate_get+0x74>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058c1 	.word	0x080058c1
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058d9 	.word	0x080058d9
 8005874:	080058e1 	.word	0x080058e1
 8005878:	080058e9 	.word	0x080058e9
 800587c:	080058f1 	.word	0x080058f1
 8005880:	08005921 	.word	0x08005921
 8005884:	08005929 	.word	0x08005929
 8005888:	080058c9 	.word	0x080058c9
 800588c:	08005931 	.word	0x08005931
 8005890:	08005931 	.word	0x08005931
 8005894:	08005931 	.word	0x08005931
 8005898:	08005931 	.word	0x08005931
 800589c:	08005931 	.word	0x08005931
 80058a0:	08005931 	.word	0x08005931
 80058a4:	08005931 	.word	0x08005931
 80058a8:	08005931 	.word	0x08005931
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	08005901 	.word	0x08005901
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005919 	.word	0x08005919
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
        break;
 80058c6:	e038      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2208      	movs	r2, #8
 80058cc:	701a      	strb	r2, [r3, #0]
        break;
 80058ce:	e034      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
        break;
 80058d6:	e030      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2202      	movs	r2, #2
 80058dc:	701a      	strb	r2, [r3, #0]
        break;
 80058de:	e02c      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2203      	movs	r2, #3
 80058e4:	701a      	strb	r2, [r3, #0]
        break;
 80058e6:	e028      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2204      	movs	r2, #4
 80058ec:	701a      	strb	r2, [r3, #0]
        break;
 80058ee:	e024      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2205      	movs	r2, #5
 80058f4:	701a      	strb	r2, [r3, #0]
        break;
 80058f6:	e020      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2211      	movs	r2, #17
 80058fc:	701a      	strb	r2, [r3, #0]
        break;
 80058fe:	e01c      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2212      	movs	r2, #18
 8005904:	701a      	strb	r2, [r3, #0]
        break;
 8005906:	e018      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2213      	movs	r2, #19
 800590c:	701a      	strb	r2, [r3, #0]
        break;
 800590e:	e014      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2214      	movs	r2, #20
 8005914:	701a      	strb	r2, [r3, #0]
        break;
 8005916:	e010      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2215      	movs	r2, #21
 800591c:	701a      	strb	r2, [r3, #0]
        break;
 800591e:	e00c      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2206      	movs	r2, #6
 8005924:	701a      	strb	r2, [r3, #0]
        break;
 8005926:	e008      	b.n	800593a <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2207      	movs	r2, #7
 800592c:	701a      	strb	r2, [r3, #0]
        break;
 800592e:	e004      	b.n	800593a <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
        break;
 8005936:	e000      	b.n	800593a <lps22hh_data_rate_get+0x146>
    }
  }
 8005938:	bf00      	nop

  return ret;
 800593a:	697b      	ldr	r3, [r7, #20]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800594e:	f107 0208 	add.w	r2, r7, #8
 8005952:	2303      	movs	r3, #3
 8005954:	2128      	movs	r1, #40	; 0x28
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fe75 	bl	8005646 <lps22hh_read_reg>
 800595c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800595e:	7abb      	ldrb	r3, [r7, #10]
 8005960:	461a      	mov	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	7a7a      	ldrb	r2, [r7, #9]
 800596e:	441a      	add	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	7a3a      	ldrb	r2, [r7, #8]
 800597c:	441a      	add	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	601a      	str	r2, [r3, #0]

  return ret;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80059a0:	f107 0208 	add.w	r2, r7, #8
 80059a4:	2302      	movs	r3, #2
 80059a6:	212b      	movs	r1, #43	; 0x2b
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fe4c 	bl	8005646 <lps22hh_read_reg>
 80059ae:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80059b0:	7a7b      	ldrb	r3, [r7, #9]
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	7a3b      	ldrb	r3, [r7, #8]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	b21a      	sxth	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	801a      	strh	r2, [r3, #0]

  return ret;
 80059d2:	68fb      	ldr	r3, [r7, #12]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80059e6:	2301      	movs	r3, #1
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	210f      	movs	r1, #15
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff fe2a 	bl	8005646 <lps22hh_read_reg>
 80059f2:	60f8      	str	r0, [r7, #12]

  return ret;
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005a0a:	f107 0208 	add.w	r2, r7, #8
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2111      	movs	r1, #17
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fe17 	bl	8005646 <lps22hh_read_reg>
 8005a18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10f      	bne.n	8005a40 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	7a3b      	ldrb	r3, [r7, #8]
 8005a2a:	f362 1304 	bfi	r3, r2, #4, #1
 8005a2e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005a30:	f107 0208 	add.w	r2, r7, #8
 8005a34:	2301      	movs	r3, #1
 8005a36:	2111      	movs	r1, #17
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fe1c 	bl	8005676 <lps22hh_write_reg>
 8005a3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005a56:	f107 0208 	add.w	r2, r7, #8
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fdf1 	bl	8005646 <lps22hh_read_reg>
 8005a64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	7a3b      	ldrb	r3, [r7, #8]
 8005a76:	f362 0383 	bfi	r3, r2, #2, #2
 8005a7a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005a7c:	f107 0208 	add.w	r2, r7, #8
 8005a80:	2301      	movs	r3, #1
 8005a82:	2110      	movs	r1, #16
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fdf6 	bl	8005676 <lps22hh_write_reg>
 8005a8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005aa2:	f107 0208 	add.w	r2, r7, #8
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	210e      	movs	r1, #14
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fdcb 	bl	8005646 <lps22hh_read_reg>
 8005ab0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d118      	bne.n	8005aea <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	7a3b      	ldrb	r3, [r7, #8]
 8005ac2:	f362 0341 	bfi	r3, r2, #1, #1
 8005ac6:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	7a3b      	ldrb	r3, [r7, #8]
 8005ad4:	f362 13c7 	bfi	r3, r2, #7, #1
 8005ad8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005ada:	f107 0208 	add.w	r2, r7, #8
 8005ade:	2301      	movs	r3, #1
 8005ae0:	210e      	movs	r1, #14
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fdc7 	bl	8005676 <lps22hh_write_reg>
 8005ae8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d103      	bne.n	8005b10 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e04d      	b.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	7b1a      	ldrb	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <LSM6DSO_RegisterBusIO+0xc4>)
 8005b4c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <LSM6DSO_RegisterBusIO+0xc8>)
 8005b52:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e020      	b.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4798      	blx	r3
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	e016      	b.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d112      	bne.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005b90:	230c      	movs	r3, #12
 8005b92:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	461a      	mov	r2, r3
 8005b98:	2112      	movs	r1, #18
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 ff59 	bl	8006a52 <LSM6DSO_Write_Reg>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08006ef5 	.word	0x08006ef5
 8005bbc:	08006f2b 	.word	0x08006f2b

08005bc0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	331c      	adds	r3, #28
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fe97 	bl	8007902 <lsm6dso_i3c_disable_set>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e060      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	331c      	adds	r3, #28
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fe65 	bl	80078b6 <lsm6dso_auto_increment_set>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	e054      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	331c      	adds	r3, #28
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fd66 	bl	80076d0 <lsm6dso_block_data_update_set>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e048      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	331c      	adds	r3, #28
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 feb9 	bl	800798e <lsm6dso_fifo_mode_set>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	e03c      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	331c      	adds	r3, #28
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fa20 	bl	800707c <lsm6dso_xl_data_rate_set>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	e02c      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	331c      	adds	r3, #28
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f9b6 	bl	8006fc0 <lsm6dso_xl_full_scale_set>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	e020      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	331c      	adds	r3, #28
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fbd0 	bl	8007414 <lsm6dso_gy_data_rate_set>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	e010      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	331c      	adds	r3, #28
 8005c84:	2106      	movs	r1, #6
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 fb5c 	bl	8007344 <lsm6dso_gy_full_scale_set>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	e004      	b.n	8005ca2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f888 	bl	8005dc8 <LSM6DSO_ACC_Disable>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	e015      	b.n	8005cf0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fc2e 	bl	8006526 <LSM6DSO_GYRO_Disable>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	e00c      	b.n	8005cf0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	331c      	adds	r3, #28
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fdc3 	bl	8007894 <lsm6dso_device_id_get>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	e000      	b.n	8005d1c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d4c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2210      	movs	r2, #16
 8005d52:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <LSM6DSO_GetCapabilities+0x58>)
 8005d5e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	4a06      	ldr	r2, [pc, #24]	; (8005d7c <LSM6DSO_GetCapabilities+0x58>)
 8005d64:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	45d02000 	.word	0x45d02000

08005d80 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e014      	b.n	8005dc0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f103 021c 	add.w	r2, r3, #28
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f001 f969 	bl	800707c <lsm6dso_xl_data_rate_set>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	e004      	b.n	8005dc0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e01f      	b.n	8005e1e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 021c 	add.w	r2, r3, #28
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	332b      	adds	r3, #43	; 0x2b
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f001 fa42 	bl	8007274 <lsm6dso_xl_data_rate_get>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	e010      	b.n	8005e1e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	331c      	adds	r3, #28
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f93a 	bl	800707c <lsm6dso_xl_data_rate_set>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	e004      	b.n	8005e1e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	331c      	adds	r3, #28
 8005e3a:	f107 020b 	add.w	r2, r7, #11
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 f8e3 	bl	800700c <lsm6dso_xl_full_scale_get>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	e023      	b.n	8005e9a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005e52:	7afb      	ldrb	r3, [r7, #11]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d81b      	bhi.n	8005e90 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e81 	.word	0x08005e81
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005e74:	601a      	str	r2, [r3, #0]
      break;
 8005e76:	e00f      	b.n	8005e98 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005e7c:	601a      	str	r2, [r3, #0]
      break;
 8005e7e:	e00b      	b.n	8005e98 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005e84:	601a      	str	r2, [r3, #0]
      break;
 8005e86:	e007      	b.n	8005e98 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005e8c:	601a      	str	r2, [r3, #0]
      break;
 8005e8e:	e003      	b.n	8005e98 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	60fb      	str	r3, [r7, #12]
      break;
 8005e96:	bf00      	nop
  }

  return ret;
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	3d79db23 	.word	0x3d79db23
 8005ea8:	3df9db23 	.word	0x3df9db23
 8005eac:	3e79db23 	.word	0x3e79db23
 8005eb0:	3ef9db23 	.word	0x3ef9db23

08005eb4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	331c      	adds	r3, #28
 8005ec6:	f107 020b 	add.w	r2, r7, #11
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f9d1 	bl	8007274 <lsm6dso_xl_data_rate_get>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	e054      	b.n	8005f88 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	2b0b      	cmp	r3, #11
 8005ee2:	d84c      	bhi.n	8005f7e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f1d 	.word	0x08005f1d
 8005ef0:	08005f2f 	.word	0x08005f2f
 8005ef4:	08005f37 	.word	0x08005f37
 8005ef8:	08005f3f 	.word	0x08005f3f
 8005efc:	08005f47 	.word	0x08005f47
 8005f00:	08005f4f 	.word	0x08005f4f
 8005f04:	08005f57 	.word	0x08005f57
 8005f08:	08005f5f 	.word	0x08005f5f
 8005f0c:	08005f67 	.word	0x08005f67
 8005f10:	08005f6f 	.word	0x08005f6f
 8005f14:	08005f77 	.word	0x08005f77
 8005f18:	08005f27 	.word	0x08005f27
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
      break;
 8005f24:	e02f      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005f2a:	601a      	str	r2, [r3, #0]
      break;
 8005f2c:	e02b      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005f32:	601a      	str	r2, [r3, #0]
      break;
 8005f34:	e027      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005f3a:	601a      	str	r2, [r3, #0]
      break;
 8005f3c:	e023      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005f42:	601a      	str	r2, [r3, #0]
      break;
 8005f44:	e01f      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005f4a:	601a      	str	r2, [r3, #0]
      break;
 8005f4c:	e01b      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005f52:	601a      	str	r2, [r3, #0]
      break;
 8005f54:	e017      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8005f5a:	601a      	str	r2, [r3, #0]
      break;
 8005f5c:	e013      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4a12      	ldr	r2, [pc, #72]	; (8005fac <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005f62:	601a      	str	r2, [r3, #0]
      break;
 8005f64:	e00f      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8005f6a:	601a      	str	r2, [r3, #0]
      break;
 8005f6c:	e00b      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8005f72:	601a      	str	r2, [r3, #0]
      break;
 8005f74:	e007      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8005f7a:	601a      	str	r2, [r3, #0]
      break;
 8005f7c:	e003      	b.n	8005f86 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	60fb      	str	r3, [r7, #12]
      break;
 8005f84:	bf00      	nop
  }

  return ret;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	3fcccccd 	.word	0x3fcccccd
 8005f94:	41480000 	.word	0x41480000
 8005f98:	41d00000 	.word	0x41d00000
 8005f9c:	42500000 	.word	0x42500000
 8005fa0:	42d00000 	.word	0x42d00000
 8005fa4:	43500000 	.word	0x43500000
 8005fa8:	43d08000 	.word	0x43d08000
 8005fac:	44504000 	.word	0x44504000
 8005fb0:	44d06000 	.word	0x44d06000
 8005fb4:	45505000 	.word	0x45505000
 8005fb8:	45d05800 	.word	0x45d05800

08005fbc <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	ed97 0a00 	vldr	s0, [r7]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f806 	bl	8005fe0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005fd4:	4603      	mov	r3, r0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	; 0x30
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005fec:	460b      	mov	r3, r1
 8005fee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	f000 80ea 	beq.w	80061d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006000:	2b02      	cmp	r3, #2
 8006002:	f300 8163 	bgt.w	80062cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800600a:	2b01      	cmp	r3, #1
 800600c:	d074      	beq.n	80060f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800600e:	e15d      	b.n	80062cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f103 001c 	add.w	r0, r3, #28
 8006016:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800601a:	2301      	movs	r3, #1
 800601c:	2114      	movs	r1, #20
 800601e:	f000 ff9f 	bl	8006f60 <lsm6dso_read_reg>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	e16c      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800602e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006032:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d025      	beq.n	8006088 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006042:	2b01      	cmp	r3, #1
 8006044:	d10b      	bne.n	800605e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	331c      	adds	r3, #28
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f001 f815 	bl	800707c <lsm6dso_xl_data_rate_set>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006058:	f04f 33ff 	mov.w	r3, #4294967295
 800605c:	e154      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800605e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006062:	f36f 13c7 	bfc	r3, #7, #1
 8006066:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f103 001c 	add.w	r0, r3, #28
 8006070:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006074:	2301      	movs	r3, #1
 8006076:	2114      	movs	r1, #20
 8006078:	f000 ff8a 	bl	8006f90 <lsm6dso_write_reg>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8006082:	f04f 33ff 	mov.w	r3, #4294967295
 8006086:	e13f      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f103 001c 	add.w	r0, r3, #28
 800608e:	f107 0220 	add.w	r2, r7, #32
 8006092:	2301      	movs	r3, #1
 8006094:	2115      	movs	r1, #21
 8006096:	f000 ff63 	bl	8006f60 <lsm6dso_read_reg>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80060a0:	f04f 33ff 	mov.w	r3, #4294967295
 80060a4:	e130      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80060a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d014      	beq.n	80060de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80060b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060b8:	f36f 1304 	bfc	r3, #4, #1
 80060bc:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f103 001c 	add.w	r0, r3, #28
 80060c6:	f107 0220 	add.w	r2, r7, #32
 80060ca:	2301      	movs	r3, #1
 80060cc:	2115      	movs	r1, #21
 80060ce:	f000 ff5f 	bl	8006f90 <lsm6dso_write_reg>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80060d8:	f04f 33ff 	mov.w	r3, #4294967295
 80060dc:	e114      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80060de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80060e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80060e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ee:	d400      	bmi.n	80060f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80060f0:	e0f0      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80060f2:	4b87      	ldr	r3, [pc, #540]	; (8006310 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f6:	e0ed      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f103 001c 	add.w	r0, r3, #28
 80060fe:	f107 021c 	add.w	r2, r7, #28
 8006102:	2301      	movs	r3, #1
 8006104:	2114      	movs	r1, #20
 8006106:	f000 ff2b 	bl	8006f60 <lsm6dso_read_reg>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e0f8      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006116:	7f3b      	ldrb	r3, [r7, #28]
 8006118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d023      	beq.n	800616a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10b      	bne.n	8006144 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	331c      	adds	r3, #28
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ffa2 	bl	800707c <lsm6dso_xl_data_rate_set>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	e0e1      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006144:	7f3b      	ldrb	r3, [r7, #28]
 8006146:	f36f 13c7 	bfc	r3, #7, #1
 800614a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f103 001c 	add.w	r0, r3, #28
 8006152:	f107 021c 	add.w	r2, r7, #28
 8006156:	2301      	movs	r3, #1
 8006158:	2114      	movs	r1, #20
 800615a:	f000 ff19 	bl	8006f90 <lsm6dso_write_reg>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8006164:	f04f 33ff 	mov.w	r3, #4294967295
 8006168:	e0ce      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f103 001c 	add.w	r0, r3, #28
 8006170:	f107 0218 	add.w	r2, r7, #24
 8006174:	2301      	movs	r3, #1
 8006176:	2115      	movs	r1, #21
 8006178:	f000 fef2 	bl	8006f60 <lsm6dso_read_reg>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	e0bf      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006188:	7e3b      	ldrb	r3, [r7, #24]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d112      	bne.n	80061ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8006194:	7e3b      	ldrb	r3, [r7, #24]
 8006196:	f043 0310 	orr.w	r3, r3, #16
 800619a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f103 001c 	add.w	r0, r3, #28
 80061a2:	f107 0218 	add.w	r2, r7, #24
 80061a6:	2301      	movs	r3, #1
 80061a8:	2115      	movs	r1, #21
 80061aa:	f000 fef1 	bl	8006f90 <lsm6dso_write_reg>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	e0a6      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80061ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80061be:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006314 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80061c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	dc00      	bgt.n	80061ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80061cc:	e082      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80061ce:	4b52      	ldr	r3, [pc, #328]	; (8006318 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d2:	e07f      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f103 001c 	add.w	r0, r3, #28
 80061da:	f107 0210 	add.w	r2, r7, #16
 80061de:	2301      	movs	r3, #1
 80061e0:	2115      	movs	r1, #21
 80061e2:	f000 febd 	bl	8006f60 <lsm6dso_read_reg>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295
 80061f0:	e08a      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80061f2:	7c3b      	ldrb	r3, [r7, #16]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d012      	beq.n	8006224 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80061fe:	7c3b      	ldrb	r3, [r7, #16]
 8006200:	f36f 1304 	bfc	r3, #4, #1
 8006204:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f103 001c 	add.w	r0, r3, #28
 800620c:	f107 0210 	add.w	r2, r7, #16
 8006210:	2301      	movs	r3, #1
 8006212:	2115      	movs	r1, #21
 8006214:	f000 febc 	bl	8006f90 <lsm6dso_write_reg>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	e071      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800622a:	2b01      	cmp	r3, #1
 800622c:	d108      	bne.n	8006240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f979 	bl	8006526 <LSM6DSO_GYRO_Disable>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	e063      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f103 001c 	add.w	r0, r3, #28
 8006246:	f107 0214 	add.w	r2, r7, #20
 800624a:	2301      	movs	r3, #1
 800624c:	2114      	movs	r1, #20
 800624e:	f000 fe87 	bl	8006f60 <lsm6dso_read_reg>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	e054      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800625e:	7d3b      	ldrb	r3, [r7, #20]
 8006260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d123      	bne.n	80062b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10b      	bne.n	800628c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	331c      	adds	r3, #28
 8006278:	2100      	movs	r1, #0
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fefe 	bl	800707c <lsm6dso_xl_data_rate_set>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	e03d      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 800628c:	7d3b      	ldrb	r3, [r7, #20]
 800628e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006292:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f103 001c 	add.w	r0, r3, #28
 800629a:	f107 0214 	add.w	r2, r7, #20
 800629e:	2301      	movs	r3, #1
 80062a0:	2114      	movs	r1, #20
 80062a2:	f000 fe75 	bl	8006f90 <lsm6dso_write_reg>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295
 80062b0:	e02a      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80062b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80062b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006314 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80062ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	dc00      	bgt.n	80062c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80062c4:	e006      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	e003      	b.n	80062d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80062d2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d102      	bne.n	80062e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	e012      	b.n	8006308 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80062ec:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fbc9 	bl	8006a88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80062f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062f8:	e005      	b.n	8006306 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80062fa:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fc5a 	bl	8006bb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006304:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006308:	4618      	mov	r0, r3
 800630a:	3730      	adds	r7, #48	; 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	41480000 	.word	0x41480000
 8006314:	43500000 	.word	0x43500000
 8006318:	43500000 	.word	0x43500000

0800631c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	331c      	adds	r3, #28
 800632e:	f107 020b 	add.w	r2, r7, #11
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fe69 	bl	800700c <lsm6dso_xl_full_scale_get>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006340:	f04f 33ff 	mov.w	r3, #4294967295
 8006344:	e023      	b.n	800638e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d81b      	bhi.n	8006384 <LSM6DSO_ACC_GetFullScale+0x68>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <LSM6DSO_ACC_GetFullScale+0x38>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	0800637d 	.word	0x0800637d
 800635c:	0800636d 	.word	0x0800636d
 8006360:	08006375 	.word	0x08006375
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2202      	movs	r2, #2
 8006368:	601a      	str	r2, [r3, #0]
      break;
 800636a:	e00f      	b.n	800638c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2204      	movs	r2, #4
 8006370:	601a      	str	r2, [r3, #0]
      break;
 8006372:	e00b      	b.n	800638c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2208      	movs	r2, #8
 8006378:	601a      	str	r2, [r3, #0]
      break;
 800637a:	e007      	b.n	800638c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2210      	movs	r2, #16
 8006380:	601a      	str	r2, [r3, #0]
      break;
 8006382:	e003      	b.n	800638c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	60fb      	str	r3, [r7, #12]
      break;
 800638a:	bf00      	nop
  }

  return ret;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop

08006398 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	dd0b      	ble.n	80063c0 <LSM6DSO_ACC_SetFullScale+0x28>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	dd06      	ble.n	80063bc <LSM6DSO_ACC_SetFullScale+0x24>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	dc01      	bgt.n	80063b8 <LSM6DSO_ACC_SetFullScale+0x20>
 80063b4:	2303      	movs	r3, #3
 80063b6:	e004      	b.n	80063c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e002      	b.n	80063c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80063bc:	2302      	movs	r3, #2
 80063be:	e000      	b.n	80063c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80063c0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80063c2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	331c      	adds	r3, #28
 80063c8:	7bfa      	ldrb	r2, [r7, #15]
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fdf7 	bl	8006fc0 <lsm6dso_xl_full_scale_set>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	e000      	b.n	80063e0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	331c      	adds	r3, #28
 80063f6:	f107 0208 	add.w	r2, r7, #8
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 f9d8 	bl	80077b2 <lsm6dso_acceleration_raw_get>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e00c      	b.n	8006428 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800640e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006416:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800641e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	331c      	adds	r3, #28
 8006444:	f107 0210 	add.w	r2, r7, #16
 8006448:	4611      	mov	r1, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f9b1 	bl	80077b2 <lsm6dso_acceleration_raw_get>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295
 800645a:	e03c      	b.n	80064d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800645c:	f107 030c 	add.w	r3, r7, #12
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fce0 	bl	8005e28 <LSM6DSO_ACC_GetSensitivity>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
 8006472:	e030      	b.n	80064d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006474:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006480:	edd7 7a03 	vldr	s15, [r7, #12]
 8006484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800648c:	ee17 2a90 	vmov	r2, s15
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80064a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ac:	ee17 2a90 	vmov	r2, s15
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80064b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80064c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064cc:	ee17 2a90 	vmov	r2, s15
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e014      	b.n	800651e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 021c 	add.w	r2, r3, #28
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 ff86 	bl	8007414 <lsm6dso_gy_data_rate_set>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	e004      	b.n	800651e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e01f      	b.n	800657c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 021c 	add.w	r2, r3, #28
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	332c      	adds	r3, #44	; 0x2c
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f001 f85f 	bl	800760c <lsm6dso_gy_data_rate_get>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e010      	b.n	800657c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	331c      	adds	r3, #28
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 ff57 	bl	8007414 <lsm6dso_gy_data_rate_set>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800656c:	f04f 33ff 	mov.w	r3, #4294967295
 8006570:	e004      	b.n	800657c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	331c      	adds	r3, #28
 8006596:	f107 020b 	add.w	r2, r7, #11
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fef7 	bl	8007390 <lsm6dso_gy_full_scale_get>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	e02d      	b.n	800660a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d825      	bhi.n	8006600 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065d9 	.word	0x080065d9
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006601 	.word	0x08006601
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	08006601 	.word	0x08006601
 80065d4:	080065f9 	.word	0x080065f9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	4a0e      	ldr	r2, [pc, #56]	; (8006614 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80065dc:	601a      	str	r2, [r3, #0]
      break;
 80065de:	e013      	b.n	8006608 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80065e4:	601a      	str	r2, [r3, #0]
      break;
 80065e6:	e00f      	b.n	8006608 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4a0c      	ldr	r2, [pc, #48]	; (800661c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80065ec:	601a      	str	r2, [r3, #0]
      break;
 80065ee:	e00b      	b.n	8006608 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80065f4:	601a      	str	r2, [r3, #0]
      break;
 80065f6:	e007      	b.n	8006608 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80065fc:	601a      	str	r2, [r3, #0]
      break;
 80065fe:	e003      	b.n	8006608 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006600:	f04f 33ff 	mov.w	r3, #4294967295
 8006604:	60fb      	str	r3, [r7, #12]
      break;
 8006606:	bf00      	nop
  }

  return ret;
 8006608:	68fb      	ldr	r3, [r7, #12]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	408c0000 	.word	0x408c0000
 8006618:	410c0000 	.word	0x410c0000
 800661c:	418c0000 	.word	0x418c0000
 8006620:	420c0000 	.word	0x420c0000
 8006624:	428c0000 	.word	0x428c0000

08006628 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	331c      	adds	r3, #28
 800663a:	f107 020b 	add.w	r2, r7, #11
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 ffe3 	bl	800760c <lsm6dso_gy_data_rate_get>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295
 8006650:	e04e      	b.n	80066f0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	2b0a      	cmp	r3, #10
 8006656:	d846      	bhi.n	80066e6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	0800668d 	.word	0x0800668d
 8006664:	08006697 	.word	0x08006697
 8006668:	0800669f 	.word	0x0800669f
 800666c:	080066a7 	.word	0x080066a7
 8006670:	080066af 	.word	0x080066af
 8006674:	080066b7 	.word	0x080066b7
 8006678:	080066bf 	.word	0x080066bf
 800667c:	080066c7 	.word	0x080066c7
 8006680:	080066cf 	.word	0x080066cf
 8006684:	080066d7 	.word	0x080066d7
 8006688:	080066df 	.word	0x080066df
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
      break;
 8006694:	e02b      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800669a:	601a      	str	r2, [r3, #0]
      break;
 800669c:	e027      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80066a2:	601a      	str	r2, [r3, #0]
      break;
 80066a4:	e023      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80066aa:	601a      	str	r2, [r3, #0]
      break;
 80066ac:	e01f      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	4a14      	ldr	r2, [pc, #80]	; (8006704 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80066b2:	601a      	str	r2, [r3, #0]
      break;
 80066b4:	e01b      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80066ba:	601a      	str	r2, [r3, #0]
      break;
 80066bc:	e017      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80066c2:	601a      	str	r2, [r3, #0]
      break;
 80066c4:	e013      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	4a11      	ldr	r2, [pc, #68]	; (8006710 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80066ca:	601a      	str	r2, [r3, #0]
      break;
 80066cc:	e00f      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	4a10      	ldr	r2, [pc, #64]	; (8006714 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80066d2:	601a      	str	r2, [r3, #0]
      break;
 80066d4:	e00b      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	4a0f      	ldr	r2, [pc, #60]	; (8006718 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80066da:	601a      	str	r2, [r3, #0]
      break;
 80066dc:	e007      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	4a0e      	ldr	r2, [pc, #56]	; (800671c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80066e2:	601a      	str	r2, [r3, #0]
      break;
 80066e4:	e003      	b.n	80066ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ea:	60fb      	str	r3, [r7, #12]
      break;
 80066ec:	bf00      	nop
  }

  return ret;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	41480000 	.word	0x41480000
 80066fc:	41d00000 	.word	0x41d00000
 8006700:	42500000 	.word	0x42500000
 8006704:	42d00000 	.word	0x42d00000
 8006708:	43500000 	.word	0x43500000
 800670c:	43d08000 	.word	0x43d08000
 8006710:	44504000 	.word	0x44504000
 8006714:	44d06000 	.word	0x44d06000
 8006718:	45505000 	.word	0x45505000
 800671c:	45d05800 	.word	0x45d05800

08006720 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800672c:	2100      	movs	r1, #0
 800672e:	ed97 0a00 	vldr	s0, [r7]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f806 	bl	8006744 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006750:	460b      	mov	r3, r1
 8006752:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006762:	2b01      	cmp	r3, #1
 8006764:	d028      	beq.n	80067b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8006766:	e05c      	b.n	8006822 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f103 001c 	add.w	r0, r3, #28
 800676e:	f107 0214 	add.w	r2, r7, #20
 8006772:	2301      	movs	r3, #1
 8006774:	2116      	movs	r1, #22
 8006776:	f000 fbf3 	bl	8006f60 <lsm6dso_read_reg>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	e06c      	b.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8006786:	7d3b      	ldrb	r3, [r7, #20]
 8006788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d04b      	beq.n	800682a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006792:	7d3b      	ldrb	r3, [r7, #20]
 8006794:	f36f 13c7 	bfc	r3, #7, #1
 8006798:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f103 001c 	add.w	r0, r3, #28
 80067a0:	f107 0214 	add.w	r2, r7, #20
 80067a4:	2301      	movs	r3, #1
 80067a6:	2116      	movs	r1, #22
 80067a8:	f000 fbf2 	bl	8006f90 <lsm6dso_write_reg>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d03b      	beq.n	800682a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
 80067b6:	e053      	b.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f103 001c 	add.w	r0, r3, #28
 80067be:	f107 0210 	add.w	r2, r7, #16
 80067c2:	2301      	movs	r3, #1
 80067c4:	2116      	movs	r1, #22
 80067c6:	f000 fbcb 	bl	8006f60 <lsm6dso_read_reg>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295
 80067d4:	e044      	b.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80067d6:	7c3b      	ldrb	r3, [r7, #16]
 80067d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d112      	bne.n	8006808 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80067e2:	7c3b      	ldrb	r3, [r7, #16]
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f103 001c 	add.w	r0, r3, #28
 80067f0:	f107 0210 	add.w	r2, r7, #16
 80067f4:	2301      	movs	r3, #1
 80067f6:	2116      	movs	r1, #22
 80067f8:	f000 fbca 	bl	8006f90 <lsm6dso_write_reg>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	e02b      	b.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006808:	edd7 7a06 	vldr	s15, [r7, #24]
 800680c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006868 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006818:	dc00      	bgt.n	800681c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800681a:	e007      	b.n	800682c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800681c:	4b13      	ldr	r3, [pc, #76]	; (800686c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e004      	b.n	800682c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006822:	f04f 33ff 	mov.w	r3, #4294967295
 8006826:	61fb      	str	r3, [r7, #28]
      break;
 8006828:	e000      	b.n	800682c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800682a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d102      	bne.n	800683a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	e012      	b.n	8006860 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006840:	2b01      	cmp	r3, #1
 8006842:	d106      	bne.n	8006852 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006844:	ed97 0a06 	vldr	s0, [r7, #24]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa45 	bl	8006cd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800684e:	61f8      	str	r0, [r7, #28]
 8006850:	e005      	b.n	800685e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006852:	ed97 0a06 	vldr	s0, [r7, #24]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 faca 	bl	8006df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800685c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800685e:	69fb      	ldr	r3, [r7, #28]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	43500000 	.word	0x43500000
 800686c:	43500000 	.word	0x43500000

08006870 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	331c      	adds	r3, #28
 8006882:	f107 020b 	add.w	r2, r7, #11
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fd81 	bl	8007390 <lsm6dso_gy_full_scale_get>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	e030      	b.n	80068fc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b06      	cmp	r3, #6
 800689e:	d828      	bhi.n	80068f2 <LSM6DSO_GYRO_GetFullScale+0x82>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068c5 	.word	0x080068c5
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068f3 	.word	0x080068f3
 80068b8:	080068df 	.word	0x080068df
 80068bc:	080068f3 	.word	0x080068f3
 80068c0:	080068e9 	.word	0x080068e9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	227d      	movs	r2, #125	; 0x7d
 80068c8:	601a      	str	r2, [r3, #0]
      break;
 80068ca:	e016      	b.n	80068fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	22fa      	movs	r2, #250	; 0xfa
 80068d0:	601a      	str	r2, [r3, #0]
      break;
 80068d2:	e012      	b.n	80068fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80068da:	601a      	str	r2, [r3, #0]
      break;
 80068dc:	e00d      	b.n	80068fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068e4:	601a      	str	r2, [r3, #0]
      break;
 80068e6:	e008      	b.n	80068fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80068ee:	601a      	str	r2, [r3, #0]
      break;
 80068f0:	e003      	b.n	80068fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	60fb      	str	r3, [r7, #12]
      break;
 80068f8:	bf00      	nop
  }

  return ret;
 80068fa:	68fb      	ldr	r3, [r7, #12]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b7d      	cmp	r3, #125	; 0x7d
 8006912:	dd12      	ble.n	800693a <LSM6DSO_GYRO_SetFullScale+0x36>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2bfa      	cmp	r3, #250	; 0xfa
 8006918:	dd0d      	ble.n	8006936 <LSM6DSO_GYRO_SetFullScale+0x32>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006920:	dd07      	ble.n	8006932 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006928:	dc01      	bgt.n	800692e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800692a:	2304      	movs	r3, #4
 800692c:	e006      	b.n	800693c <LSM6DSO_GYRO_SetFullScale+0x38>
 800692e:	2306      	movs	r3, #6
 8006930:	e004      	b.n	800693c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006932:	2302      	movs	r3, #2
 8006934:	e002      	b.n	800693c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <LSM6DSO_GYRO_SetFullScale+0x38>
 800693a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800693c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	331c      	adds	r3, #28
 8006942:	7bfa      	ldrb	r2, [r7, #15]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fcfc 	bl	8007344 <lsm6dso_gy_full_scale_set>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e000      	b.n	800695a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	331c      	adds	r3, #28
 8006970:	f107 0208 	add.w	r2, r7, #8
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fed0 	bl	800771c <lsm6dso_angular_rate_raw_get>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295
 8006986:	e00c      	b.n	80069a2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006988:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006990:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	331c      	adds	r3, #28
 80069b8:	f107 0210 	add.w	r2, r7, #16
 80069bc:	4611      	mov	r1, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 feac 	bl	800771c <lsm6dso_angular_rate_raw_get>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80069ca:	f04f 33ff 	mov.w	r3, #4294967295
 80069ce:	e03c      	b.n	8006a4a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fdd4 	bl	8006584 <LSM6DSO_GYRO_GetSensitivity>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	e030      	b.n	8006a4a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80069e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80069f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a00:	ee17 2a90 	vmov	r2, s15
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a20:	ee17 2a90 	vmov	r2, s15
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006a28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a40:	ee17 2a90 	vmov	r2, s15
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f103 001c 	add.w	r0, r3, #28
 8006a68:	1cba      	adds	r2, r7, #2
 8006a6a:	78f9      	ldrb	r1, [r7, #3]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f000 fa8f 	bl	8006f90 <lsm6dso_write_reg>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7c:	e000      	b.n	8006a80 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006a94:	edd7 7a00 	vldr	s15, [r7]
 8006a98:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006b98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d801      	bhi.n	8006aaa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006aa6:	230b      	movs	r3, #11
 8006aa8:	e063      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006aaa:	edd7 7a00 	vldr	s15, [r7]
 8006aae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	d801      	bhi.n	8006ac0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e058      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ac0:	edd7 7a00 	vldr	s15, [r7]
 8006ac4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad0:	d801      	bhi.n	8006ad6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e04d      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ad6:	edd7 7a00 	vldr	s15, [r7]
 8006ada:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006b9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae6:	d801      	bhi.n	8006aec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e042      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006aec:	edd7 7a00 	vldr	s15, [r7]
 8006af0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006ba0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	d801      	bhi.n	8006b02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006afe:	2304      	movs	r3, #4
 8006b00:	e037      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b02:	edd7 7a00 	vldr	s15, [r7]
 8006b06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006ba4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b12:	d801      	bhi.n	8006b18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006b14:	2305      	movs	r3, #5
 8006b16:	e02c      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b18:	edd7 7a00 	vldr	s15, [r7]
 8006b1c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006ba8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b28:	d801      	bhi.n	8006b2e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006b2a:	2306      	movs	r3, #6
 8006b2c:	e021      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b2e:	edd7 7a00 	vldr	s15, [r7]
 8006b32:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006bac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3e:	d801      	bhi.n	8006b44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006b40:	2307      	movs	r3, #7
 8006b42:	e016      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b44:	edd7 7a00 	vldr	s15, [r7]
 8006b48:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006bb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b54:	d801      	bhi.n	8006b5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006b56:	2308      	movs	r3, #8
 8006b58:	e00b      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b5a:	edd7 7a00 	vldr	s15, [r7]
 8006b5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006bb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6a:	d801      	bhi.n	8006b70 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006b6c:	2309      	movs	r3, #9
 8006b6e:	e000      	b.n	8006b72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006b70:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006b72:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	331c      	adds	r3, #28
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fa7d 	bl	800707c <lsm6dso_xl_data_rate_set>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	e000      	b.n	8006b90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	3fcccccd 	.word	0x3fcccccd
 8006b9c:	42500000 	.word	0x42500000
 8006ba0:	42d00000 	.word	0x42d00000
 8006ba4:	43500000 	.word	0x43500000
 8006ba8:	43d08000 	.word	0x43d08000
 8006bac:	44504000 	.word	0x44504000
 8006bb0:	44d06000 	.word	0x44d06000
 8006bb4:	45505000 	.word	0x45505000

08006bb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006bc4:	edd7 7a00 	vldr	s15, [r7]
 8006bc8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006cb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	d801      	bhi.n	8006bda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006bd6:	230b      	movs	r3, #11
 8006bd8:	e063      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006bda:	edd7 7a00 	vldr	s15, [r7]
 8006bde:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bea:	d801      	bhi.n	8006bf0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e058      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006bf0:	edd7 7a00 	vldr	s15, [r7]
 8006bf4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c00:	d801      	bhi.n	8006c06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e04d      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c06:	edd7 7a00 	vldr	s15, [r7]
 8006c0a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006cbc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d801      	bhi.n	8006c1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e042      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c1c:	edd7 7a00 	vldr	s15, [r7]
 8006c20:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006cc0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2c:	d801      	bhi.n	8006c32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006c2e:	2304      	movs	r3, #4
 8006c30:	e037      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c32:	edd7 7a00 	vldr	s15, [r7]
 8006c36:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006cc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c42:	d801      	bhi.n	8006c48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006c44:	2305      	movs	r3, #5
 8006c46:	e02c      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c48:	edd7 7a00 	vldr	s15, [r7]
 8006c4c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006cc8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	d801      	bhi.n	8006c5e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006c5a:	2306      	movs	r3, #6
 8006c5c:	e021      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c5e:	edd7 7a00 	vldr	s15, [r7]
 8006c62:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006ccc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6e:	d801      	bhi.n	8006c74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006c70:	2307      	movs	r3, #7
 8006c72:	e016      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c74:	edd7 7a00 	vldr	s15, [r7]
 8006c78:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006cd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c84:	d801      	bhi.n	8006c8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006c86:	2308      	movs	r3, #8
 8006c88:	e00b      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006c8a:	edd7 7a00 	vldr	s15, [r7]
 8006c8e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006cd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9a:	d801      	bhi.n	8006ca0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006c9c:	2309      	movs	r3, #9
 8006c9e:	e000      	b.n	8006ca2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ca0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	3fcccccd 	.word	0x3fcccccd
 8006cbc:	42500000 	.word	0x42500000
 8006cc0:	42d00000 	.word	0x42d00000
 8006cc4:	43500000 	.word	0x43500000
 8006cc8:	43d08000 	.word	0x43d08000
 8006ccc:	44504000 	.word	0x44504000
 8006cd0:	44d06000 	.word	0x44d06000
 8006cd4:	45505000 	.word	0x45505000

08006cd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006ce4:	edd7 7a00 	vldr	s15, [r7]
 8006ce8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	d801      	bhi.n	8006cfa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e058      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006cfa:	edd7 7a00 	vldr	s15, [r7]
 8006cfe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0a:	d801      	bhi.n	8006d10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e04d      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d10:	edd7 7a00 	vldr	s15, [r7]
 8006d14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006dd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	d801      	bhi.n	8006d26 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006d22:	2303      	movs	r3, #3
 8006d24:	e042      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d26:	edd7 7a00 	vldr	s15, [r7]
 8006d2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006dd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d36:	d801      	bhi.n	8006d3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	e037      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d3c:	edd7 7a00 	vldr	s15, [r7]
 8006d40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006ddc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	d801      	bhi.n	8006d52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006d4e:	2305      	movs	r3, #5
 8006d50:	e02c      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d52:	edd7 7a00 	vldr	s15, [r7]
 8006d56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d62:	d801      	bhi.n	8006d68 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006d64:	2306      	movs	r3, #6
 8006d66:	e021      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d68:	edd7 7a00 	vldr	s15, [r7]
 8006d6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d78:	d801      	bhi.n	8006d7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006d7a:	2307      	movs	r3, #7
 8006d7c:	e016      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d7e:	edd7 7a00 	vldr	s15, [r7]
 8006d82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8e:	d801      	bhi.n	8006d94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006d90:	2308      	movs	r3, #8
 8006d92:	e00b      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006d94:	edd7 7a00 	vldr	s15, [r7]
 8006d98:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006dec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	d801      	bhi.n	8006daa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006da6:	2309      	movs	r3, #9
 8006da8:	e000      	b.n	8006dac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006daa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006dac:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	331c      	adds	r3, #28
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fb2c 	bl	8007414 <lsm6dso_gy_data_rate_set>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	e000      	b.n	8006dca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	42500000 	.word	0x42500000
 8006dd8:	42d00000 	.word	0x42d00000
 8006ddc:	43500000 	.word	0x43500000
 8006de0:	43d08000 	.word	0x43d08000
 8006de4:	44504000 	.word	0x44504000
 8006de8:	44d06000 	.word	0x44d06000
 8006dec:	45505000 	.word	0x45505000

08006df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006dfc:	edd7 7a00 	vldr	s15, [r7]
 8006e00:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	d801      	bhi.n	8006e12 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e058      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e12:	edd7 7a00 	vldr	s15, [r7]
 8006e16:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	d801      	bhi.n	8006e28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e04d      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e28:	edd7 7a00 	vldr	s15, [r7]
 8006e2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006ed8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e38:	d801      	bhi.n	8006e3e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e042      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e3e:	edd7 7a00 	vldr	s15, [r7]
 8006e42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006edc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4e:	d801      	bhi.n	8006e54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006e50:	2304      	movs	r3, #4
 8006e52:	e037      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e54:	edd7 7a00 	vldr	s15, [r7]
 8006e58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006ee0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e64:	d801      	bhi.n	8006e6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006e66:	2305      	movs	r3, #5
 8006e68:	e02c      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e6a:	edd7 7a00 	vldr	s15, [r7]
 8006e6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006ee4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7a:	d801      	bhi.n	8006e80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	e021      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e80:	edd7 7a00 	vldr	s15, [r7]
 8006e84:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e90:	d801      	bhi.n	8006e96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006e92:	2307      	movs	r3, #7
 8006e94:	e016      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006e96:	edd7 7a00 	vldr	s15, [r7]
 8006e9a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006eec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	d801      	bhi.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	e00b      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006eac:	edd7 7a00 	vldr	s15, [r7]
 8006eb0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006ef0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebc:	d801      	bhi.n	8006ec2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006ebe:	2309      	movs	r3, #9
 8006ec0:	e000      	b.n	8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ec2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	42500000 	.word	0x42500000
 8006edc:	42d00000 	.word	0x42d00000
 8006ee0:	43500000 	.word	0x43500000
 8006ee4:	43d08000 	.word	0x43d08000
 8006ee8:	44504000 	.word	0x44504000
 8006eec:	44d06000 	.word	0x44d06000
 8006ef0:	45505000 	.word	0x45505000

08006ef4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	461a      	mov	r2, r3
 8006f00:	460b      	mov	r3, r1
 8006f02:	72fb      	strb	r3, [r7, #11]
 8006f04:	4613      	mov	r3, r2
 8006f06:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	695c      	ldr	r4, [r3, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	7b1b      	ldrb	r3, [r3, #12]
 8006f14:	b298      	uxth	r0, r3
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	b299      	uxth	r1, r3
 8006f1a:	893b      	ldrh	r3, [r7, #8]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	47a0      	blx	r4
 8006f20:	4603      	mov	r3, r0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}

08006f2a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f2a:	b590      	push	{r4, r7, lr}
 8006f2c:	b087      	sub	sp, #28
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	461a      	mov	r2, r3
 8006f36:	460b      	mov	r3, r1
 8006f38:	72fb      	strb	r3, [r7, #11]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	691c      	ldr	r4, [r3, #16]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	7b1b      	ldrb	r3, [r3, #12]
 8006f4a:	b298      	uxth	r0, r3
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	b299      	uxth	r1, r3
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	47a0      	blx	r4
 8006f56:	4603      	mov	r3, r0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}

08006f60 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	72fb      	strb	r3, [r7, #11]
 8006f70:	4613      	mov	r3, r2
 8006f72:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685c      	ldr	r4, [r3, #4]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6898      	ldr	r0, [r3, #8]
 8006f7c:	893b      	ldrh	r3, [r7, #8]
 8006f7e:	7af9      	ldrb	r1, [r7, #11]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	47a0      	blx	r4
 8006f84:	6178      	str	r0, [r7, #20]

  return ret;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd90      	pop	{r4, r7, pc}

08006f90 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	72fb      	strb	r3, [r7, #11]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681c      	ldr	r4, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6898      	ldr	r0, [r3, #8]
 8006fac:	893b      	ldrh	r3, [r7, #8]
 8006fae:	7af9      	ldrb	r1, [r7, #11]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	47a0      	blx	r4
 8006fb4:	6178      	str	r0, [r7, #20]

  return ret;
 8006fb6:	697b      	ldr	r3, [r7, #20]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}

08006fc0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006fcc:	f107 0208 	add.w	r2, r7, #8
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	2110      	movs	r1, #16
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ffc3 	bl	8006f60 <lsm6dso_read_reg>
 8006fda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10f      	bne.n	8007002 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7a3b      	ldrb	r3, [r7, #8]
 8006fec:	f362 0383 	bfi	r3, r2, #2, #2
 8006ff0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006ff2:	f107 0208 	add.w	r2, r7, #8
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	2110      	movs	r1, #16
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ffc8 	bl	8006f90 <lsm6dso_write_reg>
 8007000:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007002:	68fb      	ldr	r3, [r7, #12]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007016:	f107 0208 	add.w	r2, r7, #8
 800701a:	2301      	movs	r3, #1
 800701c:	2110      	movs	r1, #16
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ff9e 	bl	8006f60 <lsm6dso_read_reg>
 8007024:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8007026:	7a3b      	ldrb	r3, [r7, #8]
 8007028:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d81a      	bhi.n	8007068 <lsm6dso_xl_full_scale_get+0x5c>
 8007032:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <lsm6dso_xl_full_scale_get+0x2c>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	08007049 	.word	0x08007049
 800703c:	08007051 	.word	0x08007051
 8007040:	08007059 	.word	0x08007059
 8007044:	08007061 	.word	0x08007061
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
      break;
 800704e:	e00f      	b.n	8007070 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
      break;
 8007056:	e00b      	b.n	8007070 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2202      	movs	r2, #2
 800705c:	701a      	strb	r2, [r3, #0]
      break;
 800705e:	e007      	b.n	8007070 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2203      	movs	r2, #3
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e003      	b.n	8007070 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
      break;
 800706e:	bf00      	nop
  }

  return ret;
 8007070:	68fb      	ldr	r3, [r7, #12]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800708c:	f107 030c 	add.w	r3, r7, #12
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fca1 	bl	80079da <lsm6dso_fsm_enable_get>
 8007098:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 80c4 	bne.w	800722a <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070a2:	7b3b      	ldrb	r3, [r7, #12]
 80070a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80070aa:	7b3b      	ldrb	r3, [r7, #12]
 80070ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070b0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80070b6:	7b3b      	ldrb	r3, [r7, #12]
 80070b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80070be:	4313      	orrs	r3, r2
 80070c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80070c2:	7b3b      	ldrb	r3, [r7, #12]
 80070c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80070ce:	7b3b      	ldrb	r3, [r7, #12]
 80070d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80070d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80070d6:	4313      	orrs	r3, r2
 80070d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80070da:	7b3b      	ldrb	r3, [r7, #12]
 80070dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80070e6:	7b3b      	ldrb	r3, [r7, #12]
 80070e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80070ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80070f2:	7b3b      	ldrb	r3, [r7, #12]
 80070f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80070f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007106:	4313      	orrs	r3, r2
 8007108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800710a:	7b7b      	ldrb	r3, [r7, #13]
 800710c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007112:	4313      	orrs	r3, r2
 8007114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007116:	7b7b      	ldrb	r3, [r7, #13]
 8007118:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800711c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800711e:	4313      	orrs	r3, r2
 8007120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007122:	7b7b      	ldrb	r3, [r7, #13]
 8007124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800712a:	4313      	orrs	r3, r2
 800712c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800712e:	7b7b      	ldrb	r3, [r7, #13]
 8007130:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007136:	4313      	orrs	r3, r2
 8007138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800713a:	7b7b      	ldrb	r3, [r7, #13]
 800713c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007142:	4313      	orrs	r3, r2
 8007144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007146:	7b7b      	ldrb	r3, [r7, #13]
 8007148:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800714c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800714e:	4313      	orrs	r3, r2
 8007150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007152:	7b7b      	ldrb	r3, [r7, #13]
 8007154:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800715a:	4313      	orrs	r3, r2
 800715c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800715e:	2b01      	cmp	r3, #1
 8007160:	d163      	bne.n	800722a <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007162:	f107 030b 	add.w	r3, r7, #11
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc57 	bl	8007a1c <lsm6dso_fsm_data_rate_get>
 800716e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d159      	bne.n	800722a <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d853      	bhi.n	8007224 <lsm6dso_xl_data_rate_set+0x1a8>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <lsm6dso_xl_data_rate_set+0x108>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	08007195 	.word	0x08007195
 8007188:	080071a7 	.word	0x080071a7
 800718c:	080071c5 	.word	0x080071c5
 8007190:	080071ef 	.word	0x080071ef
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800719a:	2301      	movs	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800719e:	e045      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	75fb      	strb	r3, [r7, #23]
            break;
 80071a4:	e042      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80071ac:	2302      	movs	r3, #2
 80071ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80071b0:	e03c      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80071b8:	2302      	movs	r3, #2
 80071ba:	75fb      	strb	r3, [r7, #23]
            break;
 80071bc:	e036      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	75fb      	strb	r3, [r7, #23]
            break;
 80071c2:	e033      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80071ca:	2303      	movs	r3, #3
 80071cc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80071ce:	e02d      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d102      	bne.n	80071dc <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80071d6:	2303      	movs	r3, #3
 80071d8:	75fb      	strb	r3, [r7, #23]
            break;
 80071da:	e027      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d102      	bne.n	80071e8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80071e2:	2303      	movs	r3, #3
 80071e4:	75fb      	strb	r3, [r7, #23]
            break;
 80071e6:	e021      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	75fb      	strb	r3, [r7, #23]
            break;
 80071ec:	e01e      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80071f4:	2304      	movs	r3, #4
 80071f6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80071f8:	e018      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d102      	bne.n	8007206 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007200:	2304      	movs	r3, #4
 8007202:	75fb      	strb	r3, [r7, #23]
            break;
 8007204:	e012      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d102      	bne.n	8007212 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800720c:	2304      	movs	r3, #4
 800720e:	75fb      	strb	r3, [r7, #23]
            break;
 8007210:	e00c      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d102      	bne.n	800721e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007218:	2304      	movs	r3, #4
 800721a:	75fb      	strb	r3, [r7, #23]
            break;
 800721c:	e006      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	75fb      	strb	r3, [r7, #23]
            break;
 8007222:	e003      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	75fb      	strb	r3, [r7, #23]
            break;
 8007228:	e000      	b.n	800722c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800722a:	bf00      	nop
    }
  }

  if (ret == 0)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d107      	bne.n	8007242 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007232:	f107 0208 	add.w	r2, r7, #8
 8007236:	2301      	movs	r3, #1
 8007238:	2110      	movs	r1, #16
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fe90 	bl	8006f60 <lsm6dso_read_reg>
 8007240:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10f      	bne.n	8007268 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	b2da      	uxtb	r2, r3
 8007250:	7a3b      	ldrb	r3, [r7, #8]
 8007252:	f362 1307 	bfi	r3, r2, #4, #4
 8007256:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007258:	f107 0208 	add.w	r2, r7, #8
 800725c:	2301      	movs	r3, #1
 800725e:	2110      	movs	r1, #16
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fe95 	bl	8006f90 <lsm6dso_write_reg>
 8007266:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007268:	693b      	ldr	r3, [r7, #16]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	2301      	movs	r3, #1
 8007284:	2110      	movs	r1, #16
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fe6a 	bl	8006f60 <lsm6dso_read_reg>
 800728c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800728e:	7a3b      	ldrb	r3, [r7, #8]
 8007290:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b0b      	cmp	r3, #11
 8007298:	d84a      	bhi.n	8007330 <lsm6dso_xl_data_rate_get+0xbc>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <lsm6dso_xl_data_rate_get+0x2c>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072d1 	.word	0x080072d1
 80072a4:	080072d9 	.word	0x080072d9
 80072a8:	080072e1 	.word	0x080072e1
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072f1 	.word	0x080072f1
 80072b4:	080072f9 	.word	0x080072f9
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007309 	.word	0x08007309
 80072c0:	08007311 	.word	0x08007311
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007329 	.word	0x08007329
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
      break;
 80072d6:	e02f      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e02b      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2202      	movs	r2, #2
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e027      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2203      	movs	r2, #3
 80072ec:	701a      	strb	r2, [r3, #0]
      break;
 80072ee:	e023      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2204      	movs	r2, #4
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e01f      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2205      	movs	r2, #5
 80072fc:	701a      	strb	r2, [r3, #0]
      break;
 80072fe:	e01b      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2206      	movs	r2, #6
 8007304:	701a      	strb	r2, [r3, #0]
      break;
 8007306:	e017      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2207      	movs	r2, #7
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e013      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	e00f      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2209      	movs	r2, #9
 800731c:	701a      	strb	r2, [r3, #0]
      break;
 800731e:	e00b      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	220a      	movs	r2, #10
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e007      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	220b      	movs	r2, #11
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e003      	b.n	8007338 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	2301      	movs	r3, #1
 8007356:	2111      	movs	r1, #17
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff fe01 	bl	8006f60 <lsm6dso_read_reg>
 800735e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	b2da      	uxtb	r2, r3
 800736e:	7a3b      	ldrb	r3, [r7, #8]
 8007370:	f362 0343 	bfi	r3, r2, #1, #3
 8007374:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	2301      	movs	r3, #1
 800737c:	2111      	movs	r1, #17
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fe06 	bl	8006f90 <lsm6dso_write_reg>
 8007384:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	2301      	movs	r3, #1
 80073a0:	2111      	movs	r1, #17
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff fddc 	bl	8006f60 <lsm6dso_read_reg>
 80073a8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80073aa:	7a3b      	ldrb	r3, [r7, #8]
 80073ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b06      	cmp	r3, #6
 80073b4:	d824      	bhi.n	8007400 <lsm6dso_gy_full_scale_get+0x70>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <lsm6dso_gy_full_scale_get+0x2c>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	080073e1 	.word	0x080073e1
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	08007401 	.word	0x08007401
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	08007401 	.word	0x08007401
 80073d4:	080073f9 	.word	0x080073f9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
      break;
 80073de:	e013      	b.n	8007408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e00f      	b.n	8007408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2202      	movs	r2, #2
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e00b      	b.n	8007408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2204      	movs	r2, #4
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e007      	b.n	8007408 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2206      	movs	r2, #6
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e003      	b.n	8007408 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
      break;
 8007406:	bf00      	nop
  }

  return ret;
 8007408:	68fb      	ldr	r3, [r7, #12]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop

08007414 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fad5 	bl	80079da <lsm6dso_fsm_enable_get>
 8007430:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 80c4 	bne.w	80075c2 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800743a:	7b3b      	ldrb	r3, [r7, #12]
 800743c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007442:	7b3b      	ldrb	r3, [r7, #12]
 8007444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007448:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800744a:	4313      	orrs	r3, r2
 800744c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800744e:	7b3b      	ldrb	r3, [r7, #12]
 8007450:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007454:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007456:	4313      	orrs	r3, r2
 8007458:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800745a:	7b3b      	ldrb	r3, [r7, #12]
 800745c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007460:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007462:	4313      	orrs	r3, r2
 8007464:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007466:	7b3b      	ldrb	r3, [r7, #12]
 8007468:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800746c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800746e:	4313      	orrs	r3, r2
 8007470:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007472:	7b3b      	ldrb	r3, [r7, #12]
 8007474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007478:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800747a:	4313      	orrs	r3, r2
 800747c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800747e:	7b3b      	ldrb	r3, [r7, #12]
 8007480:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007484:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007486:	4313      	orrs	r3, r2
 8007488:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800748a:	7b3b      	ldrb	r3, [r7, #12]
 800748c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007490:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007492:	4313      	orrs	r3, r2
 8007494:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007496:	7b7b      	ldrb	r3, [r7, #13]
 8007498:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800749c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800749e:	4313      	orrs	r3, r2
 80074a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074a2:	7b7b      	ldrb	r3, [r7, #13]
 80074a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074ae:	7b7b      	ldrb	r3, [r7, #13]
 80074b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074ba:	7b7b      	ldrb	r3, [r7, #13]
 80074bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074c6:	7b7b      	ldrb	r3, [r7, #13]
 80074c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80074d2:	7b7b      	ldrb	r3, [r7, #13]
 80074d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074da:	4313      	orrs	r3, r2
 80074dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80074de:	7b7b      	ldrb	r3, [r7, #13]
 80074e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80074ea:	7b7b      	ldrb	r3, [r7, #13]
 80074ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d163      	bne.n	80075c2 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80074fa:	f107 030b 	add.w	r3, r7, #11
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa8b 	bl	8007a1c <lsm6dso_fsm_data_rate_get>
 8007506:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d159      	bne.n	80075c2 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	2b03      	cmp	r3, #3
 8007512:	d853      	bhi.n	80075bc <lsm6dso_gy_data_rate_set+0x1a8>
 8007514:	a201      	add	r2, pc, #4	; (adr r2, 800751c <lsm6dso_gy_data_rate_set+0x108>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	0800752d 	.word	0x0800752d
 8007520:	0800753f 	.word	0x0800753f
 8007524:	0800755d 	.word	0x0800755d
 8007528:	08007587 	.word	0x08007587
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007536:	e045      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	75fb      	strb	r3, [r7, #23]
            break;
 800753c:	e042      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007544:	2302      	movs	r3, #2
 8007546:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007548:	e03c      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d102      	bne.n	8007556 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007550:	2302      	movs	r3, #2
 8007552:	75fb      	strb	r3, [r7, #23]
            break;
 8007554:	e036      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	75fb      	strb	r3, [r7, #23]
            break;
 800755a:	e033      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007562:	2303      	movs	r3, #3
 8007564:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007566:	e02d      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d102      	bne.n	8007574 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800756e:	2303      	movs	r3, #3
 8007570:	75fb      	strb	r3, [r7, #23]
            break;
 8007572:	e027      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d102      	bne.n	8007580 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800757a:	2303      	movs	r3, #3
 800757c:	75fb      	strb	r3, [r7, #23]
            break;
 800757e:	e021      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	75fb      	strb	r3, [r7, #23]
            break;
 8007584:	e01e      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800758c:	2304      	movs	r3, #4
 800758e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007590:	e018      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d102      	bne.n	800759e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007598:	2304      	movs	r3, #4
 800759a:	75fb      	strb	r3, [r7, #23]
            break;
 800759c:	e012      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d102      	bne.n	80075aa <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80075a4:	2304      	movs	r3, #4
 80075a6:	75fb      	strb	r3, [r7, #23]
            break;
 80075a8:	e00c      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d102      	bne.n	80075b6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80075b0:	2304      	movs	r3, #4
 80075b2:	75fb      	strb	r3, [r7, #23]
            break;
 80075b4:	e006      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	75fb      	strb	r3, [r7, #23]
            break;
 80075ba:	e003      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	75fb      	strb	r3, [r7, #23]
            break;
 80075c0:	e000      	b.n	80075c4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80075c2:	bf00      	nop
    }
  }

  if (ret == 0)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d107      	bne.n	80075da <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075ca:	f107 0208 	add.w	r2, r7, #8
 80075ce:	2301      	movs	r3, #1
 80075d0:	2111      	movs	r1, #17
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fcc4 	bl	8006f60 <lsm6dso_read_reg>
 80075d8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10f      	bne.n	8007600 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	7a3b      	ldrb	r3, [r7, #8]
 80075ea:	f362 1307 	bfi	r3, r2, #4, #4
 80075ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075f0:	f107 0208 	add.w	r2, r7, #8
 80075f4:	2301      	movs	r3, #1
 80075f6:	2111      	movs	r1, #17
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fcc9 	bl	8006f90 <lsm6dso_write_reg>
 80075fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007600:	693b      	ldr	r3, [r7, #16]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop

0800760c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007616:	f107 0208 	add.w	r2, r7, #8
 800761a:	2301      	movs	r3, #1
 800761c:	2111      	movs	r1, #17
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fc9e 	bl	8006f60 <lsm6dso_read_reg>
 8007624:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007626:	7a3b      	ldrb	r3, [r7, #8]
 8007628:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b0a      	cmp	r3, #10
 8007630:	d844      	bhi.n	80076bc <lsm6dso_gy_data_rate_get+0xb0>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <lsm6dso_gy_data_rate_get+0x2c>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007665 	.word	0x08007665
 800763c:	0800766d 	.word	0x0800766d
 8007640:	08007675 	.word	0x08007675
 8007644:	0800767d 	.word	0x0800767d
 8007648:	08007685 	.word	0x08007685
 800764c:	0800768d 	.word	0x0800768d
 8007650:	08007695 	.word	0x08007695
 8007654:	0800769d 	.word	0x0800769d
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076ad 	.word	0x080076ad
 8007660:	080076b5 	.word	0x080076b5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
      break;
 800766a:	e02b      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]
      break;
 8007672:	e027      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      break;
 800767a:	e023      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2203      	movs	r2, #3
 8007680:	701a      	strb	r2, [r3, #0]
      break;
 8007682:	e01f      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2204      	movs	r2, #4
 8007688:	701a      	strb	r2, [r3, #0]
      break;
 800768a:	e01b      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2205      	movs	r2, #5
 8007690:	701a      	strb	r2, [r3, #0]
      break;
 8007692:	e017      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2206      	movs	r2, #6
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e013      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2207      	movs	r2, #7
 80076a0:	701a      	strb	r2, [r3, #0]
      break;
 80076a2:	e00f      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2208      	movs	r2, #8
 80076a8:	701a      	strb	r2, [r3, #0]
      break;
 80076aa:	e00b      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2209      	movs	r2, #9
 80076b0:	701a      	strb	r2, [r3, #0]
      break;
 80076b2:	e007      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	220a      	movs	r2, #10
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e003      	b.n	80076c4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
      break;
 80076c2:	bf00      	nop
  }

  return ret;
 80076c4:	68fb      	ldr	r3, [r7, #12]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop

080076d0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80076dc:	f107 0208 	add.w	r2, r7, #8
 80076e0:	2301      	movs	r3, #1
 80076e2:	2112      	movs	r1, #18
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fc3b 	bl	8006f60 <lsm6dso_read_reg>
 80076ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10f      	bne.n	8007712 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	7a3b      	ldrb	r3, [r7, #8]
 80076fc:	f362 1386 	bfi	r3, r2, #6, #1
 8007700:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007702:	f107 0208 	add.w	r2, r7, #8
 8007706:	2301      	movs	r3, #1
 8007708:	2112      	movs	r1, #18
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fc40 	bl	8006f90 <lsm6dso_write_reg>
 8007710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007726:	f107 020c 	add.w	r2, r7, #12
 800772a:	2306      	movs	r3, #6
 800772c:	2122      	movs	r1, #34	; 0x22
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fc16 	bl	8006f60 <lsm6dso_read_reg>
 8007734:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007736:	7b7b      	ldrb	r3, [r7, #13]
 8007738:	b21a      	sxth	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007744:	b29b      	uxth	r3, r3
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	b29a      	uxth	r2, r3
 800774a:	7b3b      	ldrb	r3, [r7, #12]
 800774c:	b29b      	uxth	r3, r3
 800774e:	4413      	add	r3, r2
 8007750:	b29b      	uxth	r3, r3
 8007752:	b21a      	sxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007758:	7bfa      	ldrb	r2, [r7, #15]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	3302      	adds	r3, #2
 800775e:	b212      	sxth	r2, r2
 8007760:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	3302      	adds	r3, #2
 8007766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800776a:	b29b      	uxth	r3, r3
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b29a      	uxth	r2, r3
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	b29b      	uxth	r3, r3
 8007774:	4413      	add	r3, r2
 8007776:	b29a      	uxth	r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	3302      	adds	r3, #2
 800777c:	b212      	sxth	r2, r2
 800777e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007780:	7c7a      	ldrb	r2, [r7, #17]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	3304      	adds	r3, #4
 8007786:	b212      	sxth	r2, r2
 8007788:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	3304      	adds	r3, #4
 800778e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007792:	b29b      	uxth	r3, r3
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29a      	uxth	r2, r3
 8007798:	7c3b      	ldrb	r3, [r7, #16]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	b212      	sxth	r2, r2
 80077a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80077a8:	697b      	ldr	r3, [r7, #20]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80077bc:	f107 020c 	add.w	r2, r7, #12
 80077c0:	2306      	movs	r3, #6
 80077c2:	2128      	movs	r1, #40	; 0x28
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff fbcb 	bl	8006f60 <lsm6dso_read_reg>
 80077ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80077cc:	7b7b      	ldrb	r3, [r7, #13]
 80077ce:	b21a      	sxth	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b29a      	uxth	r2, r3
 80077e0:	7b3b      	ldrb	r3, [r7, #12]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	b21a      	sxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80077ee:	7bfa      	ldrb	r2, [r7, #15]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	3302      	adds	r3, #2
 80077f4:	b212      	sxth	r2, r2
 80077f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	3302      	adds	r3, #2
 80077fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007800:	b29b      	uxth	r3, r3
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	b29a      	uxth	r2, r3
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	b29b      	uxth	r3, r3
 800780a:	4413      	add	r3, r2
 800780c:	b29a      	uxth	r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	3302      	adds	r3, #2
 8007812:	b212      	sxth	r2, r2
 8007814:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007816:	7c7a      	ldrb	r2, [r7, #17]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	3304      	adds	r3, #4
 800781c:	b212      	sxth	r2, r2
 800781e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3304      	adds	r3, #4
 8007824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007828:	b29b      	uxth	r3, r3
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	b29a      	uxth	r2, r3
 800782e:	7c3b      	ldrb	r3, [r7, #16]
 8007830:	b29b      	uxth	r3, r3
 8007832:	4413      	add	r3, r2
 8007834:	b29a      	uxth	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	3304      	adds	r3, #4
 800783a:	b212      	sxth	r2, r2
 800783c:	801a      	strh	r2, [r3, #0]

  return ret;
 800783e:	697b      	ldr	r3, [r7, #20]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007854:	f107 0208 	add.w	r2, r7, #8
 8007858:	2301      	movs	r3, #1
 800785a:	2101      	movs	r1, #1
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fb7f 	bl	8006f60 <lsm6dso_read_reg>
 8007862:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	b2da      	uxtb	r2, r3
 8007872:	7a3b      	ldrb	r3, [r7, #8]
 8007874:	f362 1387 	bfi	r3, r2, #6, #2
 8007878:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800787a:	f107 0208 	add.w	r2, r7, #8
 800787e:	2301      	movs	r3, #1
 8007880:	2101      	movs	r1, #1
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fb84 	bl	8006f90 <lsm6dso_write_reg>
 8007888:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800789e:	2301      	movs	r3, #1
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	210f      	movs	r1, #15
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fb5b 	bl	8006f60 <lsm6dso_read_reg>
 80078aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80078ac:	68fb      	ldr	r3, [r7, #12]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	2301      	movs	r3, #1
 80078c8:	2112      	movs	r1, #18
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff fb48 	bl	8006f60 <lsm6dso_read_reg>
 80078d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10f      	bne.n	80078f8 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	7a3b      	ldrb	r3, [r7, #8]
 80078e2:	f362 0382 	bfi	r3, r2, #2, #1
 80078e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80078e8:	f107 0208 	add.w	r2, r7, #8
 80078ec:	2301      	movs	r3, #1
 80078ee:	2112      	movs	r1, #18
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fb4d 	bl	8006f90 <lsm6dso_write_reg>
 80078f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078f8:	68fb      	ldr	r3, [r7, #12]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800790e:	f107 020c 	add.w	r2, r7, #12
 8007912:	2301      	movs	r3, #1
 8007914:	2118      	movs	r1, #24
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fb22 	bl	8006f60 <lsm6dso_read_reg>
 800791c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d111      	bne.n	8007948 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	09db      	lsrs	r3, r3, #7
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	7b3b      	ldrb	r3, [r7, #12]
 8007932:	f362 0341 	bfi	r3, r2, #1, #1
 8007936:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007938:	f107 020c 	add.w	r2, r7, #12
 800793c:	2301      	movs	r3, #1
 800793e:	2118      	movs	r1, #24
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fb25 	bl	8006f90 <lsm6dso_write_reg>
 8007946:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d107      	bne.n	800795e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800794e:	f107 0210 	add.w	r2, r7, #16
 8007952:	2301      	movs	r3, #1
 8007954:	2162      	movs	r1, #98	; 0x62
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fb02 	bl	8006f60 <lsm6dso_read_reg>
 800795c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10f      	bne.n	8007984 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	b2da      	uxtb	r2, r3
 800796c:	7c3b      	ldrb	r3, [r7, #16]
 800796e:	f362 03c4 	bfi	r3, r2, #3, #2
 8007972:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007974:	f107 0210 	add.w	r2, r7, #16
 8007978:	2301      	movs	r3, #1
 800797a:	2162      	movs	r1, #98	; 0x62
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fb07 	bl	8006f90 <lsm6dso_write_reg>
 8007982:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007984:	697b      	ldr	r3, [r7, #20]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800799a:	f107 0208 	add.w	r2, r7, #8
 800799e:	2301      	movs	r3, #1
 80079a0:	210a      	movs	r1, #10
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fadc 	bl	8006f60 <lsm6dso_read_reg>
 80079a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	7a3b      	ldrb	r3, [r7, #8]
 80079ba:	f362 0302 	bfi	r3, r2, #0, #3
 80079be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80079c0:	f107 0208 	add.w	r2, r7, #8
 80079c4:	2301      	movs	r3, #1
 80079c6:	210a      	movs	r1, #10
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff fae1 	bl	8006f90 <lsm6dso_write_reg>
 80079ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80079e4:	2102      	movs	r1, #2
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff ff2e 	bl	8007848 <lsm6dso_mem_bank_set>
 80079ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80079f4:	2302      	movs	r3, #2
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	2146      	movs	r1, #70	; 0x46
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fab0 	bl	8006f60 <lsm6dso_read_reg>
 8007a00:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff ff1c 	bl	8007848 <lsm6dso_mem_bank_set>
 8007a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007a26:	2102      	movs	r1, #2
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff0d 	bl	8007848 <lsm6dso_mem_bank_set>
 8007a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d107      	bne.n	8007a46 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007a36:	f107 0208 	add.w	r2, r7, #8
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	215f      	movs	r1, #95	; 0x5f
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fa8e 	bl	8006f60 <lsm6dso_read_reg>
 8007a44:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d12a      	bne.n	8007aa2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8007a4c:	7a3b      	ldrb	r3, [r7, #8]
 8007a4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d81b      	bhi.n	8007a90 <lsm6dso_fsm_data_rate_get+0x74>
 8007a58:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <lsm6dso_fsm_data_rate_get+0x44>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007a79 	.word	0x08007a79
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a89 	.word	0x08007a89
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
        break;
 8007a76:	e00f      	b.n	8007a98 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
        break;
 8007a7e:	e00b      	b.n	8007a98 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2202      	movs	r2, #2
 8007a84:	701a      	strb	r2, [r3, #0]
        break;
 8007a86:	e007      	b.n	8007a98 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	701a      	strb	r2, [r3, #0]
        break;
 8007a8e:	e003      	b.n	8007a98 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
        break;
 8007a96:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fed4 	bl	8007848 <lsm6dso_mem_bank_set>
 8007aa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d103      	bne.n	8007ac4 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e030      	b.n	8007b26 <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	7b1a      	ldrb	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a0c      	ldr	r2, [pc, #48]	; (8007b30 <STTS751_RegisterBusIO+0x84>)
 8007b00:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a0b      	ldr	r2, [pc, #44]	; (8007b34 <STTS751_RegisterBusIO+0x88>)
 8007b06:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	e002      	b.n	8007b26 <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295
 8007b24:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	08007fb9 	.word	0x08007fb9
 8007b34:	08008027 	.word	0x08008027

08007b38 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d127      	bne.n	8007b9a <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	331c      	adds	r3, #28
 8007b4e:	2101      	movs	r1, #1
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fc4c 	bl	80083ee <stts751_pin_event_route_set>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b60:	e020      	b.n	8007ba4 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	331c      	adds	r3, #28
 8007b6e:	2103      	movs	r1, #3
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fbaf 	bl	80082d4 <stts751_resolution_set>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	e010      	b.n	8007ba4 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	331c      	adds	r3, #28
 8007b86:	2180      	movs	r1, #128	; 0x80
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 facd 	bl	8008128 <stts751_temp_data_rate_set>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007b94:	f04f 33ff 	mov.w	r3, #4294967295
 8007b98:	e004      	b.n	8007ba4 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d108      	bne.n	8007bd0 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f870 	bl	8007ca4 <STTS751_TEMP_Disable>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	e004      	b.n	8007bda <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	331c      	adds	r3, #28
 8007bf0:	f107 020c 	add.w	r2, r7, #12
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fc1f 	bl	800843a <stts751_device_id_get>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	e003      	b.n	8007c10 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007c08:	7b7a      	ldrb	r2, [r7, #13]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2200      	movs	r2, #0
 8007c26:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2201      	movs	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007c48:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e012      	b.n	8007c9c <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f8b5 	bl	8007df0 <STTS751_TEMP_SetOutputDataRate>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	e004      	b.n	8007c9c <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e01c      	b.n	8007cf4 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	332c      	adds	r3, #44	; 0x2c
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f81b 	bl	8007cfc <STTS751_TEMP_GetOutputDataRate>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	e010      	b.n	8007cf4 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	331c      	adds	r3, #28
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fa25 	bl	8008128 <stts751_temp_data_rate_set>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce8:	e004      	b.n	8007cf4 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	331c      	adds	r3, #28
 8007d0e:	f107 020b 	add.w	r2, r7, #11
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fa5d 	bl	80081d4 <stts751_temp_data_rate_get>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	e060      	b.n	8007de8 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	2b90      	cmp	r3, #144	; 0x90
 8007d2a:	d021      	beq.n	8007d70 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007d2c:	2b90      	cmp	r3, #144	; 0x90
 8007d2e:	dc56      	bgt.n	8007dde <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	dc1b      	bgt.n	8007d6c <STTS751_TEMP_GetOutputDataRate+0x70>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db52      	blt.n	8007dde <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d850      	bhi.n	8007dde <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d7b 	.word	0x08007d7b
 8007d48:	08007d85 	.word	0x08007d85
 8007d4c:	08007d8f 	.word	0x08007d8f
 8007d50:	08007d99 	.word	0x08007d99
 8007d54:	08007da3 	.word	0x08007da3
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007db7 	.word	0x08007db7
 8007d60:	08007dc1 	.word	0x08007dc1
 8007d64:	08007dcb 	.word	0x08007dcb
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	2b80      	cmp	r3, #128	; 0x80
 8007d6e:	d136      	bne.n	8007dde <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
      break;
 8007d78:	e035      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8007d80:	601a      	str	r2, [r3, #0]
      break;
 8007d82:	e030      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8007d8a:	601a      	str	r2, [r3, #0]
      break;
 8007d8c:	e02b      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8007d94:	601a      	str	r2, [r3, #0]
      break;
 8007d96:	e026      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007d9e:	601a      	str	r2, [r3, #0]
      break;
 8007da0:	e021      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007da8:	601a      	str	r2, [r3, #0]
      break;
 8007daa:	e01c      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007db2:	601a      	str	r2, [r3, #0]
      break;
 8007db4:	e017      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007dbc:	601a      	str	r2, [r3, #0]
      break;
 8007dbe:	e012      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8007dc6:	601a      	str	r2, [r3, #0]
      break;
 8007dc8:	e00d      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8007dd0:	601a      	str	r2, [r3, #0]
      break;
 8007dd2:	e008      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007dda:	601a      	str	r2, [r3, #0]
      break;
 8007ddc:	e003      	b.n	8007de6 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295
 8007de2:	60fb      	str	r3, [r7, #12]
      break;
 8007de4:	bf00      	nop
  }

  return ret;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	331c      	adds	r3, #28
 8007e00:	f107 020e 	add.w	r2, r7, #14
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fa8a 	bl	8008320 <stts751_resolution_get>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	e0a5      	b.n	8007f64 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8007e18:	edd7 7a00 	vldr	s15, [r7]
 8007e1c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007e20:	eef4 7a47 	vcmp.f32	s15, s14
 8007e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e28:	d10e      	bne.n	8007e48 <STTS751_TEMP_SetOutputDataRate+0x58>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d10b      	bne.n	8007e48 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	331c      	adds	r3, #28
 8007e34:	2101      	movs	r1, #1
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fa4c 	bl	80082d4 <stts751_resolution_set>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	e08d      	b.n	8007f64 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007e48:	edd7 7a00 	vldr	s15, [r7]
 8007e4c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007f6c <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007e50:	eef4 7a47 	vcmp.f32	s15, s14
 8007e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e58:	d111      	bne.n	8007e7e <STTS751_TEMP_SetOutputDataRate+0x8e>
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d002      	beq.n	8007e66 <STTS751_TEMP_SetOutputDataRate+0x76>
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d10b      	bne.n	8007e7e <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	331c      	adds	r3, #28
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fa31 	bl	80082d4 <stts751_resolution_set>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7c:	e072      	b.n	8007f64 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8007e7e:	edd7 7a00 	vldr	s15, [r7]
 8007e82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007f70 <STTS751_TEMP_SetOutputDataRate+0x180>
 8007e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8e:	d801      	bhi.n	8007e94 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e058      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007e94:	edd7 7a00 	vldr	s15, [r7]
 8007e98:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea4:	d801      	bhi.n	8007eaa <STTS751_TEMP_SetOutputDataRate+0xba>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e04d      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007eaa:	edd7 7a00 	vldr	s15, [r7]
 8007eae:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	d801      	bhi.n	8007ec0 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e042      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007ec0:	edd7 7a00 	vldr	s15, [r7]
 8007ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed0:	d801      	bhi.n	8007ed6 <STTS751_TEMP_SetOutputDataRate+0xe6>
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e037      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007ed6:	edd7 7a00 	vldr	s15, [r7]
 8007eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee6:	d801      	bhi.n	8007eec <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	e02c      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007eec:	edd7 7a00 	vldr	s15, [r7]
 8007ef0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efc:	d801      	bhi.n	8007f02 <STTS751_TEMP_SetOutputDataRate+0x112>
 8007efe:	2305      	movs	r3, #5
 8007f00:	e021      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007f02:	edd7 7a00 	vldr	s15, [r7]
 8007f06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f12:	d801      	bhi.n	8007f18 <STTS751_TEMP_SetOutputDataRate+0x128>
 8007f14:	2306      	movs	r3, #6
 8007f16:	e016      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007f18:	edd7 7a00 	vldr	s15, [r7]
 8007f1c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	d801      	bhi.n	8007f2e <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007f2a:	2307      	movs	r3, #7
 8007f2c:	e00b      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007f2e:	edd7 7a00 	vldr	s15, [r7]
 8007f32:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3e:	d801      	bhi.n	8007f44 <STTS751_TEMP_SetOutputDataRate+0x154>
 8007f40:	2308      	movs	r3, #8
 8007f42:	e000      	b.n	8007f46 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007f44:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8007f46:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	331c      	adds	r3, #28
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f8e9 	bl	8008128 <stts751_temp_data_rate_set>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f60:	e000      	b.n	8007f64 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	42000000 	.word	0x42000000
 8007f70:	3d800000 	.word	0x3d800000

08007f74 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	331c      	adds	r3, #28
 8007f82:	f107 020e 	add.w	r2, r7, #14
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fa01 	bl	8008390 <stts751_temperature_raw_get>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295
 8007f98:	e00a      	b.n	8007fb0 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8007f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f8a8 	bl	80080f4 <stts751_from_lsb_to_celsius>
 8007fa4:	eef0 7a40 	vmov.f32	s15, s0
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	607a      	str	r2, [r7, #4]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	72fb      	strb	r3, [r7, #11]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11f      	bne.n	800801c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	83fb      	strh	r3, [r7, #30]
 8007fe0:	e018      	b.n	8008014 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	695c      	ldr	r4, [r3, #20]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	7b1b      	ldrb	r3, [r3, #12]
 8007fea:	b298      	uxth	r0, r3
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	8bfb      	ldrh	r3, [r7, #30]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	b299      	uxth	r1, r3
 8007ff6:	8bfb      	ldrh	r3, [r7, #30]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	47a0      	blx	r4
 8008000:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008008:	f04f 33ff 	mov.w	r3, #4294967295
 800800c:	e007      	b.n	800801e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800800e:	8bfb      	ldrh	r3, [r7, #30]
 8008010:	3301      	adds	r3, #1
 8008012:	83fb      	strh	r3, [r7, #30]
 8008014:	8bfa      	ldrh	r2, [r7, #30]
 8008016:	893b      	ldrh	r3, [r7, #8]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3e2      	bcc.n	8007fe2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800801c:	69bb      	ldr	r3, [r7, #24]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3724      	adds	r7, #36	; 0x24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd90      	pop	{r4, r7, pc}

08008026 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008026:	b590      	push	{r4, r7, lr}
 8008028:	b089      	sub	sp, #36	; 0x24
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	461a      	mov	r2, r3
 8008032:	460b      	mov	r3, r1
 8008034:	72fb      	strb	r3, [r7, #11]
 8008036:	4613      	mov	r3, r2
 8008038:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d11f      	bne.n	800808a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800804a:	2300      	movs	r3, #0
 800804c:	83fb      	strh	r3, [r7, #30]
 800804e:	e018      	b.n	8008082 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	691c      	ldr	r4, [r3, #16]
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	7b1b      	ldrb	r3, [r3, #12]
 8008058:	b298      	uxth	r0, r3
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	b29a      	uxth	r2, r3
 800805e:	8bfb      	ldrh	r3, [r7, #30]
 8008060:	4413      	add	r3, r2
 8008062:	b299      	uxth	r1, r3
 8008064:	8bfb      	ldrh	r3, [r7, #30]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	441a      	add	r2, r3
 800806a:	2301      	movs	r3, #1
 800806c:	47a0      	blx	r4
 800806e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008076:	f04f 33ff 	mov.w	r3, #4294967295
 800807a:	e007      	b.n	800808c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800807c:	8bfb      	ldrh	r3, [r7, #30]
 800807e:	3301      	adds	r3, #1
 8008080:	83fb      	strh	r3, [r7, #30]
 8008082:	8bfa      	ldrh	r2, [r7, #30]
 8008084:	893b      	ldrh	r3, [r7, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d3e2      	bcc.n	8008050 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800808a:	69bb      	ldr	r3, [r7, #24]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3724      	adds	r7, #36	; 0x24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd90      	pop	{r4, r7, pc}

08008094 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	461a      	mov	r2, r3
 80080a0:	460b      	mov	r3, r1
 80080a2:	72fb      	strb	r3, [r7, #11]
 80080a4:	4613      	mov	r3, r2
 80080a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685c      	ldr	r4, [r3, #4]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6898      	ldr	r0, [r3, #8]
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	7af9      	ldrb	r1, [r7, #11]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	47a0      	blx	r4
 80080b8:	6178      	str	r0, [r7, #20]

  return ret;
 80080ba:	697b      	ldr	r3, [r7, #20]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd90      	pop	{r4, r7, pc}

080080c4 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	461a      	mov	r2, r3
 80080d0:	460b      	mov	r3, r1
 80080d2:	72fb      	strb	r3, [r7, #11]
 80080d4:	4613      	mov	r3, r2
 80080d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681c      	ldr	r4, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6898      	ldr	r0, [r3, #8]
 80080e0:	893b      	ldrh	r3, [r7, #8]
 80080e2:	7af9      	ldrb	r1, [r7, #11]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	47a0      	blx	r4
 80080e8:	6178      	str	r0, [r7, #20]

  return ret;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}

080080f4 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 80080fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800810a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008124 <stts751_from_lsb_to_celsius+0x30>
 800810e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008112:	eef0 7a66 	vmov.f32	s15, s13
}
 8008116:	eeb0 0a67 	vmov.f32	s0, s15
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	43800000 	.word	0x43800000

08008128 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008134:	23aa      	movs	r3, #170	; 0xaa
 8008136:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008138:	f107 020c 	add.w	r2, r7, #12
 800813c:	2301      	movs	r3, #1
 800813e:	2104      	movs	r1, #4
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ffa7 	bl	8008094 <stts751_read_reg>
 8008146:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10f      	bne.n	800816e <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	b2da      	uxtb	r2, r3
 8008156:	7b3b      	ldrb	r3, [r7, #12]
 8008158:	f362 0303 	bfi	r3, r2, #0, #4
 800815c:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800815e:	f107 020c 	add.w	r2, r7, #12
 8008162:	2301      	movs	r3, #1
 8008164:	2104      	movs	r1, #4
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ffac 	bl	80080c4 <stts751_write_reg>
 800816c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d107      	bne.n	8008184 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008174:	f107 0210 	add.w	r2, r7, #16
 8008178:	2301      	movs	r3, #1
 800817a:	2103      	movs	r1, #3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff ff89 	bl	8008094 <stts751_read_reg>
 8008182:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d111      	bne.n	80081ae <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	09db      	lsrs	r3, r3, #7
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	b2da      	uxtb	r2, r3
 8008196:	7c3b      	ldrb	r3, [r7, #16]
 8008198:	f362 1386 	bfi	r3, r2, #6, #1
 800819c:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800819e:	f107 0210 	add.w	r2, r7, #16
 80081a2:	2301      	movs	r3, #1
 80081a4:	2103      	movs	r1, #3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ff8c 	bl	80080c4 <stts751_write_reg>
 80081ac:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <stts751_temp_data_rate_set+0xa2>
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b90      	cmp	r3, #144	; 0x90
 80081b8:	d107      	bne.n	80081ca <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80081ba:	f107 020b 	add.w	r2, r7, #11
 80081be:	2301      	movs	r3, #1
 80081c0:	210f      	movs	r1, #15
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ff7e 	bl	80080c4 <stts751_write_reg>
 80081c8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80081ca:	697b      	ldr	r3, [r7, #20]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80081de:	f107 0210 	add.w	r2, r7, #16
 80081e2:	2301      	movs	r3, #1
 80081e4:	2104      	movs	r1, #4
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff ff54 	bl	8008094 <stts751_read_reg>
 80081ec:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80081f4:	f107 020c 	add.w	r2, r7, #12
 80081f8:	2301      	movs	r3, #1
 80081fa:	2103      	movs	r1, #3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff ff49 	bl	8008094 <stts751_read_reg>
 8008202:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008204:	7b3b      	ldrb	r3, [r7, #12]
 8008206:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	01db      	lsls	r3, r3, #7
 800820e:	7c3a      	ldrb	r2, [r7, #16]
 8008210:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008214:	b2d2      	uxtb	r2, r2
 8008216:	4413      	add	r3, r2
 8008218:	2b90      	cmp	r3, #144	; 0x90
 800821a:	d025      	beq.n	8008268 <stts751_temp_data_rate_get+0x94>
 800821c:	2b90      	cmp	r3, #144	; 0x90
 800821e:	dc4f      	bgt.n	80082c0 <stts751_temp_data_rate_get+0xec>
 8008220:	2b09      	cmp	r3, #9
 8008222:	dc1b      	bgt.n	800825c <stts751_temp_data_rate_get+0x88>
 8008224:	2b00      	cmp	r3, #0
 8008226:	db4b      	blt.n	80082c0 <stts751_temp_data_rate_get+0xec>
 8008228:	2b09      	cmp	r3, #9
 800822a:	d849      	bhi.n	80082c0 <stts751_temp_data_rate_get+0xec>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <stts751_temp_data_rate_get+0x60>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	08008271 	.word	0x08008271
 8008238:	08008279 	.word	0x08008279
 800823c:	08008281 	.word	0x08008281
 8008240:	08008289 	.word	0x08008289
 8008244:	08008291 	.word	0x08008291
 8008248:	08008299 	.word	0x08008299
 800824c:	080082a1 	.word	0x080082a1
 8008250:	080082a9 	.word	0x080082a9
 8008254:	080082b1 	.word	0x080082b1
 8008258:	080082b9 	.word	0x080082b9
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d12f      	bne.n	80082c0 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2280      	movs	r2, #128	; 0x80
 8008264:	701a      	strb	r2, [r3, #0]
      break;
 8008266:	e02f      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2290      	movs	r2, #144	; 0x90
 800826c:	701a      	strb	r2, [r3, #0]
      break;
 800826e:	e02b      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
      break;
 8008276:	e027      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2201      	movs	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]
      break;
 800827e:	e023      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2202      	movs	r2, #2
 8008284:	701a      	strb	r2, [r3, #0]
      break;
 8008286:	e01f      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2203      	movs	r2, #3
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e01b      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2204      	movs	r2, #4
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e017      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2205      	movs	r2, #5
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e013      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2206      	movs	r2, #6
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	e00f      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2207      	movs	r2, #7
 80082ac:	701a      	strb	r2, [r3, #0]
      break;
 80082ae:	e00b      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2208      	movs	r2, #8
 80082b4:	701a      	strb	r2, [r3, #0]
      break;
 80082b6:	e007      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2209      	movs	r2, #9
 80082bc:	701a      	strb	r2, [r3, #0]
      break;
 80082be:	e003      	b.n	80082c8 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2280      	movs	r2, #128	; 0x80
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	bf00      	nop
  }

  return ret;
 80082c8:	697b      	ldr	r3, [r7, #20]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80082e0:	f107 0208 	add.w	r2, r7, #8
 80082e4:	2301      	movs	r3, #1
 80082e6:	2103      	movs	r1, #3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fed3 	bl	8008094 <stts751_read_reg>
 80082ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10f      	bne.n	8008316 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	7a3b      	ldrb	r3, [r7, #8]
 8008300:	f362 0383 	bfi	r3, r2, #2, #2
 8008304:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008306:	f107 0208 	add.w	r2, r7, #8
 800830a:	2301      	movs	r3, #1
 800830c:	2103      	movs	r1, #3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff fed8 	bl	80080c4 <stts751_write_reg>
 8008314:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008316:	68fb      	ldr	r3, [r7, #12]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800832a:	f107 0208 	add.w	r2, r7, #8
 800832e:	2301      	movs	r3, #1
 8008330:	2103      	movs	r1, #3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff feae 	bl	8008094 <stts751_read_reg>
 8008338:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 800833a:	7a3b      	ldrb	r3, [r7, #8]
 800833c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b03      	cmp	r3, #3
 8008344:	d81a      	bhi.n	800837c <stts751_resolution_get+0x5c>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <stts751_resolution_get+0x2c>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	08008365 	.word	0x08008365
 8008350:	0800836d 	.word	0x0800836d
 8008354:	0800835d 	.word	0x0800835d
 8008358:	08008375 	.word	0x08008375
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2202      	movs	r2, #2
 8008360:	701a      	strb	r2, [r3, #0]
      break;
 8008362:	e00f      	b.n	8008384 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
      break;
 800836a:	e00b      	b.n	8008384 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2201      	movs	r2, #1
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e007      	b.n	8008384 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2203      	movs	r2, #3
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e003      	b.n	8008384 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2202      	movs	r2, #2
 8008380:	701a      	strb	r2, [r3, #0]
      break;
 8008382:	bf00      	nop
  }

  return ret;
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop

08008390 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	2301      	movs	r3, #1
 80083a2:	2100      	movs	r1, #0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff fe75 	bl	8008094 <stts751_read_reg>
 80083aa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d118      	bne.n	80083e4 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	2301      	movs	r3, #1
 80083b8:	2102      	movs	r1, #2
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff fe6a 	bl	8008094 <stts751_read_reg>
 80083c0:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80083c2:	7a7b      	ldrb	r3, [r7, #9]
 80083c4:	b21a      	sxth	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	7a3b      	ldrb	r3, [r7, #8]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	4413      	add	r3, r2
 80083dc:	b29b      	uxth	r3, r3
 80083de:	b21a      	sxth	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80083e4:	68fb      	ldr	r3, [r7, #12]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80083fa:	f107 0208 	add.w	r2, r7, #8
 80083fe:	2301      	movs	r3, #1
 8008400:	2103      	movs	r1, #3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fe46 	bl	8008094 <stts751_read_reg>
 8008408:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	b2da      	uxtb	r2, r3
 8008418:	7a3b      	ldrb	r3, [r7, #8]
 800841a:	f362 13c7 	bfi	r3, r2, #7, #1
 800841e:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008420:	f107 0208 	add.w	r2, r7, #8
 8008424:	2301      	movs	r3, #1
 8008426:	2103      	movs	r1, #3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fe4b 	bl	80080c4 <stts751_write_reg>
 800842e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	2301      	movs	r3, #1
 8008448:	21fd      	movs	r1, #253	; 0xfd
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fe22 	bl	8008094 <stts751_read_reg>
 8008450:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	2301      	movs	r3, #1
 800845e:	21fe      	movs	r1, #254	; 0xfe
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fe17 	bl	8008094 <stts751_read_reg>
 8008466:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d107      	bne.n	800847e <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	2301      	movs	r3, #1
 8008474:	21ff      	movs	r1, #255	; 0xff
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fe0c 	bl	8008094 <stts751_read_reg>
 800847c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8008496:	2301      	movs	r3, #1
 8008498:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d06e      	beq.n	8008582 <IKS01A3_ENV_SENSOR_Init+0xfa>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	f200 809d 	bhi.w	80085e6 <IKS01A3_ENV_SENSOR_Init+0x15e>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <IKS01A3_ENV_SENSOR_Init+0x32>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d032      	beq.n	800851e <IKS01A3_ENV_SENSOR_Init+0x96>
 80084b8:	e095      	b.n	80085e6 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80084ba:	6838      	ldr	r0, [r7, #0]
 80084bc:	f000 f9bc 	bl	8008838 <HTS221_0_Probe>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	e0cc      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80084cc:	4a68      	ldr	r2, [pc, #416]	; (8008670 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4967      	ldr	r1, [pc, #412]	; (8008674 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084de:	f107 0108 	add.w	r1, r7, #8
 80084e2:	4610      	mov	r0, r2
 80084e4:	4798      	blx	r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80084ec:	f06f 0306 	mvn.w	r3, #6
 80084f0:	e0b9      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80084f2:	7a3b      	ldrb	r3, [r7, #8]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d103      	bne.n	8008500 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f043 0301 	orr.w	r3, r3, #1
 80084fe:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008500:	7abb      	ldrb	r3, [r7, #10]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d103      	bne.n	800850e <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f043 0304 	orr.w	r3, r3, #4
 800850c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800850e:	7a7b      	ldrb	r3, [r7, #9]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d16c      	bne.n	80085ee <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f043 0302 	orr.w	r3, r3, #2
 800851a:	61bb      	str	r3, [r7, #24]
      }
      break;
 800851c:	e067      	b.n	80085ee <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800851e:	6838      	ldr	r0, [r7, #0]
 8008520:	f000 fa44 	bl	80089ac <LPS22HH_0_Probe>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800852a:	f04f 33ff 	mov.w	r3, #4294967295
 800852e:	e09a      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008530:	4a4f      	ldr	r2, [pc, #316]	; (8008670 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	494e      	ldr	r1, [pc, #312]	; (8008674 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008542:	f107 0108 	add.w	r1, r7, #8
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008550:	f06f 0306 	mvn.w	r3, #6
 8008554:	e087      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8008556:	7a3b      	ldrb	r3, [r7, #8]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d103      	bne.n	8008564 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008564:	7abb      	ldrb	r3, [r7, #10]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d103      	bne.n	8008572 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	f043 0304 	orr.w	r3, r3, #4
 8008570:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008572:	7a7b      	ldrb	r3, [r7, #9]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d13c      	bne.n	80085f2 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f043 0302 	orr.w	r3, r3, #2
 800857e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008580:	e037      	b.n	80085f2 <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8008582:	6838      	ldr	r0, [r7, #0]
 8008584:	f000 face 	bl	8008b24 <STTS751_0_Probe>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800858e:	f04f 33ff 	mov.w	r3, #4294967295
 8008592:	e068      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008594:	4a36      	ldr	r2, [pc, #216]	; (8008670 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	4935      	ldr	r1, [pc, #212]	; (8008674 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80085a6:	f107 0108 	add.w	r1, r7, #8
 80085aa:	4610      	mov	r0, r2
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80085b4:	f06f 0306 	mvn.w	r3, #6
 80085b8:	e055      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80085ba:	7a3b      	ldrb	r3, [r7, #8]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d103      	bne.n	80085c8 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f043 0301 	orr.w	r3, r3, #1
 80085c6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80085c8:	7abb      	ldrb	r3, [r7, #10]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d103      	bne.n	80085d6 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f043 0304 	orr.w	r3, r3, #4
 80085d4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80085d6:	7a7b      	ldrb	r3, [r7, #9]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10c      	bne.n	80085f6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	f043 0302 	orr.w	r3, r3, #2
 80085e2:	61bb      	str	r3, [r7, #24]
      }
      break;
 80085e4:	e007      	b.n	80085f6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80085e6:	f06f 0301 	mvn.w	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80085ec:	e004      	b.n	80085f8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80085ee:	bf00      	nop
 80085f0:	e002      	b.n	80085f8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80085f2:	bf00      	nop
 80085f4:	e000      	b.n	80085f8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80085f6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	e031      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	e02a      	b.n	800865e <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	4013      	ands	r3, r2
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	429a      	cmp	r2, r3
 8008612:	d11e      	bne.n	8008652 <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	4013      	ands	r3, r2
 800861a:	6a3a      	ldr	r2, [r7, #32]
 800861c:	429a      	cmp	r2, r3
 800861e:	d118      	bne.n	8008652 <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008628:	4814      	ldr	r0, [pc, #80]	; (800867c <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	4413      	add	r3, r2
 8008632:	440b      	add	r3, r1
 8008634:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	490e      	ldr	r1, [pc, #56]	; (8008674 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008642:	4610      	mov	r0, r2
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800864c:	f06f 0304 	mvn.w	r3, #4
 8008650:	e009      	b.n	8008666 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d9d1      	bls.n	8008608 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008666:	4618      	mov	r0, r3
 8008668:	3728      	adds	r7, #40	; 0x28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200009dc 	.word	0x200009dc
 8008674:	200009ac 	.word	0x200009ac
 8008678:	20000158 	.word	0x20000158
 800867c:	200009b8 	.word	0x200009b8

08008680 <IKS01A3_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d903      	bls.n	8008698 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008690:	f06f 0301 	mvn.w	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e014      	b.n	80086c2 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008698:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	490b      	ldr	r1, [pc, #44]	; (80086d0 <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80086b6:	f06f 0306 	mvn.w	r3, #6
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e001      	b.n	80086c2 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80086c2:	68fb      	ldr	r3, [r7, #12]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	200009dc 	.word	0x200009dc
 80086d0:	200009ac 	.word	0x200009ac

080086d4 <IKS01A3_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d903      	bls.n	80086ec <IKS01A3_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80086e4:	f06f 0301 	mvn.w	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e014      	b.n	8008716 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 80086ec:	4a0c      	ldr	r2, [pc, #48]	; (8008720 <IKS01A3_ENV_SENSOR_ReadID+0x4c>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	490b      	ldr	r1, [pc, #44]	; (8008724 <IKS01A3_ENV_SENSOR_ReadID+0x50>)
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <IKS01A3_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800870a:	f06f 0306 	mvn.w	r3, #6
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e001      	b.n	8008716 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	200009dc 	.word	0x200009dc
 8008724:	200009ac 	.word	0x200009ac

08008728 <IKS01A3_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d903      	bls.n	8008742 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800873a:	f06f 0301 	mvn.w	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e029      	b.n	8008796 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008742:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x78>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4013      	ands	r3, r2
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d11d      	bne.n	8008790 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x7c>)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800875c:	4812      	ldr	r0, [pc, #72]	; (80087a8 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x80>)
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4613      	mov	r3, r2
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	4413      	add	r3, r2
 8008766:	440b      	add	r3, r1
 8008768:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	490f      	ldr	r1, [pc, #60]	; (80087ac <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x84>)
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008782:	f06f 0304 	mvn.w	r3, #4
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e005      	b.n	8008796 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	e002      	b.n	8008796 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008790:	f06f 0301 	mvn.w	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008796:	697b      	ldr	r3, [r7, #20]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200009e8 	.word	0x200009e8
 80087a4:	20000158 	.word	0x20000158
 80087a8:	200009b8 	.word	0x200009b8
 80087ac:	200009ac 	.word	0x200009ac

080087b0 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d903      	bls.n	80087ca <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80087c2:	f06f 0301 	mvn.w	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e029      	b.n	800881e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d11d      	bne.n	8008818 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80087dc:	4a13      	ldr	r2, [pc, #76]	; (800882c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087e4:	4812      	ldr	r0, [pc, #72]	; (8008830 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4613      	mov	r3, r2
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	4413      	add	r3, r2
 80087ee:	440b      	add	r3, r1
 80087f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	490f      	ldr	r1, [pc, #60]	; (8008834 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800880a:	f06f 0304 	mvn.w	r3, #4
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e005      	b.n	800881e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e002      	b.n	800881e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008818:	f06f 0301 	mvn.w	r3, #1
 800881c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800881e:	697b      	ldr	r3, [r7, #20]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	200009e8 	.word	0x200009e8
 800882c:	20000158 	.word	0x20000158
 8008830:	200009b8 	.word	0x200009b8
 8008834:	200009ac 	.word	0x200009ac

08008838 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b090      	sub	sp, #64	; 0x40
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8008840:	2300      	movs	r3, #0
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008844:	2300      	movs	r3, #0
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008848:	23bf      	movs	r3, #191	; 0xbf
 800884a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 800884e:	4b49      	ldr	r3, [pc, #292]	; (8008974 <HTS221_0_Probe+0x13c>)
 8008850:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008852:	4b49      	ldr	r3, [pc, #292]	; (8008978 <HTS221_0_Probe+0x140>)
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008856:	4b49      	ldr	r3, [pc, #292]	; (800897c <HTS221_0_Probe+0x144>)
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800885a:	4b49      	ldr	r3, [pc, #292]	; (8008980 <HTS221_0_Probe+0x148>)
 800885c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 800885e:	4b49      	ldr	r3, [pc, #292]	; (8008984 <HTS221_0_Probe+0x14c>)
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8008862:	f107 0320 	add.w	r3, r7, #32
 8008866:	4619      	mov	r1, r3
 8008868:	4847      	ldr	r0, [pc, #284]	; (8008988 <HTS221_0_Probe+0x150>)
 800886a:	f7f9 f97d 	bl	8001b68 <HTS221_RegisterBusIO>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008874:	f06f 0306 	mvn.w	r3, #6
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800887a:	e076      	b.n	800896a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800887c:	f107 031f 	add.w	r3, r7, #31
 8008880:	4619      	mov	r1, r3
 8008882:	4841      	ldr	r0, [pc, #260]	; (8008988 <HTS221_0_Probe+0x150>)
 8008884:	f7f9 f9f5 	bl	8001c72 <HTS221_ReadID>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800888e:	f06f 0306 	mvn.w	r3, #6
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008894:	e069      	b.n	800896a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8008896:	7ffb      	ldrb	r3, [r7, #31]
 8008898:	2bbc      	cmp	r3, #188	; 0xbc
 800889a:	d003      	beq.n	80088a4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800889c:	f06f 0306 	mvn.w	r3, #6
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a2:	e062      	b.n	800896a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80088a4:	f107 030c 	add.w	r3, r7, #12
 80088a8:	4619      	mov	r1, r3
 80088aa:	4837      	ldr	r0, [pc, #220]	; (8008988 <HTS221_0_Probe+0x150>)
 80088ac:	f7f9 f9f8 	bl	8001ca0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80088b0:	7b3b      	ldrb	r3, [r7, #12]
 80088b2:	461a      	mov	r2, r3
 80088b4:	7b7b      	ldrb	r3, [r7, #13]
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80088be:	4313      	orrs	r3, r2
 80088c0:	4a32      	ldr	r2, [pc, #200]	; (800898c <HTS221_0_Probe+0x154>)
 80088c2:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80088c4:	4b32      	ldr	r3, [pc, #200]	; (8008990 <HTS221_0_Probe+0x158>)
 80088c6:	4a30      	ldr	r2, [pc, #192]	; (8008988 <HTS221_0_Probe+0x150>)
 80088c8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80088ca:	4b32      	ldr	r3, [pc, #200]	; (8008994 <HTS221_0_Probe+0x15c>)
 80088cc:	4a32      	ldr	r2, [pc, #200]	; (8008998 <HTS221_0_Probe+0x160>)
 80088ce:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80088d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d11d      	bne.n	8008912 <HTS221_0_Probe+0xda>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d018      	beq.n	8008912 <HTS221_0_Probe+0xda>
 80088e0:	7b3b      	ldrb	r3, [r7, #12]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d115      	bne.n	8008912 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80088e6:	4b2d      	ldr	r3, [pc, #180]	; (800899c <HTS221_0_Probe+0x164>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4a2d      	ldr	r2, [pc, #180]	; (80089a0 <HTS221_0_Probe+0x168>)
 80088ec:	492d      	ldr	r1, [pc, #180]	; (80089a4 <HTS221_0_Probe+0x16c>)
 80088ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80088f2:	4b28      	ldr	r3, [pc, #160]	; (8008994 <HTS221_0_Probe+0x15c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <HTS221_0_Probe+0x158>)
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008906:	f06f 0304 	mvn.w	r3, #4
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800890c:	e001      	b.n	8008912 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800890e:	2300      	movs	r3, #0
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11d      	bne.n	8008954 <HTS221_0_Probe+0x11c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <HTS221_0_Probe+0x11c>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d115      	bne.n	8008954 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008928:	4b1c      	ldr	r3, [pc, #112]	; (800899c <HTS221_0_Probe+0x164>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <HTS221_0_Probe+0x168>)
 800892e:	491e      	ldr	r1, [pc, #120]	; (80089a8 <HTS221_0_Probe+0x170>)
 8008930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008934:	4b17      	ldr	r3, [pc, #92]	; (8008994 <HTS221_0_Probe+0x15c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a15      	ldr	r2, [pc, #84]	; (8008990 <HTS221_0_Probe+0x158>)
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	4610      	mov	r0, r2
 8008940:	4798      	blx	r3
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008948:	f06f 0304 	mvn.w	r3, #4
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894e:	e001      	b.n	8008954 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008950:	2300      	movs	r3, #0
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <HTS221_0_Probe+0x132>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008964:	f06f 0304 	mvn.w	r3, #4
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800896c:	4618      	mov	r0, r3
 800896e:	3740      	adds	r7, #64	; 0x40
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	08001681 	.word	0x08001681
 8008978:	080016fd 	.word	0x080016fd
 800897c:	080017b1 	.word	0x080017b1
 8008980:	0800174d 	.word	0x0800174d
 8008984:	08001815 	.word	0x08001815
 8008988:	200009f4 	.word	0x200009f4
 800898c:	200009e8 	.word	0x200009e8
 8008990:	200009ac 	.word	0x200009ac
 8008994:	200009dc 	.word	0x200009dc
 8008998:	20000004 	.word	0x20000004
 800899c:	20000158 	.word	0x20000158
 80089a0:	200009b8 	.word	0x200009b8
 80089a4:	20000028 	.word	0x20000028
 80089a8:	20000014 	.word	0x20000014

080089ac <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b090      	sub	sp, #64	; 0x40
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80089b8:	2300      	movs	r3, #0
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80089bc:	23bb      	movs	r3, #187	; 0xbb
 80089be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80089c2:	4b4a      	ldr	r3, [pc, #296]	; (8008aec <LPS22HH_0_Probe+0x140>)
 80089c4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80089c6:	4b4a      	ldr	r3, [pc, #296]	; (8008af0 <LPS22HH_0_Probe+0x144>)
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80089ca:	4b4a      	ldr	r3, [pc, #296]	; (8008af4 <LPS22HH_0_Probe+0x148>)
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80089ce:	4b4a      	ldr	r3, [pc, #296]	; (8008af8 <LPS22HH_0_Probe+0x14c>)
 80089d0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80089d2:	4b4a      	ldr	r3, [pc, #296]	; (8008afc <LPS22HH_0_Probe+0x150>)
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80089d6:	f107 0320 	add.w	r3, r7, #32
 80089da:	4619      	mov	r1, r3
 80089dc:	4848      	ldr	r0, [pc, #288]	; (8008b00 <LPS22HH_0_Probe+0x154>)
 80089de:	f7fc fa33 	bl	8004e48 <LPS22HH_RegisterBusIO>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089e8:	f06f 0306 	mvn.w	r3, #6
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ee:	e078      	b.n	8008ae2 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80089f0:	f107 031f 	add.w	r3, r7, #31
 80089f4:	4619      	mov	r1, r3
 80089f6:	4842      	ldr	r0, [pc, #264]	; (8008b00 <LPS22HH_0_Probe+0x154>)
 80089f8:	f7fc facb 	bl	8004f92 <LPS22HH_ReadID>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a02:	f06f 0306 	mvn.w	r3, #6
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a08:	e06b      	b.n	8008ae2 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 8008a0a:	7ffb      	ldrb	r3, [r7, #31]
 8008a0c:	2bb3      	cmp	r3, #179	; 0xb3
 8008a0e:	d003      	beq.n	8008a18 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a10:	f06f 0306 	mvn.w	r3, #6
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a16:	e064      	b.n	8008ae2 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4838      	ldr	r0, [pc, #224]	; (8008b00 <LPS22HH_0_Probe+0x154>)
 8008a20:	f7fc face 	bl	8004fc0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008a24:	7b3b      	ldrb	r3, [r7, #12]
 8008a26:	461a      	mov	r2, r3
 8008a28:	7b7b      	ldrb	r3, [r7, #13]
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008a32:	4313      	orrs	r3, r2
 8008a34:	4a33      	ldr	r2, [pc, #204]	; (8008b04 <LPS22HH_0_Probe+0x158>)
 8008a36:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008a38:	4b33      	ldr	r3, [pc, #204]	; (8008b08 <LPS22HH_0_Probe+0x15c>)
 8008a3a:	4a31      	ldr	r2, [pc, #196]	; (8008b00 <LPS22HH_0_Probe+0x154>)
 8008a3c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008a3e:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <LPS22HH_0_Probe+0x160>)
 8008a40:	4a33      	ldr	r2, [pc, #204]	; (8008b10 <LPS22HH_0_Probe+0x164>)
 8008a42:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d11e      	bne.n	8008a88 <LPS22HH_0_Probe+0xdc>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d019      	beq.n	8008a88 <LPS22HH_0_Probe+0xdc>
 8008a54:	7b3b      	ldrb	r3, [r7, #12]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d116      	bne.n	8008a88 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008a5a:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <LPS22HH_0_Probe+0x168>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	4a2e      	ldr	r2, [pc, #184]	; (8008b18 <LPS22HH_0_Probe+0x16c>)
 8008a60:	3303      	adds	r3, #3
 8008a62:	492e      	ldr	r1, [pc, #184]	; (8008b1c <LPS22HH_0_Probe+0x170>)
 8008a64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008a68:	4b28      	ldr	r3, [pc, #160]	; (8008b0c <LPS22HH_0_Probe+0x160>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	; (8008b08 <LPS22HH_0_Probe+0x15c>)
 8008a70:	6852      	ldr	r2, [r2, #4]
 8008a72:	4610      	mov	r0, r2
 8008a74:	4798      	blx	r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a7c:	f06f 0304 	mvn.w	r3, #4
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a82:	e001      	b.n	8008a88 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d11e      	bne.n	8008acc <LPS22HH_0_Probe+0x120>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d019      	beq.n	8008acc <LPS22HH_0_Probe+0x120>
 8008a98:	7b7b      	ldrb	r3, [r7, #13]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d116      	bne.n	8008acc <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008a9e:	4b1d      	ldr	r3, [pc, #116]	; (8008b14 <LPS22HH_0_Probe+0x168>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	4a1d      	ldr	r2, [pc, #116]	; (8008b18 <LPS22HH_0_Probe+0x16c>)
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	491e      	ldr	r1, [pc, #120]	; (8008b20 <LPS22HH_0_Probe+0x174>)
 8008aa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008aac:	4b17      	ldr	r3, [pc, #92]	; (8008b0c <LPS22HH_0_Probe+0x160>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a15      	ldr	r2, [pc, #84]	; (8008b08 <LPS22HH_0_Probe+0x15c>)
 8008ab4:	6852      	ldr	r2, [r2, #4]
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ac0:	f06f 0304 	mvn.w	r3, #4
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac6:	e001      	b.n	8008acc <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d107      	bne.n	8008ae2 <LPS22HH_0_Probe+0x136>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008adc:	f06f 0304 	mvn.w	r3, #4
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3740      	adds	r7, #64	; 0x40
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08001681 	.word	0x08001681
 8008af0:	080016fd 	.word	0x080016fd
 8008af4:	080017b1 	.word	0x080017b1
 8008af8:	0800174d 	.word	0x0800174d
 8008afc:	08001815 	.word	0x08001815
 8008b00:	20000a20 	.word	0x20000a20
 8008b04:	200009e8 	.word	0x200009e8
 8008b08:	200009ac 	.word	0x200009ac
 8008b0c:	200009dc 	.word	0x200009dc
 8008b10:	200000a4 	.word	0x200000a4
 8008b14:	20000158 	.word	0x20000158
 8008b18:	200009b8 	.word	0x200009b8
 8008b1c:	200000c8 	.word	0x200000c8
 8008b20:	200000b4 	.word	0x200000b4

08008b24 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b090      	sub	sp, #64	; 0x40
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008b30:	2300      	movs	r3, #0
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008b34:	2395      	movs	r3, #149	; 0x95
 8008b36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008b3a:	4b3f      	ldr	r3, [pc, #252]	; (8008c38 <STTS751_0_Probe+0x114>)
 8008b3c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008b3e:	4b3f      	ldr	r3, [pc, #252]	; (8008c3c <STTS751_0_Probe+0x118>)
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008b42:	4b3f      	ldr	r3, [pc, #252]	; (8008c40 <STTS751_0_Probe+0x11c>)
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008b46:	4b3f      	ldr	r3, [pc, #252]	; (8008c44 <STTS751_0_Probe+0x120>)
 8008b48:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008b4a:	4b3f      	ldr	r3, [pc, #252]	; (8008c48 <STTS751_0_Probe+0x124>)
 8008b4c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008b4e:	f107 0320 	add.w	r3, r7, #32
 8008b52:	4619      	mov	r1, r3
 8008b54:	483d      	ldr	r0, [pc, #244]	; (8008c4c <STTS751_0_Probe+0x128>)
 8008b56:	f7fe ffa9 	bl	8007aac <STTS751_RegisterBusIO>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b60:	f06f 0306 	mvn.w	r3, #6
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b66:	e061      	b.n	8008c2c <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008b68:	f107 031f 	add.w	r3, r7, #31
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4837      	ldr	r0, [pc, #220]	; (8008c4c <STTS751_0_Probe+0x128>)
 8008b70:	f7ff f837 	bl	8007be2 <STTS751_ReadID>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b7a:	f06f 0306 	mvn.w	r3, #6
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b80:	e054      	b.n	8008c2c <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 8008b82:	7ffb      	ldrb	r3, [r7, #31]
 8008b84:	2b53      	cmp	r3, #83	; 0x53
 8008b86:	d003      	beq.n	8008b90 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b88:	f06f 0306 	mvn.w	r3, #6
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b8e:	e04d      	b.n	8008c2c <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	4619      	mov	r1, r3
 8008b96:	482d      	ldr	r0, [pc, #180]	; (8008c4c <STTS751_0_Probe+0x128>)
 8008b98:	f7ff f83e 	bl	8007c18 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008b9c:	7b3b      	ldrb	r3, [r7, #12]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	7b7b      	ldrb	r3, [r7, #13]
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008baa:	4313      	orrs	r3, r2
 8008bac:	4a28      	ldr	r2, [pc, #160]	; (8008c50 <STTS751_0_Probe+0x12c>)
 8008bae:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008bb0:	4b28      	ldr	r3, [pc, #160]	; (8008c54 <STTS751_0_Probe+0x130>)
 8008bb2:	4a26      	ldr	r2, [pc, #152]	; (8008c4c <STTS751_0_Probe+0x128>)
 8008bb4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008bb6:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <STTS751_0_Probe+0x134>)
 8008bb8:	4a28      	ldr	r2, [pc, #160]	; (8008c5c <STTS751_0_Probe+0x138>)
 8008bba:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11e      	bne.n	8008c00 <STTS751_0_Probe+0xdc>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d019      	beq.n	8008c00 <STTS751_0_Probe+0xdc>
 8008bcc:	7b3b      	ldrb	r3, [r7, #12]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d116      	bne.n	8008c00 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008bd2:	4b23      	ldr	r3, [pc, #140]	; (8008c60 <STTS751_0_Probe+0x13c>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4a23      	ldr	r2, [pc, #140]	; (8008c64 <STTS751_0_Probe+0x140>)
 8008bd8:	3306      	adds	r3, #6
 8008bda:	4923      	ldr	r1, [pc, #140]	; (8008c68 <STTS751_0_Probe+0x144>)
 8008bdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008be0:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <STTS751_0_Probe+0x134>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <STTS751_0_Probe+0x130>)
 8008be8:	6892      	ldr	r2, [r2, #8]
 8008bea:	4610      	mov	r0, r2
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bf4:	f06f 0304 	mvn.w	r3, #4
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bfa:	e001      	b.n	8008c00 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <STTS751_0_Probe+0xf2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c10:	f06f 0304 	mvn.w	r3, #4
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d107      	bne.n	8008c2c <STTS751_0_Probe+0x108>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c26:	f06f 0304 	mvn.w	r3, #4
 8008c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3740      	adds	r7, #64	; 0x40
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	08001681 	.word	0x08001681
 8008c3c:	080016fd 	.word	0x080016fd
 8008c40:	080017b1 	.word	0x080017b1
 8008c44:	0800174d 	.word	0x0800174d
 8008c48:	08001815 	.word	0x08001815
 8008c4c:	20000a4c 	.word	0x20000a4c
 8008c50:	200009e8 	.word	0x200009e8
 8008c54:	200009ac 	.word	0x200009ac
 8008c58:	200009dc 	.word	0x200009dc
 8008c5c:	20000134 	.word	0x20000134
 8008c60:	20000158 	.word	0x20000158
 8008c64:	200009b8 	.word	0x200009b8
 8008c68:	20000144 	.word	0x20000144

08008c6c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08e      	sub	sp, #56	; 0x38
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d06e      	beq.n	8008d66 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	f200 809d 	bhi.w	8008dca <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d032      	beq.n	8008d02 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008c9c:	e095      	b.n	8008dca <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008c9e:	6838      	ldr	r0, [r7, #0]
 8008ca0:	f000 fa00 	bl	80090a4 <LSM6DSO_0_Probe>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	e0cc      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008cb0:	4a68      	ldr	r2, [pc, #416]	; (8008e54 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4967      	ldr	r1, [pc, #412]	; (8008e58 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008cc2:	f107 010c 	add.w	r1, r7, #12
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4798      	blx	r3
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008cd0:	f06f 0306 	mvn.w	r3, #6
 8008cd4:	e0b9      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008cd6:	7b3b      	ldrb	r3, [r7, #12]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d103      	bne.n	8008ce4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	f043 0302 	orr.w	r3, r3, #2
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008ce4:	7b7b      	ldrb	r3, [r7, #13]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d103      	bne.n	8008cf2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d16c      	bne.n	8008dd2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	f043 0304 	orr.w	r3, r3, #4
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008d00:	e067      	b.n	8008dd2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008d02:	6838      	ldr	r0, [r7, #0]
 8008d04:	f000 fa8a 	bl	800921c <LIS2DW12_0_Probe>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	e09a      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008d14:	4a4f      	ldr	r2, [pc, #316]	; (8008e54 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	494e      	ldr	r1, [pc, #312]	; (8008e58 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008d26:	f107 010c 	add.w	r1, r7, #12
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4798      	blx	r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008d34:	f06f 0306 	mvn.w	r3, #6
 8008d38:	e087      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008d3a:	7b3b      	ldrb	r3, [r7, #12]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d103      	bne.n	8008d48 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	f043 0302 	orr.w	r3, r3, #2
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008d48:	7b7b      	ldrb	r3, [r7, #13]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d103      	bne.n	8008d56 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d13c      	bne.n	8008dd6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008d64:	e037      	b.n	8008dd6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008d66:	6838      	ldr	r0, [r7, #0]
 8008d68:	f000 fafc 	bl	8009364 <LIS2MDL_0_Probe>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008d72:	f04f 33ff 	mov.w	r3, #4294967295
 8008d76:	e068      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008d78:	4a36      	ldr	r2, [pc, #216]	; (8008e54 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	4935      	ldr	r1, [pc, #212]	; (8008e58 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008d8a:	f107 010c 	add.w	r1, r7, #12
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008d98:	f06f 0306 	mvn.w	r3, #6
 8008d9c:	e055      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008d9e:	7b3b      	ldrb	r3, [r7, #12]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d103      	bne.n	8008dac <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f043 0302 	orr.w	r3, r3, #2
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008dac:	7b7b      	ldrb	r3, [r7, #13]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d103      	bne.n	8008dba <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	f043 0301 	orr.w	r3, r3, #1
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10c      	bne.n	8008dda <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	f043 0304 	orr.w	r3, r3, #4
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008dc8:	e007      	b.n	8008dda <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008dca:	f06f 0301 	mvn.w	r3, #1
 8008dce:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008dd0:	e004      	b.n	8008ddc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e002      	b.n	8008ddc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008dd6:	bf00      	nop
 8008dd8:	e000      	b.n	8008ddc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008dda:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	e031      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dea:	e02a      	b.n	8008e42 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	4013      	ands	r3, r2
 8008df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d11e      	bne.n	8008e36 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8008df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d118      	bne.n	8008e36 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e0c:	4814      	ldr	r0, [pc, #80]	; (8008e60 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	4413      	add	r3, r2
 8008e16:	440b      	add	r3, r1
 8008e18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	490e      	ldr	r1, [pc, #56]	; (8008e58 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008e30:	f06f 0304 	mvn.w	r3, #4
 8008e34:	e009      	b.n	8008e4a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	3301      	adds	r3, #1
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d9d1      	bls.n	8008dec <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3738      	adds	r7, #56	; 0x38
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20000aac 	.word	0x20000aac
 8008e58:	20000a7c 	.word	0x20000a7c
 8008e5c:	2000016c 	.word	0x2000016c
 8008e60:	20000a88 	.word	0x20000a88

08008e64 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d903      	bls.n	8008e7c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008e74:	f06f 0301 	mvn.w	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e014      	b.n	8008ea6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008e7c:	4a0c      	ldr	r2, [pc, #48]	; (8008eb0 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	490b      	ldr	r1, [pc, #44]	; (8008eb4 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008e9a:	f06f 0306 	mvn.w	r3, #6
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e001      	b.n	8008ea6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000aac 	.word	0x20000aac
 8008eb4:	20000a7c 	.word	0x20000a7c

08008eb8 <IKS01A3_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d903      	bls.n	8008ed0 <IKS01A3_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ec8:	f06f 0301 	mvn.w	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e014      	b.n	8008efa <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8008ed0:	4a0c      	ldr	r2, [pc, #48]	; (8008f04 <IKS01A3_MOTION_SENSOR_ReadID+0x4c>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	490b      	ldr	r1, [pc, #44]	; (8008f08 <IKS01A3_MOTION_SENSOR_ReadID+0x50>)
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <IKS01A3_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008eee:	f06f 0306 	mvn.w	r3, #6
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	e001      	b.n	8008efa <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008efa:	68fb      	ldr	r3, [r7, #12]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000aac 	.word	0x20000aac
 8008f08:	20000a7c 	.word	0x20000a7c

08008f0c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d903      	bls.n	8008f26 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008f1e:	f06f 0301 	mvn.w	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e029      	b.n	8008f7a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008f26:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4013      	ands	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d11d      	bne.n	8008f74 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008f38:	4a13      	ldr	r2, [pc, #76]	; (8008f88 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f40:	4812      	ldr	r0, [pc, #72]	; (8008f8c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4613      	mov	r3, r2
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4413      	add	r3, r2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	490f      	ldr	r1, [pc, #60]	; (8008f90 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4798      	blx	r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f66:	f06f 0304 	mvn.w	r3, #4
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e005      	b.n	8008f7a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e002      	b.n	8008f7a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008f74:	f06f 0301 	mvn.w	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008f7a:	697b      	ldr	r3, [r7, #20]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000ab8 	.word	0x20000ab8
 8008f88:	2000016c 	.word	0x2000016c
 8008f8c:	20000a88 	.word	0x20000a88
 8008f90:	20000a7c 	.word	0x20000a7c

08008f94 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d903      	bls.n	8008fae <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008fa6:	f06f 0301 	mvn.w	r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	e029      	b.n	8009002 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008fae:	4a17      	ldr	r2, [pc, #92]	; (800900c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d11d      	bne.n	8008ffc <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fc8:	4812      	ldr	r0, [pc, #72]	; (8009014 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	490f      	ldr	r1, [pc, #60]	; (8009018 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fee:	f06f 0304 	mvn.w	r3, #4
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e005      	b.n	8009002 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e002      	b.n	8009002 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008ffc:	f06f 0301 	mvn.w	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009002:	697b      	ldr	r3, [r7, #20]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20000ab8 	.word	0x20000ab8
 8009010:	2000016c 	.word	0x2000016c
 8009014:	20000a88 	.word	0x20000a88
 8009018:	20000a7c 	.word	0x20000a7c

0800901c <IKS01A3_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d903      	bls.n	8009036 <IKS01A3_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800902e:	f06f 0301 	mvn.w	r3, #1
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	e029      	b.n	800908a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009036:	4a17      	ldr	r2, [pc, #92]	; (8009094 <IKS01A3_MOTION_SENSOR_GetFullScale+0x78>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4013      	ands	r3, r2
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	d11d      	bne.n	8009084 <IKS01A3_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8009048:	4a13      	ldr	r2, [pc, #76]	; (8009098 <IKS01A3_MOTION_SENSOR_GetFullScale+0x7c>)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009050:	4812      	ldr	r0, [pc, #72]	; (800909c <IKS01A3_MOTION_SENSOR_GetFullScale+0x80>)
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	4413      	add	r3, r2
 800905a:	440b      	add	r3, r1
 800905c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	490f      	ldr	r1, [pc, #60]	; (80090a0 <IKS01A3_MOTION_SENSOR_GetFullScale+0x84>)
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <IKS01A3_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009076:	f06f 0304 	mvn.w	r3, #4
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	e005      	b.n	800908a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e002      	b.n	800908a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009084:	f06f 0301 	mvn.w	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800908a:	697b      	ldr	r3, [r7, #20]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000ab8 	.word	0x20000ab8
 8009098:	2000016c 	.word	0x2000016c
 800909c:	20000a88 	.word	0x20000a88
 80090a0:	20000a7c 	.word	0x20000a7c

080090a4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b092      	sub	sp, #72	; 0x48
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80090b0:	2300      	movs	r3, #0
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80090b4:	23d7      	movs	r3, #215	; 0xd7
 80090b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80090ba:	4b4a      	ldr	r3, [pc, #296]	; (80091e4 <LSM6DSO_0_Probe+0x140>)
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80090be:	4b4a      	ldr	r3, [pc, #296]	; (80091e8 <LSM6DSO_0_Probe+0x144>)
 80090c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80090c2:	4b4a      	ldr	r3, [pc, #296]	; (80091ec <LSM6DSO_0_Probe+0x148>)
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80090c6:	4b4a      	ldr	r3, [pc, #296]	; (80091f0 <LSM6DSO_0_Probe+0x14c>)
 80090c8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80090ca:	4b4a      	ldr	r3, [pc, #296]	; (80091f4 <LSM6DSO_0_Probe+0x150>)
 80090cc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80090ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090d2:	4619      	mov	r1, r3
 80090d4:	4848      	ldr	r0, [pc, #288]	; (80091f8 <LSM6DSO_0_Probe+0x154>)
 80090d6:	f7fc fd0d 	bl	8005af4 <LSM6DSO_RegisterBusIO>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80090e0:	f06f 0306 	mvn.w	r3, #6
 80090e4:	647b      	str	r3, [r7, #68]	; 0x44
 80090e6:	e077      	b.n	80091d8 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80090e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80090ec:	4619      	mov	r1, r3
 80090ee:	4842      	ldr	r0, [pc, #264]	; (80091f8 <LSM6DSO_0_Probe+0x154>)
 80090f0:	f7fc fe02 	bl	8005cf8 <LSM6DSO_ReadID>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80090fa:	f06f 0306 	mvn.w	r3, #6
 80090fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009100:	e06a      	b.n	80091d8 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8009102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009106:	2b6c      	cmp	r3, #108	; 0x6c
 8009108:	d003      	beq.n	8009112 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800910a:	f06f 0306 	mvn.w	r3, #6
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
 8009110:	e062      	b.n	80091d8 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4619      	mov	r1, r3
 8009118:	4837      	ldr	r0, [pc, #220]	; (80091f8 <LSM6DSO_0_Probe+0x154>)
 800911a:	f7fc fe03 	bl	8005d24 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800911e:	7a7b      	ldrb	r3, [r7, #9]
 8009120:	461a      	mov	r2, r3
 8009122:	7a3b      	ldrb	r3, [r7, #8]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	431a      	orrs	r2, r3
 8009128:	7abb      	ldrb	r3, [r7, #10]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4313      	orrs	r3, r2
 800912e:	4a33      	ldr	r2, [pc, #204]	; (80091fc <LSM6DSO_0_Probe+0x158>)
 8009130:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009132:	4b33      	ldr	r3, [pc, #204]	; (8009200 <LSM6DSO_0_Probe+0x15c>)
 8009134:	4a30      	ldr	r2, [pc, #192]	; (80091f8 <LSM6DSO_0_Probe+0x154>)
 8009136:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009138:	4b32      	ldr	r3, [pc, #200]	; (8009204 <LSM6DSO_0_Probe+0x160>)
 800913a:	4a33      	ldr	r2, [pc, #204]	; (8009208 <LSM6DSO_0_Probe+0x164>)
 800913c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800913e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009140:	2b00      	cmp	r3, #0
 8009142:	d11d      	bne.n	8009180 <LSM6DSO_0_Probe+0xdc>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d018      	beq.n	8009180 <LSM6DSO_0_Probe+0xdc>
 800914e:	7a7b      	ldrb	r3, [r7, #9]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d115      	bne.n	8009180 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009154:	4b2d      	ldr	r3, [pc, #180]	; (800920c <LSM6DSO_0_Probe+0x168>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	4a2d      	ldr	r2, [pc, #180]	; (8009210 <LSM6DSO_0_Probe+0x16c>)
 800915a:	492e      	ldr	r1, [pc, #184]	; (8009214 <LSM6DSO_0_Probe+0x170>)
 800915c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009160:	4b28      	ldr	r3, [pc, #160]	; (8009204 <LSM6DSO_0_Probe+0x160>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a26      	ldr	r2, [pc, #152]	; (8009200 <LSM6DSO_0_Probe+0x15c>)
 8009168:	6812      	ldr	r2, [r2, #0]
 800916a:	4610      	mov	r0, r2
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009174:	f06f 0304 	mvn.w	r3, #4
 8009178:	647b      	str	r3, [r7, #68]	; 0x44
 800917a:	e001      	b.n	8009180 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800917c:	2300      	movs	r3, #0
 800917e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009182:	2b00      	cmp	r3, #0
 8009184:	d11d      	bne.n	80091c2 <LSM6DSO_0_Probe+0x11e>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d018      	beq.n	80091c2 <LSM6DSO_0_Probe+0x11e>
 8009190:	7a3b      	ldrb	r3, [r7, #8]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d115      	bne.n	80091c2 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <LSM6DSO_0_Probe+0x168>)
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	4a1d      	ldr	r2, [pc, #116]	; (8009210 <LSM6DSO_0_Probe+0x16c>)
 800919c:	491e      	ldr	r1, [pc, #120]	; (8009218 <LSM6DSO_0_Probe+0x174>)
 800919e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80091a2:	4b18      	ldr	r3, [pc, #96]	; (8009204 <LSM6DSO_0_Probe+0x160>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a15      	ldr	r2, [pc, #84]	; (8009200 <LSM6DSO_0_Probe+0x15c>)
 80091aa:	6812      	ldr	r2, [r2, #0]
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80091b6:	f06f 0304 	mvn.w	r3, #4
 80091ba:	647b      	str	r3, [r7, #68]	; 0x44
 80091bc:	e001      	b.n	80091c2 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80091be:	2300      	movs	r3, #0
 80091c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80091c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d107      	bne.n	80091d8 <LSM6DSO_0_Probe+0x134>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80091d2:	f06f 0304 	mvn.w	r3, #4
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80091d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3748      	adds	r7, #72	; 0x48
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	08001681 	.word	0x08001681
 80091e8:	080016fd 	.word	0x080016fd
 80091ec:	080017b1 	.word	0x080017b1
 80091f0:	0800174d 	.word	0x0800174d
 80091f4:	08001815 	.word	0x08001815
 80091f8:	20000ac4 	.word	0x20000ac4
 80091fc:	20000ab8 	.word	0x20000ab8
 8009200:	20000a7c 	.word	0x20000a7c
 8009204:	20000aac 	.word	0x20000aac
 8009208:	200000dc 	.word	0x200000dc
 800920c:	2000016c 	.word	0x2000016c
 8009210:	20000a88 	.word	0x20000a88
 8009214:	20000110 	.word	0x20000110
 8009218:	200000ec 	.word	0x200000ec

0800921c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b092      	sub	sp, #72	; 0x48
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009224:	2300      	movs	r3, #0
 8009226:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009228:	2300      	movs	r3, #0
 800922a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800922c:	2333      	movs	r3, #51	; 0x33
 800922e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009232:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <LIS2DW12_0_Probe+0x114>)
 8009234:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009236:	4b3f      	ldr	r3, [pc, #252]	; (8009334 <LIS2DW12_0_Probe+0x118>)
 8009238:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800923a:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <LIS2DW12_0_Probe+0x11c>)
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800923e:	4b3f      	ldr	r3, [pc, #252]	; (800933c <LIS2DW12_0_Probe+0x120>)
 8009240:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009242:	4b3f      	ldr	r3, [pc, #252]	; (8009340 <LIS2DW12_0_Probe+0x124>)
 8009244:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800924a:	4619      	mov	r1, r3
 800924c:	483d      	ldr	r0, [pc, #244]	; (8009344 <LIS2DW12_0_Probe+0x128>)
 800924e:	f7f9 faa9 	bl	80027a4 <LIS2DW12_RegisterBusIO>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009258:	f06f 0306 	mvn.w	r3, #6
 800925c:	647b      	str	r3, [r7, #68]	; 0x44
 800925e:	e062      	b.n	8009326 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009260:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8009264:	4619      	mov	r1, r3
 8009266:	4837      	ldr	r0, [pc, #220]	; (8009344 <LIS2DW12_0_Probe+0x128>)
 8009268:	f7f9 fb86 	bl	8002978 <LIS2DW12_ReadID>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009272:	f06f 0306 	mvn.w	r3, #6
 8009276:	647b      	str	r3, [r7, #68]	; 0x44
 8009278:	e055      	b.n	8009326 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 800927a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800927e:	2b44      	cmp	r3, #68	; 0x44
 8009280:	d003      	beq.n	800928a <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009282:	f06f 0306 	mvn.w	r3, #6
 8009286:	647b      	str	r3, [r7, #68]	; 0x44
 8009288:	e04d      	b.n	8009326 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800928a:	f107 0308 	add.w	r3, r7, #8
 800928e:	4619      	mov	r1, r3
 8009290:	482c      	ldr	r0, [pc, #176]	; (8009344 <LIS2DW12_0_Probe+0x128>)
 8009292:	f7f9 fb87 	bl	80029a4 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009296:	7a7b      	ldrb	r3, [r7, #9]
 8009298:	461a      	mov	r2, r3
 800929a:	7a3b      	ldrb	r3, [r7, #8]
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	431a      	orrs	r2, r3
 80092a0:	7abb      	ldrb	r3, [r7, #10]
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4313      	orrs	r3, r2
 80092a6:	4a28      	ldr	r2, [pc, #160]	; (8009348 <LIS2DW12_0_Probe+0x12c>)
 80092a8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80092aa:	4b28      	ldr	r3, [pc, #160]	; (800934c <LIS2DW12_0_Probe+0x130>)
 80092ac:	4a25      	ldr	r2, [pc, #148]	; (8009344 <LIS2DW12_0_Probe+0x128>)
 80092ae:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <LIS2DW12_0_Probe+0x134>)
 80092b2:	4a28      	ldr	r2, [pc, #160]	; (8009354 <LIS2DW12_0_Probe+0x138>)
 80092b4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80092b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d11e      	bne.n	80092fa <LIS2DW12_0_Probe+0xde>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d019      	beq.n	80092fa <LIS2DW12_0_Probe+0xde>
 80092c6:	7a3b      	ldrb	r3, [r7, #8]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d116      	bne.n	80092fa <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80092cc:	4b22      	ldr	r3, [pc, #136]	; (8009358 <LIS2DW12_0_Probe+0x13c>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	4a22      	ldr	r2, [pc, #136]	; (800935c <LIS2DW12_0_Probe+0x140>)
 80092d2:	3303      	adds	r3, #3
 80092d4:	4922      	ldr	r1, [pc, #136]	; (8009360 <LIS2DW12_0_Probe+0x144>)
 80092d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80092da:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <LIS2DW12_0_Probe+0x134>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a1a      	ldr	r2, [pc, #104]	; (800934c <LIS2DW12_0_Probe+0x130>)
 80092e2:	6852      	ldr	r2, [r2, #4]
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092ee:	f06f 0304 	mvn.w	r3, #4
 80092f2:	647b      	str	r3, [r7, #68]	; 0x44
 80092f4:	e001      	b.n	80092fa <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d107      	bne.n	8009310 <LIS2DW12_0_Probe+0xf4>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800930a:	f06f 0304 	mvn.w	r3, #4
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009312:	2b00      	cmp	r3, #0
 8009314:	d107      	bne.n	8009326 <LIS2DW12_0_Probe+0x10a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009320:	f06f 0304 	mvn.w	r3, #4
 8009324:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009328:	4618      	mov	r0, r3
 800932a:	3748      	adds	r7, #72	; 0x48
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	08001681 	.word	0x08001681
 8009334:	080016fd 	.word	0x080016fd
 8009338:	080017b1 	.word	0x080017b1
 800933c:	0800174d 	.word	0x0800174d
 8009340:	08001815 	.word	0x08001815
 8009344:	20000af4 	.word	0x20000af4
 8009348:	20000ab8 	.word	0x20000ab8
 800934c:	20000a7c 	.word	0x20000a7c
 8009350:	20000aac 	.word	0x20000aac
 8009354:	2000003c 	.word	0x2000003c
 8009358:	2000016c 	.word	0x2000016c
 800935c:	20000a88 	.word	0x20000a88
 8009360:	2000004c 	.word	0x2000004c

08009364 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b092      	sub	sp, #72	; 0x48
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800936c:	2300      	movs	r3, #0
 800936e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009370:	2300      	movs	r3, #0
 8009372:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009374:	233d      	movs	r3, #61	; 0x3d
 8009376:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800937a:	4b3f      	ldr	r3, [pc, #252]	; (8009478 <LIS2MDL_0_Probe+0x114>)
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800937e:	4b3f      	ldr	r3, [pc, #252]	; (800947c <LIS2MDL_0_Probe+0x118>)
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009382:	4b3f      	ldr	r3, [pc, #252]	; (8009480 <LIS2MDL_0_Probe+0x11c>)
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009386:	4b3f      	ldr	r3, [pc, #252]	; (8009484 <LIS2MDL_0_Probe+0x120>)
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800938a:	4b3f      	ldr	r3, [pc, #252]	; (8009488 <LIS2MDL_0_Probe+0x124>)
 800938c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800938e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009392:	4619      	mov	r1, r3
 8009394:	483d      	ldr	r0, [pc, #244]	; (800948c <LIS2MDL_0_Probe+0x128>)
 8009396:	f7fa fd55 	bl	8003e44 <LIS2MDL_RegisterBusIO>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093a0:	f06f 0306 	mvn.w	r3, #6
 80093a4:	647b      	str	r3, [r7, #68]	; 0x44
 80093a6:	e062      	b.n	800946e <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80093a8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80093ac:	4619      	mov	r1, r3
 80093ae:	4837      	ldr	r0, [pc, #220]	; (800948c <LIS2MDL_0_Probe+0x128>)
 80093b0:	f7fa fe60 	bl	8004074 <LIS2MDL_ReadID>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093ba:	f06f 0306 	mvn.w	r3, #6
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
 80093c0:	e055      	b.n	800946e <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 80093c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c6:	2b40      	cmp	r3, #64	; 0x40
 80093c8:	d003      	beq.n	80093d2 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093ca:	f06f 0306 	mvn.w	r3, #6
 80093ce:	647b      	str	r3, [r7, #68]	; 0x44
 80093d0:	e04d      	b.n	800946e <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	4619      	mov	r1, r3
 80093d8:	482c      	ldr	r0, [pc, #176]	; (800948c <LIS2MDL_0_Probe+0x128>)
 80093da:	f7fa fe71 	bl	80040c0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80093de:	7a7b      	ldrb	r3, [r7, #9]
 80093e0:	461a      	mov	r2, r3
 80093e2:	7a3b      	ldrb	r3, [r7, #8]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	431a      	orrs	r2, r3
 80093e8:	7abb      	ldrb	r3, [r7, #10]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4313      	orrs	r3, r2
 80093ee:	4a28      	ldr	r2, [pc, #160]	; (8009490 <LIS2MDL_0_Probe+0x12c>)
 80093f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80093f2:	4b28      	ldr	r3, [pc, #160]	; (8009494 <LIS2MDL_0_Probe+0x130>)
 80093f4:	4a25      	ldr	r2, [pc, #148]	; (800948c <LIS2MDL_0_Probe+0x128>)
 80093f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80093f8:	4b27      	ldr	r3, [pc, #156]	; (8009498 <LIS2MDL_0_Probe+0x134>)
 80093fa:	4a28      	ldr	r2, [pc, #160]	; (800949c <LIS2MDL_0_Probe+0x138>)
 80093fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80093fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009400:	2b00      	cmp	r3, #0
 8009402:	d11e      	bne.n	8009442 <LIS2MDL_0_Probe+0xde>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d019      	beq.n	8009442 <LIS2MDL_0_Probe+0xde>
 800940e:	7abb      	ldrb	r3, [r7, #10]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d116      	bne.n	8009442 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <LIS2MDL_0_Probe+0x13c>)
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	4a22      	ldr	r2, [pc, #136]	; (80094a4 <LIS2MDL_0_Probe+0x140>)
 800941a:	3306      	adds	r3, #6
 800941c:	4922      	ldr	r1, [pc, #136]	; (80094a8 <LIS2MDL_0_Probe+0x144>)
 800941e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009422:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <LIS2MDL_0_Probe+0x134>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a1a      	ldr	r2, [pc, #104]	; (8009494 <LIS2MDL_0_Probe+0x130>)
 800942a:	6892      	ldr	r2, [r2, #8]
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009436:	f06f 0304 	mvn.w	r3, #4
 800943a:	647b      	str	r3, [r7, #68]	; 0x44
 800943c:	e001      	b.n	8009442 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800943e:	2300      	movs	r3, #0
 8009440:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009444:	2b00      	cmp	r3, #0
 8009446:	d107      	bne.n	8009458 <LIS2MDL_0_Probe+0xf4>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009452:	f06f 0304 	mvn.w	r3, #4
 8009456:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945a:	2b00      	cmp	r3, #0
 800945c:	d107      	bne.n	800946e <LIS2MDL_0_Probe+0x10a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009468:	f06f 0304 	mvn.w	r3, #4
 800946c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009470:	4618      	mov	r0, r3
 8009472:	3748      	adds	r7, #72	; 0x48
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	08001681 	.word	0x08001681
 800947c:	080016fd 	.word	0x080016fd
 8009480:	080017b1 	.word	0x080017b1
 8009484:	0800174d 	.word	0x0800174d
 8009488:	08001815 	.word	0x08001815
 800948c:	20000b28 	.word	0x20000b28
 8009490:	20000ab8 	.word	0x20000ab8
 8009494:	20000a7c 	.word	0x20000a7c
 8009498:	20000aac 	.word	0x20000aac
 800949c:	20000070 	.word	0x20000070
 80094a0:	2000016c 	.word	0x2000016c
 80094a4:	20000a88 	.word	0x20000a88
 80094a8:	20000080 	.word	0x20000080

080094ac <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	4a04      	ldr	r2, [pc, #16]	; (80094cc <BSP_LED_Init+0x20>)
 80094ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094be:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	08010cbc 	.word	0x08010cbc

080094d0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d6:	4b1b      	ldr	r3, [pc, #108]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 80094dc:	f043 0302 	orr.w	r3, r3, #2
 80094e0:	6313      	str	r3, [r2, #48]	; 0x30
 80094e2:	4b18      	ldr	r3, [pc, #96]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	60bb      	str	r3, [r7, #8]
 80094ec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094ee:	f107 030c 	add.w	r3, r7, #12
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	605a      	str	r2, [r3, #4]
 80094f8:	609a      	str	r2, [r3, #8]
 80094fa:	60da      	str	r2, [r3, #12]
 80094fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094fe:	4b11      	ldr	r3, [pc, #68]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	4a10      	ldr	r2, [pc, #64]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 8009504:	f043 0302 	orr.w	r3, r3, #2
 8009508:	6313      	str	r3, [r2, #48]	; 0x30
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <LED_USER_GPIO_Init+0x74>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009516:	2200      	movs	r2, #0
 8009518:	2180      	movs	r1, #128	; 0x80
 800951a:	480b      	ldr	r0, [pc, #44]	; (8009548 <LED_USER_GPIO_Init+0x78>)
 800951c:	f001 f994 	bl	800a848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8009520:	2380      	movs	r3, #128	; 0x80
 8009522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009524:	2301      	movs	r3, #1
 8009526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800952c:	2300      	movs	r3, #0
 800952e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4619      	mov	r1, r3
 8009536:	4804      	ldr	r0, [pc, #16]	; (8009548 <LED_USER_GPIO_Init+0x78>)
 8009538:	f000 feb6 	bl	800a2a8 <HAL_GPIO_Init>

}
 800953c:	bf00      	nop
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40023800 	.word	0x40023800
 8009548:	40020400 	.word	0x40020400

0800954c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	460a      	mov	r2, r1
 8009556:	71fb      	strb	r3, [r7, #7]
 8009558:	4613      	mov	r3, r2
 800955a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <BSP_PB_Init+0x94>)
 8009564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009568:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800956a:	79bb      	ldrb	r3, [r7, #6]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d132      	bne.n	80095d6 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	4a1b      	ldr	r2, [pc, #108]	; (80095e4 <BSP_PB_Init+0x98>)
 8009576:	441a      	add	r2, r3
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	491b      	ldr	r1, [pc, #108]	; (80095e8 <BSP_PB_Init+0x9c>)
 800957c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f000 fe58 	bl	800a238 <HAL_EXTI_GetHandle>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800958e:	f06f 0303 	mvn.w	r3, #3
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e01f      	b.n	80095d6 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	4a12      	ldr	r2, [pc, #72]	; (80095e4 <BSP_PB_Init+0x98>)
 800959c:	1898      	adds	r0, r3, r2
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	4a12      	ldr	r2, [pc, #72]	; (80095ec <BSP_PB_Init+0xa0>)
 80095a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a6:	461a      	mov	r2, r3
 80095a8:	2100      	movs	r1, #0
 80095aa:	f000 fe2b 	bl	800a204 <HAL_EXTI_RegisterCallback>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80095b4:	f06f 0303 	mvn.w	r3, #3
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	e00c      	b.n	80095d6 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80095bc:	2028      	movs	r0, #40	; 0x28
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	4a0b      	ldr	r2, [pc, #44]	; (80095f0 <BSP_PB_Init+0xa4>)
 80095c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c6:	2200      	movs	r2, #0
 80095c8:	4619      	mov	r1, r3
 80095ca:	f000 fabe 	bl	8009b4a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80095ce:	2328      	movs	r3, #40	; 0x28
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 fad6 	bl	8009b82 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80095d6:	68fb      	ldr	r3, [r7, #12]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	08010cc0 	.word	0x08010cc0
 80095e4:	20000184 	.word	0x20000184
 80095e8:	08010cc4 	.word	0x08010cc4
 80095ec:	08010cc8 	.word	0x08010cc8
 80095f0:	08010ccc 	.word	0x08010ccc

080095f4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	4a09      	ldr	r2, [pc, #36]	; (8009628 <BSP_PB_GetState+0x34>)
 8009602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 f903 	bl	800a818 <HAL_GPIO_ReadPin>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000180 	.word	0x20000180

0800962c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8009630:	2000      	movs	r0, #0
 8009632:	f004 fb3b 	bl	800dcac <BSP_PB_Callback>
}
 8009636:	bf00      	nop
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009642:	4b19      	ldr	r3, [pc, #100]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	4a18      	ldr	r2, [pc, #96]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 8009648:	f043 0304 	orr.w	r3, r3, #4
 800964c:	6313      	str	r3, [r2, #48]	; 0x30
 800964e:	4b16      	ldr	r3, [pc, #88]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	f003 0304 	and.w	r3, r3, #4
 8009656:	60bb      	str	r3, [r7, #8]
 8009658:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800965a:	f107 030c 	add.w	r3, r7, #12
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	605a      	str	r2, [r3, #4]
 8009664:	609a      	str	r2, [r3, #8]
 8009666:	60da      	str	r2, [r3, #12]
 8009668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800966a:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	4a0e      	ldr	r2, [pc, #56]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 8009670:	f043 0304 	orr.w	r3, r3, #4
 8009674:	6313      	str	r3, [r2, #48]	; 0x30
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <BUTTON_USER_GPIO_Init+0x6c>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	607b      	str	r3, [r7, #4]
 8009680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8009682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009688:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800968c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8009692:	f107 030c 	add.w	r3, r7, #12
 8009696:	4619      	mov	r1, r3
 8009698:	4804      	ldr	r0, [pc, #16]	; (80096ac <BUTTON_USER_GPIO_Init+0x70>)
 800969a:	f000 fe05 	bl	800a2a8 <HAL_GPIO_Init>

}
 800969e:	bf00      	nop
 80096a0:	3720      	adds	r7, #32
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40020800 	.word	0x40020800

080096b0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d903      	bls.n	80096cc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80096c4:	f06f 0301 	mvn.w	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e025      	b.n	8009718 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	79fa      	ldrb	r2, [r7, #7]
 80096d0:	4914      	ldr	r1, [pc, #80]	; (8009724 <BSP_COM_Init+0x74>)
 80096d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80096d6:	4814      	ldr	r0, [pc, #80]	; (8009728 <BSP_COM_Init+0x78>)
 80096d8:	4613      	mov	r3, r2
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	4413      	add	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4403      	add	r3, r0
 80096e2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 80096e4:	79fa      	ldrb	r2, [r7, #7]
 80096e6:	4613      	mov	r3, r2
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	4413      	add	r3, r2
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4a0e      	ldr	r2, [pc, #56]	; (8009728 <BSP_COM_Init+0x78>)
 80096f0:	4413      	add	r3, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f86a 	bl	80097cc <USART3_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 80096f8:	79fa      	ldrb	r2, [r7, #7]
 80096fa:	4613      	mov	r3, r2
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	4413      	add	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4a09      	ldr	r2, [pc, #36]	; (8009728 <BSP_COM_Init+0x78>)
 8009704:	4413      	add	r3, r2
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f810 	bl	800972c <MX_USART3_UART_Init>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009712:	f06f 0303 	mvn.w	r3, #3
 8009716:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009718:	68fb      	ldr	r3, [r7, #12]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	2000018c 	.word	0x2000018c
 8009728:	20000b54 	.word	0x20000b54

0800972c <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART3;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a15      	ldr	r2, [pc, #84]	; (8009790 <MX_USART3_UART_Init+0x64>)
 800973c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009744:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	220c      	movs	r2, #12
 800975c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f003 f904 	bl	800c984 <HAL_UART_Init>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <MX_USART3_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40004800 	.word	0x40004800

08009794 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <__io_putchar+0x30>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4613      	mov	r3, r2
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	4413      	add	r3, r2
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	4a07      	ldr	r2, [pc, #28]	; (80097c8 <__io_putchar+0x34>)
 80097ac:	1898      	adds	r0, r3, r2
 80097ae:	1d39      	adds	r1, r7, #4
 80097b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097b4:	2201      	movs	r2, #1
 80097b6:	f003 f93d 	bl	800ca34 <HAL_UART_Transmit>
  return ch;
 80097ba:	687b      	ldr	r3, [r7, #4]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000bdc 	.word	0x20000bdc
 80097c8:	20000b54 	.word	0x20000b54

080097cc <USART3_MspInit>:
 * @param  huart USART3 handle
 * @retval None
 */

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b0aa      	sub	sp, #168	; 0xa8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097d4:	f107 0310 	add.w	r3, r7, #16
 80097d8:	2284      	movs	r2, #132	; 0x84
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f005 fedf 	bl	800f5a0 <memset>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80097e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80097e8:	2300      	movs	r3, #0
 80097ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80097ec:	f107 0310 	add.w	r3, r7, #16
 80097f0:	4618      	mov	r0, r3
 80097f2:	f002 fcd7 	bl	800c1a4 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 80097f6:	4b24      	ldr	r3, [pc, #144]	; (8009888 <USART3_MspInit+0xbc>)
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	4a23      	ldr	r2, [pc, #140]	; (8009888 <USART3_MspInit+0xbc>)
 80097fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009800:	6413      	str	r3, [r2, #64]	; 0x40
 8009802:	4b21      	ldr	r3, [pc, #132]	; (8009888 <USART3_MspInit+0xbc>)
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800980e:	4b1e      	ldr	r3, [pc, #120]	; (8009888 <USART3_MspInit+0xbc>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <USART3_MspInit+0xbc>)
 8009814:	f043 0308 	orr.w	r3, r3, #8
 8009818:	6313      	str	r3, [r2, #48]	; 0x30
 800981a:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <USART3_MspInit+0xbc>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	f003 0308 	and.w	r3, r3, #8
 8009822:	60bb      	str	r3, [r7, #8]
 8009824:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 8009826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800982e:	2302      	movs	r3, #2
 8009830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800983a:	2303      	movs	r3, #3
 800983c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 8009840:	2307      	movs	r3, #7
 8009842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 8009846:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800984a:	4619      	mov	r1, r3
 800984c:	480f      	ldr	r0, [pc, #60]	; (800988c <USART3_MspInit+0xc0>)
 800984e:	f000 fd2b 	bl	800a2a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 8009852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985a:	2302      	movs	r3, #2
 800985c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009860:	2300      	movs	r3, #0
 8009862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009866:	2303      	movs	r3, #3
 8009868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 800986c:	2307      	movs	r3, #7
 800986e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 8009872:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009876:	4619      	mov	r1, r3
 8009878:	4804      	ldr	r0, [pc, #16]	; (800988c <USART3_MspInit+0xc0>)
 800987a:	f000 fd15 	bl	800a2a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 800987e:	bf00      	nop
 8009880:	37a8      	adds	r7, #168	; 0xa8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	40023800 	.word	0x40023800
 800988c:	40020c00 	.word	0x40020c00

08009890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009894:	2003      	movs	r0, #3
 8009896:	f000 f94d 	bl	8009b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800989a:	2000      	movs	r0, #0
 800989c:	f000 f806 	bl	80098ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098a0:	f7f7 fd4a 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098b4:	4b12      	ldr	r3, [pc, #72]	; (8009900 <HAL_InitTick+0x54>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4b12      	ldr	r3, [pc, #72]	; (8009904 <HAL_InitTick+0x58>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80098c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f967 	bl	8009b9e <HAL_SYSTICK_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e00e      	b.n	80098f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b0f      	cmp	r3, #15
 80098de:	d80a      	bhi.n	80098f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098e0:	2200      	movs	r2, #0
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	f000 f92f 	bl	8009b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80098ec:	4a06      	ldr	r2, [pc, #24]	; (8009908 <HAL_InitTick+0x5c>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	e000      	b.n	80098f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000000 	.word	0x20000000
 8009904:	20000194 	.word	0x20000194
 8009908:	20000190 	.word	0x20000190

0800990c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <HAL_IncTick+0x20>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	4b06      	ldr	r3, [pc, #24]	; (8009930 <HAL_IncTick+0x24>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4413      	add	r3, r2
 800991c:	4a04      	ldr	r2, [pc, #16]	; (8009930 <HAL_IncTick+0x24>)
 800991e:	6013      	str	r3, [r2, #0]
}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	20000194 	.word	0x20000194
 8009930:	20000be0 	.word	0x20000be0

08009934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  return uwTick;
 8009938:	4b03      	ldr	r3, [pc, #12]	; (8009948 <HAL_GetTick+0x14>)
 800993a:	681b      	ldr	r3, [r3, #0]
}
 800993c:	4618      	mov	r0, r3
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	20000be0 	.word	0x20000be0

0800994c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009954:	f7ff ffee 	bl	8009934 <HAL_GetTick>
 8009958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d005      	beq.n	8009972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <HAL_Delay+0x44>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009972:	bf00      	nop
 8009974:	f7ff ffde 	bl	8009934 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	429a      	cmp	r2, r3
 8009982:	d8f7      	bhi.n	8009974 <HAL_Delay+0x28>
  {
  }
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20000194 	.word	0x20000194

08009994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099a4:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <__NVIC_SetPriorityGrouping+0x40>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099b0:	4013      	ands	r3, r2
 80099b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <__NVIC_SetPriorityGrouping+0x44>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099c2:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <__NVIC_SetPriorityGrouping+0x40>)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	60d3      	str	r3, [r2, #12]
}
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	e000ed00 	.word	0xe000ed00
 80099d8:	05fa0000 	.word	0x05fa0000

080099dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099e0:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <__NVIC_GetPriorityGrouping+0x18>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	0a1b      	lsrs	r3, r3, #8
 80099e6:	f003 0307 	and.w	r3, r3, #7
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	e000ed00 	.word	0xe000ed00

080099f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	db0b      	blt.n	8009a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	f003 021f 	and.w	r2, r3, #31
 8009a10:	4907      	ldr	r1, [pc, #28]	; (8009a30 <__NVIC_EnableIRQ+0x38>)
 8009a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	2001      	movs	r0, #1
 8009a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	e000e100 	.word	0xe000e100

08009a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	db0a      	blt.n	8009a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	490c      	ldr	r1, [pc, #48]	; (8009a80 <__NVIC_SetPriority+0x4c>)
 8009a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a52:	0112      	lsls	r2, r2, #4
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	440b      	add	r3, r1
 8009a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a5c:	e00a      	b.n	8009a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	4908      	ldr	r1, [pc, #32]	; (8009a84 <__NVIC_SetPriority+0x50>)
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	3b04      	subs	r3, #4
 8009a6c:	0112      	lsls	r2, r2, #4
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	440b      	add	r3, r1
 8009a72:	761a      	strb	r2, [r3, #24]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	e000e100 	.word	0xe000e100
 8009a84:	e000ed00 	.word	0xe000ed00

08009a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b089      	sub	sp, #36	; 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f1c3 0307 	rsb	r3, r3, #7
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	bf28      	it	cs
 8009aa6:	2304      	movcs	r3, #4
 8009aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	3304      	adds	r3, #4
 8009aae:	2b06      	cmp	r3, #6
 8009ab0:	d902      	bls.n	8009ab8 <NVIC_EncodePriority+0x30>
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	3b03      	subs	r3, #3
 8009ab6:	e000      	b.n	8009aba <NVIC_EncodePriority+0x32>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	43da      	mvns	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	401a      	ands	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8009ada:	43d9      	mvns	r1, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ae0:	4313      	orrs	r3, r2
         );
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3724      	adds	r7, #36	; 0x24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
	...

08009af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b00:	d301      	bcc.n	8009b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b02:	2301      	movs	r3, #1
 8009b04:	e00f      	b.n	8009b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b06:	4a0a      	ldr	r2, [pc, #40]	; (8009b30 <SysTick_Config+0x40>)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b0e:	210f      	movs	r1, #15
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	f7ff ff8e 	bl	8009a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b18:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <SysTick_Config+0x40>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <SysTick_Config+0x40>)
 8009b20:	2207      	movs	r2, #7
 8009b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	e000e010 	.word	0xe000e010

08009b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ff29 	bl	8009994 <__NVIC_SetPriorityGrouping>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b086      	sub	sp, #24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	4603      	mov	r3, r0
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b5c:	f7ff ff3e 	bl	80099dc <__NVIC_GetPriorityGrouping>
 8009b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	6978      	ldr	r0, [r7, #20]
 8009b68:	f7ff ff8e 	bl	8009a88 <NVIC_EncodePriority>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff ff5d 	bl	8009a34 <__NVIC_SetPriority>
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	4603      	mov	r3, r0
 8009b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff ff31 	bl	80099f8 <__NVIC_EnableIRQ>
}
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff ffa2 	bl	8009af0 <SysTick_Config>
 8009bac:	4603      	mov	r3, r0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e06a      	b.n	8009ca0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2223      	movs	r2, #35	; 0x23
 8009bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7f7 fbcf 	bl	8001380 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <HAL_ETH_Init+0xf0>)
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	4a30      	ldr	r2, [pc, #192]	; (8009ca8 <HAL_ETH_Init+0xf0>)
 8009be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bec:	6453      	str	r3, [r2, #68]	; 0x44
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <HAL_ETH_Init+0xf0>)
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bf6:	60bb      	str	r3, [r7, #8]
 8009bf8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	; (8009cac <HAL_ETH_Init+0xf4>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4a2b      	ldr	r2, [pc, #172]	; (8009cac <HAL_ETH_Init+0xf4>)
 8009c00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009c04:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009c06:	4b29      	ldr	r3, [pc, #164]	; (8009cac <HAL_ETH_Init+0xf4>)
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	4927      	ldr	r1, [pc, #156]	; (8009cac <HAL_ETH_Init+0xf4>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8009c14:	4b25      	ldr	r3, [pc, #148]	; (8009cac <HAL_ETH_Init+0xf4>)
 8009c16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	f043 0301 	orr.w	r3, r3, #1
 8009c2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c30:	f7ff fe80 	bl	8009934 <HAL_GetTick>
 8009c34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8009c36:	e011      	b.n	8009c5c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009c38:	f7ff fe7c 	bl	8009934 <HAL_GetTick>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009c46:	d909      	bls.n	8009c5c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2204      	movs	r2, #4
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	22e0      	movs	r2, #224	; 0xe0
 8009c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e021      	b.n	8009ca0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f958 	bl	8009f24 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9ff 	bl	800a078 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa55 	bl	800a12a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	461a      	mov	r2, r3
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f9bd 	bl	800a008 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2210      	movs	r2, #16
 8009c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	40023800 	.word	0x40023800
 8009cac:	40013800 	.word	0x40013800

08009cb0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4b51      	ldr	r3, [pc, #324]	; (8009e0c <ETH_SetMACConfig+0x15c>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	7c1b      	ldrb	r3, [r3, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <ETH_SetMACConfig+0x28>
 8009cd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009cd6:	e000      	b.n	8009cda <ETH_SetMACConfig+0x2a>
 8009cd8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	7c5b      	ldrb	r3, [r3, #17]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d102      	bne.n	8009ce8 <ETH_SetMACConfig+0x38>
 8009ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ce6:	e000      	b.n	8009cea <ETH_SetMACConfig+0x3a>
 8009ce8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8009cea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8009cf0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	7fdb      	ldrb	r3, [r3, #31]
 8009cf6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8009cf8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8009cfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	7f92      	ldrb	r2, [r2, #30]
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	d102      	bne.n	8009d0e <ETH_SetMACConfig+0x5e>
 8009d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009d0c:	e000      	b.n	8009d10 <ETH_SetMACConfig+0x60>
 8009d0e:	2200      	movs	r2, #0
                        macconf->Speed |
 8009d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	7f1b      	ldrb	r3, [r3, #28]
 8009d16:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8009d18:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8009d1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	791b      	ldrb	r3, [r3, #4]
 8009d24:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8009d26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009d2e:	2a00      	cmp	r2, #0
 8009d30:	d102      	bne.n	8009d38 <ETH_SetMACConfig+0x88>
 8009d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d36:	e000      	b.n	8009d3a <ETH_SetMACConfig+0x8a>
 8009d38:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8009d3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	7bdb      	ldrb	r3, [r3, #15]
 8009d40:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8009d42:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009d48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d50:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8009d52:	4313      	orrs	r3, r2
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	f7ff fdee 	bl	800994c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009d86:	4013      	ands	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d8e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	d101      	bne.n	8009d9e <ETH_SetMACConfig+0xee>
 8009d9a:	2280      	movs	r2, #128	; 0x80
 8009d9c:	e000      	b.n	8009da0 <ETH_SetMACConfig+0xf0>
 8009d9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009da0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8009da6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8009dae:	2a01      	cmp	r2, #1
 8009db0:	d101      	bne.n	8009db6 <ETH_SetMACConfig+0x106>
 8009db2:	2208      	movs	r2, #8
 8009db4:	e000      	b.n	8009db8 <ETH_SetMACConfig+0x108>
 8009db6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8009db8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8009dc0:	2a01      	cmp	r2, #1
 8009dc2:	d101      	bne.n	8009dc8 <ETH_SetMACConfig+0x118>
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	e000      	b.n	8009dca <ETH_SetMACConfig+0x11a>
 8009dc8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8009dd2:	2a01      	cmp	r2, #1
 8009dd4:	d101      	bne.n	8009dda <ETH_SetMACConfig+0x12a>
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	e000      	b.n	8009ddc <ETH_SetMACConfig+0x12c>
 8009dda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009df4:	2001      	movs	r0, #1
 8009df6:	f7ff fda9 	bl	800994c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	619a      	str	r2, [r3, #24]
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	ff20810f 	.word	0xff20810f

08009e10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4b3d      	ldr	r3, [pc, #244]	; (8009f20 <ETH_SetDMAConfig+0x110>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	7b1b      	ldrb	r3, [r3, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <ETH_SetDMAConfig+0x2c>
 8009e36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009e3a:	e000      	b.n	8009e3e <ETH_SetDMAConfig+0x2e>
 8009e3c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	7b5b      	ldrb	r3, [r3, #13]
 8009e42:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8009e44:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	7f52      	ldrb	r2, [r2, #29]
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	d102      	bne.n	8009e54 <ETH_SetDMAConfig+0x44>
 8009e4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e52:	e000      	b.n	8009e56 <ETH_SetDMAConfig+0x46>
 8009e54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8009e56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	7b9b      	ldrb	r3, [r3, #14]
 8009e5c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8009e5e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8009e64:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	7f1b      	ldrb	r3, [r3, #28]
 8009e6a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8009e6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	7f9b      	ldrb	r3, [r3, #30]
 8009e72:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8009e74:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009e7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e82:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8009e84:	4313      	orrs	r3, r2
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e94:	461a      	mov	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7ff fd50 	bl	800994c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	791b      	ldrb	r3, [r3, #4]
 8009ebe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8009ec4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8009eca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8009ed0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ed8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8009eda:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8009ee2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8009ee8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ef2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ef6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7ff fd21 	bl	800994c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f12:	461a      	mov	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6013      	str	r3, [r2, #0]
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	f8de3f23 	.word	0xf8de3f23

08009f24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b0a6      	sub	sp, #152	; 0x98
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009f60:	2300      	movs	r3, #0
 8009f62:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009f86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009f98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fe86 	bl	8009cb0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fd8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009fde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fe4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff ff08 	bl	8009e10 <ETH_SetDMAConfig>
}
 800a000:	bf00      	nop
 800a002:	3798      	adds	r7, #152	; 0x98
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3305      	adds	r3, #5
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	3204      	adds	r2, #4
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	4b11      	ldr	r3, [pc, #68]	; (800a070 <ETH_MACAddressConfig+0x68>)
 800a02a:	4413      	add	r3, r2
 800a02c:	461a      	mov	r2, r3
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3303      	adds	r3, #3
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	061a      	lsls	r2, r3, #24
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3302      	adds	r3, #2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3301      	adds	r3, #1
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	021b      	lsls	r3, r3, #8
 800a04c:	4313      	orrs	r3, r2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <ETH_MACAddressConfig+0x6c>)
 800a05a:	4413      	add	r3, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	6013      	str	r3, [r2, #0]
}
 800a062:	bf00      	nop
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	40028040 	.word	0x40028040
 800a074:	40028044 	.word	0x40028044

0800a078 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e03e      	b.n	800a104 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68d9      	ldr	r1, [r3, #12]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	440b      	add	r3, r1
 800a096:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	3206      	adds	r2, #6
 800a0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d80c      	bhi.n	800a0e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68d9      	ldr	r1, [r3, #12]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	440b      	add	r3, r1
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	60da      	str	r2, [r3, #12]
 800a0e6:	e004      	b.n	800a0f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b03      	cmp	r3, #3
 800a108:	d9bd      	bls.n	800a086 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11c:	611a      	str	r2, [r3, #16]
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
 800a136:	e046      	b.n	800a1c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6919      	ldr	r1, [r3, #16]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	440b      	add	r3, r1
 800a148:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2200      	movs	r2, #0
 800a15a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2200      	movs	r2, #0
 800a160:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2200      	movs	r2, #0
 800a166:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a174:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800a17c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	3212      	adds	r2, #18
 800a192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d80c      	bhi.n	800a1b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6919      	ldr	r1, [r3, #16]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	440b      	add	r3, r1
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	60da      	str	r2, [r3, #12]
 800a1b4:	e004      	b.n	800a1c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d9b5      	bls.n	800a138 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f6:	60da      	str	r2, [r3, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	460b      	mov	r3, r1
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	605a      	str	r2, [r3, #4]
      break;
 800a222:	e002      	b.n	800a22a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
      break;
 800a228:	bf00      	nop
  }

  return status;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e003      	b.n	800a254 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a252:	2300      	movs	r3, #0
  }
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 031f 	and.w	r3, r3, #31
 800a270:	2201      	movs	r2, #1
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <HAL_EXTI_IRQHandler+0x44>)
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4013      	ands	r3, r2
 800a280:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a288:	4a06      	ldr	r2, [pc, #24]	; (800a2a4 <HAL_EXTI_IRQHandler+0x44>)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	4798      	blx	r3
    }
  }
}
 800a29c:	bf00      	nop
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	40013c00 	.word	0x40013c00

0800a2a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b089      	sub	sp, #36	; 0x24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	e175      	b.n	800a5b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	f040 8164 	bne.w	800a5ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d005      	beq.n	800a2fe <HAL_GPIO_Init+0x56>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d130      	bne.n	800a360 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	2203      	movs	r2, #3
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43db      	mvns	r3, r3
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	4013      	ands	r3, r2
 800a314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	fa02 f303 	lsl.w	r3, r2, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4313      	orrs	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a334:	2201      	movs	r2, #1
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	fa02 f303 	lsl.w	r3, r2, r3
 800a33c:	43db      	mvns	r3, r3
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	4013      	ands	r3, r2
 800a342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	091b      	lsrs	r3, r3, #4
 800a34a:	f003 0201 	and.w	r2, r3, #1
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	fa02 f303 	lsl.w	r3, r2, r3
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	4313      	orrs	r3, r2
 800a358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d017      	beq.n	800a39c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	2203      	movs	r2, #3
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	43db      	mvns	r3, r3
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	4013      	ands	r3, r2
 800a382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	4313      	orrs	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f003 0303 	and.w	r3, r3, #3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d123      	bne.n	800a3f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	08da      	lsrs	r2, r3, #3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3208      	adds	r2, #8
 800a3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f003 0307 	and.w	r3, r3, #7
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	220f      	movs	r2, #15
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	691a      	ldr	r2, [r3, #16]
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	08da      	lsrs	r2, r3, #3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3208      	adds	r2, #8
 800a3ea:	69b9      	ldr	r1, [r7, #24]
 800a3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a400:	43db      	mvns	r3, r3
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	4013      	ands	r3, r2
 800a406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f003 0203 	and.w	r2, r3, #3
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 80be 	beq.w	800a5ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a432:	4b66      	ldr	r3, [pc, #408]	; (800a5cc <HAL_GPIO_Init+0x324>)
 800a434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a436:	4a65      	ldr	r2, [pc, #404]	; (800a5cc <HAL_GPIO_Init+0x324>)
 800a438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a43c:	6453      	str	r3, [r2, #68]	; 0x44
 800a43e:	4b63      	ldr	r3, [pc, #396]	; (800a5cc <HAL_GPIO_Init+0x324>)
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a44a:	4a61      	ldr	r2, [pc, #388]	; (800a5d0 <HAL_GPIO_Init+0x328>)
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	089b      	lsrs	r3, r3, #2
 800a450:	3302      	adds	r3, #2
 800a452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a456:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	220f      	movs	r2, #15
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	43db      	mvns	r3, r3
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	4013      	ands	r3, r2
 800a46c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a58      	ldr	r2, [pc, #352]	; (800a5d4 <HAL_GPIO_Init+0x32c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d037      	beq.n	800a4e6 <HAL_GPIO_Init+0x23e>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a57      	ldr	r2, [pc, #348]	; (800a5d8 <HAL_GPIO_Init+0x330>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d031      	beq.n	800a4e2 <HAL_GPIO_Init+0x23a>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a56      	ldr	r2, [pc, #344]	; (800a5dc <HAL_GPIO_Init+0x334>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d02b      	beq.n	800a4de <HAL_GPIO_Init+0x236>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a55      	ldr	r2, [pc, #340]	; (800a5e0 <HAL_GPIO_Init+0x338>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d025      	beq.n	800a4da <HAL_GPIO_Init+0x232>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a54      	ldr	r2, [pc, #336]	; (800a5e4 <HAL_GPIO_Init+0x33c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d01f      	beq.n	800a4d6 <HAL_GPIO_Init+0x22e>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a53      	ldr	r2, [pc, #332]	; (800a5e8 <HAL_GPIO_Init+0x340>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d019      	beq.n	800a4d2 <HAL_GPIO_Init+0x22a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a52      	ldr	r2, [pc, #328]	; (800a5ec <HAL_GPIO_Init+0x344>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d013      	beq.n	800a4ce <HAL_GPIO_Init+0x226>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a51      	ldr	r2, [pc, #324]	; (800a5f0 <HAL_GPIO_Init+0x348>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00d      	beq.n	800a4ca <HAL_GPIO_Init+0x222>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a50      	ldr	r2, [pc, #320]	; (800a5f4 <HAL_GPIO_Init+0x34c>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d007      	beq.n	800a4c6 <HAL_GPIO_Init+0x21e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a4f      	ldr	r2, [pc, #316]	; (800a5f8 <HAL_GPIO_Init+0x350>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d101      	bne.n	800a4c2 <HAL_GPIO_Init+0x21a>
 800a4be:	2309      	movs	r3, #9
 800a4c0:	e012      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e010      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4c6:	2308      	movs	r3, #8
 800a4c8:	e00e      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4ca:	2307      	movs	r3, #7
 800a4cc:	e00c      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4ce:	2306      	movs	r3, #6
 800a4d0:	e00a      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4d2:	2305      	movs	r3, #5
 800a4d4:	e008      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4d6:	2304      	movs	r3, #4
 800a4d8:	e006      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e004      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e002      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <HAL_GPIO_Init+0x240>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	f002 0203 	and.w	r2, r2, #3
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	4093      	lsls	r3, r2
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a4f8:	4935      	ldr	r1, [pc, #212]	; (800a5d0 <HAL_GPIO_Init+0x328>)
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	089b      	lsrs	r3, r3, #2
 800a4fe:	3302      	adds	r3, #2
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a506:	4b3d      	ldr	r3, [pc, #244]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	43db      	mvns	r3, r3
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	4013      	ands	r3, r2
 800a514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a52a:	4a34      	ldr	r2, [pc, #208]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a530:	4b32      	ldr	r3, [pc, #200]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	43db      	mvns	r3, r3
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	4013      	ands	r3, r2
 800a53e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a554:	4a29      	ldr	r2, [pc, #164]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a55a:	4b28      	ldr	r3, [pc, #160]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	43db      	mvns	r3, r3
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	4013      	ands	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a57e:	4a1f      	ldr	r2, [pc, #124]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a584:	4b1d      	ldr	r3, [pc, #116]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	43db      	mvns	r3, r3
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	4013      	ands	r3, r2
 800a592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a5a8:	4a14      	ldr	r2, [pc, #80]	; (800a5fc <HAL_GPIO_Init+0x354>)
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61fb      	str	r3, [r7, #28]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	f67f ae86 	bls.w	800a2c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a5bc:	bf00      	nop
 800a5be:	bf00      	nop
 800a5c0:	3724      	adds	r7, #36	; 0x24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40013800 	.word	0x40013800
 800a5d4:	40020000 	.word	0x40020000
 800a5d8:	40020400 	.word	0x40020400
 800a5dc:	40020800 	.word	0x40020800
 800a5e0:	40020c00 	.word	0x40020c00
 800a5e4:	40021000 	.word	0x40021000
 800a5e8:	40021400 	.word	0x40021400
 800a5ec:	40021800 	.word	0x40021800
 800a5f0:	40021c00 	.word	0x40021c00
 800a5f4:	40022000 	.word	0x40022000
 800a5f8:	40022400 	.word	0x40022400
 800a5fc:	40013c00 	.word	0x40013c00

0800a600 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a60e:	2300      	movs	r3, #0
 800a610:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	e0d9      	b.n	800a7d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a61c:	2201      	movs	r2, #1
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	fa02 f303 	lsl.w	r3, r2, r3
 800a624:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	4013      	ands	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	f040 80c9 	bne.w	800a7ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a638:	4a6b      	ldr	r2, [pc, #428]	; (800a7e8 <HAL_GPIO_DeInit+0x1e8>)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	089b      	lsrs	r3, r3, #2
 800a63e:	3302      	adds	r3, #2
 800a640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a644:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f003 0303 	and.w	r3, r3, #3
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	220f      	movs	r2, #15
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	4013      	ands	r3, r2
 800a658:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a63      	ldr	r2, [pc, #396]	; (800a7ec <HAL_GPIO_DeInit+0x1ec>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d037      	beq.n	800a6d2 <HAL_GPIO_DeInit+0xd2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a62      	ldr	r2, [pc, #392]	; (800a7f0 <HAL_GPIO_DeInit+0x1f0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d031      	beq.n	800a6ce <HAL_GPIO_DeInit+0xce>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a61      	ldr	r2, [pc, #388]	; (800a7f4 <HAL_GPIO_DeInit+0x1f4>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d02b      	beq.n	800a6ca <HAL_GPIO_DeInit+0xca>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a60      	ldr	r2, [pc, #384]	; (800a7f8 <HAL_GPIO_DeInit+0x1f8>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d025      	beq.n	800a6c6 <HAL_GPIO_DeInit+0xc6>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a5f      	ldr	r2, [pc, #380]	; (800a7fc <HAL_GPIO_DeInit+0x1fc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d01f      	beq.n	800a6c2 <HAL_GPIO_DeInit+0xc2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a5e      	ldr	r2, [pc, #376]	; (800a800 <HAL_GPIO_DeInit+0x200>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d019      	beq.n	800a6be <HAL_GPIO_DeInit+0xbe>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a5d      	ldr	r2, [pc, #372]	; (800a804 <HAL_GPIO_DeInit+0x204>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d013      	beq.n	800a6ba <HAL_GPIO_DeInit+0xba>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a5c      	ldr	r2, [pc, #368]	; (800a808 <HAL_GPIO_DeInit+0x208>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00d      	beq.n	800a6b6 <HAL_GPIO_DeInit+0xb6>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a5b      	ldr	r2, [pc, #364]	; (800a80c <HAL_GPIO_DeInit+0x20c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d007      	beq.n	800a6b2 <HAL_GPIO_DeInit+0xb2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a5a      	ldr	r2, [pc, #360]	; (800a810 <HAL_GPIO_DeInit+0x210>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d101      	bne.n	800a6ae <HAL_GPIO_DeInit+0xae>
 800a6aa:	2309      	movs	r3, #9
 800a6ac:	e012      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6ae:	230a      	movs	r3, #10
 800a6b0:	e010      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	e00e      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6b6:	2307      	movs	r3, #7
 800a6b8:	e00c      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6ba:	2306      	movs	r3, #6
 800a6bc:	e00a      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6be:	2305      	movs	r3, #5
 800a6c0:	e008      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e006      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e004      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e002      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <HAL_GPIO_DeInit+0xd4>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	f002 0203 	and.w	r2, r2, #3
 800a6da:	0092      	lsls	r2, r2, #2
 800a6dc:	4093      	lsls	r3, r2
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d132      	bne.n	800a74a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a6e4:	4b4b      	ldr	r3, [pc, #300]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	4949      	ldr	r1, [pc, #292]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a6f2:	4b48      	ldr	r3, [pc, #288]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	43db      	mvns	r3, r3
 800a6fa:	4946      	ldr	r1, [pc, #280]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a700:	4b44      	ldr	r3, [pc, #272]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	43db      	mvns	r3, r3
 800a708:	4942      	ldr	r1, [pc, #264]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a70e:	4b41      	ldr	r3, [pc, #260]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	43db      	mvns	r3, r3
 800a716:	493f      	ldr	r1, [pc, #252]	; (800a814 <HAL_GPIO_DeInit+0x214>)
 800a718:	4013      	ands	r3, r2
 800a71a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	220f      	movs	r2, #15
 800a726:	fa02 f303 	lsl.w	r3, r2, r3
 800a72a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a72c:	4a2e      	ldr	r2, [pc, #184]	; (800a7e8 <HAL_GPIO_DeInit+0x1e8>)
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	089b      	lsrs	r3, r3, #2
 800a732:	3302      	adds	r3, #2
 800a734:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	43da      	mvns	r2, r3
 800a73c:	482a      	ldr	r0, [pc, #168]	; (800a7e8 <HAL_GPIO_DeInit+0x1e8>)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	089b      	lsrs	r3, r3, #2
 800a742:	400a      	ands	r2, r1
 800a744:	3302      	adds	r3, #2
 800a746:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	2103      	movs	r1, #3
 800a754:	fa01 f303 	lsl.w	r3, r1, r3
 800a758:	43db      	mvns	r3, r3
 800a75a:	401a      	ands	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	08da      	lsrs	r2, r3, #3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3208      	adds	r2, #8
 800a768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	220f      	movs	r2, #15
 800a776:	fa02 f303 	lsl.w	r3, r2, r3
 800a77a:	43db      	mvns	r3, r3
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	08d2      	lsrs	r2, r2, #3
 800a780:	4019      	ands	r1, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3208      	adds	r2, #8
 800a786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	2103      	movs	r1, #3
 800a794:	fa01 f303 	lsl.w	r3, r1, r3
 800a798:	43db      	mvns	r3, r3
 800a79a:	401a      	ands	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	401a      	ands	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	2103      	movs	r1, #3
 800a7be:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c2:	43db      	mvns	r3, r3
 800a7c4:	401a      	ands	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	f67f af22 	bls.w	800a61c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	40013800 	.word	0x40013800
 800a7ec:	40020000 	.word	0x40020000
 800a7f0:	40020400 	.word	0x40020400
 800a7f4:	40020800 	.word	0x40020800
 800a7f8:	40020c00 	.word	0x40020c00
 800a7fc:	40021000 	.word	0x40021000
 800a800:	40021400 	.word	0x40021400
 800a804:	40021800 	.word	0x40021800
 800a808:	40021c00 	.word	0x40021c00
 800a80c:	40022000 	.word	0x40022000
 800a810:	40022400 	.word	0x40022400
 800a814:	40013c00 	.word	0x40013c00

0800a818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	887b      	ldrh	r3, [r7, #2]
 800a82a:	4013      	ands	r3, r2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e001      	b.n	800a83a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	807b      	strh	r3, [r7, #2]
 800a854:	4613      	mov	r3, r2
 800a856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a858:	787b      	ldrb	r3, [r7, #1]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a85e:	887a      	ldrh	r2, [r7, #2]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a864:	e003      	b.n	800a86e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a866:	887b      	ldrh	r3, [r7, #2]
 800a868:	041a      	lsls	r2, r3, #16
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	619a      	str	r2, [r3, #24]
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
	...

0800a87c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a886:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a888:	695a      	ldr	r2, [r3, #20]
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	4013      	ands	r3, r2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d006      	beq.n	800a8a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a892:	4a05      	ldr	r2, [pc, #20]	; (800a8a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a898:	88fb      	ldrh	r3, [r7, #6]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f806 	bl	800a8ac <HAL_GPIO_EXTI_Callback>
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	40013c00 	.word	0x40013c00

0800a8ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
	...

0800a8c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e07f      	b.n	800a9d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8a9 	bl	800aa42 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2224      	movs	r2, #36	; 0x24
 800a8f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d107      	bne.n	800a93e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a93a:	609a      	str	r2, [r3, #8]
 800a93c:	e006      	b.n	800a94c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a94a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d104      	bne.n	800a95e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a95c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6859      	ldr	r1, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	4b1d      	ldr	r3, [pc, #116]	; (800a9e0 <HAL_I2C_Init+0x11c>)
 800a96a:	430b      	orrs	r3, r1
 800a96c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a97c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691a      	ldr	r2, [r3, #16]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	69d9      	ldr	r1, [r3, #28]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1a      	ldr	r2, [r3, #32]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0201 	orr.w	r2, r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	02008000 	.word	0x02008000

0800a9e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e021      	b.n	800aa3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2224      	movs	r2, #36	; 0x24
 800a9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f022 0201 	bic.w	r2, r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f821 	bl	800aa56 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
	...

0800aa6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	817b      	strh	r3, [r7, #10]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	813b      	strh	r3, [r7, #8]
 800aa82:	4613      	mov	r3, r2
 800aa84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	f040 80f9 	bne.w	800ac86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <HAL_I2C_Mem_Write+0x34>
 800aa9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e0ed      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d101      	bne.n	800aaba <HAL_I2C_Mem_Write+0x4e>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e0e6      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aac2:	f7fe ff37 	bl	8009934 <HAL_GetTick>
 800aac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2319      	movs	r3, #25
 800aace:	2201      	movs	r2, #1
 800aad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fadd 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e0d1      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2221      	movs	r2, #33	; 0x21
 800aae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2240      	movs	r2, #64	; 0x40
 800aaf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a3a      	ldr	r2, [r7, #32]
 800aafe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab0c:	88f8      	ldrh	r0, [r7, #6]
 800ab0e:	893a      	ldrh	r2, [r7, #8]
 800ab10:	8979      	ldrh	r1, [r7, #10]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 f9ed 	bl	800aefc <I2C_RequestMemoryWrite>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0a9      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2bff      	cmp	r3, #255	; 0xff
 800ab3c:	d90e      	bls.n	800ab5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	22ff      	movs	r2, #255	; 0xff
 800ab42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	8979      	ldrh	r1, [r7, #10]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 fc39 	bl	800b3cc <I2C_TransferConfig>
 800ab5a:	e00f      	b.n	800ab7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	8979      	ldrh	r1, [r7, #10]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 fc28 	bl	800b3cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 fac7 	bl	800b114 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e07b      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abaa:	b29b      	uxth	r3, r3
 800abac:	3b01      	subs	r3, #1
 800abae:	b29a      	uxth	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d034      	beq.n	800ac34 <HAL_I2C_Mem_Write+0x1c8>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d130      	bne.n	800ac34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	2200      	movs	r2, #0
 800abda:	2180      	movs	r1, #128	; 0x80
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 fa59 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e04d      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2bff      	cmp	r3, #255	; 0xff
 800abf4:	d90e      	bls.n	800ac14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	22ff      	movs	r2, #255	; 0xff
 800abfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	8979      	ldrh	r1, [r7, #10]
 800ac04:	2300      	movs	r3, #0
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 fbdd 	bl	800b3cc <I2C_TransferConfig>
 800ac12:	e00f      	b.n	800ac34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	8979      	ldrh	r1, [r7, #10]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fbcc 	bl	800b3cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d19e      	bne.n	800ab7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 faa6 	bl	800b194 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e01a      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2220      	movs	r2, #32
 800ac58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6859      	ldr	r1, [r3, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <HAL_I2C_Mem_Write+0x224>)
 800ac66:	400b      	ands	r3, r1
 800ac68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e000      	b.n	800ac88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ac86:	2302      	movs	r3, #2
  }
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	fe00e800 	.word	0xfe00e800

0800ac94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	4611      	mov	r1, r2
 800aca0:	461a      	mov	r2, r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	817b      	strh	r3, [r7, #10]
 800aca6:	460b      	mov	r3, r1
 800aca8:	813b      	strh	r3, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	f040 80fd 	bne.w	800aeb6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <HAL_I2C_Mem_Read+0x34>
 800acc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0f1      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <HAL_I2C_Mem_Read+0x4e>
 800acde:	2302      	movs	r3, #2
 800ace0:	e0ea      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800acea:	f7fe fe23 	bl	8009934 <HAL_GetTick>
 800acee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	2319      	movs	r3, #25
 800acf6:	2201      	movs	r2, #1
 800acf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f9c9 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0d5      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2222      	movs	r2, #34	; 0x22
 800ad10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2240      	movs	r2, #64	; 0x40
 800ad18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a3a      	ldr	r2, [r7, #32]
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad34:	88f8      	ldrh	r0, [r7, #6]
 800ad36:	893a      	ldrh	r2, [r7, #8]
 800ad38:	8979      	ldrh	r1, [r7, #10]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	4603      	mov	r3, r0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f92d 	bl	800afa4 <I2C_RequestMemoryRead>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e0ad      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2bff      	cmp	r3, #255	; 0xff
 800ad64:	d90e      	bls.n	800ad84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	22ff      	movs	r2, #255	; 0xff
 800ad6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	8979      	ldrh	r1, [r7, #10]
 800ad74:	4b52      	ldr	r3, [pc, #328]	; (800aec0 <HAL_I2C_Mem_Read+0x22c>)
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 fb25 	bl	800b3cc <I2C_TransferConfig>
 800ad82:	e00f      	b.n	800ada4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	8979      	ldrh	r1, [r7, #10]
 800ad96:	4b4a      	ldr	r3, [pc, #296]	; (800aec0 <HAL_I2C_Mem_Read+0x22c>)
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 fb14 	bl	800b3cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2200      	movs	r2, #0
 800adac:	2104      	movs	r1, #4
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f970 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e07c      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adda:	3b01      	subs	r3, #1
 800addc:	b29a      	uxth	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	3b01      	subs	r3, #1
 800adea:	b29a      	uxth	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d034      	beq.n	800ae64 <HAL_I2C_Mem_Read+0x1d0>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d130      	bne.n	800ae64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2180      	movs	r1, #128	; 0x80
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f941 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e04d      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	2bff      	cmp	r3, #255	; 0xff
 800ae24:	d90e      	bls.n	800ae44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	22ff      	movs	r2, #255	; 0xff
 800ae2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	8979      	ldrh	r1, [r7, #10]
 800ae34:	2300      	movs	r3, #0
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fac5 	bl	800b3cc <I2C_TransferConfig>
 800ae42:	e00f      	b.n	800ae64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	8979      	ldrh	r1, [r7, #10]
 800ae56:	2300      	movs	r3, #0
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fab4 	bl	800b3cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d19a      	bne.n	800ada4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 f98e 	bl	800b194 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e01a      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2220      	movs	r2, #32
 800ae88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6859      	ldr	r1, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <HAL_I2C_Mem_Read+0x230>)
 800ae96:	400b      	ands	r3, r1
 800ae98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e000      	b.n	800aeb8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	80002400 	.word	0x80002400
 800aec4:	fe00e800 	.word	0xfe00e800

0800aec8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aed6:	b2db      	uxtb	r3, r3
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	4603      	mov	r3, r0
 800af0c:	817b      	strh	r3, [r7, #10]
 800af0e:	460b      	mov	r3, r1
 800af10:	813b      	strh	r3, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800af16:	88fb      	ldrh	r3, [r7, #6]
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	8979      	ldrh	r1, [r7, #10]
 800af1c:	4b20      	ldr	r3, [pc, #128]	; (800afa0 <I2C_RequestMemoryWrite+0xa4>)
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fa51 	bl	800b3cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	69b9      	ldr	r1, [r7, #24]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f8f0 	bl	800b114 <I2C_WaitOnTXISFlagUntilTimeout>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e02c      	b.n	800af98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af3e:	88fb      	ldrh	r3, [r7, #6]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d105      	bne.n	800af50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af44:	893b      	ldrh	r3, [r7, #8]
 800af46:	b2da      	uxtb	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	629a      	str	r2, [r3, #40]	; 0x28
 800af4e:	e015      	b.n	800af7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800af50:	893b      	ldrh	r3, [r7, #8]
 800af52:	0a1b      	lsrs	r3, r3, #8
 800af54:	b29b      	uxth	r3, r3
 800af56:	b2da      	uxtb	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	69b9      	ldr	r1, [r7, #24]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f8d6 	bl	800b114 <I2C_WaitOnTXISFlagUntilTimeout>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e012      	b.n	800af98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af72:	893b      	ldrh	r3, [r7, #8]
 800af74:	b2da      	uxtb	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2200      	movs	r2, #0
 800af84:	2180      	movs	r1, #128	; 0x80
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f884 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	80002000 	.word	0x80002000

0800afa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af02      	add	r7, sp, #8
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	4608      	mov	r0, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	461a      	mov	r2, r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	817b      	strh	r3, [r7, #10]
 800afb6:	460b      	mov	r3, r1
 800afb8:	813b      	strh	r3, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800afbe:	88fb      	ldrh	r3, [r7, #6]
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	8979      	ldrh	r1, [r7, #10]
 800afc4:	4b20      	ldr	r3, [pc, #128]	; (800b048 <I2C_RequestMemoryRead+0xa4>)
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	2300      	movs	r3, #0
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 f9fe 	bl	800b3cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	69b9      	ldr	r1, [r7, #24]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f89d 	bl	800b114 <I2C_WaitOnTXISFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e02c      	b.n	800b03e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d105      	bne.n	800aff6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	b2da      	uxtb	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	629a      	str	r2, [r3, #40]	; 0x28
 800aff4:	e015      	b.n	800b022 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aff6:	893b      	ldrh	r3, [r7, #8]
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	b29b      	uxth	r3, r3
 800affc:	b2da      	uxtb	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	69b9      	ldr	r1, [r7, #24]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f883 	bl	800b114 <I2C_WaitOnTXISFlagUntilTimeout>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d001      	beq.n	800b018 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e012      	b.n	800b03e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b018:	893b      	ldrh	r3, [r7, #8]
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2200      	movs	r2, #0
 800b02a:	2140      	movs	r1, #64	; 0x40
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f831 	bl	800b094 <I2C_WaitOnFlagUntilTimeout>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	80002000 	.word	0x80002000

0800b04c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d103      	bne.n	800b06a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b01      	cmp	r3, #1
 800b076:	d007      	beq.n	800b088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f042 0201 	orr.w	r2, r2, #1
 800b086:	619a      	str	r2, [r3, #24]
  }
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0a4:	e022      	b.n	800b0ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d01e      	beq.n	800b0ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7fe fc41 	bl	8009934 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d302      	bcc.n	800b0c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d113      	bne.n	800b0ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c8:	f043 0220 	orr.w	r2, r3, #32
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e00f      	b.n	800b10c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	699a      	ldr	r2, [r3, #24]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	bf0c      	ite	eq
 800b0fc:	2301      	moveq	r3, #1
 800b0fe:	2300      	movne	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	429a      	cmp	r2, r3
 800b108:	d0cd      	beq.n	800b0a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b120:	e02c      	b.n	800b17c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	68b9      	ldr	r1, [r7, #8]
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 f870 	bl	800b20c <I2C_IsErrorOccurred>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e02a      	b.n	800b18c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d01e      	beq.n	800b17c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b13e:	f7fe fbf9 	bl	8009934 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d302      	bcc.n	800b154 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d113      	bne.n	800b17c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b158:	f043 0220 	orr.w	r2, r3, #32
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2220      	movs	r2, #32
 800b164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e007      	b.n	800b18c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	d1cb      	bne.n	800b122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1a0:	e028      	b.n	800b1f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f830 	bl	800b20c <I2C_IsErrorOccurred>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e026      	b.n	800b204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b6:	f7fe fbbd 	bl	8009934 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d302      	bcc.n	800b1cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d113      	bne.n	800b1f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d0:	f043 0220 	orr.w	r2, r3, #32
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e007      	b.n	800b204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d1cf      	bne.n	800b1a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08a      	sub	sp, #40	; 0x28
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	f003 0310 	and.w	r3, r3, #16
 800b234:	2b00      	cmp	r3, #0
 800b236:	d068      	beq.n	800b30a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2210      	movs	r2, #16
 800b23e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b240:	e049      	b.n	800b2d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d045      	beq.n	800b2d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b24a:	f7fe fb73 	bl	8009934 <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	429a      	cmp	r2, r3
 800b258:	d302      	bcc.n	800b260 <I2C_IsErrorOccurred+0x54>
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d13a      	bne.n	800b2d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b26a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b282:	d121      	bne.n	800b2c8 <I2C_IsErrorOccurred+0xbc>
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b28a:	d01d      	beq.n	800b2c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b28c:	7cfb      	ldrb	r3, [r7, #19]
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d01a      	beq.n	800b2c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b2a2:	f7fe fb47 	bl	8009934 <HAL_GetTick>
 800b2a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2a8:	e00e      	b.n	800b2c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b2aa:	f7fe fb43 	bl	8009934 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b19      	cmp	r3, #25
 800b2b6:	d907      	bls.n	800b2c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	f043 0320 	orr.w	r3, r3, #32
 800b2be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b2c6:	e006      	b.n	800b2d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f003 0320 	and.w	r3, r3, #32
 800b2d2:	2b20      	cmp	r3, #32
 800b2d4:	d1e9      	bne.n	800b2aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	f003 0320 	and.w	r3, r3, #32
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d003      	beq.n	800b2ec <I2C_IsErrorOccurred+0xe0>
 800b2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0aa      	beq.n	800b242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d103      	bne.n	800b2fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	f043 0304 	orr.w	r3, r3, #4
 800b302:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	f043 0301 	orr.w	r3, r3, #1
 800b322:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b32c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00b      	beq.n	800b356 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	f043 0308 	orr.w	r3, r3, #8
 800b344:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b34e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	f043 0302 	orr.w	r3, r3, #2
 800b366:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b370:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01c      	beq.n	800b3ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7ff fe63 	bl	800b04c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6859      	ldr	r1, [r3, #4]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <I2C_IsErrorOccurred+0x1bc>)
 800b392:	400b      	ands	r3, r1
 800b394:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	431a      	orrs	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3728      	adds	r7, #40	; 0x28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	fe00e800 	.word	0xfe00e800

0800b3cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	607b      	str	r3, [r7, #4]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	817b      	strh	r3, [r7, #10]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3de:	897b      	ldrh	r3, [r7, #10]
 800b3e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3e4:	7a7b      	ldrb	r3, [r7, #9]
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	0d5b      	lsrs	r3, r3, #21
 800b406:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b40a:	4b08      	ldr	r3, [pc, #32]	; (800b42c <I2C_TransferConfig+0x60>)
 800b40c:	430b      	orrs	r3, r1
 800b40e:	43db      	mvns	r3, r3
 800b410:	ea02 0103 	and.w	r1, r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	03ff63ff 	.word	0x03ff63ff

0800b430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b20      	cmp	r3, #32
 800b444:	d138      	bne.n	800b4b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d101      	bne.n	800b454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b450:	2302      	movs	r3, #2
 800b452:	e032      	b.n	800b4ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2224      	movs	r2, #36	; 0x24
 800b460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f022 0201 	bic.w	r2, r2, #1
 800b472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6819      	ldr	r1, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0201 	orr.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	e000      	b.n	800b4ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b4b8:	2302      	movs	r3, #2
  }
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d139      	bne.n	800b550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	e033      	b.n	800b552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2224      	movs	r2, #36	; 0x24
 800b4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f022 0201 	bic.w	r2, r2, #1
 800b508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4313      	orrs	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f042 0201 	orr.w	r2, r2, #1
 800b53a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2220      	movs	r2, #32
 800b540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e000      	b.n	800b552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b550:	2302      	movs	r3, #2
  }
}
 800b552:	4618      	mov	r0, r3
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b55e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b560:	b08f      	sub	sp, #60	; 0x3c
 800b562:	af0a      	add	r7, sp, #40	; 0x28
 800b564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e116      	b.n	800b79e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7f5 ffb0 	bl	80014f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2203      	movs	r2, #3
 800b594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f001 ff20 	bl	800d3f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	603b      	str	r3, [r7, #0]
 800b5ba:	687e      	ldr	r6, [r7, #4]
 800b5bc:	466d      	mov	r5, sp
 800b5be:	f106 0410 	add.w	r4, r6, #16
 800b5c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b5c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b5ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b5ce:	e885 0003 	stmia.w	r5, {r0, r1}
 800b5d2:	1d33      	adds	r3, r6, #4
 800b5d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5d6:	6838      	ldr	r0, [r7, #0]
 800b5d8:	f001 feb4 	bl	800d344 <USB_CoreInit>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d005      	beq.n	800b5ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e0d7      	b.n	800b79e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 ff0e 	bl	800d416 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73fb      	strb	r3, [r7, #15]
 800b5fe:	e04a      	b.n	800b696 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b600:	7bfa      	ldrb	r2, [r7, #15]
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4613      	mov	r3, r2
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	4413      	add	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	440b      	add	r3, r1
 800b60e:	333d      	adds	r3, #61	; 0x3d
 800b610:	2201      	movs	r2, #1
 800b612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b614:	7bfa      	ldrb	r2, [r7, #15]
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	4613      	mov	r3, r2
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	440b      	add	r3, r1
 800b622:	333c      	adds	r3, #60	; 0x3c
 800b624:	7bfa      	ldrb	r2, [r7, #15]
 800b626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b628:	7bfa      	ldrb	r2, [r7, #15]
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	b298      	uxth	r0, r3
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4613      	mov	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	440b      	add	r3, r1
 800b63a:	3344      	adds	r3, #68	; 0x44
 800b63c:	4602      	mov	r2, r0
 800b63e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b640:	7bfa      	ldrb	r2, [r7, #15]
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	4613      	mov	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	440b      	add	r3, r1
 800b64e:	3340      	adds	r3, #64	; 0x40
 800b650:	2200      	movs	r2, #0
 800b652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	4613      	mov	r3, r2
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	440b      	add	r3, r1
 800b662:	3348      	adds	r3, #72	; 0x48
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b668:	7bfa      	ldrb	r2, [r7, #15]
 800b66a:	6879      	ldr	r1, [r7, #4]
 800b66c:	4613      	mov	r3, r2
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	440b      	add	r3, r1
 800b676:	334c      	adds	r3, #76	; 0x4c
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b67c:	7bfa      	ldrb	r2, [r7, #15]
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4613      	mov	r3, r2
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	3354      	adds	r3, #84	; 0x54
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	3301      	adds	r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
 800b696:	7bfa      	ldrb	r2, [r7, #15]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d3af      	bcc.n	800b600 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]
 800b6a4:	e044      	b.n	800b730 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b6a6:	7bfa      	ldrb	r2, [r7, #15]
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b6bc:	7bfa      	ldrb	r2, [r7, #15]
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b6ce:	7bfa      	ldrb	r2, [r7, #15]
 800b6d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b6d2:	7bfa      	ldrb	r2, [r7, #15]
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b6e8:	7bfa      	ldrb	r2, [r7, #15]
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b6fe:	7bfa      	ldrb	r2, [r7, #15]
 800b700:	6879      	ldr	r1, [r7, #4]
 800b702:	4613      	mov	r3, r2
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	440b      	add	r3, r1
 800b70c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b714:	7bfa      	ldrb	r2, [r7, #15]
 800b716:	6879      	ldr	r1, [r7, #4]
 800b718:	4613      	mov	r3, r2
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	3301      	adds	r3, #1
 800b72e:	73fb      	strb	r3, [r7, #15]
 800b730:	7bfa      	ldrb	r2, [r7, #15]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	429a      	cmp	r2, r3
 800b738:	d3b5      	bcc.n	800b6a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	687e      	ldr	r6, [r7, #4]
 800b742:	466d      	mov	r5, sp
 800b744:	f106 0410 	add.w	r4, r6, #16
 800b748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b74a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b74c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b74e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b750:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b754:	e885 0003 	stmia.w	r5, {r0, r1}
 800b758:	1d33      	adds	r3, r6, #4
 800b75a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b75c:	6838      	ldr	r0, [r7, #0]
 800b75e:	f001 fea7 	bl	800d4b0 <USB_DevInit>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e014      	b.n	800b79e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d102      	bne.n	800b792 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f80b 	bl	800b7a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4618      	mov	r0, r3
 800b798:	f002 f865 	bl	800d866 <USB_DevDisconnect>

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b7a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7d6:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <HAL_PCDEx_ActivateLPM+0x44>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	10000003 	.word	0x10000003

0800b7f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a04      	ldr	r2, [pc, #16]	; (800b80c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7fe:	6013      	str	r3, [r2, #0]
}
 800b800:	bf00      	nop
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	40007000 	.word	0x40007000

0800b810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b818:	2300      	movs	r3, #0
 800b81a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e291      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 8087 	beq.w	800b942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b834:	4b96      	ldr	r3, [pc, #600]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f003 030c 	and.w	r3, r3, #12
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d00c      	beq.n	800b85a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b840:	4b93      	ldr	r3, [pc, #588]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 030c 	and.w	r3, r3, #12
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d112      	bne.n	800b872 <HAL_RCC_OscConfig+0x62>
 800b84c:	4b90      	ldr	r3, [pc, #576]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b858:	d10b      	bne.n	800b872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b85a:	4b8d      	ldr	r3, [pc, #564]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d06c      	beq.n	800b940 <HAL_RCC_OscConfig+0x130>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d168      	bne.n	800b940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e26b      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87a:	d106      	bne.n	800b88a <HAL_RCC_OscConfig+0x7a>
 800b87c:	4b84      	ldr	r3, [pc, #528]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a83      	ldr	r2, [pc, #524]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	e02e      	b.n	800b8e8 <HAL_RCC_OscConfig+0xd8>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10c      	bne.n	800b8ac <HAL_RCC_OscConfig+0x9c>
 800b892:	4b7f      	ldr	r3, [pc, #508]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a7e      	ldr	r2, [pc, #504]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	4b7c      	ldr	r3, [pc, #496]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a7b      	ldr	r2, [pc, #492]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	e01d      	b.n	800b8e8 <HAL_RCC_OscConfig+0xd8>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8b4:	d10c      	bne.n	800b8d0 <HAL_RCC_OscConfig+0xc0>
 800b8b6:	4b76      	ldr	r3, [pc, #472]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a75      	ldr	r2, [pc, #468]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	4b73      	ldr	r3, [pc, #460]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a72      	ldr	r2, [pc, #456]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	e00b      	b.n	800b8e8 <HAL_RCC_OscConfig+0xd8>
 800b8d0:	4b6f      	ldr	r3, [pc, #444]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a6e      	ldr	r2, [pc, #440]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	4b6c      	ldr	r3, [pc, #432]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a6b      	ldr	r2, [pc, #428]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b8e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d013      	beq.n	800b918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8f0:	f7fe f820 	bl	8009934 <HAL_GetTick>
 800b8f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8f6:	e008      	b.n	800b90a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8f8:	f7fe f81c 	bl	8009934 <HAL_GetTick>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	2b64      	cmp	r3, #100	; 0x64
 800b904:	d901      	bls.n	800b90a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e21f      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b90a:	4b61      	ldr	r3, [pc, #388]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0f0      	beq.n	800b8f8 <HAL_RCC_OscConfig+0xe8>
 800b916:	e014      	b.n	800b942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b918:	f7fe f80c 	bl	8009934 <HAL_GetTick>
 800b91c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b91e:	e008      	b.n	800b932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b920:	f7fe f808 	bl	8009934 <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b64      	cmp	r3, #100	; 0x64
 800b92c:	d901      	bls.n	800b932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	e20b      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b932:	4b57      	ldr	r3, [pc, #348]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1f0      	bne.n	800b920 <HAL_RCC_OscConfig+0x110>
 800b93e:	e000      	b.n	800b942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d069      	beq.n	800ba22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b94e:	4b50      	ldr	r3, [pc, #320]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 030c 	and.w	r3, r3, #12
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00b      	beq.n	800b972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b95a:	4b4d      	ldr	r3, [pc, #308]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 030c 	and.w	r3, r3, #12
 800b962:	2b08      	cmp	r3, #8
 800b964:	d11c      	bne.n	800b9a0 <HAL_RCC_OscConfig+0x190>
 800b966:	4b4a      	ldr	r3, [pc, #296]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d116      	bne.n	800b9a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b972:	4b47      	ldr	r3, [pc, #284]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d005      	beq.n	800b98a <HAL_RCC_OscConfig+0x17a>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d001      	beq.n	800b98a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e1df      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b98a:	4b41      	ldr	r3, [pc, #260]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	493d      	ldr	r1, [pc, #244]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b99e:	e040      	b.n	800ba22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d023      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9a8:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a38      	ldr	r2, [pc, #224]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9b4:	f7fd ffbe 	bl	8009934 <HAL_GetTick>
 800b9b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9ba:	e008      	b.n	800b9ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9bc:	f7fd ffba 	bl	8009934 <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d901      	bls.n	800b9ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e1bd      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9ce:	4b30      	ldr	r3, [pc, #192]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0f0      	beq.n	800b9bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9da:	4b2d      	ldr	r3, [pc, #180]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	4929      	ldr	r1, [pc, #164]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	600b      	str	r3, [r1, #0]
 800b9ee:	e018      	b.n	800ba22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9f0:	4b27      	ldr	r3, [pc, #156]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a26      	ldr	r2, [pc, #152]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9fc:	f7fd ff9a 	bl	8009934 <HAL_GetTick>
 800ba00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba02:	e008      	b.n	800ba16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba04:	f7fd ff96 	bl	8009934 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d901      	bls.n	800ba16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e199      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba16:	4b1e      	ldr	r3, [pc, #120]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1f0      	bne.n	800ba04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0308 	and.w	r3, r3, #8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d038      	beq.n	800baa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d019      	beq.n	800ba6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba36:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba3a:	4a15      	ldr	r2, [pc, #84]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba3c:	f043 0301 	orr.w	r3, r3, #1
 800ba40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba42:	f7fd ff77 	bl	8009934 <HAL_GetTick>
 800ba46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba48:	e008      	b.n	800ba5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba4a:	f7fd ff73 	bl	8009934 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d901      	bls.n	800ba5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e176      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba5c:	4b0c      	ldr	r3, [pc, #48]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba60:	f003 0302 	and.w	r3, r3, #2
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0f0      	beq.n	800ba4a <HAL_RCC_OscConfig+0x23a>
 800ba68:	e01a      	b.n	800baa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba6a:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba6e:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <HAL_RCC_OscConfig+0x280>)
 800ba70:	f023 0301 	bic.w	r3, r3, #1
 800ba74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba76:	f7fd ff5d 	bl	8009934 <HAL_GetTick>
 800ba7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba7c:	e00a      	b.n	800ba94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba7e:	f7fd ff59 	bl	8009934 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d903      	bls.n	800ba94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e15c      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
 800ba90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba94:	4b91      	ldr	r3, [pc, #580]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800ba96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba98:	f003 0302 	and.w	r3, r3, #2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1ee      	bne.n	800ba7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 80a4 	beq.w	800bbf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800baae:	4b8b      	ldr	r3, [pc, #556]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10d      	bne.n	800bad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800baba:	4b88      	ldr	r3, [pc, #544]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	4a87      	ldr	r2, [pc, #540]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bac4:	6413      	str	r3, [r2, #64]	; 0x40
 800bac6:	4b85      	ldr	r3, [pc, #532]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bace:	60bb      	str	r3, [r7, #8]
 800bad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bad2:	2301      	movs	r3, #1
 800bad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bad6:	4b82      	ldr	r3, [pc, #520]	; (800bce0 <HAL_RCC_OscConfig+0x4d0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d118      	bne.n	800bb14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bae2:	4b7f      	ldr	r3, [pc, #508]	; (800bce0 <HAL_RCC_OscConfig+0x4d0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a7e      	ldr	r2, [pc, #504]	; (800bce0 <HAL_RCC_OscConfig+0x4d0>)
 800bae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800baee:	f7fd ff21 	bl	8009934 <HAL_GetTick>
 800baf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800baf4:	e008      	b.n	800bb08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baf6:	f7fd ff1d 	bl	8009934 <HAL_GetTick>
 800bafa:	4602      	mov	r2, r0
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	2b64      	cmp	r3, #100	; 0x64
 800bb02:	d901      	bls.n	800bb08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e120      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb08:	4b75      	ldr	r3, [pc, #468]	; (800bce0 <HAL_RCC_OscConfig+0x4d0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0f0      	beq.n	800baf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d106      	bne.n	800bb2a <HAL_RCC_OscConfig+0x31a>
 800bb1c:	4b6f      	ldr	r3, [pc, #444]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb20:	4a6e      	ldr	r2, [pc, #440]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb22:	f043 0301 	orr.w	r3, r3, #1
 800bb26:	6713      	str	r3, [r2, #112]	; 0x70
 800bb28:	e02d      	b.n	800bb86 <HAL_RCC_OscConfig+0x376>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10c      	bne.n	800bb4c <HAL_RCC_OscConfig+0x33c>
 800bb32:	4b6a      	ldr	r3, [pc, #424]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb36:	4a69      	ldr	r2, [pc, #420]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb38:	f023 0301 	bic.w	r3, r3, #1
 800bb3c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb3e:	4b67      	ldr	r3, [pc, #412]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb42:	4a66      	ldr	r2, [pc, #408]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb44:	f023 0304 	bic.w	r3, r3, #4
 800bb48:	6713      	str	r3, [r2, #112]	; 0x70
 800bb4a:	e01c      	b.n	800bb86 <HAL_RCC_OscConfig+0x376>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b05      	cmp	r3, #5
 800bb52:	d10c      	bne.n	800bb6e <HAL_RCC_OscConfig+0x35e>
 800bb54:	4b61      	ldr	r3, [pc, #388]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb58:	4a60      	ldr	r2, [pc, #384]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb5a:	f043 0304 	orr.w	r3, r3, #4
 800bb5e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb60:	4b5e      	ldr	r3, [pc, #376]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb64:	4a5d      	ldr	r2, [pc, #372]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	6713      	str	r3, [r2, #112]	; 0x70
 800bb6c:	e00b      	b.n	800bb86 <HAL_RCC_OscConfig+0x376>
 800bb6e:	4b5b      	ldr	r3, [pc, #364]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb72:	4a5a      	ldr	r2, [pc, #360]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb74:	f023 0301 	bic.w	r3, r3, #1
 800bb78:	6713      	str	r3, [r2, #112]	; 0x70
 800bb7a:	4b58      	ldr	r3, [pc, #352]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7e:	4a57      	ldr	r2, [pc, #348]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bb80:	f023 0304 	bic.w	r3, r3, #4
 800bb84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d015      	beq.n	800bbba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8e:	f7fd fed1 	bl	8009934 <HAL_GetTick>
 800bb92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb94:	e00a      	b.n	800bbac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb96:	f7fd fecd 	bl	8009934 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d901      	bls.n	800bbac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e0ce      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbac:	4b4b      	ldr	r3, [pc, #300]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0ee      	beq.n	800bb96 <HAL_RCC_OscConfig+0x386>
 800bbb8:	e014      	b.n	800bbe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbba:	f7fd febb 	bl	8009934 <HAL_GetTick>
 800bbbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbc0:	e00a      	b.n	800bbd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc2:	f7fd feb7 	bl	8009934 <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d901      	bls.n	800bbd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e0b8      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbd8:	4b40      	ldr	r3, [pc, #256]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbdc:	f003 0302 	and.w	r3, r3, #2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1ee      	bne.n	800bbc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d105      	bne.n	800bbf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbea:	4b3c      	ldr	r3, [pc, #240]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	4a3b      	ldr	r2, [pc, #236]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bbf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80a4 	beq.w	800bd48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc00:	4b36      	ldr	r3, [pc, #216]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f003 030c 	and.w	r3, r3, #12
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d06b      	beq.n	800bce4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d149      	bne.n	800bca8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc14:	4b31      	ldr	r3, [pc, #196]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a30      	ldr	r2, [pc, #192]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc20:	f7fd fe88 	bl	8009934 <HAL_GetTick>
 800bc24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc26:	e008      	b.n	800bc3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc28:	f7fd fe84 	bl	8009934 <HAL_GetTick>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d901      	bls.n	800bc3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e087      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc3a:	4b28      	ldr	r3, [pc, #160]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1f0      	bne.n	800bc28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	69da      	ldr	r2, [r3, #28]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	019b      	lsls	r3, r3, #6
 800bc56:	431a      	orrs	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5c:	085b      	lsrs	r3, r3, #1
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	041b      	lsls	r3, r3, #16
 800bc62:	431a      	orrs	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	061b      	lsls	r3, r3, #24
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	4a1b      	ldr	r2, [pc, #108]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc74:	4b19      	ldr	r3, [pc, #100]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a18      	ldr	r2, [pc, #96]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc80:	f7fd fe58 	bl	8009934 <HAL_GetTick>
 800bc84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc86:	e008      	b.n	800bc9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc88:	f7fd fe54 	bl	8009934 <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d901      	bls.n	800bc9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800bc96:	2303      	movs	r3, #3
 800bc98:	e057      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc9a:	4b10      	ldr	r3, [pc, #64]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0f0      	beq.n	800bc88 <HAL_RCC_OscConfig+0x478>
 800bca6:	e04f      	b.n	800bd48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bca8:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a0b      	ldr	r2, [pc, #44]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bcae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb4:	f7fd fe3e 	bl	8009934 <HAL_GetTick>
 800bcb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcba:	e008      	b.n	800bcce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcbc:	f7fd fe3a 	bl	8009934 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d901      	bls.n	800bcce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e03d      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcce:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <HAL_RCC_OscConfig+0x4cc>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1f0      	bne.n	800bcbc <HAL_RCC_OscConfig+0x4ac>
 800bcda:	e035      	b.n	800bd48 <HAL_RCC_OscConfig+0x538>
 800bcdc:	40023800 	.word	0x40023800
 800bce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bce4:	4b1b      	ldr	r3, [pc, #108]	; (800bd54 <HAL_RCC_OscConfig+0x544>)
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d028      	beq.n	800bd44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d121      	bne.n	800bd44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d11a      	bne.n	800bd44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bd14:	4013      	ands	r3, r2
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d111      	bne.n	800bd44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d107      	bne.n	800bd44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d001      	beq.n	800bd48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e000      	b.n	800bd4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40023800 	.word	0x40023800

0800bd58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e0d0      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd70:	4b6a      	ldr	r3, [pc, #424]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d910      	bls.n	800bda0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd7e:	4b67      	ldr	r3, [pc, #412]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f023 020f 	bic.w	r2, r3, #15
 800bd86:	4965      	ldr	r1, [pc, #404]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd8e:	4b63      	ldr	r3, [pc, #396]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 030f 	and.w	r3, r3, #15
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d001      	beq.n	800bda0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e0b8      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d020      	beq.n	800bdee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0304 	and.w	r3, r3, #4
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bdb8:	4b59      	ldr	r3, [pc, #356]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	4a58      	ldr	r2, [pc, #352]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bdc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdd0:	4b53      	ldr	r3, [pc, #332]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	4a52      	ldr	r2, [pc, #328]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bdda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bddc:	4b50      	ldr	r3, [pc, #320]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	494d      	ldr	r1, [pc, #308]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bdea:	4313      	orrs	r3, r2
 800bdec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d040      	beq.n	800be7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d107      	bne.n	800be12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be02:	4b47      	ldr	r3, [pc, #284]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d115      	bne.n	800be3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e07f      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d107      	bne.n	800be2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be1a:	4b41      	ldr	r3, [pc, #260]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be22:	2b00      	cmp	r3, #0
 800be24:	d109      	bne.n	800be3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e073      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be2a:	4b3d      	ldr	r3, [pc, #244]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e06b      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be3a:	4b39      	ldr	r3, [pc, #228]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f023 0203 	bic.w	r2, r3, #3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	4936      	ldr	r1, [pc, #216]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be48:	4313      	orrs	r3, r2
 800be4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be4c:	f7fd fd72 	bl	8009934 <HAL_GetTick>
 800be50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be52:	e00a      	b.n	800be6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be54:	f7fd fd6e 	bl	8009934 <HAL_GetTick>
 800be58:	4602      	mov	r2, r0
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be62:	4293      	cmp	r3, r2
 800be64:	d901      	bls.n	800be6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e053      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be6a:	4b2d      	ldr	r3, [pc, #180]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f003 020c 	and.w	r2, r3, #12
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	429a      	cmp	r2, r3
 800be7a:	d1eb      	bne.n	800be54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be7c:	4b27      	ldr	r3, [pc, #156]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d210      	bcs.n	800beac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f023 020f 	bic.w	r2, r3, #15
 800be92:	4922      	ldr	r1, [pc, #136]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	4313      	orrs	r3, r2
 800be98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be9a:	4b20      	ldr	r3, [pc, #128]	; (800bf1c <HAL_RCC_ClockConfig+0x1c4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 030f 	and.w	r3, r3, #15
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d001      	beq.n	800beac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e032      	b.n	800bf12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800beb8:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	4916      	ldr	r1, [pc, #88]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0308 	and.w	r3, r3, #8
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d009      	beq.n	800beea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bed6:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	490e      	ldr	r1, [pc, #56]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800beea:	f000 f821 	bl	800bf30 <HAL_RCC_GetSysClockFreq>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <HAL_RCC_ClockConfig+0x1c8>)
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	091b      	lsrs	r3, r3, #4
 800bef6:	f003 030f 	and.w	r3, r3, #15
 800befa:	490a      	ldr	r1, [pc, #40]	; (800bf24 <HAL_RCC_ClockConfig+0x1cc>)
 800befc:	5ccb      	ldrb	r3, [r1, r3]
 800befe:	fa22 f303 	lsr.w	r3, r2, r3
 800bf02:	4a09      	ldr	r2, [pc, #36]	; (800bf28 <HAL_RCC_ClockConfig+0x1d0>)
 800bf04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <HAL_RCC_ClockConfig+0x1d4>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fd fcce 	bl	80098ac <HAL_InitTick>

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	40023c00 	.word	0x40023c00
 800bf20:	40023800 	.word	0x40023800
 800bf24:	08010ca4 	.word	0x08010ca4
 800bf28:	20000000 	.word	0x20000000
 800bf2c:	20000190 	.word	0x20000190

0800bf30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf34:	b094      	sub	sp, #80	; 0x50
 800bf36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf40:	2300      	movs	r3, #0
 800bf42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf48:	4b79      	ldr	r3, [pc, #484]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	f003 030c 	and.w	r3, r3, #12
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	d00d      	beq.n	800bf70 <HAL_RCC_GetSysClockFreq+0x40>
 800bf54:	2b08      	cmp	r3, #8
 800bf56:	f200 80e1 	bhi.w	800c11c <HAL_RCC_GetSysClockFreq+0x1ec>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_RCC_GetSysClockFreq+0x34>
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d003      	beq.n	800bf6a <HAL_RCC_GetSysClockFreq+0x3a>
 800bf62:	e0db      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf64:	4b73      	ldr	r3, [pc, #460]	; (800c134 <HAL_RCC_GetSysClockFreq+0x204>)
 800bf66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf68:	e0db      	b.n	800c122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf6a:	4b73      	ldr	r3, [pc, #460]	; (800c138 <HAL_RCC_GetSysClockFreq+0x208>)
 800bf6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf6e:	e0d8      	b.n	800c122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf70:	4b6f      	ldr	r3, [pc, #444]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bf7a:	4b6d      	ldr	r3, [pc, #436]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d063      	beq.n	800c04e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf86:	4b6a      	ldr	r3, [pc, #424]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	099b      	lsrs	r3, r3, #6
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf90:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf98:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	f04f 0000 	mov.w	r0, #0
 800bfaa:	f04f 0100 	mov.w	r1, #0
 800bfae:	0159      	lsls	r1, r3, #5
 800bfb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfb4:	0150      	lsls	r0, r2, #5
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4621      	mov	r1, r4
 800bfbc:	1a51      	subs	r1, r2, r1
 800bfbe:	6139      	str	r1, [r7, #16]
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	eb63 0301 	sbc.w	r3, r3, r1
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	f04f 0200 	mov.w	r2, #0
 800bfcc:	f04f 0300 	mov.w	r3, #0
 800bfd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	018b      	lsls	r3, r1, #6
 800bfd8:	4651      	mov	r1, sl
 800bfda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfde:	4651      	mov	r1, sl
 800bfe0:	018a      	lsls	r2, r1, #6
 800bfe2:	4651      	mov	r1, sl
 800bfe4:	ebb2 0801 	subs.w	r8, r2, r1
 800bfe8:	4659      	mov	r1, fp
 800bfea:	eb63 0901 	sbc.w	r9, r3, r1
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c002:	4690      	mov	r8, r2
 800c004:	4699      	mov	r9, r3
 800c006:	4623      	mov	r3, r4
 800c008:	eb18 0303 	adds.w	r3, r8, r3
 800c00c:	60bb      	str	r3, [r7, #8]
 800c00e:	462b      	mov	r3, r5
 800c010:	eb49 0303 	adc.w	r3, r9, r3
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	f04f 0200 	mov.w	r2, #0
 800c01a:	f04f 0300 	mov.w	r3, #0
 800c01e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c022:	4629      	mov	r1, r5
 800c024:	024b      	lsls	r3, r1, #9
 800c026:	4621      	mov	r1, r4
 800c028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c02c:	4621      	mov	r1, r4
 800c02e:	024a      	lsls	r2, r1, #9
 800c030:	4610      	mov	r0, r2
 800c032:	4619      	mov	r1, r3
 800c034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c036:	2200      	movs	r2, #0
 800c038:	62bb      	str	r3, [r7, #40]	; 0x28
 800c03a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c03c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c040:	f7f4 fe1a 	bl	8000c78 <__aeabi_uldivmod>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4613      	mov	r3, r2
 800c04a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c04c:	e058      	b.n	800c100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c04e:	4b38      	ldr	r3, [pc, #224]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	099b      	lsrs	r3, r3, #6
 800c054:	2200      	movs	r2, #0
 800c056:	4618      	mov	r0, r3
 800c058:	4611      	mov	r1, r2
 800c05a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c05e:	623b      	str	r3, [r7, #32]
 800c060:	2300      	movs	r3, #0
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
 800c064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c068:	4642      	mov	r2, r8
 800c06a:	464b      	mov	r3, r9
 800c06c:	f04f 0000 	mov.w	r0, #0
 800c070:	f04f 0100 	mov.w	r1, #0
 800c074:	0159      	lsls	r1, r3, #5
 800c076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c07a:	0150      	lsls	r0, r2, #5
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4641      	mov	r1, r8
 800c082:	ebb2 0a01 	subs.w	sl, r2, r1
 800c086:	4649      	mov	r1, r9
 800c088:	eb63 0b01 	sbc.w	fp, r3, r1
 800c08c:	f04f 0200 	mov.w	r2, #0
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c09c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c0a0:	ebb2 040a 	subs.w	r4, r2, sl
 800c0a4:	eb63 050b 	sbc.w	r5, r3, fp
 800c0a8:	f04f 0200 	mov.w	r2, #0
 800c0ac:	f04f 0300 	mov.w	r3, #0
 800c0b0:	00eb      	lsls	r3, r5, #3
 800c0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0b6:	00e2      	lsls	r2, r4, #3
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	461d      	mov	r5, r3
 800c0bc:	4643      	mov	r3, r8
 800c0be:	18e3      	adds	r3, r4, r3
 800c0c0:	603b      	str	r3, [r7, #0]
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	eb45 0303 	adc.w	r3, r5, r3
 800c0c8:	607b      	str	r3, [r7, #4]
 800c0ca:	f04f 0200 	mov.w	r2, #0
 800c0ce:	f04f 0300 	mov.w	r3, #0
 800c0d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	028b      	lsls	r3, r1, #10
 800c0da:	4621      	mov	r1, r4
 800c0dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	028a      	lsls	r2, r1, #10
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	61fa      	str	r2, [r7, #28]
 800c0f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0f4:	f7f4 fdc0 	bl	8000c78 <__aeabi_uldivmod>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <HAL_RCC_GetSysClockFreq+0x200>)
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	0c1b      	lsrs	r3, r3, #16
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	3301      	adds	r3, #1
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800c110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c114:	fbb2 f3f3 	udiv	r3, r2, r3
 800c118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c11a:	e002      	b.n	800c122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c11c:	4b05      	ldr	r3, [pc, #20]	; (800c134 <HAL_RCC_GetSysClockFreq+0x204>)
 800c11e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c120:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c124:	4618      	mov	r0, r3
 800c126:	3750      	adds	r7, #80	; 0x50
 800c128:	46bd      	mov	sp, r7
 800c12a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c12e:	bf00      	nop
 800c130:	40023800 	.word	0x40023800
 800c134:	00f42400 	.word	0x00f42400
 800c138:	007a1200 	.word	0x007a1200

0800c13c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c140:	4b03      	ldr	r3, [pc, #12]	; (800c150 <HAL_RCC_GetHCLKFreq+0x14>)
 800c142:	681b      	ldr	r3, [r3, #0]
}
 800c144:	4618      	mov	r0, r3
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	20000000 	.word	0x20000000

0800c154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c158:	f7ff fff0 	bl	800c13c <HAL_RCC_GetHCLKFreq>
 800c15c:	4602      	mov	r2, r0
 800c15e:	4b05      	ldr	r3, [pc, #20]	; (800c174 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	0a9b      	lsrs	r3, r3, #10
 800c164:	f003 0307 	and.w	r3, r3, #7
 800c168:	4903      	ldr	r1, [pc, #12]	; (800c178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c16a:	5ccb      	ldrb	r3, [r1, r3]
 800c16c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c170:	4618      	mov	r0, r3
 800c172:	bd80      	pop	{r7, pc}
 800c174:	40023800 	.word	0x40023800
 800c178:	08010cb4 	.word	0x08010cb4

0800c17c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c180:	f7ff ffdc 	bl	800c13c <HAL_RCC_GetHCLKFreq>
 800c184:	4602      	mov	r2, r0
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	0b5b      	lsrs	r3, r3, #13
 800c18c:	f003 0307 	and.w	r3, r3, #7
 800c190:	4903      	ldr	r1, [pc, #12]	; (800c1a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c192:	5ccb      	ldrb	r3, [r1, r3]
 800c194:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c198:	4618      	mov	r0, r3
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	40023800 	.word	0x40023800
 800c1a0:	08010cb4 	.word	0x08010cb4

0800c1a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d012      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1cc:	4b69      	ldr	r3, [pc, #420]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	4a68      	ldr	r2, [pc, #416]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c1d6:	6093      	str	r3, [r2, #8]
 800c1d8:	4b66      	ldr	r3, [pc, #408]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e0:	4964      	ldr	r1, [pc, #400]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d017      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c1fe:	4b5d      	ldr	r3, [pc, #372]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20c:	4959      	ldr	r1, [pc, #356]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c21c:	d101      	bne.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c22a:	2301      	movs	r3, #1
 800c22c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d017      	beq.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c23a:	4b4e      	ldr	r3, [pc, #312]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	494a      	ldr	r1, [pc, #296]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c258:	d101      	bne.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c25a:	2301      	movs	r3, #1
 800c25c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c266:	2301      	movs	r3, #1
 800c268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c276:	2301      	movs	r3, #1
 800c278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 808b 	beq.w	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c288:	4b3a      	ldr	r3, [pc, #232]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28c:	4a39      	ldr	r2, [pc, #228]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c292:	6413      	str	r3, [r2, #64]	; 0x40
 800c294:	4b37      	ldr	r3, [pc, #220]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c29c:	60bb      	str	r3, [r7, #8]
 800c29e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c2a0:	4b35      	ldr	r3, [pc, #212]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a34      	ldr	r2, [pc, #208]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ac:	f7fd fb42 	bl	8009934 <HAL_GetTick>
 800c2b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2b4:	f7fd fb3e 	bl	8009934 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b64      	cmp	r3, #100	; 0x64
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e357      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c2c6:	4b2c      	ldr	r3, [pc, #176]	; (800c378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0f0      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c2d2:	4b28      	ldr	r3, [pc, #160]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d035      	beq.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d02e      	beq.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2f0:	4b20      	ldr	r3, [pc, #128]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c2fa:	4b1e      	ldr	r3, [pc, #120]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fe:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c304:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c306:	4b1b      	ldr	r3, [pc, #108]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c30a:	4a1a      	ldr	r2, [pc, #104]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c30c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c312:	4a18      	ldr	r2, [pc, #96]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c318:	4b16      	ldr	r3, [pc, #88]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b01      	cmp	r3, #1
 800c322:	d114      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c324:	f7fd fb06 	bl	8009934 <HAL_GetTick>
 800c328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c32a:	e00a      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c32c:	f7fd fb02 	bl	8009934 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	f241 3288 	movw	r2, #5000	; 0x1388
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d901      	bls.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e319      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c342:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0ee      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c35a:	d111      	bne.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c35c:	4b05      	ldr	r3, [pc, #20]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c36a:	400b      	ands	r3, r1
 800c36c:	4901      	ldr	r1, [pc, #4]	; (800c374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	608b      	str	r3, [r1, #8]
 800c372:	e00b      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c374:	40023800 	.word	0x40023800
 800c378:	40007000 	.word	0x40007000
 800c37c:	0ffffcff 	.word	0x0ffffcff
 800c380:	4baa      	ldr	r3, [pc, #680]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	4aa9      	ldr	r2, [pc, #676]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c38a:	6093      	str	r3, [r2, #8]
 800c38c:	4ba7      	ldr	r3, [pc, #668]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c38e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c398:	49a4      	ldr	r1, [pc, #656]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0310 	and.w	r3, r3, #16
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d010      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3aa:	4ba0      	ldr	r3, [pc, #640]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3b0:	4a9e      	ldr	r2, [pc, #632]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c3ba:	4b9c      	ldr	r3, [pc, #624]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c4:	4999      	ldr	r1, [pc, #612]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00a      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3d8:	4b94      	ldr	r3, [pc, #592]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e6:	4991      	ldr	r1, [pc, #580]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3fa:	4b8c      	ldr	r3, [pc, #560]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c408:	4988      	ldr	r1, [pc, #544]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c41c:	4b83      	ldr	r3, [pc, #524]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42a:	4980      	ldr	r1, [pc, #512]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c43e:	4b7b      	ldr	r3, [pc, #492]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44c:	4977      	ldr	r1, [pc, #476]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00a      	beq.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c460:	4b72      	ldr	r3, [pc, #456]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c466:	f023 0203 	bic.w	r2, r3, #3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46e:	496f      	ldr	r1, [pc, #444]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c470:	4313      	orrs	r3, r2
 800c472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c482:	4b6a      	ldr	r3, [pc, #424]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c488:	f023 020c 	bic.w	r2, r3, #12
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c490:	4966      	ldr	r1, [pc, #408]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c492:	4313      	orrs	r3, r2
 800c494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00a      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c4a4:	4b61      	ldr	r3, [pc, #388]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b2:	495e      	ldr	r1, [pc, #376]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00a      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c4c6:	4b59      	ldr	r3, [pc, #356]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d4:	4955      	ldr	r1, [pc, #340]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c4e8:	4b50      	ldr	r3, [pc, #320]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f6:	494d      	ldr	r1, [pc, #308]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c50a:	4b48      	ldr	r3, [pc, #288]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c510:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c518:	4944      	ldr	r1, [pc, #272]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00a      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c52c:	4b3f      	ldr	r3, [pc, #252]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c53a:	493c      	ldr	r1, [pc, #240]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c53c:	4313      	orrs	r3, r2
 800c53e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c54e:	4b37      	ldr	r3, [pc, #220]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c55c:	4933      	ldr	r1, [pc, #204]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c55e:	4313      	orrs	r3, r2
 800c560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00a      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c570:	4b2e      	ldr	r3, [pc, #184]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c57e:	492b      	ldr	r1, [pc, #172]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c580:	4313      	orrs	r3, r2
 800c582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d011      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c592:	4b26      	ldr	r3, [pc, #152]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c598:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5a0:	4922      	ldr	r1, [pc, #136]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5b0:	d101      	bne.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0308 	and.w	r3, r3, #8
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5d2:	4b16      	ldr	r3, [pc, #88]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e0:	4912      	ldr	r1, [pc, #72]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c5f4:	4b0d      	ldr	r3, [pc, #52]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c604:	4909      	ldr	r1, [pc, #36]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c606:	4313      	orrs	r3, r2
 800c608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d006      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80d9 	beq.w	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c620:	4b02      	ldr	r3, [pc, #8]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a01      	ldr	r2, [pc, #4]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c62a:	e001      	b.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c62c:	40023800 	.word	0x40023800
 800c630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c632:	f7fd f97f 	bl	8009934 <HAL_GetTick>
 800c636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c638:	e008      	b.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c63a:	f7fd f97b 	bl	8009934 <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b64      	cmp	r3, #100	; 0x64
 800c646:	d901      	bls.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c648:	2303      	movs	r3, #3
 800c64a:	e194      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c64c:	4b6c      	ldr	r3, [pc, #432]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f0      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d021      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d11d      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c66c:	4b64      	ldr	r3, [pc, #400]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c672:	0c1b      	lsrs	r3, r3, #16
 800c674:	f003 0303 	and.w	r3, r3, #3
 800c678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c67a:	4b61      	ldr	r3, [pc, #388]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c680:	0e1b      	lsrs	r3, r3, #24
 800c682:	f003 030f 	and.w	r3, r3, #15
 800c686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	019a      	lsls	r2, r3, #6
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	041b      	lsls	r3, r3, #16
 800c692:	431a      	orrs	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	061b      	lsls	r3, r3, #24
 800c698:	431a      	orrs	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	071b      	lsls	r3, r3, #28
 800c6a0:	4957      	ldr	r1, [pc, #348]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6bc:	d00a      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d02e      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6d2:	d129      	bne.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c6d4:	4b4a      	ldr	r3, [pc, #296]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6da:	0c1b      	lsrs	r3, r3, #16
 800c6dc:	f003 0303 	and.w	r3, r3, #3
 800c6e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c6e2:	4b47      	ldr	r3, [pc, #284]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6e8:	0f1b      	lsrs	r3, r3, #28
 800c6ea:	f003 0307 	and.w	r3, r3, #7
 800c6ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	019a      	lsls	r2, r3, #6
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	041b      	lsls	r3, r3, #16
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	061b      	lsls	r3, r3, #24
 800c702:	431a      	orrs	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	071b      	lsls	r3, r3, #28
 800c708:	493d      	ldr	r1, [pc, #244]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c70a:	4313      	orrs	r3, r2
 800c70c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c710:	4b3b      	ldr	r3, [pc, #236]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c716:	f023 021f 	bic.w	r2, r3, #31
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	3b01      	subs	r3, #1
 800c720:	4937      	ldr	r1, [pc, #220]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c722:	4313      	orrs	r3, r2
 800c724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01d      	beq.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c734:	4b32      	ldr	r3, [pc, #200]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73a:	0e1b      	lsrs	r3, r3, #24
 800c73c:	f003 030f 	and.w	r3, r3, #15
 800c740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c742:	4b2f      	ldr	r3, [pc, #188]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c748:	0f1b      	lsrs	r3, r3, #28
 800c74a:	f003 0307 	and.w	r3, r3, #7
 800c74e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	019a      	lsls	r2, r3, #6
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	041b      	lsls	r3, r3, #16
 800c75c:	431a      	orrs	r2, r3
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	061b      	lsls	r3, r3, #24
 800c762:	431a      	orrs	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	071b      	lsls	r3, r3, #28
 800c768:	4925      	ldr	r1, [pc, #148]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d011      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	019a      	lsls	r2, r3, #6
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	041b      	lsls	r3, r3, #16
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	061b      	lsls	r3, r3, #24
 800c790:	431a      	orrs	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	071b      	lsls	r3, r3, #28
 800c798:	4919      	ldr	r1, [pc, #100]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c79a:	4313      	orrs	r3, r2
 800c79c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7a0:	4b17      	ldr	r3, [pc, #92]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a16      	ldr	r2, [pc, #88]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7ac:	f7fd f8c2 	bl	8009934 <HAL_GetTick>
 800c7b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7b2:	e008      	b.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c7b4:	f7fd f8be 	bl	8009934 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2b64      	cmp	r3, #100	; 0x64
 800c7c0:	d901      	bls.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e0d7      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7c6:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0f0      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	f040 80cd 	bne.w	800c974 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c7da:	4b09      	ldr	r3, [pc, #36]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a08      	ldr	r2, [pc, #32]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c7e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7e6:	f7fd f8a5 	bl	8009934 <HAL_GetTick>
 800c7ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7ec:	e00a      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c7ee:	f7fd f8a1 	bl	8009934 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	2b64      	cmp	r3, #100	; 0x64
 800c7fa:	d903      	bls.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e0ba      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c804:	4b5e      	ldr	r3, [pc, #376]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c80c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c810:	d0ed      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d02e      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c836:	2b00      	cmp	r3, #0
 800c838:	d12a      	bne.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c83a:	4b51      	ldr	r3, [pc, #324]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c840:	0c1b      	lsrs	r3, r3, #16
 800c842:	f003 0303 	and.w	r3, r3, #3
 800c846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c848:	4b4d      	ldr	r3, [pc, #308]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c84e:	0f1b      	lsrs	r3, r3, #28
 800c850:	f003 0307 	and.w	r3, r3, #7
 800c854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	019a      	lsls	r2, r3, #6
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	041b      	lsls	r3, r3, #16
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	061b      	lsls	r3, r3, #24
 800c868:	431a      	orrs	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	071b      	lsls	r3, r3, #28
 800c86e:	4944      	ldr	r1, [pc, #272]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c870:	4313      	orrs	r3, r2
 800c872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c876:	4b42      	ldr	r3, [pc, #264]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c87c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c884:	3b01      	subs	r3, #1
 800c886:	021b      	lsls	r3, r3, #8
 800c888:	493d      	ldr	r1, [pc, #244]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c88a:	4313      	orrs	r3, r2
 800c88c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d022      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a4:	d11d      	bne.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8a6:	4b36      	ldr	r3, [pc, #216]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ac:	0e1b      	lsrs	r3, r3, #24
 800c8ae:	f003 030f 	and.w	r3, r3, #15
 800c8b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c8b4:	4b32      	ldr	r3, [pc, #200]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ba:	0f1b      	lsrs	r3, r3, #28
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	019a      	lsls	r2, r3, #6
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	041b      	lsls	r3, r3, #16
 800c8ce:	431a      	orrs	r2, r3
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	061b      	lsls	r3, r3, #24
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	071b      	lsls	r3, r3, #28
 800c8da:	4929      	ldr	r1, [pc, #164]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d028      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8ee:	4b24      	ldr	r3, [pc, #144]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f4:	0e1b      	lsrs	r3, r3, #24
 800c8f6:	f003 030f 	and.w	r3, r3, #15
 800c8fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c8fc:	4b20      	ldr	r3, [pc, #128]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c902:	0c1b      	lsrs	r3, r3, #16
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	019a      	lsls	r2, r3, #6
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	431a      	orrs	r2, r3
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	061b      	lsls	r3, r3, #24
 800c91a:	431a      	orrs	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	69db      	ldr	r3, [r3, #28]
 800c920:	071b      	lsls	r3, r3, #28
 800c922:	4917      	ldr	r1, [pc, #92]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c924:	4313      	orrs	r3, r2
 800c926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c92a:	4b15      	ldr	r3, [pc, #84]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c938:	4911      	ldr	r1, [pc, #68]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c940:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a0e      	ldr	r2, [pc, #56]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c94a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c94c:	f7fc fff2 	bl	8009934 <HAL_GetTick>
 800c950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c952:	e008      	b.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c954:	f7fc ffee 	bl	8009934 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b64      	cmp	r3, #100	; 0x64
 800c960:	d901      	bls.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e007      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c966:	4b06      	ldr	r3, [pc, #24]	; (800c980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c96e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c972:	d1ef      	bne.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	40023800 	.word	0x40023800

0800c984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e040      	b.n	800ca18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d106      	bne.n	800c9ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f83a 	bl	800ca20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2224      	movs	r2, #36	; 0x24
 800c9b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f022 0201 	bic.w	r2, r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f8ba 	bl	800cb3c <UART_SetConfig>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d101      	bne.n	800c9d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e022      	b.n	800ca18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fb12 	bl	800d004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	689a      	ldr	r2, [r3, #8]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f042 0201 	orr.w	r2, r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fb99 	bl	800d148 <UART_CheckIdleState>
 800ca16:	4603      	mov	r3, r0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08a      	sub	sp, #40	; 0x28
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	4613      	mov	r3, r2
 800ca42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	d171      	bne.n	800cb30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <HAL_UART_Transmit+0x24>
 800ca52:	88fb      	ldrh	r3, [r7, #6]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e06a      	b.n	800cb32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2221      	movs	r2, #33	; 0x21
 800ca68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca6a:	f7fc ff63 	bl	8009934 <HAL_GetTick>
 800ca6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	88fa      	ldrh	r2, [r7, #6]
 800ca74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	88fa      	ldrh	r2, [r7, #6]
 800ca7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca88:	d108      	bne.n	800ca9c <HAL_UART_Transmit+0x68>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d104      	bne.n	800ca9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	61bb      	str	r3, [r7, #24]
 800ca9a:	e003      	b.n	800caa4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800caa4:	e02c      	b.n	800cb00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2200      	movs	r2, #0
 800caae:	2180      	movs	r1, #128	; 0x80
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f000 fb80 	bl	800d1b6 <UART_WaitOnFlagUntilTimeout>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800cabc:	2303      	movs	r3, #3
 800cabe:	e038      	b.n	800cb32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10b      	bne.n	800cade <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	3302      	adds	r3, #2
 800cada:	61bb      	str	r3, [r7, #24]
 800cadc:	e007      	b.n	800caee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	3301      	adds	r3, #1
 800caec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	3b01      	subs	r3, #1
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1cc      	bne.n	800caa6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	2200      	movs	r2, #0
 800cb14:	2140      	movs	r1, #64	; 0x40
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 fb4d 	bl	800d1b6 <UART_WaitOnFlagUntilTimeout>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e005      	b.n	800cb32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2220      	movs	r2, #32
 800cb2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e000      	b.n	800cb32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cb30:	2302      	movs	r3, #2
  }
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3720      	adds	r7, #32
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689a      	ldr	r2, [r3, #8]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	431a      	orrs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	4ba6      	ldr	r3, [pc, #664]	; (800ce00 <UART_SetConfig+0x2c4>)
 800cb68:	4013      	ands	r3, r2
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	6812      	ldr	r2, [r2, #0]
 800cb6e:	6979      	ldr	r1, [r7, #20]
 800cb70:	430b      	orrs	r3, r1
 800cb72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a1b      	ldr	r3, [r3, #32]
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a94      	ldr	r2, [pc, #592]	; (800ce04 <UART_SetConfig+0x2c8>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d120      	bne.n	800cbfa <UART_SetConfig+0xbe>
 800cbb8:	4b93      	ldr	r3, [pc, #588]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbbe:	f003 0303 	and.w	r3, r3, #3
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d816      	bhi.n	800cbf4 <UART_SetConfig+0xb8>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <UART_SetConfig+0x90>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbdd 	.word	0x0800cbdd
 800cbd0:	0800cbe9 	.word	0x0800cbe9
 800cbd4:	0800cbe3 	.word	0x0800cbe3
 800cbd8:	0800cbef 	.word	0x0800cbef
 800cbdc:	2301      	movs	r3, #1
 800cbde:	77fb      	strb	r3, [r7, #31]
 800cbe0:	e150      	b.n	800ce84 <UART_SetConfig+0x348>
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	77fb      	strb	r3, [r7, #31]
 800cbe6:	e14d      	b.n	800ce84 <UART_SetConfig+0x348>
 800cbe8:	2304      	movs	r3, #4
 800cbea:	77fb      	strb	r3, [r7, #31]
 800cbec:	e14a      	b.n	800ce84 <UART_SetConfig+0x348>
 800cbee:	2308      	movs	r3, #8
 800cbf0:	77fb      	strb	r3, [r7, #31]
 800cbf2:	e147      	b.n	800ce84 <UART_SetConfig+0x348>
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	77fb      	strb	r3, [r7, #31]
 800cbf8:	e144      	b.n	800ce84 <UART_SetConfig+0x348>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a83      	ldr	r2, [pc, #524]	; (800ce0c <UART_SetConfig+0x2d0>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d132      	bne.n	800cc6a <UART_SetConfig+0x12e>
 800cc04:	4b80      	ldr	r3, [pc, #512]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc0a:	f003 030c 	and.w	r3, r3, #12
 800cc0e:	2b0c      	cmp	r3, #12
 800cc10:	d828      	bhi.n	800cc64 <UART_SetConfig+0x128>
 800cc12:	a201      	add	r2, pc, #4	; (adr r2, 800cc18 <UART_SetConfig+0xdc>)
 800cc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc18:	0800cc4d 	.word	0x0800cc4d
 800cc1c:	0800cc65 	.word	0x0800cc65
 800cc20:	0800cc65 	.word	0x0800cc65
 800cc24:	0800cc65 	.word	0x0800cc65
 800cc28:	0800cc59 	.word	0x0800cc59
 800cc2c:	0800cc65 	.word	0x0800cc65
 800cc30:	0800cc65 	.word	0x0800cc65
 800cc34:	0800cc65 	.word	0x0800cc65
 800cc38:	0800cc53 	.word	0x0800cc53
 800cc3c:	0800cc65 	.word	0x0800cc65
 800cc40:	0800cc65 	.word	0x0800cc65
 800cc44:	0800cc65 	.word	0x0800cc65
 800cc48:	0800cc5f 	.word	0x0800cc5f
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	77fb      	strb	r3, [r7, #31]
 800cc50:	e118      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc52:	2302      	movs	r3, #2
 800cc54:	77fb      	strb	r3, [r7, #31]
 800cc56:	e115      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	77fb      	strb	r3, [r7, #31]
 800cc5c:	e112      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc5e:	2308      	movs	r3, #8
 800cc60:	77fb      	strb	r3, [r7, #31]
 800cc62:	e10f      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc64:	2310      	movs	r3, #16
 800cc66:	77fb      	strb	r3, [r7, #31]
 800cc68:	e10c      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a68      	ldr	r2, [pc, #416]	; (800ce10 <UART_SetConfig+0x2d4>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d120      	bne.n	800ccb6 <UART_SetConfig+0x17a>
 800cc74:	4b64      	ldr	r3, [pc, #400]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc7e:	2b30      	cmp	r3, #48	; 0x30
 800cc80:	d013      	beq.n	800ccaa <UART_SetConfig+0x16e>
 800cc82:	2b30      	cmp	r3, #48	; 0x30
 800cc84:	d814      	bhi.n	800ccb0 <UART_SetConfig+0x174>
 800cc86:	2b20      	cmp	r3, #32
 800cc88:	d009      	beq.n	800cc9e <UART_SetConfig+0x162>
 800cc8a:	2b20      	cmp	r3, #32
 800cc8c:	d810      	bhi.n	800ccb0 <UART_SetConfig+0x174>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <UART_SetConfig+0x15c>
 800cc92:	2b10      	cmp	r3, #16
 800cc94:	d006      	beq.n	800cca4 <UART_SetConfig+0x168>
 800cc96:	e00b      	b.n	800ccb0 <UART_SetConfig+0x174>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	77fb      	strb	r3, [r7, #31]
 800cc9c:	e0f2      	b.n	800ce84 <UART_SetConfig+0x348>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	77fb      	strb	r3, [r7, #31]
 800cca2:	e0ef      	b.n	800ce84 <UART_SetConfig+0x348>
 800cca4:	2304      	movs	r3, #4
 800cca6:	77fb      	strb	r3, [r7, #31]
 800cca8:	e0ec      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccaa:	2308      	movs	r3, #8
 800ccac:	77fb      	strb	r3, [r7, #31]
 800ccae:	e0e9      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	77fb      	strb	r3, [r7, #31]
 800ccb4:	e0e6      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a56      	ldr	r2, [pc, #344]	; (800ce14 <UART_SetConfig+0x2d8>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d120      	bne.n	800cd02 <UART_SetConfig+0x1c6>
 800ccc0:	4b51      	ldr	r3, [pc, #324]	; (800ce08 <UART_SetConfig+0x2cc>)
 800ccc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccca:	2bc0      	cmp	r3, #192	; 0xc0
 800cccc:	d013      	beq.n	800ccf6 <UART_SetConfig+0x1ba>
 800ccce:	2bc0      	cmp	r3, #192	; 0xc0
 800ccd0:	d814      	bhi.n	800ccfc <UART_SetConfig+0x1c0>
 800ccd2:	2b80      	cmp	r3, #128	; 0x80
 800ccd4:	d009      	beq.n	800ccea <UART_SetConfig+0x1ae>
 800ccd6:	2b80      	cmp	r3, #128	; 0x80
 800ccd8:	d810      	bhi.n	800ccfc <UART_SetConfig+0x1c0>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <UART_SetConfig+0x1a8>
 800ccde:	2b40      	cmp	r3, #64	; 0x40
 800cce0:	d006      	beq.n	800ccf0 <UART_SetConfig+0x1b4>
 800cce2:	e00b      	b.n	800ccfc <UART_SetConfig+0x1c0>
 800cce4:	2300      	movs	r3, #0
 800cce6:	77fb      	strb	r3, [r7, #31]
 800cce8:	e0cc      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccea:	2302      	movs	r3, #2
 800ccec:	77fb      	strb	r3, [r7, #31]
 800ccee:	e0c9      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccf0:	2304      	movs	r3, #4
 800ccf2:	77fb      	strb	r3, [r7, #31]
 800ccf4:	e0c6      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	77fb      	strb	r3, [r7, #31]
 800ccfa:	e0c3      	b.n	800ce84 <UART_SetConfig+0x348>
 800ccfc:	2310      	movs	r3, #16
 800ccfe:	77fb      	strb	r3, [r7, #31]
 800cd00:	e0c0      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a44      	ldr	r2, [pc, #272]	; (800ce18 <UART_SetConfig+0x2dc>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d125      	bne.n	800cd58 <UART_SetConfig+0x21c>
 800cd0c:	4b3e      	ldr	r3, [pc, #248]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd1a:	d017      	beq.n	800cd4c <UART_SetConfig+0x210>
 800cd1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd20:	d817      	bhi.n	800cd52 <UART_SetConfig+0x216>
 800cd22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd26:	d00b      	beq.n	800cd40 <UART_SetConfig+0x204>
 800cd28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd2c:	d811      	bhi.n	800cd52 <UART_SetConfig+0x216>
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <UART_SetConfig+0x1fe>
 800cd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd36:	d006      	beq.n	800cd46 <UART_SetConfig+0x20a>
 800cd38:	e00b      	b.n	800cd52 <UART_SetConfig+0x216>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	77fb      	strb	r3, [r7, #31]
 800cd3e:	e0a1      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd40:	2302      	movs	r3, #2
 800cd42:	77fb      	strb	r3, [r7, #31]
 800cd44:	e09e      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd46:	2304      	movs	r3, #4
 800cd48:	77fb      	strb	r3, [r7, #31]
 800cd4a:	e09b      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd4c:	2308      	movs	r3, #8
 800cd4e:	77fb      	strb	r3, [r7, #31]
 800cd50:	e098      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd52:	2310      	movs	r3, #16
 800cd54:	77fb      	strb	r3, [r7, #31]
 800cd56:	e095      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a2f      	ldr	r2, [pc, #188]	; (800ce1c <UART_SetConfig+0x2e0>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d125      	bne.n	800cdae <UART_SetConfig+0x272>
 800cd62:	4b29      	ldr	r3, [pc, #164]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd70:	d017      	beq.n	800cda2 <UART_SetConfig+0x266>
 800cd72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd76:	d817      	bhi.n	800cda8 <UART_SetConfig+0x26c>
 800cd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd7c:	d00b      	beq.n	800cd96 <UART_SetConfig+0x25a>
 800cd7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd82:	d811      	bhi.n	800cda8 <UART_SetConfig+0x26c>
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <UART_SetConfig+0x254>
 800cd88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd8c:	d006      	beq.n	800cd9c <UART_SetConfig+0x260>
 800cd8e:	e00b      	b.n	800cda8 <UART_SetConfig+0x26c>
 800cd90:	2301      	movs	r3, #1
 800cd92:	77fb      	strb	r3, [r7, #31]
 800cd94:	e076      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd96:	2302      	movs	r3, #2
 800cd98:	77fb      	strb	r3, [r7, #31]
 800cd9a:	e073      	b.n	800ce84 <UART_SetConfig+0x348>
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	77fb      	strb	r3, [r7, #31]
 800cda0:	e070      	b.n	800ce84 <UART_SetConfig+0x348>
 800cda2:	2308      	movs	r3, #8
 800cda4:	77fb      	strb	r3, [r7, #31]
 800cda6:	e06d      	b.n	800ce84 <UART_SetConfig+0x348>
 800cda8:	2310      	movs	r3, #16
 800cdaa:	77fb      	strb	r3, [r7, #31]
 800cdac:	e06a      	b.n	800ce84 <UART_SetConfig+0x348>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a1b      	ldr	r2, [pc, #108]	; (800ce20 <UART_SetConfig+0x2e4>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d138      	bne.n	800ce2a <UART_SetConfig+0x2ee>
 800cdb8:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cdba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cdc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdc6:	d017      	beq.n	800cdf8 <UART_SetConfig+0x2bc>
 800cdc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdcc:	d82a      	bhi.n	800ce24 <UART_SetConfig+0x2e8>
 800cdce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdd2:	d00b      	beq.n	800cdec <UART_SetConfig+0x2b0>
 800cdd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdd8:	d824      	bhi.n	800ce24 <UART_SetConfig+0x2e8>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <UART_SetConfig+0x2aa>
 800cdde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde2:	d006      	beq.n	800cdf2 <UART_SetConfig+0x2b6>
 800cde4:	e01e      	b.n	800ce24 <UART_SetConfig+0x2e8>
 800cde6:	2300      	movs	r3, #0
 800cde8:	77fb      	strb	r3, [r7, #31]
 800cdea:	e04b      	b.n	800ce84 <UART_SetConfig+0x348>
 800cdec:	2302      	movs	r3, #2
 800cdee:	77fb      	strb	r3, [r7, #31]
 800cdf0:	e048      	b.n	800ce84 <UART_SetConfig+0x348>
 800cdf2:	2304      	movs	r3, #4
 800cdf4:	77fb      	strb	r3, [r7, #31]
 800cdf6:	e045      	b.n	800ce84 <UART_SetConfig+0x348>
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	77fb      	strb	r3, [r7, #31]
 800cdfc:	e042      	b.n	800ce84 <UART_SetConfig+0x348>
 800cdfe:	bf00      	nop
 800ce00:	efff69f3 	.word	0xefff69f3
 800ce04:	40011000 	.word	0x40011000
 800ce08:	40023800 	.word	0x40023800
 800ce0c:	40004400 	.word	0x40004400
 800ce10:	40004800 	.word	0x40004800
 800ce14:	40004c00 	.word	0x40004c00
 800ce18:	40005000 	.word	0x40005000
 800ce1c:	40011400 	.word	0x40011400
 800ce20:	40007800 	.word	0x40007800
 800ce24:	2310      	movs	r3, #16
 800ce26:	77fb      	strb	r3, [r7, #31]
 800ce28:	e02c      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a72      	ldr	r2, [pc, #456]	; (800cff8 <UART_SetConfig+0x4bc>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d125      	bne.n	800ce80 <UART_SetConfig+0x344>
 800ce34:	4b71      	ldr	r3, [pc, #452]	; (800cffc <UART_SetConfig+0x4c0>)
 800ce36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce42:	d017      	beq.n	800ce74 <UART_SetConfig+0x338>
 800ce44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce48:	d817      	bhi.n	800ce7a <UART_SetConfig+0x33e>
 800ce4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce4e:	d00b      	beq.n	800ce68 <UART_SetConfig+0x32c>
 800ce50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce54:	d811      	bhi.n	800ce7a <UART_SetConfig+0x33e>
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <UART_SetConfig+0x326>
 800ce5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce5e:	d006      	beq.n	800ce6e <UART_SetConfig+0x332>
 800ce60:	e00b      	b.n	800ce7a <UART_SetConfig+0x33e>
 800ce62:	2300      	movs	r3, #0
 800ce64:	77fb      	strb	r3, [r7, #31]
 800ce66:	e00d      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce68:	2302      	movs	r3, #2
 800ce6a:	77fb      	strb	r3, [r7, #31]
 800ce6c:	e00a      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce6e:	2304      	movs	r3, #4
 800ce70:	77fb      	strb	r3, [r7, #31]
 800ce72:	e007      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce74:	2308      	movs	r3, #8
 800ce76:	77fb      	strb	r3, [r7, #31]
 800ce78:	e004      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce7a:	2310      	movs	r3, #16
 800ce7c:	77fb      	strb	r3, [r7, #31]
 800ce7e:	e001      	b.n	800ce84 <UART_SetConfig+0x348>
 800ce80:	2310      	movs	r3, #16
 800ce82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce8c:	d15b      	bne.n	800cf46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ce8e:	7ffb      	ldrb	r3, [r7, #31]
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d828      	bhi.n	800cee6 <UART_SetConfig+0x3aa>
 800ce94:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <UART_SetConfig+0x360>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec9 	.word	0x0800cec9
 800cea4:	0800ced1 	.word	0x0800ced1
 800cea8:	0800cee7 	.word	0x0800cee7
 800ceac:	0800ced7 	.word	0x0800ced7
 800ceb0:	0800cee7 	.word	0x0800cee7
 800ceb4:	0800cee7 	.word	0x0800cee7
 800ceb8:	0800cee7 	.word	0x0800cee7
 800cebc:	0800cedf 	.word	0x0800cedf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec0:	f7ff f948 	bl	800c154 <HAL_RCC_GetPCLK1Freq>
 800cec4:	61b8      	str	r0, [r7, #24]
        break;
 800cec6:	e013      	b.n	800cef0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cec8:	f7ff f958 	bl	800c17c <HAL_RCC_GetPCLK2Freq>
 800cecc:	61b8      	str	r0, [r7, #24]
        break;
 800cece:	e00f      	b.n	800cef0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ced0:	4b4b      	ldr	r3, [pc, #300]	; (800d000 <UART_SetConfig+0x4c4>)
 800ced2:	61bb      	str	r3, [r7, #24]
        break;
 800ced4:	e00c      	b.n	800cef0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ced6:	f7ff f82b 	bl	800bf30 <HAL_RCC_GetSysClockFreq>
 800ceda:	61b8      	str	r0, [r7, #24]
        break;
 800cedc:	e008      	b.n	800cef0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cee2:	61bb      	str	r3, [r7, #24]
        break;
 800cee4:	e004      	b.n	800cef0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	77bb      	strb	r3, [r7, #30]
        break;
 800ceee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d074      	beq.n	800cfe0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	005a      	lsls	r2, r3, #1
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	085b      	lsrs	r3, r3, #1
 800cf00:	441a      	add	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	2b0f      	cmp	r3, #15
 800cf10:	d916      	bls.n	800cf40 <UART_SetConfig+0x404>
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf18:	d212      	bcs.n	800cf40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	f023 030f 	bic.w	r3, r3, #15
 800cf22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	085b      	lsrs	r3, r3, #1
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	f003 0307 	and.w	r3, r3, #7
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	89fb      	ldrh	r3, [r7, #14]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	89fa      	ldrh	r2, [r7, #14]
 800cf3c:	60da      	str	r2, [r3, #12]
 800cf3e:	e04f      	b.n	800cfe0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	77bb      	strb	r3, [r7, #30]
 800cf44:	e04c      	b.n	800cfe0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf46:	7ffb      	ldrb	r3, [r7, #31]
 800cf48:	2b08      	cmp	r3, #8
 800cf4a:	d828      	bhi.n	800cf9e <UART_SetConfig+0x462>
 800cf4c:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <UART_SetConfig+0x418>)
 800cf4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf52:	bf00      	nop
 800cf54:	0800cf79 	.word	0x0800cf79
 800cf58:	0800cf81 	.word	0x0800cf81
 800cf5c:	0800cf89 	.word	0x0800cf89
 800cf60:	0800cf9f 	.word	0x0800cf9f
 800cf64:	0800cf8f 	.word	0x0800cf8f
 800cf68:	0800cf9f 	.word	0x0800cf9f
 800cf6c:	0800cf9f 	.word	0x0800cf9f
 800cf70:	0800cf9f 	.word	0x0800cf9f
 800cf74:	0800cf97 	.word	0x0800cf97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf78:	f7ff f8ec 	bl	800c154 <HAL_RCC_GetPCLK1Freq>
 800cf7c:	61b8      	str	r0, [r7, #24]
        break;
 800cf7e:	e013      	b.n	800cfa8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf80:	f7ff f8fc 	bl	800c17c <HAL_RCC_GetPCLK2Freq>
 800cf84:	61b8      	str	r0, [r7, #24]
        break;
 800cf86:	e00f      	b.n	800cfa8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf88:	4b1d      	ldr	r3, [pc, #116]	; (800d000 <UART_SetConfig+0x4c4>)
 800cf8a:	61bb      	str	r3, [r7, #24]
        break;
 800cf8c:	e00c      	b.n	800cfa8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf8e:	f7fe ffcf 	bl	800bf30 <HAL_RCC_GetSysClockFreq>
 800cf92:	61b8      	str	r0, [r7, #24]
        break;
 800cf94:	e008      	b.n	800cfa8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf9a:	61bb      	str	r3, [r7, #24]
        break;
 800cf9c:	e004      	b.n	800cfa8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	77bb      	strb	r3, [r7, #30]
        break;
 800cfa6:	bf00      	nop
    }

    if (pclk != 0U)
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d018      	beq.n	800cfe0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	085a      	lsrs	r2, r3, #1
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	441a      	add	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2b0f      	cmp	r3, #15
 800cfc6:	d909      	bls.n	800cfdc <UART_SetConfig+0x4a0>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfce:	d205      	bcs.n	800cfdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60da      	str	r2, [r3, #12]
 800cfda:	e001      	b.n	800cfe0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cfec:	7fbb      	ldrb	r3, [r7, #30]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40007c00 	.word	0x40007c00
 800cffc:	40023800 	.word	0x40023800
 800d000:	00f42400 	.word	0x00f42400

0800d004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	f003 0302 	and.w	r3, r3, #2
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	430a      	orrs	r2, r1
 800d04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d054:	f003 0304 	and.w	r3, r3, #4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00a      	beq.n	800d072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	430a      	orrs	r2, r1
 800d070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d076:	f003 0308 	and.w	r3, r3, #8
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	430a      	orrs	r2, r1
 800d092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	f003 0310 	and.w	r3, r3, #16
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00a      	beq.n	800d0b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ba:	f003 0320 	and.w	r3, r3, #32
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00a      	beq.n	800d0d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01a      	beq.n	800d11a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	430a      	orrs	r2, r1
 800d0f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d102:	d10a      	bne.n	800d11a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	430a      	orrs	r2, r1
 800d118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00a      	beq.n	800d13c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	430a      	orrs	r2, r1
 800d13a:	605a      	str	r2, [r3, #4]
  }
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d158:	f7fc fbec 	bl	8009934 <HAL_GetTick>
 800d15c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0308 	and.w	r3, r3, #8
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d10e      	bne.n	800d18a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d16c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f81b 	bl	800d1b6 <UART_WaitOnFlagUntilTimeout>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d001      	beq.n	800d18a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d186:	2303      	movs	r3, #3
 800d188:	e011      	b.n	800d1ae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2220      	movs	r2, #32
 800d18e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2220      	movs	r2, #32
 800d194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b09c      	sub	sp, #112	; 0x70
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	60f8      	str	r0, [r7, #12]
 800d1be:	60b9      	str	r1, [r7, #8]
 800d1c0:	603b      	str	r3, [r7, #0]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1c6:	e0a7      	b.n	800d318 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ce:	f000 80a3 	beq.w	800d318 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1d2:	f7fc fbaf 	bl	8009934 <HAL_GetTick>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d302      	bcc.n	800d1e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d1e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d13f      	bne.n	800d268 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f0:	e853 3f00 	ldrex	r3, [r3]
 800d1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1fc:	667b      	str	r3, [r7, #100]	; 0x64
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	461a      	mov	r2, r3
 800d204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d206:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d208:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d20c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e6      	bne.n	800d1e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3308      	adds	r3, #8
 800d220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d224:	e853 3f00 	ldrex	r3, [r3]
 800d228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22c:	f023 0301 	bic.w	r3, r3, #1
 800d230:	663b      	str	r3, [r7, #96]	; 0x60
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3308      	adds	r3, #8
 800d238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d23a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d23c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d242:	e841 2300 	strex	r3, r2, [r1]
 800d246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1e5      	bne.n	800d21a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2220      	movs	r2, #32
 800d252:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2220      	movs	r2, #32
 800d258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800d264:	2303      	movs	r3, #3
 800d266:	e068      	b.n	800d33a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 0304 	and.w	r3, r3, #4
 800d272:	2b00      	cmp	r3, #0
 800d274:	d050      	beq.n	800d318 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d284:	d148      	bne.n	800d318 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d28e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ae:	637b      	str	r3, [r7, #52]	; 0x34
 800d2b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2b6:	e841 2300 	strex	r3, r2, [r1]
 800d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e6      	bne.n	800d290 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	e853 3f00 	ldrex	r3, [r3]
 800d2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f023 0301 	bic.w	r3, r3, #1
 800d2d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	3308      	adds	r3, #8
 800d2e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2e2:	623a      	str	r2, [r7, #32]
 800d2e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e6:	69f9      	ldr	r1, [r7, #28]
 800d2e8:	6a3a      	ldr	r2, [r7, #32]
 800d2ea:	e841 2300 	strex	r3, r2, [r1]
 800d2ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1e5      	bne.n	800d2c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2220      	movs	r2, #32
 800d308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e010      	b.n	800d33a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	69da      	ldr	r2, [r3, #28]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	4013      	ands	r3, r2
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	429a      	cmp	r2, r3
 800d326:	bf0c      	ite	eq
 800d328:	2301      	moveq	r3, #1
 800d32a:	2300      	movne	r3, #0
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	461a      	mov	r2, r3
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	429a      	cmp	r2, r3
 800d334:	f43f af48 	beq.w	800d1c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3770      	adds	r7, #112	; 0x70
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d344:	b084      	sub	sp, #16
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	f107 001c 	add.w	r0, r7, #28
 800d352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d120      	bne.n	800d39e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	4b20      	ldr	r3, [pc, #128]	; (800d3f0 <USB_CoreInit+0xac>)
 800d36e:	4013      	ands	r3, r2
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d105      	bne.n	800d392 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fa96 	bl	800d8c4 <USB_CoreReset>
 800d398:	4603      	mov	r3, r0
 800d39a:	73fb      	strb	r3, [r7, #15]
 800d39c:	e010      	b.n	800d3c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fa8a 	bl	800d8c4 <USB_CoreReset>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d10b      	bne.n	800d3de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	f043 0206 	orr.w	r2, r3, #6
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	f043 0220 	orr.w	r2, r3, #32
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3ea:	b004      	add	sp, #16
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	ffbdffbf 	.word	0xffbdffbf

0800d3f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	f023 0201 	bic.w	r2, r3, #1
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	370c      	adds	r7, #12
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d422:	2300      	movs	r3, #0
 800d424:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d432:	78fb      	ldrb	r3, [r7, #3]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d115      	bne.n	800d464 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d444:	2001      	movs	r0, #1
 800d446:	f7fc fa81 	bl	800994c <HAL_Delay>
      ms++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fa29 	bl	800d8a8 <USB_GetMode>
 800d456:	4603      	mov	r3, r0
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d01e      	beq.n	800d49a <USB_SetCurrentMode+0x84>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b31      	cmp	r3, #49	; 0x31
 800d460:	d9f0      	bls.n	800d444 <USB_SetCurrentMode+0x2e>
 800d462:	e01a      	b.n	800d49a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d464:	78fb      	ldrb	r3, [r7, #3]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d115      	bne.n	800d496 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d476:	2001      	movs	r0, #1
 800d478:	f7fc fa68 	bl	800994c <HAL_Delay>
      ms++;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3301      	adds	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fa10 	bl	800d8a8 <USB_GetMode>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <USB_SetCurrentMode+0x84>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b31      	cmp	r3, #49	; 0x31
 800d492:	d9f0      	bls.n	800d476 <USB_SetCurrentMode+0x60>
 800d494:	e001      	b.n	800d49a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e005      	b.n	800d4a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b32      	cmp	r3, #50	; 0x32
 800d49e:	d101      	bne.n	800d4a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e000      	b.n	800d4a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
	...

0800d4b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b086      	sub	sp, #24
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d4be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	e009      	b.n	800d4e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	3340      	adds	r3, #64	; 0x40
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	2200      	movs	r2, #0
 800d4dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b0e      	cmp	r3, #14
 800d4e8:	d9f2      	bls.n	800d4d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d11c      	bne.n	800d52a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4fe:	f043 0302 	orr.w	r3, r3, #2
 800d502:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	e005      	b.n	800d536 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d53c:	461a      	mov	r2, r3
 800d53e:	2300      	movs	r3, #0
 800d540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d548:	4619      	mov	r1, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d550:	461a      	mov	r2, r3
 800d552:	680b      	ldr	r3, [r1, #0]
 800d554:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d10c      	bne.n	800d576 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d104      	bne.n	800d56c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d562:	2100      	movs	r1, #0
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f965 	bl	800d834 <USB_SetDevSpeed>
 800d56a:	e008      	b.n	800d57e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d56c:	2101      	movs	r1, #1
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f960 	bl	800d834 <USB_SetDevSpeed>
 800d574:	e003      	b.n	800d57e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d576:	2103      	movs	r1, #3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 f95b 	bl	800d834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d57e:	2110      	movs	r1, #16
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f8f3 	bl	800d76c <USB_FlushTxFifo>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f91f 	bl	800d7d4 <USB_FlushRxFifo>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5be:	461a      	mov	r2, r3
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	613b      	str	r3, [r7, #16]
 800d5c8:	e043      	b.n	800d652 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5e0:	d118      	bne.n	800d614 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	015a      	lsls	r2, r3, #5
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d5fa:	6013      	str	r3, [r2, #0]
 800d5fc:	e013      	b.n	800d626 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4413      	add	r3, r2
 800d606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60a:	461a      	mov	r2, r3
 800d60c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	e008      	b.n	800d626 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d620:	461a      	mov	r2, r3
 800d622:	2300      	movs	r3, #0
 800d624:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	015a      	lsls	r2, r3, #5
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	4413      	add	r3, r2
 800d62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d632:	461a      	mov	r2, r3
 800d634:	2300      	movs	r3, #0
 800d636:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	015a      	lsls	r2, r3, #5
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d644:	461a      	mov	r2, r3
 800d646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d64a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	3301      	adds	r3, #1
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	429a      	cmp	r2, r3
 800d658:	d3b7      	bcc.n	800d5ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d65a:	2300      	movs	r3, #0
 800d65c:	613b      	str	r3, [r7, #16]
 800d65e:	e043      	b.n	800d6e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4413      	add	r3, r2
 800d668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d676:	d118      	bne.n	800d6aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10a      	bne.n	800d694 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	4413      	add	r3, r2
 800d686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68a:	461a      	mov	r2, r3
 800d68c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	e013      	b.n	800d6bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	e008      	b.n	800d6bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	015a      	lsls	r2, r3, #5
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	015a      	lsls	r2, r3, #5
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d6e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d3b7      	bcc.n	800d660 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d702:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d710:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	2b00      	cmp	r3, #0
 800d716:	d105      	bne.n	800d724 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	f043 0210 	orr.w	r2, r3, #16
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	699a      	ldr	r2, [r3, #24]
 800d728:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <USB_DevInit+0x2b4>)
 800d72a:	4313      	orrs	r3, r2
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d005      	beq.n	800d742 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	f043 0208 	orr.w	r2, r3, #8
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d744:	2b01      	cmp	r3, #1
 800d746:	d105      	bne.n	800d754 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	699a      	ldr	r2, [r3, #24]
 800d74c:	4b06      	ldr	r3, [pc, #24]	; (800d768 <USB_DevInit+0x2b8>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d754:	7dfb      	ldrb	r3, [r7, #23]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d760:	b004      	add	sp, #16
 800d762:	4770      	bx	lr
 800d764:	803c3800 	.word	0x803c3800
 800d768:	40000004 	.word	0x40000004

0800d76c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3301      	adds	r3, #1
 800d77e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4a13      	ldr	r2, [pc, #76]	; (800d7d0 <USB_FlushTxFifo+0x64>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d901      	bls.n	800d78c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d788:	2303      	movs	r3, #3
 800d78a:	e01b      	b.n	800d7c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	daf2      	bge.n	800d77a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d794:	2300      	movs	r3, #0
 800d796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	019b      	lsls	r3, r3, #6
 800d79c:	f043 0220 	orr.w	r2, r3, #32
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	4a08      	ldr	r2, [pc, #32]	; (800d7d0 <USB_FlushTxFifo+0x64>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d901      	bls.n	800d7b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e006      	b.n	800d7c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	f003 0320 	and.w	r3, r3, #32
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d0f0      	beq.n	800d7a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	00030d40 	.word	0x00030d40

0800d7d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4a11      	ldr	r2, [pc, #68]	; (800d830 <USB_FlushRxFifo+0x5c>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d901      	bls.n	800d7f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e018      	b.n	800d824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	daf2      	bge.n	800d7e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2210      	movs	r2, #16
 800d802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	3301      	adds	r3, #1
 800d808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4a08      	ldr	r2, [pc, #32]	; (800d830 <USB_FlushRxFifo+0x5c>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d901      	bls.n	800d816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d812:	2303      	movs	r3, #3
 800d814:	e006      	b.n	800d824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	f003 0310 	and.w	r3, r3, #16
 800d81e:	2b10      	cmp	r3, #16
 800d820:	d0f0      	beq.n	800d804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	00030d40 	.word	0x00030d40

0800d834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	68f9      	ldr	r1, [r7, #12]
 800d850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d854:	4313      	orrs	r3, r2
 800d856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d866:	b480      	push	{r7}
 800d868:	b085      	sub	sp, #20
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d880:	f023 0303 	bic.w	r3, r3, #3
 800d884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d894:	f043 0302 	orr.w	r3, r3, #2
 800d898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3714      	adds	r7, #20
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	f003 0301 	and.w	r3, r3, #1
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4a13      	ldr	r2, [pc, #76]	; (800d928 <USB_CoreReset+0x64>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d901      	bls.n	800d8e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e01b      	b.n	800d91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	daf2      	bge.n	800d8d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	f043 0201 	orr.w	r2, r3, #1
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	4a09      	ldr	r2, [pc, #36]	; (800d928 <USB_CoreReset+0x64>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d901      	bls.n	800d90c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d908:	2303      	movs	r3, #3
 800d90a:	e006      	b.n	800d91a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b01      	cmp	r3, #1
 800d916:	d0f0      	beq.n	800d8fa <USB_CoreReset+0x36>

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	00030d40 	.word	0x00030d40

0800d92c <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800d930:	f000 f808 	bl	800d944 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800d934:	bf00      	nop
 800d936:	bd80      	pop	{r7, pc}

0800d938 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A3_DataLogTerminal_Process();
 800d93c:	f000 f9c6 	bl	800dccc <MX_IKS01A3_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800d940:	bf00      	nop
 800d942:	bd80      	pop	{r7, pc}

0800d944 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800d944:	b5b0      	push	{r4, r5, r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800d94a:	2000      	movs	r0, #0
 800d94c:	f7fb fdae 	bl	80094ac <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800d950:	2101      	movs	r1, #1
 800d952:	2000      	movs	r0, #0
 800d954:	f7fb fdfa 	bl	800954c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800d958:	2000      	movs	r0, #0
 800d95a:	f7fb fe4b 	bl	80095f4 <BSP_PB_GetState>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	bf0c      	ite	eq
 800d964:	2301      	moveq	r3, #1
 800d966:	2300      	movne	r3, #0
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	461a      	mov	r2, r3
 800d96c:	4b75      	ldr	r3, [pc, #468]	; (800db44 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 800d96e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800d970:	2000      	movs	r0, #0
 800d972:	f7fb fe9d 	bl	80096b0 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800d976:	2103      	movs	r1, #3
 800d978:	2000      	movs	r0, #0
 800d97a:	f7fb f977 	bl	8008c6c <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800d97e:	2102      	movs	r1, #2
 800d980:	2001      	movs	r0, #1
 800d982:	f7fb f973 	bl	8008c6c <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800d986:	2104      	movs	r1, #4
 800d988:	2002      	movs	r0, #2
 800d98a:	f7fb f96f 	bl	8008c6c <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800d98e:	2300      	movs	r3, #0
 800d990:	60fb      	str	r3, [r7, #12]
 800d992:	e0c3      	b.n	800db1c <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4613      	mov	r3, r2
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4a69      	ldr	r2, [pc, #420]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800d9a2:	4413      	add	r3, r2
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	f7fb fa5d 	bl	8008e64 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800d9aa:	4967      	ldr	r1, [pc, #412]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800d9ba:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800d9bc:	4962      	ldr	r1, [pc, #392]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	440b      	add	r3, r1
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800d9ce:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800d9d0:	495d      	ldr	r1, [pc, #372]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	440b      	add	r3, r1
 800d9de:	3302      	adds	r3, #2
 800d9e0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800d9e2:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800d9e4:	4958      	ldr	r1, [pc, #352]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	1a9b      	subs	r3, r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	440b      	add	r3, r1
 800d9f2:	3303      	adds	r3, #3
 800d9f4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800d9f6:	9303      	str	r3, [sp, #12]
 800d9f8:	9502      	str	r5, [sp, #8]
 800d9fa:	9401      	str	r4, [sp, #4]
 800d9fc:	9000      	str	r0, [sp, #0]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	4a52      	ldr	r2, [pc, #328]	; (800db4c <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 800da02:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da06:	4852      	ldr	r0, [pc, #328]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800da08:	f001 fdea 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800da0c:	4950      	ldr	r1, [pc, #320]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800da0e:	4851      	ldr	r0, [pc, #324]	; (800db54 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800da10:	f001 fdce 	bl	800f5b0 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800da14:	494c      	ldr	r1, [pc, #304]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	4613      	mov	r3, r2
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	1a9b      	subs	r3, r3, r2
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	440b      	add	r3, r1
 800da22:	3314      	adds	r3, #20
 800da24:	edd3 7a00 	vldr	s15, [r3]
 800da28:	463b      	mov	r3, r7
 800da2a:	2103      	movs	r1, #3
 800da2c:	4618      	mov	r0, r3
 800da2e:	eeb0 0a67 	vmov.f32	s0, s15
 800da32:	f000 f9d9 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800da3a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800da3c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800da3e:	4942      	ldr	r1, [pc, #264]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	4613      	mov	r3, r2
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	440b      	add	r3, r1
 800da4c:	3308      	adds	r3, #8
 800da4e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	9000      	str	r0, [sp, #0]
 800da54:	4623      	mov	r3, r4
 800da56:	4a40      	ldr	r2, [pc, #256]	; (800db58 <MX_IKS01A3_DataLogTerminal_Init+0x214>)
 800da58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da5c:	483c      	ldr	r0, [pc, #240]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800da5e:	f001 fdbf 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800da62:	493b      	ldr	r1, [pc, #236]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800da64:	483b      	ldr	r0, [pc, #236]	; (800db54 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800da66:	f001 fda3 	bl	800f5b0 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800da6a:	4937      	ldr	r1, [pc, #220]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	4613      	mov	r3, r2
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	1a9b      	subs	r3, r3, r2
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	440b      	add	r3, r1
 800da78:	3310      	adds	r3, #16
 800da7a:	edd3 7a00 	vldr	s15, [r3]
 800da7e:	463b      	mov	r3, r7
 800da80:	2103      	movs	r1, #3
 800da82:	4618      	mov	r0, r3
 800da84:	eeb0 0a67 	vmov.f32	s0, s15
 800da88:	f000 f9ae 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800da90:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800da92:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800da94:	492c      	ldr	r1, [pc, #176]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	4613      	mov	r3, r2
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	440b      	add	r3, r1
 800daa2:	3304      	adds	r3, #4
 800daa4:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	9000      	str	r0, [sp, #0]
 800daaa:	4623      	mov	r3, r4
 800daac:	4a2b      	ldr	r2, [pc, #172]	; (800db5c <MX_IKS01A3_DataLogTerminal_Init+0x218>)
 800daae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dab2:	4827      	ldr	r0, [pc, #156]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800dab4:	f001 fd94 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800dab8:	4925      	ldr	r1, [pc, #148]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800daba:	4826      	ldr	r0, [pc, #152]	; (800db54 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800dabc:	f001 fd78 	bl	800f5b0 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800dac0:	4921      	ldr	r1, [pc, #132]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	4613      	mov	r3, r2
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	1a9b      	subs	r3, r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	440b      	add	r3, r1
 800dace:	3318      	adds	r3, #24
 800dad0:	edd3 7a00 	vldr	s15, [r3]
 800dad4:	463b      	mov	r3, r7
 800dad6:	2103      	movs	r1, #3
 800dad8:	4618      	mov	r0, r3
 800dada:	eeb0 0a67 	vmov.f32	s0, s15
 800dade:	f000 f983 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800dae6:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800dae8:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800daea:	4917      	ldr	r1, [pc, #92]	; (800db48 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4613      	mov	r3, r2
 800daf0:	00db      	lsls	r3, r3, #3
 800daf2:	1a9b      	subs	r3, r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	440b      	add	r3, r1
 800daf8:	330c      	adds	r3, #12
 800dafa:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	9000      	str	r0, [sp, #0]
 800db00:	4623      	mov	r3, r4
 800db02:	4a17      	ldr	r2, [pc, #92]	; (800db60 <MX_IKS01A3_DataLogTerminal_Init+0x21c>)
 800db04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800db08:	4811      	ldr	r0, [pc, #68]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800db0a:	f001 fd69 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800db0e:	4910      	ldr	r1, [pc, #64]	; (800db50 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800db10:	4810      	ldr	r0, [pc, #64]	; (800db54 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800db12:	f001 fd4d 	bl	800f5b0 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	f67f af38 	bls.w	800d994 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800db24:	2105      	movs	r1, #5
 800db26:	2000      	movs	r0, #0
 800db28:	f7fa fcae 	bl	8008488 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800db2c:	2103      	movs	r1, #3
 800db2e:	2001      	movs	r0, #1
 800db30:	f7fa fcaa 	bl	8008488 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800db34:	2101      	movs	r1, #1
 800db36:	2002      	movs	r0, #2
 800db38:	f7fa fca6 	bl	8008488 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]
 800db40:	e09c      	b.n	800dc7c <MX_IKS01A3_DataLogTerminal_Init+0x338>
 800db42:	bf00      	nop
 800db44:	20000d6c 	.word	0x20000d6c
 800db48:	20000be8 	.word	0x20000be8
 800db4c:	080108c8 	.word	0x080108c8
 800db50:	20000c6c 	.word	0x20000c6c
 800db54:	0801093c 	.word	0x0801093c
 800db58:	08010940 	.word	0x08010940
 800db5c:	0801096c 	.word	0x0801096c
 800db60:	0801099c 	.word	0x0801099c
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	011b      	lsls	r3, r3, #4
 800db6a:	4949      	ldr	r1, [pc, #292]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800db6c:	440b      	add	r3, r1
 800db6e:	4619      	mov	r1, r3
 800db70:	4610      	mov	r0, r2
 800db72:	f7fa fd85 	bl	8008680 <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800db76:	4a46      	ldr	r2, [pc, #280]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	011b      	lsls	r3, r3, #4
 800db7c:	4413      	add	r3, r2
 800db7e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800db80:	4619      	mov	r1, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800db82:	4a43      	ldr	r2, [pc, #268]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	011b      	lsls	r3, r3, #4
 800db88:	4413      	add	r3, r2
 800db8a:	3301      	adds	r3, #1
 800db8c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800db8e:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800db90:	4a3f      	ldr	r2, [pc, #252]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	4413      	add	r3, r2
 800db98:	3302      	adds	r3, #2
 800db9a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800db9c:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800db9e:	4a3c      	ldr	r2, [pc, #240]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	011b      	lsls	r3, r3, #4
 800dba4:	4413      	add	r3, r2
 800dba6:	3303      	adds	r3, #3
 800dba8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	9402      	str	r4, [sp, #8]
 800dbae:	9001      	str	r0, [sp, #4]
 800dbb0:	9100      	str	r1, [sp, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	4a37      	ldr	r2, [pc, #220]	; (800dc94 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800dbb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbba:	4837      	ldr	r0, [pc, #220]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dbbc:	f001 fd10 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800dbc0:	4935      	ldr	r1, [pc, #212]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dbc2:	4836      	ldr	r0, [pc, #216]	; (800dc9c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800dbc4:	f001 fcf4 	bl	800f5b0 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800dbc8:	4a31      	ldr	r2, [pc, #196]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	011b      	lsls	r3, r3, #4
 800dbce:	4413      	add	r3, r2
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	edd3 7a00 	vldr	s15, [r3]
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	2103      	movs	r1, #3
 800dbda:	4618      	mov	r0, r3
 800dbdc:	eeb0 0a67 	vmov.f32	s0, s15
 800dbe0:	f000 f902 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	4613      	mov	r3, r2
 800dbee:	4a2c      	ldr	r2, [pc, #176]	; (800dca0 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 800dbf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbf4:	4828      	ldr	r0, [pc, #160]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dbf6:	f001 fcf3 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800dbfa:	4927      	ldr	r1, [pc, #156]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dbfc:	4827      	ldr	r0, [pc, #156]	; (800dc9c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800dbfe:	f001 fcd7 	bl	800f5b0 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800dc02:	4a23      	ldr	r2, [pc, #140]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	011b      	lsls	r3, r3, #4
 800dc08:	4413      	add	r3, r2
 800dc0a:	330c      	adds	r3, #12
 800dc0c:	edd3 7a00 	vldr	s15, [r3]
 800dc10:	463b      	mov	r3, r7
 800dc12:	2103      	movs	r1, #3
 800dc14:	4618      	mov	r0, r3
 800dc16:	eeb0 0a67 	vmov.f32	s0, s15
 800dc1a:	f000 f8e5 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800dc22:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	4613      	mov	r3, r2
 800dc28:	4a1e      	ldr	r2, [pc, #120]	; (800dca4 <MX_IKS01A3_DataLogTerminal_Init+0x360>)
 800dc2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc2e:	481a      	ldr	r0, [pc, #104]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dc30:	f001 fcd6 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800dc34:	4918      	ldr	r1, [pc, #96]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dc36:	4819      	ldr	r0, [pc, #100]	; (800dc9c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800dc38:	f001 fcba 	bl	800f5b0 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800dc3c:	4a14      	ldr	r2, [pc, #80]	; (800dc90 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	011b      	lsls	r3, r3, #4
 800dc42:	4413      	add	r3, r2
 800dc44:	3304      	adds	r3, #4
 800dc46:	edd3 7a00 	vldr	s15, [r3]
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	2103      	movs	r1, #3
 800dc4e:	4618      	mov	r0, r3
 800dc50:	eeb0 0a67 	vmov.f32	s0, s15
 800dc54:	f000 f8c8 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	4613      	mov	r3, r2
 800dc62:	4a11      	ldr	r2, [pc, #68]	; (800dca8 <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 800dc64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc68:	480b      	ldr	r0, [pc, #44]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dc6a:	f001 fcb9 	bl	800f5e0 <sniprintf>
    printf("%s", dataOut);
 800dc6e:	490a      	ldr	r1, [pc, #40]	; (800dc98 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800dc70:	480a      	ldr	r0, [pc, #40]	; (800dc9c <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800dc72:	f001 fc9d 	bl	800f5b0 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	60fb      	str	r3, [r7, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	f67f af70 	bls.w	800db64 <MX_IKS01A3_DataLogTerminal_Init+0x220>
  }
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000c3c 	.word	0x20000c3c
 800dc94:	080109c8 	.word	0x080109c8
 800dc98:	20000c6c 	.word	0x20000c6c
 800dc9c:	0801093c 	.word	0x0801093c
 800dca0:	08010a3c 	.word	0x08010a3c
 800dca4:	08010a58 	.word	0x08010a58
 800dca8:	08010a78 	.word	0x08010a78

0800dcac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800dcb6:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <BSP_PB_Callback+0x1c>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	701a      	strb	r2, [r3, #0]
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	20000be4 	.word	0x20000be4

0800dccc <MX_IKS01A3_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 800dcd2:	4b40      	ldr	r3, [pc, #256]	; (800ddd4 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d011      	beq.n	800dd00 <MX_IKS01A3_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 800dcdc:	2032      	movs	r0, #50	; 0x32
 800dcde:	f7fb fe35 	bl	800994c <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800dce2:	bf00      	nop
 800dce4:	2000      	movs	r0, #0
 800dce6:	f7fb fc85 	bl	80095f4 <BSP_PB_GetState>
 800dcea:	4602      	mov	r2, r0
 800dcec:	4b3a      	ldr	r3, [pc, #232]	; (800ddd8 <MX_IKS01A3_DataLogTerminal_Process+0x10c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d0f7      	beq.n	800dce4 <MX_IKS01A3_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800dcf4:	2032      	movs	r0, #50	; 0x32
 800dcf6:	f7fb fe29 	bl	800994c <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800dcfa:	4b36      	ldr	r3, [pc, #216]	; (800ddd4 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800dd00:	2300      	movs	r3, #0
 800dd02:	607b      	str	r3, [r7, #4]
 800dd04:	e02e      	b.n	800dd64 <MX_IKS01A3_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 800dd06:	4935      	ldr	r1, [pc, #212]	; (800dddc <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	00db      	lsls	r3, r3, #3
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	440b      	add	r3, r1
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d003      	beq.n	800dd22 <MX_IKS01A3_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f8ed 	bl	800defc <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800dd22:	492e      	ldr	r1, [pc, #184]	; (800dddc <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	4613      	mov	r3, r2
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	1a9b      	subs	r3, r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	440b      	add	r3, r1
 800dd30:	3301      	adds	r3, #1
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <MX_IKS01A3_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 f992 	bl	800e064 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800dd40:	4926      	ldr	r1, [pc, #152]	; (800dddc <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	4613      	mov	r3, r2
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	1a9b      	subs	r3, r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	440b      	add	r3, r1
 800dd4e:	3302      	adds	r3, #2
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d003      	beq.n	800dd5e <MX_IKS01A3_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fa37 	bl	800e1cc <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3301      	adds	r3, #1
 800dd62:	607b      	str	r3, [r7, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d9cd      	bls.n	800dd06 <MX_IKS01A3_DataLogTerminal_Process+0x3a>
    }
  }

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	607b      	str	r3, [r7, #4]
 800dd6e:	e025      	b.n	800ddbc <MX_IKS01A3_DataLogTerminal_Process+0xf0>
  {
    if(EnvCapabilities[i].Humidity)
 800dd70:	4a1b      	ldr	r2, [pc, #108]	; (800dde0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	4413      	add	r3, r2
 800dd78:	3302      	adds	r3, #2
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <MX_IKS01A3_DataLogTerminal_Process+0xbc>
    {
      Hum_Sensor_Handler(i);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 fc04 	bl	800e590 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 800dd88:	4a15      	ldr	r2, [pc, #84]	; (800dde0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	4413      	add	r3, r2
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d003      	beq.n	800dd9e <MX_IKS01A3_DataLogTerminal_Process+0xd2>
    {
      Temp_Sensor_Handler(i);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 facb 	bl	800e334 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 800dd9e:	4a10      	ldr	r2, [pc, #64]	; (800dde0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	011b      	lsls	r3, r3, #4
 800dda4:	4413      	add	r3, r2
 800dda6:	3301      	adds	r3, #1
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <MX_IKS01A3_DataLogTerminal_Process+0xea>
    {
      Press_Sensor_Handler(i);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 fb5b 	bl	800e46c <Press_Sensor_Handler>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	607b      	str	r3, [r7, #4]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d9d6      	bls.n	800dd70 <MX_IKS01A3_DataLogTerminal_Process+0xa4>
    }
  }

  HAL_Delay( 1000 );
 800ddc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ddc6:	f7fb fdc1 	bl	800994c <HAL_Delay>
}
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000be4 	.word	0x20000be4
 800ddd8:	20000d6c 	.word	0x20000d6c
 800dddc:	20000be8 	.word	0x20000be8
 800dde0:	20000c3c 	.word	0x20000c3c
 800dde4:	00000000 	.word	0x00000000

0800dde8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800dde8:	b5b0      	push	{r4, r5, r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	ed87 0a03 	vstr	s0, [r7, #12]
 800ddf2:	60b8      	str	r0, [r7, #8]
 800ddf4:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800ddf6:	edd7 7a03 	vldr	s15, [r7, #12]
 800ddfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	db03      	blt.n	800de0c <floatToInt+0x24>
  {
    out_value->sign = 0;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2200      	movs	r2, #0
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	e008      	b.n	800de1e <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	2201      	movs	r2, #1
 800de10:	701a      	strb	r2, [r3, #0]
    in = -in;
 800de12:	edd7 7a03 	vldr	s15, [r7, #12]
 800de16:	eef1 7a67 	vneg.f32	s15, s15
 800de1a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7f2 fbaa 	bl	8000578 <__aeabi_f2d>
 800de24:	4604      	mov	r4, r0
 800de26:	460d      	mov	r5, r1
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7f2 fb93 	bl	8000554 <__aeabi_i2d>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	ec43 2b11 	vmov	d1, r2, r3
 800de36:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800def0 <floatToInt+0x108>
 800de3a:	f000 fc6d 	bl	800e718 <pow>
 800de3e:	ec53 2b10 	vmov	r2, r3, d0
 800de42:	f04f 0000 	mov.w	r0, #0
 800de46:	492c      	ldr	r1, [pc, #176]	; (800def8 <floatToInt+0x110>)
 800de48:	f7f2 fd18 	bl	800087c <__aeabi_ddiv>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4620      	mov	r0, r4
 800de52:	4629      	mov	r1, r5
 800de54:	f7f2 fa32 	bl	80002bc <__adddf3>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4610      	mov	r0, r2
 800de5e:	4619      	mov	r1, r3
 800de60:	f7f2 feba 	bl	8000bd8 <__aeabi_d2f>
 800de64:	4603      	mov	r3, r0
 800de66:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800de68:	edd7 7a03 	vldr	s15, [r7, #12]
 800de6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de70:	ee17 2a90 	vmov	r2, s15
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	ee07 3a90 	vmov	s15, r3
 800de80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de84:	ed97 7a03 	vldr	s14, [r7, #12]
 800de88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de8c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7f2 fb71 	bl	8000578 <__aeabi_f2d>
 800de96:	4604      	mov	r4, r0
 800de98:	460d      	mov	r5, r1
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7f2 fb5a 	bl	8000554 <__aeabi_i2d>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	ec43 2b11 	vmov	d1, r2, r3
 800dea8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800def0 <floatToInt+0x108>
 800deac:	f000 fc34 	bl	800e718 <pow>
 800deb0:	ec53 2b10 	vmov	r2, r3, d0
 800deb4:	4620      	mov	r0, r4
 800deb6:	4629      	mov	r1, r5
 800deb8:	f7f2 fbb6 	bl	8000628 <__aeabi_dmul>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	ec43 2b17 	vmov	d7, r2, r3
 800dec4:	eeb0 0a47 	vmov.f32	s0, s14
 800dec8:	eef0 0a67 	vmov.f32	s1, s15
 800decc:	f000 fbf2 	bl	800e6b4 <trunc>
 800ded0:	ec53 2b10 	vmov	r2, r3, d0
 800ded4:	4610      	mov	r0, r2
 800ded6:	4619      	mov	r1, r3
 800ded8:	f7f2 fe56 	bl	8000b88 <__aeabi_d2iz>
 800dedc:	4603      	mov	r3, r0
 800dede:	461a      	mov	r2, r3
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	609a      	str	r2, [r3, #8]
}
 800dee4:	bf00      	nop
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bdb0      	pop	{r4, r5, r7, pc}
 800deec:	f3af 8000 	nop.w
 800def0:	00000000 	.word	0x00000000
 800def4:	40240000 	.word	0x40240000
 800def8:	3fe00000 	.word	0x3fe00000

0800defc <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800defc:	b5b0      	push	{r4, r5, r7, lr}
 800defe:	b092      	sub	sp, #72	; 0x48
 800df00:	af06      	add	r7, sp, #24
 800df02:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800df04:	f107 031c 	add.w	r3, r7, #28
 800df08:	461a      	mov	r2, r3
 800df0a:	2102      	movs	r1, #2
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7fa fffd 	bl	8008f0c <IKS01A3_MOTION_SENSOR_GetAxes>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d007      	beq.n	800df28 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a47      	ldr	r2, [pc, #284]	; (800e038 <Accelero_Sensor_Handler+0x13c>)
 800df1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800df20:	4846      	ldr	r0, [pc, #280]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df22:	f001 fb5d 	bl	800f5e0 <sniprintf>
 800df26:	e011      	b.n	800df4c <Accelero_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800df28:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800df2a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800df2c:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800df2e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800df30:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800df32:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800df34:	9404      	str	r4, [sp, #16]
 800df36:	9003      	str	r0, [sp, #12]
 800df38:	9102      	str	r1, [sp, #8]
 800df3a:	9201      	str	r2, [sp, #4]
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	462b      	mov	r3, r5
 800df40:	4a3f      	ldr	r2, [pc, #252]	; (800e040 <Accelero_Sensor_Handler+0x144>)
 800df42:	f44f 7180 	mov.w	r1, #256	; 0x100
 800df46:	483d      	ldr	r0, [pc, #244]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df48:	f001 fb4a 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800df4c:	493b      	ldr	r1, [pc, #236]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df4e:	483d      	ldr	r0, [pc, #244]	; (800e044 <Accelero_Sensor_Handler+0x148>)
 800df50:	f001 fb2e 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800df54:	4b3c      	ldr	r3, [pc, #240]	; (800e048 <Accelero_Sensor_Handler+0x14c>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d168      	bne.n	800e02e <Accelero_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800df5c:	f107 030f 	add.w	r3, r7, #15
 800df60:	4619      	mov	r1, r3
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7fa ffa8 	bl	8008eb8 <IKS01A3_MOTION_SENSOR_ReadID>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d007      	beq.n	800df7e <Accelero_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a36      	ldr	r2, [pc, #216]	; (800e04c <Accelero_Sensor_Handler+0x150>)
 800df72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800df76:	4831      	ldr	r0, [pc, #196]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df78:	f001 fb32 	bl	800f5e0 <sniprintf>
 800df7c:	e008      	b.n	800df90 <Accelero_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7bfa      	ldrb	r2, [r7, #15]
 800df82:	9200      	str	r2, [sp, #0]
 800df84:	4a32      	ldr	r2, [pc, #200]	; (800e050 <Accelero_Sensor_Handler+0x154>)
 800df86:	f44f 7180 	mov.w	r1, #256	; 0x100
 800df8a:	482c      	ldr	r0, [pc, #176]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df8c:	f001 fb28 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800df90:	492a      	ldr	r1, [pc, #168]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800df92:	482c      	ldr	r0, [pc, #176]	; (800e044 <Accelero_Sensor_Handler+0x148>)
 800df94:	f001 fb0c 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800df98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df9c:	461a      	mov	r2, r3
 800df9e:	2102      	movs	r1, #2
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7fa fff7 	bl	8008f94 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d007      	beq.n	800dfbc <Accelero_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a29      	ldr	r2, [pc, #164]	; (800e054 <Accelero_Sensor_Handler+0x158>)
 800dfb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dfb4:	4821      	ldr	r0, [pc, #132]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800dfb6:	f001 fb13 	bl	800f5e0 <sniprintf>
 800dfba:	e014      	b.n	800dfe6 <Accelero_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800dfbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dfc0:	f107 0310 	add.w	r3, r7, #16
 800dfc4:	2103      	movs	r1, #3
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	eeb0 0a67 	vmov.f32	s0, s15
 800dfcc:	f7ff ff0c 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800dfd4:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800dfd6:	9101      	str	r1, [sp, #4]
 800dfd8:	9200      	str	r2, [sp, #0]
 800dfda:	4a1f      	ldr	r2, [pc, #124]	; (800e058 <Accelero_Sensor_Handler+0x15c>)
 800dfdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dfe0:	4816      	ldr	r0, [pc, #88]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800dfe2:	f001 fafd 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800dfe6:	4915      	ldr	r1, [pc, #84]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800dfe8:	4816      	ldr	r0, [pc, #88]	; (800e044 <Accelero_Sensor_Handler+0x148>)
 800dfea:	f001 fae1 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800dfee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dff2:	461a      	mov	r2, r3
 800dff4:	2102      	movs	r1, #2
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7fb f810 	bl	800901c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d007      	beq.n	800e012 <Accelero_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a15      	ldr	r2, [pc, #84]	; (800e05c <Accelero_Sensor_Handler+0x160>)
 800e006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e00a:	480c      	ldr	r0, [pc, #48]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800e00c:	f001 fae8 	bl	800f5e0 <sniprintf>
 800e010:	e009      	b.n	800e026 <Accelero_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	4613      	mov	r3, r2
 800e01a:	4a11      	ldr	r2, [pc, #68]	; (800e060 <Accelero_Sensor_Handler+0x164>)
 800e01c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e020:	4806      	ldr	r0, [pc, #24]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800e022:	f001 fadd 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e026:	4905      	ldr	r1, [pc, #20]	; (800e03c <Accelero_Sensor_Handler+0x140>)
 800e028:	4806      	ldr	r0, [pc, #24]	; (800e044 <Accelero_Sensor_Handler+0x148>)
 800e02a:	f001 fac1 	bl	800f5b0 <iprintf>
  }
}
 800e02e:	bf00      	nop
 800e030:	3730      	adds	r7, #48	; 0x30
 800e032:	46bd      	mov	sp, r7
 800e034:	bdb0      	pop	{r4, r5, r7, pc}
 800e036:	bf00      	nop
 800e038:	08010a94 	.word	0x08010a94
 800e03c:	20000c6c 	.word	0x20000c6c
 800e040:	08010aa8 	.word	0x08010aa8
 800e044:	0801093c 	.word	0x0801093c
 800e048:	20000195 	.word	0x20000195
 800e04c:	08010ad8 	.word	0x08010ad8
 800e050:	08010aec 	.word	0x08010aec
 800e054:	08010b00 	.word	0x08010b00
 800e058:	08010b14 	.word	0x08010b14
 800e05c:	08010b2c 	.word	0x08010b2c
 800e060:	08010b3c 	.word	0x08010b3c

0800e064 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800e064:	b5b0      	push	{r4, r5, r7, lr}
 800e066:	b092      	sub	sp, #72	; 0x48
 800e068:	af06      	add	r7, sp, #24
 800e06a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800e06c:	f107 031c 	add.w	r3, r7, #28
 800e070:	461a      	mov	r2, r3
 800e072:	2101      	movs	r1, #1
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7fa ff49 	bl	8008f0c <IKS01A3_MOTION_SENSOR_GetAxes>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a47      	ldr	r2, [pc, #284]	; (800e1a0 <Gyro_Sensor_Handler+0x13c>)
 800e084:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e088:	4846      	ldr	r0, [pc, #280]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e08a:	f001 faa9 	bl	800f5e0 <sniprintf>
 800e08e:	e011      	b.n	800e0b4 <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800e090:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800e092:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800e094:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800e096:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800e098:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800e09a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800e09c:	9404      	str	r4, [sp, #16]
 800e09e:	9003      	str	r0, [sp, #12]
 800e0a0:	9102      	str	r1, [sp, #8]
 800e0a2:	9201      	str	r2, [sp, #4]
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	462b      	mov	r3, r5
 800e0a8:	4a3f      	ldr	r2, [pc, #252]	; (800e1a8 <Gyro_Sensor_Handler+0x144>)
 800e0aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0ae:	483d      	ldr	r0, [pc, #244]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e0b0:	f001 fa96 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800e0b4:	493b      	ldr	r1, [pc, #236]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e0b6:	483d      	ldr	r0, [pc, #244]	; (800e1ac <Gyro_Sensor_Handler+0x148>)
 800e0b8:	f001 fa7a 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800e0bc:	4b3c      	ldr	r3, [pc, #240]	; (800e1b0 <Gyro_Sensor_Handler+0x14c>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d168      	bne.n	800e196 <Gyro_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800e0c4:	f107 030f 	add.w	r3, r7, #15
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7fa fef4 	bl	8008eb8 <IKS01A3_MOTION_SENSOR_ReadID>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a36      	ldr	r2, [pc, #216]	; (800e1b4 <Gyro_Sensor_Handler+0x150>)
 800e0da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0de:	4831      	ldr	r0, [pc, #196]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e0e0:	f001 fa7e 	bl	800f5e0 <sniprintf>
 800e0e4:	e008      	b.n	800e0f8 <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7bfa      	ldrb	r2, [r7, #15]
 800e0ea:	9200      	str	r2, [sp, #0]
 800e0ec:	4a32      	ldr	r2, [pc, #200]	; (800e1b8 <Gyro_Sensor_Handler+0x154>)
 800e0ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0f2:	482c      	ldr	r0, [pc, #176]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e0f4:	f001 fa74 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e0f8:	492a      	ldr	r1, [pc, #168]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e0fa:	482c      	ldr	r0, [pc, #176]	; (800e1ac <Gyro_Sensor_Handler+0x148>)
 800e0fc:	f001 fa58 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800e100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e104:	461a      	mov	r2, r3
 800e106:	2101      	movs	r1, #1
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fa ff43 	bl	8008f94 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d007      	beq.n	800e124 <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a29      	ldr	r2, [pc, #164]	; (800e1bc <Gyro_Sensor_Handler+0x158>)
 800e118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e11c:	4821      	ldr	r0, [pc, #132]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e11e:	f001 fa5f 	bl	800f5e0 <sniprintf>
 800e122:	e014      	b.n	800e14e <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800e124:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e128:	f107 0310 	add.w	r3, r7, #16
 800e12c:	2103      	movs	r1, #3
 800e12e:	4618      	mov	r0, r3
 800e130:	eeb0 0a67 	vmov.f32	s0, s15
 800e134:	f7ff fe58 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800e13c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e13e:	9101      	str	r1, [sp, #4]
 800e140:	9200      	str	r2, [sp, #0]
 800e142:	4a1f      	ldr	r2, [pc, #124]	; (800e1c0 <Gyro_Sensor_Handler+0x15c>)
 800e144:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e148:	4816      	ldr	r0, [pc, #88]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e14a:	f001 fa49 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e14e:	4915      	ldr	r1, [pc, #84]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e150:	4816      	ldr	r0, [pc, #88]	; (800e1ac <Gyro_Sensor_Handler+0x148>)
 800e152:	f001 fa2d 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800e156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e15a:	461a      	mov	r2, r3
 800e15c:	2101      	movs	r1, #1
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7fa ff5c 	bl	800901c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d007      	beq.n	800e17a <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4a15      	ldr	r2, [pc, #84]	; (800e1c4 <Gyro_Sensor_Handler+0x160>)
 800e16e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e172:	480c      	ldr	r0, [pc, #48]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e174:	f001 fa34 	bl	800f5e0 <sniprintf>
 800e178:	e009      	b.n	800e18e <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	4613      	mov	r3, r2
 800e182:	4a11      	ldr	r2, [pc, #68]	; (800e1c8 <Gyro_Sensor_Handler+0x164>)
 800e184:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e188:	4806      	ldr	r0, [pc, #24]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e18a:	f001 fa29 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e18e:	4905      	ldr	r1, [pc, #20]	; (800e1a4 <Gyro_Sensor_Handler+0x140>)
 800e190:	4806      	ldr	r0, [pc, #24]	; (800e1ac <Gyro_Sensor_Handler+0x148>)
 800e192:	f001 fa0d 	bl	800f5b0 <iprintf>
  }
}
 800e196:	bf00      	nop
 800e198:	3730      	adds	r7, #48	; 0x30
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bdb0      	pop	{r4, r5, r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	08010b4c 	.word	0x08010b4c
 800e1a4:	20000c6c 	.word	0x20000c6c
 800e1a8:	08010b60 	.word	0x08010b60
 800e1ac:	0801093c 	.word	0x0801093c
 800e1b0:	20000195 	.word	0x20000195
 800e1b4:	08010ad8 	.word	0x08010ad8
 800e1b8:	08010aec 	.word	0x08010aec
 800e1bc:	08010b00 	.word	0x08010b00
 800e1c0:	08010b14 	.word	0x08010b14
 800e1c4:	08010b2c 	.word	0x08010b2c
 800e1c8:	08010b90 	.word	0x08010b90

0800e1cc <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800e1cc:	b5b0      	push	{r4, r5, r7, lr}
 800e1ce:	b092      	sub	sp, #72	; 0x48
 800e1d0:	af06      	add	r7, sp, #24
 800e1d2:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800e1d4:	f107 031c 	add.w	r3, r7, #28
 800e1d8:	461a      	mov	r2, r3
 800e1da:	2104      	movs	r1, #4
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7fa fe95 	bl	8008f0c <IKS01A3_MOTION_SENSOR_GetAxes>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d007      	beq.n	800e1f8 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4a47      	ldr	r2, [pc, #284]	; (800e308 <Magneto_Sensor_Handler+0x13c>)
 800e1ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1f0:	4846      	ldr	r0, [pc, #280]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e1f2:	f001 f9f5 	bl	800f5e0 <sniprintf>
 800e1f6:	e011      	b.n	800e21c <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800e1f8:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800e1fa:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800e1fc:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800e1fe:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800e200:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800e202:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800e204:	9404      	str	r4, [sp, #16]
 800e206:	9003      	str	r0, [sp, #12]
 800e208:	9102      	str	r1, [sp, #8]
 800e20a:	9201      	str	r2, [sp, #4]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	462b      	mov	r3, r5
 800e210:	4a3f      	ldr	r2, [pc, #252]	; (800e310 <Magneto_Sensor_Handler+0x144>)
 800e212:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e216:	483d      	ldr	r0, [pc, #244]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e218:	f001 f9e2 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800e21c:	493b      	ldr	r1, [pc, #236]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e21e:	483d      	ldr	r0, [pc, #244]	; (800e314 <Magneto_Sensor_Handler+0x148>)
 800e220:	f001 f9c6 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800e224:	4b3c      	ldr	r3, [pc, #240]	; (800e318 <Magneto_Sensor_Handler+0x14c>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d168      	bne.n	800e2fe <Magneto_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800e22c:	f107 030f 	add.w	r3, r7, #15
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7fa fe40 	bl	8008eb8 <IKS01A3_MOTION_SENSOR_ReadID>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d007      	beq.n	800e24e <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a36      	ldr	r2, [pc, #216]	; (800e31c <Magneto_Sensor_Handler+0x150>)
 800e242:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e246:	4831      	ldr	r0, [pc, #196]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e248:	f001 f9ca 	bl	800f5e0 <sniprintf>
 800e24c:	e008      	b.n	800e260 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7bfa      	ldrb	r2, [r7, #15]
 800e252:	9200      	str	r2, [sp, #0]
 800e254:	4a32      	ldr	r2, [pc, #200]	; (800e320 <Magneto_Sensor_Handler+0x154>)
 800e256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e25a:	482c      	ldr	r0, [pc, #176]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e25c:	f001 f9c0 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e260:	492a      	ldr	r1, [pc, #168]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e262:	482c      	ldr	r0, [pc, #176]	; (800e314 <Magneto_Sensor_Handler+0x148>)
 800e264:	f001 f9a4 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800e268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e26c:	461a      	mov	r2, r3
 800e26e:	2104      	movs	r1, #4
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fa fe8f 	bl	8008f94 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d007      	beq.n	800e28c <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a29      	ldr	r2, [pc, #164]	; (800e324 <Magneto_Sensor_Handler+0x158>)
 800e280:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e284:	4821      	ldr	r0, [pc, #132]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e286:	f001 f9ab 	bl	800f5e0 <sniprintf>
 800e28a:	e014      	b.n	800e2b6 <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800e28c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e290:	f107 0310 	add.w	r3, r7, #16
 800e294:	2103      	movs	r1, #3
 800e296:	4618      	mov	r0, r3
 800e298:	eeb0 0a67 	vmov.f32	s0, s15
 800e29c:	f7ff fda4 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800e2a4:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e2a6:	9101      	str	r1, [sp, #4]
 800e2a8:	9200      	str	r2, [sp, #0]
 800e2aa:	4a1f      	ldr	r2, [pc, #124]	; (800e328 <Magneto_Sensor_Handler+0x15c>)
 800e2ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2b0:	4816      	ldr	r0, [pc, #88]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e2b2:	f001 f995 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e2b6:	4915      	ldr	r1, [pc, #84]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e2b8:	4816      	ldr	r0, [pc, #88]	; (800e314 <Magneto_Sensor_Handler+0x148>)
 800e2ba:	f001 f979 	bl	800f5b0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800e2be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	2104      	movs	r1, #4
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7fa fea8 	bl	800901c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d007      	beq.n	800e2e2 <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a15      	ldr	r2, [pc, #84]	; (800e32c <Magneto_Sensor_Handler+0x160>)
 800e2d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2da:	480c      	ldr	r0, [pc, #48]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e2dc:	f001 f980 	bl	800f5e0 <sniprintf>
 800e2e0:	e009      	b.n	800e2f6 <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	4a11      	ldr	r2, [pc, #68]	; (800e330 <Magneto_Sensor_Handler+0x164>)
 800e2ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2f0:	4806      	ldr	r0, [pc, #24]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e2f2:	f001 f975 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e2f6:	4905      	ldr	r1, [pc, #20]	; (800e30c <Magneto_Sensor_Handler+0x140>)
 800e2f8:	4806      	ldr	r0, [pc, #24]	; (800e314 <Magneto_Sensor_Handler+0x148>)
 800e2fa:	f001 f959 	bl	800f5b0 <iprintf>
  }
}
 800e2fe:	bf00      	nop
 800e300:	3730      	adds	r7, #48	; 0x30
 800e302:	46bd      	mov	sp, r7
 800e304:	bdb0      	pop	{r4, r5, r7, pc}
 800e306:	bf00      	nop
 800e308:	08010ba4 	.word	0x08010ba4
 800e30c:	20000c6c 	.word	0x20000c6c
 800e310:	08010bb8 	.word	0x08010bb8
 800e314:	0801093c 	.word	0x0801093c
 800e318:	20000195 	.word	0x20000195
 800e31c:	08010ad8 	.word	0x08010ad8
 800e320:	08010aec 	.word	0x08010aec
 800e324:	08010b00 	.word	0x08010b00
 800e328:	08010b14 	.word	0x08010b14
 800e32c:	08010b2c 	.word	0x08010b2c
 800e330:	08010be8 	.word	0x08010be8

0800e334 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b08c      	sub	sp, #48	; 0x30
 800e338:	af04      	add	r7, sp, #16
 800e33a:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800e33c:	f107 0318 	add.w	r3, r7, #24
 800e340:	461a      	mov	r2, r3
 800e342:	2101      	movs	r1, #1
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7fa fa33 	bl	80087b0 <IKS01A3_ENV_SENSOR_GetValue>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <Temp_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a3d      	ldr	r2, [pc, #244]	; (800e448 <Temp_Sensor_Handler+0x114>)
 800e354:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e358:	483c      	ldr	r0, [pc, #240]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e35a:	f001 f941 	bl	800f5e0 <sniprintf>
 800e35e:	e01d      	b.n	800e39c <Temp_Sensor_Handler+0x68>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800e360:	edd7 7a06 	vldr	s15, [r7, #24]
 800e364:	f107 030c 	add.w	r3, r7, #12
 800e368:	2102      	movs	r1, #2
 800e36a:	4618      	mov	r0, r3
 800e36c:	eeb0 0a67 	vmov.f32	s0, s15
 800e370:	f7ff fd3a 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <Temp_Sensor_Handler+0x4e>
 800e37e:	232d      	movs	r3, #45	; 0x2d
 800e380:	e000      	b.n	800e384 <Temp_Sensor_Handler+0x50>
 800e382:	232b      	movs	r3, #43	; 0x2b
 800e384:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 800e386:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800e388:	9002      	str	r0, [sp, #8]
 800e38a:	9101      	str	r1, [sp, #4]
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	4613      	mov	r3, r2
 800e390:	4a2f      	ldr	r2, [pc, #188]	; (800e450 <Temp_Sensor_Handler+0x11c>)
 800e392:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e396:	482d      	ldr	r0, [pc, #180]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e398:	f001 f922 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800e39c:	492b      	ldr	r1, [pc, #172]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e39e:	482d      	ldr	r0, [pc, #180]	; (800e454 <Temp_Sensor_Handler+0x120>)
 800e3a0:	f001 f906 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800e3a4:	4b2c      	ldr	r3, [pc, #176]	; (800e458 <Temp_Sensor_Handler+0x124>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d148      	bne.n	800e43e <Temp_Sensor_Handler+0x10a>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800e3ac:	f107 030b 	add.w	r3, r7, #11
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7fa f98e 	bl	80086d4 <IKS01A3_ENV_SENSOR_ReadID>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d007      	beq.n	800e3ce <Temp_Sensor_Handler+0x9a>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a26      	ldr	r2, [pc, #152]	; (800e45c <Temp_Sensor_Handler+0x128>)
 800e3c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3c6:	4821      	ldr	r0, [pc, #132]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e3c8:	f001 f90a 	bl	800f5e0 <sniprintf>
 800e3cc:	e008      	b.n	800e3e0 <Temp_Sensor_Handler+0xac>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	7afa      	ldrb	r2, [r7, #11]
 800e3d2:	9200      	str	r2, [sp, #0]
 800e3d4:	4a22      	ldr	r2, [pc, #136]	; (800e460 <Temp_Sensor_Handler+0x12c>)
 800e3d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3da:	481c      	ldr	r0, [pc, #112]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e3dc:	f001 f900 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e3e0:	491a      	ldr	r1, [pc, #104]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e3e2:	481c      	ldr	r0, [pc, #112]	; (800e454 <Temp_Sensor_Handler+0x120>)
 800e3e4:	f001 f8e4 	bl	800f5b0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 800e3e8:	f107 031c 	add.w	r3, r7, #28
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	2101      	movs	r1, #1
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7fa f999 	bl	8008728 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <Temp_Sensor_Handler+0xd8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	4a19      	ldr	r2, [pc, #100]	; (800e464 <Temp_Sensor_Handler+0x130>)
 800e400:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e404:	4811      	ldr	r0, [pc, #68]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e406:	f001 f8eb 	bl	800f5e0 <sniprintf>
 800e40a:	e014      	b.n	800e436 <Temp_Sensor_Handler+0x102>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800e40c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e410:	f107 030c 	add.w	r3, r7, #12
 800e414:	2103      	movs	r1, #3
 800e416:	4618      	mov	r0, r3
 800e418:	eeb0 0a67 	vmov.f32	s0, s15
 800e41c:	f7ff fce4 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800e424:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e426:	9101      	str	r1, [sp, #4]
 800e428:	9200      	str	r2, [sp, #0]
 800e42a:	4a0f      	ldr	r2, [pc, #60]	; (800e468 <Temp_Sensor_Handler+0x134>)
 800e42c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e430:	4806      	ldr	r0, [pc, #24]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e432:	f001 f8d5 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e436:	4905      	ldr	r1, [pc, #20]	; (800e44c <Temp_Sensor_Handler+0x118>)
 800e438:	4806      	ldr	r0, [pc, #24]	; (800e454 <Temp_Sensor_Handler+0x120>)
 800e43a:	f001 f8b9 	bl	800f5b0 <iprintf>
  }
}
 800e43e:	bf00      	nop
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	08010bfc 	.word	0x08010bfc
 800e44c:	20000c6c 	.word	0x20000c6c
 800e450:	08010c10 	.word	0x08010c10
 800e454:	0801093c 	.word	0x0801093c
 800e458:	20000195 	.word	0x20000195
 800e45c:	08010ad8 	.word	0x08010ad8
 800e460:	08010aec 	.word	0x08010aec
 800e464:	08010c30 	.word	0x08010c30
 800e468:	08010b14 	.word	0x08010b14

0800e46c <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08a      	sub	sp, #40	; 0x28
 800e470:	af02      	add	r7, sp, #8
 800e472:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800e474:	f107 0318 	add.w	r3, r7, #24
 800e478:	461a      	mov	r2, r3
 800e47a:	2102      	movs	r1, #2
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7fa f997 	bl	80087b0 <IKS01A3_ENV_SENSOR_GetValue>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d007      	beq.n	800e498 <Press_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a38      	ldr	r2, [pc, #224]	; (800e56c <Press_Sensor_Handler+0x100>)
 800e48c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e490:	4837      	ldr	r0, [pc, #220]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e492:	f001 f8a5 	bl	800f5e0 <sniprintf>
 800e496:	e014      	b.n	800e4c2 <Press_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800e498:	edd7 7a06 	vldr	s15, [r7, #24]
 800e49c:	f107 030c 	add.w	r3, r7, #12
 800e4a0:	2102      	movs	r1, #2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e4a8:	f7ff fc9e 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800e4b0:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800e4b2:	9101      	str	r1, [sp, #4]
 800e4b4:	9200      	str	r2, [sp, #0]
 800e4b6:	4a2f      	ldr	r2, [pc, #188]	; (800e574 <Press_Sensor_Handler+0x108>)
 800e4b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e4bc:	482c      	ldr	r0, [pc, #176]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e4be:	f001 f88f 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800e4c2:	492b      	ldr	r1, [pc, #172]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e4c4:	482c      	ldr	r0, [pc, #176]	; (800e578 <Press_Sensor_Handler+0x10c>)
 800e4c6:	f001 f873 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800e4ca:	4b2c      	ldr	r3, [pc, #176]	; (800e57c <Press_Sensor_Handler+0x110>)
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d148      	bne.n	800e564 <Press_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800e4d2:	f107 030b 	add.w	r3, r7, #11
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fa f8fb 	bl	80086d4 <IKS01A3_ENV_SENSOR_ReadID>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d007      	beq.n	800e4f4 <Press_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a26      	ldr	r2, [pc, #152]	; (800e580 <Press_Sensor_Handler+0x114>)
 800e4e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e4ec:	4820      	ldr	r0, [pc, #128]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e4ee:	f001 f877 	bl	800f5e0 <sniprintf>
 800e4f2:	e008      	b.n	800e506 <Press_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7afa      	ldrb	r2, [r7, #11]
 800e4f8:	9200      	str	r2, [sp, #0]
 800e4fa:	4a22      	ldr	r2, [pc, #136]	; (800e584 <Press_Sensor_Handler+0x118>)
 800e4fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e500:	481b      	ldr	r0, [pc, #108]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e502:	f001 f86d 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e506:	491a      	ldr	r1, [pc, #104]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e508:	481b      	ldr	r0, [pc, #108]	; (800e578 <Press_Sensor_Handler+0x10c>)
 800e50a:	f001 f851 	bl	800f5b0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 800e50e:	f107 031c 	add.w	r3, r7, #28
 800e512:	461a      	mov	r2, r3
 800e514:	2102      	movs	r1, #2
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7fa f906 	bl	8008728 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d007      	beq.n	800e532 <Press_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a18      	ldr	r2, [pc, #96]	; (800e588 <Press_Sensor_Handler+0x11c>)
 800e526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e52a:	4811      	ldr	r0, [pc, #68]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e52c:	f001 f858 	bl	800f5e0 <sniprintf>
 800e530:	e014      	b.n	800e55c <Press_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800e532:	edd7 7a07 	vldr	s15, [r7, #28]
 800e536:	f107 030c 	add.w	r3, r7, #12
 800e53a:	2103      	movs	r1, #3
 800e53c:	4618      	mov	r0, r3
 800e53e:	eeb0 0a67 	vmov.f32	s0, s15
 800e542:	f7ff fc51 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800e54a:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e54c:	9101      	str	r1, [sp, #4]
 800e54e:	9200      	str	r2, [sp, #0]
 800e550:	4a0e      	ldr	r2, [pc, #56]	; (800e58c <Press_Sensor_Handler+0x120>)
 800e552:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e556:	4806      	ldr	r0, [pc, #24]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e558:	f001 f842 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e55c:	4904      	ldr	r1, [pc, #16]	; (800e570 <Press_Sensor_Handler+0x104>)
 800e55e:	4806      	ldr	r0, [pc, #24]	; (800e578 <Press_Sensor_Handler+0x10c>)
 800e560:	f001 f826 	bl	800f5b0 <iprintf>
  }
}
 800e564:	bf00      	nop
 800e566:	3720      	adds	r7, #32
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	08010c44 	.word	0x08010c44
 800e570:	20000c6c 	.word	0x20000c6c
 800e574:	08010c5c 	.word	0x08010c5c
 800e578:	0801093c 	.word	0x0801093c
 800e57c:	20000195 	.word	0x20000195
 800e580:	08010ad8 	.word	0x08010ad8
 800e584:	08010aec 	.word	0x08010aec
 800e588:	08010c30 	.word	0x08010c30
 800e58c:	08010b14 	.word	0x08010b14

0800e590 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b08a      	sub	sp, #40	; 0x28
 800e594:	af02      	add	r7, sp, #8
 800e596:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800e598:	f107 0318 	add.w	r3, r7, #24
 800e59c:	461a      	mov	r2, r3
 800e59e:	2104      	movs	r1, #4
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7fa f905 	bl	80087b0 <IKS01A3_ENV_SENSOR_GetValue>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d007      	beq.n	800e5bc <Hum_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4a38      	ldr	r2, [pc, #224]	; (800e690 <Hum_Sensor_Handler+0x100>)
 800e5b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5b4:	4837      	ldr	r0, [pc, #220]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e5b6:	f001 f813 	bl	800f5e0 <sniprintf>
 800e5ba:	e014      	b.n	800e5e6 <Hum_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 800e5bc:	edd7 7a06 	vldr	s15, [r7, #24]
 800e5c0:	f107 030c 	add.w	r3, r7, #12
 800e5c4:	2102      	movs	r1, #2
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	eeb0 0a67 	vmov.f32	s0, s15
 800e5cc:	f7ff fc0c 	bl	800dde8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800e5d4:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800e5d6:	9101      	str	r1, [sp, #4]
 800e5d8:	9200      	str	r2, [sp, #0]
 800e5da:	4a2f      	ldr	r2, [pc, #188]	; (800e698 <Hum_Sensor_Handler+0x108>)
 800e5dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5e0:	482c      	ldr	r0, [pc, #176]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e5e2:	f000 fffd 	bl	800f5e0 <sniprintf>
  }

  printf("%s", dataOut);
 800e5e6:	492b      	ldr	r1, [pc, #172]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e5e8:	482c      	ldr	r0, [pc, #176]	; (800e69c <Hum_Sensor_Handler+0x10c>)
 800e5ea:	f000 ffe1 	bl	800f5b0 <iprintf>

  if (verbose == 1)
 800e5ee:	4b2c      	ldr	r3, [pc, #176]	; (800e6a0 <Hum_Sensor_Handler+0x110>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d148      	bne.n	800e688 <Hum_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800e5f6:	f107 030b 	add.w	r3, r7, #11
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7fa f869 	bl	80086d4 <IKS01A3_ENV_SENSOR_ReadID>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d007      	beq.n	800e618 <Hum_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a26      	ldr	r2, [pc, #152]	; (800e6a4 <Hum_Sensor_Handler+0x114>)
 800e60c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e610:	4820      	ldr	r0, [pc, #128]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e612:	f000 ffe5 	bl	800f5e0 <sniprintf>
 800e616:	e008      	b.n	800e62a <Hum_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	7afa      	ldrb	r2, [r7, #11]
 800e61c:	9200      	str	r2, [sp, #0]
 800e61e:	4a22      	ldr	r2, [pc, #136]	; (800e6a8 <Hum_Sensor_Handler+0x118>)
 800e620:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e624:	481b      	ldr	r0, [pc, #108]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e626:	f000 ffdb 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e62a:	491a      	ldr	r1, [pc, #104]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e62c:	481b      	ldr	r0, [pc, #108]	; (800e69c <Hum_Sensor_Handler+0x10c>)
 800e62e:	f000 ffbf 	bl	800f5b0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 800e632:	f107 031c 	add.w	r3, r7, #28
 800e636:	461a      	mov	r2, r3
 800e638:	2104      	movs	r1, #4
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7fa f874 	bl	8008728 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d007      	beq.n	800e656 <Hum_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a18      	ldr	r2, [pc, #96]	; (800e6ac <Hum_Sensor_Handler+0x11c>)
 800e64a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e64e:	4811      	ldr	r0, [pc, #68]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e650:	f000 ffc6 	bl	800f5e0 <sniprintf>
 800e654:	e014      	b.n	800e680 <Hum_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800e656:	edd7 7a07 	vldr	s15, [r7, #28]
 800e65a:	f107 030c 	add.w	r3, r7, #12
 800e65e:	2103      	movs	r1, #3
 800e660:	4618      	mov	r0, r3
 800e662:	eeb0 0a67 	vmov.f32	s0, s15
 800e666:	f7ff fbbf 	bl	800dde8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800e66e:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800e670:	9101      	str	r1, [sp, #4]
 800e672:	9200      	str	r2, [sp, #0]
 800e674:	4a0e      	ldr	r2, [pc, #56]	; (800e6b0 <Hum_Sensor_Handler+0x120>)
 800e676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e67a:	4806      	ldr	r0, [pc, #24]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e67c:	f000 ffb0 	bl	800f5e0 <sniprintf>
    }

    printf("%s", dataOut);
 800e680:	4904      	ldr	r1, [pc, #16]	; (800e694 <Hum_Sensor_Handler+0x104>)
 800e682:	4806      	ldr	r0, [pc, #24]	; (800e69c <Hum_Sensor_Handler+0x10c>)
 800e684:	f000 ff94 	bl	800f5b0 <iprintf>
  }
}
 800e688:	bf00      	nop
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	08010c78 	.word	0x08010c78
 800e694:	20000c6c 	.word	0x20000c6c
 800e698:	08010c8c 	.word	0x08010c8c
 800e69c:	0801093c 	.word	0x0801093c
 800e6a0:	20000195 	.word	0x20000195
 800e6a4:	08010ad8 	.word	0x08010ad8
 800e6a8:	08010aec 	.word	0x08010aec
 800e6ac:	08010c30 	.word	0x08010c30
 800e6b0:	08010b14 	.word	0x08010b14

0800e6b4 <trunc>:
 800e6b4:	ec51 0b10 	vmov	r0, r1, d0
 800e6b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e6bc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e6c0:	2b13      	cmp	r3, #19
 800e6c2:	b5d0      	push	{r4, r6, r7, lr}
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	dc10      	bgt.n	800e6ea <trunc+0x36>
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	bfa5      	ittet	ge
 800e6cc:	4a11      	ldrge	r2, [pc, #68]	; (800e714 <trunc+0x60>)
 800e6ce:	fa42 f303 	asrge.w	r3, r2, r3
 800e6d2:	2100      	movlt	r1, #0
 800e6d4:	2100      	movge	r1, #0
 800e6d6:	bfb9      	ittee	lt
 800e6d8:	2000      	movlt	r0, #0
 800e6da:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800e6de:	2000      	movge	r0, #0
 800e6e0:	ea24 0103 	bicge.w	r1, r4, r3
 800e6e4:	ec41 0b10 	vmov	d0, r0, r1
 800e6e8:	bdd0      	pop	{r4, r6, r7, pc}
 800e6ea:	2b33      	cmp	r3, #51	; 0x33
 800e6ec:	dd08      	ble.n	800e700 <trunc+0x4c>
 800e6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6f2:	d1f7      	bne.n	800e6e4 <trunc+0x30>
 800e6f4:	ee10 2a10 	vmov	r2, s0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	f7f1 fddf 	bl	80002bc <__adddf3>
 800e6fe:	e7f1      	b.n	800e6e4 <trunc+0x30>
 800e700:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	fa23 f202 	lsr.w	r2, r3, r2
 800e70c:	ea20 0602 	bic.w	r6, r0, r2
 800e710:	4630      	mov	r0, r6
 800e712:	e7e7      	b.n	800e6e4 <trunc+0x30>
 800e714:	000fffff 	.word	0x000fffff

0800e718 <pow>:
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	ed2d 8b02 	vpush	{d8}
 800e71e:	eeb0 8a40 	vmov.f32	s16, s0
 800e722:	eef0 8a60 	vmov.f32	s17, s1
 800e726:	ec55 4b11 	vmov	r4, r5, d1
 800e72a:	f000 f865 	bl	800e7f8 <__ieee754_pow>
 800e72e:	4622      	mov	r2, r4
 800e730:	462b      	mov	r3, r5
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	ec57 6b10 	vmov	r6, r7, d0
 800e73a:	f7f2 fa0f 	bl	8000b5c <__aeabi_dcmpun>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d13b      	bne.n	800e7ba <pow+0xa2>
 800e742:	ec51 0b18 	vmov	r0, r1, d8
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f7f2 f9d5 	bl	8000af8 <__aeabi_dcmpeq>
 800e74e:	b1b8      	cbz	r0, 800e780 <pow+0x68>
 800e750:	2200      	movs	r2, #0
 800e752:	2300      	movs	r3, #0
 800e754:	4620      	mov	r0, r4
 800e756:	4629      	mov	r1, r5
 800e758:	f7f2 f9ce 	bl	8000af8 <__aeabi_dcmpeq>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d146      	bne.n	800e7ee <pow+0xd6>
 800e760:	ec45 4b10 	vmov	d0, r4, r5
 800e764:	f000 fe61 	bl	800f42a <finite>
 800e768:	b338      	cbz	r0, 800e7ba <pow+0xa2>
 800e76a:	2200      	movs	r2, #0
 800e76c:	2300      	movs	r3, #0
 800e76e:	4620      	mov	r0, r4
 800e770:	4629      	mov	r1, r5
 800e772:	f7f2 f9cb 	bl	8000b0c <__aeabi_dcmplt>
 800e776:	b300      	cbz	r0, 800e7ba <pow+0xa2>
 800e778:	f000 fee8 	bl	800f54c <__errno>
 800e77c:	2322      	movs	r3, #34	; 0x22
 800e77e:	e01b      	b.n	800e7b8 <pow+0xa0>
 800e780:	ec47 6b10 	vmov	d0, r6, r7
 800e784:	f000 fe51 	bl	800f42a <finite>
 800e788:	b9e0      	cbnz	r0, 800e7c4 <pow+0xac>
 800e78a:	eeb0 0a48 	vmov.f32	s0, s16
 800e78e:	eef0 0a68 	vmov.f32	s1, s17
 800e792:	f000 fe4a 	bl	800f42a <finite>
 800e796:	b1a8      	cbz	r0, 800e7c4 <pow+0xac>
 800e798:	ec45 4b10 	vmov	d0, r4, r5
 800e79c:	f000 fe45 	bl	800f42a <finite>
 800e7a0:	b180      	cbz	r0, 800e7c4 <pow+0xac>
 800e7a2:	4632      	mov	r2, r6
 800e7a4:	463b      	mov	r3, r7
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	f7f2 f9d7 	bl	8000b5c <__aeabi_dcmpun>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d0e2      	beq.n	800e778 <pow+0x60>
 800e7b2:	f000 fecb 	bl	800f54c <__errno>
 800e7b6:	2321      	movs	r3, #33	; 0x21
 800e7b8:	6003      	str	r3, [r0, #0]
 800e7ba:	ecbd 8b02 	vpop	{d8}
 800e7be:	ec47 6b10 	vmov	d0, r6, r7
 800e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	f7f2 f994 	bl	8000af8 <__aeabi_dcmpeq>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d0f2      	beq.n	800e7ba <pow+0xa2>
 800e7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800e7d8:	eef0 0a68 	vmov.f32	s1, s17
 800e7dc:	f000 fe25 	bl	800f42a <finite>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d0ea      	beq.n	800e7ba <pow+0xa2>
 800e7e4:	ec45 4b10 	vmov	d0, r4, r5
 800e7e8:	f000 fe1f 	bl	800f42a <finite>
 800e7ec:	e7c3      	b.n	800e776 <pow+0x5e>
 800e7ee:	4f01      	ldr	r7, [pc, #4]	; (800e7f4 <pow+0xdc>)
 800e7f0:	2600      	movs	r6, #0
 800e7f2:	e7e2      	b.n	800e7ba <pow+0xa2>
 800e7f4:	3ff00000 	.word	0x3ff00000

0800e7f8 <__ieee754_pow>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	ed2d 8b06 	vpush	{d8-d10}
 800e800:	b089      	sub	sp, #36	; 0x24
 800e802:	ed8d 1b00 	vstr	d1, [sp]
 800e806:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e80a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e80e:	ea58 0102 	orrs.w	r1, r8, r2
 800e812:	ec57 6b10 	vmov	r6, r7, d0
 800e816:	d115      	bne.n	800e844 <__ieee754_pow+0x4c>
 800e818:	19b3      	adds	r3, r6, r6
 800e81a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e81e:	4152      	adcs	r2, r2
 800e820:	4299      	cmp	r1, r3
 800e822:	4b89      	ldr	r3, [pc, #548]	; (800ea48 <__ieee754_pow+0x250>)
 800e824:	4193      	sbcs	r3, r2
 800e826:	f080 84d2 	bcs.w	800f1ce <__ieee754_pow+0x9d6>
 800e82a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82e:	4630      	mov	r0, r6
 800e830:	4639      	mov	r1, r7
 800e832:	f7f1 fd43 	bl	80002bc <__adddf3>
 800e836:	ec41 0b10 	vmov	d0, r0, r1
 800e83a:	b009      	add	sp, #36	; 0x24
 800e83c:	ecbd 8b06 	vpop	{d8-d10}
 800e840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e844:	4b81      	ldr	r3, [pc, #516]	; (800ea4c <__ieee754_pow+0x254>)
 800e846:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e84a:	429c      	cmp	r4, r3
 800e84c:	ee10 aa10 	vmov	sl, s0
 800e850:	463d      	mov	r5, r7
 800e852:	dc06      	bgt.n	800e862 <__ieee754_pow+0x6a>
 800e854:	d101      	bne.n	800e85a <__ieee754_pow+0x62>
 800e856:	2e00      	cmp	r6, #0
 800e858:	d1e7      	bne.n	800e82a <__ieee754_pow+0x32>
 800e85a:	4598      	cmp	r8, r3
 800e85c:	dc01      	bgt.n	800e862 <__ieee754_pow+0x6a>
 800e85e:	d10f      	bne.n	800e880 <__ieee754_pow+0x88>
 800e860:	b172      	cbz	r2, 800e880 <__ieee754_pow+0x88>
 800e862:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e866:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e86a:	ea55 050a 	orrs.w	r5, r5, sl
 800e86e:	d1dc      	bne.n	800e82a <__ieee754_pow+0x32>
 800e870:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e874:	18db      	adds	r3, r3, r3
 800e876:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e87a:	4152      	adcs	r2, r2
 800e87c:	429d      	cmp	r5, r3
 800e87e:	e7d0      	b.n	800e822 <__ieee754_pow+0x2a>
 800e880:	2d00      	cmp	r5, #0
 800e882:	da3b      	bge.n	800e8fc <__ieee754_pow+0x104>
 800e884:	4b72      	ldr	r3, [pc, #456]	; (800ea50 <__ieee754_pow+0x258>)
 800e886:	4598      	cmp	r8, r3
 800e888:	dc51      	bgt.n	800e92e <__ieee754_pow+0x136>
 800e88a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e88e:	4598      	cmp	r8, r3
 800e890:	f340 84ac 	ble.w	800f1ec <__ieee754_pow+0x9f4>
 800e894:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e898:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e89c:	2b14      	cmp	r3, #20
 800e89e:	dd0f      	ble.n	800e8c0 <__ieee754_pow+0xc8>
 800e8a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e8a4:	fa22 f103 	lsr.w	r1, r2, r3
 800e8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	f040 849d 	bne.w	800f1ec <__ieee754_pow+0x9f4>
 800e8b2:	f001 0101 	and.w	r1, r1, #1
 800e8b6:	f1c1 0302 	rsb	r3, r1, #2
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	b182      	cbz	r2, 800e8e0 <__ieee754_pow+0xe8>
 800e8be:	e05f      	b.n	800e980 <__ieee754_pow+0x188>
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	d15b      	bne.n	800e97c <__ieee754_pow+0x184>
 800e8c4:	f1c3 0314 	rsb	r3, r3, #20
 800e8c8:	fa48 f103 	asr.w	r1, r8, r3
 800e8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d0:	4543      	cmp	r3, r8
 800e8d2:	f040 8488 	bne.w	800f1e6 <__ieee754_pow+0x9ee>
 800e8d6:	f001 0101 	and.w	r1, r1, #1
 800e8da:	f1c1 0302 	rsb	r3, r1, #2
 800e8de:	9304      	str	r3, [sp, #16]
 800e8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ea54 <__ieee754_pow+0x25c>)
 800e8e2:	4598      	cmp	r8, r3
 800e8e4:	d132      	bne.n	800e94c <__ieee754_pow+0x154>
 800e8e6:	f1b9 0f00 	cmp.w	r9, #0
 800e8ea:	f280 8478 	bge.w	800f1de <__ieee754_pow+0x9e6>
 800e8ee:	4959      	ldr	r1, [pc, #356]	; (800ea54 <__ieee754_pow+0x25c>)
 800e8f0:	4632      	mov	r2, r6
 800e8f2:	463b      	mov	r3, r7
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	f7f1 ffc1 	bl	800087c <__aeabi_ddiv>
 800e8fa:	e79c      	b.n	800e836 <__ieee754_pow+0x3e>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	9304      	str	r3, [sp, #16]
 800e900:	2a00      	cmp	r2, #0
 800e902:	d13d      	bne.n	800e980 <__ieee754_pow+0x188>
 800e904:	4b51      	ldr	r3, [pc, #324]	; (800ea4c <__ieee754_pow+0x254>)
 800e906:	4598      	cmp	r8, r3
 800e908:	d1ea      	bne.n	800e8e0 <__ieee754_pow+0xe8>
 800e90a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e90e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e912:	ea53 030a 	orrs.w	r3, r3, sl
 800e916:	f000 845a 	beq.w	800f1ce <__ieee754_pow+0x9d6>
 800e91a:	4b4f      	ldr	r3, [pc, #316]	; (800ea58 <__ieee754_pow+0x260>)
 800e91c:	429c      	cmp	r4, r3
 800e91e:	dd08      	ble.n	800e932 <__ieee754_pow+0x13a>
 800e920:	f1b9 0f00 	cmp.w	r9, #0
 800e924:	f2c0 8457 	blt.w	800f1d6 <__ieee754_pow+0x9de>
 800e928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e92c:	e783      	b.n	800e836 <__ieee754_pow+0x3e>
 800e92e:	2302      	movs	r3, #2
 800e930:	e7e5      	b.n	800e8fe <__ieee754_pow+0x106>
 800e932:	f1b9 0f00 	cmp.w	r9, #0
 800e936:	f04f 0000 	mov.w	r0, #0
 800e93a:	f04f 0100 	mov.w	r1, #0
 800e93e:	f6bf af7a 	bge.w	800e836 <__ieee754_pow+0x3e>
 800e942:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e946:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e94a:	e774      	b.n	800e836 <__ieee754_pow+0x3e>
 800e94c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e950:	d106      	bne.n	800e960 <__ieee754_pow+0x168>
 800e952:	4632      	mov	r2, r6
 800e954:	463b      	mov	r3, r7
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f1 fe65 	bl	8000628 <__aeabi_dmul>
 800e95e:	e76a      	b.n	800e836 <__ieee754_pow+0x3e>
 800e960:	4b3e      	ldr	r3, [pc, #248]	; (800ea5c <__ieee754_pow+0x264>)
 800e962:	4599      	cmp	r9, r3
 800e964:	d10c      	bne.n	800e980 <__ieee754_pow+0x188>
 800e966:	2d00      	cmp	r5, #0
 800e968:	db0a      	blt.n	800e980 <__ieee754_pow+0x188>
 800e96a:	ec47 6b10 	vmov	d0, r6, r7
 800e96e:	b009      	add	sp, #36	; 0x24
 800e970:	ecbd 8b06 	vpop	{d8-d10}
 800e974:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	f000 bc6c 	b.w	800f254 <__ieee754_sqrt>
 800e97c:	2300      	movs	r3, #0
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	ec47 6b10 	vmov	d0, r6, r7
 800e984:	f000 fd48 	bl	800f418 <fabs>
 800e988:	ec51 0b10 	vmov	r0, r1, d0
 800e98c:	f1ba 0f00 	cmp.w	sl, #0
 800e990:	d129      	bne.n	800e9e6 <__ieee754_pow+0x1ee>
 800e992:	b124      	cbz	r4, 800e99e <__ieee754_pow+0x1a6>
 800e994:	4b2f      	ldr	r3, [pc, #188]	; (800ea54 <__ieee754_pow+0x25c>)
 800e996:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d123      	bne.n	800e9e6 <__ieee754_pow+0x1ee>
 800e99e:	f1b9 0f00 	cmp.w	r9, #0
 800e9a2:	da05      	bge.n	800e9b0 <__ieee754_pow+0x1b8>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	492a      	ldr	r1, [pc, #168]	; (800ea54 <__ieee754_pow+0x25c>)
 800e9ac:	f7f1 ff66 	bl	800087c <__aeabi_ddiv>
 800e9b0:	2d00      	cmp	r5, #0
 800e9b2:	f6bf af40 	bge.w	800e836 <__ieee754_pow+0x3e>
 800e9b6:	9b04      	ldr	r3, [sp, #16]
 800e9b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e9bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9c0:	4323      	orrs	r3, r4
 800e9c2:	d108      	bne.n	800e9d6 <__ieee754_pow+0x1de>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	f7f1 fc74 	bl	80002b8 <__aeabi_dsub>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	e78f      	b.n	800e8f6 <__ieee754_pow+0xfe>
 800e9d6:	9b04      	ldr	r3, [sp, #16]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	f47f af2c 	bne.w	800e836 <__ieee754_pow+0x3e>
 800e9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	e727      	b.n	800e836 <__ieee754_pow+0x3e>
 800e9e6:	0feb      	lsrs	r3, r5, #31
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	9306      	str	r3, [sp, #24]
 800e9ec:	9a06      	ldr	r2, [sp, #24]
 800e9ee:	9b04      	ldr	r3, [sp, #16]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	d102      	bne.n	800e9fa <__ieee754_pow+0x202>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	e7e6      	b.n	800e9c8 <__ieee754_pow+0x1d0>
 800e9fa:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <__ieee754_pow+0x268>)
 800e9fc:	4598      	cmp	r8, r3
 800e9fe:	f340 80fb 	ble.w	800ebf8 <__ieee754_pow+0x400>
 800ea02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ea06:	4598      	cmp	r8, r3
 800ea08:	4b13      	ldr	r3, [pc, #76]	; (800ea58 <__ieee754_pow+0x260>)
 800ea0a:	dd0c      	ble.n	800ea26 <__ieee754_pow+0x22e>
 800ea0c:	429c      	cmp	r4, r3
 800ea0e:	dc0f      	bgt.n	800ea30 <__ieee754_pow+0x238>
 800ea10:	f1b9 0f00 	cmp.w	r9, #0
 800ea14:	da0f      	bge.n	800ea36 <__ieee754_pow+0x23e>
 800ea16:	2000      	movs	r0, #0
 800ea18:	b009      	add	sp, #36	; 0x24
 800ea1a:	ecbd 8b06 	vpop	{d8-d10}
 800ea1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea22:	f000 bcf0 	b.w	800f406 <__math_oflow>
 800ea26:	429c      	cmp	r4, r3
 800ea28:	dbf2      	blt.n	800ea10 <__ieee754_pow+0x218>
 800ea2a:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <__ieee754_pow+0x25c>)
 800ea2c:	429c      	cmp	r4, r3
 800ea2e:	dd19      	ble.n	800ea64 <__ieee754_pow+0x26c>
 800ea30:	f1b9 0f00 	cmp.w	r9, #0
 800ea34:	dcef      	bgt.n	800ea16 <__ieee754_pow+0x21e>
 800ea36:	2000      	movs	r0, #0
 800ea38:	b009      	add	sp, #36	; 0x24
 800ea3a:	ecbd 8b06 	vpop	{d8-d10}
 800ea3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea42:	f000 bcd7 	b.w	800f3f4 <__math_uflow>
 800ea46:	bf00      	nop
 800ea48:	fff00000 	.word	0xfff00000
 800ea4c:	7ff00000 	.word	0x7ff00000
 800ea50:	433fffff 	.word	0x433fffff
 800ea54:	3ff00000 	.word	0x3ff00000
 800ea58:	3fefffff 	.word	0x3fefffff
 800ea5c:	3fe00000 	.word	0x3fe00000
 800ea60:	41e00000 	.word	0x41e00000
 800ea64:	4b60      	ldr	r3, [pc, #384]	; (800ebe8 <__ieee754_pow+0x3f0>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	f7f1 fc26 	bl	80002b8 <__aeabi_dsub>
 800ea6c:	a354      	add	r3, pc, #336	; (adr r3, 800ebc0 <__ieee754_pow+0x3c8>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	4604      	mov	r4, r0
 800ea74:	460d      	mov	r5, r1
 800ea76:	f7f1 fdd7 	bl	8000628 <__aeabi_dmul>
 800ea7a:	a353      	add	r3, pc, #332	; (adr r3, 800ebc8 <__ieee754_pow+0x3d0>)
 800ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea80:	4606      	mov	r6, r0
 800ea82:	460f      	mov	r7, r1
 800ea84:	4620      	mov	r0, r4
 800ea86:	4629      	mov	r1, r5
 800ea88:	f7f1 fdce 	bl	8000628 <__aeabi_dmul>
 800ea8c:	4b57      	ldr	r3, [pc, #348]	; (800ebec <__ieee754_pow+0x3f4>)
 800ea8e:	4682      	mov	sl, r0
 800ea90:	468b      	mov	fp, r1
 800ea92:	2200      	movs	r2, #0
 800ea94:	4620      	mov	r0, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	f7f1 fdc6 	bl	8000628 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	a14b      	add	r1, pc, #300	; (adr r1, 800ebd0 <__ieee754_pow+0x3d8>)
 800eaa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaa6:	f7f1 fc07 	bl	80002b8 <__aeabi_dsub>
 800eaaa:	4622      	mov	r2, r4
 800eaac:	462b      	mov	r3, r5
 800eaae:	f7f1 fdbb 	bl	8000628 <__aeabi_dmul>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	2000      	movs	r0, #0
 800eab8:	494d      	ldr	r1, [pc, #308]	; (800ebf0 <__ieee754_pow+0x3f8>)
 800eaba:	f7f1 fbfd 	bl	80002b8 <__aeabi_dsub>
 800eabe:	4622      	mov	r2, r4
 800eac0:	4680      	mov	r8, r0
 800eac2:	4689      	mov	r9, r1
 800eac4:	462b      	mov	r3, r5
 800eac6:	4620      	mov	r0, r4
 800eac8:	4629      	mov	r1, r5
 800eaca:	f7f1 fdad 	bl	8000628 <__aeabi_dmul>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4640      	mov	r0, r8
 800ead4:	4649      	mov	r1, r9
 800ead6:	f7f1 fda7 	bl	8000628 <__aeabi_dmul>
 800eada:	a33f      	add	r3, pc, #252	; (adr r3, 800ebd8 <__ieee754_pow+0x3e0>)
 800eadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae0:	f7f1 fda2 	bl	8000628 <__aeabi_dmul>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	4650      	mov	r0, sl
 800eaea:	4659      	mov	r1, fp
 800eaec:	f7f1 fbe4 	bl	80002b8 <__aeabi_dsub>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	4630      	mov	r0, r6
 800eafa:	4639      	mov	r1, r7
 800eafc:	f7f1 fbde 	bl	80002bc <__adddf3>
 800eb00:	2000      	movs	r0, #0
 800eb02:	4632      	mov	r2, r6
 800eb04:	463b      	mov	r3, r7
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	f7f1 fbd5 	bl	80002b8 <__aeabi_dsub>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4640      	mov	r0, r8
 800eb14:	4649      	mov	r1, r9
 800eb16:	f7f1 fbcf 	bl	80002b8 <__aeabi_dsub>
 800eb1a:	9b04      	ldr	r3, [sp, #16]
 800eb1c:	9a06      	ldr	r2, [sp, #24]
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	4313      	orrs	r3, r2
 800eb22:	4682      	mov	sl, r0
 800eb24:	468b      	mov	fp, r1
 800eb26:	f040 81e7 	bne.w	800eef8 <__ieee754_pow+0x700>
 800eb2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ebe0 <__ieee754_pow+0x3e8>
 800eb2e:	eeb0 8a47 	vmov.f32	s16, s14
 800eb32:	eef0 8a67 	vmov.f32	s17, s15
 800eb36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb3a:	2600      	movs	r6, #0
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	463b      	mov	r3, r7
 800eb40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb44:	f7f1 fbb8 	bl	80002b8 <__aeabi_dsub>
 800eb48:	4622      	mov	r2, r4
 800eb4a:	462b      	mov	r3, r5
 800eb4c:	f7f1 fd6c 	bl	8000628 <__aeabi_dmul>
 800eb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb54:	4680      	mov	r8, r0
 800eb56:	4689      	mov	r9, r1
 800eb58:	4650      	mov	r0, sl
 800eb5a:	4659      	mov	r1, fp
 800eb5c:	f7f1 fd64 	bl	8000628 <__aeabi_dmul>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	4640      	mov	r0, r8
 800eb66:	4649      	mov	r1, r9
 800eb68:	f7f1 fba8 	bl	80002bc <__adddf3>
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	4680      	mov	r8, r0
 800eb72:	4689      	mov	r9, r1
 800eb74:	4620      	mov	r0, r4
 800eb76:	4629      	mov	r1, r5
 800eb78:	f7f1 fd56 	bl	8000628 <__aeabi_dmul>
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4604      	mov	r4, r0
 800eb80:	460d      	mov	r5, r1
 800eb82:	4602      	mov	r2, r0
 800eb84:	4649      	mov	r1, r9
 800eb86:	4640      	mov	r0, r8
 800eb88:	f7f1 fb98 	bl	80002bc <__adddf3>
 800eb8c:	4b19      	ldr	r3, [pc, #100]	; (800ebf4 <__ieee754_pow+0x3fc>)
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	ec45 4b19 	vmov	d9, r4, r5
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	468b      	mov	fp, r1
 800eb9a:	f340 82f1 	ble.w	800f180 <__ieee754_pow+0x988>
 800eb9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eba2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eba6:	4303      	orrs	r3, r0
 800eba8:	f000 81e4 	beq.w	800ef74 <__ieee754_pow+0x77c>
 800ebac:	ec51 0b18 	vmov	r0, r1, d8
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f7f1 ffaa 	bl	8000b0c <__aeabi_dcmplt>
 800ebb8:	3800      	subs	r0, #0
 800ebba:	bf18      	it	ne
 800ebbc:	2001      	movne	r0, #1
 800ebbe:	e72b      	b.n	800ea18 <__ieee754_pow+0x220>
 800ebc0:	60000000 	.word	0x60000000
 800ebc4:	3ff71547 	.word	0x3ff71547
 800ebc8:	f85ddf44 	.word	0xf85ddf44
 800ebcc:	3e54ae0b 	.word	0x3e54ae0b
 800ebd0:	55555555 	.word	0x55555555
 800ebd4:	3fd55555 	.word	0x3fd55555
 800ebd8:	652b82fe 	.word	0x652b82fe
 800ebdc:	3ff71547 	.word	0x3ff71547
 800ebe0:	00000000 	.word	0x00000000
 800ebe4:	bff00000 	.word	0xbff00000
 800ebe8:	3ff00000 	.word	0x3ff00000
 800ebec:	3fd00000 	.word	0x3fd00000
 800ebf0:	3fe00000 	.word	0x3fe00000
 800ebf4:	408fffff 	.word	0x408fffff
 800ebf8:	4bd5      	ldr	r3, [pc, #852]	; (800ef50 <__ieee754_pow+0x758>)
 800ebfa:	402b      	ands	r3, r5
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	b92b      	cbnz	r3, 800ec0c <__ieee754_pow+0x414>
 800ec00:	4bd4      	ldr	r3, [pc, #848]	; (800ef54 <__ieee754_pow+0x75c>)
 800ec02:	f7f1 fd11 	bl	8000628 <__aeabi_dmul>
 800ec06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	1523      	asrs	r3, r4, #20
 800ec0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec12:	4413      	add	r3, r2
 800ec14:	9305      	str	r3, [sp, #20]
 800ec16:	4bd0      	ldr	r3, [pc, #832]	; (800ef58 <__ieee754_pow+0x760>)
 800ec18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ec1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ec20:	429c      	cmp	r4, r3
 800ec22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec26:	dd08      	ble.n	800ec3a <__ieee754_pow+0x442>
 800ec28:	4bcc      	ldr	r3, [pc, #816]	; (800ef5c <__ieee754_pow+0x764>)
 800ec2a:	429c      	cmp	r4, r3
 800ec2c:	f340 8162 	ble.w	800eef4 <__ieee754_pow+0x6fc>
 800ec30:	9b05      	ldr	r3, [sp, #20]
 800ec32:	3301      	adds	r3, #1
 800ec34:	9305      	str	r3, [sp, #20]
 800ec36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ec3a:	2400      	movs	r4, #0
 800ec3c:	00e3      	lsls	r3, r4, #3
 800ec3e:	9307      	str	r3, [sp, #28]
 800ec40:	4bc7      	ldr	r3, [pc, #796]	; (800ef60 <__ieee754_pow+0x768>)
 800ec42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec46:	ed93 7b00 	vldr	d7, [r3]
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	ec53 2b17 	vmov	r2, r3, d7
 800ec50:	eeb0 9a47 	vmov.f32	s18, s14
 800ec54:	eef0 9a67 	vmov.f32	s19, s15
 800ec58:	4682      	mov	sl, r0
 800ec5a:	f7f1 fb2d 	bl	80002b8 <__aeabi_dsub>
 800ec5e:	4652      	mov	r2, sl
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	462b      	mov	r3, r5
 800ec66:	ec51 0b19 	vmov	r0, r1, d9
 800ec6a:	f7f1 fb27 	bl	80002bc <__adddf3>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	2000      	movs	r0, #0
 800ec74:	49bb      	ldr	r1, [pc, #748]	; (800ef64 <__ieee754_pow+0x76c>)
 800ec76:	f7f1 fe01 	bl	800087c <__aeabi_ddiv>
 800ec7a:	ec41 0b1a 	vmov	d10, r0, r1
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	4630      	mov	r0, r6
 800ec84:	4639      	mov	r1, r7
 800ec86:	f7f1 fccf 	bl	8000628 <__aeabi_dmul>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec90:	9302      	str	r3, [sp, #8]
 800ec92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec96:	46ab      	mov	fp, r5
 800ec98:	106d      	asrs	r5, r5, #1
 800ec9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eca2:	ec41 0b18 	vmov	d8, r0, r1
 800eca6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ecaa:	2200      	movs	r2, #0
 800ecac:	4640      	mov	r0, r8
 800ecae:	4649      	mov	r1, r9
 800ecb0:	4614      	mov	r4, r2
 800ecb2:	461d      	mov	r5, r3
 800ecb4:	f7f1 fcb8 	bl	8000628 <__aeabi_dmul>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 fafa 	bl	80002b8 <__aeabi_dsub>
 800ecc4:	ec53 2b19 	vmov	r2, r3, d9
 800ecc8:	4606      	mov	r6, r0
 800ecca:	460f      	mov	r7, r1
 800eccc:	4620      	mov	r0, r4
 800ecce:	4629      	mov	r1, r5
 800ecd0:	f7f1 faf2 	bl	80002b8 <__aeabi_dsub>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4650      	mov	r0, sl
 800ecda:	4659      	mov	r1, fp
 800ecdc:	f7f1 faec 	bl	80002b8 <__aeabi_dsub>
 800ece0:	4642      	mov	r2, r8
 800ece2:	464b      	mov	r3, r9
 800ece4:	f7f1 fca0 	bl	8000628 <__aeabi_dmul>
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	4630      	mov	r0, r6
 800ecee:	4639      	mov	r1, r7
 800ecf0:	f7f1 fae2 	bl	80002b8 <__aeabi_dsub>
 800ecf4:	ec53 2b1a 	vmov	r2, r3, d10
 800ecf8:	f7f1 fc96 	bl	8000628 <__aeabi_dmul>
 800ecfc:	ec53 2b18 	vmov	r2, r3, d8
 800ed00:	ec41 0b19 	vmov	d9, r0, r1
 800ed04:	ec51 0b18 	vmov	r0, r1, d8
 800ed08:	f7f1 fc8e 	bl	8000628 <__aeabi_dmul>
 800ed0c:	a37c      	add	r3, pc, #496	; (adr r3, 800ef00 <__ieee754_pow+0x708>)
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	4604      	mov	r4, r0
 800ed14:	460d      	mov	r5, r1
 800ed16:	f7f1 fc87 	bl	8000628 <__aeabi_dmul>
 800ed1a:	a37b      	add	r3, pc, #492	; (adr r3, 800ef08 <__ieee754_pow+0x710>)
 800ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed20:	f7f1 facc 	bl	80002bc <__adddf3>
 800ed24:	4622      	mov	r2, r4
 800ed26:	462b      	mov	r3, r5
 800ed28:	f7f1 fc7e 	bl	8000628 <__aeabi_dmul>
 800ed2c:	a378      	add	r3, pc, #480	; (adr r3, 800ef10 <__ieee754_pow+0x718>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 fac3 	bl	80002bc <__adddf3>
 800ed36:	4622      	mov	r2, r4
 800ed38:	462b      	mov	r3, r5
 800ed3a:	f7f1 fc75 	bl	8000628 <__aeabi_dmul>
 800ed3e:	a376      	add	r3, pc, #472	; (adr r3, 800ef18 <__ieee754_pow+0x720>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 faba 	bl	80002bc <__adddf3>
 800ed48:	4622      	mov	r2, r4
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	f7f1 fc6c 	bl	8000628 <__aeabi_dmul>
 800ed50:	a373      	add	r3, pc, #460	; (adr r3, 800ef20 <__ieee754_pow+0x728>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fab1 	bl	80002bc <__adddf3>
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	f7f1 fc63 	bl	8000628 <__aeabi_dmul>
 800ed62:	a371      	add	r3, pc, #452	; (adr r3, 800ef28 <__ieee754_pow+0x730>)
 800ed64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed68:	f7f1 faa8 	bl	80002bc <__adddf3>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	4606      	mov	r6, r0
 800ed70:	460f      	mov	r7, r1
 800ed72:	462b      	mov	r3, r5
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 fc56 	bl	8000628 <__aeabi_dmul>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fc50 	bl	8000628 <__aeabi_dmul>
 800ed88:	4642      	mov	r2, r8
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	464b      	mov	r3, r9
 800ed90:	ec51 0b18 	vmov	r0, r1, d8
 800ed94:	f7f1 fa92 	bl	80002bc <__adddf3>
 800ed98:	ec53 2b19 	vmov	r2, r3, d9
 800ed9c:	f7f1 fc44 	bl	8000628 <__aeabi_dmul>
 800eda0:	4622      	mov	r2, r4
 800eda2:	462b      	mov	r3, r5
 800eda4:	f7f1 fa8a 	bl	80002bc <__adddf3>
 800eda8:	4642      	mov	r2, r8
 800edaa:	4682      	mov	sl, r0
 800edac:	468b      	mov	fp, r1
 800edae:	464b      	mov	r3, r9
 800edb0:	4640      	mov	r0, r8
 800edb2:	4649      	mov	r1, r9
 800edb4:	f7f1 fc38 	bl	8000628 <__aeabi_dmul>
 800edb8:	4b6b      	ldr	r3, [pc, #428]	; (800ef68 <__ieee754_pow+0x770>)
 800edba:	2200      	movs	r2, #0
 800edbc:	4606      	mov	r6, r0
 800edbe:	460f      	mov	r7, r1
 800edc0:	f7f1 fa7c 	bl	80002bc <__adddf3>
 800edc4:	4652      	mov	r2, sl
 800edc6:	465b      	mov	r3, fp
 800edc8:	f7f1 fa78 	bl	80002bc <__adddf3>
 800edcc:	2000      	movs	r0, #0
 800edce:	4604      	mov	r4, r0
 800edd0:	460d      	mov	r5, r1
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fc25 	bl	8000628 <__aeabi_dmul>
 800edde:	4b62      	ldr	r3, [pc, #392]	; (800ef68 <__ieee754_pow+0x770>)
 800ede0:	4680      	mov	r8, r0
 800ede2:	4689      	mov	r9, r1
 800ede4:	2200      	movs	r2, #0
 800ede6:	4620      	mov	r0, r4
 800ede8:	4629      	mov	r1, r5
 800edea:	f7f1 fa65 	bl	80002b8 <__aeabi_dsub>
 800edee:	4632      	mov	r2, r6
 800edf0:	463b      	mov	r3, r7
 800edf2:	f7f1 fa61 	bl	80002b8 <__aeabi_dsub>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4650      	mov	r0, sl
 800edfc:	4659      	mov	r1, fp
 800edfe:	f7f1 fa5b 	bl	80002b8 <__aeabi_dsub>
 800ee02:	ec53 2b18 	vmov	r2, r3, d8
 800ee06:	f7f1 fc0f 	bl	8000628 <__aeabi_dmul>
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	460f      	mov	r7, r1
 800ee10:	462b      	mov	r3, r5
 800ee12:	ec51 0b19 	vmov	r0, r1, d9
 800ee16:	f7f1 fc07 	bl	8000628 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4630      	mov	r0, r6
 800ee20:	4639      	mov	r1, r7
 800ee22:	f7f1 fa4b 	bl	80002bc <__adddf3>
 800ee26:	4606      	mov	r6, r0
 800ee28:	460f      	mov	r7, r1
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	4640      	mov	r0, r8
 800ee30:	4649      	mov	r1, r9
 800ee32:	f7f1 fa43 	bl	80002bc <__adddf3>
 800ee36:	a33e      	add	r3, pc, #248	; (adr r3, 800ef30 <__ieee754_pow+0x738>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	f7f1 fbf1 	bl	8000628 <__aeabi_dmul>
 800ee46:	4642      	mov	r2, r8
 800ee48:	ec41 0b18 	vmov	d8, r0, r1
 800ee4c:	464b      	mov	r3, r9
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fa31 	bl	80002b8 <__aeabi_dsub>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	f7f1 fa2b 	bl	80002b8 <__aeabi_dsub>
 800ee62:	a335      	add	r3, pc, #212	; (adr r3, 800ef38 <__ieee754_pow+0x740>)
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	f7f1 fbde 	bl	8000628 <__aeabi_dmul>
 800ee6c:	a334      	add	r3, pc, #208	; (adr r3, 800ef40 <__ieee754_pow+0x748>)
 800ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee72:	4606      	mov	r6, r0
 800ee74:	460f      	mov	r7, r1
 800ee76:	4620      	mov	r0, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7f1 fbd5 	bl	8000628 <__aeabi_dmul>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4630      	mov	r0, r6
 800ee84:	4639      	mov	r1, r7
 800ee86:	f7f1 fa19 	bl	80002bc <__adddf3>
 800ee8a:	9a07      	ldr	r2, [sp, #28]
 800ee8c:	4b37      	ldr	r3, [pc, #220]	; (800ef6c <__ieee754_pow+0x774>)
 800ee8e:	4413      	add	r3, r2
 800ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee94:	f7f1 fa12 	bl	80002bc <__adddf3>
 800ee98:	4682      	mov	sl, r0
 800ee9a:	9805      	ldr	r0, [sp, #20]
 800ee9c:	468b      	mov	fp, r1
 800ee9e:	f7f1 fb59 	bl	8000554 <__aeabi_i2d>
 800eea2:	9a07      	ldr	r2, [sp, #28]
 800eea4:	4b32      	ldr	r3, [pc, #200]	; (800ef70 <__ieee754_pow+0x778>)
 800eea6:	4413      	add	r3, r2
 800eea8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eeac:	4606      	mov	r6, r0
 800eeae:	460f      	mov	r7, r1
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	ec51 0b18 	vmov	r0, r1, d8
 800eeb8:	f7f1 fa00 	bl	80002bc <__adddf3>
 800eebc:	4642      	mov	r2, r8
 800eebe:	464b      	mov	r3, r9
 800eec0:	f7f1 f9fc 	bl	80002bc <__adddf3>
 800eec4:	4632      	mov	r2, r6
 800eec6:	463b      	mov	r3, r7
 800eec8:	f7f1 f9f8 	bl	80002bc <__adddf3>
 800eecc:	2000      	movs	r0, #0
 800eece:	4632      	mov	r2, r6
 800eed0:	463b      	mov	r3, r7
 800eed2:	4604      	mov	r4, r0
 800eed4:	460d      	mov	r5, r1
 800eed6:	f7f1 f9ef 	bl	80002b8 <__aeabi_dsub>
 800eeda:	4642      	mov	r2, r8
 800eedc:	464b      	mov	r3, r9
 800eede:	f7f1 f9eb 	bl	80002b8 <__aeabi_dsub>
 800eee2:	ec53 2b18 	vmov	r2, r3, d8
 800eee6:	f7f1 f9e7 	bl	80002b8 <__aeabi_dsub>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4650      	mov	r0, sl
 800eef0:	4659      	mov	r1, fp
 800eef2:	e610      	b.n	800eb16 <__ieee754_pow+0x31e>
 800eef4:	2401      	movs	r4, #1
 800eef6:	e6a1      	b.n	800ec3c <__ieee754_pow+0x444>
 800eef8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ef48 <__ieee754_pow+0x750>
 800eefc:	e617      	b.n	800eb2e <__ieee754_pow+0x336>
 800eefe:	bf00      	nop
 800ef00:	4a454eef 	.word	0x4a454eef
 800ef04:	3fca7e28 	.word	0x3fca7e28
 800ef08:	93c9db65 	.word	0x93c9db65
 800ef0c:	3fcd864a 	.word	0x3fcd864a
 800ef10:	a91d4101 	.word	0xa91d4101
 800ef14:	3fd17460 	.word	0x3fd17460
 800ef18:	518f264d 	.word	0x518f264d
 800ef1c:	3fd55555 	.word	0x3fd55555
 800ef20:	db6fabff 	.word	0xdb6fabff
 800ef24:	3fdb6db6 	.word	0x3fdb6db6
 800ef28:	33333303 	.word	0x33333303
 800ef2c:	3fe33333 	.word	0x3fe33333
 800ef30:	e0000000 	.word	0xe0000000
 800ef34:	3feec709 	.word	0x3feec709
 800ef38:	dc3a03fd 	.word	0xdc3a03fd
 800ef3c:	3feec709 	.word	0x3feec709
 800ef40:	145b01f5 	.word	0x145b01f5
 800ef44:	be3e2fe0 	.word	0xbe3e2fe0
 800ef48:	00000000 	.word	0x00000000
 800ef4c:	3ff00000 	.word	0x3ff00000
 800ef50:	7ff00000 	.word	0x7ff00000
 800ef54:	43400000 	.word	0x43400000
 800ef58:	0003988e 	.word	0x0003988e
 800ef5c:	000bb679 	.word	0x000bb679
 800ef60:	08010cd0 	.word	0x08010cd0
 800ef64:	3ff00000 	.word	0x3ff00000
 800ef68:	40080000 	.word	0x40080000
 800ef6c:	08010cf0 	.word	0x08010cf0
 800ef70:	08010ce0 	.word	0x08010ce0
 800ef74:	a3b5      	add	r3, pc, #724	; (adr r3, 800f24c <__ieee754_pow+0xa54>)
 800ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 f99d 	bl	80002bc <__adddf3>
 800ef82:	4622      	mov	r2, r4
 800ef84:	ec41 0b1a 	vmov	d10, r0, r1
 800ef88:	462b      	mov	r3, r5
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	f7f1 f993 	bl	80002b8 <__aeabi_dsub>
 800ef92:	4602      	mov	r2, r0
 800ef94:	460b      	mov	r3, r1
 800ef96:	ec51 0b1a 	vmov	r0, r1, d10
 800ef9a:	f7f1 fdd5 	bl	8000b48 <__aeabi_dcmpgt>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	f47f ae04 	bne.w	800ebac <__ieee754_pow+0x3b4>
 800efa4:	4aa4      	ldr	r2, [pc, #656]	; (800f238 <__ieee754_pow+0xa40>)
 800efa6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800efaa:	4293      	cmp	r3, r2
 800efac:	f340 8108 	ble.w	800f1c0 <__ieee754_pow+0x9c8>
 800efb0:	151b      	asrs	r3, r3, #20
 800efb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800efb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800efba:	fa4a f303 	asr.w	r3, sl, r3
 800efbe:	445b      	add	r3, fp
 800efc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800efc4:	4e9d      	ldr	r6, [pc, #628]	; (800f23c <__ieee754_pow+0xa44>)
 800efc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800efca:	4116      	asrs	r6, r2
 800efcc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800efd0:	2000      	movs	r0, #0
 800efd2:	ea23 0106 	bic.w	r1, r3, r6
 800efd6:	f1c2 0214 	rsb	r2, r2, #20
 800efda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800efde:	fa4a fa02 	asr.w	sl, sl, r2
 800efe2:	f1bb 0f00 	cmp.w	fp, #0
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4620      	mov	r0, r4
 800efec:	4629      	mov	r1, r5
 800efee:	bfb8      	it	lt
 800eff0:	f1ca 0a00 	rsblt	sl, sl, #0
 800eff4:	f7f1 f960 	bl	80002b8 <__aeabi_dsub>
 800eff8:	ec41 0b19 	vmov	d9, r0, r1
 800effc:	4642      	mov	r2, r8
 800effe:	464b      	mov	r3, r9
 800f000:	ec51 0b19 	vmov	r0, r1, d9
 800f004:	f7f1 f95a 	bl	80002bc <__adddf3>
 800f008:	a37b      	add	r3, pc, #492	; (adr r3, 800f1f8 <__ieee754_pow+0xa00>)
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	2000      	movs	r0, #0
 800f010:	4604      	mov	r4, r0
 800f012:	460d      	mov	r5, r1
 800f014:	f7f1 fb08 	bl	8000628 <__aeabi_dmul>
 800f018:	ec53 2b19 	vmov	r2, r3, d9
 800f01c:	4606      	mov	r6, r0
 800f01e:	460f      	mov	r7, r1
 800f020:	4620      	mov	r0, r4
 800f022:	4629      	mov	r1, r5
 800f024:	f7f1 f948 	bl	80002b8 <__aeabi_dsub>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4640      	mov	r0, r8
 800f02e:	4649      	mov	r1, r9
 800f030:	f7f1 f942 	bl	80002b8 <__aeabi_dsub>
 800f034:	a372      	add	r3, pc, #456	; (adr r3, 800f200 <__ieee754_pow+0xa08>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 faf5 	bl	8000628 <__aeabi_dmul>
 800f03e:	a372      	add	r3, pc, #456	; (adr r3, 800f208 <__ieee754_pow+0xa10>)
 800f040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f044:	4680      	mov	r8, r0
 800f046:	4689      	mov	r9, r1
 800f048:	4620      	mov	r0, r4
 800f04a:	4629      	mov	r1, r5
 800f04c:	f7f1 faec 	bl	8000628 <__aeabi_dmul>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4640      	mov	r0, r8
 800f056:	4649      	mov	r1, r9
 800f058:	f7f1 f930 	bl	80002bc <__adddf3>
 800f05c:	4604      	mov	r4, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	f7f1 f928 	bl	80002bc <__adddf3>
 800f06c:	4632      	mov	r2, r6
 800f06e:	463b      	mov	r3, r7
 800f070:	4680      	mov	r8, r0
 800f072:	4689      	mov	r9, r1
 800f074:	f7f1 f920 	bl	80002b8 <__aeabi_dsub>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	4620      	mov	r0, r4
 800f07e:	4629      	mov	r1, r5
 800f080:	f7f1 f91a 	bl	80002b8 <__aeabi_dsub>
 800f084:	4642      	mov	r2, r8
 800f086:	4606      	mov	r6, r0
 800f088:	460f      	mov	r7, r1
 800f08a:	464b      	mov	r3, r9
 800f08c:	4640      	mov	r0, r8
 800f08e:	4649      	mov	r1, r9
 800f090:	f7f1 faca 	bl	8000628 <__aeabi_dmul>
 800f094:	a35e      	add	r3, pc, #376	; (adr r3, 800f210 <__ieee754_pow+0xa18>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	4604      	mov	r4, r0
 800f09c:	460d      	mov	r5, r1
 800f09e:	f7f1 fac3 	bl	8000628 <__aeabi_dmul>
 800f0a2:	a35d      	add	r3, pc, #372	; (adr r3, 800f218 <__ieee754_pow+0xa20>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 f906 	bl	80002b8 <__aeabi_dsub>
 800f0ac:	4622      	mov	r2, r4
 800f0ae:	462b      	mov	r3, r5
 800f0b0:	f7f1 faba 	bl	8000628 <__aeabi_dmul>
 800f0b4:	a35a      	add	r3, pc, #360	; (adr r3, 800f220 <__ieee754_pow+0xa28>)
 800f0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ba:	f7f1 f8ff 	bl	80002bc <__adddf3>
 800f0be:	4622      	mov	r2, r4
 800f0c0:	462b      	mov	r3, r5
 800f0c2:	f7f1 fab1 	bl	8000628 <__aeabi_dmul>
 800f0c6:	a358      	add	r3, pc, #352	; (adr r3, 800f228 <__ieee754_pow+0xa30>)
 800f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0cc:	f7f1 f8f4 	bl	80002b8 <__aeabi_dsub>
 800f0d0:	4622      	mov	r2, r4
 800f0d2:	462b      	mov	r3, r5
 800f0d4:	f7f1 faa8 	bl	8000628 <__aeabi_dmul>
 800f0d8:	a355      	add	r3, pc, #340	; (adr r3, 800f230 <__ieee754_pow+0xa38>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 f8ed 	bl	80002bc <__adddf3>
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	f7f1 fa9f 	bl	8000628 <__aeabi_dmul>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	f7f1 f8e1 	bl	80002b8 <__aeabi_dsub>
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	460d      	mov	r5, r1
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4640      	mov	r0, r8
 800f100:	4649      	mov	r1, r9
 800f102:	f7f1 fa91 	bl	8000628 <__aeabi_dmul>
 800f106:	2200      	movs	r2, #0
 800f108:	ec41 0b19 	vmov	d9, r0, r1
 800f10c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 f8d0 	bl	80002b8 <__aeabi_dsub>
 800f118:	4602      	mov	r2, r0
 800f11a:	460b      	mov	r3, r1
 800f11c:	ec51 0b19 	vmov	r0, r1, d9
 800f120:	f7f1 fbac 	bl	800087c <__aeabi_ddiv>
 800f124:	4632      	mov	r2, r6
 800f126:	4604      	mov	r4, r0
 800f128:	460d      	mov	r5, r1
 800f12a:	463b      	mov	r3, r7
 800f12c:	4640      	mov	r0, r8
 800f12e:	4649      	mov	r1, r9
 800f130:	f7f1 fa7a 	bl	8000628 <__aeabi_dmul>
 800f134:	4632      	mov	r2, r6
 800f136:	463b      	mov	r3, r7
 800f138:	f7f1 f8c0 	bl	80002bc <__adddf3>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4620      	mov	r0, r4
 800f142:	4629      	mov	r1, r5
 800f144:	f7f1 f8b8 	bl	80002b8 <__aeabi_dsub>
 800f148:	4642      	mov	r2, r8
 800f14a:	464b      	mov	r3, r9
 800f14c:	f7f1 f8b4 	bl	80002b8 <__aeabi_dsub>
 800f150:	460b      	mov	r3, r1
 800f152:	4602      	mov	r2, r0
 800f154:	493a      	ldr	r1, [pc, #232]	; (800f240 <__ieee754_pow+0xa48>)
 800f156:	2000      	movs	r0, #0
 800f158:	f7f1 f8ae 	bl	80002b8 <__aeabi_dsub>
 800f15c:	ec41 0b10 	vmov	d0, r0, r1
 800f160:	ee10 3a90 	vmov	r3, s1
 800f164:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f16c:	da2b      	bge.n	800f1c6 <__ieee754_pow+0x9ce>
 800f16e:	4650      	mov	r0, sl
 800f170:	f000 f966 	bl	800f440 <scalbn>
 800f174:	ec51 0b10 	vmov	r0, r1, d0
 800f178:	ec53 2b18 	vmov	r2, r3, d8
 800f17c:	f7ff bbed 	b.w	800e95a <__ieee754_pow+0x162>
 800f180:	4b30      	ldr	r3, [pc, #192]	; (800f244 <__ieee754_pow+0xa4c>)
 800f182:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f186:	429e      	cmp	r6, r3
 800f188:	f77f af0c 	ble.w	800efa4 <__ieee754_pow+0x7ac>
 800f18c:	4b2e      	ldr	r3, [pc, #184]	; (800f248 <__ieee754_pow+0xa50>)
 800f18e:	440b      	add	r3, r1
 800f190:	4303      	orrs	r3, r0
 800f192:	d009      	beq.n	800f1a8 <__ieee754_pow+0x9b0>
 800f194:	ec51 0b18 	vmov	r0, r1, d8
 800f198:	2200      	movs	r2, #0
 800f19a:	2300      	movs	r3, #0
 800f19c:	f7f1 fcb6 	bl	8000b0c <__aeabi_dcmplt>
 800f1a0:	3800      	subs	r0, #0
 800f1a2:	bf18      	it	ne
 800f1a4:	2001      	movne	r0, #1
 800f1a6:	e447      	b.n	800ea38 <__ieee754_pow+0x240>
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	462b      	mov	r3, r5
 800f1ac:	f7f1 f884 	bl	80002b8 <__aeabi_dsub>
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	464b      	mov	r3, r9
 800f1b4:	f7f1 fcbe 	bl	8000b34 <__aeabi_dcmpge>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	f43f aef3 	beq.w	800efa4 <__ieee754_pow+0x7ac>
 800f1be:	e7e9      	b.n	800f194 <__ieee754_pow+0x99c>
 800f1c0:	f04f 0a00 	mov.w	sl, #0
 800f1c4:	e71a      	b.n	800effc <__ieee754_pow+0x804>
 800f1c6:	ec51 0b10 	vmov	r0, r1, d0
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	e7d4      	b.n	800f178 <__ieee754_pow+0x980>
 800f1ce:	491c      	ldr	r1, [pc, #112]	; (800f240 <__ieee754_pow+0xa48>)
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	f7ff bb30 	b.w	800e836 <__ieee754_pow+0x3e>
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	2100      	movs	r1, #0
 800f1da:	f7ff bb2c 	b.w	800e836 <__ieee754_pow+0x3e>
 800f1de:	4630      	mov	r0, r6
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7ff bb28 	b.w	800e836 <__ieee754_pow+0x3e>
 800f1e6:	9204      	str	r2, [sp, #16]
 800f1e8:	f7ff bb7a 	b.w	800e8e0 <__ieee754_pow+0xe8>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f7ff bb64 	b.w	800e8ba <__ieee754_pow+0xc2>
 800f1f2:	bf00      	nop
 800f1f4:	f3af 8000 	nop.w
 800f1f8:	00000000 	.word	0x00000000
 800f1fc:	3fe62e43 	.word	0x3fe62e43
 800f200:	fefa39ef 	.word	0xfefa39ef
 800f204:	3fe62e42 	.word	0x3fe62e42
 800f208:	0ca86c39 	.word	0x0ca86c39
 800f20c:	be205c61 	.word	0xbe205c61
 800f210:	72bea4d0 	.word	0x72bea4d0
 800f214:	3e663769 	.word	0x3e663769
 800f218:	c5d26bf1 	.word	0xc5d26bf1
 800f21c:	3ebbbd41 	.word	0x3ebbbd41
 800f220:	af25de2c 	.word	0xaf25de2c
 800f224:	3f11566a 	.word	0x3f11566a
 800f228:	16bebd93 	.word	0x16bebd93
 800f22c:	3f66c16c 	.word	0x3f66c16c
 800f230:	5555553e 	.word	0x5555553e
 800f234:	3fc55555 	.word	0x3fc55555
 800f238:	3fe00000 	.word	0x3fe00000
 800f23c:	000fffff 	.word	0x000fffff
 800f240:	3ff00000 	.word	0x3ff00000
 800f244:	4090cbff 	.word	0x4090cbff
 800f248:	3f6f3400 	.word	0x3f6f3400
 800f24c:	652b82fe 	.word	0x652b82fe
 800f250:	3c971547 	.word	0x3c971547

0800f254 <__ieee754_sqrt>:
 800f254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f258:	ec55 4b10 	vmov	r4, r5, d0
 800f25c:	4e55      	ldr	r6, [pc, #340]	; (800f3b4 <__ieee754_sqrt+0x160>)
 800f25e:	43ae      	bics	r6, r5
 800f260:	ee10 0a10 	vmov	r0, s0
 800f264:	ee10 3a10 	vmov	r3, s0
 800f268:	462a      	mov	r2, r5
 800f26a:	4629      	mov	r1, r5
 800f26c:	d110      	bne.n	800f290 <__ieee754_sqrt+0x3c>
 800f26e:	ee10 2a10 	vmov	r2, s0
 800f272:	462b      	mov	r3, r5
 800f274:	f7f1 f9d8 	bl	8000628 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f81c 	bl	80002bc <__adddf3>
 800f284:	4604      	mov	r4, r0
 800f286:	460d      	mov	r5, r1
 800f288:	ec45 4b10 	vmov	d0, r4, r5
 800f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f290:	2d00      	cmp	r5, #0
 800f292:	dc10      	bgt.n	800f2b6 <__ieee754_sqrt+0x62>
 800f294:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f298:	4330      	orrs	r0, r6
 800f29a:	d0f5      	beq.n	800f288 <__ieee754_sqrt+0x34>
 800f29c:	b15d      	cbz	r5, 800f2b6 <__ieee754_sqrt+0x62>
 800f29e:	ee10 2a10 	vmov	r2, s0
 800f2a2:	462b      	mov	r3, r5
 800f2a4:	ee10 0a10 	vmov	r0, s0
 800f2a8:	f7f1 f806 	bl	80002b8 <__aeabi_dsub>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	f7f1 fae4 	bl	800087c <__aeabi_ddiv>
 800f2b4:	e7e6      	b.n	800f284 <__ieee754_sqrt+0x30>
 800f2b6:	1512      	asrs	r2, r2, #20
 800f2b8:	d074      	beq.n	800f3a4 <__ieee754_sqrt+0x150>
 800f2ba:	07d4      	lsls	r4, r2, #31
 800f2bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f2c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f2c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f2c8:	bf5e      	ittt	pl
 800f2ca:	0fda      	lsrpl	r2, r3, #31
 800f2cc:	005b      	lslpl	r3, r3, #1
 800f2ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f2d2:	2400      	movs	r4, #0
 800f2d4:	0fda      	lsrs	r2, r3, #31
 800f2d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f2da:	107f      	asrs	r7, r7, #1
 800f2dc:	005b      	lsls	r3, r3, #1
 800f2de:	2516      	movs	r5, #22
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f2e6:	1886      	adds	r6, r0, r2
 800f2e8:	428e      	cmp	r6, r1
 800f2ea:	bfde      	ittt	le
 800f2ec:	1b89      	suble	r1, r1, r6
 800f2ee:	18b0      	addle	r0, r6, r2
 800f2f0:	18a4      	addle	r4, r4, r2
 800f2f2:	0049      	lsls	r1, r1, #1
 800f2f4:	3d01      	subs	r5, #1
 800f2f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f2fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f2fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f302:	d1f0      	bne.n	800f2e6 <__ieee754_sqrt+0x92>
 800f304:	462a      	mov	r2, r5
 800f306:	f04f 0e20 	mov.w	lr, #32
 800f30a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f30e:	4281      	cmp	r1, r0
 800f310:	eb06 0c05 	add.w	ip, r6, r5
 800f314:	dc02      	bgt.n	800f31c <__ieee754_sqrt+0xc8>
 800f316:	d113      	bne.n	800f340 <__ieee754_sqrt+0xec>
 800f318:	459c      	cmp	ip, r3
 800f31a:	d811      	bhi.n	800f340 <__ieee754_sqrt+0xec>
 800f31c:	f1bc 0f00 	cmp.w	ip, #0
 800f320:	eb0c 0506 	add.w	r5, ip, r6
 800f324:	da43      	bge.n	800f3ae <__ieee754_sqrt+0x15a>
 800f326:	2d00      	cmp	r5, #0
 800f328:	db41      	blt.n	800f3ae <__ieee754_sqrt+0x15a>
 800f32a:	f100 0801 	add.w	r8, r0, #1
 800f32e:	1a09      	subs	r1, r1, r0
 800f330:	459c      	cmp	ip, r3
 800f332:	bf88      	it	hi
 800f334:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f338:	eba3 030c 	sub.w	r3, r3, ip
 800f33c:	4432      	add	r2, r6
 800f33e:	4640      	mov	r0, r8
 800f340:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f344:	f1be 0e01 	subs.w	lr, lr, #1
 800f348:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f34c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f350:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f354:	d1db      	bne.n	800f30e <__ieee754_sqrt+0xba>
 800f356:	430b      	orrs	r3, r1
 800f358:	d006      	beq.n	800f368 <__ieee754_sqrt+0x114>
 800f35a:	1c50      	adds	r0, r2, #1
 800f35c:	bf13      	iteet	ne
 800f35e:	3201      	addne	r2, #1
 800f360:	3401      	addeq	r4, #1
 800f362:	4672      	moveq	r2, lr
 800f364:	f022 0201 	bicne.w	r2, r2, #1
 800f368:	1063      	asrs	r3, r4, #1
 800f36a:	0852      	lsrs	r2, r2, #1
 800f36c:	07e1      	lsls	r1, r4, #31
 800f36e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f372:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f376:	bf48      	it	mi
 800f378:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f37c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f380:	4614      	mov	r4, r2
 800f382:	e781      	b.n	800f288 <__ieee754_sqrt+0x34>
 800f384:	0ad9      	lsrs	r1, r3, #11
 800f386:	3815      	subs	r0, #21
 800f388:	055b      	lsls	r3, r3, #21
 800f38a:	2900      	cmp	r1, #0
 800f38c:	d0fa      	beq.n	800f384 <__ieee754_sqrt+0x130>
 800f38e:	02cd      	lsls	r5, r1, #11
 800f390:	d50a      	bpl.n	800f3a8 <__ieee754_sqrt+0x154>
 800f392:	f1c2 0420 	rsb	r4, r2, #32
 800f396:	fa23 f404 	lsr.w	r4, r3, r4
 800f39a:	1e55      	subs	r5, r2, #1
 800f39c:	4093      	lsls	r3, r2
 800f39e:	4321      	orrs	r1, r4
 800f3a0:	1b42      	subs	r2, r0, r5
 800f3a2:	e78a      	b.n	800f2ba <__ieee754_sqrt+0x66>
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	e7f0      	b.n	800f38a <__ieee754_sqrt+0x136>
 800f3a8:	0049      	lsls	r1, r1, #1
 800f3aa:	3201      	adds	r2, #1
 800f3ac:	e7ef      	b.n	800f38e <__ieee754_sqrt+0x13a>
 800f3ae:	4680      	mov	r8, r0
 800f3b0:	e7bd      	b.n	800f32e <__ieee754_sqrt+0xda>
 800f3b2:	bf00      	nop
 800f3b4:	7ff00000 	.word	0x7ff00000

0800f3b8 <with_errno>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	460d      	mov	r5, r1
 800f3be:	4616      	mov	r6, r2
 800f3c0:	f000 f8c4 	bl	800f54c <__errno>
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	6006      	str	r6, [r0, #0]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}

0800f3cc <xflow>:
 800f3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ce:	4614      	mov	r4, r2
 800f3d0:	461d      	mov	r5, r3
 800f3d2:	b108      	cbz	r0, 800f3d8 <xflow+0xc>
 800f3d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f3d8:	e9cd 2300 	strd	r2, r3, [sp]
 800f3dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7f1 f920 	bl	8000628 <__aeabi_dmul>
 800f3e8:	2222      	movs	r2, #34	; 0x22
 800f3ea:	b003      	add	sp, #12
 800f3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3f0:	f7ff bfe2 	b.w	800f3b8 <with_errno>

0800f3f4 <__math_uflow>:
 800f3f4:	b508      	push	{r3, lr}
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f3fc:	f7ff ffe6 	bl	800f3cc <xflow>
 800f400:	ec41 0b10 	vmov	d0, r0, r1
 800f404:	bd08      	pop	{r3, pc}

0800f406 <__math_oflow>:
 800f406:	b508      	push	{r3, lr}
 800f408:	2200      	movs	r2, #0
 800f40a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f40e:	f7ff ffdd 	bl	800f3cc <xflow>
 800f412:	ec41 0b10 	vmov	d0, r0, r1
 800f416:	bd08      	pop	{r3, pc}

0800f418 <fabs>:
 800f418:	ec51 0b10 	vmov	r0, r1, d0
 800f41c:	ee10 2a10 	vmov	r2, s0
 800f420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f424:	ec43 2b10 	vmov	d0, r2, r3
 800f428:	4770      	bx	lr

0800f42a <finite>:
 800f42a:	b082      	sub	sp, #8
 800f42c:	ed8d 0b00 	vstr	d0, [sp]
 800f430:	9801      	ldr	r0, [sp, #4]
 800f432:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f436:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f43a:	0fc0      	lsrs	r0, r0, #31
 800f43c:	b002      	add	sp, #8
 800f43e:	4770      	bx	lr

0800f440 <scalbn>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	ec55 4b10 	vmov	r4, r5, d0
 800f446:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f44a:	4606      	mov	r6, r0
 800f44c:	462b      	mov	r3, r5
 800f44e:	b99a      	cbnz	r2, 800f478 <scalbn+0x38>
 800f450:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f454:	4323      	orrs	r3, r4
 800f456:	d036      	beq.n	800f4c6 <scalbn+0x86>
 800f458:	4b39      	ldr	r3, [pc, #228]	; (800f540 <scalbn+0x100>)
 800f45a:	4629      	mov	r1, r5
 800f45c:	ee10 0a10 	vmov	r0, s0
 800f460:	2200      	movs	r2, #0
 800f462:	f7f1 f8e1 	bl	8000628 <__aeabi_dmul>
 800f466:	4b37      	ldr	r3, [pc, #220]	; (800f544 <scalbn+0x104>)
 800f468:	429e      	cmp	r6, r3
 800f46a:	4604      	mov	r4, r0
 800f46c:	460d      	mov	r5, r1
 800f46e:	da10      	bge.n	800f492 <scalbn+0x52>
 800f470:	a32b      	add	r3, pc, #172	; (adr r3, 800f520 <scalbn+0xe0>)
 800f472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f476:	e03a      	b.n	800f4ee <scalbn+0xae>
 800f478:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f47c:	428a      	cmp	r2, r1
 800f47e:	d10c      	bne.n	800f49a <scalbn+0x5a>
 800f480:	ee10 2a10 	vmov	r2, s0
 800f484:	4620      	mov	r0, r4
 800f486:	4629      	mov	r1, r5
 800f488:	f7f0 ff18 	bl	80002bc <__adddf3>
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
 800f490:	e019      	b.n	800f4c6 <scalbn+0x86>
 800f492:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f496:	460b      	mov	r3, r1
 800f498:	3a36      	subs	r2, #54	; 0x36
 800f49a:	4432      	add	r2, r6
 800f49c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4a0:	428a      	cmp	r2, r1
 800f4a2:	dd08      	ble.n	800f4b6 <scalbn+0x76>
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	a120      	add	r1, pc, #128	; (adr r1, 800f528 <scalbn+0xe8>)
 800f4a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ac:	da1c      	bge.n	800f4e8 <scalbn+0xa8>
 800f4ae:	a120      	add	r1, pc, #128	; (adr r1, 800f530 <scalbn+0xf0>)
 800f4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4b4:	e018      	b.n	800f4e8 <scalbn+0xa8>
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	dd08      	ble.n	800f4cc <scalbn+0x8c>
 800f4ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4c6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4d0:	da19      	bge.n	800f506 <scalbn+0xc6>
 800f4d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4d6:	429e      	cmp	r6, r3
 800f4d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f4dc:	dd0a      	ble.n	800f4f4 <scalbn+0xb4>
 800f4de:	a112      	add	r1, pc, #72	; (adr r1, 800f528 <scalbn+0xe8>)
 800f4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1e2      	bne.n	800f4ae <scalbn+0x6e>
 800f4e8:	a30f      	add	r3, pc, #60	; (adr r3, 800f528 <scalbn+0xe8>)
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f7f1 f89b 	bl	8000628 <__aeabi_dmul>
 800f4f2:	e7cb      	b.n	800f48c <scalbn+0x4c>
 800f4f4:	a10a      	add	r1, pc, #40	; (adr r1, 800f520 <scalbn+0xe0>)
 800f4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0b8      	beq.n	800f470 <scalbn+0x30>
 800f4fe:	a10e      	add	r1, pc, #56	; (adr r1, 800f538 <scalbn+0xf8>)
 800f500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f504:	e7b4      	b.n	800f470 <scalbn+0x30>
 800f506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f50a:	3236      	adds	r2, #54	; 0x36
 800f50c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f510:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f514:	4620      	mov	r0, r4
 800f516:	4b0c      	ldr	r3, [pc, #48]	; (800f548 <scalbn+0x108>)
 800f518:	2200      	movs	r2, #0
 800f51a:	e7e8      	b.n	800f4ee <scalbn+0xae>
 800f51c:	f3af 8000 	nop.w
 800f520:	c2f8f359 	.word	0xc2f8f359
 800f524:	01a56e1f 	.word	0x01a56e1f
 800f528:	8800759c 	.word	0x8800759c
 800f52c:	7e37e43c 	.word	0x7e37e43c
 800f530:	8800759c 	.word	0x8800759c
 800f534:	fe37e43c 	.word	0xfe37e43c
 800f538:	c2f8f359 	.word	0xc2f8f359
 800f53c:	81a56e1f 	.word	0x81a56e1f
 800f540:	43500000 	.word	0x43500000
 800f544:	ffff3cb0 	.word	0xffff3cb0
 800f548:	3c900000 	.word	0x3c900000

0800f54c <__errno>:
 800f54c:	4b01      	ldr	r3, [pc, #4]	; (800f554 <__errno+0x8>)
 800f54e:	6818      	ldr	r0, [r3, #0]
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	20000198 	.word	0x20000198

0800f558 <__libc_init_array>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	4d0d      	ldr	r5, [pc, #52]	; (800f590 <__libc_init_array+0x38>)
 800f55c:	4c0d      	ldr	r4, [pc, #52]	; (800f594 <__libc_init_array+0x3c>)
 800f55e:	1b64      	subs	r4, r4, r5
 800f560:	10a4      	asrs	r4, r4, #2
 800f562:	2600      	movs	r6, #0
 800f564:	42a6      	cmp	r6, r4
 800f566:	d109      	bne.n	800f57c <__libc_init_array+0x24>
 800f568:	4d0b      	ldr	r5, [pc, #44]	; (800f598 <__libc_init_array+0x40>)
 800f56a:	4c0c      	ldr	r4, [pc, #48]	; (800f59c <__libc_init_array+0x44>)
 800f56c:	f001 f99e 	bl	80108ac <_init>
 800f570:	1b64      	subs	r4, r4, r5
 800f572:	10a4      	asrs	r4, r4, #2
 800f574:	2600      	movs	r6, #0
 800f576:	42a6      	cmp	r6, r4
 800f578:	d105      	bne.n	800f586 <__libc_init_array+0x2e>
 800f57a:	bd70      	pop	{r4, r5, r6, pc}
 800f57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f580:	4798      	blx	r3
 800f582:	3601      	adds	r6, #1
 800f584:	e7ee      	b.n	800f564 <__libc_init_array+0xc>
 800f586:	f855 3b04 	ldr.w	r3, [r5], #4
 800f58a:	4798      	blx	r3
 800f58c:	3601      	adds	r6, #1
 800f58e:	e7f2      	b.n	800f576 <__libc_init_array+0x1e>
 800f590:	08010da0 	.word	0x08010da0
 800f594:	08010da0 	.word	0x08010da0
 800f598:	08010da0 	.word	0x08010da0
 800f59c:	08010da4 	.word	0x08010da4

0800f5a0 <memset>:
 800f5a0:	4402      	add	r2, r0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d100      	bne.n	800f5aa <memset+0xa>
 800f5a8:	4770      	bx	lr
 800f5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f5ae:	e7f9      	b.n	800f5a4 <memset+0x4>

0800f5b0 <iprintf>:
 800f5b0:	b40f      	push	{r0, r1, r2, r3}
 800f5b2:	4b0a      	ldr	r3, [pc, #40]	; (800f5dc <iprintf+0x2c>)
 800f5b4:	b513      	push	{r0, r1, r4, lr}
 800f5b6:	681c      	ldr	r4, [r3, #0]
 800f5b8:	b124      	cbz	r4, 800f5c4 <iprintf+0x14>
 800f5ba:	69a3      	ldr	r3, [r4, #24]
 800f5bc:	b913      	cbnz	r3, 800f5c4 <iprintf+0x14>
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 f89a 	bl	800f6f8 <__sinit>
 800f5c4:	ab05      	add	r3, sp, #20
 800f5c6:	9a04      	ldr	r2, [sp, #16]
 800f5c8:	68a1      	ldr	r1, [r4, #8]
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f000 fb4d 	bl	800fc6c <_vfiprintf_r>
 800f5d2:	b002      	add	sp, #8
 800f5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5d8:	b004      	add	sp, #16
 800f5da:	4770      	bx	lr
 800f5dc:	20000198 	.word	0x20000198

0800f5e0 <sniprintf>:
 800f5e0:	b40c      	push	{r2, r3}
 800f5e2:	b530      	push	{r4, r5, lr}
 800f5e4:	4b17      	ldr	r3, [pc, #92]	; (800f644 <sniprintf+0x64>)
 800f5e6:	1e0c      	subs	r4, r1, #0
 800f5e8:	681d      	ldr	r5, [r3, #0]
 800f5ea:	b09d      	sub	sp, #116	; 0x74
 800f5ec:	da08      	bge.n	800f600 <sniprintf+0x20>
 800f5ee:	238b      	movs	r3, #139	; 0x8b
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f6:	b01d      	add	sp, #116	; 0x74
 800f5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5fc:	b002      	add	sp, #8
 800f5fe:	4770      	bx	lr
 800f600:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f604:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f608:	bf14      	ite	ne
 800f60a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f60e:	4623      	moveq	r3, r4
 800f610:	9304      	str	r3, [sp, #16]
 800f612:	9307      	str	r3, [sp, #28]
 800f614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f618:	9002      	str	r0, [sp, #8]
 800f61a:	9006      	str	r0, [sp, #24]
 800f61c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f620:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f622:	ab21      	add	r3, sp, #132	; 0x84
 800f624:	a902      	add	r1, sp, #8
 800f626:	4628      	mov	r0, r5
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	f000 f9f5 	bl	800fa18 <_svfiprintf_r>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	bfbc      	itt	lt
 800f632:	238b      	movlt	r3, #139	; 0x8b
 800f634:	602b      	strlt	r3, [r5, #0]
 800f636:	2c00      	cmp	r4, #0
 800f638:	d0dd      	beq.n	800f5f6 <sniprintf+0x16>
 800f63a:	9b02      	ldr	r3, [sp, #8]
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	e7d9      	b.n	800f5f6 <sniprintf+0x16>
 800f642:	bf00      	nop
 800f644:	20000198 	.word	0x20000198

0800f648 <std>:
 800f648:	2300      	movs	r3, #0
 800f64a:	b510      	push	{r4, lr}
 800f64c:	4604      	mov	r4, r0
 800f64e:	e9c0 3300 	strd	r3, r3, [r0]
 800f652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f656:	6083      	str	r3, [r0, #8]
 800f658:	8181      	strh	r1, [r0, #12]
 800f65a:	6643      	str	r3, [r0, #100]	; 0x64
 800f65c:	81c2      	strh	r2, [r0, #14]
 800f65e:	6183      	str	r3, [r0, #24]
 800f660:	4619      	mov	r1, r3
 800f662:	2208      	movs	r2, #8
 800f664:	305c      	adds	r0, #92	; 0x5c
 800f666:	f7ff ff9b 	bl	800f5a0 <memset>
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <std+0x38>)
 800f66c:	6263      	str	r3, [r4, #36]	; 0x24
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <std+0x3c>)
 800f670:	62a3      	str	r3, [r4, #40]	; 0x28
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <std+0x40>)
 800f674:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <std+0x44>)
 800f678:	6224      	str	r4, [r4, #32]
 800f67a:	6323      	str	r3, [r4, #48]	; 0x30
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	bf00      	nop
 800f680:	08010215 	.word	0x08010215
 800f684:	08010237 	.word	0x08010237
 800f688:	0801026f 	.word	0x0801026f
 800f68c:	08010293 	.word	0x08010293

0800f690 <_cleanup_r>:
 800f690:	4901      	ldr	r1, [pc, #4]	; (800f698 <_cleanup_r+0x8>)
 800f692:	f000 b8af 	b.w	800f7f4 <_fwalk_reent>
 800f696:	bf00      	nop
 800f698:	0801056d 	.word	0x0801056d

0800f69c <__sfmoreglue>:
 800f69c:	b570      	push	{r4, r5, r6, lr}
 800f69e:	2268      	movs	r2, #104	; 0x68
 800f6a0:	1e4d      	subs	r5, r1, #1
 800f6a2:	4355      	muls	r5, r2
 800f6a4:	460e      	mov	r6, r1
 800f6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6aa:	f000 f8e5 	bl	800f878 <_malloc_r>
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	b140      	cbz	r0, 800f6c4 <__sfmoreglue+0x28>
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	e9c0 1600 	strd	r1, r6, [r0]
 800f6b8:	300c      	adds	r0, #12
 800f6ba:	60a0      	str	r0, [r4, #8]
 800f6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6c0:	f7ff ff6e 	bl	800f5a0 <memset>
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	bd70      	pop	{r4, r5, r6, pc}

0800f6c8 <__sfp_lock_acquire>:
 800f6c8:	4801      	ldr	r0, [pc, #4]	; (800f6d0 <__sfp_lock_acquire+0x8>)
 800f6ca:	f000 b8b3 	b.w	800f834 <__retarget_lock_acquire_recursive>
 800f6ce:	bf00      	nop
 800f6d0:	20000d71 	.word	0x20000d71

0800f6d4 <__sfp_lock_release>:
 800f6d4:	4801      	ldr	r0, [pc, #4]	; (800f6dc <__sfp_lock_release+0x8>)
 800f6d6:	f000 b8ae 	b.w	800f836 <__retarget_lock_release_recursive>
 800f6da:	bf00      	nop
 800f6dc:	20000d71 	.word	0x20000d71

0800f6e0 <__sinit_lock_acquire>:
 800f6e0:	4801      	ldr	r0, [pc, #4]	; (800f6e8 <__sinit_lock_acquire+0x8>)
 800f6e2:	f000 b8a7 	b.w	800f834 <__retarget_lock_acquire_recursive>
 800f6e6:	bf00      	nop
 800f6e8:	20000d72 	.word	0x20000d72

0800f6ec <__sinit_lock_release>:
 800f6ec:	4801      	ldr	r0, [pc, #4]	; (800f6f4 <__sinit_lock_release+0x8>)
 800f6ee:	f000 b8a2 	b.w	800f836 <__retarget_lock_release_recursive>
 800f6f2:	bf00      	nop
 800f6f4:	20000d72 	.word	0x20000d72

0800f6f8 <__sinit>:
 800f6f8:	b510      	push	{r4, lr}
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	f7ff fff0 	bl	800f6e0 <__sinit_lock_acquire>
 800f700:	69a3      	ldr	r3, [r4, #24]
 800f702:	b11b      	cbz	r3, 800f70c <__sinit+0x14>
 800f704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f708:	f7ff bff0 	b.w	800f6ec <__sinit_lock_release>
 800f70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f710:	6523      	str	r3, [r4, #80]	; 0x50
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <__sinit+0x68>)
 800f714:	4a13      	ldr	r2, [pc, #76]	; (800f764 <__sinit+0x6c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	62a2      	str	r2, [r4, #40]	; 0x28
 800f71a:	42a3      	cmp	r3, r4
 800f71c:	bf04      	itt	eq
 800f71e:	2301      	moveq	r3, #1
 800f720:	61a3      	streq	r3, [r4, #24]
 800f722:	4620      	mov	r0, r4
 800f724:	f000 f820 	bl	800f768 <__sfp>
 800f728:	6060      	str	r0, [r4, #4]
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 f81c 	bl	800f768 <__sfp>
 800f730:	60a0      	str	r0, [r4, #8]
 800f732:	4620      	mov	r0, r4
 800f734:	f000 f818 	bl	800f768 <__sfp>
 800f738:	2200      	movs	r2, #0
 800f73a:	60e0      	str	r0, [r4, #12]
 800f73c:	2104      	movs	r1, #4
 800f73e:	6860      	ldr	r0, [r4, #4]
 800f740:	f7ff ff82 	bl	800f648 <std>
 800f744:	68a0      	ldr	r0, [r4, #8]
 800f746:	2201      	movs	r2, #1
 800f748:	2109      	movs	r1, #9
 800f74a:	f7ff ff7d 	bl	800f648 <std>
 800f74e:	68e0      	ldr	r0, [r4, #12]
 800f750:	2202      	movs	r2, #2
 800f752:	2112      	movs	r1, #18
 800f754:	f7ff ff78 	bl	800f648 <std>
 800f758:	2301      	movs	r3, #1
 800f75a:	61a3      	str	r3, [r4, #24]
 800f75c:	e7d2      	b.n	800f704 <__sinit+0xc>
 800f75e:	bf00      	nop
 800f760:	08010d00 	.word	0x08010d00
 800f764:	0800f691 	.word	0x0800f691

0800f768 <__sfp>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	4607      	mov	r7, r0
 800f76c:	f7ff ffac 	bl	800f6c8 <__sfp_lock_acquire>
 800f770:	4b1e      	ldr	r3, [pc, #120]	; (800f7ec <__sfp+0x84>)
 800f772:	681e      	ldr	r6, [r3, #0]
 800f774:	69b3      	ldr	r3, [r6, #24]
 800f776:	b913      	cbnz	r3, 800f77e <__sfp+0x16>
 800f778:	4630      	mov	r0, r6
 800f77a:	f7ff ffbd 	bl	800f6f8 <__sinit>
 800f77e:	3648      	adds	r6, #72	; 0x48
 800f780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f784:	3b01      	subs	r3, #1
 800f786:	d503      	bpl.n	800f790 <__sfp+0x28>
 800f788:	6833      	ldr	r3, [r6, #0]
 800f78a:	b30b      	cbz	r3, 800f7d0 <__sfp+0x68>
 800f78c:	6836      	ldr	r6, [r6, #0]
 800f78e:	e7f7      	b.n	800f780 <__sfp+0x18>
 800f790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f794:	b9d5      	cbnz	r5, 800f7cc <__sfp+0x64>
 800f796:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <__sfp+0x88>)
 800f798:	60e3      	str	r3, [r4, #12]
 800f79a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f79e:	6665      	str	r5, [r4, #100]	; 0x64
 800f7a0:	f000 f847 	bl	800f832 <__retarget_lock_init_recursive>
 800f7a4:	f7ff ff96 	bl	800f6d4 <__sfp_lock_release>
 800f7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7b0:	6025      	str	r5, [r4, #0]
 800f7b2:	61a5      	str	r5, [r4, #24]
 800f7b4:	2208      	movs	r2, #8
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7bc:	f7ff fef0 	bl	800f5a0 <memset>
 800f7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7cc:	3468      	adds	r4, #104	; 0x68
 800f7ce:	e7d9      	b.n	800f784 <__sfp+0x1c>
 800f7d0:	2104      	movs	r1, #4
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	f7ff ff62 	bl	800f69c <__sfmoreglue>
 800f7d8:	4604      	mov	r4, r0
 800f7da:	6030      	str	r0, [r6, #0]
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d1d5      	bne.n	800f78c <__sfp+0x24>
 800f7e0:	f7ff ff78 	bl	800f6d4 <__sfp_lock_release>
 800f7e4:	230c      	movs	r3, #12
 800f7e6:	603b      	str	r3, [r7, #0]
 800f7e8:	e7ee      	b.n	800f7c8 <__sfp+0x60>
 800f7ea:	bf00      	nop
 800f7ec:	08010d00 	.word	0x08010d00
 800f7f0:	ffff0001 	.word	0xffff0001

0800f7f4 <_fwalk_reent>:
 800f7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	4688      	mov	r8, r1
 800f7fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f800:	2700      	movs	r7, #0
 800f802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f806:	f1b9 0901 	subs.w	r9, r9, #1
 800f80a:	d505      	bpl.n	800f818 <_fwalk_reent+0x24>
 800f80c:	6824      	ldr	r4, [r4, #0]
 800f80e:	2c00      	cmp	r4, #0
 800f810:	d1f7      	bne.n	800f802 <_fwalk_reent+0xe>
 800f812:	4638      	mov	r0, r7
 800f814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f818:	89ab      	ldrh	r3, [r5, #12]
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d907      	bls.n	800f82e <_fwalk_reent+0x3a>
 800f81e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f822:	3301      	adds	r3, #1
 800f824:	d003      	beq.n	800f82e <_fwalk_reent+0x3a>
 800f826:	4629      	mov	r1, r5
 800f828:	4630      	mov	r0, r6
 800f82a:	47c0      	blx	r8
 800f82c:	4307      	orrs	r7, r0
 800f82e:	3568      	adds	r5, #104	; 0x68
 800f830:	e7e9      	b.n	800f806 <_fwalk_reent+0x12>

0800f832 <__retarget_lock_init_recursive>:
 800f832:	4770      	bx	lr

0800f834 <__retarget_lock_acquire_recursive>:
 800f834:	4770      	bx	lr

0800f836 <__retarget_lock_release_recursive>:
 800f836:	4770      	bx	lr

0800f838 <sbrk_aligned>:
 800f838:	b570      	push	{r4, r5, r6, lr}
 800f83a:	4e0e      	ldr	r6, [pc, #56]	; (800f874 <sbrk_aligned+0x3c>)
 800f83c:	460c      	mov	r4, r1
 800f83e:	6831      	ldr	r1, [r6, #0]
 800f840:	4605      	mov	r5, r0
 800f842:	b911      	cbnz	r1, 800f84a <sbrk_aligned+0x12>
 800f844:	f000 fcd6 	bl	80101f4 <_sbrk_r>
 800f848:	6030      	str	r0, [r6, #0]
 800f84a:	4621      	mov	r1, r4
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 fcd1 	bl	80101f4 <_sbrk_r>
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	d00a      	beq.n	800f86c <sbrk_aligned+0x34>
 800f856:	1cc4      	adds	r4, r0, #3
 800f858:	f024 0403 	bic.w	r4, r4, #3
 800f85c:	42a0      	cmp	r0, r4
 800f85e:	d007      	beq.n	800f870 <sbrk_aligned+0x38>
 800f860:	1a21      	subs	r1, r4, r0
 800f862:	4628      	mov	r0, r5
 800f864:	f000 fcc6 	bl	80101f4 <_sbrk_r>
 800f868:	3001      	adds	r0, #1
 800f86a:	d101      	bne.n	800f870 <sbrk_aligned+0x38>
 800f86c:	f04f 34ff 	mov.w	r4, #4294967295
 800f870:	4620      	mov	r0, r4
 800f872:	bd70      	pop	{r4, r5, r6, pc}
 800f874:	20000d78 	.word	0x20000d78

0800f878 <_malloc_r>:
 800f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87c:	1ccd      	adds	r5, r1, #3
 800f87e:	f025 0503 	bic.w	r5, r5, #3
 800f882:	3508      	adds	r5, #8
 800f884:	2d0c      	cmp	r5, #12
 800f886:	bf38      	it	cc
 800f888:	250c      	movcc	r5, #12
 800f88a:	2d00      	cmp	r5, #0
 800f88c:	4607      	mov	r7, r0
 800f88e:	db01      	blt.n	800f894 <_malloc_r+0x1c>
 800f890:	42a9      	cmp	r1, r5
 800f892:	d905      	bls.n	800f8a0 <_malloc_r+0x28>
 800f894:	230c      	movs	r3, #12
 800f896:	603b      	str	r3, [r7, #0]
 800f898:	2600      	movs	r6, #0
 800f89a:	4630      	mov	r0, r6
 800f89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a0:	4e2e      	ldr	r6, [pc, #184]	; (800f95c <_malloc_r+0xe4>)
 800f8a2:	f000 ff3f 	bl	8010724 <__malloc_lock>
 800f8a6:	6833      	ldr	r3, [r6, #0]
 800f8a8:	461c      	mov	r4, r3
 800f8aa:	bb34      	cbnz	r4, 800f8fa <_malloc_r+0x82>
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	f7ff ffc2 	bl	800f838 <sbrk_aligned>
 800f8b4:	1c43      	adds	r3, r0, #1
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	d14d      	bne.n	800f956 <_malloc_r+0xde>
 800f8ba:	6834      	ldr	r4, [r6, #0]
 800f8bc:	4626      	mov	r6, r4
 800f8be:	2e00      	cmp	r6, #0
 800f8c0:	d140      	bne.n	800f944 <_malloc_r+0xcc>
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4638      	mov	r0, r7
 800f8c8:	eb04 0803 	add.w	r8, r4, r3
 800f8cc:	f000 fc92 	bl	80101f4 <_sbrk_r>
 800f8d0:	4580      	cmp	r8, r0
 800f8d2:	d13a      	bne.n	800f94a <_malloc_r+0xd2>
 800f8d4:	6821      	ldr	r1, [r4, #0]
 800f8d6:	3503      	adds	r5, #3
 800f8d8:	1a6d      	subs	r5, r5, r1
 800f8da:	f025 0503 	bic.w	r5, r5, #3
 800f8de:	3508      	adds	r5, #8
 800f8e0:	2d0c      	cmp	r5, #12
 800f8e2:	bf38      	it	cc
 800f8e4:	250c      	movcc	r5, #12
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7ff ffa5 	bl	800f838 <sbrk_aligned>
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	d02b      	beq.n	800f94a <_malloc_r+0xd2>
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	442b      	add	r3, r5
 800f8f6:	6023      	str	r3, [r4, #0]
 800f8f8:	e00e      	b.n	800f918 <_malloc_r+0xa0>
 800f8fa:	6822      	ldr	r2, [r4, #0]
 800f8fc:	1b52      	subs	r2, r2, r5
 800f8fe:	d41e      	bmi.n	800f93e <_malloc_r+0xc6>
 800f900:	2a0b      	cmp	r2, #11
 800f902:	d916      	bls.n	800f932 <_malloc_r+0xba>
 800f904:	1961      	adds	r1, r4, r5
 800f906:	42a3      	cmp	r3, r4
 800f908:	6025      	str	r5, [r4, #0]
 800f90a:	bf18      	it	ne
 800f90c:	6059      	strne	r1, [r3, #4]
 800f90e:	6863      	ldr	r3, [r4, #4]
 800f910:	bf08      	it	eq
 800f912:	6031      	streq	r1, [r6, #0]
 800f914:	5162      	str	r2, [r4, r5]
 800f916:	604b      	str	r3, [r1, #4]
 800f918:	4638      	mov	r0, r7
 800f91a:	f104 060b 	add.w	r6, r4, #11
 800f91e:	f000 ff07 	bl	8010730 <__malloc_unlock>
 800f922:	f026 0607 	bic.w	r6, r6, #7
 800f926:	1d23      	adds	r3, r4, #4
 800f928:	1af2      	subs	r2, r6, r3
 800f92a:	d0b6      	beq.n	800f89a <_malloc_r+0x22>
 800f92c:	1b9b      	subs	r3, r3, r6
 800f92e:	50a3      	str	r3, [r4, r2]
 800f930:	e7b3      	b.n	800f89a <_malloc_r+0x22>
 800f932:	6862      	ldr	r2, [r4, #4]
 800f934:	42a3      	cmp	r3, r4
 800f936:	bf0c      	ite	eq
 800f938:	6032      	streq	r2, [r6, #0]
 800f93a:	605a      	strne	r2, [r3, #4]
 800f93c:	e7ec      	b.n	800f918 <_malloc_r+0xa0>
 800f93e:	4623      	mov	r3, r4
 800f940:	6864      	ldr	r4, [r4, #4]
 800f942:	e7b2      	b.n	800f8aa <_malloc_r+0x32>
 800f944:	4634      	mov	r4, r6
 800f946:	6876      	ldr	r6, [r6, #4]
 800f948:	e7b9      	b.n	800f8be <_malloc_r+0x46>
 800f94a:	230c      	movs	r3, #12
 800f94c:	603b      	str	r3, [r7, #0]
 800f94e:	4638      	mov	r0, r7
 800f950:	f000 feee 	bl	8010730 <__malloc_unlock>
 800f954:	e7a1      	b.n	800f89a <_malloc_r+0x22>
 800f956:	6025      	str	r5, [r4, #0]
 800f958:	e7de      	b.n	800f918 <_malloc_r+0xa0>
 800f95a:	bf00      	nop
 800f95c:	20000d74 	.word	0x20000d74

0800f960 <__ssputs_r>:
 800f960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f964:	688e      	ldr	r6, [r1, #8]
 800f966:	429e      	cmp	r6, r3
 800f968:	4682      	mov	sl, r0
 800f96a:	460c      	mov	r4, r1
 800f96c:	4690      	mov	r8, r2
 800f96e:	461f      	mov	r7, r3
 800f970:	d838      	bhi.n	800f9e4 <__ssputs_r+0x84>
 800f972:	898a      	ldrh	r2, [r1, #12]
 800f974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f978:	d032      	beq.n	800f9e0 <__ssputs_r+0x80>
 800f97a:	6825      	ldr	r5, [r4, #0]
 800f97c:	6909      	ldr	r1, [r1, #16]
 800f97e:	eba5 0901 	sub.w	r9, r5, r1
 800f982:	6965      	ldr	r5, [r4, #20]
 800f984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f98c:	3301      	adds	r3, #1
 800f98e:	444b      	add	r3, r9
 800f990:	106d      	asrs	r5, r5, #1
 800f992:	429d      	cmp	r5, r3
 800f994:	bf38      	it	cc
 800f996:	461d      	movcc	r5, r3
 800f998:	0553      	lsls	r3, r2, #21
 800f99a:	d531      	bpl.n	800fa00 <__ssputs_r+0xa0>
 800f99c:	4629      	mov	r1, r5
 800f99e:	f7ff ff6b 	bl	800f878 <_malloc_r>
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	b950      	cbnz	r0, 800f9bc <__ssputs_r+0x5c>
 800f9a6:	230c      	movs	r3, #12
 800f9a8:	f8ca 3000 	str.w	r3, [sl]
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9b2:	81a3      	strh	r3, [r4, #12]
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9bc:	6921      	ldr	r1, [r4, #16]
 800f9be:	464a      	mov	r2, r9
 800f9c0:	f000 fe88 	bl	80106d4 <memcpy>
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ce:	81a3      	strh	r3, [r4, #12]
 800f9d0:	6126      	str	r6, [r4, #16]
 800f9d2:	6165      	str	r5, [r4, #20]
 800f9d4:	444e      	add	r6, r9
 800f9d6:	eba5 0509 	sub.w	r5, r5, r9
 800f9da:	6026      	str	r6, [r4, #0]
 800f9dc:	60a5      	str	r5, [r4, #8]
 800f9de:	463e      	mov	r6, r7
 800f9e0:	42be      	cmp	r6, r7
 800f9e2:	d900      	bls.n	800f9e6 <__ssputs_r+0x86>
 800f9e4:	463e      	mov	r6, r7
 800f9e6:	6820      	ldr	r0, [r4, #0]
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	4641      	mov	r1, r8
 800f9ec:	f000 fe80 	bl	80106f0 <memmove>
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	1b9b      	subs	r3, r3, r6
 800f9f4:	60a3      	str	r3, [r4, #8]
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	4433      	add	r3, r6
 800f9fa:	6023      	str	r3, [r4, #0]
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	e7db      	b.n	800f9b8 <__ssputs_r+0x58>
 800fa00:	462a      	mov	r2, r5
 800fa02:	f000 fee7 	bl	80107d4 <_realloc_r>
 800fa06:	4606      	mov	r6, r0
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d1e1      	bne.n	800f9d0 <__ssputs_r+0x70>
 800fa0c:	6921      	ldr	r1, [r4, #16]
 800fa0e:	4650      	mov	r0, sl
 800fa10:	f000 fe94 	bl	801073c <_free_r>
 800fa14:	e7c7      	b.n	800f9a6 <__ssputs_r+0x46>
	...

0800fa18 <_svfiprintf_r>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	4698      	mov	r8, r3
 800fa1e:	898b      	ldrh	r3, [r1, #12]
 800fa20:	061b      	lsls	r3, r3, #24
 800fa22:	b09d      	sub	sp, #116	; 0x74
 800fa24:	4607      	mov	r7, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	4614      	mov	r4, r2
 800fa2a:	d50e      	bpl.n	800fa4a <_svfiprintf_r+0x32>
 800fa2c:	690b      	ldr	r3, [r1, #16]
 800fa2e:	b963      	cbnz	r3, 800fa4a <_svfiprintf_r+0x32>
 800fa30:	2140      	movs	r1, #64	; 0x40
 800fa32:	f7ff ff21 	bl	800f878 <_malloc_r>
 800fa36:	6028      	str	r0, [r5, #0]
 800fa38:	6128      	str	r0, [r5, #16]
 800fa3a:	b920      	cbnz	r0, 800fa46 <_svfiprintf_r+0x2e>
 800fa3c:	230c      	movs	r3, #12
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	f04f 30ff 	mov.w	r0, #4294967295
 800fa44:	e0d1      	b.n	800fbea <_svfiprintf_r+0x1d2>
 800fa46:	2340      	movs	r3, #64	; 0x40
 800fa48:	616b      	str	r3, [r5, #20]
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa4e:	2320      	movs	r3, #32
 800fa50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa54:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa58:	2330      	movs	r3, #48	; 0x30
 800fa5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc04 <_svfiprintf_r+0x1ec>
 800fa5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa62:	f04f 0901 	mov.w	r9, #1
 800fa66:	4623      	mov	r3, r4
 800fa68:	469a      	mov	sl, r3
 800fa6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa6e:	b10a      	cbz	r2, 800fa74 <_svfiprintf_r+0x5c>
 800fa70:	2a25      	cmp	r2, #37	; 0x25
 800fa72:	d1f9      	bne.n	800fa68 <_svfiprintf_r+0x50>
 800fa74:	ebba 0b04 	subs.w	fp, sl, r4
 800fa78:	d00b      	beq.n	800fa92 <_svfiprintf_r+0x7a>
 800fa7a:	465b      	mov	r3, fp
 800fa7c:	4622      	mov	r2, r4
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4638      	mov	r0, r7
 800fa82:	f7ff ff6d 	bl	800f960 <__ssputs_r>
 800fa86:	3001      	adds	r0, #1
 800fa88:	f000 80aa 	beq.w	800fbe0 <_svfiprintf_r+0x1c8>
 800fa8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa8e:	445a      	add	r2, fp
 800fa90:	9209      	str	r2, [sp, #36]	; 0x24
 800fa92:	f89a 3000 	ldrb.w	r3, [sl]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 80a2 	beq.w	800fbe0 <_svfiprintf_r+0x1c8>
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800faa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faa6:	f10a 0a01 	add.w	sl, sl, #1
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	9307      	str	r3, [sp, #28]
 800faae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fab2:	931a      	str	r3, [sp, #104]	; 0x68
 800fab4:	4654      	mov	r4, sl
 800fab6:	2205      	movs	r2, #5
 800fab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fabc:	4851      	ldr	r0, [pc, #324]	; (800fc04 <_svfiprintf_r+0x1ec>)
 800fabe:	f7f0 fba7 	bl	8000210 <memchr>
 800fac2:	9a04      	ldr	r2, [sp, #16]
 800fac4:	b9d8      	cbnz	r0, 800fafe <_svfiprintf_r+0xe6>
 800fac6:	06d0      	lsls	r0, r2, #27
 800fac8:	bf44      	itt	mi
 800faca:	2320      	movmi	r3, #32
 800facc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fad0:	0711      	lsls	r1, r2, #28
 800fad2:	bf44      	itt	mi
 800fad4:	232b      	movmi	r3, #43	; 0x2b
 800fad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fada:	f89a 3000 	ldrb.w	r3, [sl]
 800fade:	2b2a      	cmp	r3, #42	; 0x2a
 800fae0:	d015      	beq.n	800fb0e <_svfiprintf_r+0xf6>
 800fae2:	9a07      	ldr	r2, [sp, #28]
 800fae4:	4654      	mov	r4, sl
 800fae6:	2000      	movs	r0, #0
 800fae8:	f04f 0c0a 	mov.w	ip, #10
 800faec:	4621      	mov	r1, r4
 800faee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faf2:	3b30      	subs	r3, #48	; 0x30
 800faf4:	2b09      	cmp	r3, #9
 800faf6:	d94e      	bls.n	800fb96 <_svfiprintf_r+0x17e>
 800faf8:	b1b0      	cbz	r0, 800fb28 <_svfiprintf_r+0x110>
 800fafa:	9207      	str	r2, [sp, #28]
 800fafc:	e014      	b.n	800fb28 <_svfiprintf_r+0x110>
 800fafe:	eba0 0308 	sub.w	r3, r0, r8
 800fb02:	fa09 f303 	lsl.w	r3, r9, r3
 800fb06:	4313      	orrs	r3, r2
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	46a2      	mov	sl, r4
 800fb0c:	e7d2      	b.n	800fab4 <_svfiprintf_r+0x9c>
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	1d19      	adds	r1, r3, #4
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	9103      	str	r1, [sp, #12]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	bfbb      	ittet	lt
 800fb1a:	425b      	neglt	r3, r3
 800fb1c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb20:	9307      	strge	r3, [sp, #28]
 800fb22:	9307      	strlt	r3, [sp, #28]
 800fb24:	bfb8      	it	lt
 800fb26:	9204      	strlt	r2, [sp, #16]
 800fb28:	7823      	ldrb	r3, [r4, #0]
 800fb2a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb2c:	d10c      	bne.n	800fb48 <_svfiprintf_r+0x130>
 800fb2e:	7863      	ldrb	r3, [r4, #1]
 800fb30:	2b2a      	cmp	r3, #42	; 0x2a
 800fb32:	d135      	bne.n	800fba0 <_svfiprintf_r+0x188>
 800fb34:	9b03      	ldr	r3, [sp, #12]
 800fb36:	1d1a      	adds	r2, r3, #4
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	9203      	str	r2, [sp, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	bfb8      	it	lt
 800fb40:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb44:	3402      	adds	r4, #2
 800fb46:	9305      	str	r3, [sp, #20]
 800fb48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc14 <_svfiprintf_r+0x1fc>
 800fb4c:	7821      	ldrb	r1, [r4, #0]
 800fb4e:	2203      	movs	r2, #3
 800fb50:	4650      	mov	r0, sl
 800fb52:	f7f0 fb5d 	bl	8000210 <memchr>
 800fb56:	b140      	cbz	r0, 800fb6a <_svfiprintf_r+0x152>
 800fb58:	2340      	movs	r3, #64	; 0x40
 800fb5a:	eba0 000a 	sub.w	r0, r0, sl
 800fb5e:	fa03 f000 	lsl.w	r0, r3, r0
 800fb62:	9b04      	ldr	r3, [sp, #16]
 800fb64:	4303      	orrs	r3, r0
 800fb66:	3401      	adds	r4, #1
 800fb68:	9304      	str	r3, [sp, #16]
 800fb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb6e:	4826      	ldr	r0, [pc, #152]	; (800fc08 <_svfiprintf_r+0x1f0>)
 800fb70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb74:	2206      	movs	r2, #6
 800fb76:	f7f0 fb4b 	bl	8000210 <memchr>
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d038      	beq.n	800fbf0 <_svfiprintf_r+0x1d8>
 800fb7e:	4b23      	ldr	r3, [pc, #140]	; (800fc0c <_svfiprintf_r+0x1f4>)
 800fb80:	bb1b      	cbnz	r3, 800fbca <_svfiprintf_r+0x1b2>
 800fb82:	9b03      	ldr	r3, [sp, #12]
 800fb84:	3307      	adds	r3, #7
 800fb86:	f023 0307 	bic.w	r3, r3, #7
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	9303      	str	r3, [sp, #12]
 800fb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb90:	4433      	add	r3, r6
 800fb92:	9309      	str	r3, [sp, #36]	; 0x24
 800fb94:	e767      	b.n	800fa66 <_svfiprintf_r+0x4e>
 800fb96:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb9a:	460c      	mov	r4, r1
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	e7a5      	b.n	800faec <_svfiprintf_r+0xd4>
 800fba0:	2300      	movs	r3, #0
 800fba2:	3401      	adds	r4, #1
 800fba4:	9305      	str	r3, [sp, #20]
 800fba6:	4619      	mov	r1, r3
 800fba8:	f04f 0c0a 	mov.w	ip, #10
 800fbac:	4620      	mov	r0, r4
 800fbae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbb2:	3a30      	subs	r2, #48	; 0x30
 800fbb4:	2a09      	cmp	r2, #9
 800fbb6:	d903      	bls.n	800fbc0 <_svfiprintf_r+0x1a8>
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0c5      	beq.n	800fb48 <_svfiprintf_r+0x130>
 800fbbc:	9105      	str	r1, [sp, #20]
 800fbbe:	e7c3      	b.n	800fb48 <_svfiprintf_r+0x130>
 800fbc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e7f0      	b.n	800fbac <_svfiprintf_r+0x194>
 800fbca:	ab03      	add	r3, sp, #12
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	462a      	mov	r2, r5
 800fbd0:	4b0f      	ldr	r3, [pc, #60]	; (800fc10 <_svfiprintf_r+0x1f8>)
 800fbd2:	a904      	add	r1, sp, #16
 800fbd4:	4638      	mov	r0, r7
 800fbd6:	f3af 8000 	nop.w
 800fbda:	1c42      	adds	r2, r0, #1
 800fbdc:	4606      	mov	r6, r0
 800fbde:	d1d6      	bne.n	800fb8e <_svfiprintf_r+0x176>
 800fbe0:	89ab      	ldrh	r3, [r5, #12]
 800fbe2:	065b      	lsls	r3, r3, #25
 800fbe4:	f53f af2c 	bmi.w	800fa40 <_svfiprintf_r+0x28>
 800fbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbea:	b01d      	add	sp, #116	; 0x74
 800fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf0:	ab03      	add	r3, sp, #12
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	462a      	mov	r2, r5
 800fbf6:	4b06      	ldr	r3, [pc, #24]	; (800fc10 <_svfiprintf_r+0x1f8>)
 800fbf8:	a904      	add	r1, sp, #16
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	f000 f9d4 	bl	800ffa8 <_printf_i>
 800fc00:	e7eb      	b.n	800fbda <_svfiprintf_r+0x1c2>
 800fc02:	bf00      	nop
 800fc04:	08010d64 	.word	0x08010d64
 800fc08:	08010d6e 	.word	0x08010d6e
 800fc0c:	00000000 	.word	0x00000000
 800fc10:	0800f961 	.word	0x0800f961
 800fc14:	08010d6a 	.word	0x08010d6a

0800fc18 <__sfputc_r>:
 800fc18:	6893      	ldr	r3, [r2, #8]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	b410      	push	{r4}
 800fc20:	6093      	str	r3, [r2, #8]
 800fc22:	da08      	bge.n	800fc36 <__sfputc_r+0x1e>
 800fc24:	6994      	ldr	r4, [r2, #24]
 800fc26:	42a3      	cmp	r3, r4
 800fc28:	db01      	blt.n	800fc2e <__sfputc_r+0x16>
 800fc2a:	290a      	cmp	r1, #10
 800fc2c:	d103      	bne.n	800fc36 <__sfputc_r+0x1e>
 800fc2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc32:	f000 bb33 	b.w	801029c <__swbuf_r>
 800fc36:	6813      	ldr	r3, [r2, #0]
 800fc38:	1c58      	adds	r0, r3, #1
 800fc3a:	6010      	str	r0, [r2, #0]
 800fc3c:	7019      	strb	r1, [r3, #0]
 800fc3e:	4608      	mov	r0, r1
 800fc40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <__sfputs_r>:
 800fc46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc48:	4606      	mov	r6, r0
 800fc4a:	460f      	mov	r7, r1
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	18d5      	adds	r5, r2, r3
 800fc50:	42ac      	cmp	r4, r5
 800fc52:	d101      	bne.n	800fc58 <__sfputs_r+0x12>
 800fc54:	2000      	movs	r0, #0
 800fc56:	e007      	b.n	800fc68 <__sfputs_r+0x22>
 800fc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc5c:	463a      	mov	r2, r7
 800fc5e:	4630      	mov	r0, r6
 800fc60:	f7ff ffda 	bl	800fc18 <__sfputc_r>
 800fc64:	1c43      	adds	r3, r0, #1
 800fc66:	d1f3      	bne.n	800fc50 <__sfputs_r+0xa>
 800fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc6c <_vfiprintf_r>:
 800fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	460d      	mov	r5, r1
 800fc72:	b09d      	sub	sp, #116	; 0x74
 800fc74:	4614      	mov	r4, r2
 800fc76:	4698      	mov	r8, r3
 800fc78:	4606      	mov	r6, r0
 800fc7a:	b118      	cbz	r0, 800fc84 <_vfiprintf_r+0x18>
 800fc7c:	6983      	ldr	r3, [r0, #24]
 800fc7e:	b90b      	cbnz	r3, 800fc84 <_vfiprintf_r+0x18>
 800fc80:	f7ff fd3a 	bl	800f6f8 <__sinit>
 800fc84:	4b89      	ldr	r3, [pc, #548]	; (800feac <_vfiprintf_r+0x240>)
 800fc86:	429d      	cmp	r5, r3
 800fc88:	d11b      	bne.n	800fcc2 <_vfiprintf_r+0x56>
 800fc8a:	6875      	ldr	r5, [r6, #4]
 800fc8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc8e:	07d9      	lsls	r1, r3, #31
 800fc90:	d405      	bmi.n	800fc9e <_vfiprintf_r+0x32>
 800fc92:	89ab      	ldrh	r3, [r5, #12]
 800fc94:	059a      	lsls	r2, r3, #22
 800fc96:	d402      	bmi.n	800fc9e <_vfiprintf_r+0x32>
 800fc98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc9a:	f7ff fdcb 	bl	800f834 <__retarget_lock_acquire_recursive>
 800fc9e:	89ab      	ldrh	r3, [r5, #12]
 800fca0:	071b      	lsls	r3, r3, #28
 800fca2:	d501      	bpl.n	800fca8 <_vfiprintf_r+0x3c>
 800fca4:	692b      	ldr	r3, [r5, #16]
 800fca6:	b9eb      	cbnz	r3, 800fce4 <_vfiprintf_r+0x78>
 800fca8:	4629      	mov	r1, r5
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f000 fb5a 	bl	8010364 <__swsetup_r>
 800fcb0:	b1c0      	cbz	r0, 800fce4 <_vfiprintf_r+0x78>
 800fcb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcb4:	07dc      	lsls	r4, r3, #31
 800fcb6:	d50e      	bpl.n	800fcd6 <_vfiprintf_r+0x6a>
 800fcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbc:	b01d      	add	sp, #116	; 0x74
 800fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc2:	4b7b      	ldr	r3, [pc, #492]	; (800feb0 <_vfiprintf_r+0x244>)
 800fcc4:	429d      	cmp	r5, r3
 800fcc6:	d101      	bne.n	800fccc <_vfiprintf_r+0x60>
 800fcc8:	68b5      	ldr	r5, [r6, #8]
 800fcca:	e7df      	b.n	800fc8c <_vfiprintf_r+0x20>
 800fccc:	4b79      	ldr	r3, [pc, #484]	; (800feb4 <_vfiprintf_r+0x248>)
 800fcce:	429d      	cmp	r5, r3
 800fcd0:	bf08      	it	eq
 800fcd2:	68f5      	ldreq	r5, [r6, #12]
 800fcd4:	e7da      	b.n	800fc8c <_vfiprintf_r+0x20>
 800fcd6:	89ab      	ldrh	r3, [r5, #12]
 800fcd8:	0598      	lsls	r0, r3, #22
 800fcda:	d4ed      	bmi.n	800fcb8 <_vfiprintf_r+0x4c>
 800fcdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcde:	f7ff fdaa 	bl	800f836 <__retarget_lock_release_recursive>
 800fce2:	e7e9      	b.n	800fcb8 <_vfiprintf_r+0x4c>
 800fce4:	2300      	movs	r3, #0
 800fce6:	9309      	str	r3, [sp, #36]	; 0x24
 800fce8:	2320      	movs	r3, #32
 800fcea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcf2:	2330      	movs	r3, #48	; 0x30
 800fcf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800feb8 <_vfiprintf_r+0x24c>
 800fcf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcfc:	f04f 0901 	mov.w	r9, #1
 800fd00:	4623      	mov	r3, r4
 800fd02:	469a      	mov	sl, r3
 800fd04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd08:	b10a      	cbz	r2, 800fd0e <_vfiprintf_r+0xa2>
 800fd0a:	2a25      	cmp	r2, #37	; 0x25
 800fd0c:	d1f9      	bne.n	800fd02 <_vfiprintf_r+0x96>
 800fd0e:	ebba 0b04 	subs.w	fp, sl, r4
 800fd12:	d00b      	beq.n	800fd2c <_vfiprintf_r+0xc0>
 800fd14:	465b      	mov	r3, fp
 800fd16:	4622      	mov	r2, r4
 800fd18:	4629      	mov	r1, r5
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f7ff ff93 	bl	800fc46 <__sfputs_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	f000 80aa 	beq.w	800fe7a <_vfiprintf_r+0x20e>
 800fd26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd28:	445a      	add	r2, fp
 800fd2a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 80a2 	beq.w	800fe7a <_vfiprintf_r+0x20e>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f04f 32ff 	mov.w	r2, #4294967295
 800fd3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd40:	f10a 0a01 	add.w	sl, sl, #1
 800fd44:	9304      	str	r3, [sp, #16]
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd4c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd4e:	4654      	mov	r4, sl
 800fd50:	2205      	movs	r2, #5
 800fd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd56:	4858      	ldr	r0, [pc, #352]	; (800feb8 <_vfiprintf_r+0x24c>)
 800fd58:	f7f0 fa5a 	bl	8000210 <memchr>
 800fd5c:	9a04      	ldr	r2, [sp, #16]
 800fd5e:	b9d8      	cbnz	r0, 800fd98 <_vfiprintf_r+0x12c>
 800fd60:	06d1      	lsls	r1, r2, #27
 800fd62:	bf44      	itt	mi
 800fd64:	2320      	movmi	r3, #32
 800fd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd6a:	0713      	lsls	r3, r2, #28
 800fd6c:	bf44      	itt	mi
 800fd6e:	232b      	movmi	r3, #43	; 0x2b
 800fd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd74:	f89a 3000 	ldrb.w	r3, [sl]
 800fd78:	2b2a      	cmp	r3, #42	; 0x2a
 800fd7a:	d015      	beq.n	800fda8 <_vfiprintf_r+0x13c>
 800fd7c:	9a07      	ldr	r2, [sp, #28]
 800fd7e:	4654      	mov	r4, sl
 800fd80:	2000      	movs	r0, #0
 800fd82:	f04f 0c0a 	mov.w	ip, #10
 800fd86:	4621      	mov	r1, r4
 800fd88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd8c:	3b30      	subs	r3, #48	; 0x30
 800fd8e:	2b09      	cmp	r3, #9
 800fd90:	d94e      	bls.n	800fe30 <_vfiprintf_r+0x1c4>
 800fd92:	b1b0      	cbz	r0, 800fdc2 <_vfiprintf_r+0x156>
 800fd94:	9207      	str	r2, [sp, #28]
 800fd96:	e014      	b.n	800fdc2 <_vfiprintf_r+0x156>
 800fd98:	eba0 0308 	sub.w	r3, r0, r8
 800fd9c:	fa09 f303 	lsl.w	r3, r9, r3
 800fda0:	4313      	orrs	r3, r2
 800fda2:	9304      	str	r3, [sp, #16]
 800fda4:	46a2      	mov	sl, r4
 800fda6:	e7d2      	b.n	800fd4e <_vfiprintf_r+0xe2>
 800fda8:	9b03      	ldr	r3, [sp, #12]
 800fdaa:	1d19      	adds	r1, r3, #4
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	9103      	str	r1, [sp, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	bfbb      	ittet	lt
 800fdb4:	425b      	neglt	r3, r3
 800fdb6:	f042 0202 	orrlt.w	r2, r2, #2
 800fdba:	9307      	strge	r3, [sp, #28]
 800fdbc:	9307      	strlt	r3, [sp, #28]
 800fdbe:	bfb8      	it	lt
 800fdc0:	9204      	strlt	r2, [sp, #16]
 800fdc2:	7823      	ldrb	r3, [r4, #0]
 800fdc4:	2b2e      	cmp	r3, #46	; 0x2e
 800fdc6:	d10c      	bne.n	800fde2 <_vfiprintf_r+0x176>
 800fdc8:	7863      	ldrb	r3, [r4, #1]
 800fdca:	2b2a      	cmp	r3, #42	; 0x2a
 800fdcc:	d135      	bne.n	800fe3a <_vfiprintf_r+0x1ce>
 800fdce:	9b03      	ldr	r3, [sp, #12]
 800fdd0:	1d1a      	adds	r2, r3, #4
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	9203      	str	r2, [sp, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bfb8      	it	lt
 800fdda:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdde:	3402      	adds	r4, #2
 800fde0:	9305      	str	r3, [sp, #20]
 800fde2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fec8 <_vfiprintf_r+0x25c>
 800fde6:	7821      	ldrb	r1, [r4, #0]
 800fde8:	2203      	movs	r2, #3
 800fdea:	4650      	mov	r0, sl
 800fdec:	f7f0 fa10 	bl	8000210 <memchr>
 800fdf0:	b140      	cbz	r0, 800fe04 <_vfiprintf_r+0x198>
 800fdf2:	2340      	movs	r3, #64	; 0x40
 800fdf4:	eba0 000a 	sub.w	r0, r0, sl
 800fdf8:	fa03 f000 	lsl.w	r0, r3, r0
 800fdfc:	9b04      	ldr	r3, [sp, #16]
 800fdfe:	4303      	orrs	r3, r0
 800fe00:	3401      	adds	r4, #1
 800fe02:	9304      	str	r3, [sp, #16]
 800fe04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe08:	482c      	ldr	r0, [pc, #176]	; (800febc <_vfiprintf_r+0x250>)
 800fe0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe0e:	2206      	movs	r2, #6
 800fe10:	f7f0 f9fe 	bl	8000210 <memchr>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d03f      	beq.n	800fe98 <_vfiprintf_r+0x22c>
 800fe18:	4b29      	ldr	r3, [pc, #164]	; (800fec0 <_vfiprintf_r+0x254>)
 800fe1a:	bb1b      	cbnz	r3, 800fe64 <_vfiprintf_r+0x1f8>
 800fe1c:	9b03      	ldr	r3, [sp, #12]
 800fe1e:	3307      	adds	r3, #7
 800fe20:	f023 0307 	bic.w	r3, r3, #7
 800fe24:	3308      	adds	r3, #8
 800fe26:	9303      	str	r3, [sp, #12]
 800fe28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe2a:	443b      	add	r3, r7
 800fe2c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe2e:	e767      	b.n	800fd00 <_vfiprintf_r+0x94>
 800fe30:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe34:	460c      	mov	r4, r1
 800fe36:	2001      	movs	r0, #1
 800fe38:	e7a5      	b.n	800fd86 <_vfiprintf_r+0x11a>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	3401      	adds	r4, #1
 800fe3e:	9305      	str	r3, [sp, #20]
 800fe40:	4619      	mov	r1, r3
 800fe42:	f04f 0c0a 	mov.w	ip, #10
 800fe46:	4620      	mov	r0, r4
 800fe48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe4c:	3a30      	subs	r2, #48	; 0x30
 800fe4e:	2a09      	cmp	r2, #9
 800fe50:	d903      	bls.n	800fe5a <_vfiprintf_r+0x1ee>
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d0c5      	beq.n	800fde2 <_vfiprintf_r+0x176>
 800fe56:	9105      	str	r1, [sp, #20]
 800fe58:	e7c3      	b.n	800fde2 <_vfiprintf_r+0x176>
 800fe5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe5e:	4604      	mov	r4, r0
 800fe60:	2301      	movs	r3, #1
 800fe62:	e7f0      	b.n	800fe46 <_vfiprintf_r+0x1da>
 800fe64:	ab03      	add	r3, sp, #12
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	462a      	mov	r2, r5
 800fe6a:	4b16      	ldr	r3, [pc, #88]	; (800fec4 <_vfiprintf_r+0x258>)
 800fe6c:	a904      	add	r1, sp, #16
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f3af 8000 	nop.w
 800fe74:	4607      	mov	r7, r0
 800fe76:	1c78      	adds	r0, r7, #1
 800fe78:	d1d6      	bne.n	800fe28 <_vfiprintf_r+0x1bc>
 800fe7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe7c:	07d9      	lsls	r1, r3, #31
 800fe7e:	d405      	bmi.n	800fe8c <_vfiprintf_r+0x220>
 800fe80:	89ab      	ldrh	r3, [r5, #12]
 800fe82:	059a      	lsls	r2, r3, #22
 800fe84:	d402      	bmi.n	800fe8c <_vfiprintf_r+0x220>
 800fe86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe88:	f7ff fcd5 	bl	800f836 <__retarget_lock_release_recursive>
 800fe8c:	89ab      	ldrh	r3, [r5, #12]
 800fe8e:	065b      	lsls	r3, r3, #25
 800fe90:	f53f af12 	bmi.w	800fcb8 <_vfiprintf_r+0x4c>
 800fe94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe96:	e711      	b.n	800fcbc <_vfiprintf_r+0x50>
 800fe98:	ab03      	add	r3, sp, #12
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	4b09      	ldr	r3, [pc, #36]	; (800fec4 <_vfiprintf_r+0x258>)
 800fea0:	a904      	add	r1, sp, #16
 800fea2:	4630      	mov	r0, r6
 800fea4:	f000 f880 	bl	800ffa8 <_printf_i>
 800fea8:	e7e4      	b.n	800fe74 <_vfiprintf_r+0x208>
 800feaa:	bf00      	nop
 800feac:	08010d24 	.word	0x08010d24
 800feb0:	08010d44 	.word	0x08010d44
 800feb4:	08010d04 	.word	0x08010d04
 800feb8:	08010d64 	.word	0x08010d64
 800febc:	08010d6e 	.word	0x08010d6e
 800fec0:	00000000 	.word	0x00000000
 800fec4:	0800fc47 	.word	0x0800fc47
 800fec8:	08010d6a 	.word	0x08010d6a

0800fecc <_printf_common>:
 800fecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed0:	4616      	mov	r6, r2
 800fed2:	4699      	mov	r9, r3
 800fed4:	688a      	ldr	r2, [r1, #8]
 800fed6:	690b      	ldr	r3, [r1, #16]
 800fed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fedc:	4293      	cmp	r3, r2
 800fede:	bfb8      	it	lt
 800fee0:	4613      	movlt	r3, r2
 800fee2:	6033      	str	r3, [r6, #0]
 800fee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fee8:	4607      	mov	r7, r0
 800feea:	460c      	mov	r4, r1
 800feec:	b10a      	cbz	r2, 800fef2 <_printf_common+0x26>
 800feee:	3301      	adds	r3, #1
 800fef0:	6033      	str	r3, [r6, #0]
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	0699      	lsls	r1, r3, #26
 800fef6:	bf42      	ittt	mi
 800fef8:	6833      	ldrmi	r3, [r6, #0]
 800fefa:	3302      	addmi	r3, #2
 800fefc:	6033      	strmi	r3, [r6, #0]
 800fefe:	6825      	ldr	r5, [r4, #0]
 800ff00:	f015 0506 	ands.w	r5, r5, #6
 800ff04:	d106      	bne.n	800ff14 <_printf_common+0x48>
 800ff06:	f104 0a19 	add.w	sl, r4, #25
 800ff0a:	68e3      	ldr	r3, [r4, #12]
 800ff0c:	6832      	ldr	r2, [r6, #0]
 800ff0e:	1a9b      	subs	r3, r3, r2
 800ff10:	42ab      	cmp	r3, r5
 800ff12:	dc26      	bgt.n	800ff62 <_printf_common+0x96>
 800ff14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff18:	1e13      	subs	r3, r2, #0
 800ff1a:	6822      	ldr	r2, [r4, #0]
 800ff1c:	bf18      	it	ne
 800ff1e:	2301      	movne	r3, #1
 800ff20:	0692      	lsls	r2, r2, #26
 800ff22:	d42b      	bmi.n	800ff7c <_printf_common+0xb0>
 800ff24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff28:	4649      	mov	r1, r9
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	47c0      	blx	r8
 800ff2e:	3001      	adds	r0, #1
 800ff30:	d01e      	beq.n	800ff70 <_printf_common+0xa4>
 800ff32:	6823      	ldr	r3, [r4, #0]
 800ff34:	68e5      	ldr	r5, [r4, #12]
 800ff36:	6832      	ldr	r2, [r6, #0]
 800ff38:	f003 0306 	and.w	r3, r3, #6
 800ff3c:	2b04      	cmp	r3, #4
 800ff3e:	bf08      	it	eq
 800ff40:	1aad      	subeq	r5, r5, r2
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	6922      	ldr	r2, [r4, #16]
 800ff46:	bf0c      	ite	eq
 800ff48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff4c:	2500      	movne	r5, #0
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	bfc4      	itt	gt
 800ff52:	1a9b      	subgt	r3, r3, r2
 800ff54:	18ed      	addgt	r5, r5, r3
 800ff56:	2600      	movs	r6, #0
 800ff58:	341a      	adds	r4, #26
 800ff5a:	42b5      	cmp	r5, r6
 800ff5c:	d11a      	bne.n	800ff94 <_printf_common+0xc8>
 800ff5e:	2000      	movs	r0, #0
 800ff60:	e008      	b.n	800ff74 <_printf_common+0xa8>
 800ff62:	2301      	movs	r3, #1
 800ff64:	4652      	mov	r2, sl
 800ff66:	4649      	mov	r1, r9
 800ff68:	4638      	mov	r0, r7
 800ff6a:	47c0      	blx	r8
 800ff6c:	3001      	adds	r0, #1
 800ff6e:	d103      	bne.n	800ff78 <_printf_common+0xac>
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295
 800ff74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff78:	3501      	adds	r5, #1
 800ff7a:	e7c6      	b.n	800ff0a <_printf_common+0x3e>
 800ff7c:	18e1      	adds	r1, r4, r3
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	2030      	movs	r0, #48	; 0x30
 800ff82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff86:	4422      	add	r2, r4
 800ff88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff90:	3302      	adds	r3, #2
 800ff92:	e7c7      	b.n	800ff24 <_printf_common+0x58>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4622      	mov	r2, r4
 800ff98:	4649      	mov	r1, r9
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	47c0      	blx	r8
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	d0e6      	beq.n	800ff70 <_printf_common+0xa4>
 800ffa2:	3601      	adds	r6, #1
 800ffa4:	e7d9      	b.n	800ff5a <_printf_common+0x8e>
	...

0800ffa8 <_printf_i>:
 800ffa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffac:	7e0f      	ldrb	r7, [r1, #24]
 800ffae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffb0:	2f78      	cmp	r7, #120	; 0x78
 800ffb2:	4691      	mov	r9, r2
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	469a      	mov	sl, r3
 800ffba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffbe:	d807      	bhi.n	800ffd0 <_printf_i+0x28>
 800ffc0:	2f62      	cmp	r7, #98	; 0x62
 800ffc2:	d80a      	bhi.n	800ffda <_printf_i+0x32>
 800ffc4:	2f00      	cmp	r7, #0
 800ffc6:	f000 80d8 	beq.w	801017a <_printf_i+0x1d2>
 800ffca:	2f58      	cmp	r7, #88	; 0x58
 800ffcc:	f000 80a3 	beq.w	8010116 <_printf_i+0x16e>
 800ffd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffd8:	e03a      	b.n	8010050 <_printf_i+0xa8>
 800ffda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffde:	2b15      	cmp	r3, #21
 800ffe0:	d8f6      	bhi.n	800ffd0 <_printf_i+0x28>
 800ffe2:	a101      	add	r1, pc, #4	; (adr r1, 800ffe8 <_printf_i+0x40>)
 800ffe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffe8:	08010041 	.word	0x08010041
 800ffec:	08010055 	.word	0x08010055
 800fff0:	0800ffd1 	.word	0x0800ffd1
 800fff4:	0800ffd1 	.word	0x0800ffd1
 800fff8:	0800ffd1 	.word	0x0800ffd1
 800fffc:	0800ffd1 	.word	0x0800ffd1
 8010000:	08010055 	.word	0x08010055
 8010004:	0800ffd1 	.word	0x0800ffd1
 8010008:	0800ffd1 	.word	0x0800ffd1
 801000c:	0800ffd1 	.word	0x0800ffd1
 8010010:	0800ffd1 	.word	0x0800ffd1
 8010014:	08010161 	.word	0x08010161
 8010018:	08010085 	.word	0x08010085
 801001c:	08010143 	.word	0x08010143
 8010020:	0800ffd1 	.word	0x0800ffd1
 8010024:	0800ffd1 	.word	0x0800ffd1
 8010028:	08010183 	.word	0x08010183
 801002c:	0800ffd1 	.word	0x0800ffd1
 8010030:	08010085 	.word	0x08010085
 8010034:	0800ffd1 	.word	0x0800ffd1
 8010038:	0800ffd1 	.word	0x0800ffd1
 801003c:	0801014b 	.word	0x0801014b
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	1d1a      	adds	r2, r3, #4
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	602a      	str	r2, [r5, #0]
 8010048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801004c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010050:	2301      	movs	r3, #1
 8010052:	e0a3      	b.n	801019c <_printf_i+0x1f4>
 8010054:	6820      	ldr	r0, [r4, #0]
 8010056:	6829      	ldr	r1, [r5, #0]
 8010058:	0606      	lsls	r6, r0, #24
 801005a:	f101 0304 	add.w	r3, r1, #4
 801005e:	d50a      	bpl.n	8010076 <_printf_i+0xce>
 8010060:	680e      	ldr	r6, [r1, #0]
 8010062:	602b      	str	r3, [r5, #0]
 8010064:	2e00      	cmp	r6, #0
 8010066:	da03      	bge.n	8010070 <_printf_i+0xc8>
 8010068:	232d      	movs	r3, #45	; 0x2d
 801006a:	4276      	negs	r6, r6
 801006c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010070:	485e      	ldr	r0, [pc, #376]	; (80101ec <_printf_i+0x244>)
 8010072:	230a      	movs	r3, #10
 8010074:	e019      	b.n	80100aa <_printf_i+0x102>
 8010076:	680e      	ldr	r6, [r1, #0]
 8010078:	602b      	str	r3, [r5, #0]
 801007a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801007e:	bf18      	it	ne
 8010080:	b236      	sxthne	r6, r6
 8010082:	e7ef      	b.n	8010064 <_printf_i+0xbc>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	6820      	ldr	r0, [r4, #0]
 8010088:	1d19      	adds	r1, r3, #4
 801008a:	6029      	str	r1, [r5, #0]
 801008c:	0601      	lsls	r1, r0, #24
 801008e:	d501      	bpl.n	8010094 <_printf_i+0xec>
 8010090:	681e      	ldr	r6, [r3, #0]
 8010092:	e002      	b.n	801009a <_printf_i+0xf2>
 8010094:	0646      	lsls	r6, r0, #25
 8010096:	d5fb      	bpl.n	8010090 <_printf_i+0xe8>
 8010098:	881e      	ldrh	r6, [r3, #0]
 801009a:	4854      	ldr	r0, [pc, #336]	; (80101ec <_printf_i+0x244>)
 801009c:	2f6f      	cmp	r7, #111	; 0x6f
 801009e:	bf0c      	ite	eq
 80100a0:	2308      	moveq	r3, #8
 80100a2:	230a      	movne	r3, #10
 80100a4:	2100      	movs	r1, #0
 80100a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100aa:	6865      	ldr	r5, [r4, #4]
 80100ac:	60a5      	str	r5, [r4, #8]
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	bfa2      	ittt	ge
 80100b2:	6821      	ldrge	r1, [r4, #0]
 80100b4:	f021 0104 	bicge.w	r1, r1, #4
 80100b8:	6021      	strge	r1, [r4, #0]
 80100ba:	b90e      	cbnz	r6, 80100c0 <_printf_i+0x118>
 80100bc:	2d00      	cmp	r5, #0
 80100be:	d04d      	beq.n	801015c <_printf_i+0x1b4>
 80100c0:	4615      	mov	r5, r2
 80100c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80100c6:	fb03 6711 	mls	r7, r3, r1, r6
 80100ca:	5dc7      	ldrb	r7, [r0, r7]
 80100cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100d0:	4637      	mov	r7, r6
 80100d2:	42bb      	cmp	r3, r7
 80100d4:	460e      	mov	r6, r1
 80100d6:	d9f4      	bls.n	80100c2 <_printf_i+0x11a>
 80100d8:	2b08      	cmp	r3, #8
 80100da:	d10b      	bne.n	80100f4 <_printf_i+0x14c>
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	07de      	lsls	r6, r3, #31
 80100e0:	d508      	bpl.n	80100f4 <_printf_i+0x14c>
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	6861      	ldr	r1, [r4, #4]
 80100e6:	4299      	cmp	r1, r3
 80100e8:	bfde      	ittt	le
 80100ea:	2330      	movle	r3, #48	; 0x30
 80100ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100f4:	1b52      	subs	r2, r2, r5
 80100f6:	6122      	str	r2, [r4, #16]
 80100f8:	f8cd a000 	str.w	sl, [sp]
 80100fc:	464b      	mov	r3, r9
 80100fe:	aa03      	add	r2, sp, #12
 8010100:	4621      	mov	r1, r4
 8010102:	4640      	mov	r0, r8
 8010104:	f7ff fee2 	bl	800fecc <_printf_common>
 8010108:	3001      	adds	r0, #1
 801010a:	d14c      	bne.n	80101a6 <_printf_i+0x1fe>
 801010c:	f04f 30ff 	mov.w	r0, #4294967295
 8010110:	b004      	add	sp, #16
 8010112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010116:	4835      	ldr	r0, [pc, #212]	; (80101ec <_printf_i+0x244>)
 8010118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801011c:	6829      	ldr	r1, [r5, #0]
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	f851 6b04 	ldr.w	r6, [r1], #4
 8010124:	6029      	str	r1, [r5, #0]
 8010126:	061d      	lsls	r5, r3, #24
 8010128:	d514      	bpl.n	8010154 <_printf_i+0x1ac>
 801012a:	07df      	lsls	r7, r3, #31
 801012c:	bf44      	itt	mi
 801012e:	f043 0320 	orrmi.w	r3, r3, #32
 8010132:	6023      	strmi	r3, [r4, #0]
 8010134:	b91e      	cbnz	r6, 801013e <_printf_i+0x196>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	f023 0320 	bic.w	r3, r3, #32
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	2310      	movs	r3, #16
 8010140:	e7b0      	b.n	80100a4 <_printf_i+0xfc>
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	f043 0320 	orr.w	r3, r3, #32
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	2378      	movs	r3, #120	; 0x78
 801014c:	4828      	ldr	r0, [pc, #160]	; (80101f0 <_printf_i+0x248>)
 801014e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010152:	e7e3      	b.n	801011c <_printf_i+0x174>
 8010154:	0659      	lsls	r1, r3, #25
 8010156:	bf48      	it	mi
 8010158:	b2b6      	uxthmi	r6, r6
 801015a:	e7e6      	b.n	801012a <_printf_i+0x182>
 801015c:	4615      	mov	r5, r2
 801015e:	e7bb      	b.n	80100d8 <_printf_i+0x130>
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	6826      	ldr	r6, [r4, #0]
 8010164:	6961      	ldr	r1, [r4, #20]
 8010166:	1d18      	adds	r0, r3, #4
 8010168:	6028      	str	r0, [r5, #0]
 801016a:	0635      	lsls	r5, r6, #24
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	d501      	bpl.n	8010174 <_printf_i+0x1cc>
 8010170:	6019      	str	r1, [r3, #0]
 8010172:	e002      	b.n	801017a <_printf_i+0x1d2>
 8010174:	0670      	lsls	r0, r6, #25
 8010176:	d5fb      	bpl.n	8010170 <_printf_i+0x1c8>
 8010178:	8019      	strh	r1, [r3, #0]
 801017a:	2300      	movs	r3, #0
 801017c:	6123      	str	r3, [r4, #16]
 801017e:	4615      	mov	r5, r2
 8010180:	e7ba      	b.n	80100f8 <_printf_i+0x150>
 8010182:	682b      	ldr	r3, [r5, #0]
 8010184:	1d1a      	adds	r2, r3, #4
 8010186:	602a      	str	r2, [r5, #0]
 8010188:	681d      	ldr	r5, [r3, #0]
 801018a:	6862      	ldr	r2, [r4, #4]
 801018c:	2100      	movs	r1, #0
 801018e:	4628      	mov	r0, r5
 8010190:	f7f0 f83e 	bl	8000210 <memchr>
 8010194:	b108      	cbz	r0, 801019a <_printf_i+0x1f2>
 8010196:	1b40      	subs	r0, r0, r5
 8010198:	6060      	str	r0, [r4, #4]
 801019a:	6863      	ldr	r3, [r4, #4]
 801019c:	6123      	str	r3, [r4, #16]
 801019e:	2300      	movs	r3, #0
 80101a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101a4:	e7a8      	b.n	80100f8 <_printf_i+0x150>
 80101a6:	6923      	ldr	r3, [r4, #16]
 80101a8:	462a      	mov	r2, r5
 80101aa:	4649      	mov	r1, r9
 80101ac:	4640      	mov	r0, r8
 80101ae:	47d0      	blx	sl
 80101b0:	3001      	adds	r0, #1
 80101b2:	d0ab      	beq.n	801010c <_printf_i+0x164>
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	079b      	lsls	r3, r3, #30
 80101b8:	d413      	bmi.n	80101e2 <_printf_i+0x23a>
 80101ba:	68e0      	ldr	r0, [r4, #12]
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	4298      	cmp	r0, r3
 80101c0:	bfb8      	it	lt
 80101c2:	4618      	movlt	r0, r3
 80101c4:	e7a4      	b.n	8010110 <_printf_i+0x168>
 80101c6:	2301      	movs	r3, #1
 80101c8:	4632      	mov	r2, r6
 80101ca:	4649      	mov	r1, r9
 80101cc:	4640      	mov	r0, r8
 80101ce:	47d0      	blx	sl
 80101d0:	3001      	adds	r0, #1
 80101d2:	d09b      	beq.n	801010c <_printf_i+0x164>
 80101d4:	3501      	adds	r5, #1
 80101d6:	68e3      	ldr	r3, [r4, #12]
 80101d8:	9903      	ldr	r1, [sp, #12]
 80101da:	1a5b      	subs	r3, r3, r1
 80101dc:	42ab      	cmp	r3, r5
 80101de:	dcf2      	bgt.n	80101c6 <_printf_i+0x21e>
 80101e0:	e7eb      	b.n	80101ba <_printf_i+0x212>
 80101e2:	2500      	movs	r5, #0
 80101e4:	f104 0619 	add.w	r6, r4, #25
 80101e8:	e7f5      	b.n	80101d6 <_printf_i+0x22e>
 80101ea:	bf00      	nop
 80101ec:	08010d75 	.word	0x08010d75
 80101f0:	08010d86 	.word	0x08010d86

080101f4 <_sbrk_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	4d06      	ldr	r5, [pc, #24]	; (8010210 <_sbrk_r+0x1c>)
 80101f8:	2300      	movs	r3, #0
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	602b      	str	r3, [r5, #0]
 8010200:	f7f1 fc40 	bl	8001a84 <_sbrk>
 8010204:	1c43      	adds	r3, r0, #1
 8010206:	d102      	bne.n	801020e <_sbrk_r+0x1a>
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	b103      	cbz	r3, 801020e <_sbrk_r+0x1a>
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	bd38      	pop	{r3, r4, r5, pc}
 8010210:	20000d7c 	.word	0x20000d7c

08010214 <__sread>:
 8010214:	b510      	push	{r4, lr}
 8010216:	460c      	mov	r4, r1
 8010218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801021c:	f000 fb0a 	bl	8010834 <_read_r>
 8010220:	2800      	cmp	r0, #0
 8010222:	bfab      	itete	ge
 8010224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010226:	89a3      	ldrhlt	r3, [r4, #12]
 8010228:	181b      	addge	r3, r3, r0
 801022a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801022e:	bfac      	ite	ge
 8010230:	6563      	strge	r3, [r4, #84]	; 0x54
 8010232:	81a3      	strhlt	r3, [r4, #12]
 8010234:	bd10      	pop	{r4, pc}

08010236 <__swrite>:
 8010236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023a:	461f      	mov	r7, r3
 801023c:	898b      	ldrh	r3, [r1, #12]
 801023e:	05db      	lsls	r3, r3, #23
 8010240:	4605      	mov	r5, r0
 8010242:	460c      	mov	r4, r1
 8010244:	4616      	mov	r6, r2
 8010246:	d505      	bpl.n	8010254 <__swrite+0x1e>
 8010248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801024c:	2302      	movs	r3, #2
 801024e:	2200      	movs	r2, #0
 8010250:	f000 f9c8 	bl	80105e4 <_lseek_r>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801025a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801025e:	81a3      	strh	r3, [r4, #12]
 8010260:	4632      	mov	r2, r6
 8010262:	463b      	mov	r3, r7
 8010264:	4628      	mov	r0, r5
 8010266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	f000 b869 	b.w	8010340 <_write_r>

0801026e <__sseek>:
 801026e:	b510      	push	{r4, lr}
 8010270:	460c      	mov	r4, r1
 8010272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010276:	f000 f9b5 	bl	80105e4 <_lseek_r>
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	89a3      	ldrh	r3, [r4, #12]
 801027e:	bf15      	itete	ne
 8010280:	6560      	strne	r0, [r4, #84]	; 0x54
 8010282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801028a:	81a3      	strheq	r3, [r4, #12]
 801028c:	bf18      	it	ne
 801028e:	81a3      	strhne	r3, [r4, #12]
 8010290:	bd10      	pop	{r4, pc}

08010292 <__sclose>:
 8010292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010296:	f000 b8d3 	b.w	8010440 <_close_r>
	...

0801029c <__swbuf_r>:
 801029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801029e:	460e      	mov	r6, r1
 80102a0:	4614      	mov	r4, r2
 80102a2:	4605      	mov	r5, r0
 80102a4:	b118      	cbz	r0, 80102ae <__swbuf_r+0x12>
 80102a6:	6983      	ldr	r3, [r0, #24]
 80102a8:	b90b      	cbnz	r3, 80102ae <__swbuf_r+0x12>
 80102aa:	f7ff fa25 	bl	800f6f8 <__sinit>
 80102ae:	4b21      	ldr	r3, [pc, #132]	; (8010334 <__swbuf_r+0x98>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	d12b      	bne.n	801030c <__swbuf_r+0x70>
 80102b4:	686c      	ldr	r4, [r5, #4]
 80102b6:	69a3      	ldr	r3, [r4, #24]
 80102b8:	60a3      	str	r3, [r4, #8]
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	071a      	lsls	r2, r3, #28
 80102be:	d52f      	bpl.n	8010320 <__swbuf_r+0x84>
 80102c0:	6923      	ldr	r3, [r4, #16]
 80102c2:	b36b      	cbz	r3, 8010320 <__swbuf_r+0x84>
 80102c4:	6923      	ldr	r3, [r4, #16]
 80102c6:	6820      	ldr	r0, [r4, #0]
 80102c8:	1ac0      	subs	r0, r0, r3
 80102ca:	6963      	ldr	r3, [r4, #20]
 80102cc:	b2f6      	uxtb	r6, r6
 80102ce:	4283      	cmp	r3, r0
 80102d0:	4637      	mov	r7, r6
 80102d2:	dc04      	bgt.n	80102de <__swbuf_r+0x42>
 80102d4:	4621      	mov	r1, r4
 80102d6:	4628      	mov	r0, r5
 80102d8:	f000 f948 	bl	801056c <_fflush_r>
 80102dc:	bb30      	cbnz	r0, 801032c <__swbuf_r+0x90>
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	60a3      	str	r3, [r4, #8]
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	1c5a      	adds	r2, r3, #1
 80102e8:	6022      	str	r2, [r4, #0]
 80102ea:	701e      	strb	r6, [r3, #0]
 80102ec:	6963      	ldr	r3, [r4, #20]
 80102ee:	3001      	adds	r0, #1
 80102f0:	4283      	cmp	r3, r0
 80102f2:	d004      	beq.n	80102fe <__swbuf_r+0x62>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	07db      	lsls	r3, r3, #31
 80102f8:	d506      	bpl.n	8010308 <__swbuf_r+0x6c>
 80102fa:	2e0a      	cmp	r6, #10
 80102fc:	d104      	bne.n	8010308 <__swbuf_r+0x6c>
 80102fe:	4621      	mov	r1, r4
 8010300:	4628      	mov	r0, r5
 8010302:	f000 f933 	bl	801056c <_fflush_r>
 8010306:	b988      	cbnz	r0, 801032c <__swbuf_r+0x90>
 8010308:	4638      	mov	r0, r7
 801030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030c:	4b0a      	ldr	r3, [pc, #40]	; (8010338 <__swbuf_r+0x9c>)
 801030e:	429c      	cmp	r4, r3
 8010310:	d101      	bne.n	8010316 <__swbuf_r+0x7a>
 8010312:	68ac      	ldr	r4, [r5, #8]
 8010314:	e7cf      	b.n	80102b6 <__swbuf_r+0x1a>
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <__swbuf_r+0xa0>)
 8010318:	429c      	cmp	r4, r3
 801031a:	bf08      	it	eq
 801031c:	68ec      	ldreq	r4, [r5, #12]
 801031e:	e7ca      	b.n	80102b6 <__swbuf_r+0x1a>
 8010320:	4621      	mov	r1, r4
 8010322:	4628      	mov	r0, r5
 8010324:	f000 f81e 	bl	8010364 <__swsetup_r>
 8010328:	2800      	cmp	r0, #0
 801032a:	d0cb      	beq.n	80102c4 <__swbuf_r+0x28>
 801032c:	f04f 37ff 	mov.w	r7, #4294967295
 8010330:	e7ea      	b.n	8010308 <__swbuf_r+0x6c>
 8010332:	bf00      	nop
 8010334:	08010d24 	.word	0x08010d24
 8010338:	08010d44 	.word	0x08010d44
 801033c:	08010d04 	.word	0x08010d04

08010340 <_write_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d07      	ldr	r5, [pc, #28]	; (8010360 <_write_r+0x20>)
 8010344:	4604      	mov	r4, r0
 8010346:	4608      	mov	r0, r1
 8010348:	4611      	mov	r1, r2
 801034a:	2200      	movs	r2, #0
 801034c:	602a      	str	r2, [r5, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	f7f1 fb47 	bl	80019e2 <_write>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d102      	bne.n	801035e <_write_r+0x1e>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	b103      	cbz	r3, 801035e <_write_r+0x1e>
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	20000d7c 	.word	0x20000d7c

08010364 <__swsetup_r>:
 8010364:	4b32      	ldr	r3, [pc, #200]	; (8010430 <__swsetup_r+0xcc>)
 8010366:	b570      	push	{r4, r5, r6, lr}
 8010368:	681d      	ldr	r5, [r3, #0]
 801036a:	4606      	mov	r6, r0
 801036c:	460c      	mov	r4, r1
 801036e:	b125      	cbz	r5, 801037a <__swsetup_r+0x16>
 8010370:	69ab      	ldr	r3, [r5, #24]
 8010372:	b913      	cbnz	r3, 801037a <__swsetup_r+0x16>
 8010374:	4628      	mov	r0, r5
 8010376:	f7ff f9bf 	bl	800f6f8 <__sinit>
 801037a:	4b2e      	ldr	r3, [pc, #184]	; (8010434 <__swsetup_r+0xd0>)
 801037c:	429c      	cmp	r4, r3
 801037e:	d10f      	bne.n	80103a0 <__swsetup_r+0x3c>
 8010380:	686c      	ldr	r4, [r5, #4]
 8010382:	89a3      	ldrh	r3, [r4, #12]
 8010384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010388:	0719      	lsls	r1, r3, #28
 801038a:	d42c      	bmi.n	80103e6 <__swsetup_r+0x82>
 801038c:	06dd      	lsls	r5, r3, #27
 801038e:	d411      	bmi.n	80103b4 <__swsetup_r+0x50>
 8010390:	2309      	movs	r3, #9
 8010392:	6033      	str	r3, [r6, #0]
 8010394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295
 801039e:	e03e      	b.n	801041e <__swsetup_r+0xba>
 80103a0:	4b25      	ldr	r3, [pc, #148]	; (8010438 <__swsetup_r+0xd4>)
 80103a2:	429c      	cmp	r4, r3
 80103a4:	d101      	bne.n	80103aa <__swsetup_r+0x46>
 80103a6:	68ac      	ldr	r4, [r5, #8]
 80103a8:	e7eb      	b.n	8010382 <__swsetup_r+0x1e>
 80103aa:	4b24      	ldr	r3, [pc, #144]	; (801043c <__swsetup_r+0xd8>)
 80103ac:	429c      	cmp	r4, r3
 80103ae:	bf08      	it	eq
 80103b0:	68ec      	ldreq	r4, [r5, #12]
 80103b2:	e7e6      	b.n	8010382 <__swsetup_r+0x1e>
 80103b4:	0758      	lsls	r0, r3, #29
 80103b6:	d512      	bpl.n	80103de <__swsetup_r+0x7a>
 80103b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103ba:	b141      	cbz	r1, 80103ce <__swsetup_r+0x6a>
 80103bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103c0:	4299      	cmp	r1, r3
 80103c2:	d002      	beq.n	80103ca <__swsetup_r+0x66>
 80103c4:	4630      	mov	r0, r6
 80103c6:	f000 f9b9 	bl	801073c <_free_r>
 80103ca:	2300      	movs	r3, #0
 80103cc:	6363      	str	r3, [r4, #52]	; 0x34
 80103ce:	89a3      	ldrh	r3, [r4, #12]
 80103d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103d4:	81a3      	strh	r3, [r4, #12]
 80103d6:	2300      	movs	r3, #0
 80103d8:	6063      	str	r3, [r4, #4]
 80103da:	6923      	ldr	r3, [r4, #16]
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	89a3      	ldrh	r3, [r4, #12]
 80103e0:	f043 0308 	orr.w	r3, r3, #8
 80103e4:	81a3      	strh	r3, [r4, #12]
 80103e6:	6923      	ldr	r3, [r4, #16]
 80103e8:	b94b      	cbnz	r3, 80103fe <__swsetup_r+0x9a>
 80103ea:	89a3      	ldrh	r3, [r4, #12]
 80103ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103f4:	d003      	beq.n	80103fe <__swsetup_r+0x9a>
 80103f6:	4621      	mov	r1, r4
 80103f8:	4630      	mov	r0, r6
 80103fa:	f000 f92b 	bl	8010654 <__smakebuf_r>
 80103fe:	89a0      	ldrh	r0, [r4, #12]
 8010400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010404:	f010 0301 	ands.w	r3, r0, #1
 8010408:	d00a      	beq.n	8010420 <__swsetup_r+0xbc>
 801040a:	2300      	movs	r3, #0
 801040c:	60a3      	str	r3, [r4, #8]
 801040e:	6963      	ldr	r3, [r4, #20]
 8010410:	425b      	negs	r3, r3
 8010412:	61a3      	str	r3, [r4, #24]
 8010414:	6923      	ldr	r3, [r4, #16]
 8010416:	b943      	cbnz	r3, 801042a <__swsetup_r+0xc6>
 8010418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801041c:	d1ba      	bne.n	8010394 <__swsetup_r+0x30>
 801041e:	bd70      	pop	{r4, r5, r6, pc}
 8010420:	0781      	lsls	r1, r0, #30
 8010422:	bf58      	it	pl
 8010424:	6963      	ldrpl	r3, [r4, #20]
 8010426:	60a3      	str	r3, [r4, #8]
 8010428:	e7f4      	b.n	8010414 <__swsetup_r+0xb0>
 801042a:	2000      	movs	r0, #0
 801042c:	e7f7      	b.n	801041e <__swsetup_r+0xba>
 801042e:	bf00      	nop
 8010430:	20000198 	.word	0x20000198
 8010434:	08010d24 	.word	0x08010d24
 8010438:	08010d44 	.word	0x08010d44
 801043c:	08010d04 	.word	0x08010d04

08010440 <_close_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d06      	ldr	r5, [pc, #24]	; (801045c <_close_r+0x1c>)
 8010444:	2300      	movs	r3, #0
 8010446:	4604      	mov	r4, r0
 8010448:	4608      	mov	r0, r1
 801044a:	602b      	str	r3, [r5, #0]
 801044c:	f7f1 fae5 	bl	8001a1a <_close>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d102      	bne.n	801045a <_close_r+0x1a>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	b103      	cbz	r3, 801045a <_close_r+0x1a>
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	bd38      	pop	{r3, r4, r5, pc}
 801045c:	20000d7c 	.word	0x20000d7c

08010460 <__sflush_r>:
 8010460:	898a      	ldrh	r2, [r1, #12]
 8010462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010466:	4605      	mov	r5, r0
 8010468:	0710      	lsls	r0, r2, #28
 801046a:	460c      	mov	r4, r1
 801046c:	d458      	bmi.n	8010520 <__sflush_r+0xc0>
 801046e:	684b      	ldr	r3, [r1, #4]
 8010470:	2b00      	cmp	r3, #0
 8010472:	dc05      	bgt.n	8010480 <__sflush_r+0x20>
 8010474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010476:	2b00      	cmp	r3, #0
 8010478:	dc02      	bgt.n	8010480 <__sflush_r+0x20>
 801047a:	2000      	movs	r0, #0
 801047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010482:	2e00      	cmp	r6, #0
 8010484:	d0f9      	beq.n	801047a <__sflush_r+0x1a>
 8010486:	2300      	movs	r3, #0
 8010488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801048c:	682f      	ldr	r7, [r5, #0]
 801048e:	602b      	str	r3, [r5, #0]
 8010490:	d032      	beq.n	80104f8 <__sflush_r+0x98>
 8010492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010494:	89a3      	ldrh	r3, [r4, #12]
 8010496:	075a      	lsls	r2, r3, #29
 8010498:	d505      	bpl.n	80104a6 <__sflush_r+0x46>
 801049a:	6863      	ldr	r3, [r4, #4]
 801049c:	1ac0      	subs	r0, r0, r3
 801049e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104a0:	b10b      	cbz	r3, 80104a6 <__sflush_r+0x46>
 80104a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104a4:	1ac0      	subs	r0, r0, r3
 80104a6:	2300      	movs	r3, #0
 80104a8:	4602      	mov	r2, r0
 80104aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104ac:	6a21      	ldr	r1, [r4, #32]
 80104ae:	4628      	mov	r0, r5
 80104b0:	47b0      	blx	r6
 80104b2:	1c43      	adds	r3, r0, #1
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	d106      	bne.n	80104c6 <__sflush_r+0x66>
 80104b8:	6829      	ldr	r1, [r5, #0]
 80104ba:	291d      	cmp	r1, #29
 80104bc:	d82c      	bhi.n	8010518 <__sflush_r+0xb8>
 80104be:	4a2a      	ldr	r2, [pc, #168]	; (8010568 <__sflush_r+0x108>)
 80104c0:	40ca      	lsrs	r2, r1
 80104c2:	07d6      	lsls	r6, r2, #31
 80104c4:	d528      	bpl.n	8010518 <__sflush_r+0xb8>
 80104c6:	2200      	movs	r2, #0
 80104c8:	6062      	str	r2, [r4, #4]
 80104ca:	04d9      	lsls	r1, r3, #19
 80104cc:	6922      	ldr	r2, [r4, #16]
 80104ce:	6022      	str	r2, [r4, #0]
 80104d0:	d504      	bpl.n	80104dc <__sflush_r+0x7c>
 80104d2:	1c42      	adds	r2, r0, #1
 80104d4:	d101      	bne.n	80104da <__sflush_r+0x7a>
 80104d6:	682b      	ldr	r3, [r5, #0]
 80104d8:	b903      	cbnz	r3, 80104dc <__sflush_r+0x7c>
 80104da:	6560      	str	r0, [r4, #84]	; 0x54
 80104dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104de:	602f      	str	r7, [r5, #0]
 80104e0:	2900      	cmp	r1, #0
 80104e2:	d0ca      	beq.n	801047a <__sflush_r+0x1a>
 80104e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104e8:	4299      	cmp	r1, r3
 80104ea:	d002      	beq.n	80104f2 <__sflush_r+0x92>
 80104ec:	4628      	mov	r0, r5
 80104ee:	f000 f925 	bl	801073c <_free_r>
 80104f2:	2000      	movs	r0, #0
 80104f4:	6360      	str	r0, [r4, #52]	; 0x34
 80104f6:	e7c1      	b.n	801047c <__sflush_r+0x1c>
 80104f8:	6a21      	ldr	r1, [r4, #32]
 80104fa:	2301      	movs	r3, #1
 80104fc:	4628      	mov	r0, r5
 80104fe:	47b0      	blx	r6
 8010500:	1c41      	adds	r1, r0, #1
 8010502:	d1c7      	bne.n	8010494 <__sflush_r+0x34>
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d0c4      	beq.n	8010494 <__sflush_r+0x34>
 801050a:	2b1d      	cmp	r3, #29
 801050c:	d001      	beq.n	8010512 <__sflush_r+0xb2>
 801050e:	2b16      	cmp	r3, #22
 8010510:	d101      	bne.n	8010516 <__sflush_r+0xb6>
 8010512:	602f      	str	r7, [r5, #0]
 8010514:	e7b1      	b.n	801047a <__sflush_r+0x1a>
 8010516:	89a3      	ldrh	r3, [r4, #12]
 8010518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801051c:	81a3      	strh	r3, [r4, #12]
 801051e:	e7ad      	b.n	801047c <__sflush_r+0x1c>
 8010520:	690f      	ldr	r7, [r1, #16]
 8010522:	2f00      	cmp	r7, #0
 8010524:	d0a9      	beq.n	801047a <__sflush_r+0x1a>
 8010526:	0793      	lsls	r3, r2, #30
 8010528:	680e      	ldr	r6, [r1, #0]
 801052a:	bf08      	it	eq
 801052c:	694b      	ldreq	r3, [r1, #20]
 801052e:	600f      	str	r7, [r1, #0]
 8010530:	bf18      	it	ne
 8010532:	2300      	movne	r3, #0
 8010534:	eba6 0807 	sub.w	r8, r6, r7
 8010538:	608b      	str	r3, [r1, #8]
 801053a:	f1b8 0f00 	cmp.w	r8, #0
 801053e:	dd9c      	ble.n	801047a <__sflush_r+0x1a>
 8010540:	6a21      	ldr	r1, [r4, #32]
 8010542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010544:	4643      	mov	r3, r8
 8010546:	463a      	mov	r2, r7
 8010548:	4628      	mov	r0, r5
 801054a:	47b0      	blx	r6
 801054c:	2800      	cmp	r0, #0
 801054e:	dc06      	bgt.n	801055e <__sflush_r+0xfe>
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010556:	81a3      	strh	r3, [r4, #12]
 8010558:	f04f 30ff 	mov.w	r0, #4294967295
 801055c:	e78e      	b.n	801047c <__sflush_r+0x1c>
 801055e:	4407      	add	r7, r0
 8010560:	eba8 0800 	sub.w	r8, r8, r0
 8010564:	e7e9      	b.n	801053a <__sflush_r+0xda>
 8010566:	bf00      	nop
 8010568:	20400001 	.word	0x20400001

0801056c <_fflush_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	690b      	ldr	r3, [r1, #16]
 8010570:	4605      	mov	r5, r0
 8010572:	460c      	mov	r4, r1
 8010574:	b913      	cbnz	r3, 801057c <_fflush_r+0x10>
 8010576:	2500      	movs	r5, #0
 8010578:	4628      	mov	r0, r5
 801057a:	bd38      	pop	{r3, r4, r5, pc}
 801057c:	b118      	cbz	r0, 8010586 <_fflush_r+0x1a>
 801057e:	6983      	ldr	r3, [r0, #24]
 8010580:	b90b      	cbnz	r3, 8010586 <_fflush_r+0x1a>
 8010582:	f7ff f8b9 	bl	800f6f8 <__sinit>
 8010586:	4b14      	ldr	r3, [pc, #80]	; (80105d8 <_fflush_r+0x6c>)
 8010588:	429c      	cmp	r4, r3
 801058a:	d11b      	bne.n	80105c4 <_fflush_r+0x58>
 801058c:	686c      	ldr	r4, [r5, #4]
 801058e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d0ef      	beq.n	8010576 <_fflush_r+0xa>
 8010596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010598:	07d0      	lsls	r0, r2, #31
 801059a:	d404      	bmi.n	80105a6 <_fflush_r+0x3a>
 801059c:	0599      	lsls	r1, r3, #22
 801059e:	d402      	bmi.n	80105a6 <_fflush_r+0x3a>
 80105a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105a2:	f7ff f947 	bl	800f834 <__retarget_lock_acquire_recursive>
 80105a6:	4628      	mov	r0, r5
 80105a8:	4621      	mov	r1, r4
 80105aa:	f7ff ff59 	bl	8010460 <__sflush_r>
 80105ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105b0:	07da      	lsls	r2, r3, #31
 80105b2:	4605      	mov	r5, r0
 80105b4:	d4e0      	bmi.n	8010578 <_fflush_r+0xc>
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	059b      	lsls	r3, r3, #22
 80105ba:	d4dd      	bmi.n	8010578 <_fflush_r+0xc>
 80105bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105be:	f7ff f93a 	bl	800f836 <__retarget_lock_release_recursive>
 80105c2:	e7d9      	b.n	8010578 <_fflush_r+0xc>
 80105c4:	4b05      	ldr	r3, [pc, #20]	; (80105dc <_fflush_r+0x70>)
 80105c6:	429c      	cmp	r4, r3
 80105c8:	d101      	bne.n	80105ce <_fflush_r+0x62>
 80105ca:	68ac      	ldr	r4, [r5, #8]
 80105cc:	e7df      	b.n	801058e <_fflush_r+0x22>
 80105ce:	4b04      	ldr	r3, [pc, #16]	; (80105e0 <_fflush_r+0x74>)
 80105d0:	429c      	cmp	r4, r3
 80105d2:	bf08      	it	eq
 80105d4:	68ec      	ldreq	r4, [r5, #12]
 80105d6:	e7da      	b.n	801058e <_fflush_r+0x22>
 80105d8:	08010d24 	.word	0x08010d24
 80105dc:	08010d44 	.word	0x08010d44
 80105e0:	08010d04 	.word	0x08010d04

080105e4 <_lseek_r>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4d07      	ldr	r5, [pc, #28]	; (8010604 <_lseek_r+0x20>)
 80105e8:	4604      	mov	r4, r0
 80105ea:	4608      	mov	r0, r1
 80105ec:	4611      	mov	r1, r2
 80105ee:	2200      	movs	r2, #0
 80105f0:	602a      	str	r2, [r5, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	f7f1 fa38 	bl	8001a68 <_lseek>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_lseek_r+0x1e>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_lseek_r+0x1e>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	20000d7c 	.word	0x20000d7c

08010608 <__swhatbuf_r>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	460e      	mov	r6, r1
 801060c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010610:	2900      	cmp	r1, #0
 8010612:	b096      	sub	sp, #88	; 0x58
 8010614:	4614      	mov	r4, r2
 8010616:	461d      	mov	r5, r3
 8010618:	da08      	bge.n	801062c <__swhatbuf_r+0x24>
 801061a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	602a      	str	r2, [r5, #0]
 8010622:	061a      	lsls	r2, r3, #24
 8010624:	d410      	bmi.n	8010648 <__swhatbuf_r+0x40>
 8010626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801062a:	e00e      	b.n	801064a <__swhatbuf_r+0x42>
 801062c:	466a      	mov	r2, sp
 801062e:	f000 f913 	bl	8010858 <_fstat_r>
 8010632:	2800      	cmp	r0, #0
 8010634:	dbf1      	blt.n	801061a <__swhatbuf_r+0x12>
 8010636:	9a01      	ldr	r2, [sp, #4]
 8010638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801063c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010640:	425a      	negs	r2, r3
 8010642:	415a      	adcs	r2, r3
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	e7ee      	b.n	8010626 <__swhatbuf_r+0x1e>
 8010648:	2340      	movs	r3, #64	; 0x40
 801064a:	2000      	movs	r0, #0
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	b016      	add	sp, #88	; 0x58
 8010650:	bd70      	pop	{r4, r5, r6, pc}
	...

08010654 <__smakebuf_r>:
 8010654:	898b      	ldrh	r3, [r1, #12]
 8010656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010658:	079d      	lsls	r5, r3, #30
 801065a:	4606      	mov	r6, r0
 801065c:	460c      	mov	r4, r1
 801065e:	d507      	bpl.n	8010670 <__smakebuf_r+0x1c>
 8010660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	6123      	str	r3, [r4, #16]
 8010668:	2301      	movs	r3, #1
 801066a:	6163      	str	r3, [r4, #20]
 801066c:	b002      	add	sp, #8
 801066e:	bd70      	pop	{r4, r5, r6, pc}
 8010670:	ab01      	add	r3, sp, #4
 8010672:	466a      	mov	r2, sp
 8010674:	f7ff ffc8 	bl	8010608 <__swhatbuf_r>
 8010678:	9900      	ldr	r1, [sp, #0]
 801067a:	4605      	mov	r5, r0
 801067c:	4630      	mov	r0, r6
 801067e:	f7ff f8fb 	bl	800f878 <_malloc_r>
 8010682:	b948      	cbnz	r0, 8010698 <__smakebuf_r+0x44>
 8010684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010688:	059a      	lsls	r2, r3, #22
 801068a:	d4ef      	bmi.n	801066c <__smakebuf_r+0x18>
 801068c:	f023 0303 	bic.w	r3, r3, #3
 8010690:	f043 0302 	orr.w	r3, r3, #2
 8010694:	81a3      	strh	r3, [r4, #12]
 8010696:	e7e3      	b.n	8010660 <__smakebuf_r+0xc>
 8010698:	4b0d      	ldr	r3, [pc, #52]	; (80106d0 <__smakebuf_r+0x7c>)
 801069a:	62b3      	str	r3, [r6, #40]	; 0x28
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	6020      	str	r0, [r4, #0]
 80106a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a4:	81a3      	strh	r3, [r4, #12]
 80106a6:	9b00      	ldr	r3, [sp, #0]
 80106a8:	6163      	str	r3, [r4, #20]
 80106aa:	9b01      	ldr	r3, [sp, #4]
 80106ac:	6120      	str	r0, [r4, #16]
 80106ae:	b15b      	cbz	r3, 80106c8 <__smakebuf_r+0x74>
 80106b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106b4:	4630      	mov	r0, r6
 80106b6:	f000 f8e1 	bl	801087c <_isatty_r>
 80106ba:	b128      	cbz	r0, 80106c8 <__smakebuf_r+0x74>
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f023 0303 	bic.w	r3, r3, #3
 80106c2:	f043 0301 	orr.w	r3, r3, #1
 80106c6:	81a3      	strh	r3, [r4, #12]
 80106c8:	89a0      	ldrh	r0, [r4, #12]
 80106ca:	4305      	orrs	r5, r0
 80106cc:	81a5      	strh	r5, [r4, #12]
 80106ce:	e7cd      	b.n	801066c <__smakebuf_r+0x18>
 80106d0:	0800f691 	.word	0x0800f691

080106d4 <memcpy>:
 80106d4:	440a      	add	r2, r1
 80106d6:	4291      	cmp	r1, r2
 80106d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80106dc:	d100      	bne.n	80106e0 <memcpy+0xc>
 80106de:	4770      	bx	lr
 80106e0:	b510      	push	{r4, lr}
 80106e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106ea:	4291      	cmp	r1, r2
 80106ec:	d1f9      	bne.n	80106e2 <memcpy+0xe>
 80106ee:	bd10      	pop	{r4, pc}

080106f0 <memmove>:
 80106f0:	4288      	cmp	r0, r1
 80106f2:	b510      	push	{r4, lr}
 80106f4:	eb01 0402 	add.w	r4, r1, r2
 80106f8:	d902      	bls.n	8010700 <memmove+0x10>
 80106fa:	4284      	cmp	r4, r0
 80106fc:	4623      	mov	r3, r4
 80106fe:	d807      	bhi.n	8010710 <memmove+0x20>
 8010700:	1e43      	subs	r3, r0, #1
 8010702:	42a1      	cmp	r1, r4
 8010704:	d008      	beq.n	8010718 <memmove+0x28>
 8010706:	f811 2b01 	ldrb.w	r2, [r1], #1
 801070a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801070e:	e7f8      	b.n	8010702 <memmove+0x12>
 8010710:	4402      	add	r2, r0
 8010712:	4601      	mov	r1, r0
 8010714:	428a      	cmp	r2, r1
 8010716:	d100      	bne.n	801071a <memmove+0x2a>
 8010718:	bd10      	pop	{r4, pc}
 801071a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801071e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010722:	e7f7      	b.n	8010714 <memmove+0x24>

08010724 <__malloc_lock>:
 8010724:	4801      	ldr	r0, [pc, #4]	; (801072c <__malloc_lock+0x8>)
 8010726:	f7ff b885 	b.w	800f834 <__retarget_lock_acquire_recursive>
 801072a:	bf00      	nop
 801072c:	20000d70 	.word	0x20000d70

08010730 <__malloc_unlock>:
 8010730:	4801      	ldr	r0, [pc, #4]	; (8010738 <__malloc_unlock+0x8>)
 8010732:	f7ff b880 	b.w	800f836 <__retarget_lock_release_recursive>
 8010736:	bf00      	nop
 8010738:	20000d70 	.word	0x20000d70

0801073c <_free_r>:
 801073c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801073e:	2900      	cmp	r1, #0
 8010740:	d044      	beq.n	80107cc <_free_r+0x90>
 8010742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010746:	9001      	str	r0, [sp, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	f1a1 0404 	sub.w	r4, r1, #4
 801074e:	bfb8      	it	lt
 8010750:	18e4      	addlt	r4, r4, r3
 8010752:	f7ff ffe7 	bl	8010724 <__malloc_lock>
 8010756:	4a1e      	ldr	r2, [pc, #120]	; (80107d0 <_free_r+0x94>)
 8010758:	9801      	ldr	r0, [sp, #4]
 801075a:	6813      	ldr	r3, [r2, #0]
 801075c:	b933      	cbnz	r3, 801076c <_free_r+0x30>
 801075e:	6063      	str	r3, [r4, #4]
 8010760:	6014      	str	r4, [r2, #0]
 8010762:	b003      	add	sp, #12
 8010764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010768:	f7ff bfe2 	b.w	8010730 <__malloc_unlock>
 801076c:	42a3      	cmp	r3, r4
 801076e:	d908      	bls.n	8010782 <_free_r+0x46>
 8010770:	6825      	ldr	r5, [r4, #0]
 8010772:	1961      	adds	r1, r4, r5
 8010774:	428b      	cmp	r3, r1
 8010776:	bf01      	itttt	eq
 8010778:	6819      	ldreq	r1, [r3, #0]
 801077a:	685b      	ldreq	r3, [r3, #4]
 801077c:	1949      	addeq	r1, r1, r5
 801077e:	6021      	streq	r1, [r4, #0]
 8010780:	e7ed      	b.n	801075e <_free_r+0x22>
 8010782:	461a      	mov	r2, r3
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	b10b      	cbz	r3, 801078c <_free_r+0x50>
 8010788:	42a3      	cmp	r3, r4
 801078a:	d9fa      	bls.n	8010782 <_free_r+0x46>
 801078c:	6811      	ldr	r1, [r2, #0]
 801078e:	1855      	adds	r5, r2, r1
 8010790:	42a5      	cmp	r5, r4
 8010792:	d10b      	bne.n	80107ac <_free_r+0x70>
 8010794:	6824      	ldr	r4, [r4, #0]
 8010796:	4421      	add	r1, r4
 8010798:	1854      	adds	r4, r2, r1
 801079a:	42a3      	cmp	r3, r4
 801079c:	6011      	str	r1, [r2, #0]
 801079e:	d1e0      	bne.n	8010762 <_free_r+0x26>
 80107a0:	681c      	ldr	r4, [r3, #0]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	6053      	str	r3, [r2, #4]
 80107a6:	4421      	add	r1, r4
 80107a8:	6011      	str	r1, [r2, #0]
 80107aa:	e7da      	b.n	8010762 <_free_r+0x26>
 80107ac:	d902      	bls.n	80107b4 <_free_r+0x78>
 80107ae:	230c      	movs	r3, #12
 80107b0:	6003      	str	r3, [r0, #0]
 80107b2:	e7d6      	b.n	8010762 <_free_r+0x26>
 80107b4:	6825      	ldr	r5, [r4, #0]
 80107b6:	1961      	adds	r1, r4, r5
 80107b8:	428b      	cmp	r3, r1
 80107ba:	bf04      	itt	eq
 80107bc:	6819      	ldreq	r1, [r3, #0]
 80107be:	685b      	ldreq	r3, [r3, #4]
 80107c0:	6063      	str	r3, [r4, #4]
 80107c2:	bf04      	itt	eq
 80107c4:	1949      	addeq	r1, r1, r5
 80107c6:	6021      	streq	r1, [r4, #0]
 80107c8:	6054      	str	r4, [r2, #4]
 80107ca:	e7ca      	b.n	8010762 <_free_r+0x26>
 80107cc:	b003      	add	sp, #12
 80107ce:	bd30      	pop	{r4, r5, pc}
 80107d0:	20000d74 	.word	0x20000d74

080107d4 <_realloc_r>:
 80107d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d8:	4680      	mov	r8, r0
 80107da:	4614      	mov	r4, r2
 80107dc:	460e      	mov	r6, r1
 80107de:	b921      	cbnz	r1, 80107ea <_realloc_r+0x16>
 80107e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107e4:	4611      	mov	r1, r2
 80107e6:	f7ff b847 	b.w	800f878 <_malloc_r>
 80107ea:	b92a      	cbnz	r2, 80107f8 <_realloc_r+0x24>
 80107ec:	f7ff ffa6 	bl	801073c <_free_r>
 80107f0:	4625      	mov	r5, r4
 80107f2:	4628      	mov	r0, r5
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	f000 f850 	bl	801089c <_malloc_usable_size_r>
 80107fc:	4284      	cmp	r4, r0
 80107fe:	4607      	mov	r7, r0
 8010800:	d802      	bhi.n	8010808 <_realloc_r+0x34>
 8010802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010806:	d812      	bhi.n	801082e <_realloc_r+0x5a>
 8010808:	4621      	mov	r1, r4
 801080a:	4640      	mov	r0, r8
 801080c:	f7ff f834 	bl	800f878 <_malloc_r>
 8010810:	4605      	mov	r5, r0
 8010812:	2800      	cmp	r0, #0
 8010814:	d0ed      	beq.n	80107f2 <_realloc_r+0x1e>
 8010816:	42bc      	cmp	r4, r7
 8010818:	4622      	mov	r2, r4
 801081a:	4631      	mov	r1, r6
 801081c:	bf28      	it	cs
 801081e:	463a      	movcs	r2, r7
 8010820:	f7ff ff58 	bl	80106d4 <memcpy>
 8010824:	4631      	mov	r1, r6
 8010826:	4640      	mov	r0, r8
 8010828:	f7ff ff88 	bl	801073c <_free_r>
 801082c:	e7e1      	b.n	80107f2 <_realloc_r+0x1e>
 801082e:	4635      	mov	r5, r6
 8010830:	e7df      	b.n	80107f2 <_realloc_r+0x1e>
	...

08010834 <_read_r>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4d07      	ldr	r5, [pc, #28]	; (8010854 <_read_r+0x20>)
 8010838:	4604      	mov	r4, r0
 801083a:	4608      	mov	r0, r1
 801083c:	4611      	mov	r1, r2
 801083e:	2200      	movs	r2, #0
 8010840:	602a      	str	r2, [r5, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	f7f1 f8b0 	bl	80019a8 <_read>
 8010848:	1c43      	adds	r3, r0, #1
 801084a:	d102      	bne.n	8010852 <_read_r+0x1e>
 801084c:	682b      	ldr	r3, [r5, #0]
 801084e:	b103      	cbz	r3, 8010852 <_read_r+0x1e>
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	20000d7c 	.word	0x20000d7c

08010858 <_fstat_r>:
 8010858:	b538      	push	{r3, r4, r5, lr}
 801085a:	4d07      	ldr	r5, [pc, #28]	; (8010878 <_fstat_r+0x20>)
 801085c:	2300      	movs	r3, #0
 801085e:	4604      	mov	r4, r0
 8010860:	4608      	mov	r0, r1
 8010862:	4611      	mov	r1, r2
 8010864:	602b      	str	r3, [r5, #0]
 8010866:	f7f1 f8e4 	bl	8001a32 <_fstat>
 801086a:	1c43      	adds	r3, r0, #1
 801086c:	d102      	bne.n	8010874 <_fstat_r+0x1c>
 801086e:	682b      	ldr	r3, [r5, #0]
 8010870:	b103      	cbz	r3, 8010874 <_fstat_r+0x1c>
 8010872:	6023      	str	r3, [r4, #0]
 8010874:	bd38      	pop	{r3, r4, r5, pc}
 8010876:	bf00      	nop
 8010878:	20000d7c 	.word	0x20000d7c

0801087c <_isatty_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	4d06      	ldr	r5, [pc, #24]	; (8010898 <_isatty_r+0x1c>)
 8010880:	2300      	movs	r3, #0
 8010882:	4604      	mov	r4, r0
 8010884:	4608      	mov	r0, r1
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	f7f1 f8e3 	bl	8001a52 <_isatty>
 801088c:	1c43      	adds	r3, r0, #1
 801088e:	d102      	bne.n	8010896 <_isatty_r+0x1a>
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	b103      	cbz	r3, 8010896 <_isatty_r+0x1a>
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	bd38      	pop	{r3, r4, r5, pc}
 8010898:	20000d7c 	.word	0x20000d7c

0801089c <_malloc_usable_size_r>:
 801089c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108a0:	1f18      	subs	r0, r3, #4
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	bfbc      	itt	lt
 80108a6:	580b      	ldrlt	r3, [r1, r0]
 80108a8:	18c0      	addlt	r0, r0, r3
 80108aa:	4770      	bx	lr

080108ac <_init>:
 80108ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ae:	bf00      	nop
 80108b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108b2:	bc08      	pop	{r3}
 80108b4:	469e      	mov	lr, r3
 80108b6:	4770      	bx	lr

080108b8 <_fini>:
 80108b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ba:	bf00      	nop
 80108bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108be:	bc08      	pop	{r3}
 80108c0:	469e      	mov	lr, r3
 80108c2:	4770      	bx	lr
