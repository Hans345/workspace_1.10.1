
CPP_IKS01A3_Sol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005114  08005114  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800511c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  0800518c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  0800522c  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  200001b0  080052cc  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  080052cc  00020864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000124c8  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024c8  00000000  00000000  000326a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d70  00000000  00000000  00034b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c78  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a027  00000000  00000000  00036558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010fdd  00000000  00000000  0006057f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0e4a  00000000  00000000  0007155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001623a6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000401c  00000000  00000000  001623f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005014 	.word	0x08005014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08005014 	.word	0x08005014

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <cpp_main>:
#include "cpp_main.h"
#include "main.h"		//For. HAL-Functions
#include "stdio.h"		//For. printf()


void cpp_main(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	// Output to Console
	int cnt = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
	printf("CPP Main started!\n");
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <cpp_main+0x30>)
 80005c0:	f003 fd62 	bl	8004088 <puts>
	printf("Cnt=%d",cnt); printf("\n");
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <cpp_main+0x34>)
 80005c8:	f003 fcc2 	bl	8003f50 <iprintf>
 80005cc:	200a      	movs	r0, #10
 80005ce:	f003 fcd7 	bl	8003f80 <putchar>

	while (1)
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <cpp_main+0x38>)
 80005d6:	f001 fb16 	bl	8001c06 <HAL_GPIO_TogglePin>
			HAL_Delay(250);
 80005da:	20fa      	movs	r0, #250	; 0xfa
 80005dc:	f000 fd1e 	bl	800101c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005e0:	e7f7      	b.n	80005d2 <cpp_main+0x1e>
 80005e2:	bf00      	nop
 80005e4:	0800502c 	.word	0x0800502c
 80005e8:	08005040 	.word	0x08005040
 80005ec:	40020400 	.word	0x40020400

080005f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d013      	beq.n	8000630 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000610:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00b      	beq.n	8000630 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000618:	e000      	b.n	800061c <ITM_SendChar+0x2c>
    {
      __NOP();
 800061a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800061c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000626:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc8d 	bl	8000f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f810 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f922 	bl	8000894 <MX_GPIO_Init>
  MX_ETH_Init();
 8000650:	f000 f874 	bl	800073c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000654:	f000 f8c0 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000658:	f000 f8ee 	bl	8000838 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <main+0x28>)
 800065e:	f003 fd13 	bl	8004088 <puts>
	  cpp_main();
 8000662:	f7ff ffa7 	bl	80005b4 <cpp_main>
	  printf(" C Main started!\n");
 8000666:	e7f9      	b.n	800065c <main+0x1c>
 8000668:	08005048 	.word	0x08005048

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fc60 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f001 fc1c 	bl	8001ecc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a26      	ldr	r2, [pc, #152]	; (8000734 <SystemClock_Config+0xc8>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <SystemClock_Config+0xc8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <SystemClock_Config+0xcc>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <SystemClock_Config+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e0:	2348      	movs	r3, #72	; 0x48
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e8:	2303      	movs	r3, #3
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fbfb 	bl	8001eec <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f988 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fe89 	bl	8002434 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000728:	f000 f972 	bl	8000a10 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ETH_Init+0x84>)
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MX_ETH_Init+0x88>)
 8000744:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ETH_Init+0x8c>)
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000754:	22e1      	movs	r2, #225	; 0xe1
 8000756:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ETH_Init+0x84>)
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_ETH_Init+0x8c>)
 800076e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_ETH_Init+0x84>)
 8000772:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000776:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ETH_Init+0x84>)
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <MX_ETH_Init+0x90>)
 800077c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_ETH_Init+0x84>)
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_ETH_Init+0x94>)
 8000782:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_ETH_Init+0x84>)
 8000786:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800078a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_ETH_Init+0x84>)
 800078e:	f000 fd4f 	bl	8001230 <HAL_ETH_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f93a 	bl	8000a10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800079c:	2238      	movs	r2, #56	; 0x38
 800079e:	2100      	movs	r1, #0
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_ETH_Init+0x98>)
 80007a2:	f003 fbcd 	bl	8003f40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_ETH_Init+0x98>)
 80007a8:	2221      	movs	r2, #33	; 0x21
 80007aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_ETH_Init+0x98>)
 80007ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_ETH_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000204 	.word	0x20000204
 80007c4:	40028000 	.word	0x40028000
 80007c8:	20000844 	.word	0x20000844
 80007cc:	20000110 	.word	0x20000110
 80007d0:	20000070 	.word	0x20000070
 80007d4:	200001cc 	.word	0x200001cc

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART3_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800081c:	f002 fc20 	bl	8003060 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f8f3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200002b4 	.word	0x200002b4
 8000834:	40004800 	.word	0x40004800

08000838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2206      	movs	r2, #6
 8000848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	f001 f9dd 	bl	8001c3a <HAL_PCD_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f8c3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000033c 	.word	0x2000033c

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a46      	ldr	r2, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	4b41      	ldr	r3, [pc, #260]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a40      	ldr	r2, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a3a      	ldr	r2, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a34      	ldr	r2, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x138>)
 8000942:	f001 f947 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x13c>)
 800094c:	f001 f942 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x140>)
 8000968:	f000 ff88 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Blue_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x138>)
 8000986:	f000 ff79 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x13c>)
 80009a2:	f000 ff6b 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x13c>)
 80009ba:	f000 ff5f 	bl	800187c <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800

080009d8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e009      	b.n	80009fe <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fdfc 	bl	80005f0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dbf1      	blt.n	80009ea <_write+0x12>
  }
  return len;
 8000a06:	687b      	ldr	r3, [r7, #4]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_ETH_MspInit+0x158>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	f040 8096 	bne.w	8000bb4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a40      	ldr	r2, [pc, #256]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a3a      	ldr	r2, [pc, #232]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a34      	ldr	r2, [pc, #208]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a2e      	ldr	r2, [pc, #184]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b30:	2332      	movs	r3, #50	; 0x32
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b40:	230b      	movs	r3, #11
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <HAL_ETH_MspInit+0x160>)
 8000b4c:	f000 fe96 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b50:	2386      	movs	r3, #134	; 0x86
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <HAL_ETH_MspInit+0x164>)
 8000b6c:	f000 fe86 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480f      	ldr	r0, [pc, #60]	; (8000bcc <HAL_ETH_MspInit+0x168>)
 8000b8e:	f000 fe75 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <HAL_ETH_MspInit+0x16c>)
 8000bb0:	f000 fe64 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40028000 	.word	0x40028000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40021800 	.word	0x40021800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0aa      	sub	sp, #168	; 0xa8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2284      	movs	r2, #132	; 0x84
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f9a3 	bl	8003f40 <memset>
  if(huart->Instance==USART3)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <HAL_UART_MspInit+0xb4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d13c      	bne.n	8000c7e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fe34 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1e:	f7ff fef7 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c7a:	f000 fdff 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	37a8      	adds	r7, #168	; 0xa8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ac      	sub	sp, #176	; 0xb0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2284      	movs	r2, #132	; 0x84
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 f943 	bl	8003f40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc2:	d159      	bne.n	8000d78 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fdd3 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ce0:	f7ff fe96 	bl	8000a10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cfc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d16:	230a      	movs	r3, #10
 8000d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <HAL_PCD_MspInit+0xf0>)
 8000d24:	f000 fdaa 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_PCD_MspInit+0xf0>)
 8000d44:	f000 fd9a 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d52:	6353      	str	r3, [r2, #52]	; 0x34
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_PCD_MspInit+0xec>)
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	37b0      	adds	r7, #176	; 0xb0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f902 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00a      	b.n	8000e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dee:	f3af 8000 	nop.w
 8000df2:	4601      	mov	r1, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf0      	blt.n	8000dee <_read+0x12>
	}

return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f003 f81c 	bl	8003eec <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20050000 	.word	0x20050000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	2000084c 	.word	0x2000084c
 8000ee8:	20000868 	.word	0x20000868

08000eec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f2c:	4c0b      	ldr	r4, [pc, #44]	; (8000f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3a:	f7ff ffd7 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f002 ffdb 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fb7d 	bl	8000640 <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f54:	0800511c 	.word	0x0800511c
  ldr r2, =_sbss
 8000f58:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000f5c:	20000864 	.word	0x20000864

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>

08000f62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f92e 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f805 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f72:	f7ff fd53 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f93b 	bl	8001216 <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f911 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000850 	.word	0x20000850

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000850 	.word	0x20000850

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008

08001064 <__NVIC_SetPriorityGrouping>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0000 	.word	0x05fa0000

080010ac <__NVIC_GetPriorityGrouping>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff5c 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffb0 	bl	8001184 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06a      	b.n	8001318 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2223      	movs	r2, #35	; 0x23
 8001250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fc05 	bl	8000a64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_ETH_Init+0xf0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_ETH_Init+0xf0>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_ETH_Init+0xf0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_ETH_Init+0xf4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <HAL_ETH_Init+0xf4>)
 8001278:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800127c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_ETH_Init+0xf4>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <HAL_ETH_Init+0xf4>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_ETH_Init+0xf4>)
 800128e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff feac 	bl	8001004 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ae:	e011      	b.n	80012d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012b0:	f7ff fea8 	bl	8001004 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012be:	d909      	bls.n	80012d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	22e0      	movs	r2, #224	; 0xe0
 80012cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f958 	bl	800159c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f9ff 	bl	80016f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fa55 	bl	80017a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f9bd 	bl	8001680 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800

08001328 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <ETH_SetMACConfig+0x15c>)
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7c1b      	ldrb	r3, [r3, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <ETH_SetMACConfig+0x28>
 800134a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800134e:	e000      	b.n	8001352 <ETH_SetMACConfig+0x2a>
 8001350:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7c5b      	ldrb	r3, [r3, #17]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <ETH_SetMACConfig+0x38>
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	e000      	b.n	8001362 <ETH_SetMACConfig+0x3a>
 8001360:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001362:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7fdb      	ldrb	r3, [r3, #31]
 800136e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001370:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7f92      	ldrb	r2, [r2, #30]
 800137c:	2a00      	cmp	r2, #0
 800137e:	d102      	bne.n	8001386 <ETH_SetMACConfig+0x5e>
 8001380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001384:	e000      	b.n	8001388 <ETH_SetMACConfig+0x60>
 8001386:	2200      	movs	r2, #0
                        macconf->Speed |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	7f1b      	ldrb	r3, [r3, #28]
 800138e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001390:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001396:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d102      	bne.n	80013b0 <ETH_SetMACConfig+0x88>
 80013aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ae:	e000      	b.n	80013b2 <ETH_SetMACConfig+0x8a>
 80013b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe1a 	bl	800101c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001406:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800140e:	2a00      	cmp	r2, #0
 8001410:	d101      	bne.n	8001416 <ETH_SetMACConfig+0xee>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	e000      	b.n	8001418 <ETH_SetMACConfig+0xf0>
 8001416:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001418:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800141e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001426:	2a01      	cmp	r2, #1
 8001428:	d101      	bne.n	800142e <ETH_SetMACConfig+0x106>
 800142a:	2208      	movs	r2, #8
 800142c:	e000      	b.n	8001430 <ETH_SetMACConfig+0x108>
 800142e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001430:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001438:	2a01      	cmp	r2, #1
 800143a:	d101      	bne.n	8001440 <ETH_SetMACConfig+0x118>
 800143c:	2204      	movs	r2, #4
 800143e:	e000      	b.n	8001442 <ETH_SetMACConfig+0x11a>
 8001440:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001442:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800144a:	2a01      	cmp	r2, #1
 800144c:	d101      	bne.n	8001452 <ETH_SetMACConfig+0x12a>
 800144e:	2202      	movs	r2, #2
 8001450:	e000      	b.n	8001454 <ETH_SetMACConfig+0x12c>
 8001452:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001454:	4313      	orrs	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fdd5 	bl	800101c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	ff20810f 	.word	0xff20810f

08001488 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <ETH_SetDMAConfig+0x110>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7b1b      	ldrb	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ETH_SetDMAConfig+0x2c>
 80014ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b2:	e000      	b.n	80014b6 <ETH_SetDMAConfig+0x2e>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7b5b      	ldrb	r3, [r3, #13]
 80014ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	7f52      	ldrb	r2, [r2, #29]
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <ETH_SetDMAConfig+0x44>
 80014c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ca:	e000      	b.n	80014ce <ETH_SetDMAConfig+0x46>
 80014cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	7b9b      	ldrb	r3, [r3, #14]
 80014d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7f9b      	ldrb	r3, [r3, #30]
 80014ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fd7c 	bl	800101c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001542:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001548:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001550:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001552:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800155a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001560:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800156a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fd4d 	bl	800101c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f8de3f23 	.word	0xf8de3f23

0800159c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a6      	sub	sp, #152	; 0x98
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015d8:	2300      	movs	r3, #0
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fe86 	bl	8001328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800161c:	2301      	movs	r3, #1
 800161e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001648:	2301      	movs	r3, #1
 800164a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800164c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001650:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff08 	bl	8001488 <ETH_SetDMAConfig>
}
 8001678:	bf00      	nop
 800167a:	3798      	adds	r7, #152	; 0x98
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	3204      	adds	r2, #4
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <ETH_MACAddressConfig+0x68>)
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <ETH_MACAddressConfig+0x6c>)
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40028040 	.word	0x40028040
 80016ec:	40028044 	.word	0x40028044

080016f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e03e      	b.n	800177c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	3206      	adds	r2, #6
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d80c      	bhi.n	8001760 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e004      	b.n	800176a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d9bd      	bls.n	80016fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e046      	b.n	800183e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80017f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	3212      	adds	r2, #18
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d80c      	bhi.n	800182e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6919      	ldr	r1, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e004      	b.n	8001838 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d9b5      	bls.n	80017b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e175      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8164 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x56>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80be 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae86 	bls.w	800189c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c18:	887a      	ldrh	r2, [r7, #2]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	400b      	ands	r3, r1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3c:	b08f      	sub	sp, #60	; 0x3c
 8001c3e:	af0a      	add	r7, sp, #40	; 0x28
 8001c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e116      	b.n	8001e7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff f814 	bl	8000c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fe92 	bl	80039b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	687e      	ldr	r6, [r7, #4]
 8001c98:	466d      	mov	r5, sp
 8001c9a:	f106 0410 	add.w	r4, r6, #16
 8001c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001caa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cae:	1d33      	adds	r3, r6, #4
 8001cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f001 fe26 	bl	8003904 <USB_CoreInit>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0d7      	b.n	8001e7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fe80 	bl	80039d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	e04a      	b.n	8001d72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	333d      	adds	r3, #61	; 0x3d
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	333c      	adds	r3, #60	; 0x3c
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	b298      	uxth	r0, r3
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3344      	adds	r3, #68	; 0x44
 8001d18:	4602      	mov	r2, r0
 8001d1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3340      	adds	r3, #64	; 0x40
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3348      	adds	r3, #72	; 0x48
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	334c      	adds	r3, #76	; 0x4c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3354      	adds	r3, #84	; 0x54
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d3af      	bcc.n	8001cdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e044      	b.n	8001e0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3b5      	bcc.n	8001d82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	687e      	ldr	r6, [r7, #4]
 8001e1e:	466d      	mov	r5, sp
 8001e20:	f106 0410 	add.w	r4, r6, #16
 8001e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e34:	1d33      	adds	r3, r6, #4
 8001e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f001 fe19 	bl	8003a70 <USB_DevInit>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e014      	b.n	8001e7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f80b 	bl	8001e84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 ffd7 	bl	8003e26 <USB_DevDisconnect>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	10000003 	.word	0x10000003

08001ecc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e291      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1c:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d112      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f34:	d10b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <HAL_RCC_OscConfig+0x130>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d168      	bne.n	800201c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e26b      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a>
 8001f58:	4b84      	ldr	r3, [pc, #528]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x9c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7e      	ldr	r2, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7b      	ldr	r2, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f81a 	bl	8001004 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f816 	bl	8001004 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e21f      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f806 	bl	8001004 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f802 	bl	8001004 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e20b      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x110>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d069      	beq.n	80020fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1df      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe ffb8 	bl	8001004 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7fe ffb4 	bl	8001004 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1bd      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff94 	bl	8001004 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe ff90 	bl	8001004 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e199      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe ff71 	bl	8001004 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ff6d 	bl	8001004 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e176      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x23a>
 8002144:	e01a      	b.n	800217c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe ff57 	bl	8001004 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7fe ff53 	bl	8001004 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d903      	bls.n	8002170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e15c      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
 800216c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a4 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a87      	ldr	r2, [pc, #540]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b85      	ldr	r3, [pc, #532]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff1b 	bl	8001004 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe ff17 	bl	8001004 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e120      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b75      	ldr	r3, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x31a>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x33c>
 800220e:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a66      	ldr	r2, [pc, #408]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x35e>
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a60      	ldr	r2, [pc, #384]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 800224a:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fecb 	bl	8001004 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fec7 	bl	8001004 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ce      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x386>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe feb5 	bl	8001004 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe feb1 	bl	8001004 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0b8      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80a4 	beq.w	8002424 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d06b      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d149      	bne.n	8002384 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fe82 	bl	8001004 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fe7e 	bl	8001004 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e087      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	4313      	orrs	r3, r2
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800234a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800234e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fe52 	bl	8001004 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fe4e 	bl	8001004 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e057      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x478>
 8002382:	e04f      	b.n	8002424 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe38 	bl	8001004 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fe34 	bl	8001004 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e03d      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x4ac>
 80023b6:	e035      	b.n	8002424 <HAL_RCC_OscConfig+0x538>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x544>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d028      	beq.n	8002420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d121      	bne.n	8002420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11a      	bne.n	8002420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	3b01      	subs	r3, #1
 800240a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d0      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d910      	bls.n	800247c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 020f 	bic.w	r2, r3, #15
 8002462:	4965      	ldr	r1, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d040      	beq.n	8002558 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e073      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4936      	ldr	r1, [pc, #216]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002528:	f7fe fd6c 	bl	8001004 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e053      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d210      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 020f 	bic.w	r2, r3, #15
 800256e:	4922      	ldr	r1, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1cc>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1d0>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1d4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fcc8 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800505c 	.word	0x0800505c
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002610:	b094      	sub	sp, #80	; 0x50
 8002612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
 8002618:	2300      	movs	r3, #0
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	2300      	movs	r3, #0
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002624:	4b79      	ldr	r3, [pc, #484]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002630:	2b08      	cmp	r3, #8
 8002632:	f200 80e1 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x34>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3a>
 800263e:	e0db      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002644:	e0db      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCC_GetSysClockFreq+0x208>)
 8002648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264a:	e0d8      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
 800266c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
 800267a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002690:	0150      	lsls	r0, r2, #5
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4621      	mov	r1, r4
 8002698:	1a51      	subs	r1, r2, r1
 800269a:	6139      	str	r1, [r7, #16]
 800269c:	4629      	mov	r1, r5
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b0:	4659      	mov	r1, fp
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	4651      	mov	r1, sl
 80026b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ba:	4651      	mov	r1, sl
 80026bc:	018a      	lsls	r2, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ebb2 0801 	subs.w	r8, r2, r1
 80026c4:	4659      	mov	r1, fp
 80026c6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	462b      	mov	r3, r5
 80026ec:	eb49 0303 	adc.w	r3, r9, r3
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026fe:	4629      	mov	r1, r5
 8002700:	024b      	lsls	r3, r1, #9
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002708:	4621      	mov	r1, r4
 800270a:	024a      	lsls	r2, r1, #9
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 8002716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800271c:	f7fd fdc8 	bl	80002b0 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	e058      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	4618      	mov	r0, r3
 8002734:	4611      	mov	r1, r2
 8002736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0159      	lsls	r1, r3, #5
 8002752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002756:	0150      	lsls	r0, r2, #5
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4641      	mov	r1, r8
 800275e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb63 0b01 	sbc.w	fp, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800277c:	ebb2 040a 	subs.w	r4, r2, sl
 8002780:	eb63 050b 	sbc.w	r5, r3, fp
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00eb      	lsls	r3, r5, #3
 800278e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	4643      	mov	r3, r8
 800279a:	18e3      	adds	r3, r4, r3
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	464b      	mov	r3, r9
 80027a0:	eb45 0303 	adc.w	r3, r5, r3
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4629      	mov	r1, r5
 80027b4:	028b      	lsls	r3, r1, #10
 80027b6:	4621      	mov	r1, r4
 80027b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027bc:	4621      	mov	r1, r4
 80027be:	028a      	lsls	r2, r1, #10
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	2200      	movs	r2, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	61fa      	str	r2, [r7, #28]
 80027cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d0:	f7fd fd6e 	bl	80002b0 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002800:	4618      	mov	r0, r3
 8002802:	3750      	adds	r7, #80	; 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200

08002818 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	0800506c 	.word	0x0800506c

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffdc 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	0800506c 	.word	0x0800506c

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a8:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a68      	ldr	r2, [pc, #416]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	4964      	ldr	r1, [pc, #400]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	4959      	ldr	r1, [pc, #356]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	494a      	ldr	r1, [pc, #296]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808b 	beq.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7fe fb3c 	bl	8001004 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002990:	f7fe fb38 	bl	8001004 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e357      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d035      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d02e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d114      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fb00 	bl	8001004 <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fafc 	bl	8001004 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e319      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a36:	d111      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	4901      	ldr	r1, [pc, #4]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	0ffffcff 	.word	0x0ffffcff
 8002a5c:	4baa      	ldr	r3, [pc, #680]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4aa9      	ldr	r2, [pc, #676]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	4ba7      	ldr	r3, [pc, #668]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	49a4      	ldr	r1, [pc, #656]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a86:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	4a9e      	ldr	r2, [pc, #632]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a96:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	4999      	ldr	r1, [pc, #612]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab4:	4b94      	ldr	r3, [pc, #592]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4991      	ldr	r1, [pc, #580]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad6:	4b8c      	ldr	r3, [pc, #560]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae4:	4988      	ldr	r1, [pc, #544]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af8:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4980      	ldr	r1, [pc, #512]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b1a:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4977      	ldr	r1, [pc, #476]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	496f      	ldr	r1, [pc, #444]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 020c 	bic.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	4966      	ldr	r1, [pc, #408]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	495e      	ldr	r1, [pc, #376]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	4955      	ldr	r1, [pc, #340]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	4944      	ldr	r1, [pc, #272]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	493c      	ldr	r1, [pc, #240]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	4933      	ldr	r1, [pc, #204]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5a:	492b      	ldr	r1, [pc, #172]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7c:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbc:	4912      	ldr	r1, [pc, #72]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce0:	4909      	ldr	r1, [pc, #36]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d006      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80d9 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cfc:	4b02      	ldr	r3, [pc, #8]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a01      	ldr	r2, [pc, #4]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d06:	e001      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0e:	f7fe f979 	bl	8001004 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d16:	f7fe f975 	bl	8001004 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e194      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11d      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d48:	4b64      	ldr	r3, [pc, #400]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d56:	4b61      	ldr	r3, [pc, #388]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	0e1b      	lsrs	r3, r3, #24
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	019a      	lsls	r2, r3, #6
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	071b      	lsls	r3, r3, #28
 8002d7c:	4957      	ldr	r1, [pc, #348]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02e      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d129      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db0:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc4:	0f1b      	lsrs	r3, r3, #28
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	019a      	lsls	r2, r3, #6
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	493d      	ldr	r1, [pc, #244]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df2:	f023 021f 	bic.w	r2, r3, #31
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e16:	0e1b      	lsrs	r3, r3, #24
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e24:	0f1b      	lsrs	r3, r3, #28
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	019a      	lsls	r2, r3, #6
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	071b      	lsls	r3, r3, #28
 8002e44:	4925      	ldr	r1, [pc, #148]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d011      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	019a      	lsls	r2, r3, #6
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	071b      	lsls	r3, r3, #28
 8002e74:	4919      	ldr	r1, [pc, #100]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe f8bc 	bl	8001004 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e90:	f7fe f8b8 	bl	8001004 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0d7      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 80cd 	bne.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f89f 	bl	8001004 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eca:	f7fe f89b 	bl	8001004 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d903      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0ba      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002edc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d0ed      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	0f1b      	lsrs	r3, r3, #28
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	019a      	lsls	r2, r3, #6
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	071b      	lsls	r3, r3, #28
 8002f4a:	4944      	ldr	r1, [pc, #272]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	493d      	ldr	r1, [pc, #244]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f80:	d11d      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	0f1b      	lsrs	r3, r3, #28
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	019a      	lsls	r2, r3, #6
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4929      	ldr	r1, [pc, #164]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	0e1b      	lsrs	r3, r3, #24
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	019a      	lsls	r2, r3, #6
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	4917      	ldr	r1, [pc, #92]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4911      	ldr	r1, [pc, #68]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fd ffec 	bl	8001004 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003030:	f7fd ffe8 	bl	8001004 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304e:	d1ef      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e040      	b.n	80030f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fda6 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f82c 	bl	80030fc <UART_SetConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e022      	b.n	80030f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa84 	bl	80035c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb0b 	bl	8003708 <UART_CheckIdleState>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4ba6      	ldr	r3, [pc, #664]	; (80033c0 <UART_SetConfig+0x2c4>)
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	430b      	orrs	r3, r1
 8003132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a94      	ldr	r2, [pc, #592]	; (80033c4 <UART_SetConfig+0x2c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d120      	bne.n	80031ba <UART_SetConfig+0xbe>
 8003178:	4b93      	ldr	r3, [pc, #588]	; (80033c8 <UART_SetConfig+0x2cc>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b03      	cmp	r3, #3
 8003184:	d816      	bhi.n	80031b4 <UART_SetConfig+0xb8>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0x90>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	0800319d 	.word	0x0800319d
 8003190:	080031a9 	.word	0x080031a9
 8003194:	080031a3 	.word	0x080031a3
 8003198:	080031af 	.word	0x080031af
 800319c:	2301      	movs	r3, #1
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e150      	b.n	8003444 <UART_SetConfig+0x348>
 80031a2:	2302      	movs	r3, #2
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e14d      	b.n	8003444 <UART_SetConfig+0x348>
 80031a8:	2304      	movs	r3, #4
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e14a      	b.n	8003444 <UART_SetConfig+0x348>
 80031ae:	2308      	movs	r3, #8
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e147      	b.n	8003444 <UART_SetConfig+0x348>
 80031b4:	2310      	movs	r3, #16
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e144      	b.n	8003444 <UART_SetConfig+0x348>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a83      	ldr	r2, [pc, #524]	; (80033cc <UART_SetConfig+0x2d0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d132      	bne.n	800322a <UART_SetConfig+0x12e>
 80031c4:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <UART_SetConfig+0x2cc>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d828      	bhi.n	8003224 <UART_SetConfig+0x128>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0xdc>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003225 	.word	0x08003225
 80031e0:	08003225 	.word	0x08003225
 80031e4:	08003225 	.word	0x08003225
 80031e8:	08003219 	.word	0x08003219
 80031ec:	08003225 	.word	0x08003225
 80031f0:	08003225 	.word	0x08003225
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003213 	.word	0x08003213
 80031fc:	08003225 	.word	0x08003225
 8003200:	08003225 	.word	0x08003225
 8003204:	08003225 	.word	0x08003225
 8003208:	0800321f 	.word	0x0800321f
 800320c:	2300      	movs	r3, #0
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e118      	b.n	8003444 <UART_SetConfig+0x348>
 8003212:	2302      	movs	r3, #2
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e115      	b.n	8003444 <UART_SetConfig+0x348>
 8003218:	2304      	movs	r3, #4
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e112      	b.n	8003444 <UART_SetConfig+0x348>
 800321e:	2308      	movs	r3, #8
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e10f      	b.n	8003444 <UART_SetConfig+0x348>
 8003224:	2310      	movs	r3, #16
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e10c      	b.n	8003444 <UART_SetConfig+0x348>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UART_SetConfig+0x2d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d120      	bne.n	8003276 <UART_SetConfig+0x17a>
 8003234:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <UART_SetConfig+0x2cc>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800323e:	2b30      	cmp	r3, #48	; 0x30
 8003240:	d013      	beq.n	800326a <UART_SetConfig+0x16e>
 8003242:	2b30      	cmp	r3, #48	; 0x30
 8003244:	d814      	bhi.n	8003270 <UART_SetConfig+0x174>
 8003246:	2b20      	cmp	r3, #32
 8003248:	d009      	beq.n	800325e <UART_SetConfig+0x162>
 800324a:	2b20      	cmp	r3, #32
 800324c:	d810      	bhi.n	8003270 <UART_SetConfig+0x174>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <UART_SetConfig+0x15c>
 8003252:	2b10      	cmp	r3, #16
 8003254:	d006      	beq.n	8003264 <UART_SetConfig+0x168>
 8003256:	e00b      	b.n	8003270 <UART_SetConfig+0x174>
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e0f2      	b.n	8003444 <UART_SetConfig+0x348>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e0ef      	b.n	8003444 <UART_SetConfig+0x348>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e0ec      	b.n	8003444 <UART_SetConfig+0x348>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e0e9      	b.n	8003444 <UART_SetConfig+0x348>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e0e6      	b.n	8003444 <UART_SetConfig+0x348>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <UART_SetConfig+0x2d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d120      	bne.n	80032c2 <UART_SetConfig+0x1c6>
 8003280:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <UART_SetConfig+0x2cc>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800328a:	2bc0      	cmp	r3, #192	; 0xc0
 800328c:	d013      	beq.n	80032b6 <UART_SetConfig+0x1ba>
 800328e:	2bc0      	cmp	r3, #192	; 0xc0
 8003290:	d814      	bhi.n	80032bc <UART_SetConfig+0x1c0>
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d009      	beq.n	80032aa <UART_SetConfig+0x1ae>
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d810      	bhi.n	80032bc <UART_SetConfig+0x1c0>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x1a8>
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d006      	beq.n	80032b0 <UART_SetConfig+0x1b4>
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x1c0>
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e0cc      	b.n	8003444 <UART_SetConfig+0x348>
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e0c9      	b.n	8003444 <UART_SetConfig+0x348>
 80032b0:	2304      	movs	r3, #4
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e0c6      	b.n	8003444 <UART_SetConfig+0x348>
 80032b6:	2308      	movs	r3, #8
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e0c3      	b.n	8003444 <UART_SetConfig+0x348>
 80032bc:	2310      	movs	r3, #16
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e0c0      	b.n	8003444 <UART_SetConfig+0x348>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <UART_SetConfig+0x2dc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d125      	bne.n	8003318 <UART_SetConfig+0x21c>
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <UART_SetConfig+0x2cc>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032da:	d017      	beq.n	800330c <UART_SetConfig+0x210>
 80032dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e0:	d817      	bhi.n	8003312 <UART_SetConfig+0x216>
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e6:	d00b      	beq.n	8003300 <UART_SetConfig+0x204>
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d811      	bhi.n	8003312 <UART_SetConfig+0x216>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <UART_SetConfig+0x1fe>
 80032f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f6:	d006      	beq.n	8003306 <UART_SetConfig+0x20a>
 80032f8:	e00b      	b.n	8003312 <UART_SetConfig+0x216>
 80032fa:	2300      	movs	r3, #0
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e0a1      	b.n	8003444 <UART_SetConfig+0x348>
 8003300:	2302      	movs	r3, #2
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e09e      	b.n	8003444 <UART_SetConfig+0x348>
 8003306:	2304      	movs	r3, #4
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e09b      	b.n	8003444 <UART_SetConfig+0x348>
 800330c:	2308      	movs	r3, #8
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e098      	b.n	8003444 <UART_SetConfig+0x348>
 8003312:	2310      	movs	r3, #16
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e095      	b.n	8003444 <UART_SetConfig+0x348>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <UART_SetConfig+0x2e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d125      	bne.n	800336e <UART_SetConfig+0x272>
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <UART_SetConfig+0x2cc>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800332c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003330:	d017      	beq.n	8003362 <UART_SetConfig+0x266>
 8003332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003336:	d817      	bhi.n	8003368 <UART_SetConfig+0x26c>
 8003338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333c:	d00b      	beq.n	8003356 <UART_SetConfig+0x25a>
 800333e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003342:	d811      	bhi.n	8003368 <UART_SetConfig+0x26c>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <UART_SetConfig+0x254>
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	d006      	beq.n	800335c <UART_SetConfig+0x260>
 800334e:	e00b      	b.n	8003368 <UART_SetConfig+0x26c>
 8003350:	2301      	movs	r3, #1
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e076      	b.n	8003444 <UART_SetConfig+0x348>
 8003356:	2302      	movs	r3, #2
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e073      	b.n	8003444 <UART_SetConfig+0x348>
 800335c:	2304      	movs	r3, #4
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e070      	b.n	8003444 <UART_SetConfig+0x348>
 8003362:	2308      	movs	r3, #8
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e06d      	b.n	8003444 <UART_SetConfig+0x348>
 8003368:	2310      	movs	r3, #16
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e06a      	b.n	8003444 <UART_SetConfig+0x348>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <UART_SetConfig+0x2e4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d138      	bne.n	80033ea <UART_SetConfig+0x2ee>
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <UART_SetConfig+0x2cc>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003386:	d017      	beq.n	80033b8 <UART_SetConfig+0x2bc>
 8003388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800338c:	d82a      	bhi.n	80033e4 <UART_SetConfig+0x2e8>
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d00b      	beq.n	80033ac <UART_SetConfig+0x2b0>
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003398:	d824      	bhi.n	80033e4 <UART_SetConfig+0x2e8>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <UART_SetConfig+0x2aa>
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	d006      	beq.n	80033b2 <UART_SetConfig+0x2b6>
 80033a4:	e01e      	b.n	80033e4 <UART_SetConfig+0x2e8>
 80033a6:	2300      	movs	r3, #0
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e04b      	b.n	8003444 <UART_SetConfig+0x348>
 80033ac:	2302      	movs	r3, #2
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e048      	b.n	8003444 <UART_SetConfig+0x348>
 80033b2:	2304      	movs	r3, #4
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e045      	b.n	8003444 <UART_SetConfig+0x348>
 80033b8:	2308      	movs	r3, #8
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e042      	b.n	8003444 <UART_SetConfig+0x348>
 80033be:	bf00      	nop
 80033c0:	efff69f3 	.word	0xefff69f3
 80033c4:	40011000 	.word	0x40011000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40004400 	.word	0x40004400
 80033d0:	40004800 	.word	0x40004800
 80033d4:	40004c00 	.word	0x40004c00
 80033d8:	40005000 	.word	0x40005000
 80033dc:	40011400 	.word	0x40011400
 80033e0:	40007800 	.word	0x40007800
 80033e4:	2310      	movs	r3, #16
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e02c      	b.n	8003444 <UART_SetConfig+0x348>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a72      	ldr	r2, [pc, #456]	; (80035b8 <UART_SetConfig+0x4bc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d125      	bne.n	8003440 <UART_SetConfig+0x344>
 80033f4:	4b71      	ldr	r3, [pc, #452]	; (80035bc <UART_SetConfig+0x4c0>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003402:	d017      	beq.n	8003434 <UART_SetConfig+0x338>
 8003404:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003408:	d817      	bhi.n	800343a <UART_SetConfig+0x33e>
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d00b      	beq.n	8003428 <UART_SetConfig+0x32c>
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	d811      	bhi.n	800343a <UART_SetConfig+0x33e>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <UART_SetConfig+0x326>
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341e:	d006      	beq.n	800342e <UART_SetConfig+0x332>
 8003420:	e00b      	b.n	800343a <UART_SetConfig+0x33e>
 8003422:	2300      	movs	r3, #0
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e00d      	b.n	8003444 <UART_SetConfig+0x348>
 8003428:	2302      	movs	r3, #2
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e00a      	b.n	8003444 <UART_SetConfig+0x348>
 800342e:	2304      	movs	r3, #4
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e007      	b.n	8003444 <UART_SetConfig+0x348>
 8003434:	2308      	movs	r3, #8
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e004      	b.n	8003444 <UART_SetConfig+0x348>
 800343a:	2310      	movs	r3, #16
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e001      	b.n	8003444 <UART_SetConfig+0x348>
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d15b      	bne.n	8003506 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800344e:	7ffb      	ldrb	r3, [r7, #31]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d828      	bhi.n	80034a6 <UART_SetConfig+0x3aa>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0x360>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003481 	.word	0x08003481
 8003460:	08003489 	.word	0x08003489
 8003464:	08003491 	.word	0x08003491
 8003468:	080034a7 	.word	0x080034a7
 800346c:	08003497 	.word	0x08003497
 8003470:	080034a7 	.word	0x080034a7
 8003474:	080034a7 	.word	0x080034a7
 8003478:	080034a7 	.word	0x080034a7
 800347c:	0800349f 	.word	0x0800349f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7ff f9d6 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003484:	61b8      	str	r0, [r7, #24]
        break;
 8003486:	e013      	b.n	80034b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7ff f9e6 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e00f      	b.n	80034b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003490:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <UART_SetConfig+0x4c4>)
 8003492:	61bb      	str	r3, [r7, #24]
        break;
 8003494:	e00c      	b.n	80034b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003496:	f7ff f8b9 	bl	800260c <HAL_RCC_GetSysClockFreq>
 800349a:	61b8      	str	r0, [r7, #24]
        break;
 800349c:	e008      	b.n	80034b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a2:	61bb      	str	r3, [r7, #24]
        break;
 80034a4:	e004      	b.n	80034b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	77bb      	strb	r3, [r7, #30]
        break;
 80034ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d074      	beq.n	80035a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	005a      	lsls	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	d916      	bls.n	8003500 <UART_SetConfig+0x404>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d212      	bcs.n	8003500 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	89fa      	ldrh	r2, [r7, #14]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e04f      	b.n	80035a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	77bb      	strb	r3, [r7, #30]
 8003504:	e04c      	b.n	80035a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003506:	7ffb      	ldrb	r3, [r7, #31]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d828      	bhi.n	800355e <UART_SetConfig+0x462>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0x418>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003539 	.word	0x08003539
 8003518:	08003541 	.word	0x08003541
 800351c:	08003549 	.word	0x08003549
 8003520:	0800355f 	.word	0x0800355f
 8003524:	0800354f 	.word	0x0800354f
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800355f 	.word	0x0800355f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003538:	f7ff f97a 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800353c:	61b8      	str	r0, [r7, #24]
        break;
 800353e:	e013      	b.n	8003568 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003540:	f7ff f98a 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003544:	61b8      	str	r0, [r7, #24]
        break;
 8003546:	e00f      	b.n	8003568 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <UART_SetConfig+0x4c4>)
 800354a:	61bb      	str	r3, [r7, #24]
        break;
 800354c:	e00c      	b.n	8003568 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7ff f85d 	bl	800260c <HAL_RCC_GetSysClockFreq>
 8003552:	61b8      	str	r0, [r7, #24]
        break;
 8003554:	e008      	b.n	8003568 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	61bb      	str	r3, [r7, #24]
        break;
 800355c:	e004      	b.n	8003568 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	77bb      	strb	r3, [r7, #30]
        break;
 8003566:	bf00      	nop
    }

    if (pclk != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d018      	beq.n	80035a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085a      	lsrs	r2, r3, #1
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	441a      	add	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d909      	bls.n	800359c <UART_SetConfig+0x4a0>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d205      	bcs.n	800359c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	e001      	b.n	80035a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40007c00 	.word	0x40007c00
 80035bc:	40023800 	.word	0x40023800
 80035c0:	00f42400 	.word	0x00f42400

080035c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c2:	d10a      	bne.n	80036da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003718:	f7fd fc74 	bl	8001004 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d10e      	bne.n	800374a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f81b 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e011      	b.n	800376e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b09c      	sub	sp, #112	; 0x70
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	e0a7      	b.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	f000 80a3 	beq.w	80038d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fd fc37 	bl	8001004 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13f      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037bc:	667b      	str	r3, [r7, #100]	; 0x64
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e6      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3308      	adds	r3, #8
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e5      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e068      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d050      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003844:	d148      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
 8003870:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e6      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	66bb      	str	r3, [r7, #104]	; 0x68
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038a2:	623a      	str	r2, [r7, #32]
 80038a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	69f9      	ldr	r1, [r7, #28]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e010      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f43f af48 	beq.w	8003788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3770      	adds	r7, #112	; 0x70
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003904:	b084      	sub	sp, #16
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	f107 001c 	add.w	r0, r7, #28
 8003912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	2b01      	cmp	r3, #1
 800391a:	d120      	bne.n	800395e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <USB_CoreInit+0xac>)
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa96 	bl	8003e84 <USB_CoreReset>
 8003958:	4603      	mov	r3, r0
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e010      	b.n	8003980 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa8a 	bl	8003e84 <USB_CoreReset>
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10b      	bne.n	800399e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f043 0206 	orr.w	r2, r3, #6
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039aa:	b004      	add	sp, #16
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	ffbdffbf 	.word	0xffbdffbf

080039b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 0201 	bic.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d115      	bne.n	8003a24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7fd fb09 	bl	800101c <HAL_Delay>
      ms++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa29 	bl	8003e68 <USB_GetMode>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d01e      	beq.n	8003a5a <USB_SetCurrentMode+0x84>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b31      	cmp	r3, #49	; 0x31
 8003a20:	d9f0      	bls.n	8003a04 <USB_SetCurrentMode+0x2e>
 8003a22:	e01a      	b.n	8003a5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7fd faf0 	bl	800101c <HAL_Delay>
      ms++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fa10 	bl	8003e68 <USB_GetMode>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <USB_SetCurrentMode+0x84>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b31      	cmp	r3, #49	; 0x31
 8003a52:	d9f0      	bls.n	8003a36 <USB_SetCurrentMode+0x60>
 8003a54:	e001      	b.n	8003a5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e005      	b.n	8003a66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b32      	cmp	r3, #50	; 0x32
 8003a5e:	d101      	bne.n	8003a64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a70:	b084      	sub	sp, #16
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e009      	b.n	8003aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3340      	adds	r3, #64	; 0x40
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0e      	cmp	r3, #14
 8003aa8:	d9f2      	bls.n	8003a90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11c      	bne.n	8003aea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e005      	b.n	8003af6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003afc:	461a      	mov	r2, r3
 8003afe:	2300      	movs	r3, #0
 8003b00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b10:	461a      	mov	r2, r3
 8003b12:	680b      	ldr	r3, [r1, #0]
 8003b14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b22:	2100      	movs	r1, #0
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f965 	bl	8003df4 <USB_SetDevSpeed>
 8003b2a:	e008      	b.n	8003b3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f960 	bl	8003df4 <USB_SetDevSpeed>
 8003b34:	e003      	b.n	8003b3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b36:	2103      	movs	r1, #3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f95b 	bl	8003df4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b3e:	2110      	movs	r1, #16
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8f3 	bl	8003d2c <USB_FlushTxFifo>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f91f 	bl	8003d94 <USB_FlushRxFifo>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	461a      	mov	r2, r3
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	461a      	mov	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	e043      	b.n	8003c12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba0:	d118      	bne.n	8003bd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e013      	b.n	8003be6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e008      	b.n	8003be6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	461a      	mov	r2, r3
 8003be2:	2300      	movs	r3, #0
 8003be4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	461a      	mov	r2, r3
 8003c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3b7      	bcc.n	8003b8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e043      	b.n	8003ca8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c36:	d118      	bne.n	8003c6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e013      	b.n	8003c7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e008      	b.n	8003c7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3b7      	bcc.n	8003c20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f043 0210 	orr.w	r2, r3, #16
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <USB_DevInit+0x2b4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f043 0208 	orr.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <USB_DevInit+0x2b8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d20:	b004      	add	sp, #16
 8003d22:	4770      	bx	lr
 8003d24:	803c3800 	.word	0x803c3800
 8003d28:	40000004 	.word	0x40000004

08003d2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <USB_FlushTxFifo+0x64>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e01b      	b.n	8003d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	daf2      	bge.n	8003d3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	019b      	lsls	r3, r3, #6
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <USB_FlushTxFifo+0x64>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e006      	b.n	8003d84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d0f0      	beq.n	8003d64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	00030d40 	.word	0x00030d40

08003d94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <USB_FlushRxFifo+0x5c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e018      	b.n	8003de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	daf2      	bge.n	8003da0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <USB_FlushRxFifo+0x5c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e006      	b.n	8003de4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d0f0      	beq.n	8003dc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	00030d40 	.word	0x00030d40

08003df4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e40:	f023 0303 	bic.w	r3, r3, #3
 8003e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0301 	and.w	r3, r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <USB_CoreReset+0x64>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e01b      	b.n	8003eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	daf2      	bge.n	8003e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <USB_CoreReset+0x64>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e006      	b.n	8003eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d0f0      	beq.n	8003eba <USB_CoreReset+0x36>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	00030d40 	.word	0x00030d40

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4d0d      	ldr	r5, [pc, #52]	; (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2600      	movs	r6, #0
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4d0b      	ldr	r5, [pc, #44]	; (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	; (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f001 f882 	bl	8005014 <_init>
 8003f10:	1b64      	subs	r4, r4, r5
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2600      	movs	r6, #0
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08005114 	.word	0x08005114
 8003f34:	08005114 	.word	0x08005114
 8003f38:	08005114 	.word	0x08005114
 8003f3c:	08005118 	.word	0x08005118

08003f40 <memset>:
 8003f40:	4402      	add	r2, r0
 8003f42:	4603      	mov	r3, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <iprintf>:
 8003f50:	b40f      	push	{r0, r1, r2, r3}
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <iprintf+0x2c>)
 8003f54:	b513      	push	{r0, r1, r4, lr}
 8003f56:	681c      	ldr	r4, [r3, #0]
 8003f58:	b124      	cbz	r4, 8003f64 <iprintf+0x14>
 8003f5a:	69a3      	ldr	r3, [r4, #24]
 8003f5c:	b913      	cbnz	r3, 8003f64 <iprintf+0x14>
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 fa74 	bl	800444c <__sinit>
 8003f64:	ab05      	add	r3, sp, #20
 8003f66:	9a04      	ldr	r2, [sp, #16]
 8003f68:	68a1      	ldr	r1, [r4, #8]
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fc7d 	bl	800486c <_vfiprintf_r>
 8003f72:	b002      	add	sp, #8
 8003f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f78:	b004      	add	sp, #16
 8003f7a:	4770      	bx	lr
 8003f7c:	2000000c 	.word	0x2000000c

08003f80 <putchar>:
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <putchar+0x28>)
 8003f82:	b513      	push	{r0, r1, r4, lr}
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	4601      	mov	r1, r0
 8003f88:	b134      	cbz	r4, 8003f98 <putchar+0x18>
 8003f8a:	69a3      	ldr	r3, [r4, #24]
 8003f8c:	b923      	cbnz	r3, 8003f98 <putchar+0x18>
 8003f8e:	9001      	str	r0, [sp, #4]
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fa5b 	bl	800444c <__sinit>
 8003f96:	9901      	ldr	r1, [sp, #4]
 8003f98:	68a2      	ldr	r2, [r4, #8]
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	b002      	add	sp, #8
 8003f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa2:	f000 bf27 	b.w	8004df4 <_putc_r>
 8003fa6:	bf00      	nop
 8003fa8:	2000000c 	.word	0x2000000c

08003fac <_puts_r>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	460e      	mov	r6, r1
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	b118      	cbz	r0, 8003fbc <_puts_r+0x10>
 8003fb4:	6983      	ldr	r3, [r0, #24]
 8003fb6:	b90b      	cbnz	r3, 8003fbc <_puts_r+0x10>
 8003fb8:	f000 fa48 	bl	800444c <__sinit>
 8003fbc:	69ab      	ldr	r3, [r5, #24]
 8003fbe:	68ac      	ldr	r4, [r5, #8]
 8003fc0:	b913      	cbnz	r3, 8003fc8 <_puts_r+0x1c>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 fa42 	bl	800444c <__sinit>
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <_puts_r+0xd0>)
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d120      	bne.n	8004010 <_puts_r+0x64>
 8003fce:	686c      	ldr	r4, [r5, #4]
 8003fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd2:	07db      	lsls	r3, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_puts_r+0x36>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	0598      	lsls	r0, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_puts_r+0x36>
 8003fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fde:	f000 fad3 	bl	8004588 <__retarget_lock_acquire_recursive>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	0719      	lsls	r1, r3, #28
 8003fe6:	d51d      	bpl.n	8004024 <_puts_r+0x78>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	b1db      	cbz	r3, 8004024 <_puts_r+0x78>
 8003fec:	3e01      	subs	r6, #1
 8003fee:	68a3      	ldr	r3, [r4, #8]
 8003ff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	bb39      	cbnz	r1, 800404a <_puts_r+0x9e>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da38      	bge.n	8004070 <_puts_r+0xc4>
 8003ffe:	4622      	mov	r2, r4
 8004000:	210a      	movs	r1, #10
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f848 	bl	8004098 <__swbuf_r>
 8004008:	3001      	adds	r0, #1
 800400a:	d011      	beq.n	8004030 <_puts_r+0x84>
 800400c:	250a      	movs	r5, #10
 800400e:	e011      	b.n	8004034 <_puts_r+0x88>
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <_puts_r+0xd4>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d101      	bne.n	800401a <_puts_r+0x6e>
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	e7da      	b.n	8003fd0 <_puts_r+0x24>
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <_puts_r+0xd8>)
 800401c:	429c      	cmp	r4, r3
 800401e:	bf08      	it	eq
 8004020:	68ec      	ldreq	r4, [r5, #12]
 8004022:	e7d5      	b.n	8003fd0 <_puts_r+0x24>
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 f888 	bl	800413c <__swsetup_r>
 800402c:	2800      	cmp	r0, #0
 800402e:	d0dd      	beq.n	8003fec <_puts_r+0x40>
 8004030:	f04f 35ff 	mov.w	r5, #4294967295
 8004034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004036:	07da      	lsls	r2, r3, #31
 8004038:	d405      	bmi.n	8004046 <_puts_r+0x9a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	059b      	lsls	r3, r3, #22
 800403e:	d402      	bmi.n	8004046 <_puts_r+0x9a>
 8004040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004042:	f000 faa2 	bl	800458a <__retarget_lock_release_recursive>
 8004046:	4628      	mov	r0, r5
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	2b00      	cmp	r3, #0
 800404c:	da04      	bge.n	8004058 <_puts_r+0xac>
 800404e:	69a2      	ldr	r2, [r4, #24]
 8004050:	429a      	cmp	r2, r3
 8004052:	dc06      	bgt.n	8004062 <_puts_r+0xb6>
 8004054:	290a      	cmp	r1, #10
 8004056:	d004      	beq.n	8004062 <_puts_r+0xb6>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	7019      	strb	r1, [r3, #0]
 8004060:	e7c5      	b.n	8003fee <_puts_r+0x42>
 8004062:	4622      	mov	r2, r4
 8004064:	4628      	mov	r0, r5
 8004066:	f000 f817 	bl	8004098 <__swbuf_r>
 800406a:	3001      	adds	r0, #1
 800406c:	d1bf      	bne.n	8003fee <_puts_r+0x42>
 800406e:	e7df      	b.n	8004030 <_puts_r+0x84>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	250a      	movs	r5, #10
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	6022      	str	r2, [r4, #0]
 8004078:	701d      	strb	r5, [r3, #0]
 800407a:	e7db      	b.n	8004034 <_puts_r+0x88>
 800407c:	08005098 	.word	0x08005098
 8004080:	080050b8 	.word	0x080050b8
 8004084:	08005078 	.word	0x08005078

08004088 <puts>:
 8004088:	4b02      	ldr	r3, [pc, #8]	; (8004094 <puts+0xc>)
 800408a:	4601      	mov	r1, r0
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f7ff bf8d 	b.w	8003fac <_puts_r>
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c

08004098 <__swbuf_r>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	460e      	mov	r6, r1
 800409c:	4614      	mov	r4, r2
 800409e:	4605      	mov	r5, r0
 80040a0:	b118      	cbz	r0, 80040aa <__swbuf_r+0x12>
 80040a2:	6983      	ldr	r3, [r0, #24]
 80040a4:	b90b      	cbnz	r3, 80040aa <__swbuf_r+0x12>
 80040a6:	f000 f9d1 	bl	800444c <__sinit>
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <__swbuf_r+0x98>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d12b      	bne.n	8004108 <__swbuf_r+0x70>
 80040b0:	686c      	ldr	r4, [r5, #4]
 80040b2:	69a3      	ldr	r3, [r4, #24]
 80040b4:	60a3      	str	r3, [r4, #8]
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	071a      	lsls	r2, r3, #28
 80040ba:	d52f      	bpl.n	800411c <__swbuf_r+0x84>
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	b36b      	cbz	r3, 800411c <__swbuf_r+0x84>
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	1ac0      	subs	r0, r0, r3
 80040c6:	6963      	ldr	r3, [r4, #20]
 80040c8:	b2f6      	uxtb	r6, r6
 80040ca:	4283      	cmp	r3, r0
 80040cc:	4637      	mov	r7, r6
 80040ce:	dc04      	bgt.n	80040da <__swbuf_r+0x42>
 80040d0:	4621      	mov	r1, r4
 80040d2:	4628      	mov	r0, r5
 80040d4:	f000 f926 	bl	8004324 <_fflush_r>
 80040d8:	bb30      	cbnz	r0, 8004128 <__swbuf_r+0x90>
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	3b01      	subs	r3, #1
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	701e      	strb	r6, [r3, #0]
 80040e8:	6963      	ldr	r3, [r4, #20]
 80040ea:	3001      	adds	r0, #1
 80040ec:	4283      	cmp	r3, r0
 80040ee:	d004      	beq.n	80040fa <__swbuf_r+0x62>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	07db      	lsls	r3, r3, #31
 80040f4:	d506      	bpl.n	8004104 <__swbuf_r+0x6c>
 80040f6:	2e0a      	cmp	r6, #10
 80040f8:	d104      	bne.n	8004104 <__swbuf_r+0x6c>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4628      	mov	r0, r5
 80040fe:	f000 f911 	bl	8004324 <_fflush_r>
 8004102:	b988      	cbnz	r0, 8004128 <__swbuf_r+0x90>
 8004104:	4638      	mov	r0, r7
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <__swbuf_r+0x9c>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d101      	bne.n	8004112 <__swbuf_r+0x7a>
 800410e:	68ac      	ldr	r4, [r5, #8]
 8004110:	e7cf      	b.n	80040b2 <__swbuf_r+0x1a>
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <__swbuf_r+0xa0>)
 8004114:	429c      	cmp	r4, r3
 8004116:	bf08      	it	eq
 8004118:	68ec      	ldreq	r4, [r5, #12]
 800411a:	e7ca      	b.n	80040b2 <__swbuf_r+0x1a>
 800411c:	4621      	mov	r1, r4
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f80c 	bl	800413c <__swsetup_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	d0cb      	beq.n	80040c0 <__swbuf_r+0x28>
 8004128:	f04f 37ff 	mov.w	r7, #4294967295
 800412c:	e7ea      	b.n	8004104 <__swbuf_r+0x6c>
 800412e:	bf00      	nop
 8004130:	08005098 	.word	0x08005098
 8004134:	080050b8 	.word	0x080050b8
 8004138:	08005078 	.word	0x08005078

0800413c <__swsetup_r>:
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <__swsetup_r+0xcc>)
 800413e:	b570      	push	{r4, r5, r6, lr}
 8004140:	681d      	ldr	r5, [r3, #0]
 8004142:	4606      	mov	r6, r0
 8004144:	460c      	mov	r4, r1
 8004146:	b125      	cbz	r5, 8004152 <__swsetup_r+0x16>
 8004148:	69ab      	ldr	r3, [r5, #24]
 800414a:	b913      	cbnz	r3, 8004152 <__swsetup_r+0x16>
 800414c:	4628      	mov	r0, r5
 800414e:	f000 f97d 	bl	800444c <__sinit>
 8004152:	4b2e      	ldr	r3, [pc, #184]	; (800420c <__swsetup_r+0xd0>)
 8004154:	429c      	cmp	r4, r3
 8004156:	d10f      	bne.n	8004178 <__swsetup_r+0x3c>
 8004158:	686c      	ldr	r4, [r5, #4]
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004160:	0719      	lsls	r1, r3, #28
 8004162:	d42c      	bmi.n	80041be <__swsetup_r+0x82>
 8004164:	06dd      	lsls	r5, r3, #27
 8004166:	d411      	bmi.n	800418c <__swsetup_r+0x50>
 8004168:	2309      	movs	r3, #9
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004170:	81a3      	strh	r3, [r4, #12]
 8004172:	f04f 30ff 	mov.w	r0, #4294967295
 8004176:	e03e      	b.n	80041f6 <__swsetup_r+0xba>
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <__swsetup_r+0xd4>)
 800417a:	429c      	cmp	r4, r3
 800417c:	d101      	bne.n	8004182 <__swsetup_r+0x46>
 800417e:	68ac      	ldr	r4, [r5, #8]
 8004180:	e7eb      	b.n	800415a <__swsetup_r+0x1e>
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <__swsetup_r+0xd8>)
 8004184:	429c      	cmp	r4, r3
 8004186:	bf08      	it	eq
 8004188:	68ec      	ldreq	r4, [r5, #12]
 800418a:	e7e6      	b.n	800415a <__swsetup_r+0x1e>
 800418c:	0758      	lsls	r0, r3, #29
 800418e:	d512      	bpl.n	80041b6 <__swsetup_r+0x7a>
 8004190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004192:	b141      	cbz	r1, 80041a6 <__swsetup_r+0x6a>
 8004194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004198:	4299      	cmp	r1, r3
 800419a:	d002      	beq.n	80041a2 <__swsetup_r+0x66>
 800419c:	4630      	mov	r0, r6
 800419e:	f000 fa5b 	bl	8004658 <_free_r>
 80041a2:	2300      	movs	r3, #0
 80041a4:	6363      	str	r3, [r4, #52]	; 0x34
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041ac:	81a3      	strh	r3, [r4, #12]
 80041ae:	2300      	movs	r3, #0
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	b94b      	cbnz	r3, 80041d6 <__swsetup_r+0x9a>
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041cc:	d003      	beq.n	80041d6 <__swsetup_r+0x9a>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 fa01 	bl	80045d8 <__smakebuf_r>
 80041d6:	89a0      	ldrh	r0, [r4, #12]
 80041d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041dc:	f010 0301 	ands.w	r3, r0, #1
 80041e0:	d00a      	beq.n	80041f8 <__swsetup_r+0xbc>
 80041e2:	2300      	movs	r3, #0
 80041e4:	60a3      	str	r3, [r4, #8]
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	425b      	negs	r3, r3
 80041ea:	61a3      	str	r3, [r4, #24]
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	b943      	cbnz	r3, 8004202 <__swsetup_r+0xc6>
 80041f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041f4:	d1ba      	bne.n	800416c <__swsetup_r+0x30>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	0781      	lsls	r1, r0, #30
 80041fa:	bf58      	it	pl
 80041fc:	6963      	ldrpl	r3, [r4, #20]
 80041fe:	60a3      	str	r3, [r4, #8]
 8004200:	e7f4      	b.n	80041ec <__swsetup_r+0xb0>
 8004202:	2000      	movs	r0, #0
 8004204:	e7f7      	b.n	80041f6 <__swsetup_r+0xba>
 8004206:	bf00      	nop
 8004208:	2000000c 	.word	0x2000000c
 800420c:	08005098 	.word	0x08005098
 8004210:	080050b8 	.word	0x080050b8
 8004214:	08005078 	.word	0x08005078

08004218 <__sflush_r>:
 8004218:	898a      	ldrh	r2, [r1, #12]
 800421a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421e:	4605      	mov	r5, r0
 8004220:	0710      	lsls	r0, r2, #28
 8004222:	460c      	mov	r4, r1
 8004224:	d458      	bmi.n	80042d8 <__sflush_r+0xc0>
 8004226:	684b      	ldr	r3, [r1, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	dc05      	bgt.n	8004238 <__sflush_r+0x20>
 800422c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	dc02      	bgt.n	8004238 <__sflush_r+0x20>
 8004232:	2000      	movs	r0, #0
 8004234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800423a:	2e00      	cmp	r6, #0
 800423c:	d0f9      	beq.n	8004232 <__sflush_r+0x1a>
 800423e:	2300      	movs	r3, #0
 8004240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004244:	682f      	ldr	r7, [r5, #0]
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	d032      	beq.n	80042b0 <__sflush_r+0x98>
 800424a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	075a      	lsls	r2, r3, #29
 8004250:	d505      	bpl.n	800425e <__sflush_r+0x46>
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	1ac0      	subs	r0, r0, r3
 8004256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004258:	b10b      	cbz	r3, 800425e <__sflush_r+0x46>
 800425a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800425c:	1ac0      	subs	r0, r0, r3
 800425e:	2300      	movs	r3, #0
 8004260:	4602      	mov	r2, r0
 8004262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004264:	6a21      	ldr	r1, [r4, #32]
 8004266:	4628      	mov	r0, r5
 8004268:	47b0      	blx	r6
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	d106      	bne.n	800427e <__sflush_r+0x66>
 8004270:	6829      	ldr	r1, [r5, #0]
 8004272:	291d      	cmp	r1, #29
 8004274:	d82c      	bhi.n	80042d0 <__sflush_r+0xb8>
 8004276:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <__sflush_r+0x108>)
 8004278:	40ca      	lsrs	r2, r1
 800427a:	07d6      	lsls	r6, r2, #31
 800427c:	d528      	bpl.n	80042d0 <__sflush_r+0xb8>
 800427e:	2200      	movs	r2, #0
 8004280:	6062      	str	r2, [r4, #4]
 8004282:	04d9      	lsls	r1, r3, #19
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	6022      	str	r2, [r4, #0]
 8004288:	d504      	bpl.n	8004294 <__sflush_r+0x7c>
 800428a:	1c42      	adds	r2, r0, #1
 800428c:	d101      	bne.n	8004292 <__sflush_r+0x7a>
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	b903      	cbnz	r3, 8004294 <__sflush_r+0x7c>
 8004292:	6560      	str	r0, [r4, #84]	; 0x54
 8004294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004296:	602f      	str	r7, [r5, #0]
 8004298:	2900      	cmp	r1, #0
 800429a:	d0ca      	beq.n	8004232 <__sflush_r+0x1a>
 800429c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042a0:	4299      	cmp	r1, r3
 80042a2:	d002      	beq.n	80042aa <__sflush_r+0x92>
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 f9d7 	bl	8004658 <_free_r>
 80042aa:	2000      	movs	r0, #0
 80042ac:	6360      	str	r0, [r4, #52]	; 0x34
 80042ae:	e7c1      	b.n	8004234 <__sflush_r+0x1c>
 80042b0:	6a21      	ldr	r1, [r4, #32]
 80042b2:	2301      	movs	r3, #1
 80042b4:	4628      	mov	r0, r5
 80042b6:	47b0      	blx	r6
 80042b8:	1c41      	adds	r1, r0, #1
 80042ba:	d1c7      	bne.n	800424c <__sflush_r+0x34>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0c4      	beq.n	800424c <__sflush_r+0x34>
 80042c2:	2b1d      	cmp	r3, #29
 80042c4:	d001      	beq.n	80042ca <__sflush_r+0xb2>
 80042c6:	2b16      	cmp	r3, #22
 80042c8:	d101      	bne.n	80042ce <__sflush_r+0xb6>
 80042ca:	602f      	str	r7, [r5, #0]
 80042cc:	e7b1      	b.n	8004232 <__sflush_r+0x1a>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d4:	81a3      	strh	r3, [r4, #12]
 80042d6:	e7ad      	b.n	8004234 <__sflush_r+0x1c>
 80042d8:	690f      	ldr	r7, [r1, #16]
 80042da:	2f00      	cmp	r7, #0
 80042dc:	d0a9      	beq.n	8004232 <__sflush_r+0x1a>
 80042de:	0793      	lsls	r3, r2, #30
 80042e0:	680e      	ldr	r6, [r1, #0]
 80042e2:	bf08      	it	eq
 80042e4:	694b      	ldreq	r3, [r1, #20]
 80042e6:	600f      	str	r7, [r1, #0]
 80042e8:	bf18      	it	ne
 80042ea:	2300      	movne	r3, #0
 80042ec:	eba6 0807 	sub.w	r8, r6, r7
 80042f0:	608b      	str	r3, [r1, #8]
 80042f2:	f1b8 0f00 	cmp.w	r8, #0
 80042f6:	dd9c      	ble.n	8004232 <__sflush_r+0x1a>
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042fc:	4643      	mov	r3, r8
 80042fe:	463a      	mov	r2, r7
 8004300:	4628      	mov	r0, r5
 8004302:	47b0      	blx	r6
 8004304:	2800      	cmp	r0, #0
 8004306:	dc06      	bgt.n	8004316 <__sflush_r+0xfe>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	e78e      	b.n	8004234 <__sflush_r+0x1c>
 8004316:	4407      	add	r7, r0
 8004318:	eba8 0800 	sub.w	r8, r8, r0
 800431c:	e7e9      	b.n	80042f2 <__sflush_r+0xda>
 800431e:	bf00      	nop
 8004320:	20400001 	.word	0x20400001

08004324 <_fflush_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	4605      	mov	r5, r0
 800432a:	460c      	mov	r4, r1
 800432c:	b913      	cbnz	r3, 8004334 <_fflush_r+0x10>
 800432e:	2500      	movs	r5, #0
 8004330:	4628      	mov	r0, r5
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	b118      	cbz	r0, 800433e <_fflush_r+0x1a>
 8004336:	6983      	ldr	r3, [r0, #24]
 8004338:	b90b      	cbnz	r3, 800433e <_fflush_r+0x1a>
 800433a:	f000 f887 	bl	800444c <__sinit>
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <_fflush_r+0x6c>)
 8004340:	429c      	cmp	r4, r3
 8004342:	d11b      	bne.n	800437c <_fflush_r+0x58>
 8004344:	686c      	ldr	r4, [r5, #4]
 8004346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ef      	beq.n	800432e <_fflush_r+0xa>
 800434e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004350:	07d0      	lsls	r0, r2, #31
 8004352:	d404      	bmi.n	800435e <_fflush_r+0x3a>
 8004354:	0599      	lsls	r1, r3, #22
 8004356:	d402      	bmi.n	800435e <_fflush_r+0x3a>
 8004358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800435a:	f000 f915 	bl	8004588 <__retarget_lock_acquire_recursive>
 800435e:	4628      	mov	r0, r5
 8004360:	4621      	mov	r1, r4
 8004362:	f7ff ff59 	bl	8004218 <__sflush_r>
 8004366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004368:	07da      	lsls	r2, r3, #31
 800436a:	4605      	mov	r5, r0
 800436c:	d4e0      	bmi.n	8004330 <_fflush_r+0xc>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	059b      	lsls	r3, r3, #22
 8004372:	d4dd      	bmi.n	8004330 <_fflush_r+0xc>
 8004374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004376:	f000 f908 	bl	800458a <__retarget_lock_release_recursive>
 800437a:	e7d9      	b.n	8004330 <_fflush_r+0xc>
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <_fflush_r+0x70>)
 800437e:	429c      	cmp	r4, r3
 8004380:	d101      	bne.n	8004386 <_fflush_r+0x62>
 8004382:	68ac      	ldr	r4, [r5, #8]
 8004384:	e7df      	b.n	8004346 <_fflush_r+0x22>
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <_fflush_r+0x74>)
 8004388:	429c      	cmp	r4, r3
 800438a:	bf08      	it	eq
 800438c:	68ec      	ldreq	r4, [r5, #12]
 800438e:	e7da      	b.n	8004346 <_fflush_r+0x22>
 8004390:	08005098 	.word	0x08005098
 8004394:	080050b8 	.word	0x080050b8
 8004398:	08005078 	.word	0x08005078

0800439c <std>:
 800439c:	2300      	movs	r3, #0
 800439e:	b510      	push	{r4, lr}
 80043a0:	4604      	mov	r4, r0
 80043a2:	e9c0 3300 	strd	r3, r3, [r0]
 80043a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043aa:	6083      	str	r3, [r0, #8]
 80043ac:	8181      	strh	r1, [r0, #12]
 80043ae:	6643      	str	r3, [r0, #100]	; 0x64
 80043b0:	81c2      	strh	r2, [r0, #14]
 80043b2:	6183      	str	r3, [r0, #24]
 80043b4:	4619      	mov	r1, r3
 80043b6:	2208      	movs	r2, #8
 80043b8:	305c      	adds	r0, #92	; 0x5c
 80043ba:	f7ff fdc1 	bl	8003f40 <memset>
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <std+0x38>)
 80043c0:	6263      	str	r3, [r4, #36]	; 0x24
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <std+0x3c>)
 80043c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <std+0x40>)
 80043c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <std+0x44>)
 80043cc:	6224      	str	r4, [r4, #32]
 80043ce:	6323      	str	r3, [r4, #48]	; 0x30
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	08004ea5 	.word	0x08004ea5
 80043d8:	08004ec7 	.word	0x08004ec7
 80043dc:	08004eff 	.word	0x08004eff
 80043e0:	08004f23 	.word	0x08004f23

080043e4 <_cleanup_r>:
 80043e4:	4901      	ldr	r1, [pc, #4]	; (80043ec <_cleanup_r+0x8>)
 80043e6:	f000 b8af 	b.w	8004548 <_fwalk_reent>
 80043ea:	bf00      	nop
 80043ec:	08004325 	.word	0x08004325

080043f0 <__sfmoreglue>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	2268      	movs	r2, #104	; 0x68
 80043f4:	1e4d      	subs	r5, r1, #1
 80043f6:	4355      	muls	r5, r2
 80043f8:	460e      	mov	r6, r1
 80043fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043fe:	f000 f997 	bl	8004730 <_malloc_r>
 8004402:	4604      	mov	r4, r0
 8004404:	b140      	cbz	r0, 8004418 <__sfmoreglue+0x28>
 8004406:	2100      	movs	r1, #0
 8004408:	e9c0 1600 	strd	r1, r6, [r0]
 800440c:	300c      	adds	r0, #12
 800440e:	60a0      	str	r0, [r4, #8]
 8004410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004414:	f7ff fd94 	bl	8003f40 <memset>
 8004418:	4620      	mov	r0, r4
 800441a:	bd70      	pop	{r4, r5, r6, pc}

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 b8b3 	b.w	8004588 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20000855 	.word	0x20000855

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 b8ae 	b.w	800458a <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20000855 	.word	0x20000855

08004434 <__sinit_lock_acquire>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__sinit_lock_acquire+0x8>)
 8004436:	f000 b8a7 	b.w	8004588 <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	20000856 	.word	0x20000856

08004440 <__sinit_lock_release>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__sinit_lock_release+0x8>)
 8004442:	f000 b8a2 	b.w	800458a <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	20000856 	.word	0x20000856

0800444c <__sinit>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	f7ff fff0 	bl	8004434 <__sinit_lock_acquire>
 8004454:	69a3      	ldr	r3, [r4, #24]
 8004456:	b11b      	cbz	r3, 8004460 <__sinit+0x14>
 8004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445c:	f7ff bff0 	b.w	8004440 <__sinit_lock_release>
 8004460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004464:	6523      	str	r3, [r4, #80]	; 0x50
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <__sinit+0x68>)
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <__sinit+0x6c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	62a2      	str	r2, [r4, #40]	; 0x28
 800446e:	42a3      	cmp	r3, r4
 8004470:	bf04      	itt	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	61a3      	streq	r3, [r4, #24]
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f820 	bl	80044bc <__sfp>
 800447c:	6060      	str	r0, [r4, #4]
 800447e:	4620      	mov	r0, r4
 8004480:	f000 f81c 	bl	80044bc <__sfp>
 8004484:	60a0      	str	r0, [r4, #8]
 8004486:	4620      	mov	r0, r4
 8004488:	f000 f818 	bl	80044bc <__sfp>
 800448c:	2200      	movs	r2, #0
 800448e:	60e0      	str	r0, [r4, #12]
 8004490:	2104      	movs	r1, #4
 8004492:	6860      	ldr	r0, [r4, #4]
 8004494:	f7ff ff82 	bl	800439c <std>
 8004498:	68a0      	ldr	r0, [r4, #8]
 800449a:	2201      	movs	r2, #1
 800449c:	2109      	movs	r1, #9
 800449e:	f7ff ff7d 	bl	800439c <std>
 80044a2:	68e0      	ldr	r0, [r4, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	2112      	movs	r1, #18
 80044a8:	f7ff ff78 	bl	800439c <std>
 80044ac:	2301      	movs	r3, #1
 80044ae:	61a3      	str	r3, [r4, #24]
 80044b0:	e7d2      	b.n	8004458 <__sinit+0xc>
 80044b2:	bf00      	nop
 80044b4:	08005074 	.word	0x08005074
 80044b8:	080043e5 	.word	0x080043e5

080044bc <__sfp>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	4607      	mov	r7, r0
 80044c0:	f7ff ffac 	bl	800441c <__sfp_lock_acquire>
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <__sfp+0x84>)
 80044c6:	681e      	ldr	r6, [r3, #0]
 80044c8:	69b3      	ldr	r3, [r6, #24]
 80044ca:	b913      	cbnz	r3, 80044d2 <__sfp+0x16>
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7ff ffbd 	bl	800444c <__sinit>
 80044d2:	3648      	adds	r6, #72	; 0x48
 80044d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	d503      	bpl.n	80044e4 <__sfp+0x28>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	b30b      	cbz	r3, 8004524 <__sfp+0x68>
 80044e0:	6836      	ldr	r6, [r6, #0]
 80044e2:	e7f7      	b.n	80044d4 <__sfp+0x18>
 80044e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044e8:	b9d5      	cbnz	r5, 8004520 <__sfp+0x64>
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <__sfp+0x88>)
 80044ec:	60e3      	str	r3, [r4, #12]
 80044ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044f2:	6665      	str	r5, [r4, #100]	; 0x64
 80044f4:	f000 f847 	bl	8004586 <__retarget_lock_init_recursive>
 80044f8:	f7ff ff96 	bl	8004428 <__sfp_lock_release>
 80044fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004504:	6025      	str	r5, [r4, #0]
 8004506:	61a5      	str	r5, [r4, #24]
 8004508:	2208      	movs	r2, #8
 800450a:	4629      	mov	r1, r5
 800450c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004510:	f7ff fd16 	bl	8003f40 <memset>
 8004514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800451c:	4620      	mov	r0, r4
 800451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004520:	3468      	adds	r4, #104	; 0x68
 8004522:	e7d9      	b.n	80044d8 <__sfp+0x1c>
 8004524:	2104      	movs	r1, #4
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff ff62 	bl	80043f0 <__sfmoreglue>
 800452c:	4604      	mov	r4, r0
 800452e:	6030      	str	r0, [r6, #0]
 8004530:	2800      	cmp	r0, #0
 8004532:	d1d5      	bne.n	80044e0 <__sfp+0x24>
 8004534:	f7ff ff78 	bl	8004428 <__sfp_lock_release>
 8004538:	230c      	movs	r3, #12
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	e7ee      	b.n	800451c <__sfp+0x60>
 800453e:	bf00      	nop
 8004540:	08005074 	.word	0x08005074
 8004544:	ffff0001 	.word	0xffff0001

08004548 <_fwalk_reent>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4606      	mov	r6, r0
 800454e:	4688      	mov	r8, r1
 8004550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004554:	2700      	movs	r7, #0
 8004556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800455a:	f1b9 0901 	subs.w	r9, r9, #1
 800455e:	d505      	bpl.n	800456c <_fwalk_reent+0x24>
 8004560:	6824      	ldr	r4, [r4, #0]
 8004562:	2c00      	cmp	r4, #0
 8004564:	d1f7      	bne.n	8004556 <_fwalk_reent+0xe>
 8004566:	4638      	mov	r0, r7
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	89ab      	ldrh	r3, [r5, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d907      	bls.n	8004582 <_fwalk_reent+0x3a>
 8004572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004576:	3301      	adds	r3, #1
 8004578:	d003      	beq.n	8004582 <_fwalk_reent+0x3a>
 800457a:	4629      	mov	r1, r5
 800457c:	4630      	mov	r0, r6
 800457e:	47c0      	blx	r8
 8004580:	4307      	orrs	r7, r0
 8004582:	3568      	adds	r5, #104	; 0x68
 8004584:	e7e9      	b.n	800455a <_fwalk_reent+0x12>

08004586 <__retarget_lock_init_recursive>:
 8004586:	4770      	bx	lr

08004588 <__retarget_lock_acquire_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_release_recursive>:
 800458a:	4770      	bx	lr

0800458c <__swhatbuf_r>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	2900      	cmp	r1, #0
 8004596:	b096      	sub	sp, #88	; 0x58
 8004598:	4614      	mov	r4, r2
 800459a:	461d      	mov	r5, r3
 800459c:	da08      	bge.n	80045b0 <__swhatbuf_r+0x24>
 800459e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	602a      	str	r2, [r5, #0]
 80045a6:	061a      	lsls	r2, r3, #24
 80045a8:	d410      	bmi.n	80045cc <__swhatbuf_r+0x40>
 80045aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ae:	e00e      	b.n	80045ce <__swhatbuf_r+0x42>
 80045b0:	466a      	mov	r2, sp
 80045b2:	f000 fcdd 	bl	8004f70 <_fstat_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	dbf1      	blt.n	800459e <__swhatbuf_r+0x12>
 80045ba:	9a01      	ldr	r2, [sp, #4]
 80045bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045c4:	425a      	negs	r2, r3
 80045c6:	415a      	adcs	r2, r3
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	e7ee      	b.n	80045aa <__swhatbuf_r+0x1e>
 80045cc:	2340      	movs	r3, #64	; 0x40
 80045ce:	2000      	movs	r0, #0
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	b016      	add	sp, #88	; 0x58
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080045d8 <__smakebuf_r>:
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045dc:	079d      	lsls	r5, r3, #30
 80045de:	4606      	mov	r6, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d507      	bpl.n	80045f4 <__smakebuf_r+0x1c>
 80045e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2301      	movs	r3, #1
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	b002      	add	sp, #8
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	466a      	mov	r2, sp
 80045f8:	f7ff ffc8 	bl	800458c <__swhatbuf_r>
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f895 	bl	8004730 <_malloc_r>
 8004606:	b948      	cbnz	r0, 800461c <__smakebuf_r+0x44>
 8004608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460c:	059a      	lsls	r2, r3, #22
 800460e:	d4ef      	bmi.n	80045f0 <__smakebuf_r+0x18>
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7e3      	b.n	80045e4 <__smakebuf_r+0xc>
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__smakebuf_r+0x7c>)
 800461e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	6020      	str	r0, [r4, #0]
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	6163      	str	r3, [r4, #20]
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	6120      	str	r0, [r4, #16]
 8004632:	b15b      	cbz	r3, 800464c <__smakebuf_r+0x74>
 8004634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 fcab 	bl	8004f94 <_isatty_r>
 800463e:	b128      	cbz	r0, 800464c <__smakebuf_r+0x74>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	89a0      	ldrh	r0, [r4, #12]
 800464e:	4305      	orrs	r5, r0
 8004650:	81a5      	strh	r5, [r4, #12]
 8004652:	e7cd      	b.n	80045f0 <__smakebuf_r+0x18>
 8004654:	080043e5 	.word	0x080043e5

08004658 <_free_r>:
 8004658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800465a:	2900      	cmp	r1, #0
 800465c:	d044      	beq.n	80046e8 <_free_r+0x90>
 800465e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004662:	9001      	str	r0, [sp, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f1a1 0404 	sub.w	r4, r1, #4
 800466a:	bfb8      	it	lt
 800466c:	18e4      	addlt	r4, r4, r3
 800466e:	f000 fcb3 	bl	8004fd8 <__malloc_lock>
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <_free_r+0x94>)
 8004674:	9801      	ldr	r0, [sp, #4]
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	b933      	cbnz	r3, 8004688 <_free_r+0x30>
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	6014      	str	r4, [r2, #0]
 800467e:	b003      	add	sp, #12
 8004680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004684:	f000 bcae 	b.w	8004fe4 <__malloc_unlock>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d908      	bls.n	800469e <_free_r+0x46>
 800468c:	6825      	ldr	r5, [r4, #0]
 800468e:	1961      	adds	r1, r4, r5
 8004690:	428b      	cmp	r3, r1
 8004692:	bf01      	itttt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	1949      	addeq	r1, r1, r5
 800469a:	6021      	streq	r1, [r4, #0]
 800469c:	e7ed      	b.n	800467a <_free_r+0x22>
 800469e:	461a      	mov	r2, r3
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b10b      	cbz	r3, 80046a8 <_free_r+0x50>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d9fa      	bls.n	800469e <_free_r+0x46>
 80046a8:	6811      	ldr	r1, [r2, #0]
 80046aa:	1855      	adds	r5, r2, r1
 80046ac:	42a5      	cmp	r5, r4
 80046ae:	d10b      	bne.n	80046c8 <_free_r+0x70>
 80046b0:	6824      	ldr	r4, [r4, #0]
 80046b2:	4421      	add	r1, r4
 80046b4:	1854      	adds	r4, r2, r1
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	d1e0      	bne.n	800467e <_free_r+0x26>
 80046bc:	681c      	ldr	r4, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	6053      	str	r3, [r2, #4]
 80046c2:	4421      	add	r1, r4
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	e7da      	b.n	800467e <_free_r+0x26>
 80046c8:	d902      	bls.n	80046d0 <_free_r+0x78>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6003      	str	r3, [r0, #0]
 80046ce:	e7d6      	b.n	800467e <_free_r+0x26>
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	1961      	adds	r1, r4, r5
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf04      	itt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	bf04      	itt	eq
 80046e0:	1949      	addeq	r1, r1, r5
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	6054      	str	r4, [r2, #4]
 80046e6:	e7ca      	b.n	800467e <_free_r+0x26>
 80046e8:	b003      	add	sp, #12
 80046ea:	bd30      	pop	{r4, r5, pc}
 80046ec:	20000858 	.word	0x20000858

080046f0 <sbrk_aligned>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4e0e      	ldr	r6, [pc, #56]	; (800472c <sbrk_aligned+0x3c>)
 80046f4:	460c      	mov	r4, r1
 80046f6:	6831      	ldr	r1, [r6, #0]
 80046f8:	4605      	mov	r5, r0
 80046fa:	b911      	cbnz	r1, 8004702 <sbrk_aligned+0x12>
 80046fc:	f000 fbc2 	bl	8004e84 <_sbrk_r>
 8004700:	6030      	str	r0, [r6, #0]
 8004702:	4621      	mov	r1, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 fbbd 	bl	8004e84 <_sbrk_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d00a      	beq.n	8004724 <sbrk_aligned+0x34>
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d007      	beq.n	8004728 <sbrk_aligned+0x38>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4628      	mov	r0, r5
 800471c:	f000 fbb2 	bl	8004e84 <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d101      	bne.n	8004728 <sbrk_aligned+0x38>
 8004724:	f04f 34ff 	mov.w	r4, #4294967295
 8004728:	4620      	mov	r0, r4
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	2000085c 	.word	0x2000085c

08004730 <_malloc_r>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4607      	mov	r7, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d905      	bls.n	8004758 <_malloc_r+0x28>
 800474c:	230c      	movs	r3, #12
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	2600      	movs	r6, #0
 8004752:	4630      	mov	r0, r6
 8004754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004758:	4e2e      	ldr	r6, [pc, #184]	; (8004814 <_malloc_r+0xe4>)
 800475a:	f000 fc3d 	bl	8004fd8 <__malloc_lock>
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	461c      	mov	r4, r3
 8004762:	bb34      	cbnz	r4, 80047b2 <_malloc_r+0x82>
 8004764:	4629      	mov	r1, r5
 8004766:	4638      	mov	r0, r7
 8004768:	f7ff ffc2 	bl	80046f0 <sbrk_aligned>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	4604      	mov	r4, r0
 8004770:	d14d      	bne.n	800480e <_malloc_r+0xde>
 8004772:	6834      	ldr	r4, [r6, #0]
 8004774:	4626      	mov	r6, r4
 8004776:	2e00      	cmp	r6, #0
 8004778:	d140      	bne.n	80047fc <_malloc_r+0xcc>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4631      	mov	r1, r6
 800477e:	4638      	mov	r0, r7
 8004780:	eb04 0803 	add.w	r8, r4, r3
 8004784:	f000 fb7e 	bl	8004e84 <_sbrk_r>
 8004788:	4580      	cmp	r8, r0
 800478a:	d13a      	bne.n	8004802 <_malloc_r+0xd2>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	3503      	adds	r5, #3
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	f025 0503 	bic.w	r5, r5, #3
 8004796:	3508      	adds	r5, #8
 8004798:	2d0c      	cmp	r5, #12
 800479a:	bf38      	it	cc
 800479c:	250c      	movcc	r5, #12
 800479e:	4629      	mov	r1, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ffa5 	bl	80046f0 <sbrk_aligned>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d02b      	beq.n	8004802 <_malloc_r+0xd2>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	442b      	add	r3, r5
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e00e      	b.n	80047d0 <_malloc_r+0xa0>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	1b52      	subs	r2, r2, r5
 80047b6:	d41e      	bmi.n	80047f6 <_malloc_r+0xc6>
 80047b8:	2a0b      	cmp	r2, #11
 80047ba:	d916      	bls.n	80047ea <_malloc_r+0xba>
 80047bc:	1961      	adds	r1, r4, r5
 80047be:	42a3      	cmp	r3, r4
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	bf18      	it	ne
 80047c4:	6059      	strne	r1, [r3, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	bf08      	it	eq
 80047ca:	6031      	streq	r1, [r6, #0]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4638      	mov	r0, r7
 80047d2:	f104 060b 	add.w	r6, r4, #11
 80047d6:	f000 fc05 	bl	8004fe4 <__malloc_unlock>
 80047da:	f026 0607 	bic.w	r6, r6, #7
 80047de:	1d23      	adds	r3, r4, #4
 80047e0:	1af2      	subs	r2, r6, r3
 80047e2:	d0b6      	beq.n	8004752 <_malloc_r+0x22>
 80047e4:	1b9b      	subs	r3, r3, r6
 80047e6:	50a3      	str	r3, [r4, r2]
 80047e8:	e7b3      	b.n	8004752 <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	6032      	streq	r2, [r6, #0]
 80047f2:	605a      	strne	r2, [r3, #4]
 80047f4:	e7ec      	b.n	80047d0 <_malloc_r+0xa0>
 80047f6:	4623      	mov	r3, r4
 80047f8:	6864      	ldr	r4, [r4, #4]
 80047fa:	e7b2      	b.n	8004762 <_malloc_r+0x32>
 80047fc:	4634      	mov	r4, r6
 80047fe:	6876      	ldr	r6, [r6, #4]
 8004800:	e7b9      	b.n	8004776 <_malloc_r+0x46>
 8004802:	230c      	movs	r3, #12
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4638      	mov	r0, r7
 8004808:	f000 fbec 	bl	8004fe4 <__malloc_unlock>
 800480c:	e7a1      	b.n	8004752 <_malloc_r+0x22>
 800480e:	6025      	str	r5, [r4, #0]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa0>
 8004812:	bf00      	nop
 8004814:	20000858 	.word	0x20000858

08004818 <__sfputc_r>:
 8004818:	6893      	ldr	r3, [r2, #8]
 800481a:	3b01      	subs	r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	b410      	push	{r4}
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	da08      	bge.n	8004836 <__sfputc_r+0x1e>
 8004824:	6994      	ldr	r4, [r2, #24]
 8004826:	42a3      	cmp	r3, r4
 8004828:	db01      	blt.n	800482e <__sfputc_r+0x16>
 800482a:	290a      	cmp	r1, #10
 800482c:	d103      	bne.n	8004836 <__sfputc_r+0x1e>
 800482e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004832:	f7ff bc31 	b.w	8004098 <__swbuf_r>
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	1c58      	adds	r0, r3, #1
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	7019      	strb	r1, [r3, #0]
 800483e:	4608      	mov	r0, r1
 8004840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004844:	4770      	bx	lr

08004846 <__sfputs_r>:
 8004846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	4614      	mov	r4, r2
 800484e:	18d5      	adds	r5, r2, r3
 8004850:	42ac      	cmp	r4, r5
 8004852:	d101      	bne.n	8004858 <__sfputs_r+0x12>
 8004854:	2000      	movs	r0, #0
 8004856:	e007      	b.n	8004868 <__sfputs_r+0x22>
 8004858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485c:	463a      	mov	r2, r7
 800485e:	4630      	mov	r0, r6
 8004860:	f7ff ffda 	bl	8004818 <__sfputc_r>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d1f3      	bne.n	8004850 <__sfputs_r+0xa>
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800486c <_vfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	460d      	mov	r5, r1
 8004872:	b09d      	sub	sp, #116	; 0x74
 8004874:	4614      	mov	r4, r2
 8004876:	4698      	mov	r8, r3
 8004878:	4606      	mov	r6, r0
 800487a:	b118      	cbz	r0, 8004884 <_vfiprintf_r+0x18>
 800487c:	6983      	ldr	r3, [r0, #24]
 800487e:	b90b      	cbnz	r3, 8004884 <_vfiprintf_r+0x18>
 8004880:	f7ff fde4 	bl	800444c <__sinit>
 8004884:	4b89      	ldr	r3, [pc, #548]	; (8004aac <_vfiprintf_r+0x240>)
 8004886:	429d      	cmp	r5, r3
 8004888:	d11b      	bne.n	80048c2 <_vfiprintf_r+0x56>
 800488a:	6875      	ldr	r5, [r6, #4]
 800488c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	d405      	bmi.n	800489e <_vfiprintf_r+0x32>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	059a      	lsls	r2, r3, #22
 8004896:	d402      	bmi.n	800489e <_vfiprintf_r+0x32>
 8004898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800489a:	f7ff fe75 	bl	8004588 <__retarget_lock_acquire_recursive>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	d501      	bpl.n	80048a8 <_vfiprintf_r+0x3c>
 80048a4:	692b      	ldr	r3, [r5, #16]
 80048a6:	b9eb      	cbnz	r3, 80048e4 <_vfiprintf_r+0x78>
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7ff fc46 	bl	800413c <__swsetup_r>
 80048b0:	b1c0      	cbz	r0, 80048e4 <_vfiprintf_r+0x78>
 80048b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b4:	07dc      	lsls	r4, r3, #31
 80048b6:	d50e      	bpl.n	80048d6 <_vfiprintf_r+0x6a>
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	b01d      	add	sp, #116	; 0x74
 80048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c2:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <_vfiprintf_r+0x244>)
 80048c4:	429d      	cmp	r5, r3
 80048c6:	d101      	bne.n	80048cc <_vfiprintf_r+0x60>
 80048c8:	68b5      	ldr	r5, [r6, #8]
 80048ca:	e7df      	b.n	800488c <_vfiprintf_r+0x20>
 80048cc:	4b79      	ldr	r3, [pc, #484]	; (8004ab4 <_vfiprintf_r+0x248>)
 80048ce:	429d      	cmp	r5, r3
 80048d0:	bf08      	it	eq
 80048d2:	68f5      	ldreq	r5, [r6, #12]
 80048d4:	e7da      	b.n	800488c <_vfiprintf_r+0x20>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d4ed      	bmi.n	80048b8 <_vfiprintf_r+0x4c>
 80048dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048de:	f7ff fe54 	bl	800458a <__retarget_lock_release_recursive>
 80048e2:	e7e9      	b.n	80048b8 <_vfiprintf_r+0x4c>
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	2320      	movs	r3, #32
 80048ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ab8 <_vfiprintf_r+0x24c>
 80048f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fc:	f04f 0901 	mov.w	r9, #1
 8004900:	4623      	mov	r3, r4
 8004902:	469a      	mov	sl, r3
 8004904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004908:	b10a      	cbz	r2, 800490e <_vfiprintf_r+0xa2>
 800490a:	2a25      	cmp	r2, #37	; 0x25
 800490c:	d1f9      	bne.n	8004902 <_vfiprintf_r+0x96>
 800490e:	ebba 0b04 	subs.w	fp, sl, r4
 8004912:	d00b      	beq.n	800492c <_vfiprintf_r+0xc0>
 8004914:	465b      	mov	r3, fp
 8004916:	4622      	mov	r2, r4
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ff93 	bl	8004846 <__sfputs_r>
 8004920:	3001      	adds	r0, #1
 8004922:	f000 80aa 	beq.w	8004a7a <_vfiprintf_r+0x20e>
 8004926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004928:	445a      	add	r2, fp
 800492a:	9209      	str	r2, [sp, #36]	; 0x24
 800492c:	f89a 3000 	ldrb.w	r3, [sl]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a2 	beq.w	8004a7a <_vfiprintf_r+0x20e>
 8004936:	2300      	movs	r3, #0
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004940:	f10a 0a01 	add.w	sl, sl, #1
 8004944:	9304      	str	r3, [sp, #16]
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494c:	931a      	str	r3, [sp, #104]	; 0x68
 800494e:	4654      	mov	r4, sl
 8004950:	2205      	movs	r2, #5
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4858      	ldr	r0, [pc, #352]	; (8004ab8 <_vfiprintf_r+0x24c>)
 8004958:	f7fb fc5a 	bl	8000210 <memchr>
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	b9d8      	cbnz	r0, 8004998 <_vfiprintf_r+0x12c>
 8004960:	06d1      	lsls	r1, r2, #27
 8004962:	bf44      	itt	mi
 8004964:	2320      	movmi	r3, #32
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	0713      	lsls	r3, r2, #28
 800496c:	bf44      	itt	mi
 800496e:	232b      	movmi	r3, #43	; 0x2b
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b2a      	cmp	r3, #42	; 0x2a
 800497a:	d015      	beq.n	80049a8 <_vfiprintf_r+0x13c>
 800497c:	9a07      	ldr	r2, [sp, #28]
 800497e:	4654      	mov	r4, sl
 8004980:	2000      	movs	r0, #0
 8004982:	f04f 0c0a 	mov.w	ip, #10
 8004986:	4621      	mov	r1, r4
 8004988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498c:	3b30      	subs	r3, #48	; 0x30
 800498e:	2b09      	cmp	r3, #9
 8004990:	d94e      	bls.n	8004a30 <_vfiprintf_r+0x1c4>
 8004992:	b1b0      	cbz	r0, 80049c2 <_vfiprintf_r+0x156>
 8004994:	9207      	str	r2, [sp, #28]
 8004996:	e014      	b.n	80049c2 <_vfiprintf_r+0x156>
 8004998:	eba0 0308 	sub.w	r3, r0, r8
 800499c:	fa09 f303 	lsl.w	r3, r9, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	46a2      	mov	sl, r4
 80049a6:	e7d2      	b.n	800494e <_vfiprintf_r+0xe2>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	1d19      	adds	r1, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfbb      	ittet	lt
 80049b4:	425b      	neglt	r3, r3
 80049b6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ba:	9307      	strge	r3, [sp, #28]
 80049bc:	9307      	strlt	r3, [sp, #28]
 80049be:	bfb8      	it	lt
 80049c0:	9204      	strlt	r2, [sp, #16]
 80049c2:	7823      	ldrb	r3, [r4, #0]
 80049c4:	2b2e      	cmp	r3, #46	; 0x2e
 80049c6:	d10c      	bne.n	80049e2 <_vfiprintf_r+0x176>
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d135      	bne.n	8004a3a <_vfiprintf_r+0x1ce>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9203      	str	r2, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	f04f 33ff 	movlt.w	r3, #4294967295
 80049de:	3402      	adds	r4, #2
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ac8 <_vfiprintf_r+0x25c>
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	f7fb fc10 	bl	8000210 <memchr>
 80049f0:	b140      	cbz	r0, 8004a04 <_vfiprintf_r+0x198>
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	fa03 f000 	lsl.w	r0, r3, r0
 80049fc:	9b04      	ldr	r3, [sp, #16]
 80049fe:	4303      	orrs	r3, r0
 8004a00:	3401      	adds	r4, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	482c      	ldr	r0, [pc, #176]	; (8004abc <_vfiprintf_r+0x250>)
 8004a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0e:	2206      	movs	r2, #6
 8004a10:	f7fb fbfe 	bl	8000210 <memchr>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d03f      	beq.n	8004a98 <_vfiprintf_r+0x22c>
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <_vfiprintf_r+0x254>)
 8004a1a:	bb1b      	cbnz	r3, 8004a64 <_vfiprintf_r+0x1f8>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2a:	443b      	add	r3, r7
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2e:	e767      	b.n	8004900 <_vfiprintf_r+0x94>
 8004a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a34:	460c      	mov	r4, r1
 8004a36:	2001      	movs	r0, #1
 8004a38:	e7a5      	b.n	8004986 <_vfiprintf_r+0x11a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	3401      	adds	r4, #1
 8004a3e:	9305      	str	r3, [sp, #20]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f04f 0c0a 	mov.w	ip, #10
 8004a46:	4620      	mov	r0, r4
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	; 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_vfiprintf_r+0x1ee>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c5      	beq.n	80049e2 <_vfiprintf_r+0x176>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c3      	b.n	80049e2 <_vfiprintf_r+0x176>
 8004a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5e:	4604      	mov	r4, r0
 8004a60:	2301      	movs	r3, #1
 8004a62:	e7f0      	b.n	8004a46 <_vfiprintf_r+0x1da>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <_vfiprintf_r+0x258>)
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f3af 8000 	nop.w
 8004a74:	4607      	mov	r7, r0
 8004a76:	1c78      	adds	r0, r7, #1
 8004a78:	d1d6      	bne.n	8004a28 <_vfiprintf_r+0x1bc>
 8004a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7c:	07d9      	lsls	r1, r3, #31
 8004a7e:	d405      	bmi.n	8004a8c <_vfiprintf_r+0x220>
 8004a80:	89ab      	ldrh	r3, [r5, #12]
 8004a82:	059a      	lsls	r2, r3, #22
 8004a84:	d402      	bmi.n	8004a8c <_vfiprintf_r+0x220>
 8004a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a88:	f7ff fd7f 	bl	800458a <__retarget_lock_release_recursive>
 8004a8c:	89ab      	ldrh	r3, [r5, #12]
 8004a8e:	065b      	lsls	r3, r3, #25
 8004a90:	f53f af12 	bmi.w	80048b8 <_vfiprintf_r+0x4c>
 8004a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a96:	e711      	b.n	80048bc <_vfiprintf_r+0x50>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <_vfiprintf_r+0x258>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f880 	bl	8004ba8 <_printf_i>
 8004aa8:	e7e4      	b.n	8004a74 <_vfiprintf_r+0x208>
 8004aaa:	bf00      	nop
 8004aac:	08005098 	.word	0x08005098
 8004ab0:	080050b8 	.word	0x080050b8
 8004ab4:	08005078 	.word	0x08005078
 8004ab8:	080050d8 	.word	0x080050d8
 8004abc:	080050e2 	.word	0x080050e2
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	08004847 	.word	0x08004847
 8004ac8:	080050de 	.word	0x080050de

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	4699      	mov	r9, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfb8      	it	lt
 8004ae0:	4613      	movlt	r3, r2
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae8:	4607      	mov	r7, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	b10a      	cbz	r2, 8004af2 <_printf_common+0x26>
 8004aee:	3301      	adds	r3, #1
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	0699      	lsls	r1, r3, #26
 8004af6:	bf42      	ittt	mi
 8004af8:	6833      	ldrmi	r3, [r6, #0]
 8004afa:	3302      	addmi	r3, #2
 8004afc:	6033      	strmi	r3, [r6, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	f015 0506 	ands.w	r5, r5, #6
 8004b04:	d106      	bne.n	8004b14 <_printf_common+0x48>
 8004b06:	f104 0a19 	add.w	sl, r4, #25
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	6832      	ldr	r2, [r6, #0]
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dc26      	bgt.n	8004b62 <_printf_common+0x96>
 8004b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b18:	1e13      	subs	r3, r2, #0
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	bf18      	it	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	0692      	lsls	r2, r2, #26
 8004b22:	d42b      	bmi.n	8004b7c <_printf_common+0xb0>
 8004b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d01e      	beq.n	8004b70 <_printf_common+0xa4>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	68e5      	ldr	r5, [r4, #12]
 8004b36:	6832      	ldr	r2, [r6, #0]
 8004b38:	f003 0306 	and.w	r3, r3, #6
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	bf08      	it	eq
 8004b40:	1aad      	subeq	r5, r5, r2
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	6922      	ldr	r2, [r4, #16]
 8004b46:	bf0c      	ite	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bfc4      	itt	gt
 8004b52:	1a9b      	subgt	r3, r3, r2
 8004b54:	18ed      	addgt	r5, r5, r3
 8004b56:	2600      	movs	r6, #0
 8004b58:	341a      	adds	r4, #26
 8004b5a:	42b5      	cmp	r5, r6
 8004b5c:	d11a      	bne.n	8004b94 <_printf_common+0xc8>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e008      	b.n	8004b74 <_printf_common+0xa8>
 8004b62:	2301      	movs	r3, #1
 8004b64:	4652      	mov	r2, sl
 8004b66:	4649      	mov	r1, r9
 8004b68:	4638      	mov	r0, r7
 8004b6a:	47c0      	blx	r8
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d103      	bne.n	8004b78 <_printf_common+0xac>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b78:	3501      	adds	r5, #1
 8004b7a:	e7c6      	b.n	8004b0a <_printf_common+0x3e>
 8004b7c:	18e1      	adds	r1, r4, r3
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	2030      	movs	r0, #48	; 0x30
 8004b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b86:	4422      	add	r2, r4
 8004b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b90:	3302      	adds	r3, #2
 8004b92:	e7c7      	b.n	8004b24 <_printf_common+0x58>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4622      	mov	r2, r4
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d0e6      	beq.n	8004b70 <_printf_common+0xa4>
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7d9      	b.n	8004b5a <_printf_common+0x8e>
	...

08004ba8 <_printf_i>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	7e0f      	ldrb	r7, [r1, #24]
 8004bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb0:	2f78      	cmp	r7, #120	; 0x78
 8004bb2:	4691      	mov	r9, r2
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	469a      	mov	sl, r3
 8004bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bbe:	d807      	bhi.n	8004bd0 <_printf_i+0x28>
 8004bc0:	2f62      	cmp	r7, #98	; 0x62
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x32>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 80d8 	beq.w	8004d7a <_printf_i+0x1d2>
 8004bca:	2f58      	cmp	r7, #88	; 0x58
 8004bcc:	f000 80a3 	beq.w	8004d16 <_printf_i+0x16e>
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd8:	e03a      	b.n	8004c50 <_printf_i+0xa8>
 8004bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bde:	2b15      	cmp	r3, #21
 8004be0:	d8f6      	bhi.n	8004bd0 <_printf_i+0x28>
 8004be2:	a101      	add	r1, pc, #4	; (adr r1, 8004be8 <_printf_i+0x40>)
 8004be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	08004bd1 	.word	0x08004bd1
 8004bf8:	08004bd1 	.word	0x08004bd1
 8004bfc:	08004bd1 	.word	0x08004bd1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004bd1 	.word	0x08004bd1
 8004c08:	08004bd1 	.word	0x08004bd1
 8004c0c:	08004bd1 	.word	0x08004bd1
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	08004d61 	.word	0x08004d61
 8004c18:	08004c85 	.word	0x08004c85
 8004c1c:	08004d43 	.word	0x08004d43
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004bd1 	.word	0x08004bd1
 8004c28:	08004d83 	.word	0x08004d83
 8004c2c:	08004bd1 	.word	0x08004bd1
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004bd1 	.word	0x08004bd1
 8004c38:	08004bd1 	.word	0x08004bd1
 8004c3c:	08004d4b 	.word	0x08004d4b
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0a3      	b.n	8004d9c <_printf_i+0x1f4>
 8004c54:	6820      	ldr	r0, [r4, #0]
 8004c56:	6829      	ldr	r1, [r5, #0]
 8004c58:	0606      	lsls	r6, r0, #24
 8004c5a:	f101 0304 	add.w	r3, r1, #4
 8004c5e:	d50a      	bpl.n	8004c76 <_printf_i+0xce>
 8004c60:	680e      	ldr	r6, [r1, #0]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	da03      	bge.n	8004c70 <_printf_i+0xc8>
 8004c68:	232d      	movs	r3, #45	; 0x2d
 8004c6a:	4276      	negs	r6, r6
 8004c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c70:	485e      	ldr	r0, [pc, #376]	; (8004dec <_printf_i+0x244>)
 8004c72:	230a      	movs	r3, #10
 8004c74:	e019      	b.n	8004caa <_printf_i+0x102>
 8004c76:	680e      	ldr	r6, [r1, #0]
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c7e:	bf18      	it	ne
 8004c80:	b236      	sxthne	r6, r6
 8004c82:	e7ef      	b.n	8004c64 <_printf_i+0xbc>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	6029      	str	r1, [r5, #0]
 8004c8c:	0601      	lsls	r1, r0, #24
 8004c8e:	d501      	bpl.n	8004c94 <_printf_i+0xec>
 8004c90:	681e      	ldr	r6, [r3, #0]
 8004c92:	e002      	b.n	8004c9a <_printf_i+0xf2>
 8004c94:	0646      	lsls	r6, r0, #25
 8004c96:	d5fb      	bpl.n	8004c90 <_printf_i+0xe8>
 8004c98:	881e      	ldrh	r6, [r3, #0]
 8004c9a:	4854      	ldr	r0, [pc, #336]	; (8004dec <_printf_i+0x244>)
 8004c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2308      	moveq	r3, #8
 8004ca2:	230a      	movne	r3, #10
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004caa:	6865      	ldr	r5, [r4, #4]
 8004cac:	60a5      	str	r5, [r4, #8]
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	bfa2      	ittt	ge
 8004cb2:	6821      	ldrge	r1, [r4, #0]
 8004cb4:	f021 0104 	bicge.w	r1, r1, #4
 8004cb8:	6021      	strge	r1, [r4, #0]
 8004cba:	b90e      	cbnz	r6, 8004cc0 <_printf_i+0x118>
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	d04d      	beq.n	8004d5c <_printf_i+0x1b4>
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8004cca:	5dc7      	ldrb	r7, [r0, r7]
 8004ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cd0:	4637      	mov	r7, r6
 8004cd2:	42bb      	cmp	r3, r7
 8004cd4:	460e      	mov	r6, r1
 8004cd6:	d9f4      	bls.n	8004cc2 <_printf_i+0x11a>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d10b      	bne.n	8004cf4 <_printf_i+0x14c>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	07de      	lsls	r6, r3, #31
 8004ce0:	d508      	bpl.n	8004cf4 <_printf_i+0x14c>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	6861      	ldr	r1, [r4, #4]
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	bfde      	ittt	le
 8004cea:	2330      	movle	r3, #48	; 0x30
 8004cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf4:	1b52      	subs	r2, r2, r5
 8004cf6:	6122      	str	r2, [r4, #16]
 8004cf8:	f8cd a000 	str.w	sl, [sp]
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	aa03      	add	r2, sp, #12
 8004d00:	4621      	mov	r1, r4
 8004d02:	4640      	mov	r0, r8
 8004d04:	f7ff fee2 	bl	8004acc <_printf_common>
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d14c      	bne.n	8004da6 <_printf_i+0x1fe>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	b004      	add	sp, #16
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d16:	4835      	ldr	r0, [pc, #212]	; (8004dec <_printf_i+0x244>)
 8004d18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d1c:	6829      	ldr	r1, [r5, #0]
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d24:	6029      	str	r1, [r5, #0]
 8004d26:	061d      	lsls	r5, r3, #24
 8004d28:	d514      	bpl.n	8004d54 <_printf_i+0x1ac>
 8004d2a:	07df      	lsls	r7, r3, #31
 8004d2c:	bf44      	itt	mi
 8004d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d32:	6023      	strmi	r3, [r4, #0]
 8004d34:	b91e      	cbnz	r6, 8004d3e <_printf_i+0x196>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f023 0320 	bic.w	r3, r3, #32
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	2310      	movs	r3, #16
 8004d40:	e7b0      	b.n	8004ca4 <_printf_i+0xfc>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f043 0320 	orr.w	r3, r3, #32
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	2378      	movs	r3, #120	; 0x78
 8004d4c:	4828      	ldr	r0, [pc, #160]	; (8004df0 <_printf_i+0x248>)
 8004d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d52:	e7e3      	b.n	8004d1c <_printf_i+0x174>
 8004d54:	0659      	lsls	r1, r3, #25
 8004d56:	bf48      	it	mi
 8004d58:	b2b6      	uxthmi	r6, r6
 8004d5a:	e7e6      	b.n	8004d2a <_printf_i+0x182>
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	e7bb      	b.n	8004cd8 <_printf_i+0x130>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	6826      	ldr	r6, [r4, #0]
 8004d64:	6961      	ldr	r1, [r4, #20]
 8004d66:	1d18      	adds	r0, r3, #4
 8004d68:	6028      	str	r0, [r5, #0]
 8004d6a:	0635      	lsls	r5, r6, #24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	d501      	bpl.n	8004d74 <_printf_i+0x1cc>
 8004d70:	6019      	str	r1, [r3, #0]
 8004d72:	e002      	b.n	8004d7a <_printf_i+0x1d2>
 8004d74:	0670      	lsls	r0, r6, #25
 8004d76:	d5fb      	bpl.n	8004d70 <_printf_i+0x1c8>
 8004d78:	8019      	strh	r1, [r3, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6123      	str	r3, [r4, #16]
 8004d7e:	4615      	mov	r5, r2
 8004d80:	e7ba      	b.n	8004cf8 <_printf_i+0x150>
 8004d82:	682b      	ldr	r3, [r5, #0]
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	602a      	str	r2, [r5, #0]
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7fb fa3e 	bl	8000210 <memchr>
 8004d94:	b108      	cbz	r0, 8004d9a <_printf_i+0x1f2>
 8004d96:	1b40      	subs	r0, r0, r5
 8004d98:	6060      	str	r0, [r4, #4]
 8004d9a:	6863      	ldr	r3, [r4, #4]
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da4:	e7a8      	b.n	8004cf8 <_printf_i+0x150>
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	462a      	mov	r2, r5
 8004daa:	4649      	mov	r1, r9
 8004dac:	4640      	mov	r0, r8
 8004dae:	47d0      	blx	sl
 8004db0:	3001      	adds	r0, #1
 8004db2:	d0ab      	beq.n	8004d0c <_printf_i+0x164>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	079b      	lsls	r3, r3, #30
 8004db8:	d413      	bmi.n	8004de2 <_printf_i+0x23a>
 8004dba:	68e0      	ldr	r0, [r4, #12]
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	4298      	cmp	r0, r3
 8004dc0:	bfb8      	it	lt
 8004dc2:	4618      	movlt	r0, r3
 8004dc4:	e7a4      	b.n	8004d10 <_printf_i+0x168>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4640      	mov	r0, r8
 8004dce:	47d0      	blx	sl
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d09b      	beq.n	8004d0c <_printf_i+0x164>
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	68e3      	ldr	r3, [r4, #12]
 8004dd8:	9903      	ldr	r1, [sp, #12]
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	42ab      	cmp	r3, r5
 8004dde:	dcf2      	bgt.n	8004dc6 <_printf_i+0x21e>
 8004de0:	e7eb      	b.n	8004dba <_printf_i+0x212>
 8004de2:	2500      	movs	r5, #0
 8004de4:	f104 0619 	add.w	r6, r4, #25
 8004de8:	e7f5      	b.n	8004dd6 <_printf_i+0x22e>
 8004dea:	bf00      	nop
 8004dec:	080050e9 	.word	0x080050e9
 8004df0:	080050fa 	.word	0x080050fa

08004df4 <_putc_r>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	460d      	mov	r5, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	b118      	cbz	r0, 8004e06 <_putc_r+0x12>
 8004dfe:	6983      	ldr	r3, [r0, #24]
 8004e00:	b90b      	cbnz	r3, 8004e06 <_putc_r+0x12>
 8004e02:	f7ff fb23 	bl	800444c <__sinit>
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <_putc_r+0x84>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d124      	bne.n	8004e56 <_putc_r+0x62>
 8004e0c:	6874      	ldr	r4, [r6, #4]
 8004e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e10:	07d8      	lsls	r0, r3, #31
 8004e12:	d405      	bmi.n	8004e20 <_putc_r+0x2c>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	0599      	lsls	r1, r3, #22
 8004e18:	d402      	bmi.n	8004e20 <_putc_r+0x2c>
 8004e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1c:	f7ff fbb4 	bl	8004588 <__retarget_lock_acquire_recursive>
 8004e20:	68a3      	ldr	r3, [r4, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	da05      	bge.n	8004e36 <_putc_r+0x42>
 8004e2a:	69a2      	ldr	r2, [r4, #24]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	db1c      	blt.n	8004e6a <_putc_r+0x76>
 8004e30:	b2eb      	uxtb	r3, r5
 8004e32:	2b0a      	cmp	r3, #10
 8004e34:	d019      	beq.n	8004e6a <_putc_r+0x76>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	701d      	strb	r5, [r3, #0]
 8004e3e:	b2ed      	uxtb	r5, r5
 8004e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e42:	07da      	lsls	r2, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_putc_r+0x5e>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	059b      	lsls	r3, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_putc_r+0x5e>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f7ff fb9c 	bl	800458a <__retarget_lock_release_recursive>
 8004e52:	4628      	mov	r0, r5
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <_putc_r+0x88>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	d101      	bne.n	8004e60 <_putc_r+0x6c>
 8004e5c:	68b4      	ldr	r4, [r6, #8]
 8004e5e:	e7d6      	b.n	8004e0e <_putc_r+0x1a>
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <_putc_r+0x8c>)
 8004e62:	429c      	cmp	r4, r3
 8004e64:	bf08      	it	eq
 8004e66:	68f4      	ldreq	r4, [r6, #12]
 8004e68:	e7d1      	b.n	8004e0e <_putc_r+0x1a>
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff f912 	bl	8004098 <__swbuf_r>
 8004e74:	4605      	mov	r5, r0
 8004e76:	e7e3      	b.n	8004e40 <_putc_r+0x4c>
 8004e78:	08005098 	.word	0x08005098
 8004e7c:	080050b8 	.word	0x080050b8
 8004e80:	08005078 	.word	0x08005078

08004e84 <_sbrk_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	; (8004ea0 <_sbrk_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fb fff6 	bl	8000e80 <_sbrk>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_sbrk_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_sbrk_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20000860 	.word	0x20000860

08004ea4 <__sread>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	f000 f8a0 	bl	8004ff0 <_read_r>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	bfab      	itete	ge
 8004eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004eb8:	181b      	addge	r3, r3, r0
 8004eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ebe:	bfac      	ite	ge
 8004ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ec2:	81a3      	strhlt	r3, [r4, #12]
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <__swrite>:
 8004ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eca:	461f      	mov	r7, r3
 8004ecc:	898b      	ldrh	r3, [r1, #12]
 8004ece:	05db      	lsls	r3, r3, #23
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	d505      	bpl.n	8004ee4 <__swrite+0x1e>
 8004ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004edc:	2302      	movs	r3, #2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f000 f868 	bl	8004fb4 <_lseek_r>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efa:	f000 b817 	b.w	8004f2c <_write_r>

08004efe <__sseek>:
 8004efe:	b510      	push	{r4, lr}
 8004f00:	460c      	mov	r4, r1
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 f855 	bl	8004fb4 <_lseek_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	bf15      	itete	ne
 8004f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f1a:	81a3      	strheq	r3, [r4, #12]
 8004f1c:	bf18      	it	ne
 8004f1e:	81a3      	strhne	r3, [r4, #12]
 8004f20:	bd10      	pop	{r4, pc}

08004f22 <__sclose>:
 8004f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f26:	f000 b813 	b.w	8004f50 <_close_r>
	...

08004f2c <_write_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	; (8004f4c <_write_r+0x20>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	4608      	mov	r0, r1
 8004f34:	4611      	mov	r1, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7fb fd4c 	bl	80009d8 <_write>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_write_r+0x1e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_write_r+0x1e>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000860 	.word	0x20000860

08004f50 <_close_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d06      	ldr	r5, [pc, #24]	; (8004f6c <_close_r+0x1c>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fb ff5b 	bl	8000e16 <_close>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_close_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_close_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	20000860 	.word	0x20000860

08004f70 <_fstat_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_fstat_r+0x20>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	f7fb ff56 	bl	8000e2e <_fstat>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d102      	bne.n	8004f8c <_fstat_r+0x1c>
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	b103      	cbz	r3, 8004f8c <_fstat_r+0x1c>
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000860 	.word	0x20000860

08004f94 <_isatty_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d06      	ldr	r5, [pc, #24]	; (8004fb0 <_isatty_r+0x1c>)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fb ff55 	bl	8000e4e <_isatty>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_isatty_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_isatty_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000860 	.word	0x20000860

08004fb4 <_lseek_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_lseek_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fb ff4e 	bl	8000e64 <_lseek>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_lseek_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_lseek_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000860 	.word	0x20000860

08004fd8 <__malloc_lock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__malloc_lock+0x8>)
 8004fda:	f7ff bad5 	b.w	8004588 <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20000854 	.word	0x20000854

08004fe4 <__malloc_unlock>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__malloc_unlock+0x8>)
 8004fe6:	f7ff bad0 	b.w	800458a <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	20000854 	.word	0x20000854

08004ff0 <_read_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d07      	ldr	r5, [pc, #28]	; (8005010 <_read_r+0x20>)
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7fb feec 	bl	8000ddc <_read>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_read_r+0x1e>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_read_r+0x1e>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000860 	.word	0x20000860

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
