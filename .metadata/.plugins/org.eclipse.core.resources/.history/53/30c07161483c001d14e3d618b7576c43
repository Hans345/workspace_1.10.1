#include "cpp_main.h"
#include "main.h"
#include "iostream"

#define INTERVALL 500 // intervall in ms
uint32_t last_time;

enum states{
	INIT = 0,
	BLINK1HZ,
	BLINK2HZ
};

typedef states State_Type;

void state_init_function(void);
void state_blink1hz_function(void);
void state_blink2hz_function(void);

static void (*state_table[])(void) = {
		state_init_function,
		state_blink1hz_function,
		state_blink2hz_function
};

static State_Type current_State;
static int times_blinked;

void cpp_main(){
	last_time = HAL_GetTick();
	while(1){
		state_table[current_State]();
		// Delay not blocking
		if(HAL_GetTick() - INTERVALL > last_time)
		{
			last_time = HAL_GetTick();
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		}
		// Delay Blocking
		// HAL_Delay(250);
	}
}

void state_init_function(void){
	times_blinked = 0;
	current_State = BLINK1HZ;
	std::cout<<"Execution State BLINK1HZ"<<std::endl;
}
void state_blink1hz_function(void){
	if(times_blinked == 5)
	{
		current_State = BLINK2HZ;
		std::cout<<"Execution State BLINK2HZ"<<std::endl;
		times_blinked = 0;
	}
}
void state_blink2hz_function(void){
	if(times_blinked == 5)
	{
		current_State = BLINK1HZ;
		std::cout<<"Execution State BLINK1HZ"<<std::endl;
		times_blinked = 0;
	}
}
