
CPP_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad0  08007ad0  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08007b48  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08007be8  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b8  200001b0  08007c88  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000868  08007c88  00020868  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001baeb  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003493  00000000  00000000  0003bccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001110  00000000  00000000  00040380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c000  00000000  00000000  00041490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014cf8  00000000  00000000  0006d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcbb7  00000000  00000000  00082188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017ed3f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005a4c  00000000  00000000  0017ed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800787c 	.word	0x0800787c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	0800787c 	.word	0x0800787c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000da8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000db0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000db8:	e000      	b.n	8000dbc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000dbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f9      	beq.n	8000dba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f002 fc47 	bl	8003676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f816 	bl	8000e18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x30>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f000 f925 	bl	8001040 <MX_GPIO_Init>
  MX_ETH_Init();
 8000df6:	f000 f877 	bl	8000ee8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dfa:	f000 f8c3 	bl	8000f84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 f8f1 	bl	8000fe4 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <main+0x34>)
 8000e04:	f005 fdea 	bl	80069dc <puts>
	  cpp_main();
 8000e08:	f000 fe64 	bl	8001ad4 <cpp_main>
	  printf(" C Main started!\n");
 8000e0c:	e7f9      	b.n	8000e02 <main+0x22>
 8000e0e:	bf00      	nop
 8000e10:	e000007c 	.word	0xe000007c
 8000e14:	08007894 	.word	0x08007894

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	; 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 fc6a 	bl	8006700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e3c:	f003 fbd0 	bl	80045e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e8c:	2348      	movs	r3, #72	; 0x48
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e94:	2303      	movs	r3, #3
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fbaf 	bl	8004600 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f988 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fe3d 	bl	8004b48 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ed4:	f000 f972 	bl	80011bc <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ETH_Init+0x84>)
 8000eee:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <MX_ETH_Init+0x88>)
 8000ef0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f00:	22e1      	movs	r2, #225	; 0xe1
 8000f02:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f22:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <MX_ETH_Init+0x90>)
 8000f28:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_ETH_Init+0x94>)
 8000f2e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f36:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f3a:	f002 fd03 	bl	8003944 <HAL_ETH_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 f93a 	bl	80011bc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f48:	2238      	movs	r2, #56	; 0x38
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f4e:	f005 fbd7 	bl	8006700 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f54:	2221      	movs	r2, #33	; 0x21
 8000f56:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f5a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f5e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000204 	.word	0x20000204
 8000f70:	40028000 	.word	0x40028000
 8000f74:	20000844 	.word	0x20000844
 8000f78:	20000110 	.word	0x20000110
 8000f7c:	20000070 	.word	0x20000070
 8000f80:	200001cc 	.word	0x200001cc

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_USART3_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc8:	f004 fbd4 	bl	8005774 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f8f3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002b4 	.word	0x200002b4
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	2202      	movs	r2, #2
 8001006:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2201      	movs	r2, #1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	f003 f991 	bl	800434e <HAL_PCD_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f8c3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000033c 	.word	0x2000033c

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <MX_GPIO_Init+0x134>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a46      	ldr	r2, [pc, #280]	; (8001174 <MX_GPIO_Init+0x134>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <MX_GPIO_Init+0x134>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <MX_GPIO_Init+0x134>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a40      	ldr	r2, [pc, #256]	; (8001174 <MX_GPIO_Init+0x134>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MX_GPIO_Init+0x134>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <MX_GPIO_Init+0x134>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a3a      	ldr	r2, [pc, #232]	; (8001174 <MX_GPIO_Init+0x134>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <MX_GPIO_Init+0x134>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <MX_GPIO_Init+0x134>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a34      	ldr	r2, [pc, #208]	; (8001174 <MX_GPIO_Init+0x134>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <MX_GPIO_Init+0x134>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <MX_GPIO_Init+0x134>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a2e      	ldr	r2, [pc, #184]	; (8001174 <MX_GPIO_Init+0x134>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <MX_GPIO_Init+0x134>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MX_GPIO_Init+0x134>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <MX_GPIO_Init+0x134>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_GPIO_Init+0x134>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010ec:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_GPIO_Init+0x138>)
 80010ee:	f003 f8fb 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	4821      	ldr	r0, [pc, #132]	; (800117c <MX_GPIO_Init+0x13c>)
 80010f8:	f003 f8f6 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <MX_GPIO_Init+0x140>)
 8001114:	f002 ff3c 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin;
 8001118:	f244 0381 	movw	r3, #16513	; 0x4081
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_GPIO_Init+0x138>)
 8001132:	f002 ff2d 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0x13c>)
 800114e:	f002 ff1f 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0x13c>)
 8001166:	f002 ff13 	bl	8003f90 <HAL_GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400
 800117c:	40021800 	.word	0x40021800
 8001180:	40020800 	.word	0x40020800

08001184 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e009      	b.n	80011aa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fdf6 	bl	8000d90 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dbf1      	blt.n	8001196 <_write+0x12>
  }
  return len;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_ETH_MspInit+0x158>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f040 8096 	bne.w	8001360 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b4a      	ldr	r3, [pc, #296]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a40      	ldr	r2, [pc, #256]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800126a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a2e      	ldr	r2, [pc, #184]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012dc:	2332      	movs	r3, #50	; 0x32
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ec:	230b      	movs	r3, #11
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	481e      	ldr	r0, [pc, #120]	; (8001370 <HAL_ETH_MspInit+0x160>)
 80012f8:	f002 fe4a 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012fc:	2386      	movs	r3, #134	; 0x86
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130c:	230b      	movs	r3, #11
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <HAL_ETH_MspInit+0x164>)
 8001318:	f002 fe3a 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <HAL_ETH_MspInit+0x168>)
 800133a:	f002 fe29 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800133e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001350:	230b      	movs	r3, #11
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ETH_MspInit+0x16c>)
 800135c:	f002 fe18 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40028000 	.word	0x40028000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40021800 	.word	0x40021800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0aa      	sub	sp, #168	; 0xa8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2284      	movs	r2, #132	; 0x84
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 f9ad 	bl	8006700 <memset>
  if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13c      	bne.n	800142a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fde8 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ca:	f7ff fef7 	bl	80011bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_UART_MspInit+0xbc>)
 8001426:	f002 fdb3 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	37a8      	adds	r7, #168	; 0xa8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40004800 	.word	0x40004800
 8001438:	40023800 	.word	0x40023800
 800143c:	40020c00 	.word	0x40020c00

08001440 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ac      	sub	sp, #176	; 0xb0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2284      	movs	r2, #132	; 0x84
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f005 f94d 	bl	8006700 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146e:	d159      	bne.n	8001524 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001474:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fd87 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800148c:	f7ff fe96 	bl	80011bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_PCD_MspInit+0xec>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014c2:	230a      	movs	r3, #10
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_PCD_MspInit+0xf0>)
 80014d0:	f002 fd5e 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_PCD_MspInit+0xf0>)
 80014f0:	f002 fd4e 	bl	8003f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_PCD_MspInit+0xec>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_PCD_MspInit+0xec>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_PCD_MspInit+0xec>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6453      	str	r3, [r2, #68]	; 0x44
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_PCD_MspInit+0xec>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	37b0      	adds	r7, #176	; 0xb0
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f002 f8b6 	bl	80036f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a2:	f005 f859 	bl	8006658 <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0x12>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
	}

return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f004 ffda 	bl	8006658 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20050000 	.word	0x20050000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	2000084c 	.word	0x2000084c
 80016d8:	20000868 	.word	0x20000868

080016dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f004 ff99 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fb55 	bl	8000de0 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001744:	08007ad8 	.word	0x08007ad8
  ldr r2, =_sbss
 8001748:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800174c:	20000868 	.word	0x20000868

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>

08001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>:
	uint32_t DelayNoneBlocking_tickstart; 	// last_time
public:
	NoneBlockSystemTickDelay();
	virtual ~NoneBlockSystemTickDelay();

	void DelayNonBlocking_Init(uint32_t Delay) {
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
		DelayNoneBlocking_wait = Delay;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	605a      	str	r2, [r3, #4]
		DelayNoneBlocking_tickstart = HAL_GetTick();
 8001762:	f001 ffd9 	bl	8003718 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
	}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>:

	uint8_t DelayNonBlocking_CheckExpiration() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
		// 1: Toggle LED!
		// 0: Don't Toggle LED!
		if(HAL_GetTick() - DelayNoneBlocking_wait > DelayNoneBlocking_tickstart)
 800177c:	f001 ffcc 	bl	8003718 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	bf8c      	ite	hi
 8001790:	2301      	movhi	r3, #1
 8001792:	2300      	movls	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x34>
		{
			DelayNoneBlocking_tickstart = HAL_GetTick();
 800179a:	f001 ffbd 	bl	8003718 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
			return 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x36>
		}
		else
		{
			return 0;
 80017a8:	2300      	movs	r3, #0
		}
	}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN5myHal10STM32H7Led9toggleLEDEv>:
public:
	STM32H7Led(GPIO_TypeDef* aPort,
			   uint16_t aPin);
	virtual ~STM32H7Led();

	const void toggleLED(void) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(Port, Pin);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f002 fda8 	bl	800431a <HAL_GPIO_TogglePin>
	}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>:
 *      Author: raphael.baumeler
 */

#include "BlinkingLed.h"

BlinkingLed::BlinkingLed(GPIO_TypeDef *aPort, uint16_t aPin, float_t aFrequency, uint16_t aDutyCycle)	:
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4611      	mov	r1, r2
 80017e0:	ed87 0a00 	vstr	s0, [r7]
 80017e4:	461a      	mov	r2, r3
 80017e6:	460b      	mov	r3, r1
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80bb      	strh	r3, [r7, #4]
STM32H7Led(aPort, aPin), Frequency(aFrequency), DutyCycle(aDutyCycle)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f899 	bl	8001928 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	330c      	adds	r3, #12
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8c2 	bl	8001988 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xa8>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xac>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	88ba      	ldrh	r2, [r7, #4]
 800181a:	839a      	strh	r2, [r3, #28]
{
	uint32_t Delay = uint32_t((1000.0/aFrequency)*(aDutyCycle/100.0)); //in ms
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	f7fe feab 	bl	8000578 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	4916      	ldr	r1, [pc, #88]	; (8001884 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb0>)
 800182c:	f7ff f826 	bl	800087c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe8a 	bl	8000554 <__aeabi_i2d>
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb4>)
 8001846:	f7ff f819 	bl	800087c <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fee9 	bl	8000628 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f8f5 	bl	8000a4c <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	617b      	str	r3, [r7, #20]
	NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff71 	bl	8001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
}
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	bf00      	nop
 800187c:	08007948 	.word	0x08007948
 8001880:	08007958 	.word	0x08007958
 8001884:	408f4000 	.word	0x408f4000
 8001888:	40590000 	.word	0x40590000

0800188c <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <_ZN11BlinkingLedD1Ev+0x30>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <_ZN11BlinkingLedD1Ev+0x34>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	330c      	adds	r3, #12
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f889 	bl	80019bc <_ZN5myHal10STM32H7LedD1Ev>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f84b 	bl	8001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
}
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08007948 	.word	0x08007948
 80018c0:	08007958 	.word	0x08007958

080018c4 <_ZThn12_N11BlinkingLedD1Ev>:
public:
	BlinkingLed(GPIO_TypeDef* aPort,
				uint16_t aPin,
			    float_t aFrequency=1,
			    uint16_t aDutyCycle=50);
	virtual ~BlinkingLed();
 80018c4:	f1a0 000c 	sub.w	r0, r0, #12
 80018c8:	f7ff bfe0 	b.w	800188c <_ZN11BlinkingLedD1Ev>

080018cc <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
}
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffd9 	bl	800188c <_ZN11BlinkingLedD1Ev>
 80018da:	2120      	movs	r1, #32
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f004 fe8f 	bl	8006600 <_ZdlPvj>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZThn12_N11BlinkingLedD0Ev>:
 80018ec:	f1a0 000c 	sub.w	r0, r0, #12
 80018f0:	f7ff bfec 	b.w	80018cc <_ZN11BlinkingLedD0Ev>

080018f4 <_ZN11BlinkingLed15processBlinkingEv>:

const void BlinkingLed::processBlinking() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(NoneBlockSystemTickDelay::DelayNonBlocking_CheckExpiration())
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff38 	bl	8001774 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <_ZN11BlinkingLed15processBlinkingEv+0x2a>
	{
		STM32H7Led::toggleLED();
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	330c      	adds	r3, #12
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff4a 	bl	80017b2 <_ZN5myHal10STM32H7Led9toggleLEDEv>
	}
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>:
 *      Author: raphael.baumeler
 */

#include "NoneBlockSystemTickDelay.h"

myHal::NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev+0x1c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]

}
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	08007968 	.word	0x08007968

08001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>:

myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev+0x1c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]

}
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	08007968 	.word	0x08007968

08001968 <_ZN5myHal24NoneBlockSystemTickDelayD0Ev>:
myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
}
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffe9 	bl	8001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
 8001976:	210c      	movs	r1, #12
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fe41 	bl	8006600 <_ZdlPvj>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

myHal::STM32H7Led::STM32H7Led(GPIO_TypeDef *aPort, uint16_t aPin)	:
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
Port(aPort), Pin(aPin)
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	811a      	strh	r2, [r3, #8]
{
}
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	08007978 	.word	0x08007978

080019bc <_ZN5myHal10STM32H7LedD1Ev>:

myHal::STM32H7Led::~STM32H7Led() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <_ZN5myHal10STM32H7LedD1Ev+0x1c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	08007978 	.word	0x08007978

080019dc <_ZN5myHal10STM32H7LedD0Ev>:
myHal::STM32H7Led::~STM32H7Led() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
}
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe9 	bl	80019bc <_ZN5myHal10STM32H7LedD1Ev>
 80019ea:	210c      	movs	r1, #12
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f004 fe07 	bl	8006600 <_ZdlPvj>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	bf00      	nop
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	7039      	strb	r1, [r7, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	7138      	strb	r0, [r7, #4]
 8001a2c:	bf00      	nop
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	f1c3 031f 	rsb	r3, r3, #31
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_ZN11BlinkingLed12setFrequencyEf>:
		DutyCycle = dutyCycle;
		// uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
		// NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
	}

	void setFrequency(float_t frequency) {
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	ed87 0a00 	vstr	s0, [r7]
		Frequency = frequency;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	619a      	str	r2, [r3, #24]
		uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd82 	bl	8000578 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	4913      	ldr	r1, [pc, #76]	; (8001acc <_ZN11BlinkingLed12setFrequencyEf+0x74>)
 8001a7e:	f7fe fefd 	bl	800087c <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4614      	mov	r4, r2
 8001a88:	461d      	mov	r5, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8b9b      	ldrh	r3, [r3, #28]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <_ZN11BlinkingLed12setFrequencyEf+0x78>)
 8001a9a:	f7fe feef 	bl	800087c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fdbf 	bl	8000628 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ffcb 	bl	8000a4c <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60fb      	str	r3, [r7, #12]
		NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe47 	bl	8001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
	}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	408f4000 	.word	0x408f4000
 8001ad0:	40590000 	.word	0x40590000

08001ad4 <cpp_main>:
const dataType calcAverage(const dataType *arr, const int len);

template <typename dataType>
vector<dataType> mySort(const int16_t *arr, const int len, int stEleNr);

void cpp_main(){
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b0a9      	sub	sp, #164	; 0xa4
 8001ad8:	af00      	add	r7, sp, #0
	printf("CPP Main started!\n");
 8001ada:	4869      	ldr	r0, [pc, #420]	; (8001c80 <cpp_main+0x1ac>)
 8001adc:	f004 ff7e 	bl	80069dc <puts>

	// Average
	const int16_t l = 6;
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	int16_t arr[l];
	for (int i = 0; i < l; i++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	dc1d      	bgt.n	8001b30 <cpp_main+0x5c>
	  arr[i] =  (rand() % 100) + 1; //rand() 1...100
 8001af4:	f004 ff7a 	bl	80069ec <rand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a62      	ldr	r2, [pc, #392]	; (8001c84 <cpp_main+0x1b0>)
 8001afc:	fb82 1203 	smull	r1, r2, r2, r3
 8001b00:	1151      	asrs	r1, r2, #5
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	1a8a      	subs	r2, r1, r2
 8001b06:	2164      	movs	r1, #100	; 0x64
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
 8001b0c:	1a9a      	subs	r2, r3, r2
 8001b0e:	b293      	uxth	r3, r2
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	33a0      	adds	r3, #160	; 0xa0
 8001b1e:	443b      	add	r3, r7
 8001b20:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int i = 0; i < l; i++) {
 8001b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b2e:	e7dd      	b.n	8001aec <cpp_main+0x18>
	}
	int16_t avg = calcAverage<int16_t>(arr, l);
 8001b30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b34:	2106      	movs	r1, #6
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f8ac 	bl	8001c94 <_Z11calcAverageIsEKT_PS1_i>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	printf("Average: %d\n", avg);
 8001b42:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001b46:	4619      	mov	r1, r3
 8001b48:	484f      	ldr	r0, [pc, #316]	; (8001c88 <cpp_main+0x1b4>)
 8001b4a:	f004 fec1 	bl	80068d0 <iprintf>

	// Sort Elements
	vector<int16_t> vec(arr, arr+l);
 8001b4e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001b52:	340c      	adds	r4, #12
 8001b54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f8c9 	bl	8001cf0 <_ZNSaIsEC1Ev>
 8001b5e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b62:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b66:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	f000 f8d8 	bl	8001d20 <_ZNSt6vectorIsSaIsEEC1IPsvEET_S4_RKS0_>
 8001b70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f8c7 	bl	8001d08 <_ZNSaIsED1Ev>
	vec = mySort<int16_t>(arr, l, l/2); //Sort last 3 Elements only!
 8001b7a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001b7e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b82:	2303      	movs	r3, #3
 8001b84:	2206      	movs	r2, #6
 8001b86:	f000 f91f 	bl	8001dc8 <_Z6mySortIsESt6vectorIT_SaIS1_EEPKsii>
 8001b8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f95f 	bl	8001e58 <_ZNSt6vectorIsSaIsEEaSEOS1_>
 8001b9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f8db 	bl	8001d5a <_ZNSt6vectorIsSaIsEED1Ev>
	int16_t sorted_arr[l] = {0};
 8001ba4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
	std::copy(vec.begin(), vec.end(), sorted_arr); //vector -> array[len]
 8001bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f964 	bl	8001e82 <_ZNSt6vectorIsSaIsEE5beginEv>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f96e 	bl	8001ea2 <_ZNSt6vectorIsSaIsEE3endEv>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f000 f978 	bl	8001ec4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET0_T_S8_S7_>
	for(int i=0 ; i<l; i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	dc10      	bgt.n	8001c04 <cpp_main+0x130>
		printf("%d\n", sorted_arr[i]);
 8001be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	33a0      	adds	r3, #160	; 0xa0
 8001bea:	443b      	add	r3, r7
 8001bec:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4826      	ldr	r0, [pc, #152]	; (8001c8c <cpp_main+0x1b8>)
 8001bf4:	f004 fe6c 	bl	80068d0 <iprintf>
	for(int i=0 ; i<l; i++) {
 8001bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c02:	e7ea      	b.n	8001bda <cpp_main+0x106>
	}

	// Blinking LED
	BlinkingLed LED1(LD1_green_GPIO_Port, LD1_green_Pin);
 8001c04:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001c08:	2332      	movs	r3, #50	; 0x32
 8001c0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c0e:	2201      	movs	r2, #1
 8001c10:	491f      	ldr	r1, [pc, #124]	; (8001c90 <cpp_main+0x1bc>)
 8001c12:	f7ff fddf 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED1.setFrequency(2);	//PB_0:  2Hz, toggle every 250ms
 8001c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c1a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff1a 	bl	8001a58 <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED2(LD2_blue_GPIO_Port, LD2_blue_Pin);
 8001c24:	f107 0020 	add.w	r0, r7, #32
 8001c28:	2332      	movs	r3, #50	; 0x32
 8001c2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	4917      	ldr	r1, [pc, #92]	; (8001c90 <cpp_main+0x1bc>)
 8001c32:	f7ff fdcf 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED2.setFrequency(1);	//PB_7:  1Hz, toggle every 500ms
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff0a 	bl	8001a58 <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED3(LD3_red_GPIO_Port, LD3_red_Pin);
 8001c44:	4638      	mov	r0, r7
 8001c46:	2332      	movs	r3, #50	; 0x32
 8001c48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c50:	490f      	ldr	r1, [pc, #60]	; (8001c90 <cpp_main+0x1bc>)
 8001c52:	f7ff fdbf 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED3.setFrequency(0.5);	//PB_14: 0.5Hz, toggle every 1000ms
 8001c56:	463b      	mov	r3, r7
 8001c58:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fefb 	bl	8001a58 <_ZN11BlinkingLed12setFrequencyEf>
	while(1){
		LED1.processBlinking();
 8001c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe44 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED2.processBlinking();
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fe3f 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED3.processBlinking();
 8001c76:	463b      	mov	r3, r7
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fe3b 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED1.processBlinking();
 8001c7e:	e7f0      	b.n	8001c62 <cpp_main+0x18e>
 8001c80:	080078a8 	.word	0x080078a8
 8001c84:	51eb851f 	.word	0x51eb851f
 8001c88:	080078bc 	.word	0x080078bc
 8001c8c:	080078cc 	.word	0x080078cc
 8001c90:	40020400 	.word	0x40020400

08001c94 <_Z11calcAverageIsEKT_PS1_i>:
	}
}

template <typename dataType>
const dataType calcAverage(const dataType *arr, const int len)
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
{
	printf("Array Size: %d\n", len);
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4812      	ldr	r0, [pc, #72]	; (8001cec <_Z11calcAverageIsEKT_PS1_i+0x58>)
 8001ca2:	f004 fe15 	bl	80068d0 <iprintf>
	dataType sum = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	da0e      	bge.n	8001cd4 <_Z11calcAverageIsEKT_PS1_i+0x40>
	  sum =  sum + arr[i];
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	8afb      	ldrh	r3, [r7, #22]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++) {
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e7ec      	b.n	8001cae <_Z11calcAverageIsEKT_PS1_i+0x1a>
	}
	dataType avg = sum/len;
 8001cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cde:	81fb      	strh	r3, [r7, #14]
	return avg;
 8001ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	080078d0 	.word	0x080078d0

08001cf0 <_ZNSaIsEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8fb 	bl	8001ef4 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZNSaIsED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8fa 	bl	8001f0a <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZNSt6vectorIsSaIsEEC1IPsvEET_S4_RKS0_>:
       *  constructor, and logN memory reallocations.
       */
#if __cplusplus >= 201103L
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
	vector(_InputIterator __first, _InputIterator __last,
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
	       const allocator_type& __a = allocator_type())
	: _Base(__a)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f8f4 	bl	8001f20 <_ZNSt12_Vector_baseIsSaIsEEC1ERKS0_>
	{
	  _M_range_initialize(__first, __last,
 8001d38:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f916 	bl	8001f70 <_ZSt19__iterator_categoryIPsENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_initialize(__first, __last,
 8001d44:	462b      	mov	r3, r5
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4621      	mov	r1, r4
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f91b 	bl	8001f86 <_ZNSt6vectorIsSaIsEE19_M_range_initializeIPsEEvT_S4_St20forward_iterator_tag>
	}
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bdb0      	pop	{r4, r5, r7, pc}

08001d5a <_ZNSt6vectorIsSaIsEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001d5a:	b5b0      	push	{r4, r5, r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f943 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001d72:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d74:	461a      	mov	r2, r3
 8001d76:	4629      	mov	r1, r5
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f000 f948 	bl	800200e <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f8dc 	bl	8001f3e <_ZNSt12_Vector_baseIsSaIsEED1Ev>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdb0      	pop	{r4, r5, r7, pc}

08001d90 <_ZZ6mySortIsESt6vectorIT_SaIS1_EEPKsiiENKUliE_clEi>:
vector<dataType> mySort(const int16_t *arr, const int len, int stEleNr){
	// Sort Vector
	vector<int16_t> myvector(arr, arr+len);
	sort(myvector.begin() + stEleNr, myvector.end()); //Sort Elements smallest first
	printf("Sorted Elements:\n");
	for_each(myvector.begin(), myvector.end(), [](int x) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	    printf("%d\n", x);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <_ZZ6mySortIsESt6vectorIT_SaIS1_EEPKsiiENKUliE_clEi+0x1c>)
 8001d9e:	f004 fd97 	bl	80068d0 <iprintf>
	for_each(myvector.begin(), myvector.end(), [](int x) {
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	080078cc 	.word	0x080078cc

08001db0 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffa5 	bl	8001d08 <_ZNSaIsED1Ev>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_Z6mySortIsESt6vectorIT_SaIS1_EEPKsii>:
vector<dataType> mySort(const int16_t *arr, const int len, int stEleNr){
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
	vector<int16_t> myvector(arr, arr+len);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	18d4      	adds	r4, r2, r3
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff84 	bl	8001cf0 <_ZNSaIsEC1Ev>
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4622      	mov	r2, r4
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f91a 	bl	800202a <_ZNSt6vectorIsSaIsEEC1IPKsvEET_S5_RKS0_>
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff84 	bl	8001d08 <_ZNSaIsED1Ev>
	sort(myvector.begin() + stEleNr, myvector.end()); //Sort Elements smallest first
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f83e 	bl	8001e82 <_ZNSt6vectorIsSaIsEE5beginEv>
 8001e06:	4603      	mov	r3, r0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f927 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8001e16:	4604      	mov	r4, r0
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f842 	bl	8001ea2 <_ZNSt6vectorIsSaIsEE3endEv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4620      	mov	r0, r4
 8001e24:	f000 f936 	bl	8002094 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEvT_S7_>
	printf("Sorted Elements:\n");
 8001e28:	480a      	ldr	r0, [pc, #40]	; (8001e54 <_Z6mySortIsESt6vectorIT_SaIS1_EEPKsii+0x8c>)
 8001e2a:	f004 fdd7 	bl	80069dc <puts>
	for_each(myvector.begin(), myvector.end(), [](int x) {
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f827 	bl	8001e82 <_ZNSt6vectorIsSaIsEE5beginEv>
 8001e34:	4604      	mov	r4, r0
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f833 	bl	8001ea2 <_ZNSt6vectorIsSaIsEE3endEv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	462a      	mov	r2, r5
 8001e40:	4619      	mov	r1, r3
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 f936 	bl	80020b4 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEZ6mySortIsES3_IT_SaIS8_EEPKsiiEUliE_ET0_S8_S8_SE_>
	});
	// Return Vector
	return myvector;
 8001e48:	bf00      	nop
}
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	080078e0 	.word	0x080078e0

08001e58 <_ZNSt6vectorIsSaIsEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f000 f94e 	bl	8002108 <_ZSt4moveIRSt6vectorIsSaIsEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4622      	mov	r2, r4
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f953 	bl	800211e <_ZNSt6vectorIsSaIsEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8001e78:	687b      	ldr	r3, [r7, #4]
      }
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}

08001e82 <_ZNSt6vectorIsSaIsEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f981 	bl	800219a <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZNSt6vectorIsSaIsEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1d1a      	adds	r2, r3, #4
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f970 	bl	800219a <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f972 	bl	80021ba <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEET_S7_>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	68b8      	ldr	r0, [r7, #8]
 8001eda:	f000 f96e 	bl	80021ba <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEET_S7_>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f000 f973 	bl	80021d0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET1_T0_S8_S7_>
 8001eea:	4603      	mov	r3, r0
    }
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_ZNSt12_Vector_baseIsSaIsEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f971 	bl	8002216 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1ERKS0_>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZNSt12_Vector_baseIsSaIsEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 8001f56:	461a      	mov	r2, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f96e 	bl	800223a <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
      }
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff25 	bl	8001db0 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZSt19__iterator_categoryIPsENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001f78:	bf00      	nop
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_ZNSt6vectorIsSaIsEE19_M_range_initializeIPsEEvT_S4_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68b8      	ldr	r0, [r7, #8]
 8001f98:	f000 f962 	bl	8002260 <_ZSt8distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001fa0:	68fc      	ldr	r4, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f827 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4619      	mov	r1, r3
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f000 f96a 	bl	8002288 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 f98d 	bl	80022d8 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	441a      	add	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f80d 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001fde:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68b8      	ldr	r0, [r7, #8]
 8001fe6:	f000 f98b 	bl	8002300 <_ZSt22__uninitialized_copy_aIPsS0_sET0_T_S2_S1_RSaIT1_E>
 8001fea:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
	}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f980 	bl	8002322 <_ZSt8_DestroyIPsEvT_S1_>
    }
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_ZNSt6vectorIsSaIsEEC1IPKsvEET_S5_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 800202a:	b5b0      	push	{r4, r5, r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff6f 	bl	8001f20 <_ZNSt12_Vector_baseIsSaIsEEC1ERKS0_>
	  _M_range_initialize(__first, __last,
 8002042:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f977 	bl	800233c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800204e:	462b      	mov	r3, r5
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4621      	mov	r1, r4
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f97c 	bl	8002352 <_ZNSt6vectorIsSaIsEE19_M_range_initializeIPKsEEvT_S5_St20forward_iterator_tag>
	}
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bdb0      	pop	{r4, r5, r7, pc}

08002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	f107 020c 	add.w	r2, r7, #12
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f888 	bl	800219a <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800209e:	f7ff fcad 	bl	80019fc <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 80020a2:	4622      	mov	r2, r4
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f98c 	bl	80023c4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}

080020b4 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEZ6mySortIsES3_IT_SaIS8_EEPKsiiEUliE_ET0_S8_S8_SE_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	713a      	strb	r2, [r7, #4]
      for (; __first != __last; ++__first)
 80020c0:	f107 0208 	add.w	r2, r7, #8
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f9a7 	bl	800241e <_ZN9__gnu_cxxneIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d013      	beq.n	80020fe <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEZ6mySortIsES3_IT_SaIS8_EEPKsiiEUliE_ET0_S8_S8_SE_+0x4a>
	__f(*__first);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f9c7 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e6:	461a      	mov	r2, r3
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe4f 	bl	8001d90 <_ZZ6mySortIsESt6vectorIT_SaIS1_EEPKsiiENKUliE_clEi>
      for (; __first != __last; ++__first)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f9a9 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
 80020fc:	e7e0      	b.n	80020c0 <_ZSt8for_eachIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEZ6mySortIsES3_IT_SaIS8_EEPKsiiEUliE_ET0_S8_S8_SE_+0xc>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 80020fe:	bf00      	nop
    }
 8002100:	4620      	mov	r0, r4
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bd90      	pop	{r4, r7, pc}

08002108 <_ZSt4moveIRSt6vectorIsSaIsEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_ZNSt6vectorIsSaIsEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b089      	sub	sp, #36	; 0x24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f9b5 	bl	80024a2 <_ZNKSt12_Vector_baseIsSaIsEE13get_allocatorEv>
 8002138:	f107 021c 	add.w	r2, r7, #28
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f9be 	bl	80024c4 <_ZNSt6vectorIsSaIsEEC1ERKS0_>
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fddb 	bl	8001d08 <_ZNSaIsED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f9c2 	bl	80024e2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f9bb 	bl	80024e2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff42 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002174:	4604      	mov	r4, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff3d 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	4620      	mov	r0, r4
 8002184:	f000 f9cb 	bl	800251e <_ZSt15__alloc_on_moveISaIsEEvRT_S2_>
	vector __tmp(get_allocator());
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fde4 	bl	8001d5a <_ZNSt6vectorIsSaIsEED1Ev>
      }
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}

0800219a <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f9ac 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80021e2:	4604      	mov	r4, r0
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f000 f9a8 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80021ea:	4605      	mov	r5, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f9b1 	bl	8002556 <_ZSt12__niter_baseIPsET_S1_>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4629      	mov	r1, r5
 80021fa:	4620      	mov	r0, r4
 80021fc:	f000 f9b6 	bl	800256c <_ZSt14__copy_move_a1ILb0EPsS0_ET1_T0_S2_S1_>
 8002200:	4602      	mov	r2, r0
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f9c0 	bl	800258c <_ZSt12__niter_wrapIPsET_RKS1_S1_>
 800220c:	4603      	mov	r3, r0
    }
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bdb0      	pop	{r4, r5, r7, pc}

08002216 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f92f 	bl	8002486 <_ZNSaIsEC1ERKS_>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f9ba 	bl	80025a4 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>
	{ }
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>:
      _M_deallocate(pointer __p, size_t __n)
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
	if (__p)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9ba 	bl	80025cc <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZSt8distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800226a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fe7e 	bl	8001f70 <_ZSt19__iterator_categoryIPsENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002274:	462a      	mov	r2, r5
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4620      	mov	r0, r4
 800227a:	f000 f9b6 	bl	80025ea <_ZSt10__distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800227e:	4603      	mov	r3, r0
    }
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bdb0      	pop	{r4, r5, r7, pc}

08002288 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f8f4 	bl	8002486 <_ZNSaIsEC1ERKS_>
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f9b1 	bl	800260a <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>
 80022a8:	4602      	mov	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf8c      	ite	hi
 80022b0:	2301      	movhi	r3, #1
 80022b2:	2300      	movls	r3, #0
 80022b4:	b2dc      	uxtb	r4, r3
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fd24 	bl	8001d08 <_ZNSaIsED1Ev>
 80022c0:	2c00      	cmp	r4, #0
 80022c2:	d002      	beq.n	80022ca <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x4c>)
 80022c6:	f004 f9b1 	bl	800662c <_ZSt20__throw_length_errorPKc>
	return __n;
 80022ca:	687b      	ldr	r3, [r7, #4]
      }
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	080078f4 	.word	0x080078f4

080022d8 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x1e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f9a6 	bl	800263e <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 80022f2:	4603      	mov	r3, r0
 80022f4:	e000      	b.n	80022f8 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x20>
 80022f6:	2300      	movs	r3, #0
      }
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_ZSt22__uninitialized_copy_aIPsS0_sET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9a2 	bl	800265c <_ZSt18uninitialized_copyIPsS0_ET0_T_S2_S1_>
 8002318:	4603      	mov	r3, r0
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZSt8_DestroyIPsEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9a6 	bl	8002680 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>
    }
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002344:	bf00      	nop
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_ZNSt6vectorIsSaIsEE19_M_range_initializeIPKsEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68b8      	ldr	r0, [r7, #8]
 8002364:	f000 f997 	bl	8002696 <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002368:	4603      	mov	r3, r0
 800236a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800236c:	68fc      	ldr	r4, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fe41 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff84 	bl	8002288 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ffa7 	bl	80022d8 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	441a      	add	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fe27 	bl	8001ff8 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80023aa:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80023ac:	4622      	mov	r2, r4
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f000 f984 	bl	80026be <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>
 80023b6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
	}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}

080023c4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 80023d0:	f107 0208 	add.w	r2, r7, #8
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f81f 	bl	800241e <_ZN9__gnu_cxxneIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d017      	beq.n	8002416 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x52>
				std::__lg(__last - __first) * 2,
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f975 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fb1e 	bl	8001a3a <_ZSt4__lgi>
 80023fe:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8002400:	005a      	lsls	r2, r3, #1
 8002402:	462b      	mov	r3, r5
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f97f 	bl	800270a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800240c:	4622      	mov	r2, r4
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f9b1 	bl	8002778 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}

0800241e <_ZN9__gnu_cxxneIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800241e:	b590      	push	{r4, r7, lr}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9dd 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 800242e:	4603      	mov	r3, r0
 8002430:	681c      	ldr	r4, [r3, #0]
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f000 f9d8 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8002438:	4603      	mov	r3, r0
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	429c      	cmp	r4, r3
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
	return *this;
 8002460:	687b      	ldr	r3, [r7, #4]
      }
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_ZNSaIsEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9b3 	bl	80027fe <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZNKSt12_Vector_baseIsSaIsEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f000 f9b2 	bl	8002816 <_ZNKSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffe5 	bl	8002486 <_ZNSaIsEC1ERKS_>
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZNSt6vectorIsSaIsEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fd24 	bl	8001f20 <_ZNSt12_Vector_baseIsSaIsEEC1ERKS0_>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f857 	bl	80025a4 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f995 	bl	800282c <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f991 	bl	800282c <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4619      	mov	r1, r3
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f000 f98b 	bl	800282c <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZSt15__alloc_on_moveISaIsEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8002528:	461a      	mov	r2, r3
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f994 	bl	800285a <_ZSt18__do_alloc_on_moveISaIsEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f94f 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 800254a:	4603      	mov	r3, r0
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZSt12__niter_baseIPsET_S1_>:
    __niter_base(_Iterator __it)
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_ZSt14__copy_move_a1ILb0EPsS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f979 	bl	8002874 <_ZSt14__copy_move_a2ILb0EPsS0_ET1_T0_S2_S1_>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZSt12__niter_wrapIPsET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
	{ }
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f959 	bl	8002894 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_ZSt10__distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	105b      	asrs	r3, r3, #1
    }
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002612:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002616:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f94b 	bl	80028b4 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 800261e:	4603      	mov	r3, r0
 8002620:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002622:	f107 0208 	add.w	r2, r7, #8
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f94d 	bl	80028cc <_ZSt3minIjERKT_S2_S2_>
 8002632:	4603      	mov	r3, r0
 8002634:	681b      	ldr	r3, [r3, #0]
      }
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002648:	2200      	movs	r2, #0
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f951 	bl	80028f4 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 8002652:	4603      	mov	r3, r0
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZSt18uninitialized_copyIPsS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002668:	2301      	movs	r3, #1
 800266a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f95d 	bl	8002930 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPsS2_EET0_T_S4_S3_>
 8002676:	4603      	mov	r3, r0
    }
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002696:	b5b0      	push	{r4, r5, r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80026a0:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fe49 	bl	800233c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80026aa:	462a      	mov	r2, r5
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 f94e 	bl	8002950 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80026b4:	4603      	mov	r3, r0
    }
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}

080026be <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f94d 	bl	8002970 <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f87c 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	6838      	ldr	r0, [r7, #0]
 80026f6:	f000 f877 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 80026fa:	4603      	mov	r3, r0
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1ae3      	subs	r3, r4, r3
 8002700:	105b      	asrs	r3, r3, #1
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}

0800270a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800270a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8002718:	f107 020c 	add.w	r2, r7, #12
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ffdc 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002728:	4603      	mov	r3, r0
 800272a:	2b10      	cmp	r3, #16
 800272c:	bfcc      	ite	gt
 800272e:	2301      	movgt	r3, #1
 8002730:	2300      	movle	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 800273e:	4633      	mov	r3, r6
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f925 	bl	8002994 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800274a:	e012      	b.n	8002772 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8002752:	462a      	mov	r2, r5
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f933 	bl	80029c2 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800275c:	4603      	mov	r3, r0
 800275e:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8002760:	4623      	mov	r3, r4
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ffcf 	bl	800270a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8002770:	e7d2      	b.n	8002718 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0xe>
    }
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002778 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8002778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8002784:	f107 020c 	add.w	r2, r7, #12
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ffa6 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002794:	4603      	mov	r3, r0
 8002796:	2b10      	cmp	r3, #16
 8002798:	bfcc      	ite	gt
 800279a:	2301      	movgt	r3, #1
 800279c:	2300      	movle	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d018      	beq.n	80027d6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2110      	movs	r1, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fc5a 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4632      	mov	r2, r6
 80027b4:	4619      	mov	r1, r3
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f944 	bl	8002a44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	2110      	movs	r1, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fc4e 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80027c8:	4603      	mov	r3, r0
 80027ca:	462a      	mov	r2, r5
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f99f 	bl	8002b12 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 80027d4:	e004      	b.n	80027e0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 80027d6:	4622      	mov	r2, r4
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f932 	bl	8002a44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_ZNKSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	609a      	str	r2, [r3, #8]
	}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZSt18__do_alloc_on_moveISaIsEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002866:	68b8      	ldr	r0, [r7, #8]
 8002868:	f000 f977 	bl	8002b5a <_ZSt4moveIRSaIsEEONSt16remove_referenceIT_E4typeEOS3_>
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZSt14__copy_move_a2ILb0EPsS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f973 	bl	8002b70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>
 800288a:	4603      	mov	r3, r0
    }
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4619      	mov	r1, r3
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	f003 feaa 	bl	8006600 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f974 	bl	8002baa <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 80028c2:	4603      	mov	r3, r0
      }
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d201      	bcs.n	80028e6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	e000      	b.n	80028e8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80028e6:	687b      	ldr	r3, [r7, #4]
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f95e 	bl	8002bc2 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8002906:	4602      	mov	r2, r0
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4293      	cmp	r3, r2
 800290c:	bf8c      	ite	hi
 800290e:	2301      	movhi	r3, #1
 8002910:	2300      	movls	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002918:	f003 fe85 	bl	8006626 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fe6f 	bl	8006604 <_Znwj>
 8002926:	4603      	mov	r3, r0
      }
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPsS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f94a 	bl	8002bda <_ZSt4copyIPsS0_ET0_T_S2_S1_>
 8002946:	4603      	mov	r3, r0
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	105b      	asrs	r3, r3, #1
    }
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f940 	bl	8002c0a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>
 800298a:	4603      	mov	r3, r0
    }
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 80029a2:	4623      	mov	r3, r4
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f93e 	bl	8002c2a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 80029ae:	463b      	mov	r3, r7
 80029b0:	461a      	mov	r2, r3
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f96a 	bl	8002c8e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}

080029c2 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 80029c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c4:	b089      	sub	sp, #36	; 0x24
 80029c6:	af02      	add	r7, sp, #8
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80029ce:	f107 020c 	add.w	r2, r7, #12
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe81 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da00      	bge.n	80029e6 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_+0x24>
 80029e4:	3301      	adds	r3, #1
 80029e6:	105b      	asrs	r3, r3, #1
 80029e8:	461a      	mov	r2, r3
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fb37 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80029f6:	4603      	mov	r3, r0
 80029f8:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fb2f 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8002a06:	4604      	mov	r4, r0
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f963 	bl	8002cda <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmiEi>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f88d 5000 	strb.w	r5, [sp]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f992 	bl	8002d48 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fb1a 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8002a30:	4633      	mov	r3, r6
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	f000 f9dc 	bl	8002df2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 8002a3a:	4603      	mov	r3, r0
    }
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8002a50:	f107 0208 	add.w	r2, r7, #8
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fa11 	bl	8002e82 <_ZN9__gnu_cxxeqIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d151      	bne.n	8002b0a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc6>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff faf9 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8002a72:	4603      	mov	r3, r0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fccc 	bl	800241e <_ZN9__gnu_cxxneIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03f      	beq.n	8002b0c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc8>
	  if (__comp(__i, __first))
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f93a 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
		__val = _GLIBCXX_MOVE(*__i);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fce3 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa01 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab6:	827b      	strh	r3, [r7, #18]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fad0 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6979      	ldr	r1, [r7, #20]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f9fc 	bl	8002ec8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 8002ad0:	f107 0312 	add.w	r3, r7, #18
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f9ec 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8002ada:	4604      	mov	r4, r0
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fcc4 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	e006      	b.n	8002afe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xba>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8002af0:	4630      	mov	r0, r6
 8002af2:	f7fe ff97 	bl	8001a24 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8002af6:	4629      	mov	r1, r5
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f000 f9fd 	bl	8002ef8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fca3 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
 8002b08:	e7b5      	b.n	8002a76 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x32>
      if (__first == __last) return;
 8002b0a:	bf00      	nop
    }
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b12 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8002b12:	b5b0      	push	{r4, r5, r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	f107 0208 	add.w	r2, r7, #8
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fc76 	bl	800241e <_ZN9__gnu_cxxneIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00c      	beq.n	8002b52 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x40>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f7fe ff73 	bl	8001a24 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 8002b3e:	4621      	mov	r1, r4
 8002b40:	6978      	ldr	r0, [r7, #20]
 8002b42:	f000 f9d9 	bl	8002ef8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fc7f 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
 8002b50:	e7e7      	b.n	8002b22 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x10>
    }
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bdb0      	pop	{r4, r5, r7, pc}

08002b5a <_ZSt4moveIRSaIsEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	105b      	asrs	r3, r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	461a      	mov	r2, r3
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f003 fd99 	bl	80066cc <memmove>
	  return __result + _Num;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
	}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f805 	bl	8002bc2 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002bca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt4copyIPsS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8002bda:	b590      	push	{r4, r7, lr}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f9d4 	bl	8002f94 <_ZSt12__miter_baseIPsET_S1_>
 8002bec:	4604      	mov	r4, r0
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f000 f9d0 	bl	8002f94 <_ZSt12__miter_baseIPsET_S1_>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f9d5 	bl	8002faa <_ZSt13__copy_move_aILb0EPsS0_ET1_T0_S2_S1_>
 8002c00:	4603      	mov	r3, r0
    }
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}

08002c0a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f9e8 	bl	8002ff0 <_ZSt4copyIPKsPsET0_T_S4_S3_>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8002c38:	463b      	mov	r3, r7
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9ee 	bl	8003020 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	1d3a      	adds	r2, r7, #4
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fa3c 	bl	80030ce <_ZN9__gnu_cxxltIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d014      	beq.n	8002c86 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x5c>
	if (__comp(__i, __first))
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	6979      	ldr	r1, [r7, #20]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f852 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8002c6e:	463b      	mov	r3, r7
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa42 	bl	80030fe <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fbe5 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
 8002c84:	e7e0      	b.n	8002c48 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x1e>
    }
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8002c9a:	f107 020c 	add.w	r2, r7, #12
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fd1b 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	bfcc      	ite	gt
 8002cb0:	2301      	movgt	r3, #1
 8002cb2:	2300      	movle	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x44>
	{
	  --__last;
 8002cba:	f107 0308 	add.w	r3, r7, #8
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa5e 	bl	8003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fa17 	bl	80030fe <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 8002cd0:	e7e3      	b.n	8002c9a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xc>
	}
    }
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	425b      	negs	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	f107 020c 	add.w	r2, r7, #12
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fa4c 	bl	800219a <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fba6 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb9f 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d36:	429c      	cmp	r4, r3
 8002d38:	bfb4      	ite	lt
 8002d3a:	2301      	movlt	r3, #1
 8002d3c:	2300      	movge	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}

08002d48 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	f107 0018 	add.w	r0, r7, #24
 8002d5e:	f7ff ffd5 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	f107 0018 	add.w	r0, r7, #24
 8002d70:	f7ff ffcc 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fa0f 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002d82:	e032      	b.n	8002dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	f107 0018 	add.w	r0, r7, #24
 8002d8c:	f7ff ffbe 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fa01 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002d9e:	e024      	b.n	8002dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f9fc 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002da8:	e01f      	b.n	8002dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	f107 0018 	add.w	r0, r7, #24
 8002db2:	f7ff ffab 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f9ee 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002dc4:	e011      	b.n	8002dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	f107 0018 	add.w	r0, r7, #24
 8002dce:	f7ff ff9d 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f9e0 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002de0:	e003      	b.n	8002dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f9db 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
    }
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8002e00:	463b      	mov	r3, r7
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff80 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x2c>
	    ++__first;
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fb19 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
	  while (__comp(__first, __pivot))
 8002e1c:	e7f0      	b.n	8002e00 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0xe>
	  --__last;
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f9ac 	bl	8003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>
	  while (__comp(__pivot, __last))
 8002e28:	463b      	mov	r3, r7
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff6c 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x54>
	    --__last;
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f99e 	bl	8003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>
	  while (__comp(__pivot, __last))
 8002e44:	e7f0      	b.n	8002e28 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x36>
	  if (!(__first < __last))
 8002e46:	f107 0208 	add.w	r2, r7, #8
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f93c 	bl	80030ce <_ZN9__gnu_cxxltIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f083 0301 	eor.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x74>
	    return __first;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	e009      	b.n	8002e7a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x88>
	  std::iter_swap(__first, __last);
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f999 	bl	80031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>
	  ++__first;
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff faeb 	bl	800244e <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
	  while (__comp(__first, __pivot))
 8002e78:	e7c2      	b.n	8002e00 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0xe>
    }
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_ZN9__gnu_cxxeqIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002e82:	b590      	push	{r4, r7, lr}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fcab 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8002e92:	4603      	mov	r3, r0
 8002e94:	681c      	ldr	r4, [r3, #0]
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f7ff fca6 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff f970 	bl	80021ba <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEET_S7_>
 8002eda:	4604      	mov	r4, r0
 8002edc:	68b8      	ldr	r0, [r7, #8]
 8002ede:	f7ff f96c 	bl	80021ba <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEET_S7_>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f000 f970 	bl	80031ce <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_ET1_T0_S8_S7_>
 8002eee:	4603      	mov	r3, r0
    }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fab2 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ffd0 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f18:	81fb      	strh	r3, [r7, #14]
      _RandomAccessIterator __next = __last;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60bb      	str	r3, [r7, #8]
      --__next;
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f92c 	bl	8003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>
      while (__comp(__val, __next))
 8002f28:	f107 010e 	add.w	r1, r7, #14
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f96d 	bl	8003210 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIsNS_17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEbRT_T0_>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x78>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fa94 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ffb2 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8002f4e:	4604      	mov	r4, r0
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fa8b 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002f5e:	801a      	strh	r2, [r3, #0]
	  __last = __next;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	607b      	str	r3, [r7, #4]
	  --__next;
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f909 	bl	8003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>
      while (__comp(__val, __next))
 8002f6e:	e7db      	b.n	8002f28 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8002f70:	f107 030e 	add.w	r3, r7, #14
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff9c 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fa75 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002f8a:	801a      	strh	r2, [r3, #0]
    }
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}

08002f94 <_ZSt12__miter_baseIPsET_S1_>:
    __miter_base(_Iterator __it)
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <_ZSt13__copy_move_aILb0EPsS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002faa:	b5b0      	push	{r4, r5, r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff facd 	bl	8002556 <_ZSt12__niter_baseIPsET_S1_>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	68b8      	ldr	r0, [r7, #8]
 8002fc0:	f7ff fac9 	bl	8002556 <_ZSt12__niter_baseIPsET_S1_>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fac4 	bl	8002556 <_ZSt12__niter_baseIPsET_S1_>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fac9 	bl	800256c <_ZSt14__copy_move_a1ILb0EPsS0_ET1_T0_S2_S1_>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fad3 	bl	800258c <_ZSt12__niter_wrapIPsET_RKS1_S1_>
 8002fe6:	4603      	mov	r3, r0
    }
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bdb0      	pop	{r4, r5, r7, pc}

08002ff0 <_ZSt4copyIPKsPsET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f920 	bl	8003242 <_ZSt12__miter_baseIPKsET_S2_>
 8003002:	4604      	mov	r4, r0
 8003004:	68b8      	ldr	r0, [r7, #8]
 8003006:	f000 f91c 	bl	8003242 <_ZSt12__miter_baseIPKsET_S2_>
 800300a:	4603      	mov	r3, r0
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4619      	mov	r1, r3
 8003010:	4620      	mov	r0, r4
 8003012:	f000 f921 	bl	8003258 <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>
 8003016:	4603      	mov	r3, r0
    }
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}

08003020 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800302c:	f107 020c 	add.w	r2, r7, #12
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fb52 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	bfd4      	ite	le
 8003042:	2301      	movle	r3, #1
 8003044:	2300      	movgt	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d13a      	bne.n	80030c2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa2>
      const _DistanceType __len = __last - __first;
 800304c:	f107 020c 	add.w	r2, r7, #12
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fb42 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800305c:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3b02      	subs	r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	da00      	bge.n	8003068 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x48>
 8003066:	3301      	adds	r3, #1
 8003068:	105b      	asrs	r3, r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	69f9      	ldr	r1, [r7, #28]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fff6 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8003078:	4603      	mov	r3, r0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f9f4 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003086:	4603      	mov	r3, r0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff12 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 800308e:	4603      	mov	r3, r0
 8003090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003094:	827b      	strh	r3, [r7, #18]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8003096:	f107 0312 	add.w	r3, r7, #18
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff09 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a6:	f88d 4000 	strb.w	r4, [sp]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	69f9      	ldr	r1, [r7, #28]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f8f5 	bl	800329e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	  __parent--;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b01      	subs	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
      while (true)
 80030c0:	e7d4      	b.n	800306c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4c>
	return;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa8>
	    return;
 80030c6:	bf00      	nop
    }
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}

080030ce <_ZN9__gnu_cxxltIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 80030ce:	b590      	push	{r4, r7, lr}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fb85 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 80030de:	4603      	mov	r3, r0
 80030e0:	681c      	ldr	r4, [r3, #0]
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f7ff fb80 	bl	80027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429c      	cmp	r4, r3
 80030ee:	bf34      	ite	cc
 80030f0:	2301      	movcc	r3, #1
 80030f2:	2300      	movcs	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}

080030fe <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80030fe:	b5b0      	push	{r4, r5, r7, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af02      	add	r7, sp, #8
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f9ad 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003114:	4603      	mov	r3, r0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fecb 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 800311c:	4603      	mov	r3, r0
 800311e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003122:	82fb      	strh	r3, [r7, #22]
      *__result = _GLIBCXX_MOVE(*__first);
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f9a0 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 800312e:	4603      	mov	r3, r0
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff febe 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003136:	4604      	mov	r4, r0
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f997 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003140:	4603      	mov	r3, r0
 8003142:	f9b4 2000 	ldrsh.w	r2, [r4]
 8003146:	801a      	strh	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8003148:	f107 020c 	add.w	r2, r7, #12
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fac4 	bl	80026e0 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003158:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800315a:	f107 0316 	add.w	r3, r7, #22
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fea7 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003164:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	f88d 5000 	strb.w	r5, [sp]
 800316e:	4622      	mov	r2, r4
 8003170:	2100      	movs	r1, #0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f893 	bl	800329e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bdb0      	pop	{r4, r5, r7, pc}

08003180 <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1e9a      	subs	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
	return *this;
 8003192:	687b      	ldr	r3, [r7, #4]
      }
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f95e 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 80031b2:	4604      	mov	r4, r0
 80031b4:	463b      	mov	r3, r7
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f959 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 80031bc:	4603      	mov	r3, r0
 80031be:	4619      	mov	r1, r3
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 f920 	bl	8003406 <_ZSt4swapIsENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}

080031ce <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80031ce:	b5b0      	push	{r4, r5, r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff f9ad 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80031e0:	4604      	mov	r4, r0
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	f7ff f9a9 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80031e8:	4605      	mov	r5, r0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff f9a5 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	4629      	mov	r1, r5
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 f927 	bl	800344a <_ZSt23__copy_move_backward_a1ILb1EPsS0_ET1_T0_S2_S1_>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f932 	bl	800346a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET_S7_T0_>
 8003206:	4603      	mov	r3, r0
    }
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bdb0      	pop	{r4, r5, r7, pc}

08003210 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIsNS_17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f922 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 800322a:	4603      	mov	r3, r0
 800322c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003230:	429c      	cmp	r4, r3
 8003232:	bfb4      	ite	lt
 8003234:	2301      	movlt	r3, #1
 8003236:	2300      	movge	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}

08003242 <_ZSt12__miter_baseIPKsET_S2_>:
    __miter_base(_Iterator __it)
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f917 	bl	8003498 <_ZSt12__niter_baseIPKsET_S2_>
 800326a:	4604      	mov	r4, r0
 800326c:	68b8      	ldr	r0, [r7, #8]
 800326e:	f000 f913 	bl	8003498 <_ZSt12__niter_baseIPKsET_S2_>
 8003272:	4605      	mov	r5, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f96d 	bl	8002556 <_ZSt12__niter_baseIPsET_S1_>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	4629      	mov	r1, r5
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f913 	bl	80034ae <_ZSt14__copy_move_a1ILb0EPKsPsET1_T0_S4_S3_>
 8003288:	4602      	mov	r2, r0
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f97c 	bl	800258c <_ZSt12__niter_wrapIPsET_RKS1_S1_>
 8003294:	4603      	mov	r3, r0
    }
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bdb0      	pop	{r4, r5, r7, pc}

0800329e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800329e:	b5b0      	push	{r4, r5, r7, lr}
 80032a0:	b08e      	sub	sp, #56	; 0x38
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	807b      	strh	r3, [r7, #2]
      const _Distance __topIndex = __holeIndex;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
      _Distance __secondChild = __holeIndex;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__secondChild < (__len - 1) / 2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x20>
 80032bc:	3301      	adds	r3, #1
 80032be:	105b      	asrs	r3, r3, #1
 80032c0:	461a      	mov	r2, r3
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	4293      	cmp	r3, r2
 80032c6:	da45      	bge.n	8003354 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__comp(__first + __secondChild,
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fec4 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80032dc:	4604      	mov	r4, r0
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe febb 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80032f8:	f7ff fd08 	bl	8002d0c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEES8_EEbT_T0_>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x6a>
	    __secondChild--;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	3b01      	subs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fea8 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8003314:	4603      	mov	r3, r0
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f8a6 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003322:	4603      	mov	r3, r0
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fdc4 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 800332a:	4604      	mov	r4, r0
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fe96 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8003338:	4603      	mov	r3, r0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f894 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003346:	4603      	mov	r3, r0
 8003348:	f9b4 2000 	ldrsh.w	r2, [r4]
 800334c:	801a      	strh	r2, [r3, #0]
	  __holeIndex = __secondChild;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8003352:	e7af      	b.n	80032b4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d135      	bne.n	80033ca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x12c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3b02      	subs	r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	da00      	bge.n	8003368 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xca>
 8003366:	3301      	adds	r3, #1
 8003368:	105b      	asrs	r3, r3, #1
 800336a:	461a      	mov	r2, r3
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	4293      	cmp	r3, r2
 8003370:	d12b      	bne.n	80033ca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x12c>
	  __secondChild = 2 * (__secondChild + 1);
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	3301      	adds	r3, #1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fe6d 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 800338a:	4603      	mov	r3, r0
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f86b 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003398:	4603      	mov	r3, r0
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fd89 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 80033a0:	4604      	mov	r4, r0
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fe5b 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80033ae:	4603      	mov	r3, r0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f859 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 80033bc:	4603      	mov	r3, r0
 80033be:	f9b4 2000 	ldrsh.w	r2, [r4]
 80033c2:	801a      	strh	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 80033ca:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80033ce:	f000 f87e 	bl	80034ce <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4629      	mov	r1, r5
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fb17 	bl	8001a0c <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 80033de:	1cbb      	adds	r3, r7, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fd66 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 80033e6:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80033e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f873 	bl	80034e4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 80033fe:	bf00      	nop
 8003400:	3730      	adds	r7, #48	; 0x30
 8003402:	46bd      	mov	sp, r7
 8003404:	bdb0      	pop	{r4, r5, r7, pc}

08003406 <_ZSt4swapIsENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fd4e 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003416:	4603      	mov	r3, r0
 8003418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341c:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f7ff fd47 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003424:	4603      	mov	r3, r0
 8003426:	f9b3 2000 	ldrsh.w	r2, [r3]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800342e:	f107 030e 	add.w	r3, r7, #14
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fd3d 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003438:	4603      	mov	r3, r0
 800343a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	801a      	strh	r2, [r3, #0]
    }
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_ZSt23__copy_move_backward_a1ILb1EPsS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8af 	bl	80035be <_ZSt23__copy_move_backward_a2ILb1EPsS0_ET1_T0_S2_S1_>
 8003460:	4603      	mov	r3, r0
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff f860 	bl	800253a <_ZSt12__niter_baseIPsSt6vectorIsSaIsEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	105b      	asrs	r3, r3, #1
 8003482:	461a      	mov	r2, r3
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fdeb 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 800348e:	4603      	mov	r3, r0
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZSt12__niter_baseIPKsET_S2_>:
    __niter_base(_Iterator __it)
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <_ZSt14__copy_move_a1ILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f88d 	bl	80035de <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	807b      	strh	r3, [r7, #2]
      _Distance __parent = (__holeIndex - 1) / 2;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da00      	bge.n	80034fc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x18>
 80034fa:	3301      	adds	r3, #1
 80034fc:	105b      	asrs	r3, r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	dd10      	ble.n	800352a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x46>
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	69f9      	ldr	r1, [r7, #28]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fda8 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8003514:	4601      	mov	r1, r0
 8003516:	1cbb      	adds	r3, r7, #2
 8003518:	461a      	mov	r2, r3
 800351a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800351c:	f000 f86f 	bl	80035fe <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEbT_RT0_>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x46>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x48>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02c      	beq.n	800358a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fd94 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 800353c:	4603      	mov	r3, r0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe ff92 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 800354a:	4603      	mov	r3, r0
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fcb0 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003552:	4604      	mov	r4, r0
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fd82 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 8003560:	4603      	mov	r3, r0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe ff80 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 800356e:	4603      	mov	r3, r0
 8003570:	f9b4 2000 	ldrsh.w	r2, [r4]
 8003574:	801a      	strh	r2, [r3, #0]
	  __holeIndex = __parent;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3b01      	subs	r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	da00      	bge.n	8003584 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8003582:	3301      	adds	r3, #1
 8003584:	105b      	asrs	r3, r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003588:	e7ba      	b.n	8003500 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEisNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x1c>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800358a:	1cbb      	adds	r3, r7, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fc90 	bl	8002eb2 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8003592:	4604      	mov	r4, r0
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fd62 	bl	8002064 <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEplEi>
 80035a0:	4603      	mov	r3, r0
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe ff60 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80035b4:	801a      	strh	r2, [r3, #0]
    }
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}

080035be <_ZSt23__copy_move_backward_a2ILb1EPsS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f82f 	bl	8003632 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIsEEPT_PKS3_S6_S4_>
 80035d4:	4603      	mov	r3, r0
    }
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fabe 	bl	8002b70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>
 80035f4:	4603      	mov	r3, r0
    }
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe ff2d 	bl	800246e <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8003614:	4603      	mov	r3, r0
 8003616:	f9b3 2000 	ldrsh.w	r2, [r3]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003620:	429a      	cmp	r2, r3
 8003622:	bfb4      	ite	lt
 8003624:	2301      	movlt	r3, #1
 8003626:	2300      	movge	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIsEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	105b      	asrs	r3, r3, #1
 8003646:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIsEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	425b      	negs	r3, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	18d0      	adds	r0, r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	461a      	mov	r2, r3
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	f003 f834 	bl	80066cc <memmove>
	  return __result - _Num;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	425b      	negs	r3, r3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
	}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367a:	2003      	movs	r0, #3
 800367c:	f000 f92e 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003680:	2000      	movs	r0, #0
 8003682:	f000 f805 	bl	8003690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003686:	f7fd fd9f 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x54>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x58>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f93b 	bl	800392a <HAL_SYSTICK_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00e      	b.n	80036dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d80a      	bhi.n	80036da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c4:	2200      	movs	r2, #0
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f000 f911 	bl	80038f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <HAL_InitTick+0x5c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000008 	.word	0x20000008
 80036ec:	20000004 	.word	0x20000004

080036f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000008 	.word	0x20000008
 8003714:	20000850 	.word	0x20000850

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000850 	.word	0x20000850

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_Delay+0x44>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003756:	bf00      	nop
 8003758:	f7ff ffde 	bl	8003718 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000008 	.word	0x20000008

08003778 <__NVIC_SetPriorityGrouping>:
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	05fa0000 	.word	0x05fa0000

080037c0 <__NVIC_GetPriorityGrouping>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_SetPriority>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <SysTick_Config>:
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a8:	d301      	bcc.n	80038ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00f      	b.n	80038ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <SysTick_Config+0x40>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b6:	210f      	movs	r1, #15
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f7ff ff8e 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SysTick_Config+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SysTick_Config+0x40>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff47 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003904:	f7ff ff5c 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 8003908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff8e 	bl	8003830 <NVIC_EncodePriority>
 8003914:	4602      	mov	r2, r0
 8003916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff5d 	bl	80037dc <__NVIC_SetPriority>
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffb0 	bl	8003898 <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06a      	b.n	8003a2c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2223      	movs	r2, #35	; 0x23
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd fc51 	bl	8001210 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_ETH_Init+0xf0>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_ETH_Init+0xf0>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <HAL_ETH_Init+0xf0>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003986:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <HAL_ETH_Init+0xf4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <HAL_ETH_Init+0xf4>)
 800398c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003990:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_ETH_Init+0xf4>)
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4927      	ldr	r1, [pc, #156]	; (8003a38 <HAL_ETH_Init+0xf4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80039a0:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_ETH_Init+0xf4>)
 80039a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039bc:	f7ff feac 	bl	8003718 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80039c2:	e011      	b.n	80039e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80039c4:	f7ff fea8 	bl	8003718 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039d2:	d909      	bls.n	80039e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2204      	movs	r2, #4
 80039d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	22e0      	movs	r2, #224	; 0xe0
 80039e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e021      	b.n	8003a2c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e4      	bne.n	80039c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f958 	bl	8003cb0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f9ff 	bl	8003e04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa55 	bl	8003eb6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	461a      	mov	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f9bd 	bl	8003d94 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2210      	movs	r2, #16
 8003a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40013800 	.word	0x40013800

08003a3c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <ETH_SetMACConfig+0x15c>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7c1b      	ldrb	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <ETH_SetMACConfig+0x28>
 8003a5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a62:	e000      	b.n	8003a66 <ETH_SetMACConfig+0x2a>
 8003a64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7c5b      	ldrb	r3, [r3, #17]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <ETH_SetMACConfig+0x38>
 8003a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a72:	e000      	b.n	8003a76 <ETH_SetMACConfig+0x3a>
 8003a74:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7fdb      	ldrb	r3, [r3, #31]
 8003a82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	7f92      	ldrb	r2, [r2, #30]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d102      	bne.n	8003a9a <ETH_SetMACConfig+0x5e>
 8003a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a98:	e000      	b.n	8003a9c <ETH_SetMACConfig+0x60>
 8003a9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	7f1b      	ldrb	r3, [r3, #28]
 8003aa2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003aa4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003aaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d102      	bne.n	8003ac4 <ETH_SetMACConfig+0x88>
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	e000      	b.n	8003ac6 <ETH_SetMACConfig+0x8a>
 8003ac4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ac6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	7bdb      	ldrb	r3, [r3, #15]
 8003acc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ace:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ad4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003adc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7ff fe1a 	bl	8003730 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b12:	4013      	ands	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d101      	bne.n	8003b2a <ETH_SetMACConfig+0xee>
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	e000      	b.n	8003b2c <ETH_SetMACConfig+0xf0>
 8003b2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b2c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	d101      	bne.n	8003b42 <ETH_SetMACConfig+0x106>
 8003b3e:	2208      	movs	r2, #8
 8003b40:	e000      	b.n	8003b44 <ETH_SetMACConfig+0x108>
 8003b42:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003b4c:	2a01      	cmp	r2, #1
 8003b4e:	d101      	bne.n	8003b54 <ETH_SetMACConfig+0x118>
 8003b50:	2204      	movs	r2, #4
 8003b52:	e000      	b.n	8003b56 <ETH_SetMACConfig+0x11a>
 8003b54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003b5e:	2a01      	cmp	r2, #1
 8003b60:	d101      	bne.n	8003b66 <ETH_SetMACConfig+0x12a>
 8003b62:	2202      	movs	r2, #2
 8003b64:	e000      	b.n	8003b68 <ETH_SetMACConfig+0x12c>
 8003b66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7ff fdd5 	bl	8003730 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	ff20810f 	.word	0xff20810f

08003b9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <ETH_SetDMAConfig+0x110>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	7b1b      	ldrb	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <ETH_SetDMAConfig+0x2c>
 8003bc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bc6:	e000      	b.n	8003bca <ETH_SetDMAConfig+0x2e>
 8003bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7b5b      	ldrb	r3, [r3, #13]
 8003bce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bd0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	7f52      	ldrb	r2, [r2, #29]
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d102      	bne.n	8003be0 <ETH_SetDMAConfig+0x44>
 8003bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bde:	e000      	b.n	8003be2 <ETH_SetDMAConfig+0x46>
 8003be0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003be2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	7b9b      	ldrb	r3, [r3, #14]
 8003be8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	7f1b      	ldrb	r3, [r3, #28]
 8003bf6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003bf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	7f9b      	ldrb	r3, [r3, #30]
 8003bfe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c10:	4313      	orrs	r3, r2
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7ff fd7c 	bl	8003730 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	791b      	ldrb	r3, [r3, #4]
 8003c4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f7ff fd4d 	bl	8003730 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	f8de3f23 	.word	0xf8de3f23

08003cb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0a6      	sub	sp, #152	; 0x98
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cec:	2300      	movs	r3, #0
 8003cee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fe86 	bl	8003a3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d30:	2301      	movs	r3, #1
 8003d32:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff08 	bl	8003b9c <ETH_SetDMAConfig>
}
 8003d8c:	bf00      	nop
 8003d8e:	3798      	adds	r7, #152	; 0x98
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3305      	adds	r3, #5
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	3204      	adds	r2, #4
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <ETH_MACAddressConfig+0x68>)
 8003db6:	4413      	add	r3, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	061a      	lsls	r2, r3, #24
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <ETH_MACAddressConfig+0x6c>)
 8003de6:	4413      	add	r3, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40028040 	.word	0x40028040
 8003e00:	40028044 	.word	0x40028044

08003e04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e03e      	b.n	8003e90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	3206      	adds	r2, #6
 8003e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d80c      	bhi.n	8003e74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68d9      	ldr	r1, [r3, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e004      	b.n	8003e7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d9bd      	bls.n	8003e12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea8:	611a      	str	r2, [r3, #16]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e046      	b.n	8003f52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6919      	ldr	r1, [r3, #16]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003f08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	3212      	adds	r2, #18
 8003f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d80c      	bhi.n	8003f42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6919      	ldr	r1, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	e004      	b.n	8003f4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d9b5      	bls.n	8003ec4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	60da      	str	r2, [r3, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e175      	b.n	800429c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	f040 8164 	bne.w	8004296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d005      	beq.n	8003fe6 <HAL_GPIO_Init+0x56>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d130      	bne.n	8004048 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800401c:	2201      	movs	r2, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 0201 	and.w	r2, r3, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b03      	cmp	r3, #3
 8004052:	d017      	beq.n	8004084 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d123      	bne.n	80040d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	08da      	lsrs	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3208      	adds	r2, #8
 8004098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	220f      	movs	r2, #15
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	08da      	lsrs	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3208      	adds	r2, #8
 80040d2:	69b9      	ldr	r1, [r7, #24]
 80040d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	2203      	movs	r2, #3
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0203 	and.w	r2, r3, #3
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80be 	beq.w	8004296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411a:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_GPIO_Init+0x324>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a65      	ldr	r2, [pc, #404]	; (80042b4 <HAL_GPIO_Init+0x324>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_GPIO_Init+0x324>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004132:	4a61      	ldr	r2, [pc, #388]	; (80042b8 <HAL_GPIO_Init+0x328>)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_GPIO_Init+0x32c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d037      	beq.n	80041ce <HAL_GPIO_Init+0x23e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_GPIO_Init+0x330>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a56      	ldr	r2, [pc, #344]	; (80042c4 <HAL_GPIO_Init+0x334>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02b      	beq.n	80041c6 <HAL_GPIO_Init+0x236>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a55      	ldr	r2, [pc, #340]	; (80042c8 <HAL_GPIO_Init+0x338>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d025      	beq.n	80041c2 <HAL_GPIO_Init+0x232>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a54      	ldr	r2, [pc, #336]	; (80042cc <HAL_GPIO_Init+0x33c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01f      	beq.n	80041be <HAL_GPIO_Init+0x22e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a53      	ldr	r2, [pc, #332]	; (80042d0 <HAL_GPIO_Init+0x340>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d019      	beq.n	80041ba <HAL_GPIO_Init+0x22a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_GPIO_Init+0x344>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_Init+0x226>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a51      	ldr	r2, [pc, #324]	; (80042d8 <HAL_GPIO_Init+0x348>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_Init+0x222>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a50      	ldr	r2, [pc, #320]	; (80042dc <HAL_GPIO_Init+0x34c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_Init+0x21e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4f      	ldr	r2, [pc, #316]	; (80042e0 <HAL_GPIO_Init+0x350>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_Init+0x21a>
 80041a6:	2309      	movs	r3, #9
 80041a8:	e012      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041aa:	230a      	movs	r3, #10
 80041ac:	e010      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041ae:	2308      	movs	r3, #8
 80041b0:	e00e      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041b2:	2307      	movs	r3, #7
 80041b4:	e00c      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041b6:	2306      	movs	r3, #6
 80041b8:	e00a      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041ba:	2305      	movs	r3, #5
 80041bc:	e008      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041be:	2304      	movs	r3, #4
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e004      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_GPIO_Init+0x240>
 80041ce:	2300      	movs	r3, #0
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	4093      	lsls	r3, r2
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041e0:	4935      	ldr	r1, [pc, #212]	; (80042b8 <HAL_GPIO_Init+0x328>)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	3302      	adds	r3, #2
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_GPIO_Init+0x354>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_GPIO_Init+0x354>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004218:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_GPIO_Init+0x354>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <HAL_GPIO_Init+0x354>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_GPIO_Init+0x354>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_GPIO_Init+0x354>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_GPIO_Init+0x354>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <HAL_GPIO_Init+0x354>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3301      	adds	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	f67f ae86 	bls.w	8003fb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40020000 	.word	0x40020000
 80042c0:	40020400 	.word	0x40020400
 80042c4:	40020800 	.word	0x40020800
 80042c8:	40020c00 	.word	0x40020c00
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40021400 	.word	0x40021400
 80042d4:	40021800 	.word	0x40021800
 80042d8:	40021c00 	.word	0x40021c00
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40022400 	.word	0x40022400
 80042e4:	40013c00 	.word	0x40013c00

080042e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
 80042f4:	4613      	mov	r3, r2
 80042f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004304:	e003      	b.n	800430e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004306:	887b      	ldrh	r3, [r7, #2]
 8004308:	041a      	lsls	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	619a      	str	r2, [r3, #24]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	041a      	lsls	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43d9      	mvns	r1, r3
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	400b      	ands	r3, r1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	619a      	str	r2, [r3, #24]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800434e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004350:	b08f      	sub	sp, #60	; 0x3c
 8004352:	af0a      	add	r7, sp, #40	; 0x28
 8004354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e116      	b.n	800458e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd f860 	bl	8001440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2203      	movs	r2, #3
 8004384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d102      	bne.n	800439a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fe92 	bl	80060c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	687e      	ldr	r6, [r7, #4]
 80043ac:	466d      	mov	r5, sp
 80043ae:	f106 0410 	add.w	r4, r6, #16
 80043b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043be:	e885 0003 	stmia.w	r5, {r0, r1}
 80043c2:	1d33      	adds	r3, r6, #4
 80043c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f001 fe26 	bl	8006018 <USB_CoreInit>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0d7      	b.n	800458e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fe80 	bl	80060ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e04a      	b.n	8004486 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	333d      	adds	r3, #61	; 0x3d
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	333c      	adds	r3, #60	; 0x3c
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	b298      	uxth	r0, r3
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3344      	adds	r3, #68	; 0x44
 800442c:	4602      	mov	r2, r0
 800442e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3340      	adds	r3, #64	; 0x40
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3348      	adds	r3, #72	; 0x48
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3354      	adds	r3, #84	; 0x54
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	3301      	adds	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d3af      	bcc.n	80043f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e044      	b.n	8004520 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	3301      	adds	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d3b5      	bcc.n	8004496 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	687e      	ldr	r6, [r7, #4]
 8004532:	466d      	mov	r5, sp
 8004534:	f106 0410 	add.w	r4, r6, #16
 8004538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004544:	e885 0003 	stmia.w	r5, {r0, r1}
 8004548:	1d33      	adds	r3, r6, #4
 800454a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800454c:	6838      	ldr	r0, [r7, #0]
 800454e:	f001 fe19 	bl	8006184 <USB_DevInit>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e014      	b.n	800458e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f80b 	bl	8004598 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f001 ffd7 	bl	800653a <USB_DevDisconnect>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_PCDEx_ActivateLPM+0x44>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	10000003 	.word	0x10000003

080045e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40007000 	.word	0x40007000

08004600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e291      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8087 	beq.w	8004732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004624:	4b96      	ldr	r3, [pc, #600]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b04      	cmp	r3, #4
 800462e:	d00c      	beq.n	800464a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004630:	4b93      	ldr	r3, [pc, #588]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d112      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
 800463c:	4b90      	ldr	r3, [pc, #576]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004648:	d10b      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464a:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d06c      	beq.n	8004730 <HAL_RCC_OscConfig+0x130>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d168      	bne.n	8004730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e26b      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x7a>
 800466c:	4b84      	ldr	r3, [pc, #528]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a83      	ldr	r2, [pc, #524]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e02e      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x9c>
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7e      	ldr	r2, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7b      	ldr	r2, [pc, #492]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01d      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0xc0>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a72      	ldr	r2, [pc, #456]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 80046c0:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6b      	ldr	r2, [pc, #428]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7ff f81a 	bl	8003718 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7ff f816 	bl	8003718 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e21f      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xe8>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7ff f806 	bl	8003718 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7ff f802 	bl	8003718 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e20b      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	4b57      	ldr	r3, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x110>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d069      	beq.n	8004812 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800473e:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b4d      	ldr	r3, [pc, #308]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11c      	bne.n	8004790 <HAL_RCC_OscConfig+0x190>
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCC_OscConfig+0x17a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e1df      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	493d      	ldr	r1, [pc, #244]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	e040      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d023      	beq.n	80047e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fe ffb8 	bl	8003718 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe ffb4 	bl	8003718 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1bd      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4929      	ldr	r1, [pc, #164]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	e018      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe ff94 	bl	8003718 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fe ff90 	bl	8003718 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e199      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d038      	beq.n	8004890 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fe ff71 	bl	8003718 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483a:	f7fe ff6d 	bl	8003718 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e176      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x23a>
 8004858:	e01a      	b.n	8004890 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	4a08      	ldr	r2, [pc, #32]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fe ff57 	bl	8003718 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486e:	f7fe ff53 	bl	8003718 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d903      	bls.n	8004884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e15c      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
 8004880:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	4b91      	ldr	r3, [pc, #580]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ee      	bne.n	800486e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a4 	beq.w	80049e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a87      	ldr	r2, [pc, #540]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b85      	ldr	r3, [pc, #532]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c6:	4b82      	ldr	r3, [pc, #520]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048d2:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7e      	ldr	r2, [pc, #504]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fe ff1b 	bl	8003718 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fe ff17 	bl	8003718 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e120      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f8:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x31a>
 800490c:	4b6f      	ldr	r3, [pc, #444]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a6e      	ldr	r2, [pc, #440]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	e02d      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x33c>
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a69      	ldr	r2, [pc, #420]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a66      	ldr	r2, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x35e>
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a60      	ldr	r2, [pc, #384]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b5e      	ldr	r3, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a5d      	ldr	r2, [pc, #372]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800495e:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5a      	ldr	r2, [pc, #360]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fe fecb 	bl	8003718 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fec7 	bl	8003718 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ce      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x386>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fe feb5 	bl	8003718 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe feb1 	bl	8003718 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a3b      	ldr	r2, [pc, #236]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a4 	beq.w	8004b38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d06b      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d149      	bne.n	8004a98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe fe82 	bl	8003718 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe fe7e 	bl	8003718 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e087      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fe fe52 	bl	8003718 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe fe4e 	bl	8003718 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e057      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x478>
 8004a96:	e04f      	b.n	8004b38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fe38 	bl	8003718 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fe fe34 	bl	8003718 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e03d      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x4ac>
 8004aca:	e035      	b.n	8004b38 <HAL_RCC_OscConfig+0x538>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x544>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d028      	beq.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d121      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d11a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0d0      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b6a      	ldr	r3, [pc, #424]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 020f 	bic.w	r2, r3, #15
 8004b76:	4965      	ldr	r1, [pc, #404]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0b8      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	494d      	ldr	r1, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d040      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d115      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e073      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06b      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0203 	bic.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4936      	ldr	r1, [pc, #216]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fe fd6c 	bl	8003718 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fe fd68 	bl	8003718 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e053      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 020c 	and.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1eb      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d210      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 020f 	bic.w	r2, r3, #15
 8004c82:	4922      	ldr	r1, [pc, #136]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e032      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4916      	ldr	r1, [pc, #88]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cda:	f000 f821 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x1cc>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_RCC_ClockConfig+0x1d0>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1d4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fcc8 	bl	8003690 <HAL_InitTick>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08007928 	.word	0x08007928
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	20000004 	.word	0x20000004

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d24:	b094      	sub	sp, #80	; 0x50
 8004d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	2300      	movs	r3, #0
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d38:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 030c 	and.w	r3, r3, #12
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d00d      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x40>
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	f200 80e1 	bhi.w	8004f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d003      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d52:	e0db      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d54:	4b73      	ldr	r3, [pc, #460]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d58:	e0db      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5e:	e0d8      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d60:	4b6f      	ldr	r3, [pc, #444]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d063      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d76:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	f04f 0000 	mov.w	r0, #0
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	0159      	lsls	r1, r3, #5
 8004da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da4:	0150      	lsls	r0, r2, #5
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4621      	mov	r1, r4
 8004dac:	1a51      	subs	r1, r2, r1
 8004dae:	6139      	str	r1, [r7, #16]
 8004db0:	4629      	mov	r1, r5
 8004db2:	eb63 0301 	sbc.w	r3, r3, r1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	018b      	lsls	r3, r1, #6
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dce:	4651      	mov	r1, sl
 8004dd0:	018a      	lsls	r2, r1, #6
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd8:	4659      	mov	r1, fp
 8004dda:	eb63 0901 	sbc.w	r9, r3, r1
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df2:	4690      	mov	r8, r2
 8004df4:	4699      	mov	r9, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	eb18 0303 	adds.w	r3, r8, r3
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	462b      	mov	r3, r5
 8004e00:	eb49 0303 	adc.w	r3, r9, r3
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e12:	4629      	mov	r1, r5
 8004e14:	024b      	lsls	r3, r1, #9
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	024a      	lsls	r2, r1, #9
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e30:	f7fb fe2c 	bl	8000a8c <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	e058      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b38      	ldr	r3, [pc, #224]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	4611      	mov	r1, r2
 8004e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	0159      	lsls	r1, r3, #5
 8004e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6a:	0150      	lsls	r0, r2, #5
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4641      	mov	r1, r8
 8004e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e76:	4649      	mov	r1, r9
 8004e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e90:	ebb2 040a 	subs.w	r4, r2, sl
 8004e94:	eb63 050b 	sbc.w	r5, r3, fp
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	00eb      	lsls	r3, r5, #3
 8004ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea6:	00e2      	lsls	r2, r4, #3
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	18e3      	adds	r3, r4, r3
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	eb45 0303 	adc.w	r3, r5, r3
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	028b      	lsls	r3, r1, #10
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	028a      	lsls	r2, r1, #10
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee4:	f7fb fdd2 	bl	8000a8c <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	3301      	adds	r3, #1
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3750      	adds	r7, #80	; 0x50
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	00f42400 	.word	0x00f42400
 8004f28:	007a1200 	.word	0x007a1200

08004f2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000000 	.word	0x20000000

08004f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f48:	f7ff fff0 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	0a9b      	lsrs	r3, r3, #10
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023800 	.word	0x40023800
 8004f68:	08007938 	.word	0x08007938

08004f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f70:	f7ff ffdc 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0b5b      	lsrs	r3, r3, #13
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	08007938 	.word	0x08007938

08004f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fbc:	4b69      	ldr	r3, [pc, #420]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a68      	ldr	r2, [pc, #416]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fc6:	6093      	str	r3, [r2, #8]
 8004fc8:	4b66      	ldr	r3, [pc, #408]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	4964      	ldr	r1, [pc, #400]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fee:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	4959      	ldr	r1, [pc, #356]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500c:	d101      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800502a:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	494a      	ldr	r1, [pc, #296]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d101      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800504a:	2301      	movs	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 808b 	beq.w	800518e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b3a      	ldr	r3, [pc, #232]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	4a39      	ldr	r2, [pc, #228]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6413      	str	r3, [r2, #64]	; 0x40
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a34      	ldr	r2, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fe fb3c 	bl	8003718 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a4:	f7fe fb38 	bl	8003718 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e357      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c2:	4b28      	ldr	r3, [pc, #160]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d035      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d02e      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f6:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005102:	4a18      	ldr	r2, [pc, #96]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005108:	4b16      	ldr	r3, [pc, #88]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d114      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe fb00 	bl	8003718 <HAL_GetTick>
 8005118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	e00a      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fafc 	bl	8003718 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e319      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ee      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514a:	d111      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800515a:	400b      	ands	r3, r1
 800515c:	4901      	ldr	r1, [pc, #4]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
 8005162:	e00b      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005164:	40023800 	.word	0x40023800
 8005168:	40007000 	.word	0x40007000
 800516c:	0ffffcff 	.word	0x0ffffcff
 8005170:	4baa      	ldr	r3, [pc, #680]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4aa9      	ldr	r2, [pc, #676]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	4ba7      	ldr	r3, [pc, #668]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005188:	49a4      	ldr	r1, [pc, #656]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518a:	4313      	orrs	r3, r2
 800518c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519a:	4ba0      	ldr	r3, [pc, #640]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	4a9e      	ldr	r2, [pc, #632]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051aa:	4b9c      	ldr	r3, [pc, #624]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	4999      	ldr	r1, [pc, #612]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c8:	4b94      	ldr	r3, [pc, #592]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d6:	4991      	ldr	r1, [pc, #580]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ea:	4b8c      	ldr	r3, [pc, #560]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f8:	4988      	ldr	r1, [pc, #544]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800520c:	4b83      	ldr	r3, [pc, #524]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	4980      	ldr	r1, [pc, #512]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800522e:	4b7b      	ldr	r3, [pc, #492]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4977      	ldr	r1, [pc, #476]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005250:	4b72      	ldr	r3, [pc, #456]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	f023 0203 	bic.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	496f      	ldr	r1, [pc, #444]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f023 020c 	bic.w	r2, r3, #12
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	4966      	ldr	r1, [pc, #408]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	495e      	ldr	r1, [pc, #376]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052b6:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	4955      	ldr	r1, [pc, #340]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052d8:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	494d      	ldr	r1, [pc, #308]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052fa:	4b48      	ldr	r3, [pc, #288]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	4944      	ldr	r1, [pc, #272]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800531c:	4b3f      	ldr	r3, [pc, #252]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	493c      	ldr	r1, [pc, #240]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534c:	4933      	ldr	r1, [pc, #204]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005360:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536e:	492b      	ldr	r1, [pc, #172]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005390:	4922      	ldr	r1, [pc, #136]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c2:	4b16      	ldr	r3, [pc, #88]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	4912      	ldr	r1, [pc, #72]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f4:	4909      	ldr	r1, [pc, #36]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d006      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80d9 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a01      	ldr	r2, [pc, #4]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800541a:	e001      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800541c:	40023800 	.word	0x40023800
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fe f979 	bl	8003718 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542a:	f7fe f975 	bl	8003718 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e194      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800543c:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d021      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800546a:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	0e1b      	lsrs	r3, r3, #24
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	019a      	lsls	r2, r3, #6
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	071b      	lsls	r3, r3, #28
 8005490:	4957      	ldr	r1, [pc, #348]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02e      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c2:	d129      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054c4:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	0f1b      	lsrs	r3, r3, #28
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	071b      	lsls	r3, r3, #28
 80054f8:	493d      	ldr	r1, [pc, #244]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005506:	f023 021f 	bic.w	r2, r3, #31
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	3b01      	subs	r3, #1
 8005510:	4937      	ldr	r1, [pc, #220]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01d      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552a:	0e1b      	lsrs	r3, r3, #24
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005532:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	0f1b      	lsrs	r3, r3, #28
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	019a      	lsls	r2, r3, #6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	431a      	orrs	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	071b      	lsls	r3, r3, #28
 8005558:	4925      	ldr	r1, [pc, #148]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d011      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	019a      	lsls	r2, r3, #6
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	071b      	lsls	r3, r3, #28
 8005588:	4919      	ldr	r1, [pc, #100]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800559a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fe f8bc 	bl	8003718 <HAL_GetTick>
 80055a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a4:	f7fe f8b8 	bl	8003718 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0d7      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	f040 80cd 	bne.w	8005764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d6:	f7fe f89f 	bl	8003718 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055de:	f7fe f89b 	bl	8003718 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d903      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0ba      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80055f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055f4:	4b5e      	ldr	r3, [pc, #376]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005600:	d0ed      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d12a      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800562a:	4b51      	ldr	r3, [pc, #324]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005638:	4b4d      	ldr	r3, [pc, #308]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	0f1b      	lsrs	r3, r3, #28
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	019a      	lsls	r2, r3, #6
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	4944      	ldr	r1, [pc, #272]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005666:	4b42      	ldr	r3, [pc, #264]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	3b01      	subs	r3, #1
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	493d      	ldr	r1, [pc, #244]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d022      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d11d      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056a4:	4b32      	ldr	r3, [pc, #200]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	0f1b      	lsrs	r3, r3, #28
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	019a      	lsls	r2, r3, #6
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	4929      	ldr	r1, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d028      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056ec:	4b20      	ldr	r3, [pc, #128]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	019a      	lsls	r2, r3, #6
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	431a      	orrs	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4911      	ldr	r1, [pc, #68]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd ffec 	bl	8003718 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005744:	f7fd ffe8 	bl	8003718 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e007      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005762:	d1ef      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800

08005774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e040      	b.n	8005808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fdf2 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f82c 	bl	8005810 <UART_SetConfig>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e022      	b.n	8005808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa84 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb0b 	bl	8005e1c <UART_CheckIdleState>
 8005806:	4603      	mov	r3, r0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4ba6      	ldr	r3, [pc, #664]	; (8005ad4 <UART_SetConfig+0x2c4>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	430b      	orrs	r3, r1
 8005846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a94      	ldr	r2, [pc, #592]	; (8005ad8 <UART_SetConfig+0x2c8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d120      	bne.n	80058ce <UART_SetConfig+0xbe>
 800588c:	4b93      	ldr	r3, [pc, #588]	; (8005adc <UART_SetConfig+0x2cc>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d816      	bhi.n	80058c8 <UART_SetConfig+0xb8>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x90>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058b7 	.word	0x080058b7
 80058ac:	080058c3 	.word	0x080058c3
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e150      	b.n	8005b58 <UART_SetConfig+0x348>
 80058b6:	2302      	movs	r3, #2
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e14d      	b.n	8005b58 <UART_SetConfig+0x348>
 80058bc:	2304      	movs	r3, #4
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e14a      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e147      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e144      	b.n	8005b58 <UART_SetConfig+0x348>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a83      	ldr	r2, [pc, #524]	; (8005ae0 <UART_SetConfig+0x2d0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d132      	bne.n	800593e <UART_SetConfig+0x12e>
 80058d8:	4b80      	ldr	r3, [pc, #512]	; (8005adc <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d828      	bhi.n	8005938 <UART_SetConfig+0x128>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0xdc>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005939 	.word	0x08005939
 800590c:	08005927 	.word	0x08005927
 8005910:	08005939 	.word	0x08005939
 8005914:	08005939 	.word	0x08005939
 8005918:	08005939 	.word	0x08005939
 800591c:	08005933 	.word	0x08005933
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e118      	b.n	8005b58 <UART_SetConfig+0x348>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e115      	b.n	8005b58 <UART_SetConfig+0x348>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e112      	b.n	8005b58 <UART_SetConfig+0x348>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e10f      	b.n	8005b58 <UART_SetConfig+0x348>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e10c      	b.n	8005b58 <UART_SetConfig+0x348>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a68      	ldr	r2, [pc, #416]	; (8005ae4 <UART_SetConfig+0x2d4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d120      	bne.n	800598a <UART_SetConfig+0x17a>
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <UART_SetConfig+0x2cc>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d013      	beq.n	800597e <UART_SetConfig+0x16e>
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x174>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d009      	beq.n	8005972 <UART_SetConfig+0x162>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d810      	bhi.n	8005984 <UART_SetConfig+0x174>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x15c>
 8005966:	2b10      	cmp	r3, #16
 8005968:	d006      	beq.n	8005978 <UART_SetConfig+0x168>
 800596a:	e00b      	b.n	8005984 <UART_SetConfig+0x174>
 800596c:	2300      	movs	r3, #0
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0f2      	b.n	8005b58 <UART_SetConfig+0x348>
 8005972:	2302      	movs	r3, #2
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e0ef      	b.n	8005b58 <UART_SetConfig+0x348>
 8005978:	2304      	movs	r3, #4
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0ec      	b.n	8005b58 <UART_SetConfig+0x348>
 800597e:	2308      	movs	r3, #8
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e0e9      	b.n	8005b58 <UART_SetConfig+0x348>
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0e6      	b.n	8005b58 <UART_SetConfig+0x348>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <UART_SetConfig+0x2d8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d120      	bne.n	80059d6 <UART_SetConfig+0x1c6>
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <UART_SetConfig+0x2cc>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800599e:	2bc0      	cmp	r3, #192	; 0xc0
 80059a0:	d013      	beq.n	80059ca <UART_SetConfig+0x1ba>
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d814      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d009      	beq.n	80059be <UART_SetConfig+0x1ae>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d810      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <UART_SetConfig+0x1a8>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d006      	beq.n	80059c4 <UART_SetConfig+0x1b4>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x1c0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e0cc      	b.n	8005b58 <UART_SetConfig+0x348>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e0c9      	b.n	8005b58 <UART_SetConfig+0x348>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e0c6      	b.n	8005b58 <UART_SetConfig+0x348>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e0c3      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e0c0      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a44      	ldr	r2, [pc, #272]	; (8005aec <UART_SetConfig+0x2dc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x21c>
 80059e0:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <UART_SetConfig+0x2cc>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d017      	beq.n	8005a20 <UART_SetConfig+0x210>
 80059f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f4:	d817      	bhi.n	8005a26 <UART_SetConfig+0x216>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	d00b      	beq.n	8005a14 <UART_SetConfig+0x204>
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a00:	d811      	bhi.n	8005a26 <UART_SetConfig+0x216>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <UART_SetConfig+0x1fe>
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d006      	beq.n	8005a1a <UART_SetConfig+0x20a>
 8005a0c:	e00b      	b.n	8005a26 <UART_SetConfig+0x216>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0a1      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e09e      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e09b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a20:	2308      	movs	r3, #8
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e098      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a26:	2310      	movs	r3, #16
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e095      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <UART_SetConfig+0x2e0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d125      	bne.n	8005a82 <UART_SetConfig+0x272>
 8005a36:	4b29      	ldr	r3, [pc, #164]	; (8005adc <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a44:	d017      	beq.n	8005a76 <UART_SetConfig+0x266>
 8005a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4a:	d817      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a50:	d00b      	beq.n	8005a6a <UART_SetConfig+0x25a>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d811      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <UART_SetConfig+0x254>
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d006      	beq.n	8005a70 <UART_SetConfig+0x260>
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x26c>
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e076      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e073      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e070      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e06d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e06a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <UART_SetConfig+0x2e4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d138      	bne.n	8005afe <UART_SetConfig+0x2ee>
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a9a:	d017      	beq.n	8005acc <UART_SetConfig+0x2bc>
 8005a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa0:	d82a      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d00b      	beq.n	8005ac0 <UART_SetConfig+0x2b0>
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d824      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <UART_SetConfig+0x2aa>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d006      	beq.n	8005ac6 <UART_SetConfig+0x2b6>
 8005ab8:	e01e      	b.n	8005af8 <UART_SetConfig+0x2e8>
 8005aba:	2300      	movs	r3, #0
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e04b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e048      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e045      	b.n	8005b58 <UART_SetConfig+0x348>
 8005acc:	2308      	movs	r3, #8
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e042      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ad2:	bf00      	nop
 8005ad4:	efff69f3 	.word	0xefff69f3
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	40004800 	.word	0x40004800
 8005ae8:	40004c00 	.word	0x40004c00
 8005aec:	40005000 	.word	0x40005000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	40007800 	.word	0x40007800
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e02c      	b.n	8005b58 <UART_SetConfig+0x348>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a72      	ldr	r2, [pc, #456]	; (8005ccc <UART_SetConfig+0x4bc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x344>
 8005b08:	4b71      	ldr	r3, [pc, #452]	; (8005cd0 <UART_SetConfig+0x4c0>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b16:	d017      	beq.n	8005b48 <UART_SetConfig+0x338>
 8005b18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b1c:	d817      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d00b      	beq.n	8005b3c <UART_SetConfig+0x32c>
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b28:	d811      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <UART_SetConfig+0x326>
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b32:	d006      	beq.n	8005b42 <UART_SetConfig+0x332>
 8005b34:	e00b      	b.n	8005b4e <UART_SetConfig+0x33e>
 8005b36:	2300      	movs	r3, #0
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e00d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e00a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b42:	2304      	movs	r3, #4
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e007      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e001      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b54:	2310      	movs	r3, #16
 8005b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d15b      	bne.n	8005c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d828      	bhi.n	8005bba <UART_SetConfig+0x3aa>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x360>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7ff f9d6 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8005b98:	61b8      	str	r0, [r7, #24]
        break;
 8005b9a:	e013      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7ff f9e6 	bl	8004f6c <HAL_RCC_GetPCLK2Freq>
 8005ba0:	61b8      	str	r0, [r7, #24]
        break;
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <UART_SetConfig+0x4c4>)
 8005ba6:	61bb      	str	r3, [r7, #24]
        break;
 8005ba8:	e00c      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7ff f8b9 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8005bae:	61b8      	str	r0, [r7, #24]
        break;
 8005bb0:	e008      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb6:	61bb      	str	r3, [r7, #24]
        break;
 8005bb8:	e004      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8005bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d074      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x404>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	89fa      	ldrh	r2, [r7, #14]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e04f      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77bb      	strb	r3, [r7, #30]
 8005c18:	e04c      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d828      	bhi.n	8005c72 <UART_SetConfig+0x462>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x418>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7ff f97a 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61b8      	str	r0, [r7, #24]
        break;
 8005c52:	e013      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7ff f98a 	bl	8004f6c <HAL_RCC_GetPCLK2Freq>
 8005c58:	61b8      	str	r0, [r7, #24]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <UART_SetConfig+0x4c4>)
 8005c5e:	61bb      	str	r3, [r7, #24]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7ff f85d 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8005c66:	61b8      	str	r0, [r7, #24]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77bb      	strb	r3, [r7, #30]
        break;
 8005c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085a      	lsrs	r2, r3, #1
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d909      	bls.n	8005cb0 <UART_SetConfig+0x4a0>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca2:	d205      	bcs.n	8005cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e001      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40007c00 	.word	0x40007c00
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	00f42400 	.word	0x00f42400

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fd fc74 	bl	8003718 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10e      	bne.n	8005e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f81b 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e011      	b.n	8005e82 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b09c      	sub	sp, #112	; 0x70
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9a:	e0a7      	b.n	8005fec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	f000 80a3 	beq.w	8005fec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fd fc37 	bl	8003718 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8005eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13f      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005edc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e068      	b.n	800600e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d050      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f58:	d148      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e6      	bne.n	8005f64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fb6:	623a      	str	r2, [r7, #32]
 8005fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	69f9      	ldr	r1, [r7, #28]
 8005fbc:	6a3a      	ldr	r2, [r7, #32]
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e010      	b.n	800600e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	429a      	cmp	r2, r3
 8006008:	f43f af48 	beq.w	8005e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3770      	adds	r7, #112	; 0x70
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006018:	b084      	sub	sp, #16
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	f107 001c 	add.w	r0, r7, #28
 8006026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2b01      	cmp	r3, #1
 800602e:	d120      	bne.n	8006072 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <USB_CoreInit+0xac>)
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa96 	bl	8006598 <USB_CoreReset>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e010      	b.n	8006094 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa8a 	bl	8006598 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10b      	bne.n	80060b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f043 0206 	orr.w	r2, r3, #6
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f043 0220 	orr.w	r2, r3, #32
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060be:	b004      	add	sp, #16
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	ffbdffbf 	.word	0xffbdffbf

080060c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d115      	bne.n	8006138 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006118:	2001      	movs	r0, #1
 800611a:	f7fd fb09 	bl	8003730 <HAL_Delay>
      ms++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fa29 	bl	800657c <USB_GetMode>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d01e      	beq.n	800616e <USB_SetCurrentMode+0x84>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b31      	cmp	r3, #49	; 0x31
 8006134:	d9f0      	bls.n	8006118 <USB_SetCurrentMode+0x2e>
 8006136:	e01a      	b.n	800616e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d115      	bne.n	800616a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800614a:	2001      	movs	r0, #1
 800614c:	f7fd faf0 	bl	8003730 <HAL_Delay>
      ms++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa10 	bl	800657c <USB_GetMode>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <USB_SetCurrentMode+0x84>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b31      	cmp	r3, #49	; 0x31
 8006166:	d9f0      	bls.n	800614a <USB_SetCurrentMode+0x60>
 8006168:	e001      	b.n	800616e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e005      	b.n	800617a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b32      	cmp	r3, #50	; 0x32
 8006172:	d101      	bne.n	8006178 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e009      	b.n	80061b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3340      	adds	r3, #64	; 0x40
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0e      	cmp	r3, #14
 80061bc:	d9f2      	bls.n	80061a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11c      	bne.n	80061fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d2:	f043 0302 	orr.w	r3, r3, #2
 80061d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e005      	b.n	800620a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621c:	4619      	mov	r1, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	461a      	mov	r2, r3
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10c      	bne.n	800624a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006236:	2100      	movs	r1, #0
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f965 	bl	8006508 <USB_SetDevSpeed>
 800623e:	e008      	b.n	8006252 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f960 	bl	8006508 <USB_SetDevSpeed>
 8006248:	e003      	b.n	8006252 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800624a:	2103      	movs	r1, #3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f95b 	bl	8006508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006252:	2110      	movs	r1, #16
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8f3 	bl	8006440 <USB_FlushTxFifo>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f91f 	bl	80064a8 <USB_FlushRxFifo>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e043      	b.n	8006326 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d118      	bne.n	80062e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e013      	b.n	80062fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e008      	b.n	80062fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	461a      	mov	r2, r3
 800631a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800631e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3301      	adds	r3, #1
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3b7      	bcc.n	800629e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e043      	b.n	80063bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634a:	d118      	bne.n	800637e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e008      	b.n	8006390 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d3b7      	bcc.n	8006334 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <USB_DevInit+0x2b4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d105      	bne.n	8006428 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <USB_DevInit+0x2b8>)
 8006422:	4313      	orrs	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006434:	b004      	add	sp, #16
 8006436:	4770      	bx	lr
 8006438:	803c3800 	.word	0x803c3800
 800643c:	40000004 	.word	0x40000004

08006440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <USB_FlushTxFifo+0x64>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e01b      	b.n	8006498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	daf2      	bge.n	800644e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	019b      	lsls	r3, r3, #6
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <USB_FlushTxFifo+0x64>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e006      	b.n	8006498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d0f0      	beq.n	8006478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <USB_FlushRxFifo+0x5c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e018      	b.n	80064f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	daf2      	bge.n	80064b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2210      	movs	r2, #16
 80064d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <USB_FlushRxFifo+0x5c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e006      	b.n	80064f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d0f0      	beq.n	80064d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	00030d40 	.word	0x00030d40

08006508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0301 	and.w	r3, r3, #1
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <USB_CoreReset+0x64>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e01b      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	daf2      	bge.n	80065a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <USB_CoreReset+0x64>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d0f0      	beq.n	80065ce <USB_CoreReset+0x36>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	00030d40 	.word	0x00030d40

08006600 <_ZdlPvj>:
 8006600:	f000 b817 	b.w	8006632 <_ZdlPv>

08006604 <_Znwj>:
 8006604:	2801      	cmp	r0, #1
 8006606:	bf38      	it	cc
 8006608:	2001      	movcc	r0, #1
 800660a:	b510      	push	{r4, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f84c 	bl	80066ac <malloc>
 8006614:	b930      	cbnz	r0, 8006624 <_Znwj+0x20>
 8006616:	f000 f80f 	bl	8006638 <_ZSt15get_new_handlerv>
 800661a:	b908      	cbnz	r0, 8006620 <_Znwj+0x1c>
 800661c:	f000 f814 	bl	8006648 <abort>
 8006620:	4780      	blx	r0
 8006622:	e7f4      	b.n	800660e <_Znwj+0xa>
 8006624:	bd10      	pop	{r4, pc}

08006626 <_ZSt17__throw_bad_allocv>:
 8006626:	b508      	push	{r3, lr}
 8006628:	f000 f80e 	bl	8006648 <abort>

0800662c <_ZSt20__throw_length_errorPKc>:
 800662c:	b508      	push	{r3, lr}
 800662e:	f000 f80b 	bl	8006648 <abort>

08006632 <_ZdlPv>:
 8006632:	f000 b843 	b.w	80066bc <free>
	...

08006638 <_ZSt15get_new_handlerv>:
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <_ZSt15get_new_handlerv+0xc>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	f3bf 8f5b 	dmb	ish
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000854 	.word	0x20000854

08006648 <abort>:
 8006648:	b508      	push	{r3, lr}
 800664a:	2006      	movs	r0, #6
 800664c:	f000 fa44 	bl	8006ad8 <raise>
 8006650:	2001      	movs	r0, #1
 8006652:	f7fa ffb1 	bl	80015b8 <_exit>
	...

08006658 <__errno>:
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <__errno+0x8>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	2000000c 	.word	0x2000000c

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	; (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	; (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	; (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	; (80066a8 <__libc_init_array+0x44>)
 8006678:	f001 f900 	bl	800787c <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	08007ad0 	.word	0x08007ad0
 80066a0:	08007ad0 	.word	0x08007ad0
 80066a4:	08007ad0 	.word	0x08007ad0
 80066a8:	08007ad4 	.word	0x08007ad4

080066ac <malloc>:
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <malloc+0xc>)
 80066ae:	4601      	mov	r1, r0
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	f000 b899 	b.w	80067e8 <_malloc_r>
 80066b6:	bf00      	nop
 80066b8:	2000000c 	.word	0x2000000c

080066bc <free>:
 80066bc:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <free+0xc>)
 80066be:	4601      	mov	r1, r0
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f000 b825 	b.w	8006710 <_free_r>
 80066c6:	bf00      	nop
 80066c8:	2000000c 	.word	0x2000000c

080066cc <memmove>:
 80066cc:	4288      	cmp	r0, r1
 80066ce:	b510      	push	{r4, lr}
 80066d0:	eb01 0402 	add.w	r4, r1, r2
 80066d4:	d902      	bls.n	80066dc <memmove+0x10>
 80066d6:	4284      	cmp	r4, r0
 80066d8:	4623      	mov	r3, r4
 80066da:	d807      	bhi.n	80066ec <memmove+0x20>
 80066dc:	1e43      	subs	r3, r0, #1
 80066de:	42a1      	cmp	r1, r4
 80066e0:	d008      	beq.n	80066f4 <memmove+0x28>
 80066e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ea:	e7f8      	b.n	80066de <memmove+0x12>
 80066ec:	4402      	add	r2, r0
 80066ee:	4601      	mov	r1, r0
 80066f0:	428a      	cmp	r2, r1
 80066f2:	d100      	bne.n	80066f6 <memmove+0x2a>
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066fe:	e7f7      	b.n	80066f0 <memmove+0x24>

08006700 <memset>:
 8006700:	4402      	add	r2, r0
 8006702:	4603      	mov	r3, r0
 8006704:	4293      	cmp	r3, r2
 8006706:	d100      	bne.n	800670a <memset+0xa>
 8006708:	4770      	bx	lr
 800670a:	f803 1b01 	strb.w	r1, [r3], #1
 800670e:	e7f9      	b.n	8006704 <memset+0x4>

08006710 <_free_r>:
 8006710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006712:	2900      	cmp	r1, #0
 8006714:	d044      	beq.n	80067a0 <_free_r+0x90>
 8006716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800671a:	9001      	str	r0, [sp, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f1a1 0404 	sub.w	r4, r1, #4
 8006722:	bfb8      	it	lt
 8006724:	18e4      	addlt	r4, r4, r3
 8006726:	f000 fd03 	bl	8007130 <__malloc_lock>
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <_free_r+0x94>)
 800672c:	9801      	ldr	r0, [sp, #4]
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	b933      	cbnz	r3, 8006740 <_free_r+0x30>
 8006732:	6063      	str	r3, [r4, #4]
 8006734:	6014      	str	r4, [r2, #0]
 8006736:	b003      	add	sp, #12
 8006738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800673c:	f000 bcfe 	b.w	800713c <__malloc_unlock>
 8006740:	42a3      	cmp	r3, r4
 8006742:	d908      	bls.n	8006756 <_free_r+0x46>
 8006744:	6825      	ldr	r5, [r4, #0]
 8006746:	1961      	adds	r1, r4, r5
 8006748:	428b      	cmp	r3, r1
 800674a:	bf01      	itttt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	1949      	addeq	r1, r1, r5
 8006752:	6021      	streq	r1, [r4, #0]
 8006754:	e7ed      	b.n	8006732 <_free_r+0x22>
 8006756:	461a      	mov	r2, r3
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	b10b      	cbz	r3, 8006760 <_free_r+0x50>
 800675c:	42a3      	cmp	r3, r4
 800675e:	d9fa      	bls.n	8006756 <_free_r+0x46>
 8006760:	6811      	ldr	r1, [r2, #0]
 8006762:	1855      	adds	r5, r2, r1
 8006764:	42a5      	cmp	r5, r4
 8006766:	d10b      	bne.n	8006780 <_free_r+0x70>
 8006768:	6824      	ldr	r4, [r4, #0]
 800676a:	4421      	add	r1, r4
 800676c:	1854      	adds	r4, r2, r1
 800676e:	42a3      	cmp	r3, r4
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	d1e0      	bne.n	8006736 <_free_r+0x26>
 8006774:	681c      	ldr	r4, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	6053      	str	r3, [r2, #4]
 800677a:	4421      	add	r1, r4
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	e7da      	b.n	8006736 <_free_r+0x26>
 8006780:	d902      	bls.n	8006788 <_free_r+0x78>
 8006782:	230c      	movs	r3, #12
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	e7d6      	b.n	8006736 <_free_r+0x26>
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	1961      	adds	r1, r4, r5
 800678c:	428b      	cmp	r3, r1
 800678e:	bf04      	itt	eq
 8006790:	6819      	ldreq	r1, [r3, #0]
 8006792:	685b      	ldreq	r3, [r3, #4]
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	bf04      	itt	eq
 8006798:	1949      	addeq	r1, r1, r5
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	6054      	str	r4, [r2, #4]
 800679e:	e7ca      	b.n	8006736 <_free_r+0x26>
 80067a0:	b003      	add	sp, #12
 80067a2:	bd30      	pop	{r4, r5, pc}
 80067a4:	20000858 	.word	0x20000858

080067a8 <sbrk_aligned>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	4e0e      	ldr	r6, [pc, #56]	; (80067e4 <sbrk_aligned+0x3c>)
 80067ac:	460c      	mov	r4, r1
 80067ae:	6831      	ldr	r1, [r6, #0]
 80067b0:	4605      	mov	r5, r0
 80067b2:	b911      	cbnz	r1, 80067ba <sbrk_aligned+0x12>
 80067b4:	f000 f958 	bl	8006a68 <_sbrk_r>
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 f953 	bl	8006a68 <_sbrk_r>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d00a      	beq.n	80067dc <sbrk_aligned+0x34>
 80067c6:	1cc4      	adds	r4, r0, #3
 80067c8:	f024 0403 	bic.w	r4, r4, #3
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d007      	beq.n	80067e0 <sbrk_aligned+0x38>
 80067d0:	1a21      	subs	r1, r4, r0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f948 	bl	8006a68 <_sbrk_r>
 80067d8:	3001      	adds	r0, #1
 80067da:	d101      	bne.n	80067e0 <sbrk_aligned+0x38>
 80067dc:	f04f 34ff 	mov.w	r4, #4294967295
 80067e0:	4620      	mov	r0, r4
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	2000085c 	.word	0x2000085c

080067e8 <_malloc_r>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	1ccd      	adds	r5, r1, #3
 80067ee:	f025 0503 	bic.w	r5, r5, #3
 80067f2:	3508      	adds	r5, #8
 80067f4:	2d0c      	cmp	r5, #12
 80067f6:	bf38      	it	cc
 80067f8:	250c      	movcc	r5, #12
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	4607      	mov	r7, r0
 80067fe:	db01      	blt.n	8006804 <_malloc_r+0x1c>
 8006800:	42a9      	cmp	r1, r5
 8006802:	d905      	bls.n	8006810 <_malloc_r+0x28>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	2600      	movs	r6, #0
 800680a:	4630      	mov	r0, r6
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	4e2e      	ldr	r6, [pc, #184]	; (80068cc <_malloc_r+0xe4>)
 8006812:	f000 fc8d 	bl	8007130 <__malloc_lock>
 8006816:	6833      	ldr	r3, [r6, #0]
 8006818:	461c      	mov	r4, r3
 800681a:	bb34      	cbnz	r4, 800686a <_malloc_r+0x82>
 800681c:	4629      	mov	r1, r5
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ffc2 	bl	80067a8 <sbrk_aligned>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	4604      	mov	r4, r0
 8006828:	d14d      	bne.n	80068c6 <_malloc_r+0xde>
 800682a:	6834      	ldr	r4, [r6, #0]
 800682c:	4626      	mov	r6, r4
 800682e:	2e00      	cmp	r6, #0
 8006830:	d140      	bne.n	80068b4 <_malloc_r+0xcc>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4631      	mov	r1, r6
 8006836:	4638      	mov	r0, r7
 8006838:	eb04 0803 	add.w	r8, r4, r3
 800683c:	f000 f914 	bl	8006a68 <_sbrk_r>
 8006840:	4580      	cmp	r8, r0
 8006842:	d13a      	bne.n	80068ba <_malloc_r+0xd2>
 8006844:	6821      	ldr	r1, [r4, #0]
 8006846:	3503      	adds	r5, #3
 8006848:	1a6d      	subs	r5, r5, r1
 800684a:	f025 0503 	bic.w	r5, r5, #3
 800684e:	3508      	adds	r5, #8
 8006850:	2d0c      	cmp	r5, #12
 8006852:	bf38      	it	cc
 8006854:	250c      	movcc	r5, #12
 8006856:	4629      	mov	r1, r5
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ffa5 	bl	80067a8 <sbrk_aligned>
 800685e:	3001      	adds	r0, #1
 8006860:	d02b      	beq.n	80068ba <_malloc_r+0xd2>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	442b      	add	r3, r5
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	e00e      	b.n	8006888 <_malloc_r+0xa0>
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	1b52      	subs	r2, r2, r5
 800686e:	d41e      	bmi.n	80068ae <_malloc_r+0xc6>
 8006870:	2a0b      	cmp	r2, #11
 8006872:	d916      	bls.n	80068a2 <_malloc_r+0xba>
 8006874:	1961      	adds	r1, r4, r5
 8006876:	42a3      	cmp	r3, r4
 8006878:	6025      	str	r5, [r4, #0]
 800687a:	bf18      	it	ne
 800687c:	6059      	strne	r1, [r3, #4]
 800687e:	6863      	ldr	r3, [r4, #4]
 8006880:	bf08      	it	eq
 8006882:	6031      	streq	r1, [r6, #0]
 8006884:	5162      	str	r2, [r4, r5]
 8006886:	604b      	str	r3, [r1, #4]
 8006888:	4638      	mov	r0, r7
 800688a:	f104 060b 	add.w	r6, r4, #11
 800688e:	f000 fc55 	bl	800713c <__malloc_unlock>
 8006892:	f026 0607 	bic.w	r6, r6, #7
 8006896:	1d23      	adds	r3, r4, #4
 8006898:	1af2      	subs	r2, r6, r3
 800689a:	d0b6      	beq.n	800680a <_malloc_r+0x22>
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	50a3      	str	r3, [r4, r2]
 80068a0:	e7b3      	b.n	800680a <_malloc_r+0x22>
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	bf0c      	ite	eq
 80068a8:	6032      	streq	r2, [r6, #0]
 80068aa:	605a      	strne	r2, [r3, #4]
 80068ac:	e7ec      	b.n	8006888 <_malloc_r+0xa0>
 80068ae:	4623      	mov	r3, r4
 80068b0:	6864      	ldr	r4, [r4, #4]
 80068b2:	e7b2      	b.n	800681a <_malloc_r+0x32>
 80068b4:	4634      	mov	r4, r6
 80068b6:	6876      	ldr	r6, [r6, #4]
 80068b8:	e7b9      	b.n	800682e <_malloc_r+0x46>
 80068ba:	230c      	movs	r3, #12
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4638      	mov	r0, r7
 80068c0:	f000 fc3c 	bl	800713c <__malloc_unlock>
 80068c4:	e7a1      	b.n	800680a <_malloc_r+0x22>
 80068c6:	6025      	str	r5, [r4, #0]
 80068c8:	e7de      	b.n	8006888 <_malloc_r+0xa0>
 80068ca:	bf00      	nop
 80068cc:	20000858 	.word	0x20000858

080068d0 <iprintf>:
 80068d0:	b40f      	push	{r0, r1, r2, r3}
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <iprintf+0x2c>)
 80068d4:	b513      	push	{r0, r1, r4, lr}
 80068d6:	681c      	ldr	r4, [r3, #0]
 80068d8:	b124      	cbz	r4, 80068e4 <iprintf+0x14>
 80068da:	69a3      	ldr	r3, [r4, #24]
 80068dc:	b913      	cbnz	r3, 80068e4 <iprintf+0x14>
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fb0e 	bl	8006f00 <__sinit>
 80068e4:	ab05      	add	r3, sp, #20
 80068e6:	9a04      	ldr	r2, [sp, #16]
 80068e8:	68a1      	ldr	r1, [r4, #8]
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fc55 	bl	800719c <_vfiprintf_r>
 80068f2:	b002      	add	sp, #8
 80068f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f8:	b004      	add	sp, #16
 80068fa:	4770      	bx	lr
 80068fc:	2000000c 	.word	0x2000000c

08006900 <_puts_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	460e      	mov	r6, r1
 8006904:	4605      	mov	r5, r0
 8006906:	b118      	cbz	r0, 8006910 <_puts_r+0x10>
 8006908:	6983      	ldr	r3, [r0, #24]
 800690a:	b90b      	cbnz	r3, 8006910 <_puts_r+0x10>
 800690c:	f000 faf8 	bl	8006f00 <__sinit>
 8006910:	69ab      	ldr	r3, [r5, #24]
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	b913      	cbnz	r3, 800691c <_puts_r+0x1c>
 8006916:	4628      	mov	r0, r5
 8006918:	f000 faf2 	bl	8006f00 <__sinit>
 800691c:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <_puts_r+0xd0>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d120      	bne.n	8006964 <_puts_r+0x64>
 8006922:	686c      	ldr	r4, [r5, #4]
 8006924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d405      	bmi.n	8006936 <_puts_r+0x36>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	0598      	lsls	r0, r3, #22
 800692e:	d402      	bmi.n	8006936 <_puts_r+0x36>
 8006930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006932:	f000 fb95 	bl	8007060 <__retarget_lock_acquire_recursive>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	0719      	lsls	r1, r3, #28
 800693a:	d51d      	bpl.n	8006978 <_puts_r+0x78>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	b1db      	cbz	r3, 8006978 <_puts_r+0x78>
 8006940:	3e01      	subs	r6, #1
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006948:	3b01      	subs	r3, #1
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	bb39      	cbnz	r1, 800699e <_puts_r+0x9e>
 800694e:	2b00      	cmp	r3, #0
 8006950:	da38      	bge.n	80069c4 <_puts_r+0xc4>
 8006952:	4622      	mov	r2, r4
 8006954:	210a      	movs	r1, #10
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f8da 	bl	8006b10 <__swbuf_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d011      	beq.n	8006984 <_puts_r+0x84>
 8006960:	250a      	movs	r5, #10
 8006962:	e011      	b.n	8006988 <_puts_r+0x88>
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <_puts_r+0xd4>)
 8006966:	429c      	cmp	r4, r3
 8006968:	d101      	bne.n	800696e <_puts_r+0x6e>
 800696a:	68ac      	ldr	r4, [r5, #8]
 800696c:	e7da      	b.n	8006924 <_puts_r+0x24>
 800696e:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <_puts_r+0xd8>)
 8006970:	429c      	cmp	r4, r3
 8006972:	bf08      	it	eq
 8006974:	68ec      	ldreq	r4, [r5, #12]
 8006976:	e7d5      	b.n	8006924 <_puts_r+0x24>
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f91a 	bl	8006bb4 <__swsetup_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	d0dd      	beq.n	8006940 <_puts_r+0x40>
 8006984:	f04f 35ff 	mov.w	r5, #4294967295
 8006988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d405      	bmi.n	800699a <_puts_r+0x9a>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	059b      	lsls	r3, r3, #22
 8006992:	d402      	bmi.n	800699a <_puts_r+0x9a>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f000 fb64 	bl	8007062 <__retarget_lock_release_recursive>
 800699a:	4628      	mov	r0, r5
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	2b00      	cmp	r3, #0
 80069a0:	da04      	bge.n	80069ac <_puts_r+0xac>
 80069a2:	69a2      	ldr	r2, [r4, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	dc06      	bgt.n	80069b6 <_puts_r+0xb6>
 80069a8:	290a      	cmp	r1, #10
 80069aa:	d004      	beq.n	80069b6 <_puts_r+0xb6>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	7019      	strb	r1, [r3, #0]
 80069b4:	e7c5      	b.n	8006942 <_puts_r+0x42>
 80069b6:	4622      	mov	r2, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f8a9 	bl	8006b10 <__swbuf_r>
 80069be:	3001      	adds	r0, #1
 80069c0:	d1bf      	bne.n	8006942 <_puts_r+0x42>
 80069c2:	e7df      	b.n	8006984 <_puts_r+0x84>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	250a      	movs	r5, #10
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	701d      	strb	r5, [r3, #0]
 80069ce:	e7db      	b.n	8006988 <_puts_r+0x88>
 80069d0:	08007a54 	.word	0x08007a54
 80069d4:	08007a74 	.word	0x08007a74
 80069d8:	08007a34 	.word	0x08007a34

080069dc <puts>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <puts+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f7ff bf8d 	b.w	8006900 <_puts_r>
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c

080069ec <rand>:
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <rand+0x5c>)
 80069ee:	b510      	push	{r4, lr}
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f4:	b9b3      	cbnz	r3, 8006a24 <rand+0x38>
 80069f6:	2018      	movs	r0, #24
 80069f8:	f7ff fe58 	bl	80066ac <malloc>
 80069fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80069fe:	b928      	cbnz	r0, 8006a0c <rand+0x20>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <rand+0x60>)
 8006a04:	4812      	ldr	r0, [pc, #72]	; (8006a50 <rand+0x64>)
 8006a06:	214e      	movs	r1, #78	; 0x4e
 8006a08:	f000 f942 	bl	8006c90 <__assert_func>
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <rand+0x68>)
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <rand+0x6c>)
 8006a10:	e9c0 2300 	strd	r2, r3, [r0]
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <rand+0x70>)
 8006a16:	6083      	str	r3, [r0, #8]
 8006a18:	230b      	movs	r3, #11
 8006a1a:	8183      	strh	r3, [r0, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006a24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006a26:	4a0e      	ldr	r2, [pc, #56]	; (8006a60 <rand+0x74>)
 8006a28:	6920      	ldr	r0, [r4, #16]
 8006a2a:	6963      	ldr	r3, [r4, #20]
 8006a2c:	490d      	ldr	r1, [pc, #52]	; (8006a64 <rand+0x78>)
 8006a2e:	4342      	muls	r2, r0
 8006a30:	fb01 2203 	mla	r2, r1, r3, r2
 8006a34:	fba0 0101 	umull	r0, r1, r0, r1
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	eb42 0001 	adc.w	r0, r2, r1
 8006a3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006a42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006a46:	bd10      	pop	{r4, pc}
 8006a48:	2000000c 	.word	0x2000000c
 8006a4c:	08007984 	.word	0x08007984
 8006a50:	0800799b 	.word	0x0800799b
 8006a54:	abcd330e 	.word	0xabcd330e
 8006a58:	e66d1234 	.word	0xe66d1234
 8006a5c:	0005deec 	.word	0x0005deec
 8006a60:	5851f42d 	.word	0x5851f42d
 8006a64:	4c957f2d 	.word	0x4c957f2d

08006a68 <_sbrk_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d06      	ldr	r5, [pc, #24]	; (8006a84 <_sbrk_r+0x1c>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fa fdfc 	bl	8001670 <_sbrk>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_sbrk_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_sbrk_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20000864 	.word	0x20000864

08006a88 <_raise_r>:
 8006a88:	291f      	cmp	r1, #31
 8006a8a:	b538      	push	{r3, r4, r5, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	460d      	mov	r5, r1
 8006a90:	d904      	bls.n	8006a9c <_raise_r+0x14>
 8006a92:	2316      	movs	r3, #22
 8006a94:	6003      	str	r3, [r0, #0]
 8006a96:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a9e:	b112      	cbz	r2, 8006aa6 <_raise_r+0x1e>
 8006aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aa4:	b94b      	cbnz	r3, 8006aba <_raise_r+0x32>
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f830 	bl	8006b0c <_getpid_r>
 8006aac:	462a      	mov	r2, r5
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab6:	f000 b817 	b.w	8006ae8 <_kill_r>
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d00a      	beq.n	8006ad4 <_raise_r+0x4c>
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	d103      	bne.n	8006aca <_raise_r+0x42>
 8006ac2:	2316      	movs	r3, #22
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e7e7      	b.n	8006a9a <_raise_r+0x12>
 8006aca:	2400      	movs	r4, #0
 8006acc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	4798      	blx	r3
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7e0      	b.n	8006a9a <_raise_r+0x12>

08006ad8 <raise>:
 8006ad8:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <raise+0xc>)
 8006ada:	4601      	mov	r1, r0
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	f7ff bfd3 	b.w	8006a88 <_raise_r>
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c

08006ae8 <_kill_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	; (8006b08 <_kill_r+0x20>)
 8006aec:	2300      	movs	r3, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	4611      	mov	r1, r2
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	f7fa fd4f 	bl	8001598 <_kill>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d102      	bne.n	8006b04 <_kill_r+0x1c>
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	b103      	cbz	r3, 8006b04 <_kill_r+0x1c>
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	bf00      	nop
 8006b08:	20000864 	.word	0x20000864

08006b0c <_getpid_r>:
 8006b0c:	f7fa bd3c 	b.w	8001588 <_getpid>

08006b10 <__swbuf_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	460e      	mov	r6, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	4605      	mov	r5, r0
 8006b18:	b118      	cbz	r0, 8006b22 <__swbuf_r+0x12>
 8006b1a:	6983      	ldr	r3, [r0, #24]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <__swbuf_r+0x12>
 8006b1e:	f000 f9ef 	bl	8006f00 <__sinit>
 8006b22:	4b21      	ldr	r3, [pc, #132]	; (8006ba8 <__swbuf_r+0x98>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	d12b      	bne.n	8006b80 <__swbuf_r+0x70>
 8006b28:	686c      	ldr	r4, [r5, #4]
 8006b2a:	69a3      	ldr	r3, [r4, #24]
 8006b2c:	60a3      	str	r3, [r4, #8]
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	071a      	lsls	r2, r3, #28
 8006b32:	d52f      	bpl.n	8006b94 <__swbuf_r+0x84>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b36b      	cbz	r3, 8006b94 <__swbuf_r+0x84>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	6820      	ldr	r0, [r4, #0]
 8006b3c:	1ac0      	subs	r0, r0, r3
 8006b3e:	6963      	ldr	r3, [r4, #20]
 8006b40:	b2f6      	uxtb	r6, r6
 8006b42:	4283      	cmp	r3, r0
 8006b44:	4637      	mov	r7, r6
 8006b46:	dc04      	bgt.n	8006b52 <__swbuf_r+0x42>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f944 	bl	8006dd8 <_fflush_r>
 8006b50:	bb30      	cbnz	r0, 8006ba0 <__swbuf_r+0x90>
 8006b52:	68a3      	ldr	r3, [r4, #8]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	60a3      	str	r3, [r4, #8]
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	6022      	str	r2, [r4, #0]
 8006b5e:	701e      	strb	r6, [r3, #0]
 8006b60:	6963      	ldr	r3, [r4, #20]
 8006b62:	3001      	adds	r0, #1
 8006b64:	4283      	cmp	r3, r0
 8006b66:	d004      	beq.n	8006b72 <__swbuf_r+0x62>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d506      	bpl.n	8006b7c <__swbuf_r+0x6c>
 8006b6e:	2e0a      	cmp	r6, #10
 8006b70:	d104      	bne.n	8006b7c <__swbuf_r+0x6c>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f92f 	bl	8006dd8 <_fflush_r>
 8006b7a:	b988      	cbnz	r0, 8006ba0 <__swbuf_r+0x90>
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <__swbuf_r+0x9c>)
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d101      	bne.n	8006b8a <__swbuf_r+0x7a>
 8006b86:	68ac      	ldr	r4, [r5, #8]
 8006b88:	e7cf      	b.n	8006b2a <__swbuf_r+0x1a>
 8006b8a:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <__swbuf_r+0xa0>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	bf08      	it	eq
 8006b90:	68ec      	ldreq	r4, [r5, #12]
 8006b92:	e7ca      	b.n	8006b2a <__swbuf_r+0x1a>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f80c 	bl	8006bb4 <__swsetup_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0cb      	beq.n	8006b38 <__swbuf_r+0x28>
 8006ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ba4:	e7ea      	b.n	8006b7c <__swbuf_r+0x6c>
 8006ba6:	bf00      	nop
 8006ba8:	08007a54 	.word	0x08007a54
 8006bac:	08007a74 	.word	0x08007a74
 8006bb0:	08007a34 	.word	0x08007a34

08006bb4 <__swsetup_r>:
 8006bb4:	4b32      	ldr	r3, [pc, #200]	; (8006c80 <__swsetup_r+0xcc>)
 8006bb6:	b570      	push	{r4, r5, r6, lr}
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	b125      	cbz	r5, 8006bca <__swsetup_r+0x16>
 8006bc0:	69ab      	ldr	r3, [r5, #24]
 8006bc2:	b913      	cbnz	r3, 8006bca <__swsetup_r+0x16>
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f99b 	bl	8006f00 <__sinit>
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <__swsetup_r+0xd0>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	d10f      	bne.n	8006bf0 <__swsetup_r+0x3c>
 8006bd0:	686c      	ldr	r4, [r5, #4]
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	d42c      	bmi.n	8006c36 <__swsetup_r+0x82>
 8006bdc:	06dd      	lsls	r5, r3, #27
 8006bde:	d411      	bmi.n	8006c04 <__swsetup_r+0x50>
 8006be0:	2309      	movs	r3, #9
 8006be2:	6033      	str	r3, [r6, #0]
 8006be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	f04f 30ff 	mov.w	r0, #4294967295
 8006bee:	e03e      	b.n	8006c6e <__swsetup_r+0xba>
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <__swsetup_r+0xd4>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <__swsetup_r+0x46>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7eb      	b.n	8006bd2 <__swsetup_r+0x1e>
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <__swsetup_r+0xd8>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7e6      	b.n	8006bd2 <__swsetup_r+0x1e>
 8006c04:	0758      	lsls	r0, r3, #29
 8006c06:	d512      	bpl.n	8006c2e <__swsetup_r+0x7a>
 8006c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0a:	b141      	cbz	r1, 8006c1e <__swsetup_r+0x6a>
 8006c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c10:	4299      	cmp	r1, r3
 8006c12:	d002      	beq.n	8006c1a <__swsetup_r+0x66>
 8006c14:	4630      	mov	r0, r6
 8006c16:	f7ff fd7b 	bl	8006710 <_free_r>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	2300      	movs	r3, #0
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	b94b      	cbnz	r3, 8006c4e <__swsetup_r+0x9a>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d003      	beq.n	8006c4e <__swsetup_r+0x9a>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f000 fa31 	bl	80070b0 <__smakebuf_r>
 8006c4e:	89a0      	ldrh	r0, [r4, #12]
 8006c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c54:	f010 0301 	ands.w	r3, r0, #1
 8006c58:	d00a      	beq.n	8006c70 <__swsetup_r+0xbc>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	6963      	ldr	r3, [r4, #20]
 8006c60:	425b      	negs	r3, r3
 8006c62:	61a3      	str	r3, [r4, #24]
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	b943      	cbnz	r3, 8006c7a <__swsetup_r+0xc6>
 8006c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c6c:	d1ba      	bne.n	8006be4 <__swsetup_r+0x30>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	0781      	lsls	r1, r0, #30
 8006c72:	bf58      	it	pl
 8006c74:	6963      	ldrpl	r3, [r4, #20]
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	e7f4      	b.n	8006c64 <__swsetup_r+0xb0>
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	e7f7      	b.n	8006c6e <__swsetup_r+0xba>
 8006c7e:	bf00      	nop
 8006c80:	2000000c 	.word	0x2000000c
 8006c84:	08007a54 	.word	0x08007a54
 8006c88:	08007a74 	.word	0x08007a74
 8006c8c:	08007a34 	.word	0x08007a34

08006c90 <__assert_func>:
 8006c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c92:	4614      	mov	r4, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <__assert_func+0x2c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	68d8      	ldr	r0, [r3, #12]
 8006c9e:	b14c      	cbz	r4, 8006cb4 <__assert_func+0x24>
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <__assert_func+0x30>)
 8006ca2:	9100      	str	r1, [sp, #0]
 8006ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ca8:	4906      	ldr	r1, [pc, #24]	; (8006cc4 <__assert_func+0x34>)
 8006caa:	462b      	mov	r3, r5
 8006cac:	f000 f9a6 	bl	8006ffc <fiprintf>
 8006cb0:	f7ff fcca 	bl	8006648 <abort>
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <__assert_func+0x38>)
 8006cb6:	461c      	mov	r4, r3
 8006cb8:	e7f3      	b.n	8006ca2 <__assert_func+0x12>
 8006cba:	bf00      	nop
 8006cbc:	2000000c 	.word	0x2000000c
 8006cc0:	080079f6 	.word	0x080079f6
 8006cc4:	08007a03 	.word	0x08007a03
 8006cc8:	08007a31 	.word	0x08007a31

08006ccc <__sflush_r>:
 8006ccc:	898a      	ldrh	r2, [r1, #12]
 8006cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	0710      	lsls	r0, r2, #28
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	d458      	bmi.n	8006d8c <__sflush_r+0xc0>
 8006cda:	684b      	ldr	r3, [r1, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dc05      	bgt.n	8006cec <__sflush_r+0x20>
 8006ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dc02      	bgt.n	8006cec <__sflush_r+0x20>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d0f9      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cf8:	682f      	ldr	r7, [r5, #0]
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	d032      	beq.n	8006d64 <__sflush_r+0x98>
 8006cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	075a      	lsls	r2, r3, #29
 8006d04:	d505      	bpl.n	8006d12 <__sflush_r+0x46>
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	1ac0      	subs	r0, r0, r3
 8006d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d0c:	b10b      	cbz	r3, 8006d12 <__sflush_r+0x46>
 8006d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d10:	1ac0      	subs	r0, r0, r3
 8006d12:	2300      	movs	r3, #0
 8006d14:	4602      	mov	r2, r0
 8006d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b0      	blx	r6
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	d106      	bne.n	8006d32 <__sflush_r+0x66>
 8006d24:	6829      	ldr	r1, [r5, #0]
 8006d26:	291d      	cmp	r1, #29
 8006d28:	d82c      	bhi.n	8006d84 <__sflush_r+0xb8>
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <__sflush_r+0x108>)
 8006d2c:	40ca      	lsrs	r2, r1
 8006d2e:	07d6      	lsls	r6, r2, #31
 8006d30:	d528      	bpl.n	8006d84 <__sflush_r+0xb8>
 8006d32:	2200      	movs	r2, #0
 8006d34:	6062      	str	r2, [r4, #4]
 8006d36:	04d9      	lsls	r1, r3, #19
 8006d38:	6922      	ldr	r2, [r4, #16]
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	d504      	bpl.n	8006d48 <__sflush_r+0x7c>
 8006d3e:	1c42      	adds	r2, r0, #1
 8006d40:	d101      	bne.n	8006d46 <__sflush_r+0x7a>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b903      	cbnz	r3, 8006d48 <__sflush_r+0x7c>
 8006d46:	6560      	str	r0, [r4, #84]	; 0x54
 8006d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d4a:	602f      	str	r7, [r5, #0]
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d0ca      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <__sflush_r+0x92>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7ff fcd9 	bl	8006710 <_free_r>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	6360      	str	r0, [r4, #52]	; 0x34
 8006d62:	e7c1      	b.n	8006ce8 <__sflush_r+0x1c>
 8006d64:	6a21      	ldr	r1, [r4, #32]
 8006d66:	2301      	movs	r3, #1
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b0      	blx	r6
 8006d6c:	1c41      	adds	r1, r0, #1
 8006d6e:	d1c7      	bne.n	8006d00 <__sflush_r+0x34>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c4      	beq.n	8006d00 <__sflush_r+0x34>
 8006d76:	2b1d      	cmp	r3, #29
 8006d78:	d001      	beq.n	8006d7e <__sflush_r+0xb2>
 8006d7a:	2b16      	cmp	r3, #22
 8006d7c:	d101      	bne.n	8006d82 <__sflush_r+0xb6>
 8006d7e:	602f      	str	r7, [r5, #0]
 8006d80:	e7b1      	b.n	8006ce6 <__sflush_r+0x1a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	e7ad      	b.n	8006ce8 <__sflush_r+0x1c>
 8006d8c:	690f      	ldr	r7, [r1, #16]
 8006d8e:	2f00      	cmp	r7, #0
 8006d90:	d0a9      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006d92:	0793      	lsls	r3, r2, #30
 8006d94:	680e      	ldr	r6, [r1, #0]
 8006d96:	bf08      	it	eq
 8006d98:	694b      	ldreq	r3, [r1, #20]
 8006d9a:	600f      	str	r7, [r1, #0]
 8006d9c:	bf18      	it	ne
 8006d9e:	2300      	movne	r3, #0
 8006da0:	eba6 0807 	sub.w	r8, r6, r7
 8006da4:	608b      	str	r3, [r1, #8]
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	dd9c      	ble.n	8006ce6 <__sflush_r+0x1a>
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006db0:	4643      	mov	r3, r8
 8006db2:	463a      	mov	r2, r7
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b0      	blx	r6
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dc06      	bgt.n	8006dca <__sflush_r+0xfe>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	e78e      	b.n	8006ce8 <__sflush_r+0x1c>
 8006dca:	4407      	add	r7, r0
 8006dcc:	eba8 0800 	sub.w	r8, r8, r0
 8006dd0:	e7e9      	b.n	8006da6 <__sflush_r+0xda>
 8006dd2:	bf00      	nop
 8006dd4:	20400001 	.word	0x20400001

08006dd8 <_fflush_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	690b      	ldr	r3, [r1, #16]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	b913      	cbnz	r3, 8006de8 <_fflush_r+0x10>
 8006de2:	2500      	movs	r5, #0
 8006de4:	4628      	mov	r0, r5
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	b118      	cbz	r0, 8006df2 <_fflush_r+0x1a>
 8006dea:	6983      	ldr	r3, [r0, #24]
 8006dec:	b90b      	cbnz	r3, 8006df2 <_fflush_r+0x1a>
 8006dee:	f000 f887 	bl	8006f00 <__sinit>
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <_fflush_r+0x6c>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	d11b      	bne.n	8006e30 <_fflush_r+0x58>
 8006df8:	686c      	ldr	r4, [r5, #4]
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ef      	beq.n	8006de2 <_fflush_r+0xa>
 8006e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e04:	07d0      	lsls	r0, r2, #31
 8006e06:	d404      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e08:	0599      	lsls	r1, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f000 f927 	bl	8007060 <__retarget_lock_acquire_recursive>
 8006e12:	4628      	mov	r0, r5
 8006e14:	4621      	mov	r1, r4
 8006e16:	f7ff ff59 	bl	8006ccc <__sflush_r>
 8006e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e1c:	07da      	lsls	r2, r3, #31
 8006e1e:	4605      	mov	r5, r0
 8006e20:	d4e0      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d4dd      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e2a:	f000 f91a 	bl	8007062 <__retarget_lock_release_recursive>
 8006e2e:	e7d9      	b.n	8006de4 <_fflush_r+0xc>
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <_fflush_r+0x70>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d101      	bne.n	8006e3a <_fflush_r+0x62>
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e7df      	b.n	8006dfa <_fflush_r+0x22>
 8006e3a:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <_fflush_r+0x74>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	bf08      	it	eq
 8006e40:	68ec      	ldreq	r4, [r5, #12]
 8006e42:	e7da      	b.n	8006dfa <_fflush_r+0x22>
 8006e44:	08007a54 	.word	0x08007a54
 8006e48:	08007a74 	.word	0x08007a74
 8006e4c:	08007a34 	.word	0x08007a34

08006e50 <std>:
 8006e50:	2300      	movs	r3, #0
 8006e52:	b510      	push	{r4, lr}
 8006e54:	4604      	mov	r4, r0
 8006e56:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5e:	6083      	str	r3, [r0, #8]
 8006e60:	8181      	strh	r1, [r0, #12]
 8006e62:	6643      	str	r3, [r0, #100]	; 0x64
 8006e64:	81c2      	strh	r2, [r0, #14]
 8006e66:	6183      	str	r3, [r0, #24]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	305c      	adds	r0, #92	; 0x5c
 8006e6e:	f7ff fc47 	bl	8006700 <memset>
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x38>)
 8006e74:	6263      	str	r3, [r4, #36]	; 0x24
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <std+0x3c>)
 8006e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <std+0x40>)
 8006e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <std+0x44>)
 8006e80:	6224      	str	r4, [r4, #32]
 8006e82:	6323      	str	r3, [r4, #48]	; 0x30
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	bf00      	nop
 8006e88:	08007725 	.word	0x08007725
 8006e8c:	08007747 	.word	0x08007747
 8006e90:	0800777f 	.word	0x0800777f
 8006e94:	080077a3 	.word	0x080077a3

08006e98 <_cleanup_r>:
 8006e98:	4901      	ldr	r1, [pc, #4]	; (8006ea0 <_cleanup_r+0x8>)
 8006e9a:	f000 b8c1 	b.w	8007020 <_fwalk_reent>
 8006e9e:	bf00      	nop
 8006ea0:	08006dd9 	.word	0x08006dd9

08006ea4 <__sfmoreglue>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	2268      	movs	r2, #104	; 0x68
 8006ea8:	1e4d      	subs	r5, r1, #1
 8006eaa:	4355      	muls	r5, r2
 8006eac:	460e      	mov	r6, r1
 8006eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eb2:	f7ff fc99 	bl	80067e8 <_malloc_r>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	b140      	cbz	r0, 8006ecc <__sfmoreglue+0x28>
 8006eba:	2100      	movs	r1, #0
 8006ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ec0:	300c      	adds	r0, #12
 8006ec2:	60a0      	str	r0, [r4, #8]
 8006ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ec8:	f7ff fc1a 	bl	8006700 <memset>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}

08006ed0 <__sfp_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sfp_lock_acquire+0x8>)
 8006ed2:	f000 b8c5 	b.w	8007060 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	20000861 	.word	0x20000861

08006edc <__sfp_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sfp_lock_release+0x8>)
 8006ede:	f000 b8c0 	b.w	8007062 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000861 	.word	0x20000861

08006ee8 <__sinit_lock_acquire>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sinit_lock_acquire+0x8>)
 8006eea:	f000 b8b9 	b.w	8007060 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000862 	.word	0x20000862

08006ef4 <__sinit_lock_release>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__sinit_lock_release+0x8>)
 8006ef6:	f000 b8b4 	b.w	8007062 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000862 	.word	0x20000862

08006f00 <__sinit>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4604      	mov	r4, r0
 8006f04:	f7ff fff0 	bl	8006ee8 <__sinit_lock_acquire>
 8006f08:	69a3      	ldr	r3, [r4, #24]
 8006f0a:	b11b      	cbz	r3, 8006f14 <__sinit+0x14>
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f10:	f7ff bff0 	b.w	8006ef4 <__sinit_lock_release>
 8006f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f18:	6523      	str	r3, [r4, #80]	; 0x50
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <__sinit+0x68>)
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <__sinit+0x6c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	bf04      	itt	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	61a3      	streq	r3, [r4, #24]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f820 	bl	8006f70 <__sfp>
 8006f30:	6060      	str	r0, [r4, #4]
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f81c 	bl	8006f70 <__sfp>
 8006f38:	60a0      	str	r0, [r4, #8]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f818 	bl	8006f70 <__sfp>
 8006f40:	2200      	movs	r2, #0
 8006f42:	60e0      	str	r0, [r4, #12]
 8006f44:	2104      	movs	r1, #4
 8006f46:	6860      	ldr	r0, [r4, #4]
 8006f48:	f7ff ff82 	bl	8006e50 <std>
 8006f4c:	68a0      	ldr	r0, [r4, #8]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	2109      	movs	r1, #9
 8006f52:	f7ff ff7d 	bl	8006e50 <std>
 8006f56:	68e0      	ldr	r0, [r4, #12]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	2112      	movs	r1, #18
 8006f5c:	f7ff ff78 	bl	8006e50 <std>
 8006f60:	2301      	movs	r3, #1
 8006f62:	61a3      	str	r3, [r4, #24]
 8006f64:	e7d2      	b.n	8006f0c <__sinit+0xc>
 8006f66:	bf00      	nop
 8006f68:	08007980 	.word	0x08007980
 8006f6c:	08006e99 	.word	0x08006e99

08006f70 <__sfp>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	4607      	mov	r7, r0
 8006f74:	f7ff ffac 	bl	8006ed0 <__sfp_lock_acquire>
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <__sfp+0x84>)
 8006f7a:	681e      	ldr	r6, [r3, #0]
 8006f7c:	69b3      	ldr	r3, [r6, #24]
 8006f7e:	b913      	cbnz	r3, 8006f86 <__sfp+0x16>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff ffbd 	bl	8006f00 <__sinit>
 8006f86:	3648      	adds	r6, #72	; 0x48
 8006f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	d503      	bpl.n	8006f98 <__sfp+0x28>
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	b30b      	cbz	r3, 8006fd8 <__sfp+0x68>
 8006f94:	6836      	ldr	r6, [r6, #0]
 8006f96:	e7f7      	b.n	8006f88 <__sfp+0x18>
 8006f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f9c:	b9d5      	cbnz	r5, 8006fd4 <__sfp+0x64>
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <__sfp+0x88>)
 8006fa0:	60e3      	str	r3, [r4, #12]
 8006fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8006fa8:	f000 f859 	bl	800705e <__retarget_lock_init_recursive>
 8006fac:	f7ff ff96 	bl	8006edc <__sfp_lock_release>
 8006fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	61a5      	str	r5, [r4, #24]
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fc4:	f7ff fb9c 	bl	8006700 <memset>
 8006fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd4:	3468      	adds	r4, #104	; 0x68
 8006fd6:	e7d9      	b.n	8006f8c <__sfp+0x1c>
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f7ff ff62 	bl	8006ea4 <__sfmoreglue>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	6030      	str	r0, [r6, #0]
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d1d5      	bne.n	8006f94 <__sfp+0x24>
 8006fe8:	f7ff ff78 	bl	8006edc <__sfp_lock_release>
 8006fec:	230c      	movs	r3, #12
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	e7ee      	b.n	8006fd0 <__sfp+0x60>
 8006ff2:	bf00      	nop
 8006ff4:	08007980 	.word	0x08007980
 8006ff8:	ffff0001 	.word	0xffff0001

08006ffc <fiprintf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	b503      	push	{r0, r1, lr}
 8007000:	4601      	mov	r1, r0
 8007002:	ab03      	add	r3, sp, #12
 8007004:	4805      	ldr	r0, [pc, #20]	; (800701c <fiprintf+0x20>)
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	f000 f8c5 	bl	800719c <_vfiprintf_r>
 8007012:	b002      	add	sp, #8
 8007014:	f85d eb04 	ldr.w	lr, [sp], #4
 8007018:	b003      	add	sp, #12
 800701a:	4770      	bx	lr
 800701c:	2000000c 	.word	0x2000000c

08007020 <_fwalk_reent>:
 8007020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007024:	4606      	mov	r6, r0
 8007026:	4688      	mov	r8, r1
 8007028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800702c:	2700      	movs	r7, #0
 800702e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007032:	f1b9 0901 	subs.w	r9, r9, #1
 8007036:	d505      	bpl.n	8007044 <_fwalk_reent+0x24>
 8007038:	6824      	ldr	r4, [r4, #0]
 800703a:	2c00      	cmp	r4, #0
 800703c:	d1f7      	bne.n	800702e <_fwalk_reent+0xe>
 800703e:	4638      	mov	r0, r7
 8007040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007044:	89ab      	ldrh	r3, [r5, #12]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d907      	bls.n	800705a <_fwalk_reent+0x3a>
 800704a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800704e:	3301      	adds	r3, #1
 8007050:	d003      	beq.n	800705a <_fwalk_reent+0x3a>
 8007052:	4629      	mov	r1, r5
 8007054:	4630      	mov	r0, r6
 8007056:	47c0      	blx	r8
 8007058:	4307      	orrs	r7, r0
 800705a:	3568      	adds	r5, #104	; 0x68
 800705c:	e7e9      	b.n	8007032 <_fwalk_reent+0x12>

0800705e <__retarget_lock_init_recursive>:
 800705e:	4770      	bx	lr

08007060 <__retarget_lock_acquire_recursive>:
 8007060:	4770      	bx	lr

08007062 <__retarget_lock_release_recursive>:
 8007062:	4770      	bx	lr

08007064 <__swhatbuf_r>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	2900      	cmp	r1, #0
 800706e:	b096      	sub	sp, #88	; 0x58
 8007070:	4614      	mov	r4, r2
 8007072:	461d      	mov	r5, r3
 8007074:	da08      	bge.n	8007088 <__swhatbuf_r+0x24>
 8007076:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	061a      	lsls	r2, r3, #24
 8007080:	d410      	bmi.n	80070a4 <__swhatbuf_r+0x40>
 8007082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007086:	e00e      	b.n	80070a6 <__swhatbuf_r+0x42>
 8007088:	466a      	mov	r2, sp
 800708a:	f000 fbb1 	bl	80077f0 <_fstat_r>
 800708e:	2800      	cmp	r0, #0
 8007090:	dbf1      	blt.n	8007076 <__swhatbuf_r+0x12>
 8007092:	9a01      	ldr	r2, [sp, #4]
 8007094:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007098:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800709c:	425a      	negs	r2, r3
 800709e:	415a      	adcs	r2, r3
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	e7ee      	b.n	8007082 <__swhatbuf_r+0x1e>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	2000      	movs	r0, #0
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	b016      	add	sp, #88	; 0x58
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080070b0 <__smakebuf_r>:
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b4:	079d      	lsls	r5, r3, #30
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	d507      	bpl.n	80070cc <__smakebuf_r+0x1c>
 80070bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2301      	movs	r3, #1
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	b002      	add	sp, #8
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	ab01      	add	r3, sp, #4
 80070ce:	466a      	mov	r2, sp
 80070d0:	f7ff ffc8 	bl	8007064 <__swhatbuf_r>
 80070d4:	9900      	ldr	r1, [sp, #0]
 80070d6:	4605      	mov	r5, r0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fb85 	bl	80067e8 <_malloc_r>
 80070de:	b948      	cbnz	r0, 80070f4 <__smakebuf_r+0x44>
 80070e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e4:	059a      	lsls	r2, r3, #22
 80070e6:	d4ef      	bmi.n	80070c8 <__smakebuf_r+0x18>
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	e7e3      	b.n	80070bc <__smakebuf_r+0xc>
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <__smakebuf_r+0x7c>)
 80070f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	6163      	str	r3, [r4, #20]
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	6120      	str	r0, [r4, #16]
 800710a:	b15b      	cbz	r3, 8007124 <__smakebuf_r+0x74>
 800710c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007110:	4630      	mov	r0, r6
 8007112:	f000 fb7f 	bl	8007814 <_isatty_r>
 8007116:	b128      	cbz	r0, 8007124 <__smakebuf_r+0x74>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	89a0      	ldrh	r0, [r4, #12]
 8007126:	4305      	orrs	r5, r0
 8007128:	81a5      	strh	r5, [r4, #12]
 800712a:	e7cd      	b.n	80070c8 <__smakebuf_r+0x18>
 800712c:	08006e99 	.word	0x08006e99

08007130 <__malloc_lock>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__malloc_lock+0x8>)
 8007132:	f7ff bf95 	b.w	8007060 <__retarget_lock_acquire_recursive>
 8007136:	bf00      	nop
 8007138:	20000860 	.word	0x20000860

0800713c <__malloc_unlock>:
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <__malloc_unlock+0x8>)
 800713e:	f7ff bf90 	b.w	8007062 <__retarget_lock_release_recursive>
 8007142:	bf00      	nop
 8007144:	20000860 	.word	0x20000860

08007148 <__sfputc_r>:
 8007148:	6893      	ldr	r3, [r2, #8]
 800714a:	3b01      	subs	r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	b410      	push	{r4}
 8007150:	6093      	str	r3, [r2, #8]
 8007152:	da08      	bge.n	8007166 <__sfputc_r+0x1e>
 8007154:	6994      	ldr	r4, [r2, #24]
 8007156:	42a3      	cmp	r3, r4
 8007158:	db01      	blt.n	800715e <__sfputc_r+0x16>
 800715a:	290a      	cmp	r1, #10
 800715c:	d103      	bne.n	8007166 <__sfputc_r+0x1e>
 800715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007162:	f7ff bcd5 	b.w	8006b10 <__swbuf_r>
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	1c58      	adds	r0, r3, #1
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	7019      	strb	r1, [r3, #0]
 800716e:	4608      	mov	r0, r1
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007174:	4770      	bx	lr

08007176 <__sfputs_r>:
 8007176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	4614      	mov	r4, r2
 800717e:	18d5      	adds	r5, r2, r3
 8007180:	42ac      	cmp	r4, r5
 8007182:	d101      	bne.n	8007188 <__sfputs_r+0x12>
 8007184:	2000      	movs	r0, #0
 8007186:	e007      	b.n	8007198 <__sfputs_r+0x22>
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	463a      	mov	r2, r7
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ffda 	bl	8007148 <__sfputc_r>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d1f3      	bne.n	8007180 <__sfputs_r+0xa>
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800719c <_vfiprintf_r>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	460d      	mov	r5, r1
 80071a2:	b09d      	sub	sp, #116	; 0x74
 80071a4:	4614      	mov	r4, r2
 80071a6:	4698      	mov	r8, r3
 80071a8:	4606      	mov	r6, r0
 80071aa:	b118      	cbz	r0, 80071b4 <_vfiprintf_r+0x18>
 80071ac:	6983      	ldr	r3, [r0, #24]
 80071ae:	b90b      	cbnz	r3, 80071b4 <_vfiprintf_r+0x18>
 80071b0:	f7ff fea6 	bl	8006f00 <__sinit>
 80071b4:	4b89      	ldr	r3, [pc, #548]	; (80073dc <_vfiprintf_r+0x240>)
 80071b6:	429d      	cmp	r5, r3
 80071b8:	d11b      	bne.n	80071f2 <_vfiprintf_r+0x56>
 80071ba:	6875      	ldr	r5, [r6, #4]
 80071bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071be:	07d9      	lsls	r1, r3, #31
 80071c0:	d405      	bmi.n	80071ce <_vfiprintf_r+0x32>
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	059a      	lsls	r2, r3, #22
 80071c6:	d402      	bmi.n	80071ce <_vfiprintf_r+0x32>
 80071c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ca:	f7ff ff49 	bl	8007060 <__retarget_lock_acquire_recursive>
 80071ce:	89ab      	ldrh	r3, [r5, #12]
 80071d0:	071b      	lsls	r3, r3, #28
 80071d2:	d501      	bpl.n	80071d8 <_vfiprintf_r+0x3c>
 80071d4:	692b      	ldr	r3, [r5, #16]
 80071d6:	b9eb      	cbnz	r3, 8007214 <_vfiprintf_r+0x78>
 80071d8:	4629      	mov	r1, r5
 80071da:	4630      	mov	r0, r6
 80071dc:	f7ff fcea 	bl	8006bb4 <__swsetup_r>
 80071e0:	b1c0      	cbz	r0, 8007214 <_vfiprintf_r+0x78>
 80071e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e4:	07dc      	lsls	r4, r3, #31
 80071e6:	d50e      	bpl.n	8007206 <_vfiprintf_r+0x6a>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	b01d      	add	sp, #116	; 0x74
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	4b7b      	ldr	r3, [pc, #492]	; (80073e0 <_vfiprintf_r+0x244>)
 80071f4:	429d      	cmp	r5, r3
 80071f6:	d101      	bne.n	80071fc <_vfiprintf_r+0x60>
 80071f8:	68b5      	ldr	r5, [r6, #8]
 80071fa:	e7df      	b.n	80071bc <_vfiprintf_r+0x20>
 80071fc:	4b79      	ldr	r3, [pc, #484]	; (80073e4 <_vfiprintf_r+0x248>)
 80071fe:	429d      	cmp	r5, r3
 8007200:	bf08      	it	eq
 8007202:	68f5      	ldreq	r5, [r6, #12]
 8007204:	e7da      	b.n	80071bc <_vfiprintf_r+0x20>
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	0598      	lsls	r0, r3, #22
 800720a:	d4ed      	bmi.n	80071e8 <_vfiprintf_r+0x4c>
 800720c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800720e:	f7ff ff28 	bl	8007062 <__retarget_lock_release_recursive>
 8007212:	e7e9      	b.n	80071e8 <_vfiprintf_r+0x4c>
 8007214:	2300      	movs	r3, #0
 8007216:	9309      	str	r3, [sp, #36]	; 0x24
 8007218:	2320      	movs	r3, #32
 800721a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800721e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007222:	2330      	movs	r3, #48	; 0x30
 8007224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073e8 <_vfiprintf_r+0x24c>
 8007228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722c:	f04f 0901 	mov.w	r9, #1
 8007230:	4623      	mov	r3, r4
 8007232:	469a      	mov	sl, r3
 8007234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007238:	b10a      	cbz	r2, 800723e <_vfiprintf_r+0xa2>
 800723a:	2a25      	cmp	r2, #37	; 0x25
 800723c:	d1f9      	bne.n	8007232 <_vfiprintf_r+0x96>
 800723e:	ebba 0b04 	subs.w	fp, sl, r4
 8007242:	d00b      	beq.n	800725c <_vfiprintf_r+0xc0>
 8007244:	465b      	mov	r3, fp
 8007246:	4622      	mov	r2, r4
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ff93 	bl	8007176 <__sfputs_r>
 8007250:	3001      	adds	r0, #1
 8007252:	f000 80aa 	beq.w	80073aa <_vfiprintf_r+0x20e>
 8007256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007258:	445a      	add	r2, fp
 800725a:	9209      	str	r2, [sp, #36]	; 0x24
 800725c:	f89a 3000 	ldrb.w	r3, [sl]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80a2 	beq.w	80073aa <_vfiprintf_r+0x20e>
 8007266:	2300      	movs	r3, #0
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800727c:	931a      	str	r3, [sp, #104]	; 0x68
 800727e:	4654      	mov	r4, sl
 8007280:	2205      	movs	r2, #5
 8007282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007286:	4858      	ldr	r0, [pc, #352]	; (80073e8 <_vfiprintf_r+0x24c>)
 8007288:	f7f8 ffc2 	bl	8000210 <memchr>
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	b9d8      	cbnz	r0, 80072c8 <_vfiprintf_r+0x12c>
 8007290:	06d1      	lsls	r1, r2, #27
 8007292:	bf44      	itt	mi
 8007294:	2320      	movmi	r3, #32
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729a:	0713      	lsls	r3, r2, #28
 800729c:	bf44      	itt	mi
 800729e:	232b      	movmi	r3, #43	; 0x2b
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b2a      	cmp	r3, #42	; 0x2a
 80072aa:	d015      	beq.n	80072d8 <_vfiprintf_r+0x13c>
 80072ac:	9a07      	ldr	r2, [sp, #28]
 80072ae:	4654      	mov	r4, sl
 80072b0:	2000      	movs	r0, #0
 80072b2:	f04f 0c0a 	mov.w	ip, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072bc:	3b30      	subs	r3, #48	; 0x30
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d94e      	bls.n	8007360 <_vfiprintf_r+0x1c4>
 80072c2:	b1b0      	cbz	r0, 80072f2 <_vfiprintf_r+0x156>
 80072c4:	9207      	str	r2, [sp, #28]
 80072c6:	e014      	b.n	80072f2 <_vfiprintf_r+0x156>
 80072c8:	eba0 0308 	sub.w	r3, r0, r8
 80072cc:	fa09 f303 	lsl.w	r3, r9, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	46a2      	mov	sl, r4
 80072d6:	e7d2      	b.n	800727e <_vfiprintf_r+0xe2>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d19      	adds	r1, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9103      	str	r1, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfbb      	ittet	lt
 80072e4:	425b      	neglt	r3, r3
 80072e6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ea:	9307      	strge	r3, [sp, #28]
 80072ec:	9307      	strlt	r3, [sp, #28]
 80072ee:	bfb8      	it	lt
 80072f0:	9204      	strlt	r2, [sp, #16]
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	2b2e      	cmp	r3, #46	; 0x2e
 80072f6:	d10c      	bne.n	8007312 <_vfiprintf_r+0x176>
 80072f8:	7863      	ldrb	r3, [r4, #1]
 80072fa:	2b2a      	cmp	r3, #42	; 0x2a
 80072fc:	d135      	bne.n	800736a <_vfiprintf_r+0x1ce>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9203      	str	r2, [sp, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfb8      	it	lt
 800730a:	f04f 33ff 	movlt.w	r3, #4294967295
 800730e:	3402      	adds	r4, #2
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073f8 <_vfiprintf_r+0x25c>
 8007316:	7821      	ldrb	r1, [r4, #0]
 8007318:	2203      	movs	r2, #3
 800731a:	4650      	mov	r0, sl
 800731c:	f7f8 ff78 	bl	8000210 <memchr>
 8007320:	b140      	cbz	r0, 8007334 <_vfiprintf_r+0x198>
 8007322:	2340      	movs	r3, #64	; 0x40
 8007324:	eba0 000a 	sub.w	r0, r0, sl
 8007328:	fa03 f000 	lsl.w	r0, r3, r0
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	4303      	orrs	r3, r0
 8007330:	3401      	adds	r4, #1
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007338:	482c      	ldr	r0, [pc, #176]	; (80073ec <_vfiprintf_r+0x250>)
 800733a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733e:	2206      	movs	r2, #6
 8007340:	f7f8 ff66 	bl	8000210 <memchr>
 8007344:	2800      	cmp	r0, #0
 8007346:	d03f      	beq.n	80073c8 <_vfiprintf_r+0x22c>
 8007348:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <_vfiprintf_r+0x254>)
 800734a:	bb1b      	cbnz	r3, 8007394 <_vfiprintf_r+0x1f8>
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	3307      	adds	r3, #7
 8007350:	f023 0307 	bic.w	r3, r3, #7
 8007354:	3308      	adds	r3, #8
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	443b      	add	r3, r7
 800735c:	9309      	str	r3, [sp, #36]	; 0x24
 800735e:	e767      	b.n	8007230 <_vfiprintf_r+0x94>
 8007360:	fb0c 3202 	mla	r2, ip, r2, r3
 8007364:	460c      	mov	r4, r1
 8007366:	2001      	movs	r0, #1
 8007368:	e7a5      	b.n	80072b6 <_vfiprintf_r+0x11a>
 800736a:	2300      	movs	r3, #0
 800736c:	3401      	adds	r4, #1
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	4619      	mov	r1, r3
 8007372:	f04f 0c0a 	mov.w	ip, #10
 8007376:	4620      	mov	r0, r4
 8007378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737c:	3a30      	subs	r2, #48	; 0x30
 800737e:	2a09      	cmp	r2, #9
 8007380:	d903      	bls.n	800738a <_vfiprintf_r+0x1ee>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0c5      	beq.n	8007312 <_vfiprintf_r+0x176>
 8007386:	9105      	str	r1, [sp, #20]
 8007388:	e7c3      	b.n	8007312 <_vfiprintf_r+0x176>
 800738a:	fb0c 2101 	mla	r1, ip, r1, r2
 800738e:	4604      	mov	r4, r0
 8007390:	2301      	movs	r3, #1
 8007392:	e7f0      	b.n	8007376 <_vfiprintf_r+0x1da>
 8007394:	ab03      	add	r3, sp, #12
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	462a      	mov	r2, r5
 800739a:	4b16      	ldr	r3, [pc, #88]	; (80073f4 <_vfiprintf_r+0x258>)
 800739c:	a904      	add	r1, sp, #16
 800739e:	4630      	mov	r0, r6
 80073a0:	f3af 8000 	nop.w
 80073a4:	4607      	mov	r7, r0
 80073a6:	1c78      	adds	r0, r7, #1
 80073a8:	d1d6      	bne.n	8007358 <_vfiprintf_r+0x1bc>
 80073aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ac:	07d9      	lsls	r1, r3, #31
 80073ae:	d405      	bmi.n	80073bc <_vfiprintf_r+0x220>
 80073b0:	89ab      	ldrh	r3, [r5, #12]
 80073b2:	059a      	lsls	r2, r3, #22
 80073b4:	d402      	bmi.n	80073bc <_vfiprintf_r+0x220>
 80073b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b8:	f7ff fe53 	bl	8007062 <__retarget_lock_release_recursive>
 80073bc:	89ab      	ldrh	r3, [r5, #12]
 80073be:	065b      	lsls	r3, r3, #25
 80073c0:	f53f af12 	bmi.w	80071e8 <_vfiprintf_r+0x4c>
 80073c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c6:	e711      	b.n	80071ec <_vfiprintf_r+0x50>
 80073c8:	ab03      	add	r3, sp, #12
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	462a      	mov	r2, r5
 80073ce:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <_vfiprintf_r+0x258>)
 80073d0:	a904      	add	r1, sp, #16
 80073d2:	4630      	mov	r0, r6
 80073d4:	f000 f880 	bl	80074d8 <_printf_i>
 80073d8:	e7e4      	b.n	80073a4 <_vfiprintf_r+0x208>
 80073da:	bf00      	nop
 80073dc:	08007a54 	.word	0x08007a54
 80073e0:	08007a74 	.word	0x08007a74
 80073e4:	08007a34 	.word	0x08007a34
 80073e8:	08007a94 	.word	0x08007a94
 80073ec:	08007a9e 	.word	0x08007a9e
 80073f0:	00000000 	.word	0x00000000
 80073f4:	08007177 	.word	0x08007177
 80073f8:	08007a9a 	.word	0x08007a9a

080073fc <_printf_common>:
 80073fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007400:	4616      	mov	r6, r2
 8007402:	4699      	mov	r9, r3
 8007404:	688a      	ldr	r2, [r1, #8]
 8007406:	690b      	ldr	r3, [r1, #16]
 8007408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800740c:	4293      	cmp	r3, r2
 800740e:	bfb8      	it	lt
 8007410:	4613      	movlt	r3, r2
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007418:	4607      	mov	r7, r0
 800741a:	460c      	mov	r4, r1
 800741c:	b10a      	cbz	r2, 8007422 <_printf_common+0x26>
 800741e:	3301      	adds	r3, #1
 8007420:	6033      	str	r3, [r6, #0]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	0699      	lsls	r1, r3, #26
 8007426:	bf42      	ittt	mi
 8007428:	6833      	ldrmi	r3, [r6, #0]
 800742a:	3302      	addmi	r3, #2
 800742c:	6033      	strmi	r3, [r6, #0]
 800742e:	6825      	ldr	r5, [r4, #0]
 8007430:	f015 0506 	ands.w	r5, r5, #6
 8007434:	d106      	bne.n	8007444 <_printf_common+0x48>
 8007436:	f104 0a19 	add.w	sl, r4, #25
 800743a:	68e3      	ldr	r3, [r4, #12]
 800743c:	6832      	ldr	r2, [r6, #0]
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	42ab      	cmp	r3, r5
 8007442:	dc26      	bgt.n	8007492 <_printf_common+0x96>
 8007444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007448:	1e13      	subs	r3, r2, #0
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	bf18      	it	ne
 800744e:	2301      	movne	r3, #1
 8007450:	0692      	lsls	r2, r2, #26
 8007452:	d42b      	bmi.n	80074ac <_printf_common+0xb0>
 8007454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007458:	4649      	mov	r1, r9
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	3001      	adds	r0, #1
 8007460:	d01e      	beq.n	80074a0 <_printf_common+0xa4>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	68e5      	ldr	r5, [r4, #12]
 8007466:	6832      	ldr	r2, [r6, #0]
 8007468:	f003 0306 	and.w	r3, r3, #6
 800746c:	2b04      	cmp	r3, #4
 800746e:	bf08      	it	eq
 8007470:	1aad      	subeq	r5, r5, r2
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	bf0c      	ite	eq
 8007478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800747c:	2500      	movne	r5, #0
 800747e:	4293      	cmp	r3, r2
 8007480:	bfc4      	itt	gt
 8007482:	1a9b      	subgt	r3, r3, r2
 8007484:	18ed      	addgt	r5, r5, r3
 8007486:	2600      	movs	r6, #0
 8007488:	341a      	adds	r4, #26
 800748a:	42b5      	cmp	r5, r6
 800748c:	d11a      	bne.n	80074c4 <_printf_common+0xc8>
 800748e:	2000      	movs	r0, #0
 8007490:	e008      	b.n	80074a4 <_printf_common+0xa8>
 8007492:	2301      	movs	r3, #1
 8007494:	4652      	mov	r2, sl
 8007496:	4649      	mov	r1, r9
 8007498:	4638      	mov	r0, r7
 800749a:	47c0      	blx	r8
 800749c:	3001      	adds	r0, #1
 800749e:	d103      	bne.n	80074a8 <_printf_common+0xac>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	3501      	adds	r5, #1
 80074aa:	e7c6      	b.n	800743a <_printf_common+0x3e>
 80074ac:	18e1      	adds	r1, r4, r3
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	2030      	movs	r0, #48	; 0x30
 80074b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b6:	4422      	add	r2, r4
 80074b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074c0:	3302      	adds	r3, #2
 80074c2:	e7c7      	b.n	8007454 <_printf_common+0x58>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4622      	mov	r2, r4
 80074c8:	4649      	mov	r1, r9
 80074ca:	4638      	mov	r0, r7
 80074cc:	47c0      	blx	r8
 80074ce:	3001      	adds	r0, #1
 80074d0:	d0e6      	beq.n	80074a0 <_printf_common+0xa4>
 80074d2:	3601      	adds	r6, #1
 80074d4:	e7d9      	b.n	800748a <_printf_common+0x8e>
	...

080074d8 <_printf_i>:
 80074d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	7e0f      	ldrb	r7, [r1, #24]
 80074de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074e0:	2f78      	cmp	r7, #120	; 0x78
 80074e2:	4691      	mov	r9, r2
 80074e4:	4680      	mov	r8, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	469a      	mov	sl, r3
 80074ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ee:	d807      	bhi.n	8007500 <_printf_i+0x28>
 80074f0:	2f62      	cmp	r7, #98	; 0x62
 80074f2:	d80a      	bhi.n	800750a <_printf_i+0x32>
 80074f4:	2f00      	cmp	r7, #0
 80074f6:	f000 80d8 	beq.w	80076aa <_printf_i+0x1d2>
 80074fa:	2f58      	cmp	r7, #88	; 0x58
 80074fc:	f000 80a3 	beq.w	8007646 <_printf_i+0x16e>
 8007500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007508:	e03a      	b.n	8007580 <_printf_i+0xa8>
 800750a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750e:	2b15      	cmp	r3, #21
 8007510:	d8f6      	bhi.n	8007500 <_printf_i+0x28>
 8007512:	a101      	add	r1, pc, #4	; (adr r1, 8007518 <_printf_i+0x40>)
 8007514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007518:	08007571 	.word	0x08007571
 800751c:	08007585 	.word	0x08007585
 8007520:	08007501 	.word	0x08007501
 8007524:	08007501 	.word	0x08007501
 8007528:	08007501 	.word	0x08007501
 800752c:	08007501 	.word	0x08007501
 8007530:	08007585 	.word	0x08007585
 8007534:	08007501 	.word	0x08007501
 8007538:	08007501 	.word	0x08007501
 800753c:	08007501 	.word	0x08007501
 8007540:	08007501 	.word	0x08007501
 8007544:	08007691 	.word	0x08007691
 8007548:	080075b5 	.word	0x080075b5
 800754c:	08007673 	.word	0x08007673
 8007550:	08007501 	.word	0x08007501
 8007554:	08007501 	.word	0x08007501
 8007558:	080076b3 	.word	0x080076b3
 800755c:	08007501 	.word	0x08007501
 8007560:	080075b5 	.word	0x080075b5
 8007564:	08007501 	.word	0x08007501
 8007568:	08007501 	.word	0x08007501
 800756c:	0800767b 	.word	0x0800767b
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	602a      	str	r2, [r5, #0]
 8007578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007580:	2301      	movs	r3, #1
 8007582:	e0a3      	b.n	80076cc <_printf_i+0x1f4>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	6829      	ldr	r1, [r5, #0]
 8007588:	0606      	lsls	r6, r0, #24
 800758a:	f101 0304 	add.w	r3, r1, #4
 800758e:	d50a      	bpl.n	80075a6 <_printf_i+0xce>
 8007590:	680e      	ldr	r6, [r1, #0]
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	2e00      	cmp	r6, #0
 8007596:	da03      	bge.n	80075a0 <_printf_i+0xc8>
 8007598:	232d      	movs	r3, #45	; 0x2d
 800759a:	4276      	negs	r6, r6
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	485e      	ldr	r0, [pc, #376]	; (800771c <_printf_i+0x244>)
 80075a2:	230a      	movs	r3, #10
 80075a4:	e019      	b.n	80075da <_printf_i+0x102>
 80075a6:	680e      	ldr	r6, [r1, #0]
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075ae:	bf18      	it	ne
 80075b0:	b236      	sxthne	r6, r6
 80075b2:	e7ef      	b.n	8007594 <_printf_i+0xbc>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	1d19      	adds	r1, r3, #4
 80075ba:	6029      	str	r1, [r5, #0]
 80075bc:	0601      	lsls	r1, r0, #24
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0xec>
 80075c0:	681e      	ldr	r6, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0xf2>
 80075c4:	0646      	lsls	r6, r0, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0xe8>
 80075c8:	881e      	ldrh	r6, [r3, #0]
 80075ca:	4854      	ldr	r0, [pc, #336]	; (800771c <_printf_i+0x244>)
 80075cc:	2f6f      	cmp	r7, #111	; 0x6f
 80075ce:	bf0c      	ite	eq
 80075d0:	2308      	moveq	r3, #8
 80075d2:	230a      	movne	r3, #10
 80075d4:	2100      	movs	r1, #0
 80075d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075da:	6865      	ldr	r5, [r4, #4]
 80075dc:	60a5      	str	r5, [r4, #8]
 80075de:	2d00      	cmp	r5, #0
 80075e0:	bfa2      	ittt	ge
 80075e2:	6821      	ldrge	r1, [r4, #0]
 80075e4:	f021 0104 	bicge.w	r1, r1, #4
 80075e8:	6021      	strge	r1, [r4, #0]
 80075ea:	b90e      	cbnz	r6, 80075f0 <_printf_i+0x118>
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	d04d      	beq.n	800768c <_printf_i+0x1b4>
 80075f0:	4615      	mov	r5, r2
 80075f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075f6:	fb03 6711 	mls	r7, r3, r1, r6
 80075fa:	5dc7      	ldrb	r7, [r0, r7]
 80075fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007600:	4637      	mov	r7, r6
 8007602:	42bb      	cmp	r3, r7
 8007604:	460e      	mov	r6, r1
 8007606:	d9f4      	bls.n	80075f2 <_printf_i+0x11a>
 8007608:	2b08      	cmp	r3, #8
 800760a:	d10b      	bne.n	8007624 <_printf_i+0x14c>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	07de      	lsls	r6, r3, #31
 8007610:	d508      	bpl.n	8007624 <_printf_i+0x14c>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	4299      	cmp	r1, r3
 8007618:	bfde      	ittt	le
 800761a:	2330      	movle	r3, #48	; 0x30
 800761c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007624:	1b52      	subs	r2, r2, r5
 8007626:	6122      	str	r2, [r4, #16]
 8007628:	f8cd a000 	str.w	sl, [sp]
 800762c:	464b      	mov	r3, r9
 800762e:	aa03      	add	r2, sp, #12
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fee2 	bl	80073fc <_printf_common>
 8007638:	3001      	adds	r0, #1
 800763a:	d14c      	bne.n	80076d6 <_printf_i+0x1fe>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b004      	add	sp, #16
 8007642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007646:	4835      	ldr	r0, [pc, #212]	; (800771c <_printf_i+0x244>)
 8007648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800764c:	6829      	ldr	r1, [r5, #0]
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f851 6b04 	ldr.w	r6, [r1], #4
 8007654:	6029      	str	r1, [r5, #0]
 8007656:	061d      	lsls	r5, r3, #24
 8007658:	d514      	bpl.n	8007684 <_printf_i+0x1ac>
 800765a:	07df      	lsls	r7, r3, #31
 800765c:	bf44      	itt	mi
 800765e:	f043 0320 	orrmi.w	r3, r3, #32
 8007662:	6023      	strmi	r3, [r4, #0]
 8007664:	b91e      	cbnz	r6, 800766e <_printf_i+0x196>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f023 0320 	bic.w	r3, r3, #32
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	2310      	movs	r3, #16
 8007670:	e7b0      	b.n	80075d4 <_printf_i+0xfc>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	f043 0320 	orr.w	r3, r3, #32
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	2378      	movs	r3, #120	; 0x78
 800767c:	4828      	ldr	r0, [pc, #160]	; (8007720 <_printf_i+0x248>)
 800767e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007682:	e7e3      	b.n	800764c <_printf_i+0x174>
 8007684:	0659      	lsls	r1, r3, #25
 8007686:	bf48      	it	mi
 8007688:	b2b6      	uxthmi	r6, r6
 800768a:	e7e6      	b.n	800765a <_printf_i+0x182>
 800768c:	4615      	mov	r5, r2
 800768e:	e7bb      	b.n	8007608 <_printf_i+0x130>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	6826      	ldr	r6, [r4, #0]
 8007694:	6961      	ldr	r1, [r4, #20]
 8007696:	1d18      	adds	r0, r3, #4
 8007698:	6028      	str	r0, [r5, #0]
 800769a:	0635      	lsls	r5, r6, #24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	d501      	bpl.n	80076a4 <_printf_i+0x1cc>
 80076a0:	6019      	str	r1, [r3, #0]
 80076a2:	e002      	b.n	80076aa <_printf_i+0x1d2>
 80076a4:	0670      	lsls	r0, r6, #25
 80076a6:	d5fb      	bpl.n	80076a0 <_printf_i+0x1c8>
 80076a8:	8019      	strh	r1, [r3, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	4615      	mov	r5, r2
 80076b0:	e7ba      	b.n	8007628 <_printf_i+0x150>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	602a      	str	r2, [r5, #0]
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	2100      	movs	r1, #0
 80076be:	4628      	mov	r0, r5
 80076c0:	f7f8 fda6 	bl	8000210 <memchr>
 80076c4:	b108      	cbz	r0, 80076ca <_printf_i+0x1f2>
 80076c6:	1b40      	subs	r0, r0, r5
 80076c8:	6060      	str	r0, [r4, #4]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	e7a8      	b.n	8007628 <_printf_i+0x150>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	462a      	mov	r2, r5
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d0ab      	beq.n	800763c <_printf_i+0x164>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	079b      	lsls	r3, r3, #30
 80076e8:	d413      	bmi.n	8007712 <_printf_i+0x23a>
 80076ea:	68e0      	ldr	r0, [r4, #12]
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	4298      	cmp	r0, r3
 80076f0:	bfb8      	it	lt
 80076f2:	4618      	movlt	r0, r3
 80076f4:	e7a4      	b.n	8007640 <_printf_i+0x168>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4632      	mov	r2, r6
 80076fa:	4649      	mov	r1, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	47d0      	blx	sl
 8007700:	3001      	adds	r0, #1
 8007702:	d09b      	beq.n	800763c <_printf_i+0x164>
 8007704:	3501      	adds	r5, #1
 8007706:	68e3      	ldr	r3, [r4, #12]
 8007708:	9903      	ldr	r1, [sp, #12]
 800770a:	1a5b      	subs	r3, r3, r1
 800770c:	42ab      	cmp	r3, r5
 800770e:	dcf2      	bgt.n	80076f6 <_printf_i+0x21e>
 8007710:	e7eb      	b.n	80076ea <_printf_i+0x212>
 8007712:	2500      	movs	r5, #0
 8007714:	f104 0619 	add.w	r6, r4, #25
 8007718:	e7f5      	b.n	8007706 <_printf_i+0x22e>
 800771a:	bf00      	nop
 800771c:	08007aa5 	.word	0x08007aa5
 8007720:	08007ab6 	.word	0x08007ab6

08007724 <__sread>:
 8007724:	b510      	push	{r4, lr}
 8007726:	460c      	mov	r4, r1
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	f000 f894 	bl	8007858 <_read_r>
 8007730:	2800      	cmp	r0, #0
 8007732:	bfab      	itete	ge
 8007734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007736:	89a3      	ldrhlt	r3, [r4, #12]
 8007738:	181b      	addge	r3, r3, r0
 800773a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800773e:	bfac      	ite	ge
 8007740:	6563      	strge	r3, [r4, #84]	; 0x54
 8007742:	81a3      	strhlt	r3, [r4, #12]
 8007744:	bd10      	pop	{r4, pc}

08007746 <__swrite>:
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	461f      	mov	r7, r3
 800774c:	898b      	ldrh	r3, [r1, #12]
 800774e:	05db      	lsls	r3, r3, #23
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	4616      	mov	r6, r2
 8007756:	d505      	bpl.n	8007764 <__swrite+0x1e>
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	2302      	movs	r3, #2
 800775e:	2200      	movs	r2, #0
 8007760:	f000 f868 	bl	8007834 <_lseek_r>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800776a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	4632      	mov	r2, r6
 8007772:	463b      	mov	r3, r7
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	f000 b817 	b.w	80077ac <_write_r>

0800777e <__sseek>:
 800777e:	b510      	push	{r4, lr}
 8007780:	460c      	mov	r4, r1
 8007782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007786:	f000 f855 	bl	8007834 <_lseek_r>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	bf15      	itete	ne
 8007790:	6560      	strne	r0, [r4, #84]	; 0x54
 8007792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800779a:	81a3      	strheq	r3, [r4, #12]
 800779c:	bf18      	it	ne
 800779e:	81a3      	strhne	r3, [r4, #12]
 80077a0:	bd10      	pop	{r4, pc}

080077a2 <__sclose>:
 80077a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a6:	f000 b813 	b.w	80077d0 <_close_r>
	...

080077ac <_write_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_write_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7f9 fce2 	bl	8001184 <_write>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_write_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_write_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20000864 	.word	0x20000864

080077d0 <_close_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_close_r+0x1c>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7f9 ff13 	bl	8001606 <_close>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_close_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_close_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000864 	.word	0x20000864

080077f0 <_fstat_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	; (8007810 <_fstat_r+0x20>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	f7f9 ff0e 	bl	800161e <_fstat>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d102      	bne.n	800780c <_fstat_r+0x1c>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	b103      	cbz	r3, 800780c <_fstat_r+0x1c>
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	bf00      	nop
 8007810:	20000864 	.word	0x20000864

08007814 <_isatty_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d06      	ldr	r5, [pc, #24]	; (8007830 <_isatty_r+0x1c>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7f9 ff0d 	bl	800163e <_isatty>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_isatty_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_isatty_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20000864 	.word	0x20000864

08007834 <_lseek_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	; (8007854 <_lseek_r+0x20>)
 8007838:	4604      	mov	r4, r0
 800783a:	4608      	mov	r0, r1
 800783c:	4611      	mov	r1, r2
 800783e:	2200      	movs	r2, #0
 8007840:	602a      	str	r2, [r5, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	f7f9 ff06 	bl	8001654 <_lseek>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_lseek_r+0x1e>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_lseek_r+0x1e>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20000864 	.word	0x20000864

08007858 <_read_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_read_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7f9 feb0 	bl	80015cc <_read>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_read_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_read_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	20000864 	.word	0x20000864

0800787c <_init>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr

08007888 <_fini>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr
