
CPP_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc8  08005fc8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08006040  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  080060e0  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  200001b0  08006180  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  08006180  00020864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016580  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ed1  00000000  00000000  00036760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e48  00000000  00000000  00039638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d20  00000000  00000000  0003a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ba27  00000000  00000000  0003b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001368b  00000000  00000000  00066bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f44a1  00000000  00000000  0007a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016e6f3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000045e8  00000000  00000000  0016e744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dc0 	.word	0x08005dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08005dc0 	.word	0x08005dc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000da8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000db0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000db8:	e000      	b.n	8000dbc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000dbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f9      	beq.n	8000dba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 ff22 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f816 	bl	8000e18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x30>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f000 f925 	bl	8001040 <MX_GPIO_Init>
  MX_ETH_Init();
 8000df6:	f000 f877 	bl	8000ee8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dfa:	f000 f8c3 	bl	8000f84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f000 f8f1 	bl	8000fe4 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <main+0x34>)
 8000e04:	f004 f884 	bl	8004f10 <puts>
	  cpp_main();
 8000e08:	f000 fe36 	bl	8001a78 <cpp_main>
	  printf(" C Main started!\n");
 8000e0c:	e7f9      	b.n	8000e02 <main+0x22>
 8000e0e:	bf00      	nop
 8000e10:	e000007c 	.word	0xe000007c
 8000e14:	08005dd8 	.word	0x08005dd8

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	; 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 ff04 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e3c:	f001 feac 	bl	8002b98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e8c:	2348      	movs	r3, #72	; 0x48
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e94:	2303      	movs	r3, #3
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe8b 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f988 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f919 	bl	8003100 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ed4:	f000 f972 	bl	80011bc <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ETH_Init+0x84>)
 8000eee:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <MX_ETH_Init+0x88>)
 8000ef0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f00:	22e1      	movs	r2, #225	; 0xe1
 8000f02:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MX_ETH_Init+0x8c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f22:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <MX_ETH_Init+0x90>)
 8000f28:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_ETH_Init+0x94>)
 8000f2e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f36:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_ETH_Init+0x84>)
 8000f3a:	f000 ffdf 	bl	8001efc <HAL_ETH_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 f93a 	bl	80011bc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f48:	2238      	movs	r2, #56	; 0x38
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f4e:	f003 fe71 	bl	8004c34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f54:	2221      	movs	r2, #33	; 0x21
 8000f56:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f5a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f5e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_ETH_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000204 	.word	0x20000204
 8000f70:	40028000 	.word	0x40028000
 8000f74:	20000844 	.word	0x20000844
 8000f78:	20000110 	.word	0x20000110
 8000f7c:	20000070 	.word	0x20000070
 8000f80:	200001cc 	.word	0x200001cc

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_USART3_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc8:	f002 feb0 	bl	8003d2c <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f8f3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002b4 	.word	0x200002b4
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	2202      	movs	r2, #2
 8001006:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2201      	movs	r2, #1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	f001 fc6d 	bl	8002906 <HAL_PCD_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f8c3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000033c 	.word	0x2000033c

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <MX_GPIO_Init+0x134>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a46      	ldr	r2, [pc, #280]	; (8001174 <MX_GPIO_Init+0x134>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <MX_GPIO_Init+0x134>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <MX_GPIO_Init+0x134>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a40      	ldr	r2, [pc, #256]	; (8001174 <MX_GPIO_Init+0x134>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MX_GPIO_Init+0x134>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <MX_GPIO_Init+0x134>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a3a      	ldr	r2, [pc, #232]	; (8001174 <MX_GPIO_Init+0x134>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <MX_GPIO_Init+0x134>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <MX_GPIO_Init+0x134>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a34      	ldr	r2, [pc, #208]	; (8001174 <MX_GPIO_Init+0x134>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <MX_GPIO_Init+0x134>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <MX_GPIO_Init+0x134>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a2e      	ldr	r2, [pc, #184]	; (8001174 <MX_GPIO_Init+0x134>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <MX_GPIO_Init+0x134>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MX_GPIO_Init+0x134>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <MX_GPIO_Init+0x134>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_GPIO_Init+0x134>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010ec:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_GPIO_Init+0x138>)
 80010ee:	f001 fbd7 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	4821      	ldr	r0, [pc, #132]	; (800117c <MX_GPIO_Init+0x13c>)
 80010f8:	f001 fbd2 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <MX_GPIO_Init+0x140>)
 8001114:	f001 fa18 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin;
 8001118:	f244 0381 	movw	r3, #16513	; 0x4081
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_GPIO_Init+0x138>)
 8001132:	f001 fa09 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0x13c>)
 800114e:	f001 f9fb 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0x13c>)
 8001166:	f001 f9ef 	bl	8002548 <HAL_GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400
 800117c:	40021800 	.word	0x40021800
 8001180:	40020800 	.word	0x40020800

08001184 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e009      	b.n	80011aa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fdf6 	bl	8000d90 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dbf1      	blt.n	8001196 <_write+0x12>
  }
  return len;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_ETH_MspInit+0x158>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f040 8096 	bne.w	8001360 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b4a      	ldr	r3, [pc, #296]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a40      	ldr	r2, [pc, #256]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800126a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_ETH_MspInit+0x15c>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a2e      	ldr	r2, [pc, #184]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ETH_MspInit+0x15c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012dc:	2332      	movs	r3, #50	; 0x32
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ec:	230b      	movs	r3, #11
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	481e      	ldr	r0, [pc, #120]	; (8001370 <HAL_ETH_MspInit+0x160>)
 80012f8:	f001 f926 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012fc:	2386      	movs	r3, #134	; 0x86
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130c:	230b      	movs	r3, #11
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <HAL_ETH_MspInit+0x164>)
 8001318:	f001 f916 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <HAL_ETH_MspInit+0x168>)
 800133a:	f001 f905 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800133e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001350:	230b      	movs	r3, #11
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ETH_MspInit+0x16c>)
 800135c:	f001 f8f4 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40028000 	.word	0x40028000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40021800 	.word	0x40021800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0aa      	sub	sp, #168	; 0xa8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2284      	movs	r2, #132	; 0x84
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fc47 	bl	8004c34 <memset>
  if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13c      	bne.n	800142a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f8c4 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ca:	f7ff fef7 	bl	80011bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_UART_MspInit+0xbc>)
 8001426:	f001 f88f 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	37a8      	adds	r7, #168	; 0xa8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40004800 	.word	0x40004800
 8001438:	40023800 	.word	0x40023800
 800143c:	40020c00 	.word	0x40020c00

08001440 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ac      	sub	sp, #176	; 0xb0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2284      	movs	r2, #132	; 0x84
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fbe7 	bl	8004c34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146e:	d159      	bne.n	8001524 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001474:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f863 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800148c:	f7ff fe96 	bl	80011bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_PCD_MspInit+0xec>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014c2:	230a      	movs	r3, #10
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_PCD_MspInit+0xf0>)
 80014d0:	f001 f83a 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_PCD_MspInit+0xf0>)
 80014f0:	f001 f82a 	bl	8002548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_PCD_MspInit+0xec>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_PCD_MspInit+0xec>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_PCD_MspInit+0xec>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_PCD_MspInit+0xec>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6453      	str	r3, [r2, #68]	; 0x44
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_PCD_MspInit+0xec>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	37b0      	adds	r7, #176	; 0xb0
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 fb92 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a2:	f003 fb0d 	bl	8004bc0 <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0x12>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
	}

return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f003 fa8e 	bl	8004bc0 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20050000 	.word	0x20050000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	2000084c 	.word	0x2000084c
 80016d8:	20000868 	.word	0x20000868

080016dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f003 fa4d 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fb55 	bl	8000de0 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001744:	08005fd0 	.word	0x08005fd0
  ldr r2, =_sbss
 8001748:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800174c:	20000864 	.word	0x20000864

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>

08001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>:
	uint32_t DelayNoneBlocking_tickstart; 	// last_time
public:
	NoneBlockSystemTickDelay();
	virtual ~NoneBlockSystemTickDelay();

	void DelayNonBlocking_Init(uint32_t Delay) {
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
		DelayNoneBlocking_wait = Delay;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	605a      	str	r2, [r3, #4]
		DelayNoneBlocking_tickstart = HAL_GetTick();
 8001762:	f000 fab5 	bl	8001cd0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
	}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>:

	uint8_t DelayNonBlocking_CheckExpiration() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
		// 1: Toggle LED!
		// 0: Don't Toggle LED!
		if(HAL_GetTick() - DelayNoneBlocking_wait > DelayNoneBlocking_tickstart)
 800177c:	f000 faa8 	bl	8001cd0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	bf8c      	ite	hi
 8001790:	2301      	movhi	r3, #1
 8001792:	2300      	movls	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x34>
		{
			DelayNoneBlocking_tickstart = HAL_GetTick();
 800179a:	f000 fa99 	bl	8001cd0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
			return 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x36>
		}
		else
		{
			return 0;
 80017a8:	2300      	movs	r3, #0
		}
	}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN5myHal10STM32H7Led9toggleLEDEv>:
public:
	STM32H7Led(GPIO_TypeDef* aPort,
			   uint16_t aPin);
	virtual ~STM32H7Led();

	const void toggleLED(void) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(Port, Pin);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f001 f884 	bl	80028d2 <HAL_GPIO_TogglePin>
	}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>:
 *      Author: raphael.baumeler
 */

#include "BlinkingLed.h"

BlinkingLed::BlinkingLed(GPIO_TypeDef *aPort, uint16_t aPin, float_t aFrequency, uint16_t aDutyCycle)	:
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4611      	mov	r1, r2
 80017e0:	ed87 0a00 	vstr	s0, [r7]
 80017e4:	461a      	mov	r2, r3
 80017e6:	460b      	mov	r3, r1
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80bb      	strh	r3, [r7, #4]
STM32H7Led(aPort, aPin), Frequency(aFrequency), DutyCycle(aDutyCycle)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f899 	bl	8001928 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	330c      	adds	r3, #12
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8c2 	bl	8001988 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xa8>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xac>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	88ba      	ldrh	r2, [r7, #4]
 800181a:	839a      	strh	r2, [r3, #28]
{
	uint32_t Delay = uint32_t((1000.0/aFrequency)*(aDutyCycle/100.0)); //in ms
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	f7fe feab 	bl	8000578 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	4916      	ldr	r1, [pc, #88]	; (8001884 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb0>)
 800182c:	f7ff f826 	bl	800087c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe8a 	bl	8000554 <__aeabi_i2d>
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb4>)
 8001846:	f7ff f819 	bl	800087c <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fee9 	bl	8000628 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f8f5 	bl	8000a4c <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	617b      	str	r3, [r7, #20]
	NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff71 	bl	8001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
}
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	bf00      	nop
 800187c:	08005e40 	.word	0x08005e40
 8001880:	08005e50 	.word	0x08005e50
 8001884:	408f4000 	.word	0x408f4000
 8001888:	40590000 	.word	0x40590000

0800188c <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <_ZN11BlinkingLedD1Ev+0x30>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <_ZN11BlinkingLedD1Ev+0x34>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	330c      	adds	r3, #12
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f889 	bl	80019bc <_ZN5myHal10STM32H7LedD1Ev>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f84b 	bl	8001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
}
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08005e40 	.word	0x08005e40
 80018c0:	08005e50 	.word	0x08005e50

080018c4 <_ZThn12_N11BlinkingLedD1Ev>:
public:
	BlinkingLed(GPIO_TypeDef* aPort,
				uint16_t aPin,
			    float_t aFrequency=1,
			    uint16_t aDutyCycle=50);
	virtual ~BlinkingLed();
 80018c4:	f1a0 000c 	sub.w	r0, r0, #12
 80018c8:	f7ff bfe0 	b.w	800188c <_ZN11BlinkingLedD1Ev>

080018cc <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
}
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffd9 	bl	800188c <_ZN11BlinkingLedD1Ev>
 80018da:	2120      	movs	r1, #32
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f003 f96b 	bl	8004bb8 <_ZdlPvj>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZThn12_N11BlinkingLedD0Ev>:
 80018ec:	f1a0 000c 	sub.w	r0, r0, #12
 80018f0:	f7ff bfec 	b.w	80018cc <_ZN11BlinkingLedD0Ev>

080018f4 <_ZN11BlinkingLed15processBlinkingEv>:

const void BlinkingLed::processBlinking() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(NoneBlockSystemTickDelay::DelayNonBlocking_CheckExpiration())
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff38 	bl	8001774 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <_ZN11BlinkingLed15processBlinkingEv+0x2a>
	{
		STM32H7Led::toggleLED();
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	330c      	adds	r3, #12
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff4a 	bl	80017b2 <_ZN5myHal10STM32H7Led9toggleLEDEv>
	}
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>:
 *      Author: raphael.baumeler
 */

#include "NoneBlockSystemTickDelay.h"

myHal::NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev+0x1c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]

}
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	08005e60 	.word	0x08005e60

08001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>:

myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev+0x1c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]

}
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	08005e60 	.word	0x08005e60

08001968 <_ZN5myHal24NoneBlockSystemTickDelayD0Ev>:
myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
}
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffe9 	bl	8001948 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
 8001976:	210c      	movs	r1, #12
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f003 f91d 	bl	8004bb8 <_ZdlPvj>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

myHal::STM32H7Led::STM32H7Led(GPIO_TypeDef *aPort, uint16_t aPin)	:
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
Port(aPort), Pin(aPin)
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	811a      	strh	r2, [r3, #8]
{
}
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	08005e70 	.word	0x08005e70

080019bc <_ZN5myHal10STM32H7LedD1Ev>:

myHal::STM32H7Led::~STM32H7Led() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <_ZN5myHal10STM32H7LedD1Ev+0x1c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	08005e70 	.word	0x08005e70

080019dc <_ZN5myHal10STM32H7LedD0Ev>:
myHal::STM32H7Led::~STM32H7Led() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
}
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe9 	bl	80019bc <_ZN5myHal10STM32H7LedD1Ev>
 80019ea:	210c      	movs	r1, #12
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f003 f8e3 	bl	8004bb8 <_ZdlPvj>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN11BlinkingLed12setFrequencyEf>:
		DutyCycle = dutyCycle;
		// uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
		// NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
	}

	void setFrequency(float_t frequency) {
 80019fc:	b5b0      	push	{r4, r5, r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	ed87 0a00 	vstr	s0, [r7]
		Frequency = frequency;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	619a      	str	r2, [r3, #24]
		uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdb0 	bl	8000578 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	4913      	ldr	r1, [pc, #76]	; (8001a70 <_ZN11BlinkingLed12setFrequencyEf+0x74>)
 8001a22:	f7fe ff2b 	bl	800087c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8b9b      	ldrh	r3, [r3, #28]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd8e 	bl	8000554 <__aeabi_i2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <_ZN11BlinkingLed12setFrequencyEf+0x78>)
 8001a3e:	f7fe ff1d 	bl	800087c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fded 	bl	8000628 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe fff9 	bl	8000a4c <__aeabi_d2uiz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60fb      	str	r3, [r7, #12]
		NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe75 	bl	8001752 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
	}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a70:	408f4000 	.word	0x408f4000
 8001a74:	40590000 	.word	0x40590000

08001a78 <cpp_main>:
#include "BlinkingLed.h"

template <typename dataType>
const dataType calcAverage(const dataType *arr, const int len);

void cpp_main(){
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b09e      	sub	sp, #120	; 0x78
 8001a7e:	af00      	add	r7, sp, #0
	printf("CPP Main started!\n");
 8001a80:	484f      	ldr	r0, [pc, #316]	; (8001bc0 <cpp_main+0x148>)
 8001a82:	f003 fa45 	bl	8004f10 <puts>
	int16_t l = 6;
 8001a86:	2306      	movs	r3, #6
 8001a88:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	int16_t arr[l];
 8001a8c:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001a90:	1e59      	subs	r1, r3, #1
 8001a92:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001a94:	460b      	mov	r3, r1
 8001a96:	3301      	adds	r3, #1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	4691      	mov	r9, r2
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001aaa:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001aae:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	461c      	mov	r4, r3
 8001aba:	4615      	mov	r5, r2
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	012b      	lsls	r3, r5, #4
 8001ac6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001aca:	0122      	lsls	r2, r4, #4
 8001acc:	460b      	mov	r3, r1
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	ebad 0d03 	sub.w	sp, sp, r3
 8001adc:	466b      	mov	r3, sp
 8001ade:	3301      	adds	r3, #1
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	66bb      	str	r3, [r7, #104]	; 0x68
	for (int i = 0; i < l; i++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	677b      	str	r3, [r7, #116]	; 0x74
 8001aea:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001aee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001af0:	429a      	cmp	r2, r3
 8001af2:	da18      	bge.n	8001b26 <cpp_main+0xae>
	  arr[i] =  (rand() % 100) + 1; //rand() 1...100
 8001af4:	f003 fa14 	bl	8004f20 <rand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <cpp_main+0x14c>)
 8001afc:	fb82 1203 	smull	r1, r2, r2, r3
 8001b00:	1151      	asrs	r1, r2, #5
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	1a8a      	subs	r2, r1, r2
 8001b06:	2164      	movs	r1, #100	; 0x64
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
 8001b0c:	1a9a      	subs	r2, r3, r2
 8001b0e:	b293      	uxth	r3, r2
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b219      	sxth	r1, r3
 8001b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < l; i++) {
 8001b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b20:	3301      	adds	r3, #1
 8001b22:	677b      	str	r3, [r7, #116]	; 0x74
 8001b24:	e7e1      	b.n	8001aea <cpp_main+0x72>
	}
	int16_t avg = calcAverage(arr, l);
 8001b26:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001b2e:	f000 f84f 	bl	8001bd0 <_Z11calcAverageIsEKT_PS1_i>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	printf("Average: %d\n", avg);
 8001b38:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4822      	ldr	r0, [pc, #136]	; (8001bc8 <cpp_main+0x150>)
 8001b40:	f003 f960 	bl	8004e04 <iprintf>
	BlinkingLed LED1(LD1_green_GPIO_Port, LD1_green_Pin);
 8001b44:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001b48:	2332      	movs	r3, #50	; 0x32
 8001b4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b4e:	2201      	movs	r2, #1
 8001b50:	491e      	ldr	r1, [pc, #120]	; (8001bcc <cpp_main+0x154>)
 8001b52:	f7ff fe3f 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED1.setFrequency(2);	//PB_0:  2Hz, toggle every 250ms
 8001b56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff4c 	bl	80019fc <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED2(LD2_blue_GPIO_Port, LD2_blue_Pin);
 8001b64:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b68:	2332      	movs	r3, #50	; 0x32
 8001b6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <cpp_main+0x154>)
 8001b72:	f7ff fe2f 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED2.setFrequency(1);	//PB_7:  1Hz, toggle every 500ms
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff3c 	bl	80019fc <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED3(LD3_red_GPIO_Port, LD3_red_Pin);
 8001b84:	1d38      	adds	r0, r7, #4
 8001b86:	2332      	movs	r3, #50	; 0x32
 8001b88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <cpp_main+0x154>)
 8001b92:	f7ff fe1f 	bl	80017d4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED3.setFrequency(0.5);	//PB_14: 0.5Hz, toggle every 1000ms
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff2d 	bl	80019fc <_ZN11BlinkingLed12setFrequencyEf>
	while(1){
		LED1.processBlinking();
 8001ba2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fea4 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED2.processBlinking();
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe9f 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED3.processBlinking();
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe9b 	bl	80018f4 <_ZN11BlinkingLed15processBlinkingEv>
		LED1.processBlinking();
 8001bbe:	e7f0      	b.n	8001ba2 <cpp_main+0x12a>
 8001bc0:	08005dec 	.word	0x08005dec
 8001bc4:	51eb851f 	.word	0x51eb851f
 8001bc8:	08005e00 	.word	0x08005e00
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <_Z11calcAverageIsEKT_PS1_i>:
	}
}

template <typename dataType>
const dataType calcAverage(const dataType *arr, const int len)
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
{
	printf("Array Size: %d\n", len);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <_Z11calcAverageIsEKT_PS1_i+0x58>)
 8001bde:	f003 f911 	bl	8004e04 <iprintf>
	dataType sum = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	da0e      	bge.n	8001c10 <_Z11calcAverageIsEKT_PS1_i+0x40>
	  sum =  sum + arr[i];
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++) {
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e7ec      	b.n	8001bea <_Z11calcAverageIsEKT_PS1_i+0x1a>
	}
	dataType avg = sum/len;
 8001c10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1a:	81fb      	strh	r3, [r7, #14]
	return avg;
 8001c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08005e10 	.word	0x08005e10

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f92f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f806 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3c:	f7ff fac4 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f93b 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f911 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000850 	.word	0x20000850

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000850 	.word	0x20000850

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008

08001d30 <__NVIC_SetPriorityGrouping>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	05fa0000 	.word	0x05fa0000

08001d78 <__NVIC_GetPriorityGrouping>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_SetPriority>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff47 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff5c 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffb0 	bl	8001e50 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06a      	b.n	8001fe4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2223      	movs	r2, #35	; 0x23
 8001f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff f975 	bl	8001210 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_ETH_Init+0xf0>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a30      	ldr	r2, [pc, #192]	; (8001fec <HAL_ETH_Init+0xf0>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_ETH_Init+0xf0>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f48:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4927      	ldr	r1, [pc, #156]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_ETH_Init+0xf4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f74:	f7ff feac 	bl	8001cd0 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f7a:	e011      	b.n	8001fa0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f7c:	f7ff fea8 	bl	8001cd0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8a:	d909      	bls.n	8001fa0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	22e0      	movs	r2, #224	; 0xe0
 8001f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e021      	b.n	8001fe4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e4      	bne.n	8001f7c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f958 	bl	8002268 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f9ff 	bl	80023bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fa55 	bl	800246e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2100      	movs	r1, #0
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9bd 	bl	800234c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800

08001ff4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4b51      	ldr	r3, [pc, #324]	; (8002150 <ETH_SetMACConfig+0x15c>)
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7c1b      	ldrb	r3, [r3, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <ETH_SetMACConfig+0x28>
 8002016:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800201a:	e000      	b.n	800201e <ETH_SetMACConfig+0x2a>
 800201c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7c5b      	ldrb	r3, [r3, #17]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <ETH_SetMACConfig+0x38>
 8002026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202a:	e000      	b.n	800202e <ETH_SetMACConfig+0x3a>
 800202c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800202e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002034:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	7fdb      	ldrb	r3, [r3, #31]
 800203a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800203c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	7f92      	ldrb	r2, [r2, #30]
 8002048:	2a00      	cmp	r2, #0
 800204a:	d102      	bne.n	8002052 <ETH_SetMACConfig+0x5e>
 800204c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002050:	e000      	b.n	8002054 <ETH_SetMACConfig+0x60>
 8002052:	2200      	movs	r2, #0
                        macconf->Speed |
 8002054:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	7f1b      	ldrb	r3, [r3, #28]
 800205a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800205c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002062:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800206a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002072:	2a00      	cmp	r2, #0
 8002074:	d102      	bne.n	800207c <ETH_SetMACConfig+0x88>
 8002076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207a:	e000      	b.n	800207e <ETH_SetMACConfig+0x8a>
 800207c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800207e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7bdb      	ldrb	r3, [r3, #15]
 8002084:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002086:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800208c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002094:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002096:	4313      	orrs	r3, r2
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fe1a 	bl	8001ce8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020da:	2a00      	cmp	r2, #0
 80020dc:	d101      	bne.n	80020e2 <ETH_SetMACConfig+0xee>
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	e000      	b.n	80020e4 <ETH_SetMACConfig+0xf0>
 80020e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d101      	bne.n	80020fa <ETH_SetMACConfig+0x106>
 80020f6:	2208      	movs	r2, #8
 80020f8:	e000      	b.n	80020fc <ETH_SetMACConfig+0x108>
 80020fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002104:	2a01      	cmp	r2, #1
 8002106:	d101      	bne.n	800210c <ETH_SetMACConfig+0x118>
 8002108:	2204      	movs	r2, #4
 800210a:	e000      	b.n	800210e <ETH_SetMACConfig+0x11a>
 800210c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800210e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002116:	2a01      	cmp	r2, #1
 8002118:	d101      	bne.n	800211e <ETH_SetMACConfig+0x12a>
 800211a:	2202      	movs	r2, #2
 800211c:	e000      	b.n	8002120 <ETH_SetMACConfig+0x12c>
 800211e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002120:	4313      	orrs	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff fdd5 	bl	8001ce8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	ff20810f 	.word	0xff20810f

08002154 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <ETH_SetDMAConfig+0x110>)
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7b1b      	ldrb	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <ETH_SetDMAConfig+0x2c>
 800217a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800217e:	e000      	b.n	8002182 <ETH_SetDMAConfig+0x2e>
 8002180:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7b5b      	ldrb	r3, [r3, #13]
 8002186:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002188:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	7f52      	ldrb	r2, [r2, #29]
 800218e:	2a00      	cmp	r2, #0
 8002190:	d102      	bne.n	8002198 <ETH_SetDMAConfig+0x44>
 8002192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002196:	e000      	b.n	800219a <ETH_SetDMAConfig+0x46>
 8002198:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800219a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7b9b      	ldrb	r3, [r3, #14]
 80021a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7f1b      	ldrb	r3, [r3, #28]
 80021ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7f9b      	ldrb	r3, [r3, #30]
 80021b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7ff fd7c 	bl	8001ce8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	791b      	ldrb	r3, [r3, #4]
 8002202:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002208:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800220e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002214:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800221c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800221e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002226:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800222c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fd4d 	bl	8001ce8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	f8de3f23 	.word	0xf8de3f23

08002268 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0a6      	sub	sp, #152	; 0x98
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002292:	2301      	movs	r3, #1
 8002294:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022a4:	2300      	movs	r3, #0
 80022a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fe86 	bl	8001ff4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002314:	2301      	movs	r3, #1
 8002316:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800231e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002322:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002328:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4619      	mov	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff08 	bl	8002154 <ETH_SetDMAConfig>
}
 8002344:	bf00      	nop
 8002346:	3798      	adds	r7, #152	; 0x98
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3305      	adds	r3, #5
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	3204      	adds	r2, #4
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <ETH_MACAddressConfig+0x68>)
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3303      	adds	r3, #3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	061a      	lsls	r2, r3, #24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3302      	adds	r3, #2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3301      	adds	r3, #1
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	4313      	orrs	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <ETH_MACAddressConfig+0x6c>)
 800239e:	4413      	add	r3, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40028040 	.word	0x40028040
 80023b8:	40028044 	.word	0x40028044

080023bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e03e      	b.n	8002448 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	3206      	adds	r2, #6
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d80c      	bhi.n	800242c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68d9      	ldr	r1, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	e004      	b.n	8002436 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d9bd      	bls.n	80023ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	611a      	str	r2, [r3, #16]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e046      	b.n	800250a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80024c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	3212      	adds	r2, #18
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d80c      	bhi.n	80024fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6919      	ldr	r1, [r3, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	e004      	b.n	8002504 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d9b5      	bls.n	800247c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253a:	60da      	str	r2, [r3, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e175      	b.n	8002854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8164 	bne.w	800284e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x56>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80be 	beq.w	800284e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_GPIO_Init+0x324>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_GPIO_Init+0x324>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_GPIO_Init+0x324>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ea:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_GPIO_Init+0x328>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_GPIO_Init+0x32c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d037      	beq.n	8002786 <HAL_GPIO_Init+0x23e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a57      	ldr	r2, [pc, #348]	; (8002878 <HAL_GPIO_Init+0x330>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d031      	beq.n	8002782 <HAL_GPIO_Init+0x23a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a56      	ldr	r2, [pc, #344]	; (800287c <HAL_GPIO_Init+0x334>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x236>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a55      	ldr	r2, [pc, #340]	; (8002880 <HAL_GPIO_Init+0x338>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x232>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a54      	ldr	r2, [pc, #336]	; (8002884 <HAL_GPIO_Init+0x33c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x22e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a53      	ldr	r2, [pc, #332]	; (8002888 <HAL_GPIO_Init+0x340>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x22a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_GPIO_Init+0x344>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x226>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_GPIO_Init+0x348>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x222>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_GPIO_Init+0x34c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_GPIO_Init+0x350>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x21a>
 800275e:	2309      	movs	r3, #9
 8002760:	e012      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002762:	230a      	movs	r3, #10
 8002764:	e010      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002766:	2308      	movs	r3, #8
 8002768:	e00e      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800276a:	2307      	movs	r3, #7
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800276e:	2306      	movs	r3, #6
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002786:	2300      	movs	r3, #0
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002798:	4935      	ldr	r1, [pc, #212]	; (8002870 <HAL_GPIO_Init+0x328>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_GPIO_Init+0x354>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ca:	4a34      	ldr	r2, [pc, #208]	; (800289c <HAL_GPIO_Init+0x354>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_GPIO_Init+0x354>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_GPIO_Init+0x354>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fa:	4b28      	ldr	r3, [pc, #160]	; (800289c <HAL_GPIO_Init+0x354>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_GPIO_Init+0x354>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_GPIO_Init+0x354>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_GPIO_Init+0x354>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	f67f ae86 	bls.w	8002568 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021400 	.word	0x40021400
 800288c:	40021800 	.word	0x40021800
 8002890:	40021c00 	.word	0x40021c00
 8002894:	40022000 	.word	0x40022000
 8002898:	40022400 	.word	0x40022400
 800289c:	40013c00 	.word	0x40013c00

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	041a      	lsls	r2, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	400b      	ands	r3, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002906:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002908:	b08f      	sub	sp, #60	; 0x3c
 800290a:	af0a      	add	r7, sp, #40	; 0x28
 800290c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e116      	b.n	8002b46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fd84 	bl	8001440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2203      	movs	r2, #3
 800293c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fe92 	bl	8004680 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	687e      	ldr	r6, [r7, #4]
 8002964:	466d      	mov	r5, sp
 8002966:	f106 0410 	add.w	r4, r6, #16
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002976:	e885 0003 	stmia.w	r5, {r0, r1}
 800297a:	1d33      	adds	r3, r6, #4
 800297c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	f001 fe26 	bl	80045d0 <USB_CoreInit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0d7      	b.n	8002b46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fe80 	bl	80046a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e04a      	b.n	8002a3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333d      	adds	r3, #61	; 0x3d
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	333c      	adds	r3, #60	; 0x3c
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	b298      	uxth	r0, r3
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3344      	adds	r3, #68	; 0x44
 80029e4:	4602      	mov	r2, r0
 80029e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3340      	adds	r3, #64	; 0x40
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3348      	adds	r3, #72	; 0x48
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	334c      	adds	r3, #76	; 0x4c
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3354      	adds	r3, #84	; 0x54
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3af      	bcc.n	80029a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e044      	b.n	8002ad8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3b5      	bcc.n	8002a4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	687e      	ldr	r6, [r7, #4]
 8002aea:	466d      	mov	r5, sp
 8002aec:	f106 0410 	add.w	r4, r6, #16
 8002af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002afc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b00:	1d33      	adds	r3, r6, #4
 8002b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b04:	6838      	ldr	r0, [r7, #0]
 8002b06:	f001 fe19 	bl	800473c <USB_DevInit>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e014      	b.n	8002b46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f80b 	bl	8002b50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 ffd7 	bl	8004af2 <USB_DevDisconnect>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	10000003 	.word	0x10000003

08002b98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e291      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8087 	beq.w	8002cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	4b96      	ldr	r3, [pc, #600]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be8:	4b93      	ldr	r3, [pc, #588]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
 8002bf4:	4b90      	ldr	r3, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b8d      	ldr	r3, [pc, #564]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x130>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d168      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e26b      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x7a>
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x9c>
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7b      	ldr	r2, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a72      	ldr	r2, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c78:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6b      	ldr	r2, [pc, #428]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff f81a 	bl	8001cd0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f816 	bl	8001cd0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e21f      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f806 	bl	8001cd0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f802 	bl	8001cd0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e20b      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x110>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d069      	beq.n	8002dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1df      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	493d      	ldr	r1, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e040      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ffb8 	bl	8001cd0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe ffb4 	bl	8001cd0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1bd      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4929      	ldr	r1, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe ff94 	bl	8001cd0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe ff90 	bl	8001cd0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e199      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d038      	beq.n	8002e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe ff71 	bl	8001cd0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe ff6d 	bl	8001cd0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e176      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x23a>
 8002e10:	e01a      	b.n	8002e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe ff57 	bl	8001cd0 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe ff53 	bl	8001cd0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d903      	bls.n	8002e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e15c      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
 8002e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b91      	ldr	r3, [pc, #580]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a4 	beq.w	8002f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b82      	ldr	r3, [pc, #520]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7e      	ldr	r2, [pc, #504]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe ff1b 	bl	8001cd0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe ff17 	bl	8001cd0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e120      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31a>
 8002ec4:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a6e      	ldr	r2, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e02d      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x33c>
 8002eda:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a69      	ldr	r2, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a66      	ldr	r2, [pc, #408]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	e01c      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x35e>
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a60      	ldr	r2, [pc, #384]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a57      	ldr	r2, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fecb 	bl	8001cd0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fec7 	bl	8001cd0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0ce      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ee      	beq.n	8002f3e <HAL_RCC_OscConfig+0x386>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe feb5 	bl	8001cd0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe feb1 	bl	8001cd0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80a4 	beq.w	80030f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d149      	bne.n	8003050 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a30      	ldr	r2, [pc, #192]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe82 	bl	8001cd0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fe7e 	bl	8001cd0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e087      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	4313      	orrs	r3, r2
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800301a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a18      	ldr	r2, [pc, #96]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fe52 	bl	8001cd0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fe4e 	bl	8001cd0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e057      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x478>
 800304e:	e04f      	b.n	80030f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fe38 	bl	8001cd0 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe fe34 	bl	8001cd0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e03d      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_OscConfig+0x4cc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x4ac>
 8003082:	e035      	b.n	80030f0 <HAL_RCC_OscConfig+0x538>
 8003084:	40023800 	.word	0x40023800
 8003088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x544>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d028      	beq.n	80030ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d121      	bne.n	80030ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d11a      	bne.n	80030ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	3b01      	subs	r3, #1
 80030d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d0      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d910      	bls.n	8003148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4965      	ldr	r1, [pc, #404]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d040      	beq.n	8003224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e073      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06b      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4936      	ldr	r1, [pc, #216]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fd6c 	bl	8001cd0 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fd68 	bl	8001cd0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e053      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d210      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 020f 	bic.w	r2, r3, #15
 800323a:	4922      	ldr	r1, [pc, #136]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f821 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	490a      	ldr	r1, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1cc>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x1d0>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fcc8 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08005e20 	.word	0x08005e20
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b094      	sub	sp, #80	; 0x50
 80032de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
 80032e4:	2300      	movs	r3, #0
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e8:	2300      	movs	r3, #0
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f0:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d00d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x40>
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	f200 80e1 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x34>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x3a>
 800330a:	e0db      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_GetSysClockFreq+0x204>)
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003310:	e0db      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003316:	e0d8      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003322:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	2200      	movs	r2, #0
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
 8003338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
 8003346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	0159      	lsls	r1, r3, #5
 8003358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335c:	0150      	lsls	r0, r2, #5
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4621      	mov	r1, r4
 8003364:	1a51      	subs	r1, r2, r1
 8003366:	6139      	str	r1, [r7, #16]
 8003368:	4629      	mov	r1, r5
 800336a:	eb63 0301 	sbc.w	r3, r3, r1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800337c:	4659      	mov	r1, fp
 800337e:	018b      	lsls	r3, r1, #6
 8003380:	4651      	mov	r1, sl
 8003382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003386:	4651      	mov	r1, sl
 8003388:	018a      	lsls	r2, r1, #6
 800338a:	4651      	mov	r1, sl
 800338c:	ebb2 0801 	subs.w	r8, r2, r1
 8003390:	4659      	mov	r1, fp
 8003392:	eb63 0901 	sbc.w	r9, r3, r1
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	eb18 0303 	adds.w	r3, r8, r3
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	462b      	mov	r3, r5
 80033b8:	eb49 0303 	adc.w	r3, r9, r3
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ca:	4629      	mov	r1, r5
 80033cc:	024b      	lsls	r3, r1, #9
 80033ce:	4621      	mov	r1, r4
 80033d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033d4:	4621      	mov	r1, r4
 80033d6:	024a      	lsls	r2, r1, #9
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033de:	2200      	movs	r2, #0
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e8:	f7fd fb50 	bl	8000a8c <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f4:	e058      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	4611      	mov	r1, r2
 8003402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	f04f 0000 	mov.w	r0, #0
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	0159      	lsls	r1, r3, #5
 800341e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003422:	0150      	lsls	r0, r2, #5
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4641      	mov	r1, r8
 800342a:	ebb2 0a01 	subs.w	sl, r2, r1
 800342e:	4649      	mov	r1, r9
 8003430:	eb63 0b01 	sbc.w	fp, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003448:	ebb2 040a 	subs.w	r4, r2, sl
 800344c:	eb63 050b 	sbc.w	r5, r3, fp
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	00eb      	lsls	r3, r5, #3
 800345a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800345e:	00e2      	lsls	r2, r4, #3
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	4643      	mov	r3, r8
 8003466:	18e3      	adds	r3, r4, r3
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	464b      	mov	r3, r9
 800346c:	eb45 0303 	adc.w	r3, r5, r3
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347e:	4629      	mov	r1, r5
 8003480:	028b      	lsls	r3, r1, #10
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003488:	4621      	mov	r1, r4
 800348a:	028a      	lsls	r2, r1, #10
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	61fa      	str	r2, [r7, #28]
 8003498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349c:	f7fd faf6 	bl	8000a8c <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c2:	e002      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetSysClockFreq+0x204>)
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3750      	adds	r7, #80	; 0x50
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200

080034e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	08005e30 	.word	0x08005e30

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003528:	f7ff ffdc 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0b5b      	lsrs	r3, r3, #13
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	08005e30 	.word	0x08005e30

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800357e:	6093      	str	r3, [r2, #8]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4964      	ldr	r1, [pc, #400]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	4959      	ldr	r1, [pc, #356]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e2:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	494a      	ldr	r1, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 808b 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a39      	ldr	r2, [pc, #228]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003648:	4b35      	ldr	r3, [pc, #212]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fe fb3c 	bl	8001cd0 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fe fb38 	bl	8001cd0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e357      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d035      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d02e      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d114      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fb00 	bl	8001cd0 <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fafc 	bl	8001cd0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e319      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003702:	d111      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003712:	400b      	ands	r3, r1
 8003714:	4901      	ldr	r1, [pc, #4]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
 800371a:	e00b      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	0ffffcff 	.word	0x0ffffcff
 8003728:	4baa      	ldr	r3, [pc, #680]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4aa9      	ldr	r2, [pc, #676]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	4ba7      	ldr	r3, [pc, #668]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	49a4      	ldr	r1, [pc, #656]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	4313      	orrs	r3, r2
 8003744:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003752:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003758:	4a9e      	ldr	r2, [pc, #632]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003762:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003764:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	4999      	ldr	r1, [pc, #612]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003780:	4b94      	ldr	r3, [pc, #592]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378e:	4991      	ldr	r1, [pc, #580]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a2:	4b8c      	ldr	r3, [pc, #560]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b0:	4988      	ldr	r1, [pc, #544]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c4:	4b83      	ldr	r3, [pc, #524]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	4980      	ldr	r1, [pc, #512]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4977      	ldr	r1, [pc, #476]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003808:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	496f      	ldr	r1, [pc, #444]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f023 020c 	bic.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	4966      	ldr	r1, [pc, #408]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	495e      	ldr	r1, [pc, #376]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	4955      	ldr	r1, [pc, #340]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	494d      	ldr	r1, [pc, #308]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038b2:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	4944      	ldr	r1, [pc, #272]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	493c      	ldr	r1, [pc, #240]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	4933      	ldr	r1, [pc, #204]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003918:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003926:	492b      	ldr	r1, [pc, #172]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d011      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	4922      	ldr	r1, [pc, #136]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	4912      	ldr	r1, [pc, #72]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	4909      	ldr	r1, [pc, #36]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d006      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80d9 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a01      	ldr	r2, [pc, #4]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039d2:	e001      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fe f979 	bl	8001cd0 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e2:	f7fe f975 	bl	8001cd0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e194      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f4:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d021      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11d      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a22:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a28:	0e1b      	lsrs	r3, r3, #24
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	019a      	lsls	r2, r3, #6
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	071b      	lsls	r3, r3, #28
 8003a48:	4957      	ldr	r1, [pc, #348]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02e      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d129      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a90:	0f1b      	lsrs	r3, r3, #28
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	019a      	lsls	r2, r3, #6
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	071b      	lsls	r3, r3, #28
 8003ab0:	493d      	ldr	r1, [pc, #244]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003abe:	f023 021f 	bic.w	r2, r3, #31
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	4937      	ldr	r1, [pc, #220]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01d      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	0e1b      	lsrs	r3, r3, #24
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	019a      	lsls	r2, r3, #6
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	431a      	orrs	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	071b      	lsls	r3, r3, #28
 8003b10:	4925      	ldr	r1, [pc, #148]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d011      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	019a      	lsls	r2, r3, #6
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	071b      	lsls	r3, r3, #28
 8003b40:	4919      	ldr	r1, [pc, #100]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fe f8bc 	bl	8001cd0 <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b5c:	f7fe f8b8 	bl	8001cd0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0d7      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 80cd 	bne.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8e:	f7fe f89f 	bl	8001cd0 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b96:	f7fe f89b 	bl	8001cd0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d903      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0ba      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bac:	4b5e      	ldr	r3, [pc, #376]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb8:	d0ed      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02e      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d12a      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	0f1b      	lsrs	r3, r3, #28
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	019a      	lsls	r2, r3, #6
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	071b      	lsls	r3, r3, #28
 8003c16:	4944      	ldr	r1, [pc, #272]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c1e:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	493d      	ldr	r1, [pc, #244]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d022      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4c:	d11d      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	0e1b      	lsrs	r3, r3, #24
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	0f1b      	lsrs	r3, r3, #28
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	019a      	lsls	r2, r3, #6
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	071b      	lsls	r3, r3, #28
 8003c82:	4929      	ldr	r1, [pc, #164]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	0e1b      	lsrs	r3, r3, #24
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	019a      	lsls	r2, r3, #6
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	071b      	lsls	r3, r3, #28
 8003cca:	4917      	ldr	r1, [pc, #92]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	4911      	ldr	r1, [pc, #68]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fd ffec 	bl	8001cd0 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cfc:	f7fd ffe8 	bl	8001cd0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e007      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d1ef      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800

08003d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e040      	b.n	8003dc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fb16 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f82c 	bl	8003dc8 <UART_SetConfig>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa84 	bl	8004290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb0b 	bl	80043d4 <UART_CheckIdleState>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4ba6      	ldr	r3, [pc, #664]	; (800408c <UART_SetConfig+0x2c4>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a94      	ldr	r2, [pc, #592]	; (8004090 <UART_SetConfig+0x2c8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d120      	bne.n	8003e86 <UART_SetConfig+0xbe>
 8003e44:	4b93      	ldr	r3, [pc, #588]	; (8004094 <UART_SetConfig+0x2cc>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d816      	bhi.n	8003e80 <UART_SetConfig+0xb8>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <UART_SetConfig+0x90>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e75 	.word	0x08003e75
 8003e60:	08003e6f 	.word	0x08003e6f
 8003e64:	08003e7b 	.word	0x08003e7b
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e150      	b.n	8004110 <UART_SetConfig+0x348>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e14d      	b.n	8004110 <UART_SetConfig+0x348>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e14a      	b.n	8004110 <UART_SetConfig+0x348>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e147      	b.n	8004110 <UART_SetConfig+0x348>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e144      	b.n	8004110 <UART_SetConfig+0x348>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a83      	ldr	r2, [pc, #524]	; (8004098 <UART_SetConfig+0x2d0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d132      	bne.n	8003ef6 <UART_SetConfig+0x12e>
 8003e90:	4b80      	ldr	r3, [pc, #512]	; (8004094 <UART_SetConfig+0x2cc>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d828      	bhi.n	8003ef0 <UART_SetConfig+0x128>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0xdc>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ef1 	.word	0x08003ef1
 8003eac:	08003ef1 	.word	0x08003ef1
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ef1 	.word	0x08003ef1
 8003ebc:	08003ef1 	.word	0x08003ef1
 8003ec0:	08003ef1 	.word	0x08003ef1
 8003ec4:	08003edf 	.word	0x08003edf
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef1 	.word	0x08003ef1
 8003ed4:	08003eeb 	.word	0x08003eeb
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e118      	b.n	8004110 <UART_SetConfig+0x348>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e115      	b.n	8004110 <UART_SetConfig+0x348>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e112      	b.n	8004110 <UART_SetConfig+0x348>
 8003eea:	2308      	movs	r3, #8
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e10f      	b.n	8004110 <UART_SetConfig+0x348>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e10c      	b.n	8004110 <UART_SetConfig+0x348>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a68      	ldr	r2, [pc, #416]	; (800409c <UART_SetConfig+0x2d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d120      	bne.n	8003f42 <UART_SetConfig+0x17a>
 8003f00:	4b64      	ldr	r3, [pc, #400]	; (8004094 <UART_SetConfig+0x2cc>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d013      	beq.n	8003f36 <UART_SetConfig+0x16e>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d814      	bhi.n	8003f3c <UART_SetConfig+0x174>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d009      	beq.n	8003f2a <UART_SetConfig+0x162>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d810      	bhi.n	8003f3c <UART_SetConfig+0x174>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <UART_SetConfig+0x15c>
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d006      	beq.n	8003f30 <UART_SetConfig+0x168>
 8003f22:	e00b      	b.n	8003f3c <UART_SetConfig+0x174>
 8003f24:	2300      	movs	r3, #0
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e0f2      	b.n	8004110 <UART_SetConfig+0x348>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e0ef      	b.n	8004110 <UART_SetConfig+0x348>
 8003f30:	2304      	movs	r3, #4
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e0ec      	b.n	8004110 <UART_SetConfig+0x348>
 8003f36:	2308      	movs	r3, #8
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e0e9      	b.n	8004110 <UART_SetConfig+0x348>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e0e6      	b.n	8004110 <UART_SetConfig+0x348>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a56      	ldr	r2, [pc, #344]	; (80040a0 <UART_SetConfig+0x2d8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d120      	bne.n	8003f8e <UART_SetConfig+0x1c6>
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <UART_SetConfig+0x2cc>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f56:	2bc0      	cmp	r3, #192	; 0xc0
 8003f58:	d013      	beq.n	8003f82 <UART_SetConfig+0x1ba>
 8003f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f5c:	d814      	bhi.n	8003f88 <UART_SetConfig+0x1c0>
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d009      	beq.n	8003f76 <UART_SetConfig+0x1ae>
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d810      	bhi.n	8003f88 <UART_SetConfig+0x1c0>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <UART_SetConfig+0x1a8>
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d006      	beq.n	8003f7c <UART_SetConfig+0x1b4>
 8003f6e:	e00b      	b.n	8003f88 <UART_SetConfig+0x1c0>
 8003f70:	2300      	movs	r3, #0
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e0cc      	b.n	8004110 <UART_SetConfig+0x348>
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e0c9      	b.n	8004110 <UART_SetConfig+0x348>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e0c6      	b.n	8004110 <UART_SetConfig+0x348>
 8003f82:	2308      	movs	r3, #8
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e0c3      	b.n	8004110 <UART_SetConfig+0x348>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e0c0      	b.n	8004110 <UART_SetConfig+0x348>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a44      	ldr	r2, [pc, #272]	; (80040a4 <UART_SetConfig+0x2dc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d125      	bne.n	8003fe4 <UART_SetConfig+0x21c>
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <UART_SetConfig+0x2cc>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa6:	d017      	beq.n	8003fd8 <UART_SetConfig+0x210>
 8003fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fac:	d817      	bhi.n	8003fde <UART_SetConfig+0x216>
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb2:	d00b      	beq.n	8003fcc <UART_SetConfig+0x204>
 8003fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb8:	d811      	bhi.n	8003fde <UART_SetConfig+0x216>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <UART_SetConfig+0x1fe>
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc2:	d006      	beq.n	8003fd2 <UART_SetConfig+0x20a>
 8003fc4:	e00b      	b.n	8003fde <UART_SetConfig+0x216>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e0a1      	b.n	8004110 <UART_SetConfig+0x348>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e09e      	b.n	8004110 <UART_SetConfig+0x348>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e09b      	b.n	8004110 <UART_SetConfig+0x348>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e098      	b.n	8004110 <UART_SetConfig+0x348>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e095      	b.n	8004110 <UART_SetConfig+0x348>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <UART_SetConfig+0x2e0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d125      	bne.n	800403a <UART_SetConfig+0x272>
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <UART_SetConfig+0x2cc>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffc:	d017      	beq.n	800402e <UART_SetConfig+0x266>
 8003ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004002:	d817      	bhi.n	8004034 <UART_SetConfig+0x26c>
 8004004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004008:	d00b      	beq.n	8004022 <UART_SetConfig+0x25a>
 800400a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400e:	d811      	bhi.n	8004034 <UART_SetConfig+0x26c>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <UART_SetConfig+0x254>
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d006      	beq.n	8004028 <UART_SetConfig+0x260>
 800401a:	e00b      	b.n	8004034 <UART_SetConfig+0x26c>
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e076      	b.n	8004110 <UART_SetConfig+0x348>
 8004022:	2302      	movs	r3, #2
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e073      	b.n	8004110 <UART_SetConfig+0x348>
 8004028:	2304      	movs	r3, #4
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e070      	b.n	8004110 <UART_SetConfig+0x348>
 800402e:	2308      	movs	r3, #8
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e06d      	b.n	8004110 <UART_SetConfig+0x348>
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e06a      	b.n	8004110 <UART_SetConfig+0x348>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <UART_SetConfig+0x2e4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d138      	bne.n	80040b6 <UART_SetConfig+0x2ee>
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <UART_SetConfig+0x2cc>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800404e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004052:	d017      	beq.n	8004084 <UART_SetConfig+0x2bc>
 8004054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004058:	d82a      	bhi.n	80040b0 <UART_SetConfig+0x2e8>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405e:	d00b      	beq.n	8004078 <UART_SetConfig+0x2b0>
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d824      	bhi.n	80040b0 <UART_SetConfig+0x2e8>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <UART_SetConfig+0x2aa>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d006      	beq.n	800407e <UART_SetConfig+0x2b6>
 8004070:	e01e      	b.n	80040b0 <UART_SetConfig+0x2e8>
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e04b      	b.n	8004110 <UART_SetConfig+0x348>
 8004078:	2302      	movs	r3, #2
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e048      	b.n	8004110 <UART_SetConfig+0x348>
 800407e:	2304      	movs	r3, #4
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e045      	b.n	8004110 <UART_SetConfig+0x348>
 8004084:	2308      	movs	r3, #8
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e042      	b.n	8004110 <UART_SetConfig+0x348>
 800408a:	bf00      	nop
 800408c:	efff69f3 	.word	0xefff69f3
 8004090:	40011000 	.word	0x40011000
 8004094:	40023800 	.word	0x40023800
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	40007800 	.word	0x40007800
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e02c      	b.n	8004110 <UART_SetConfig+0x348>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <UART_SetConfig+0x4bc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d125      	bne.n	800410c <UART_SetConfig+0x344>
 80040c0:	4b71      	ldr	r3, [pc, #452]	; (8004288 <UART_SetConfig+0x4c0>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040ce:	d017      	beq.n	8004100 <UART_SetConfig+0x338>
 80040d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040d4:	d817      	bhi.n	8004106 <UART_SetConfig+0x33e>
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d00b      	beq.n	80040f4 <UART_SetConfig+0x32c>
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	d811      	bhi.n	8004106 <UART_SetConfig+0x33e>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <UART_SetConfig+0x326>
 80040e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ea:	d006      	beq.n	80040fa <UART_SetConfig+0x332>
 80040ec:	e00b      	b.n	8004106 <UART_SetConfig+0x33e>
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e00d      	b.n	8004110 <UART_SetConfig+0x348>
 80040f4:	2302      	movs	r3, #2
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e00a      	b.n	8004110 <UART_SetConfig+0x348>
 80040fa:	2304      	movs	r3, #4
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e007      	b.n	8004110 <UART_SetConfig+0x348>
 8004100:	2308      	movs	r3, #8
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e004      	b.n	8004110 <UART_SetConfig+0x348>
 8004106:	2310      	movs	r3, #16
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e001      	b.n	8004110 <UART_SetConfig+0x348>
 800410c:	2310      	movs	r3, #16
 800410e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004118:	d15b      	bne.n	80041d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800411a:	7ffb      	ldrb	r3, [r7, #31]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d828      	bhi.n	8004172 <UART_SetConfig+0x3aa>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x360>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004173 	.word	0x08004173
 8004138:	08004163 	.word	0x08004163
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
 8004148:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7ff f9d6 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004150:	61b8      	str	r0, [r7, #24]
        break;
 8004152:	e013      	b.n	800417c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7ff f9e6 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004158:	61b8      	str	r0, [r7, #24]
        break;
 800415a:	e00f      	b.n	800417c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <UART_SetConfig+0x4c4>)
 800415e:	61bb      	str	r3, [r7, #24]
        break;
 8004160:	e00c      	b.n	800417c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7ff f8b9 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8004166:	61b8      	str	r0, [r7, #24]
        break;
 8004168:	e008      	b.n	800417c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	61bb      	str	r3, [r7, #24]
        break;
 8004170:	e004      	b.n	800417c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	77bb      	strb	r3, [r7, #30]
        break;
 800417a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d074      	beq.n	800426c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	005a      	lsls	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b0f      	cmp	r3, #15
 800419c:	d916      	bls.n	80041cc <UART_SetConfig+0x404>
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d212      	bcs.n	80041cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f023 030f 	bic.w	r3, r3, #15
 80041ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	4313      	orrs	r3, r2
 80041c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	89fa      	ldrh	r2, [r7, #14]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	e04f      	b.n	800426c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77bb      	strb	r3, [r7, #30]
 80041d0:	e04c      	b.n	800426c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d828      	bhi.n	800422a <UART_SetConfig+0x462>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x418>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7ff f97a 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004208:	61b8      	str	r0, [r7, #24]
        break;
 800420a:	e013      	b.n	8004234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7ff f98a 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004210:	61b8      	str	r0, [r7, #24]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <UART_SetConfig+0x4c4>)
 8004216:	61bb      	str	r3, [r7, #24]
        break;
 8004218:	e00c      	b.n	8004234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7ff f85d 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800421e:	61b8      	str	r0, [r7, #24]
        break;
 8004220:	e008      	b.n	8004234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	61bb      	str	r3, [r7, #24]
        break;
 8004228:	e004      	b.n	8004234 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	77bb      	strb	r3, [r7, #30]
        break;
 8004232:	bf00      	nop
    }

    if (pclk != 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085a      	lsrs	r2, r3, #1
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b0f      	cmp	r3, #15
 8004252:	d909      	bls.n	8004268 <UART_SetConfig+0x4a0>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425a:	d205      	bcs.n	8004268 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e001      	b.n	800426c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004278:	7fbb      	ldrb	r3, [r7, #30]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40007c00 	.word	0x40007c00
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400

08004290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438e:	d10a      	bne.n	80043a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e4:	f7fd fc74 	bl	8001cd0 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d10e      	bne.n	8004416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f81b 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e011      	b.n	800443a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b09c      	sub	sp, #112	; 0x70
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e0a7      	b.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	f000 80a3 	beq.w	80045a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fd fc37 	bl	8001cd0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <UART_WaitOnFlagUntilTimeout+0x32>
 800446e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004470:	2b00      	cmp	r3, #0
 8004472:	d13f      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004488:	667b      	str	r3, [r7, #100]	; 0x64
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004494:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e068      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d050      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004510:	d148      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800451a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
 800453c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	66bb      	str	r3, [r7, #104]	; 0x68
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800456e:	623a      	str	r2, [r7, #32]
 8004570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	69f9      	ldr	r1, [r7, #28]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	61bb      	str	r3, [r7, #24]
   return(result);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e010      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	f43f af48 	beq.w	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3770      	adds	r7, #112	; 0x70
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d0:	b084      	sub	sp, #16
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	f107 001c 	add.w	r0, r7, #28
 80045de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d120      	bne.n	800462a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <USB_CoreInit+0xac>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa96 	bl	8004b50 <USB_CoreReset>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e010      	b.n	800464c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa8a 	bl	8004b50 <USB_CoreReset>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10b      	bne.n	800466a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f043 0206 	orr.w	r2, r3, #6
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004676:	b004      	add	sp, #16
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	ffbdffbf 	.word	0xffbdffbf

08004680 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 0201 	bic.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d115      	bne.n	80046f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7fd fb09 	bl	8001ce8 <HAL_Delay>
      ms++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fa29 	bl	8004b34 <USB_GetMode>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d01e      	beq.n	8004726 <USB_SetCurrentMode+0x84>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b31      	cmp	r3, #49	; 0x31
 80046ec:	d9f0      	bls.n	80046d0 <USB_SetCurrentMode+0x2e>
 80046ee:	e01a      	b.n	8004726 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d115      	bne.n	8004722 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004702:	2001      	movs	r0, #1
 8004704:	f7fd faf0 	bl	8001ce8 <HAL_Delay>
      ms++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa10 	bl	8004b34 <USB_GetMode>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <USB_SetCurrentMode+0x84>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b31      	cmp	r3, #49	; 0x31
 800471e:	d9f0      	bls.n	8004702 <USB_SetCurrentMode+0x60>
 8004720:	e001      	b.n	8004726 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e005      	b.n	8004732 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b32      	cmp	r3, #50	; 0x32
 800472a:	d101      	bne.n	8004730 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800473c:	b084      	sub	sp, #16
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800474a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e009      	b.n	8004770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3340      	adds	r3, #64	; 0x40
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3301      	adds	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0e      	cmp	r3, #14
 8004774:	d9f2      	bls.n	800475c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11c      	bne.n	80047b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e005      	b.n	80047c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	4619      	mov	r1, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	461a      	mov	r2, r3
 80047de:	680b      	ldr	r3, [r1, #0]
 80047e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10c      	bne.n	8004802 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047ee:	2100      	movs	r1, #0
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f965 	bl	8004ac0 <USB_SetDevSpeed>
 80047f6:	e008      	b.n	800480a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047f8:	2101      	movs	r1, #1
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f960 	bl	8004ac0 <USB_SetDevSpeed>
 8004800:	e003      	b.n	800480a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004802:	2103      	movs	r1, #3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f95b 	bl	8004ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800480a:	2110      	movs	r1, #16
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8f3 	bl	80049f8 <USB_FlushTxFifo>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f91f 	bl	8004a60 <USB_FlushRxFifo>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	461a      	mov	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	461a      	mov	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e043      	b.n	80048de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486c:	d118      	bne.n	80048a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e013      	b.n	80048b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	461a      	mov	r2, r3
 8004898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e008      	b.n	80048b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	461a      	mov	r2, r3
 80048d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d3b7      	bcc.n	8004856 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e043      	b.n	8004974 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004902:	d118      	bne.n	8004936 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	461a      	mov	r2, r3
 8004918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e013      	b.n	8004948 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e008      	b.n	8004948 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800496c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3301      	adds	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3b7      	bcc.n	80048ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800498a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800499c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <USB_DevInit+0x2b4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f043 0208 	orr.w	r2, r3, #8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <USB_DevInit+0x2b8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ec:	b004      	add	sp, #16
 80049ee:	4770      	bx	lr
 80049f0:	803c3800 	.word	0x803c3800
 80049f4:	40000004 	.word	0x40000004

080049f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <USB_FlushTxFifo+0x64>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e01b      	b.n	8004a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	daf2      	bge.n	8004a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	019b      	lsls	r3, r3, #6
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <USB_FlushTxFifo+0x64>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d0f0      	beq.n	8004a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	00030d40 	.word	0x00030d40

08004a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a11      	ldr	r2, [pc, #68]	; (8004abc <USB_FlushRxFifo+0x5c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e018      	b.n	8004ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	daf2      	bge.n	8004a6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <USB_FlushRxFifo+0x5c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e006      	b.n	8004ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d0f0      	beq.n	8004a90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	00030d40 	.word	0x00030d40

08004ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
 8004b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0301 	and.w	r3, r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <USB_CoreReset+0x64>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e01b      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	daf2      	bge.n	8004b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <USB_CoreReset+0x64>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d0f0      	beq.n	8004b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <_ZdlPvj>:
 8004bb8:	f000 b800 	b.w	8004bbc <_ZdlPv>

08004bbc <_ZdlPv>:
 8004bbc:	f000 b832 	b.w	8004c24 <free>

08004bc0 <__errno>:
 8004bc0:	4b01      	ldr	r3, [pc, #4]	; (8004bc8 <__errno+0x8>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4d0d      	ldr	r5, [pc, #52]	; (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1b64      	subs	r4, r4, r5
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	42a6      	cmp	r6, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4d0b      	ldr	r5, [pc, #44]	; (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	; (8004c10 <__libc_init_array+0x44>)
 8004be0:	f001 f8ee 	bl	8005dc0 <_init>
 8004be4:	1b64      	subs	r4, r4, r5
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2600      	movs	r6, #0
 8004bea:	42a6      	cmp	r6, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf4:	4798      	blx	r3
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfe:	4798      	blx	r3
 8004c00:	3601      	adds	r6, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08005fc8 	.word	0x08005fc8
 8004c08:	08005fc8 	.word	0x08005fc8
 8004c0c:	08005fc8 	.word	0x08005fc8
 8004c10:	08005fcc 	.word	0x08005fcc

08004c14 <malloc>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <malloc+0xc>)
 8004c16:	4601      	mov	r1, r0
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f000 b87f 	b.w	8004d1c <_malloc_r>
 8004c1e:	bf00      	nop
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <free>:
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <free+0xc>)
 8004c26:	4601      	mov	r1, r0
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	f000 b80b 	b.w	8004c44 <_free_r>
 8004c2e:	bf00      	nop
 8004c30:	2000000c 	.word	0x2000000c

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <_free_r>:
 8004c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d044      	beq.n	8004cd4 <_free_r+0x90>
 8004c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4e:	9001      	str	r0, [sp, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f1a1 0404 	sub.w	r4, r1, #4
 8004c56:	bfb8      	it	lt
 8004c58:	18e4      	addlt	r4, r4, r3
 8004c5a:	f000 fcbf 	bl	80055dc <__malloc_lock>
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <_free_r+0x94>)
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	b933      	cbnz	r3, 8004c74 <_free_r+0x30>
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	6014      	str	r4, [r2, #0]
 8004c6a:	b003      	add	sp, #12
 8004c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c70:	f000 bcba 	b.w	80055e8 <__malloc_unlock>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d908      	bls.n	8004c8a <_free_r+0x46>
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf01      	itttt	eq
 8004c80:	6819      	ldreq	r1, [r3, #0]
 8004c82:	685b      	ldreq	r3, [r3, #4]
 8004c84:	1949      	addeq	r1, r1, r5
 8004c86:	6021      	streq	r1, [r4, #0]
 8004c88:	e7ed      	b.n	8004c66 <_free_r+0x22>
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b10b      	cbz	r3, 8004c94 <_free_r+0x50>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d9fa      	bls.n	8004c8a <_free_r+0x46>
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	1855      	adds	r5, r2, r1
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d10b      	bne.n	8004cb4 <_free_r+0x70>
 8004c9c:	6824      	ldr	r4, [r4, #0]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	d1e0      	bne.n	8004c6a <_free_r+0x26>
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	4421      	add	r1, r4
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	e7da      	b.n	8004c6a <_free_r+0x26>
 8004cb4:	d902      	bls.n	8004cbc <_free_r+0x78>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	e7d6      	b.n	8004c6a <_free_r+0x26>
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf04      	itt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	bf04      	itt	eq
 8004ccc:	1949      	addeq	r1, r1, r5
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6054      	str	r4, [r2, #4]
 8004cd2:	e7ca      	b.n	8004c6a <_free_r+0x26>
 8004cd4:	b003      	add	sp, #12
 8004cd6:	bd30      	pop	{r4, r5, pc}
 8004cd8:	20000854 	.word	0x20000854

08004cdc <sbrk_aligned>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4e0e      	ldr	r6, [pc, #56]	; (8004d18 <sbrk_aligned+0x3c>)
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	6831      	ldr	r1, [r6, #0]
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	b911      	cbnz	r1, 8004cee <sbrk_aligned+0x12>
 8004ce8:	f000 f958 	bl	8004f9c <_sbrk_r>
 8004cec:	6030      	str	r0, [r6, #0]
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 f953 	bl	8004f9c <_sbrk_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d00a      	beq.n	8004d10 <sbrk_aligned+0x34>
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d007      	beq.n	8004d14 <sbrk_aligned+0x38>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f948 	bl	8004f9c <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d101      	bne.n	8004d14 <sbrk_aligned+0x38>
 8004d10:	f04f 34ff 	mov.w	r4, #4294967295
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	20000858 	.word	0x20000858

08004d1c <_malloc_r>:
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	1ccd      	adds	r5, r1, #3
 8004d22:	f025 0503 	bic.w	r5, r5, #3
 8004d26:	3508      	adds	r5, #8
 8004d28:	2d0c      	cmp	r5, #12
 8004d2a:	bf38      	it	cc
 8004d2c:	250c      	movcc	r5, #12
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	4607      	mov	r7, r0
 8004d32:	db01      	blt.n	8004d38 <_malloc_r+0x1c>
 8004d34:	42a9      	cmp	r1, r5
 8004d36:	d905      	bls.n	8004d44 <_malloc_r+0x28>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	4e2e      	ldr	r6, [pc, #184]	; (8004e00 <_malloc_r+0xe4>)
 8004d46:	f000 fc49 	bl	80055dc <__malloc_lock>
 8004d4a:	6833      	ldr	r3, [r6, #0]
 8004d4c:	461c      	mov	r4, r3
 8004d4e:	bb34      	cbnz	r4, 8004d9e <_malloc_r+0x82>
 8004d50:	4629      	mov	r1, r5
 8004d52:	4638      	mov	r0, r7
 8004d54:	f7ff ffc2 	bl	8004cdc <sbrk_aligned>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	d14d      	bne.n	8004dfa <_malloc_r+0xde>
 8004d5e:	6834      	ldr	r4, [r6, #0]
 8004d60:	4626      	mov	r6, r4
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d140      	bne.n	8004de8 <_malloc_r+0xcc>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	eb04 0803 	add.w	r8, r4, r3
 8004d70:	f000 f914 	bl	8004f9c <_sbrk_r>
 8004d74:	4580      	cmp	r8, r0
 8004d76:	d13a      	bne.n	8004dee <_malloc_r+0xd2>
 8004d78:	6821      	ldr	r1, [r4, #0]
 8004d7a:	3503      	adds	r5, #3
 8004d7c:	1a6d      	subs	r5, r5, r1
 8004d7e:	f025 0503 	bic.w	r5, r5, #3
 8004d82:	3508      	adds	r5, #8
 8004d84:	2d0c      	cmp	r5, #12
 8004d86:	bf38      	it	cc
 8004d88:	250c      	movcc	r5, #12
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f7ff ffa5 	bl	8004cdc <sbrk_aligned>
 8004d92:	3001      	adds	r0, #1
 8004d94:	d02b      	beq.n	8004dee <_malloc_r+0xd2>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	442b      	add	r3, r5
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	e00e      	b.n	8004dbc <_malloc_r+0xa0>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	d41e      	bmi.n	8004de2 <_malloc_r+0xc6>
 8004da4:	2a0b      	cmp	r2, #11
 8004da6:	d916      	bls.n	8004dd6 <_malloc_r+0xba>
 8004da8:	1961      	adds	r1, r4, r5
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	6025      	str	r5, [r4, #0]
 8004dae:	bf18      	it	ne
 8004db0:	6059      	strne	r1, [r3, #4]
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	bf08      	it	eq
 8004db6:	6031      	streq	r1, [r6, #0]
 8004db8:	5162      	str	r2, [r4, r5]
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	f104 060b 	add.w	r6, r4, #11
 8004dc2:	f000 fc11 	bl	80055e8 <__malloc_unlock>
 8004dc6:	f026 0607 	bic.w	r6, r6, #7
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	1af2      	subs	r2, r6, r3
 8004dce:	d0b6      	beq.n	8004d3e <_malloc_r+0x22>
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	50a3      	str	r3, [r4, r2]
 8004dd4:	e7b3      	b.n	8004d3e <_malloc_r+0x22>
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	bf0c      	ite	eq
 8004ddc:	6032      	streq	r2, [r6, #0]
 8004dde:	605a      	strne	r2, [r3, #4]
 8004de0:	e7ec      	b.n	8004dbc <_malloc_r+0xa0>
 8004de2:	4623      	mov	r3, r4
 8004de4:	6864      	ldr	r4, [r4, #4]
 8004de6:	e7b2      	b.n	8004d4e <_malloc_r+0x32>
 8004de8:	4634      	mov	r4, r6
 8004dea:	6876      	ldr	r6, [r6, #4]
 8004dec:	e7b9      	b.n	8004d62 <_malloc_r+0x46>
 8004dee:	230c      	movs	r3, #12
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4638      	mov	r0, r7
 8004df4:	f000 fbf8 	bl	80055e8 <__malloc_unlock>
 8004df8:	e7a1      	b.n	8004d3e <_malloc_r+0x22>
 8004dfa:	6025      	str	r5, [r4, #0]
 8004dfc:	e7de      	b.n	8004dbc <_malloc_r+0xa0>
 8004dfe:	bf00      	nop
 8004e00:	20000854 	.word	0x20000854

08004e04 <iprintf>:
 8004e04:	b40f      	push	{r0, r1, r2, r3}
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <iprintf+0x2c>)
 8004e08:	b513      	push	{r0, r1, r4, lr}
 8004e0a:	681c      	ldr	r4, [r3, #0]
 8004e0c:	b124      	cbz	r4, 8004e18 <iprintf+0x14>
 8004e0e:	69a3      	ldr	r3, [r4, #24]
 8004e10:	b913      	cbnz	r3, 8004e18 <iprintf+0x14>
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 faca 	bl	80053ac <__sinit>
 8004e18:	ab05      	add	r3, sp, #20
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	68a1      	ldr	r1, [r4, #8]
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fc11 	bl	8005648 <_vfiprintf_r>
 8004e26:	b002      	add	sp, #8
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr
 8004e30:	2000000c 	.word	0x2000000c

08004e34 <_puts_r>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	460e      	mov	r6, r1
 8004e38:	4605      	mov	r5, r0
 8004e3a:	b118      	cbz	r0, 8004e44 <_puts_r+0x10>
 8004e3c:	6983      	ldr	r3, [r0, #24]
 8004e3e:	b90b      	cbnz	r3, 8004e44 <_puts_r+0x10>
 8004e40:	f000 fab4 	bl	80053ac <__sinit>
 8004e44:	69ab      	ldr	r3, [r5, #24]
 8004e46:	68ac      	ldr	r4, [r5, #8]
 8004e48:	b913      	cbnz	r3, 8004e50 <_puts_r+0x1c>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 faae 	bl	80053ac <__sinit>
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <_puts_r+0xd0>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d120      	bne.n	8004e98 <_puts_r+0x64>
 8004e56:	686c      	ldr	r4, [r5, #4]
 8004e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e5a:	07db      	lsls	r3, r3, #31
 8004e5c:	d405      	bmi.n	8004e6a <_puts_r+0x36>
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	0598      	lsls	r0, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_puts_r+0x36>
 8004e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e66:	f000 fb51 	bl	800550c <__retarget_lock_acquire_recursive>
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	0719      	lsls	r1, r3, #28
 8004e6e:	d51d      	bpl.n	8004eac <_puts_r+0x78>
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	b1db      	cbz	r3, 8004eac <_puts_r+0x78>
 8004e74:	3e01      	subs	r6, #1
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	bb39      	cbnz	r1, 8004ed2 <_puts_r+0x9e>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da38      	bge.n	8004ef8 <_puts_r+0xc4>
 8004e86:	4622      	mov	r2, r4
 8004e88:	210a      	movs	r1, #10
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 f896 	bl	8004fbc <__swbuf_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d011      	beq.n	8004eb8 <_puts_r+0x84>
 8004e94:	250a      	movs	r5, #10
 8004e96:	e011      	b.n	8004ebc <_puts_r+0x88>
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <_puts_r+0xd4>)
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	d101      	bne.n	8004ea2 <_puts_r+0x6e>
 8004e9e:	68ac      	ldr	r4, [r5, #8]
 8004ea0:	e7da      	b.n	8004e58 <_puts_r+0x24>
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <_puts_r+0xd8>)
 8004ea4:	429c      	cmp	r4, r3
 8004ea6:	bf08      	it	eq
 8004ea8:	68ec      	ldreq	r4, [r5, #12]
 8004eaa:	e7d5      	b.n	8004e58 <_puts_r+0x24>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f8d6 	bl	8005060 <__swsetup_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d0dd      	beq.n	8004e74 <_puts_r+0x40>
 8004eb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ebe:	07da      	lsls	r2, r3, #31
 8004ec0:	d405      	bmi.n	8004ece <_puts_r+0x9a>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	059b      	lsls	r3, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_puts_r+0x9a>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eca:	f000 fb20 	bl	800550e <__retarget_lock_release_recursive>
 8004ece:	4628      	mov	r0, r5
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da04      	bge.n	8004ee0 <_puts_r+0xac>
 8004ed6:	69a2      	ldr	r2, [r4, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	dc06      	bgt.n	8004eea <_puts_r+0xb6>
 8004edc:	290a      	cmp	r1, #10
 8004ede:	d004      	beq.n	8004eea <_puts_r+0xb6>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	7019      	strb	r1, [r3, #0]
 8004ee8:	e7c5      	b.n	8004e76 <_puts_r+0x42>
 8004eea:	4622      	mov	r2, r4
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 f865 	bl	8004fbc <__swbuf_r>
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d1bf      	bne.n	8004e76 <_puts_r+0x42>
 8004ef6:	e7df      	b.n	8004eb8 <_puts_r+0x84>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	250a      	movs	r5, #10
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	701d      	strb	r5, [r3, #0]
 8004f02:	e7db      	b.n	8004ebc <_puts_r+0x88>
 8004f04:	08005f4c 	.word	0x08005f4c
 8004f08:	08005f6c 	.word	0x08005f6c
 8004f0c:	08005f2c 	.word	0x08005f2c

08004f10 <puts>:
 8004f10:	4b02      	ldr	r3, [pc, #8]	; (8004f1c <puts+0xc>)
 8004f12:	4601      	mov	r1, r0
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f7ff bf8d 	b.w	8004e34 <_puts_r>
 8004f1a:	bf00      	nop
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <rand>:
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <rand+0x5c>)
 8004f22:	b510      	push	{r4, lr}
 8004f24:	681c      	ldr	r4, [r3, #0]
 8004f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f28:	b9b3      	cbnz	r3, 8004f58 <rand+0x38>
 8004f2a:	2018      	movs	r0, #24
 8004f2c:	f7ff fe72 	bl	8004c14 <malloc>
 8004f30:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f32:	b928      	cbnz	r0, 8004f40 <rand+0x20>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <rand+0x60>)
 8004f38:	4812      	ldr	r0, [pc, #72]	; (8004f84 <rand+0x64>)
 8004f3a:	214e      	movs	r1, #78	; 0x4e
 8004f3c:	f000 f8fe 	bl	800513c <__assert_func>
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <rand+0x68>)
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <rand+0x6c>)
 8004f44:	e9c0 2300 	strd	r2, r3, [r0]
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <rand+0x70>)
 8004f4a:	6083      	str	r3, [r0, #8]
 8004f4c:	230b      	movs	r3, #11
 8004f4e:	8183      	strh	r3, [r0, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	2300      	movs	r3, #0
 8004f54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004f58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004f5a:	4a0e      	ldr	r2, [pc, #56]	; (8004f94 <rand+0x74>)
 8004f5c:	6920      	ldr	r0, [r4, #16]
 8004f5e:	6963      	ldr	r3, [r4, #20]
 8004f60:	490d      	ldr	r1, [pc, #52]	; (8004f98 <rand+0x78>)
 8004f62:	4342      	muls	r2, r0
 8004f64:	fb01 2203 	mla	r2, r1, r3, r2
 8004f68:	fba0 0101 	umull	r0, r1, r0, r1
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	eb42 0001 	adc.w	r0, r2, r1
 8004f72:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004f76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f7a:	bd10      	pop	{r4, pc}
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	08005e7c 	.word	0x08005e7c
 8004f84:	08005e93 	.word	0x08005e93
 8004f88:	abcd330e 	.word	0xabcd330e
 8004f8c:	e66d1234 	.word	0xe66d1234
 8004f90:	0005deec 	.word	0x0005deec
 8004f94:	5851f42d 	.word	0x5851f42d
 8004f98:	4c957f2d 	.word	0x4c957f2d

08004f9c <_sbrk_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d06      	ldr	r5, [pc, #24]	; (8004fb8 <_sbrk_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc fb62 	bl	8001670 <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_sbrk_r+0x1a>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_sbrk_r+0x1a>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000860 	.word	0x20000860

08004fbc <__swbuf_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	b118      	cbz	r0, 8004fce <__swbuf_r+0x12>
 8004fc6:	6983      	ldr	r3, [r0, #24]
 8004fc8:	b90b      	cbnz	r3, 8004fce <__swbuf_r+0x12>
 8004fca:	f000 f9ef 	bl	80053ac <__sinit>
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <__swbuf_r+0x98>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d12b      	bne.n	800502c <__swbuf_r+0x70>
 8004fd4:	686c      	ldr	r4, [r5, #4]
 8004fd6:	69a3      	ldr	r3, [r4, #24]
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	071a      	lsls	r2, r3, #28
 8004fde:	d52f      	bpl.n	8005040 <__swbuf_r+0x84>
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	b36b      	cbz	r3, 8005040 <__swbuf_r+0x84>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	1ac0      	subs	r0, r0, r3
 8004fea:	6963      	ldr	r3, [r4, #20]
 8004fec:	b2f6      	uxtb	r6, r6
 8004fee:	4283      	cmp	r3, r0
 8004ff0:	4637      	mov	r7, r6
 8004ff2:	dc04      	bgt.n	8004ffe <__swbuf_r+0x42>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 f944 	bl	8005284 <_fflush_r>
 8004ffc:	bb30      	cbnz	r0, 800504c <__swbuf_r+0x90>
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	701e      	strb	r6, [r3, #0]
 800500c:	6963      	ldr	r3, [r4, #20]
 800500e:	3001      	adds	r0, #1
 8005010:	4283      	cmp	r3, r0
 8005012:	d004      	beq.n	800501e <__swbuf_r+0x62>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d506      	bpl.n	8005028 <__swbuf_r+0x6c>
 800501a:	2e0a      	cmp	r6, #10
 800501c:	d104      	bne.n	8005028 <__swbuf_r+0x6c>
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f000 f92f 	bl	8005284 <_fflush_r>
 8005026:	b988      	cbnz	r0, 800504c <__swbuf_r+0x90>
 8005028:	4638      	mov	r0, r7
 800502a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <__swbuf_r+0x9c>)
 800502e:	429c      	cmp	r4, r3
 8005030:	d101      	bne.n	8005036 <__swbuf_r+0x7a>
 8005032:	68ac      	ldr	r4, [r5, #8]
 8005034:	e7cf      	b.n	8004fd6 <__swbuf_r+0x1a>
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <__swbuf_r+0xa0>)
 8005038:	429c      	cmp	r4, r3
 800503a:	bf08      	it	eq
 800503c:	68ec      	ldreq	r4, [r5, #12]
 800503e:	e7ca      	b.n	8004fd6 <__swbuf_r+0x1a>
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f80c 	bl	8005060 <__swsetup_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	d0cb      	beq.n	8004fe4 <__swbuf_r+0x28>
 800504c:	f04f 37ff 	mov.w	r7, #4294967295
 8005050:	e7ea      	b.n	8005028 <__swbuf_r+0x6c>
 8005052:	bf00      	nop
 8005054:	08005f4c 	.word	0x08005f4c
 8005058:	08005f6c 	.word	0x08005f6c
 800505c:	08005f2c 	.word	0x08005f2c

08005060 <__swsetup_r>:
 8005060:	4b32      	ldr	r3, [pc, #200]	; (800512c <__swsetup_r+0xcc>)
 8005062:	b570      	push	{r4, r5, r6, lr}
 8005064:	681d      	ldr	r5, [r3, #0]
 8005066:	4606      	mov	r6, r0
 8005068:	460c      	mov	r4, r1
 800506a:	b125      	cbz	r5, 8005076 <__swsetup_r+0x16>
 800506c:	69ab      	ldr	r3, [r5, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__swsetup_r+0x16>
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f99b 	bl	80053ac <__sinit>
 8005076:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <__swsetup_r+0xd0>)
 8005078:	429c      	cmp	r4, r3
 800507a:	d10f      	bne.n	800509c <__swsetup_r+0x3c>
 800507c:	686c      	ldr	r4, [r5, #4]
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005084:	0719      	lsls	r1, r3, #28
 8005086:	d42c      	bmi.n	80050e2 <__swsetup_r+0x82>
 8005088:	06dd      	lsls	r5, r3, #27
 800508a:	d411      	bmi.n	80050b0 <__swsetup_r+0x50>
 800508c:	2309      	movs	r3, #9
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	e03e      	b.n	800511a <__swsetup_r+0xba>
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <__swsetup_r+0xd4>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <__swsetup_r+0x46>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7eb      	b.n	800507e <__swsetup_r+0x1e>
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <__swsetup_r+0xd8>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7e6      	b.n	800507e <__swsetup_r+0x1e>
 80050b0:	0758      	lsls	r0, r3, #29
 80050b2:	d512      	bpl.n	80050da <__swsetup_r+0x7a>
 80050b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b6:	b141      	cbz	r1, 80050ca <__swsetup_r+0x6a>
 80050b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050bc:	4299      	cmp	r1, r3
 80050be:	d002      	beq.n	80050c6 <__swsetup_r+0x66>
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7ff fdbf 	bl	8004c44 <_free_r>
 80050c6:	2300      	movs	r3, #0
 80050c8:	6363      	str	r3, [r4, #52]	; 0x34
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	2300      	movs	r3, #0
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f043 0308 	orr.w	r3, r3, #8
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b94b      	cbnz	r3, 80050fa <__swsetup_r+0x9a>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f0:	d003      	beq.n	80050fa <__swsetup_r+0x9a>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 fa31 	bl	800555c <__smakebuf_r>
 80050fa:	89a0      	ldrh	r0, [r4, #12]
 80050fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005100:	f010 0301 	ands.w	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <__swsetup_r+0xbc>
 8005106:	2300      	movs	r3, #0
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	425b      	negs	r3, r3
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b943      	cbnz	r3, 8005126 <__swsetup_r+0xc6>
 8005114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005118:	d1ba      	bne.n	8005090 <__swsetup_r+0x30>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	0781      	lsls	r1, r0, #30
 800511e:	bf58      	it	pl
 8005120:	6963      	ldrpl	r3, [r4, #20]
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	e7f4      	b.n	8005110 <__swsetup_r+0xb0>
 8005126:	2000      	movs	r0, #0
 8005128:	e7f7      	b.n	800511a <__swsetup_r+0xba>
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c
 8005130:	08005f4c 	.word	0x08005f4c
 8005134:	08005f6c 	.word	0x08005f6c
 8005138:	08005f2c 	.word	0x08005f2c

0800513c <__assert_func>:
 800513c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800513e:	4614      	mov	r4, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <__assert_func+0x2c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4605      	mov	r5, r0
 8005148:	68d8      	ldr	r0, [r3, #12]
 800514a:	b14c      	cbz	r4, 8005160 <__assert_func+0x24>
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <__assert_func+0x30>)
 800514e:	9100      	str	r1, [sp, #0]
 8005150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <__assert_func+0x34>)
 8005156:	462b      	mov	r3, r5
 8005158:	f000 f9a6 	bl	80054a8 <fiprintf>
 800515c:	f000 fd8e 	bl	8005c7c <abort>
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <__assert_func+0x38>)
 8005162:	461c      	mov	r4, r3
 8005164:	e7f3      	b.n	800514e <__assert_func+0x12>
 8005166:	bf00      	nop
 8005168:	2000000c 	.word	0x2000000c
 800516c:	08005eee 	.word	0x08005eee
 8005170:	08005efb 	.word	0x08005efb
 8005174:	08005f29 	.word	0x08005f29

08005178 <__sflush_r>:
 8005178:	898a      	ldrh	r2, [r1, #12]
 800517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	4605      	mov	r5, r0
 8005180:	0710      	lsls	r0, r2, #28
 8005182:	460c      	mov	r4, r1
 8005184:	d458      	bmi.n	8005238 <__sflush_r+0xc0>
 8005186:	684b      	ldr	r3, [r1, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	dc05      	bgt.n	8005198 <__sflush_r+0x20>
 800518c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	dc02      	bgt.n	8005198 <__sflush_r+0x20>
 8005192:	2000      	movs	r0, #0
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800519a:	2e00      	cmp	r6, #0
 800519c:	d0f9      	beq.n	8005192 <__sflush_r+0x1a>
 800519e:	2300      	movs	r3, #0
 80051a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051a4:	682f      	ldr	r7, [r5, #0]
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	d032      	beq.n	8005210 <__sflush_r+0x98>
 80051aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	075a      	lsls	r2, r3, #29
 80051b0:	d505      	bpl.n	80051be <__sflush_r+0x46>
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	1ac0      	subs	r0, r0, r3
 80051b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051b8:	b10b      	cbz	r3, 80051be <__sflush_r+0x46>
 80051ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051bc:	1ac0      	subs	r0, r0, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	4602      	mov	r2, r0
 80051c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051c4:	6a21      	ldr	r1, [r4, #32]
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b0      	blx	r6
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	d106      	bne.n	80051de <__sflush_r+0x66>
 80051d0:	6829      	ldr	r1, [r5, #0]
 80051d2:	291d      	cmp	r1, #29
 80051d4:	d82c      	bhi.n	8005230 <__sflush_r+0xb8>
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <__sflush_r+0x108>)
 80051d8:	40ca      	lsrs	r2, r1
 80051da:	07d6      	lsls	r6, r2, #31
 80051dc:	d528      	bpl.n	8005230 <__sflush_r+0xb8>
 80051de:	2200      	movs	r2, #0
 80051e0:	6062      	str	r2, [r4, #4]
 80051e2:	04d9      	lsls	r1, r3, #19
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	6022      	str	r2, [r4, #0]
 80051e8:	d504      	bpl.n	80051f4 <__sflush_r+0x7c>
 80051ea:	1c42      	adds	r2, r0, #1
 80051ec:	d101      	bne.n	80051f2 <__sflush_r+0x7a>
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	b903      	cbnz	r3, 80051f4 <__sflush_r+0x7c>
 80051f2:	6560      	str	r0, [r4, #84]	; 0x54
 80051f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051f6:	602f      	str	r7, [r5, #0]
 80051f8:	2900      	cmp	r1, #0
 80051fa:	d0ca      	beq.n	8005192 <__sflush_r+0x1a>
 80051fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005200:	4299      	cmp	r1, r3
 8005202:	d002      	beq.n	800520a <__sflush_r+0x92>
 8005204:	4628      	mov	r0, r5
 8005206:	f7ff fd1d 	bl	8004c44 <_free_r>
 800520a:	2000      	movs	r0, #0
 800520c:	6360      	str	r0, [r4, #52]	; 0x34
 800520e:	e7c1      	b.n	8005194 <__sflush_r+0x1c>
 8005210:	6a21      	ldr	r1, [r4, #32]
 8005212:	2301      	movs	r3, #1
 8005214:	4628      	mov	r0, r5
 8005216:	47b0      	blx	r6
 8005218:	1c41      	adds	r1, r0, #1
 800521a:	d1c7      	bne.n	80051ac <__sflush_r+0x34>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0c4      	beq.n	80051ac <__sflush_r+0x34>
 8005222:	2b1d      	cmp	r3, #29
 8005224:	d001      	beq.n	800522a <__sflush_r+0xb2>
 8005226:	2b16      	cmp	r3, #22
 8005228:	d101      	bne.n	800522e <__sflush_r+0xb6>
 800522a:	602f      	str	r7, [r5, #0]
 800522c:	e7b1      	b.n	8005192 <__sflush_r+0x1a>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	e7ad      	b.n	8005194 <__sflush_r+0x1c>
 8005238:	690f      	ldr	r7, [r1, #16]
 800523a:	2f00      	cmp	r7, #0
 800523c:	d0a9      	beq.n	8005192 <__sflush_r+0x1a>
 800523e:	0793      	lsls	r3, r2, #30
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	bf08      	it	eq
 8005244:	694b      	ldreq	r3, [r1, #20]
 8005246:	600f      	str	r7, [r1, #0]
 8005248:	bf18      	it	ne
 800524a:	2300      	movne	r3, #0
 800524c:	eba6 0807 	sub.w	r8, r6, r7
 8005250:	608b      	str	r3, [r1, #8]
 8005252:	f1b8 0f00 	cmp.w	r8, #0
 8005256:	dd9c      	ble.n	8005192 <__sflush_r+0x1a>
 8005258:	6a21      	ldr	r1, [r4, #32]
 800525a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800525c:	4643      	mov	r3, r8
 800525e:	463a      	mov	r2, r7
 8005260:	4628      	mov	r0, r5
 8005262:	47b0      	blx	r6
 8005264:	2800      	cmp	r0, #0
 8005266:	dc06      	bgt.n	8005276 <__sflush_r+0xfe>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e78e      	b.n	8005194 <__sflush_r+0x1c>
 8005276:	4407      	add	r7, r0
 8005278:	eba8 0800 	sub.w	r8, r8, r0
 800527c:	e7e9      	b.n	8005252 <__sflush_r+0xda>
 800527e:	bf00      	nop
 8005280:	20400001 	.word	0x20400001

08005284 <_fflush_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	4605      	mov	r5, r0
 800528a:	460c      	mov	r4, r1
 800528c:	b913      	cbnz	r3, 8005294 <_fflush_r+0x10>
 800528e:	2500      	movs	r5, #0
 8005290:	4628      	mov	r0, r5
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	b118      	cbz	r0, 800529e <_fflush_r+0x1a>
 8005296:	6983      	ldr	r3, [r0, #24]
 8005298:	b90b      	cbnz	r3, 800529e <_fflush_r+0x1a>
 800529a:	f000 f887 	bl	80053ac <__sinit>
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <_fflush_r+0x6c>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d11b      	bne.n	80052dc <_fflush_r+0x58>
 80052a4:	686c      	ldr	r4, [r5, #4]
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ef      	beq.n	800528e <_fflush_r+0xa>
 80052ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052b0:	07d0      	lsls	r0, r2, #31
 80052b2:	d404      	bmi.n	80052be <_fflush_r+0x3a>
 80052b4:	0599      	lsls	r1, r3, #22
 80052b6:	d402      	bmi.n	80052be <_fflush_r+0x3a>
 80052b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ba:	f000 f927 	bl	800550c <__retarget_lock_acquire_recursive>
 80052be:	4628      	mov	r0, r5
 80052c0:	4621      	mov	r1, r4
 80052c2:	f7ff ff59 	bl	8005178 <__sflush_r>
 80052c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c8:	07da      	lsls	r2, r3, #31
 80052ca:	4605      	mov	r5, r0
 80052cc:	d4e0      	bmi.n	8005290 <_fflush_r+0xc>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	059b      	lsls	r3, r3, #22
 80052d2:	d4dd      	bmi.n	8005290 <_fflush_r+0xc>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f000 f91a 	bl	800550e <__retarget_lock_release_recursive>
 80052da:	e7d9      	b.n	8005290 <_fflush_r+0xc>
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <_fflush_r+0x70>)
 80052de:	429c      	cmp	r4, r3
 80052e0:	d101      	bne.n	80052e6 <_fflush_r+0x62>
 80052e2:	68ac      	ldr	r4, [r5, #8]
 80052e4:	e7df      	b.n	80052a6 <_fflush_r+0x22>
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <_fflush_r+0x74>)
 80052e8:	429c      	cmp	r4, r3
 80052ea:	bf08      	it	eq
 80052ec:	68ec      	ldreq	r4, [r5, #12]
 80052ee:	e7da      	b.n	80052a6 <_fflush_r+0x22>
 80052f0:	08005f4c 	.word	0x08005f4c
 80052f4:	08005f6c 	.word	0x08005f6c
 80052f8:	08005f2c 	.word	0x08005f2c

080052fc <std>:
 80052fc:	2300      	movs	r3, #0
 80052fe:	b510      	push	{r4, lr}
 8005300:	4604      	mov	r4, r0
 8005302:	e9c0 3300 	strd	r3, r3, [r0]
 8005306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800530a:	6083      	str	r3, [r0, #8]
 800530c:	8181      	strh	r1, [r0, #12]
 800530e:	6643      	str	r3, [r0, #100]	; 0x64
 8005310:	81c2      	strh	r2, [r0, #14]
 8005312:	6183      	str	r3, [r0, #24]
 8005314:	4619      	mov	r1, r3
 8005316:	2208      	movs	r2, #8
 8005318:	305c      	adds	r0, #92	; 0x5c
 800531a:	f7ff fc8b 	bl	8004c34 <memset>
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <std+0x38>)
 8005320:	6263      	str	r3, [r4, #36]	; 0x24
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <std+0x3c>)
 8005324:	62a3      	str	r3, [r4, #40]	; 0x28
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <std+0x40>)
 8005328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <std+0x44>)
 800532c:	6224      	str	r4, [r4, #32]
 800532e:	6323      	str	r3, [r4, #48]	; 0x30
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	08005bd1 	.word	0x08005bd1
 8005338:	08005bf3 	.word	0x08005bf3
 800533c:	08005c2b 	.word	0x08005c2b
 8005340:	08005c4f 	.word	0x08005c4f

08005344 <_cleanup_r>:
 8005344:	4901      	ldr	r1, [pc, #4]	; (800534c <_cleanup_r+0x8>)
 8005346:	f000 b8c1 	b.w	80054cc <_fwalk_reent>
 800534a:	bf00      	nop
 800534c:	08005285 	.word	0x08005285

08005350 <__sfmoreglue>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	2268      	movs	r2, #104	; 0x68
 8005354:	1e4d      	subs	r5, r1, #1
 8005356:	4355      	muls	r5, r2
 8005358:	460e      	mov	r6, r1
 800535a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800535e:	f7ff fcdd 	bl	8004d1c <_malloc_r>
 8005362:	4604      	mov	r4, r0
 8005364:	b140      	cbz	r0, 8005378 <__sfmoreglue+0x28>
 8005366:	2100      	movs	r1, #0
 8005368:	e9c0 1600 	strd	r1, r6, [r0]
 800536c:	300c      	adds	r0, #12
 800536e:	60a0      	str	r0, [r4, #8]
 8005370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005374:	f7ff fc5e 	bl	8004c34 <memset>
 8005378:	4620      	mov	r0, r4
 800537a:	bd70      	pop	{r4, r5, r6, pc}

0800537c <__sfp_lock_acquire>:
 800537c:	4801      	ldr	r0, [pc, #4]	; (8005384 <__sfp_lock_acquire+0x8>)
 800537e:	f000 b8c5 	b.w	800550c <__retarget_lock_acquire_recursive>
 8005382:	bf00      	nop
 8005384:	2000085d 	.word	0x2000085d

08005388 <__sfp_lock_release>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__sfp_lock_release+0x8>)
 800538a:	f000 b8c0 	b.w	800550e <__retarget_lock_release_recursive>
 800538e:	bf00      	nop
 8005390:	2000085d 	.word	0x2000085d

08005394 <__sinit_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__sinit_lock_acquire+0x8>)
 8005396:	f000 b8b9 	b.w	800550c <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	2000085e 	.word	0x2000085e

080053a0 <__sinit_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__sinit_lock_release+0x8>)
 80053a2:	f000 b8b4 	b.w	800550e <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	2000085e 	.word	0x2000085e

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sinit_lock_acquire>
 80053b4:	69a3      	ldr	r3, [r4, #24]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sinit_lock_release>
 80053c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053c4:	6523      	str	r3, [r4, #80]	; 0x50
 80053c6:	4b13      	ldr	r3, [pc, #76]	; (8005414 <__sinit+0x68>)
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <__sinit+0x6c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	bf04      	itt	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	61a3      	streq	r3, [r4, #24]
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f820 	bl	800541c <__sfp>
 80053dc:	6060      	str	r0, [r4, #4]
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f81c 	bl	800541c <__sfp>
 80053e4:	60a0      	str	r0, [r4, #8]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f818 	bl	800541c <__sfp>
 80053ec:	2200      	movs	r2, #0
 80053ee:	60e0      	str	r0, [r4, #12]
 80053f0:	2104      	movs	r1, #4
 80053f2:	6860      	ldr	r0, [r4, #4]
 80053f4:	f7ff ff82 	bl	80052fc <std>
 80053f8:	68a0      	ldr	r0, [r4, #8]
 80053fa:	2201      	movs	r2, #1
 80053fc:	2109      	movs	r1, #9
 80053fe:	f7ff ff7d 	bl	80052fc <std>
 8005402:	68e0      	ldr	r0, [r4, #12]
 8005404:	2202      	movs	r2, #2
 8005406:	2112      	movs	r1, #18
 8005408:	f7ff ff78 	bl	80052fc <std>
 800540c:	2301      	movs	r3, #1
 800540e:	61a3      	str	r3, [r4, #24]
 8005410:	e7d2      	b.n	80053b8 <__sinit+0xc>
 8005412:	bf00      	nop
 8005414:	08005e78 	.word	0x08005e78
 8005418:	08005345 	.word	0x08005345

0800541c <__sfp>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	4607      	mov	r7, r0
 8005420:	f7ff ffac 	bl	800537c <__sfp_lock_acquire>
 8005424:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <__sfp+0x84>)
 8005426:	681e      	ldr	r6, [r3, #0]
 8005428:	69b3      	ldr	r3, [r6, #24]
 800542a:	b913      	cbnz	r3, 8005432 <__sfp+0x16>
 800542c:	4630      	mov	r0, r6
 800542e:	f7ff ffbd 	bl	80053ac <__sinit>
 8005432:	3648      	adds	r6, #72	; 0x48
 8005434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005438:	3b01      	subs	r3, #1
 800543a:	d503      	bpl.n	8005444 <__sfp+0x28>
 800543c:	6833      	ldr	r3, [r6, #0]
 800543e:	b30b      	cbz	r3, 8005484 <__sfp+0x68>
 8005440:	6836      	ldr	r6, [r6, #0]
 8005442:	e7f7      	b.n	8005434 <__sfp+0x18>
 8005444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005448:	b9d5      	cbnz	r5, 8005480 <__sfp+0x64>
 800544a:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <__sfp+0x88>)
 800544c:	60e3      	str	r3, [r4, #12]
 800544e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005452:	6665      	str	r5, [r4, #100]	; 0x64
 8005454:	f000 f859 	bl	800550a <__retarget_lock_init_recursive>
 8005458:	f7ff ff96 	bl	8005388 <__sfp_lock_release>
 800545c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005464:	6025      	str	r5, [r4, #0]
 8005466:	61a5      	str	r5, [r4, #24]
 8005468:	2208      	movs	r2, #8
 800546a:	4629      	mov	r1, r5
 800546c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005470:	f7ff fbe0 	bl	8004c34 <memset>
 8005474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800547c:	4620      	mov	r0, r4
 800547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005480:	3468      	adds	r4, #104	; 0x68
 8005482:	e7d9      	b.n	8005438 <__sfp+0x1c>
 8005484:	2104      	movs	r1, #4
 8005486:	4638      	mov	r0, r7
 8005488:	f7ff ff62 	bl	8005350 <__sfmoreglue>
 800548c:	4604      	mov	r4, r0
 800548e:	6030      	str	r0, [r6, #0]
 8005490:	2800      	cmp	r0, #0
 8005492:	d1d5      	bne.n	8005440 <__sfp+0x24>
 8005494:	f7ff ff78 	bl	8005388 <__sfp_lock_release>
 8005498:	230c      	movs	r3, #12
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	e7ee      	b.n	800547c <__sfp+0x60>
 800549e:	bf00      	nop
 80054a0:	08005e78 	.word	0x08005e78
 80054a4:	ffff0001 	.word	0xffff0001

080054a8 <fiprintf>:
 80054a8:	b40e      	push	{r1, r2, r3}
 80054aa:	b503      	push	{r0, r1, lr}
 80054ac:	4601      	mov	r1, r0
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <fiprintf+0x20>)
 80054b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b6:	6800      	ldr	r0, [r0, #0]
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	f000 f8c5 	bl	8005648 <_vfiprintf_r>
 80054be:	b002      	add	sp, #8
 80054c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c4:	b003      	add	sp, #12
 80054c6:	4770      	bx	lr
 80054c8:	2000000c 	.word	0x2000000c

080054cc <_fwalk_reent>:
 80054cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	4688      	mov	r8, r1
 80054d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054d8:	2700      	movs	r7, #0
 80054da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054de:	f1b9 0901 	subs.w	r9, r9, #1
 80054e2:	d505      	bpl.n	80054f0 <_fwalk_reent+0x24>
 80054e4:	6824      	ldr	r4, [r4, #0]
 80054e6:	2c00      	cmp	r4, #0
 80054e8:	d1f7      	bne.n	80054da <_fwalk_reent+0xe>
 80054ea:	4638      	mov	r0, r7
 80054ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f0:	89ab      	ldrh	r3, [r5, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d907      	bls.n	8005506 <_fwalk_reent+0x3a>
 80054f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054fa:	3301      	adds	r3, #1
 80054fc:	d003      	beq.n	8005506 <_fwalk_reent+0x3a>
 80054fe:	4629      	mov	r1, r5
 8005500:	4630      	mov	r0, r6
 8005502:	47c0      	blx	r8
 8005504:	4307      	orrs	r7, r0
 8005506:	3568      	adds	r5, #104	; 0x68
 8005508:	e7e9      	b.n	80054de <_fwalk_reent+0x12>

0800550a <__retarget_lock_init_recursive>:
 800550a:	4770      	bx	lr

0800550c <__retarget_lock_acquire_recursive>:
 800550c:	4770      	bx	lr

0800550e <__retarget_lock_release_recursive>:
 800550e:	4770      	bx	lr

08005510 <__swhatbuf_r>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	460e      	mov	r6, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	2900      	cmp	r1, #0
 800551a:	b096      	sub	sp, #88	; 0x58
 800551c:	4614      	mov	r4, r2
 800551e:	461d      	mov	r5, r3
 8005520:	da08      	bge.n	8005534 <__swhatbuf_r+0x24>
 8005522:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	061a      	lsls	r2, r3, #24
 800552c:	d410      	bmi.n	8005550 <__swhatbuf_r+0x40>
 800552e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005532:	e00e      	b.n	8005552 <__swhatbuf_r+0x42>
 8005534:	466a      	mov	r2, sp
 8005536:	f000 fbb9 	bl	8005cac <_fstat_r>
 800553a:	2800      	cmp	r0, #0
 800553c:	dbf1      	blt.n	8005522 <__swhatbuf_r+0x12>
 800553e:	9a01      	ldr	r2, [sp, #4]
 8005540:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005544:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005548:	425a      	negs	r2, r3
 800554a:	415a      	adcs	r2, r3
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	e7ee      	b.n	800552e <__swhatbuf_r+0x1e>
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	2000      	movs	r0, #0
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	b016      	add	sp, #88	; 0x58
 8005558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800555c <__smakebuf_r>:
 800555c:	898b      	ldrh	r3, [r1, #12]
 800555e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005560:	079d      	lsls	r5, r3, #30
 8005562:	4606      	mov	r6, r0
 8005564:	460c      	mov	r4, r1
 8005566:	d507      	bpl.n	8005578 <__smakebuf_r+0x1c>
 8005568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	2301      	movs	r3, #1
 8005572:	6163      	str	r3, [r4, #20]
 8005574:	b002      	add	sp, #8
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	ab01      	add	r3, sp, #4
 800557a:	466a      	mov	r2, sp
 800557c:	f7ff ffc8 	bl	8005510 <__swhatbuf_r>
 8005580:	9900      	ldr	r1, [sp, #0]
 8005582:	4605      	mov	r5, r0
 8005584:	4630      	mov	r0, r6
 8005586:	f7ff fbc9 	bl	8004d1c <_malloc_r>
 800558a:	b948      	cbnz	r0, 80055a0 <__smakebuf_r+0x44>
 800558c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005590:	059a      	lsls	r2, r3, #22
 8005592:	d4ef      	bmi.n	8005574 <__smakebuf_r+0x18>
 8005594:	f023 0303 	bic.w	r3, r3, #3
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	e7e3      	b.n	8005568 <__smakebuf_r+0xc>
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <__smakebuf_r+0x7c>)
 80055a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	6020      	str	r0, [r4, #0]
 80055a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	9b00      	ldr	r3, [sp, #0]
 80055b0:	6163      	str	r3, [r4, #20]
 80055b2:	9b01      	ldr	r3, [sp, #4]
 80055b4:	6120      	str	r0, [r4, #16]
 80055b6:	b15b      	cbz	r3, 80055d0 <__smakebuf_r+0x74>
 80055b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 fb87 	bl	8005cd0 <_isatty_r>
 80055c2:	b128      	cbz	r0, 80055d0 <__smakebuf_r+0x74>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	89a0      	ldrh	r0, [r4, #12]
 80055d2:	4305      	orrs	r5, r0
 80055d4:	81a5      	strh	r5, [r4, #12]
 80055d6:	e7cd      	b.n	8005574 <__smakebuf_r+0x18>
 80055d8:	08005345 	.word	0x08005345

080055dc <__malloc_lock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__malloc_lock+0x8>)
 80055de:	f7ff bf95 	b.w	800550c <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	2000085c 	.word	0x2000085c

080055e8 <__malloc_unlock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_unlock+0x8>)
 80055ea:	f7ff bf90 	b.w	800550e <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000085c 	.word	0x2000085c

080055f4 <__sfputc_r>:
 80055f4:	6893      	ldr	r3, [r2, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	b410      	push	{r4}
 80055fc:	6093      	str	r3, [r2, #8]
 80055fe:	da08      	bge.n	8005612 <__sfputc_r+0x1e>
 8005600:	6994      	ldr	r4, [r2, #24]
 8005602:	42a3      	cmp	r3, r4
 8005604:	db01      	blt.n	800560a <__sfputc_r+0x16>
 8005606:	290a      	cmp	r1, #10
 8005608:	d103      	bne.n	8005612 <__sfputc_r+0x1e>
 800560a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560e:	f7ff bcd5 	b.w	8004fbc <__swbuf_r>
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	1c58      	adds	r0, r3, #1
 8005616:	6010      	str	r0, [r2, #0]
 8005618:	7019      	strb	r1, [r3, #0]
 800561a:	4608      	mov	r0, r1
 800561c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005620:	4770      	bx	lr

08005622 <__sfputs_r>:
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	4614      	mov	r4, r2
 800562a:	18d5      	adds	r5, r2, r3
 800562c:	42ac      	cmp	r4, r5
 800562e:	d101      	bne.n	8005634 <__sfputs_r+0x12>
 8005630:	2000      	movs	r0, #0
 8005632:	e007      	b.n	8005644 <__sfputs_r+0x22>
 8005634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005638:	463a      	mov	r2, r7
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ffda 	bl	80055f4 <__sfputc_r>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d1f3      	bne.n	800562c <__sfputs_r+0xa>
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005648 <_vfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	460d      	mov	r5, r1
 800564e:	b09d      	sub	sp, #116	; 0x74
 8005650:	4614      	mov	r4, r2
 8005652:	4698      	mov	r8, r3
 8005654:	4606      	mov	r6, r0
 8005656:	b118      	cbz	r0, 8005660 <_vfiprintf_r+0x18>
 8005658:	6983      	ldr	r3, [r0, #24]
 800565a:	b90b      	cbnz	r3, 8005660 <_vfiprintf_r+0x18>
 800565c:	f7ff fea6 	bl	80053ac <__sinit>
 8005660:	4b89      	ldr	r3, [pc, #548]	; (8005888 <_vfiprintf_r+0x240>)
 8005662:	429d      	cmp	r5, r3
 8005664:	d11b      	bne.n	800569e <_vfiprintf_r+0x56>
 8005666:	6875      	ldr	r5, [r6, #4]
 8005668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x32>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x32>
 8005674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005676:	f7ff ff49 	bl	800550c <__retarget_lock_acquire_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	d501      	bpl.n	8005684 <_vfiprintf_r+0x3c>
 8005680:	692b      	ldr	r3, [r5, #16]
 8005682:	b9eb      	cbnz	r3, 80056c0 <_vfiprintf_r+0x78>
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff fcea 	bl	8005060 <__swsetup_r>
 800568c:	b1c0      	cbz	r0, 80056c0 <_vfiprintf_r+0x78>
 800568e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005690:	07dc      	lsls	r4, r3, #31
 8005692:	d50e      	bpl.n	80056b2 <_vfiprintf_r+0x6a>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	b01d      	add	sp, #116	; 0x74
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	4b7b      	ldr	r3, [pc, #492]	; (800588c <_vfiprintf_r+0x244>)
 80056a0:	429d      	cmp	r5, r3
 80056a2:	d101      	bne.n	80056a8 <_vfiprintf_r+0x60>
 80056a4:	68b5      	ldr	r5, [r6, #8]
 80056a6:	e7df      	b.n	8005668 <_vfiprintf_r+0x20>
 80056a8:	4b79      	ldr	r3, [pc, #484]	; (8005890 <_vfiprintf_r+0x248>)
 80056aa:	429d      	cmp	r5, r3
 80056ac:	bf08      	it	eq
 80056ae:	68f5      	ldreq	r5, [r6, #12]
 80056b0:	e7da      	b.n	8005668 <_vfiprintf_r+0x20>
 80056b2:	89ab      	ldrh	r3, [r5, #12]
 80056b4:	0598      	lsls	r0, r3, #22
 80056b6:	d4ed      	bmi.n	8005694 <_vfiprintf_r+0x4c>
 80056b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ba:	f7ff ff28 	bl	800550e <__retarget_lock_release_recursive>
 80056be:	e7e9      	b.n	8005694 <_vfiprintf_r+0x4c>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9309      	str	r3, [sp, #36]	; 0x24
 80056c4:	2320      	movs	r3, #32
 80056c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ce:	2330      	movs	r3, #48	; 0x30
 80056d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005894 <_vfiprintf_r+0x24c>
 80056d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d8:	f04f 0901 	mov.w	r9, #1
 80056dc:	4623      	mov	r3, r4
 80056de:	469a      	mov	sl, r3
 80056e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e4:	b10a      	cbz	r2, 80056ea <_vfiprintf_r+0xa2>
 80056e6:	2a25      	cmp	r2, #37	; 0x25
 80056e8:	d1f9      	bne.n	80056de <_vfiprintf_r+0x96>
 80056ea:	ebba 0b04 	subs.w	fp, sl, r4
 80056ee:	d00b      	beq.n	8005708 <_vfiprintf_r+0xc0>
 80056f0:	465b      	mov	r3, fp
 80056f2:	4622      	mov	r2, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7ff ff93 	bl	8005622 <__sfputs_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	f000 80aa 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005704:	445a      	add	r2, fp
 8005706:	9209      	str	r2, [sp, #36]	; 0x24
 8005708:	f89a 3000 	ldrb.w	r3, [sl]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a2 	beq.w	8005856 <_vfiprintf_r+0x20e>
 8005712:	2300      	movs	r3, #0
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571c:	f10a 0a01 	add.w	sl, sl, #1
 8005720:	9304      	str	r3, [sp, #16]
 8005722:	9307      	str	r3, [sp, #28]
 8005724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005728:	931a      	str	r3, [sp, #104]	; 0x68
 800572a:	4654      	mov	r4, sl
 800572c:	2205      	movs	r2, #5
 800572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005732:	4858      	ldr	r0, [pc, #352]	; (8005894 <_vfiprintf_r+0x24c>)
 8005734:	f7fa fd6c 	bl	8000210 <memchr>
 8005738:	9a04      	ldr	r2, [sp, #16]
 800573a:	b9d8      	cbnz	r0, 8005774 <_vfiprintf_r+0x12c>
 800573c:	06d1      	lsls	r1, r2, #27
 800573e:	bf44      	itt	mi
 8005740:	2320      	movmi	r3, #32
 8005742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005746:	0713      	lsls	r3, r2, #28
 8005748:	bf44      	itt	mi
 800574a:	232b      	movmi	r3, #43	; 0x2b
 800574c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d015      	beq.n	8005784 <_vfiprintf_r+0x13c>
 8005758:	9a07      	ldr	r2, [sp, #28]
 800575a:	4654      	mov	r4, sl
 800575c:	2000      	movs	r0, #0
 800575e:	f04f 0c0a 	mov.w	ip, #10
 8005762:	4621      	mov	r1, r4
 8005764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005768:	3b30      	subs	r3, #48	; 0x30
 800576a:	2b09      	cmp	r3, #9
 800576c:	d94e      	bls.n	800580c <_vfiprintf_r+0x1c4>
 800576e:	b1b0      	cbz	r0, 800579e <_vfiprintf_r+0x156>
 8005770:	9207      	str	r2, [sp, #28]
 8005772:	e014      	b.n	800579e <_vfiprintf_r+0x156>
 8005774:	eba0 0308 	sub.w	r3, r0, r8
 8005778:	fa09 f303 	lsl.w	r3, r9, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	46a2      	mov	sl, r4
 8005782:	e7d2      	b.n	800572a <_vfiprintf_r+0xe2>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1d19      	adds	r1, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	9103      	str	r1, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbb      	ittet	lt
 8005790:	425b      	neglt	r3, r3
 8005792:	f042 0202 	orrlt.w	r2, r2, #2
 8005796:	9307      	strge	r3, [sp, #28]
 8005798:	9307      	strlt	r3, [sp, #28]
 800579a:	bfb8      	it	lt
 800579c:	9204      	strlt	r2, [sp, #16]
 800579e:	7823      	ldrb	r3, [r4, #0]
 80057a0:	2b2e      	cmp	r3, #46	; 0x2e
 80057a2:	d10c      	bne.n	80057be <_vfiprintf_r+0x176>
 80057a4:	7863      	ldrb	r3, [r4, #1]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d135      	bne.n	8005816 <_vfiprintf_r+0x1ce>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d1a      	adds	r2, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9203      	str	r2, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfb8      	it	lt
 80057b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80057ba:	3402      	adds	r4, #2
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058a4 <_vfiprintf_r+0x25c>
 80057c2:	7821      	ldrb	r1, [r4, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	f7fa fd22 	bl	8000210 <memchr>
 80057cc:	b140      	cbz	r0, 80057e0 <_vfiprintf_r+0x198>
 80057ce:	2340      	movs	r3, #64	; 0x40
 80057d0:	eba0 000a 	sub.w	r0, r0, sl
 80057d4:	fa03 f000 	lsl.w	r0, r3, r0
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	4303      	orrs	r3, r0
 80057dc:	3401      	adds	r4, #1
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e4:	482c      	ldr	r0, [pc, #176]	; (8005898 <_vfiprintf_r+0x250>)
 80057e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ea:	2206      	movs	r2, #6
 80057ec:	f7fa fd10 	bl	8000210 <memchr>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d03f      	beq.n	8005874 <_vfiprintf_r+0x22c>
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <_vfiprintf_r+0x254>)
 80057f6:	bb1b      	cbnz	r3, 8005840 <_vfiprintf_r+0x1f8>
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	3307      	adds	r3, #7
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	443b      	add	r3, r7
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	e767      	b.n	80056dc <_vfiprintf_r+0x94>
 800580c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005810:	460c      	mov	r4, r1
 8005812:	2001      	movs	r0, #1
 8005814:	e7a5      	b.n	8005762 <_vfiprintf_r+0x11a>
 8005816:	2300      	movs	r3, #0
 8005818:	3401      	adds	r4, #1
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0c0a 	mov.w	ip, #10
 8005822:	4620      	mov	r0, r4
 8005824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005828:	3a30      	subs	r2, #48	; 0x30
 800582a:	2a09      	cmp	r2, #9
 800582c:	d903      	bls.n	8005836 <_vfiprintf_r+0x1ee>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0c5      	beq.n	80057be <_vfiprintf_r+0x176>
 8005832:	9105      	str	r1, [sp, #20]
 8005834:	e7c3      	b.n	80057be <_vfiprintf_r+0x176>
 8005836:	fb0c 2101 	mla	r1, ip, r1, r2
 800583a:	4604      	mov	r4, r0
 800583c:	2301      	movs	r3, #1
 800583e:	e7f0      	b.n	8005822 <_vfiprintf_r+0x1da>
 8005840:	ab03      	add	r3, sp, #12
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	462a      	mov	r2, r5
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <_vfiprintf_r+0x258>)
 8005848:	a904      	add	r1, sp, #16
 800584a:	4630      	mov	r0, r6
 800584c:	f3af 8000 	nop.w
 8005850:	4607      	mov	r7, r0
 8005852:	1c78      	adds	r0, r7, #1
 8005854:	d1d6      	bne.n	8005804 <_vfiprintf_r+0x1bc>
 8005856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d405      	bmi.n	8005868 <_vfiprintf_r+0x220>
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	059a      	lsls	r2, r3, #22
 8005860:	d402      	bmi.n	8005868 <_vfiprintf_r+0x220>
 8005862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005864:	f7ff fe53 	bl	800550e <__retarget_lock_release_recursive>
 8005868:	89ab      	ldrh	r3, [r5, #12]
 800586a:	065b      	lsls	r3, r3, #25
 800586c:	f53f af12 	bmi.w	8005694 <_vfiprintf_r+0x4c>
 8005870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005872:	e711      	b.n	8005698 <_vfiprintf_r+0x50>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <_vfiprintf_r+0x258>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4630      	mov	r0, r6
 8005880:	f000 f880 	bl	8005984 <_printf_i>
 8005884:	e7e4      	b.n	8005850 <_vfiprintf_r+0x208>
 8005886:	bf00      	nop
 8005888:	08005f4c 	.word	0x08005f4c
 800588c:	08005f6c 	.word	0x08005f6c
 8005890:	08005f2c 	.word	0x08005f2c
 8005894:	08005f8c 	.word	0x08005f8c
 8005898:	08005f96 	.word	0x08005f96
 800589c:	00000000 	.word	0x00000000
 80058a0:	08005623 	.word	0x08005623
 80058a4:	08005f92 	.word	0x08005f92

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4616      	mov	r6, r2
 80058ae:	4699      	mov	r9, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c4:	4607      	mov	r7, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b10a      	cbz	r2, 80058ce <_printf_common+0x26>
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	6833      	ldrmi	r3, [r6, #0]
 80058d6:	3302      	addmi	r3, #2
 80058d8:	6033      	strmi	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	f015 0506 	ands.w	r5, r5, #6
 80058e0:	d106      	bne.n	80058f0 <_printf_common+0x48>
 80058e2:	f104 0a19 	add.w	sl, r4, #25
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	6832      	ldr	r2, [r6, #0]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dc26      	bgt.n	800593e <_printf_common+0x96>
 80058f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f4:	1e13      	subs	r3, r2, #0
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	0692      	lsls	r2, r2, #26
 80058fe:	d42b      	bmi.n	8005958 <_printf_common+0xb0>
 8005900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	3001      	adds	r0, #1
 800590c:	d01e      	beq.n	800594c <_printf_common+0xa4>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	68e5      	ldr	r5, [r4, #12]
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	f003 0306 	and.w	r3, r3, #6
 8005918:	2b04      	cmp	r3, #4
 800591a:	bf08      	it	eq
 800591c:	1aad      	subeq	r5, r5, r2
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	bf0c      	ite	eq
 8005924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005928:	2500      	movne	r5, #0
 800592a:	4293      	cmp	r3, r2
 800592c:	bfc4      	itt	gt
 800592e:	1a9b      	subgt	r3, r3, r2
 8005930:	18ed      	addgt	r5, r5, r3
 8005932:	2600      	movs	r6, #0
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xc8>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xa8>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4649      	mov	r1, r9
 8005944:	4638      	mov	r0, r7
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xac>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c6      	b.n	80058e6 <_printf_common+0x3e>
 8005958:	18e1      	adds	r1, r4, r3
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	2030      	movs	r0, #48	; 0x30
 800595e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005962:	4422      	add	r2, r4
 8005964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800596c:	3302      	adds	r3, #2
 800596e:	e7c7      	b.n	8005900 <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa4>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x8e>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	7e0f      	ldrb	r7, [r1, #24]
 800598a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800598c:	2f78      	cmp	r7, #120	; 0x78
 800598e:	4691      	mov	r9, r2
 8005990:	4680      	mov	r8, r0
 8005992:	460c      	mov	r4, r1
 8005994:	469a      	mov	sl, r3
 8005996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	; 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d8 	beq.w	8005b56 <_printf_i+0x1d2>
 80059a6:	2f58      	cmp	r7, #88	; 0x58
 80059a8:	f000 80a3 	beq.w	8005af2 <_printf_i+0x16e>
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a101      	add	r1, pc, #4	; (adr r1, 80059c4 <_printf_i+0x40>)
 80059c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b3d 	.word	0x08005b3d
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005b1f 	.word	0x08005b1f
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b5f 	.word	0x08005b5f
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005b27 	.word	0x08005b27
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0a3      	b.n	8005b78 <_printf_i+0x1f4>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	6829      	ldr	r1, [r5, #0]
 8005a34:	0606      	lsls	r6, r0, #24
 8005a36:	f101 0304 	add.w	r3, r1, #4
 8005a3a:	d50a      	bpl.n	8005a52 <_printf_i+0xce>
 8005a3c:	680e      	ldr	r6, [r1, #0]
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xc8>
 8005a44:	232d      	movs	r3, #45	; 0x2d
 8005a46:	4276      	negs	r6, r6
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a4c:	485e      	ldr	r0, [pc, #376]	; (8005bc8 <_printf_i+0x244>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e019      	b.n	8005a86 <_printf_i+0x102>
 8005a52:	680e      	ldr	r6, [r1, #0]
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a5a:	bf18      	it	ne
 8005a5c:	b236      	sxthne	r6, r6
 8005a5e:	e7ef      	b.n	8005a40 <_printf_i+0xbc>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1d19      	adds	r1, r3, #4
 8005a66:	6029      	str	r1, [r5, #0]
 8005a68:	0601      	lsls	r1, r0, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xec>
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xf2>
 8005a70:	0646      	lsls	r6, r0, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe8>
 8005a74:	881e      	ldrh	r6, [r3, #0]
 8005a76:	4854      	ldr	r0, [pc, #336]	; (8005bc8 <_printf_i+0x244>)
 8005a78:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2308      	moveq	r3, #8
 8005a7e:	230a      	movne	r3, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6865      	ldr	r5, [r4, #4]
 8005a88:	60a5      	str	r5, [r4, #8]
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	bfa2      	ittt	ge
 8005a8e:	6821      	ldrge	r1, [r4, #0]
 8005a90:	f021 0104 	bicge.w	r1, r1, #4
 8005a94:	6021      	strge	r1, [r4, #0]
 8005a96:	b90e      	cbnz	r6, 8005a9c <_printf_i+0x118>
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	d04d      	beq.n	8005b38 <_printf_i+0x1b4>
 8005a9c:	4615      	mov	r5, r2
 8005a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8005aa6:	5dc7      	ldrb	r7, [r0, r7]
 8005aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005aac:	4637      	mov	r7, r6
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	d9f4      	bls.n	8005a9e <_printf_i+0x11a>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d10b      	bne.n	8005ad0 <_printf_i+0x14c>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07de      	lsls	r6, r3, #31
 8005abc:	d508      	bpl.n	8005ad0 <_printf_i+0x14c>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	bfde      	ittt	le
 8005ac6:	2330      	movle	r3, #48	; 0x30
 8005ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad0:	1b52      	subs	r2, r2, r5
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	f8cd a000 	str.w	sl, [sp]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fee2 	bl	80058a8 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14c      	bne.n	8005b82 <_printf_i+0x1fe>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b004      	add	sp, #16
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	4835      	ldr	r0, [pc, #212]	; (8005bc8 <_printf_i+0x244>)
 8005af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005af8:	6829      	ldr	r1, [r5, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b00:	6029      	str	r1, [r5, #0]
 8005b02:	061d      	lsls	r5, r3, #24
 8005b04:	d514      	bpl.n	8005b30 <_printf_i+0x1ac>
 8005b06:	07df      	lsls	r7, r3, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0e:	6023      	strmi	r3, [r4, #0]
 8005b10:	b91e      	cbnz	r6, 8005b1a <_printf_i+0x196>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f023 0320 	bic.w	r3, r3, #32
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	e7b0      	b.n	8005a80 <_printf_i+0xfc>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2378      	movs	r3, #120	; 0x78
 8005b28:	4828      	ldr	r0, [pc, #160]	; (8005bcc <_printf_i+0x248>)
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b2e:	e7e3      	b.n	8005af8 <_printf_i+0x174>
 8005b30:	0659      	lsls	r1, r3, #25
 8005b32:	bf48      	it	mi
 8005b34:	b2b6      	uxthmi	r6, r6
 8005b36:	e7e6      	b.n	8005b06 <_printf_i+0x182>
 8005b38:	4615      	mov	r5, r2
 8005b3a:	e7bb      	b.n	8005ab4 <_printf_i+0x130>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	6826      	ldr	r6, [r4, #0]
 8005b40:	6961      	ldr	r1, [r4, #20]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6028      	str	r0, [r5, #0]
 8005b46:	0635      	lsls	r5, r6, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1cc>
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1d2>
 8005b50:	0670      	lsls	r0, r6, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1c8>
 8005b54:	8019      	strh	r1, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	e7ba      	b.n	8005ad4 <_printf_i+0x150>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	681d      	ldr	r5, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fa fb50 	bl	8000210 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1f2>
 8005b72:	1b40      	subs	r0, r0, r5
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	e7a8      	b.n	8005ad4 <_printf_i+0x150>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ab      	beq.n	8005ae8 <_printf_i+0x164>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x23a>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a4      	b.n	8005aec <_printf_i+0x168>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09b      	beq.n	8005ae8 <_printf_i+0x164>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x21e>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x212>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x22e>
 8005bc6:	bf00      	nop
 8005bc8:	08005f9d 	.word	0x08005f9d
 8005bcc:	08005fae 	.word	0x08005fae

08005bd0 <__sread>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd8:	f000 f89c 	bl	8005d14 <_read_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	bfab      	itete	ge
 8005be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005be2:	89a3      	ldrhlt	r3, [r4, #12]
 8005be4:	181b      	addge	r3, r3, r0
 8005be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bea:	bfac      	ite	ge
 8005bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bee:	81a3      	strhlt	r3, [r4, #12]
 8005bf0:	bd10      	pop	{r4, pc}

08005bf2 <__swrite>:
 8005bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	898b      	ldrh	r3, [r1, #12]
 8005bfa:	05db      	lsls	r3, r3, #23
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	4616      	mov	r6, r2
 8005c02:	d505      	bpl.n	8005c10 <__swrite+0x1e>
 8005c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c08:	2302      	movs	r3, #2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f000 f870 	bl	8005cf0 <_lseek_r>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	463b      	mov	r3, r7
 8005c20:	4628      	mov	r0, r5
 8005c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c26:	f000 b817 	b.w	8005c58 <_write_r>

08005c2a <__sseek>:
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 f85d 	bl	8005cf0 <_lseek_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	bf15      	itete	ne
 8005c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c46:	81a3      	strheq	r3, [r4, #12]
 8005c48:	bf18      	it	ne
 8005c4a:	81a3      	strhne	r3, [r4, #12]
 8005c4c:	bd10      	pop	{r4, pc}

08005c4e <__sclose>:
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 b81b 	b.w	8005c8c <_close_r>
	...

08005c58 <_write_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	; (8005c78 <_write_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fb fa8c 	bl	8001184 <_write>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_write_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_write_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000860 	.word	0x20000860

08005c7c <abort>:
 8005c7c:	b508      	push	{r3, lr}
 8005c7e:	2006      	movs	r0, #6
 8005c80:	f000 f882 	bl	8005d88 <raise>
 8005c84:	2001      	movs	r0, #1
 8005c86:	f7fb fc97 	bl	80015b8 <_exit>
	...

08005c8c <_close_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d06      	ldr	r5, [pc, #24]	; (8005ca8 <_close_r+0x1c>)
 8005c90:	2300      	movs	r3, #0
 8005c92:	4604      	mov	r4, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fb fcb5 	bl	8001606 <_close>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_close_r+0x1a>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_close_r+0x1a>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	20000860 	.word	0x20000860

08005cac <_fstat_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	; (8005ccc <_fstat_r+0x20>)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	f7fb fcb0 	bl	800161e <_fstat>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	d102      	bne.n	8005cc8 <_fstat_r+0x1c>
 8005cc2:	682b      	ldr	r3, [r5, #0]
 8005cc4:	b103      	cbz	r3, 8005cc8 <_fstat_r+0x1c>
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	bd38      	pop	{r3, r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000860 	.word	0x20000860

08005cd0 <_isatty_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d06      	ldr	r5, [pc, #24]	; (8005cec <_isatty_r+0x1c>)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	4608      	mov	r0, r1
 8005cda:	602b      	str	r3, [r5, #0]
 8005cdc:	f7fb fcaf 	bl	800163e <_isatty>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d102      	bne.n	8005cea <_isatty_r+0x1a>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	b103      	cbz	r3, 8005cea <_isatty_r+0x1a>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	20000860 	.word	0x20000860

08005cf0 <_lseek_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d07      	ldr	r5, [pc, #28]	; (8005d10 <_lseek_r+0x20>)
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	4608      	mov	r0, r1
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	602a      	str	r2, [r5, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f7fb fca8 	bl	8001654 <_lseek>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_lseek_r+0x1e>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_lseek_r+0x1e>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000860 	.word	0x20000860

08005d14 <_read_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d07      	ldr	r5, [pc, #28]	; (8005d34 <_read_r+0x20>)
 8005d18:	4604      	mov	r4, r0
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	2200      	movs	r2, #0
 8005d20:	602a      	str	r2, [r5, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f7fb fc52 	bl	80015cc <_read>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_read_r+0x1e>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_read_r+0x1e>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	20000860 	.word	0x20000860

08005d38 <_raise_r>:
 8005d38:	291f      	cmp	r1, #31
 8005d3a:	b538      	push	{r3, r4, r5, lr}
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	460d      	mov	r5, r1
 8005d40:	d904      	bls.n	8005d4c <_raise_r+0x14>
 8005d42:	2316      	movs	r3, #22
 8005d44:	6003      	str	r3, [r0, #0]
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d4e:	b112      	cbz	r2, 8005d56 <_raise_r+0x1e>
 8005d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d54:	b94b      	cbnz	r3, 8005d6a <_raise_r+0x32>
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 f830 	bl	8005dbc <_getpid_r>
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4601      	mov	r1, r0
 8005d60:	4620      	mov	r0, r4
 8005d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d66:	f000 b817 	b.w	8005d98 <_kill_r>
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d00a      	beq.n	8005d84 <_raise_r+0x4c>
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	d103      	bne.n	8005d7a <_raise_r+0x42>
 8005d72:	2316      	movs	r3, #22
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	2001      	movs	r0, #1
 8005d78:	e7e7      	b.n	8005d4a <_raise_r+0x12>
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d80:	4628      	mov	r0, r5
 8005d82:	4798      	blx	r3
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7e0      	b.n	8005d4a <_raise_r+0x12>

08005d88 <raise>:
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <raise+0xc>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f7ff bfd3 	b.w	8005d38 <_raise_r>
 8005d92:	bf00      	nop
 8005d94:	2000000c 	.word	0x2000000c

08005d98 <_kill_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_kill_r+0x20>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	f7fb fbf7 	bl	8001598 <_kill>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d102      	bne.n	8005db4 <_kill_r+0x1c>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	b103      	cbz	r3, 8005db4 <_kill_r+0x1c>
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	20000860 	.word	0x20000860

08005dbc <_getpid_r>:
 8005dbc:	f7fb bbe4 	b.w	8001588 <_getpid>

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
