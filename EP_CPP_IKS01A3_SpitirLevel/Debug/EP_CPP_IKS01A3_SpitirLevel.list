
EP_CPP_IKS01A3_SpitirLevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf5c  0800bf5c  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf5c  0800bf5c  0001bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf64  0800bf64  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bf6c  0800bf6c  0001bf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800bf74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000144  0800c0b8  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001e4  0800c158  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008ec  20000284  0800c1f8  00020284  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b70  0800c1f8  00020b70  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ef67  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005467  00000000  00000000  0005f21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002920  00000000  00000000  00064688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002760  00000000  00000000  00066fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ea35  00000000  00000000  00069708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029539  00000000  00000000  0009813d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00106db8  00000000  00000000  000c1676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c842e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000babc  00000000  00000000  001c8480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be24 	.word	0x0800be24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0800be24 	.word	0x0800be24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9bf 	b.w	8000650 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <_ZN13AccGyroSensorC1Ev>:
 *      Author: raphael.baumeler
 */

#include "AccGyroSensor.h"

AccGyroSensor::AccGyroSensor() {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <_ZN13AccGyroSensorC1Ev+0x44>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2203      	movs	r2, #3
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2202      	movs	r2, #2
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2201      	movs	r2, #1
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3314      	adds	r3, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f874 	bl	800076c <_ZN14IKS01A3_MotionC1Ev>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3378      	adds	r3, #120	; 0x78
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f86f 	bl	800076c <_ZN14IKS01A3_MotionC1Ev>
	// TODO Auto-generated constructor stub

}
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0800be74 	.word	0x0800be74

0800069c <_ZN13AccGyroSensorD1Ev>:

AccGyroSensor::~AccGyroSensor() {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <_ZN13AccGyroSensorD1Ev+0x2c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3378      	adds	r3, #120	; 0x78
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f89a 	bl	80007e8 <_ZN14IKS01A3_MotionD1Ev>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3314      	adds	r3, #20
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f895 	bl	80007e8 <_ZN14IKS01A3_MotionD1Ev>
	// TODO Auto-generated destructor stub
}
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	0800be74 	.word	0x0800be74

080006cc <_ZN13AccGyroSensorD0Ev>:
AccGyroSensor::~AccGyroSensor() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
}
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffe1 	bl	800069c <_ZN13AccGyroSensorD1Ev>
 80006da:	21dc      	movs	r1, #220	; 0xdc
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f00a fae7 	bl	800acb0 <_ZdlPvj>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_ZN13AccGyroSensor10initSensorEv>:

void AccGyroSensor::initSensor() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	AccGyroSensor::Gyro.init(INSTANCE, FUNCTION_INIT_ACC_GYRO);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f103 0014 	add.w	r0, r3, #20
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6859      	ldr	r1, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	461a      	mov	r2, r3
 8000704:	f000 f890 	bl	8000828 <_ZN14IKS01A3_Motion4initEmm>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN13AccGyroSensor12updateValuesEv>:

void AccGyroSensor::updateValues() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	AccGyroSensor::Gyro.updateValues(INSTANCE, FUNCTION_GYRO);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f103 0014 	add.w	r0, r3, #20
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6859      	ldr	r1, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	461a      	mov	r2, r3
 8000728:	f000 f8a5 	bl	8000876 <_ZN14IKS01A3_Motion12updateValuesEmm>
	AccGyroSensor::Acc.updateValues(INSTANCE, FUNCTION_ACC);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6859      	ldr	r1, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	461a      	mov	r2, r3
 800073c:	f000 f89b 	bl	8000876 <_ZN14IKS01A3_Motion12updateValuesEmm>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN13AccGyroSensor7setZeroEv>:

void AccGyroSensor::setZero() {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	AccGyroSensor::Acc.setZero();
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3378      	adds	r3, #120	; 0x78
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f875 	bl	8000844 <_ZN14IKS01A3_Motion7setZeroEv>
	AccGyroSensor::Gyro.setZero();
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3314      	adds	r3, #20
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f870 	bl	8000844 <_ZN14IKS01A3_Motion7setZeroEv>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <_ZN14IKS01A3_MotionC1Ev>:
 *      Author: raphael.baumeler
 */

#include "IKS01A3Motion.h"

IKS01A3_Motion::IKS01A3_Motion() {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <_ZN14IKS01A3_MotionC1Ev+0x78>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	331c      	adds	r3, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3334      	adds	r3, #52	; 0x34
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	334c      	adds	r3, #76	; 0x4c
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
    AxisOffsets.x=0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
    AxisValues.x=0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
    AxisOffsets.y=0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
    AxisValues.y=0;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    AxisOffsets.z=0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
    AxisValues.z=0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	0800be84 	.word	0x0800be84

080007e8 <_ZN14IKS01A3_MotionD1Ev>:

IKS01A3_Motion::~IKS01A3_Motion() {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <_ZN14IKS01A3_MotionD1Ev+0x1c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	0800be84 	.word	0x0800be84

08000808 <_ZN14IKS01A3_MotionD0Ev>:
IKS01A3_Motion::~IKS01A3_Motion() {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
}
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ffe9 	bl	80007e8 <_ZN14IKS01A3_MotionD1Ev>
 8000816:	2164      	movs	r1, #100	; 0x64
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f00a fa49 	bl	800acb0 <_ZdlPvj>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_ZN14IKS01A3_Motion4initEmm>:

void IKS01A3_Motion::init(uint32_t instance, uint32_t function) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
	IKS01A3_MOTION_SENSOR_Init(instance, function);
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	68b8      	ldr	r0, [r7, #8]
 8000838:	f005 ffd8 	bl	80067ec <IKS01A3_MOTION_SENSOR_Init>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <_ZN14IKS01A3_Motion7setZeroEv>:
	*XAxis = AxisValues.x;
	*YAxis = AxisValues.y;
	*ZAxis = AxisValues.z;
}

void IKS01A3_Motion::setZero() {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    AxisOffsets.x=-AxisValues.x;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	425a      	negs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	611a      	str	r2, [r3, #16]
    AxisOffsets.y=-AxisValues.y;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	425a      	negs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	615a      	str	r2, [r3, #20]
    AxisOffsets.z=-AxisValues.z;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	425a      	negs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	619a      	str	r2, [r3, #24]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_ZN14IKS01A3_Motion12updateValuesEmm>:

void IKS01A3_Motion::updateValues(uint32_t instance, uint32_t function) {
 8000876:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6178      	str	r0, [r7, #20]
 8000880:	6139      	str	r1, [r7, #16]
 8000882:	60fa      	str	r2, [r7, #12]
	IKS01A3_MOTION_SENSOR_Axes_t CurrentAxisValues;

    IKS01A3_MOTION_SENSOR_GetAxes(instance, function, &CurrentAxisValues);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	461a      	mov	r2, r3
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	6938      	ldr	r0, [r7, #16]
 800088e:	f006 f8a9 	bl	80069e4 <IKS01A3_MOTION_SENSOR_GetAxes>

    // Fill Buffer's
    std::rotate(RingBufferAxisX.begin(),RingBufferAxisX.begin()+1,RingBufferAxisX.end());
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	331c      	adds	r3, #28
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f8fd 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 800089c:	4605      	mov	r5, r0
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	331c      	adds	r3, #28
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f8f7 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 80008a8:	4603      	mov	r3, r0
 80008aa:	1d1c      	adds	r4, r3, #4
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	331c      	adds	r3, #28
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8fc 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4621      	mov	r1, r4
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f903 	bl	8000ac8 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisX[5]=CurrentAxisValues.x;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	331c      	adds	r3, #28
 80008c6:	2105      	movs	r1, #5
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f914 	bl	8000af6 <_ZNSt5arrayIlLj6EEixEj>
 80008ce:	4602      	mov	r2, r0
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	6013      	str	r3, [r2, #0]

    std::rotate(RingBufferAxisY.begin(),RingBufferAxisY.begin()+1,RingBufferAxisY.end());
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3334      	adds	r3, #52	; 0x34
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f8dc 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 80008de:	4605      	mov	r5, r0
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3334      	adds	r3, #52	; 0x34
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8d6 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 80008ea:	4603      	mov	r3, r0
 80008ec:	1d1c      	adds	r4, r3, #4
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3334      	adds	r3, #52	; 0x34
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f8db 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4621      	mov	r1, r4
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 f8e2 	bl	8000ac8 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisY[5]=CurrentAxisValues.y;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3334      	adds	r3, #52	; 0x34
 8000908:	2105      	movs	r1, #5
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f8f3 	bl	8000af6 <_ZNSt5arrayIlLj6EEixEj>
 8000910:	4602      	mov	r2, r0
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	6013      	str	r3, [r2, #0]

    std::rotate(RingBufferAxisZ.begin(),RingBufferAxisZ.begin()+1,RingBufferAxisZ.end());
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	334c      	adds	r3, #76	; 0x4c
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f8bb 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 8000920:	4605      	mov	r5, r0
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	334c      	adds	r3, #76	; 0x4c
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f8b5 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 800092c:	4603      	mov	r3, r0
 800092e:	1d1c      	adds	r4, r3, #4
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	334c      	adds	r3, #76	; 0x4c
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f8ba 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4621      	mov	r1, r4
 8000940:	4628      	mov	r0, r5
 8000942:	f000 f8c1 	bl	8000ac8 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>
    RingBufferAxisZ[5]=CurrentAxisValues.z;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	334c      	adds	r3, #76	; 0x4c
 800094a:	2105      	movs	r1, #5
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f8d2 	bl	8000af6 <_ZNSt5arrayIlLj6EEixEj>
 8000952:	4602      	mov	r2, r0
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	6013      	str	r3, [r2, #0]

    // Make Average of Buffer's
    AxisValues.x = std::accumulate(RingBufferAxisX.begin(), RingBufferAxisX.end(), 0LL) / RingBufferAxisX.size();
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	331c      	adds	r3, #28
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f89a 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 8000962:	4604      	mov	r4, r0
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	331c      	adds	r3, #28
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f8a0 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 800096e:	4601      	mov	r1, r0
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	4620      	mov	r0, r4
 800097a:	f000 f8cb 	bl	8000b14 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 800097e:	4604      	mov	r4, r0
 8000980:	460d      	mov	r5, r1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	331c      	adds	r3, #28
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f8ea 	bl	8000b60 <_ZNKSt5arrayIlLj6EE4sizeEv>
 800098c:	4603      	mov	r3, r0
 800098e:	2200      	movs	r2, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000998:	4620      	mov	r0, r4
 800099a:	4629      	mov	r1, r5
 800099c:	f7ff fc88 	bl	80002b0 <__aeabi_ldivmod>
 80009a0:	4602      	mov	r2, r0
 80009a2:	460b      	mov	r3, r1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	605a      	str	r2, [r3, #4]
    AxisValues.y = std::accumulate(RingBufferAxisY.begin(), RingBufferAxisY.end(), 0LL) / RingBufferAxisY.size();
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3334      	adds	r3, #52	; 0x34
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f872 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 80009b2:	4604      	mov	r4, r0
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3334      	adds	r3, #52	; 0x34
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f878 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 80009be:	4601      	mov	r1, r0
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 f8a3 	bl	8000b14 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 80009ce:	4604      	mov	r4, r0
 80009d0:	460d      	mov	r5, r1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3334      	adds	r3, #52	; 0x34
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f8c2 	bl	8000b60 <_ZNKSt5arrayIlLj6EE4sizeEv>
 80009dc:	4603      	mov	r3, r0
 80009de:	2200      	movs	r2, #0
 80009e0:	469a      	mov	sl, r3
 80009e2:	4693      	mov	fp, r2
 80009e4:	4652      	mov	r2, sl
 80009e6:	465b      	mov	r3, fp
 80009e8:	4620      	mov	r0, r4
 80009ea:	4629      	mov	r1, r5
 80009ec:	f7ff fc60 	bl	80002b0 <__aeabi_ldivmod>
 80009f0:	4602      	mov	r2, r0
 80009f2:	460b      	mov	r3, r1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	609a      	str	r2, [r3, #8]
    AxisValues.z = std::accumulate(RingBufferAxisZ.begin(), RingBufferAxisZ.end(), 0LL) / RingBufferAxisZ.size();
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	334c      	adds	r3, #76	; 0x4c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f84a 	bl	8000a96 <_ZNSt5arrayIlLj6EE5beginEv>
 8000a02:	4604      	mov	r4, r0
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	334c      	adds	r3, #76	; 0x4c
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f850 	bl	8000aae <_ZNSt5arrayIlLj6EE3endEv>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f000 f87b 	bl	8000b14 <_ZSt10accumulateIPlxET0_T_S2_S1_>
 8000a1e:	4604      	mov	r4, r0
 8000a20:	460d      	mov	r5, r1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	334c      	adds	r3, #76	; 0x4c
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f89a 	bl	8000b60 <_ZNKSt5arrayIlLj6EE4sizeEv>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4698      	mov	r8, r3
 8000a32:	4691      	mov	r9, r2
 8000a34:	4642      	mov	r2, r8
 8000a36:	464b      	mov	r3, r9
 8000a38:	4620      	mov	r0, r4
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	f7ff fc38 	bl	80002b0 <__aeabi_ldivmod>
 8000a40:	4602      	mov	r2, r0
 8000a42:	460b      	mov	r3, r1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	60da      	str	r2, [r3, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000a52 <_ZN14IKS01A3_Motion12getAVGValuesEPlS0_S0_>:

void IKS01A3_Motion::getAVGValues(int32_t *XAxis, int32_t *YAxis,
		int32_t *ZAxis) {
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]
    *XAxis=AxisValues.x+AxisOffsets.x;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	601a      	str	r2, [r3, #0]
    *YAxis=AxisValues.y+AxisOffsets.y;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	441a      	add	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
    *ZAxis=AxisValues.z+AxisOffsets.z;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	441a      	add	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_ZNSt5arrayIlLj6EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f869 	bl	8000b76 <_ZNSt5arrayIlLj6EE4dataEv>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_ZNSt5arrayIlLj6EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f85d 	bl	8000b76 <_ZNSt5arrayIlLj6EE4dataEv>
 8000abc:	4603      	mov	r3, r0
 8000abe:	3318      	adds	r3, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZNSt3_V26rotateIPlEET_S2_S2_S2_>:
   *  for each @p n in the range @p [0,__last-__first).
  */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      return std::__rotate(__first, __middle, __last,
 8000ad4:	68fc      	ldr	r4, [r7, #12]
			   std::__iterator_category(__first));
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f858 	bl	8000b90 <_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__rotate(__first, __middle, __last,
 8000ae0:	462b      	mov	r3, r5
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f000 f85d 	bl	8000ba6 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag>
 8000aec:	4603      	mov	r3, r0
    }
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}

08000af6 <_ZNSt5arrayIlLj6EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6839      	ldr	r1, [r7, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f94c 	bl	8000da2 <_ZNSt14__array_traitsIlLj6EE6_S_refERA6_Klj>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZSt10accumulateIPlxET0_T_S2_S1_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 8000b14:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	e9c7 2300 	strd	r2, r3, [r7]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d010      	beq.n	8000b4e <_ZSt10accumulateIPlxET0_T_S2_S1_+0x3a>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	17da      	asrs	r2, r3, #31
 8000b32:	461c      	mov	r4, r3
 8000b34:	4615      	mov	r5, r2
 8000b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b3a:	eb12 0804 	adds.w	r8, r2, r4
 8000b3e:	eb43 0905 	adc.w	r9, r3, r5
 8000b42:	e9c7 8900 	strd	r8, r9, [r7]
      for (; __first != __last; ++__first)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e7ea      	b.n	8000b24 <_ZSt10accumulateIPlxET0_T_S2_S1_+0x10>
      return __init;
 8000b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
    }
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000b5e:	4770      	bx	lr

08000b60 <_ZNKSt5arrayIlLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	2306      	movs	r3, #6
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_ZNSt5arrayIlLj6EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f91d 	bl	8000dc0 <_ZNSt14__array_traitsIlLj6EE6_S_ptrERA6_Kl>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000b98:	bf00      	nop
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b08e      	sub	sp, #56	; 0x38
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d101      	bne.n	8000bc0 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1a>
	return __last;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	e0ec      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      else if (__last == __middle)
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d101      	bne.n	8000bcc <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x26>
	return __first;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	e0e6      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      _Distance __n = __last   - __first;
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	109b      	asrs	r3, r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
      _Distance __k = __middle - __first;
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	109b      	asrs	r3, r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
      if (__k == __n - __k)
 8000be0:	69fa      	ldr	r2, [r7, #28]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	1ad2      	subs	r2, r2, r3
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d106      	bne.n	8000bfa <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x54>
	  std::swap_ranges(__first, __middle, __middle);
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f000 f8f0 	bl	8000dd6 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_>
	  return __middle;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	e0cf      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
      _RandomAccessIterator __p = __first;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	623b      	str	r3, [r7, #32]
	  if (__k < __n - __k)
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	1ad2      	subs	r2, r2, r3
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dd59      	ble.n	8000ccc <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x126>
	      if (__is_pod(_ValueType) && __k == 1)
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d121      	bne.n	8000c62 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xbc>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8000c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c20:	f000 f8f3 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000c24:	4603      	mov	r3, r0
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8000c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2c:	1d18      	adds	r0, r3, #4
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c34:	4413      	add	r3, r2
 8000c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f000 f8f1 	bl	8000e20 <_ZSt4moveIPlS0_ET0_T_S2_S1_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f8e1 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c58:	4413      	add	r3, r2
 8000c5a:	680a      	ldr	r2, [r1, #0]
 8000c5c:	601a      	str	r2, [r3, #0]
		  return __ret;
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	e09b      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      _RandomAccessIterator __q = __p + __k;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c68:	4413      	add	r3, r2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c70:	69fa      	ldr	r2, [r7, #28]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	da0d      	bge.n	8000c98 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xf2>
		  std::iter_swap(__p, __q);
 8000c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c80:	f000 f8e6 	bl	8000e50 <_ZSt9iter_swapIPlS0_EvT_T0_>
		  ++__p;
 8000c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c86:	3304      	adds	r3, #4
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
		  ++__q;
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	3301      	adds	r3, #1
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c96:	e7eb      	b.n	8000c70 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0xca>
	      __n %= __k;
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ca0:	fb01 f202 	mul.w	r2, r1, r2
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	61fb      	str	r3, [r7, #28]
	      if (__n == 0)
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x10c>
		return __ret;
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	e073      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      std::swap(__n, __k);
 8000cb2:	f107 0218 	add.w	r2, r7, #24
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f8df 	bl	8000e80 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	e79f      	b.n	8000c0c <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
	      __k = __n - __k;
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	61bb      	str	r3, [r7, #24]
	      if (__is_pod(_ValueType) && __k == 1)
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d128      	bne.n	8000d2c <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x186>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce8:	4413      	add	r3, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f88d 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	613b      	str	r3, [r7, #16]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d04:	18d1      	adds	r1, r2, r3
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d0c:	4413      	add	r3, r2
 8000d0e:	461a      	mov	r2, r3
 8000d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d12:	f000 f8d4 	bl	8000ebe <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>
		  *__p = _GLIBCXX_MOVE(__t);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f875 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000d20:	4603      	mov	r3, r0
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d26:	601a      	str	r2, [r3, #0]
		  return __ret;
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	e036      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      _RandomAccessIterator __q = __p + __n;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d32:	4413      	add	r3, r2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
	      __p = __q - __k;
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d3e:	4413      	add	r3, r2
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	da0d      	bge.n	8000d6e <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1c8>
		  --__p;
 8000d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d54:	3b04      	subs	r3, #4
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
		  --__q;
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
		  std::iter_swap(__p, __q);
 8000d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d62:	f000 f875 	bl	8000e50 <_ZSt9iter_swapIPlS0_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	3301      	adds	r3, #1
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6c:	e7eb      	b.n	8000d46 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1a0>
	      __n %= __k;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d76:	fb01 f202 	mul.w	r2, r1, r2
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	61fb      	str	r3, [r7, #28]
	      if (__n == 0)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1e2>
		return __ret;
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	e008      	b.n	8000d9a <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x1f4>
	      std::swap(__n, __k);
 8000d88:	f107 0218 	add.w	r2, r7, #24
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f874 	bl	8000e80 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8000d98:	e738      	b.n	8000c0c <_ZNSt3_V28__rotateIPlEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
    }
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3738      	adds	r7, #56	; 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_ZNSt14__array_traitsIlLj6EE6_S_refERA6_Klj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZNSt14__array_traitsIlLj6EE6_S_ptrERA6_Kl>:
      _S_ptr(const _Type& __t) noexcept
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_>:
   *  The ranges must not overlap.
  */
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
				  _ForwardIterator1>)
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator2>)
      __glibcxx_requires_valid_range(__first1, __last1);

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d00a      	beq.n	8000e00 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_+0x2a>
	std::iter_swap(__first1, __first2);
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f82f 	bl	8000e50 <_ZSt9iter_swapIPlS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	e7f0      	b.n	8000de2 <_ZSt11swap_rangesIPlS0_ET0_T_S2_S1_+0xc>
      return __first2;
 8000e00:	687b      	ldr	r3, [r7, #4]
    }
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_ZSt4moveIPlS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f85e 	bl	8000eee <_ZSt12__miter_baseIPlET_S1_>
 8000e32:	4604      	mov	r4, r0
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f000 f85a 	bl	8000eee <_ZSt12__miter_baseIPlET_S1_>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f000 f85f 	bl	8000f04 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_>
 8000e46:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}

08000e50 <_ZSt9iter_swapIPlS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f874 	bl	8000f4a <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffed 	bl	8000e6a <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000e90:	4603      	mov	r3, r0
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f7ff ffe7 	bl	8000e6a <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffde 	bl	8000e6a <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	601a      	str	r2, [r3, #0]
    }
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8000ebe:	b590      	push	{r4, r7, lr}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f80f 	bl	8000eee <_ZSt12__miter_baseIPlET_S1_>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f000 f80b 	bl	8000eee <_ZSt12__miter_baseIPlET_S1_>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 f852 	bl	8000f88 <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>
 8000ee4:	4603      	mov	r3, r0
					       std::__miter_base(__last),
					       __result);
    }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}

08000eee <_ZSt12__miter_baseIPlET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f85c 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000f16:	4604      	mov	r4, r0
 8000f18:	68b8      	ldr	r0, [r7, #8]
 8000f1a:	f000 f858 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000f1e:	4605      	mov	r5, r0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f853 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f000 f858 	bl	8000fe4 <_ZSt14__copy_move_a1ILb1EPlS0_ET1_T0_S2_S1_>
 8000f34:	4602      	mov	r2, r0
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f862 	bl	8001004 <_ZSt12__niter_wrapIPlET_RKS1_S1_>
 8000f40:	4603      	mov	r3, r0
    }
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdb0      	pop	{r4, r5, r7, pc}

08000f4a <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff58 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f7ff ff52 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f66:	4603      	mov	r3, r0
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff49 	bl	8000e0a <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	601a      	str	r2, [r3, #0]
    }
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f81a 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	68b8      	ldr	r0, [r7, #8]
 8000f9e:	f000 f816 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f811 	bl	8000fce <_ZSt12__niter_baseIPlET_S1_>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 f832 	bl	800101c <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f820 	bl	8001004 <_ZSt12__niter_wrapIPlET_RKS1_S1_>
 8000fc4:	4603      	mov	r3, r0
    }
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}

08000fce <_ZSt12__niter_baseIPlET_S1_>:
    __niter_base(_Iterator __it)
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZSt14__copy_move_a1ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f821 	bl	800103c <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZSt12__niter_wrapIPlET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f815 	bl	800105c <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f815 	bl	800107c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_>
 8001052:	4603      	mov	r3, r0
    }
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f822 	bl	80010b6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_>
 8001072:	4603      	mov	r3, r0
    }
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	109b      	asrs	r3, r3, #2
 8001090:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	461a      	mov	r2, r3
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f009 fe3b 	bl	800ad1c <memmove>
	  return __result + _Num;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
	}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	109b      	asrs	r3, r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIlEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	18d0      	adds	r0, r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	461a      	mov	r2, r3
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	f009 fe1a 	bl	800ad1c <memmove>
	  return __result - _Num;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	425b      	negs	r3, r3
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
	}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <_ZN10STM32H7LedC1Ev>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

STM32H7Led::STM32H7Led() {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <_ZN10STM32H7LedC1Ev+0x1c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	0800be94 	.word	0x0800be94

0800111c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>:

STM32H7Led::STM32H7Led(GPIO_TypeDef *Port, uint16_t Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	601a      	str	r2, [r3, #0]
	STM32H7Led::Port = Port;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	605a      	str	r2, [r3, #4]
	STM32H7Led::Pin = Pin;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	811a      	strh	r2, [r3, #8]
}
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	0800be94 	.word	0x0800be94

08001150 <_ZN10STM32H7LedD1Ev>:

STM32H7Led::~STM32H7Led() {
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <_ZN10STM32H7LedD1Ev+0x1c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0800be94 	.word	0x0800be94

08001170 <_ZN10STM32H7LedD0Ev>:
STM32H7Led::~STM32H7Led() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe9 	bl	8001150 <_ZN10STM32H7LedD1Ev>
 800117e:	210c      	movs	r1, #12
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f009 fd95 	bl	800acb0 <_ZdlPvj>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN10STM32H7Led6setLEDEv>:

void STM32H7Led::toggleLED(void) {
	HAL_GPIO_TogglePin(Port, Pin);
}

void STM32H7Led::setLED(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6858      	ldr	r0, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	891b      	ldrh	r3, [r3, #8]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	f006 fdc4 	bl	8007d30 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN10STM32H7Led8unsetLEDEv>:
void STM32H7Led::unsetLED(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6858      	ldr	r0, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	891b      	ldrh	r3, [r3, #8]
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f006 fdb4 	bl	8007d30 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_ZN25SpiritLevelSignelAxis3LEDC1Ev>:
 *      Author: raphael.baumeler
 */

#include "SpiritLevelSignelAxis3LED.h"

SpiritLevelSignelAxis3LED::SpiritLevelSignelAxis3LED() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <_ZN25SpiritLevelSignelAxis3LEDC1Ev+0x48>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	22c8      	movs	r2, #200	; 0xc8
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fa33 	bl	8000654 <_ZN13AccGyroSensorC1Ev>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	33e4      	adds	r3, #228	; 0xe4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff82 	bl	80010fc <_ZN10STM32H7LedC1Ev>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	33f0      	adds	r3, #240	; 0xf0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff7d 	bl	80010fc <_ZN10STM32H7LedC1Ev>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	33fc      	adds	r3, #252	; 0xfc
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff78 	bl	80010fc <_ZN10STM32H7LedC1Ev>
	// TODO Auto-generated constructor stub
}
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800bea4 	.word	0x0800bea4

0800121c <_ZN25SpiritLevelSignelAxis3LEDD1Ev>:

SpiritLevelSignelAxis3LED::~SpiritLevelSignelAxis3LED() {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <_ZN25SpiritLevelSignelAxis3LEDD1Ev+0x40>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	33fc      	adds	r3, #252	; 0xfc
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff8e 	bl	8001150 <_ZN10STM32H7LedD1Ev>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	33f0      	adds	r3, #240	; 0xf0
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff89 	bl	8001150 <_ZN10STM32H7LedD1Ev>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	33e4      	adds	r3, #228	; 0xe4
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff84 	bl	8001150 <_ZN10STM32H7LedD1Ev>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3308      	adds	r3, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fa25 	bl	800069c <_ZN13AccGyroSensorD1Ev>
	// TODO Auto-generated destructor stub
}
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	0800bea4 	.word	0x0800bea4

08001260 <_ZN25SpiritLevelSignelAxis3LEDD0Ev>:
SpiritLevelSignelAxis3LED::~SpiritLevelSignelAxis3LED() {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
}
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffd7 	bl	800121c <_ZN25SpiritLevelSignelAxis3LEDD1Ev>
 800126e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f009 fd1c 	bl	800acb0 <_ZdlPvj>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZN10STM32H7LedaSERKS_>:
#ifndef STM32H7LED_H_
#define STM32H7LED_H_

#include "stm32f7xx_hal.h"

class STM32H7Led {
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	891a      	ldrh	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	811a      	strh	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <_ZN25SpiritLevelSignelAxis3LED4initEv>:

void SpiritLevelSignelAxis3LED::init(void) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08d      	sub	sp, #52	; 0x34
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	SpiritLevelSignelAxis3LED::accGyro.initSensor();
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3308      	adds	r3, #8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa17 	bl	80006ec <_ZN13AccGyroSensor10initSensorEv>
	SpiritLevelSignelAxis3LED::ledNegAngle = STM32H7Led(GPIOB, GPIO_PIN_0); //Green
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2201      	movs	r2, #1
 80012ca:	491f      	ldr	r1, [pc, #124]	; (8001348 <_ZN25SpiritLevelSignelAxis3LED4initEv+0x9c>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff25 	bl	800111c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff ffd2 	bl	8001282 <_ZN10STM32H7LedaSERKS_>
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff34 	bl	8001150 <_ZN10STM32H7LedD1Ev>
	SpiritLevelSignelAxis3LED::ledBalanced = STM32H7Led(GPIOB, GPIO_PIN_7); //Blue
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	4914      	ldr	r1, [pc, #80]	; (8001348 <_ZN25SpiritLevelSignelAxis3LED4initEv+0x9c>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff10 	bl	800111c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4619      	mov	r1, r3
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff ffbd 	bl	8001282 <_ZN10STM32H7LedaSERKS_>
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff1f 	bl	8001150 <_ZN10STM32H7LedD1Ev>
	SpiritLevelSignelAxis3LED::ledPosAngle = STM32H7Led(GPIOB, GPIO_PIN_14);//Red
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <_ZN25SpiritLevelSignelAxis3LED4initEv+0x9c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fefa 	bl	800111c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ffa7 	bl	8001282 <_ZN10STM32H7LedaSERKS_>
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff09 	bl	8001150 <_ZN10STM32H7LedD1Ev>
}
 800133e:	bf00      	nop
 8001340:	3734      	adds	r7, #52	; 0x34
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	40020400 	.word	0x40020400

0800134c <_ZN25SpiritLevelSignelAxis3LED12updateValuesEv>:

void SpiritLevelSignelAxis3LED::updateValues(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	SpiritLevelSignelAxis3LED::accGyro.updateValues();
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3308      	adds	r3, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9d9 	bl	8000710 <_ZN13AccGyroSensor12updateValuesEv>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN25SpiritLevelSignelAxis3LED4showEv>:

void SpiritLevelSignelAxis3LED::show(void) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	int32_t AccAvgXAxis;
	int32_t AccAvgYAxis;
	int32_t AccAvgZAxis;

	accGyro.Acc.getAVGValues(&AccAvgXAxis, &AccAvgYAxis, &AccAvgZAxis);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f107 0114 	add.w	r1, r7, #20
 8001380:	f7ff fb67 	bl	8000a52 <_ZN14IKS01A3_Motion12getAVGValuesEPlS0_S0_>

	if(AccAvgYAxis>200){
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2bc8      	cmp	r3, #200	; 0xc8
 8001388:	dd0f      	ble.n	80013aa <_ZN25SpiritLevelSignelAxis3LED4showEv+0x44>
		ledNegAngle.unsetLED();
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	33e4      	adds	r3, #228	; 0xe4
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff0e 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
		ledBalanced.unsetLED();
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	33f0      	adds	r3, #240	; 0xf0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff09 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
		ledPosAngle.setLED();
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	33fc      	adds	r3, #252	; 0xfc
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fef4 	bl	8001190 <_ZN10STM32H7Led6setLEDEv>
			ledNegAngle.unsetLED();
			ledBalanced.setLED();
			ledPosAngle.unsetLED();
		}
	}
}
 80013a8:	e022      	b.n	80013f0 <_ZN25SpiritLevelSignelAxis3LED4showEv+0x8a>
		if((AccAvgYAxis< (-200))){
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80013b0:	da0f      	bge.n	80013d2 <_ZN25SpiritLevelSignelAxis3LED4showEv+0x6c>
			ledNegAngle.setLED();
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	33e4      	adds	r3, #228	; 0xe4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff feea 	bl	8001190 <_ZN10STM32H7Led6setLEDEv>
			ledBalanced.unsetLED();
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	33f0      	adds	r3, #240	; 0xf0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fef5 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
			ledPosAngle.unsetLED();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	33fc      	adds	r3, #252	; 0xfc
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fef0 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
}
 80013d0:	e00e      	b.n	80013f0 <_ZN25SpiritLevelSignelAxis3LED4showEv+0x8a>
			ledNegAngle.unsetLED();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	33e4      	adds	r3, #228	; 0xe4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff feea 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
			ledBalanced.setLED();
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	33f0      	adds	r3, #240	; 0xf0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fed5 	bl	8001190 <_ZN10STM32H7Led6setLEDEv>
			ledPosAngle.unsetLED();
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	33fc      	adds	r3, #252	; 0xfc
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fee0 	bl	80011b0 <_ZN10STM32H7Led8unsetLEDEv>
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_ZN25SpiritLevelSignelAxis3LED7setZeroEv>:

void SpiritLevelSignelAxis3LED::setZero(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	accGyro.setZero();
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3308      	adds	r3, #8
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f99f 	bl	8000748 <_ZN13AccGyroSensor7setZeroEv>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <cpp_main>:
#include "stdio.h"		//For. printf()
#include "SpiritLevelSignelAxis3LED.h"

SpiritLevelSignelAxis3LED ObjAccSensor;

void cpp_main(){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	// Output to Console
	int cnt = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
	printf("CPP Main started!\n");
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <cpp_main+0x6c>)
 8001420:	f009 fe1a 	bl	800b058 <puts>
	printf("Cnt=%d",cnt); printf("\n");
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <cpp_main+0x70>)
 8001428:	f009 fd7a 	bl	800af20 <iprintf>
 800142c:	200a      	movs	r0, #10
 800142e:	f009 fd8f 	bl	800af50 <putchar>

	ObjAccSensor.init();
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <cpp_main+0x74>)
 8001434:	f7ff ff3a 	bl	80012ac <_ZN25SpiritLevelSignelAxis3LED4initEv>
	for(int i=0;i<6;i++) //fill the Ringbuffers
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b05      	cmp	r3, #5
 8001440:	dc06      	bgt.n	8001450 <cpp_main+0x3c>
		ObjAccSensor.updateValues();
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <cpp_main+0x74>)
 8001444:	f7ff ff82 	bl	800134c <_ZN25SpiritLevelSignelAxis3LED12updateValuesEv>
	for(int i=0;i<6;i++) //fill the Ringbuffers
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	e7f5      	b.n	800143c <cpp_main+0x28>

	while (1)
		{
			ObjAccSensor.updateValues();
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <cpp_main+0x74>)
 8001452:	f7ff ff7b 	bl	800134c <_ZN25SpiritLevelSignelAxis3LED12updateValuesEv>
			ObjAccSensor.show();
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <cpp_main+0x74>)
 8001458:	f7ff ff85 	bl	8001366 <_ZN25SpiritLevelSignelAxis3LED4showEv>

			if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800145c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <cpp_main+0x78>)
 8001462:	f006 fc4d 	bl	8007d00 <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0ec      	beq.n	8001450 <cpp_main+0x3c>
			{
				ObjAccSensor.setZero();
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <cpp_main+0x74>)
 8001478:	f7ff ffbe 	bl	80013f8 <_ZN25SpiritLevelSignelAxis3LED7setZeroEv>
			ObjAccSensor.updateValues();
 800147c:	e7e8      	b.n	8001450 <cpp_main+0x3c>
 800147e:	bf00      	nop
 8001480:	0800be3c 	.word	0x0800be3c
 8001484:	0800be50 	.word	0x0800be50
 8001488:	200002a0 	.word	0x200002a0
 800148c:	40020800 	.word	0x40020800

08001490 <_Z41__static_initialization_and_destruction_0ii>:
			}
		}
}
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d102      	bne.n	80014b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SpiritLevelSignelAxis3LED ObjAccSensor;
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80014ac:	f7ff fe90 	bl	80011d0 <_ZN25SpiritLevelSignelAxis3LEDC1Ev>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014bc:	4293      	cmp	r3, r2
 80014be:	d102      	bne.n	80014c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80014c2:	f7ff feab 	bl	800121c <_ZN25SpiritLevelSignelAxis3LEDD1Ev>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002a0 	.word	0x200002a0

080014d4 <_GLOBAL__sub_I_ObjAccSensor>:
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ffd7 	bl	8001490 <_Z41__static_initialization_and_destruction_0ii>
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_GLOBAL__sub_D_ObjAccSensor>:
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff ffcf 	bl	8001490 <_Z41__static_initialization_and_destruction_0ii>
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800150c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800151c:	e000      	b.n	8001520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800151e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f9      	beq.n	800151e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800152a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_write>:
{
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}*/
int _write(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e009      	b.n	8001568 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffc9 	bl	80014f4 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf1      	blt.n	8001554 <_write+0x12>
  }
  return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001580:	f005 fc78 	bl	8006e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f810 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f000 f922 	bl	80017d0 <MX_GPIO_Init>
  MX_ETH_Init();
 800158c:	f000 f874 	bl	8001678 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001590:	f000 f8c0 	bl	8001714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001594:	f000 f8ee 	bl	8001774 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <main+0x28>)
 800159a:	f009 fd5d 	bl	800b058 <puts>
	  cpp_main();
 800159e:	f7ff ff39 	bl	8001414 <cpp_main>
	  printf(" C Main started!\n");
 80015a2:	e7f9      	b.n	8001598 <main+0x1c>
 80015a4:	0800be58 	.word	0x0800be58

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f009 fbca 	bl	800ad50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015cc:	f007 fb60 	bl	8008c90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <SystemClock_Config+0xc8>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a26      	ldr	r2, [pc, #152]	; (8001670 <SystemClock_Config+0xc8>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <SystemClock_Config+0xc8>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xcc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <SystemClock_Config+0xcc>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <SystemClock_Config+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800161c:	2348      	movs	r3, #72	; 0x48
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001624:	2303      	movs	r3, #3
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f007 fb3f 	bl	8008cb0 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001638:	f000 f96c 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f007 fdcd 	bl	80091f8 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001664:	f000 f956 	bl	8001914 <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3750      	adds	r7, #80	; 0x50
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_ETH_Init+0x84>)
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <MX_ETH_Init+0x88>)
 8001680:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_ETH_Init+0x8c>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_ETH_Init+0x8c>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_ETH_Init+0x8c>)
 8001690:	22e1      	movs	r2, #225	; 0xe1
 8001692:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_ETH_Init+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_ETH_Init+0x8c>)
 800169c:	2200      	movs	r2, #0
 800169e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_ETH_Init+0x8c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_ETH_Init+0x84>)
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <MX_ETH_Init+0x8c>)
 80016aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_ETH_Init+0x84>)
 80016ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_ETH_Init+0x84>)
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <MX_ETH_Init+0x90>)
 80016b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_ETH_Init+0x84>)
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_ETH_Init+0x94>)
 80016be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_ETH_Init+0x84>)
 80016c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_ETH_Init+0x84>)
 80016ca:	f005 fd3b 	bl	8007144 <HAL_ETH_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80016d4:	f000 f91e 	bl	8001914 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80016d8:	2238      	movs	r2, #56	; 0x38
 80016da:	2100      	movs	r1, #0
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <MX_ETH_Init+0x98>)
 80016de:	f009 fb37 	bl	800ad50 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_ETH_Init+0x98>)
 80016e4:	2221      	movs	r2, #33	; 0x21
 80016e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_ETH_Init+0x98>)
 80016ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80016ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_ETH_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200003e0 	.word	0x200003e0
 8001700:	40028000 	.word	0x40028000
 8001704:	20000a20 	.word	0x20000a20
 8001708:	200001e4 	.word	0x200001e4
 800170c:	20000144 	.word	0x20000144
 8001710:	200003a8 	.word	0x200003a8

08001714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USART3_UART_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <MX_USART3_UART_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USART3_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USART3_UART_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USART3_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001758:	f008 fb64 	bl	8009e24 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f8d7 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000490 	.word	0x20000490
 8001770:	40004800 	.word	0x40004800

08001774 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800177e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001782:	2206      	movs	r2, #6
 8001784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001788:	2202      	movs	r2, #2
 800178a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001794:	2202      	movs	r2, #2
 8001796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179a:	2201      	movs	r2, #1
 800179c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b8:	f007 f921 	bl	80089fe <HAL_PCD_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017c2:	f000 f8a7 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000518 	.word	0x20000518

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <MX_GPIO_Init+0x134>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <MX_GPIO_Init+0x134>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <MX_GPIO_Init+0x134>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <MX_GPIO_Init+0x134>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a40      	ldr	r2, [pc, #256]	; (8001904 <MX_GPIO_Init+0x134>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <MX_GPIO_Init+0x134>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <MX_GPIO_Init+0x134>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a3a      	ldr	r2, [pc, #232]	; (8001904 <MX_GPIO_Init+0x134>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <MX_GPIO_Init+0x134>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_GPIO_Init+0x134>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <MX_GPIO_Init+0x134>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <MX_GPIO_Init+0x134>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <MX_GPIO_Init+0x134>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <MX_GPIO_Init+0x134>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <MX_GPIO_Init+0x134>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <MX_GPIO_Init+0x134>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a28      	ldr	r2, [pc, #160]	; (8001904 <MX_GPIO_Init+0x134>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <MX_GPIO_Init+0x134>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f244 0181 	movw	r1, #16513	; 0x4081
 800187c:	4822      	ldr	r0, [pc, #136]	; (8001908 <MX_GPIO_Init+0x138>)
 800187e:	f006 fa57 	bl	8007d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2140      	movs	r1, #64	; 0x40
 8001886:	4821      	ldr	r0, [pc, #132]	; (800190c <MX_GPIO_Init+0x13c>)
 8001888:	f006 fa52 	bl	8007d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0x140>)
 80018a4:	f005 ff74 	bl	8007790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Green_Pin LD3_Red_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin;
 80018a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_GPIO_Init+0x138>)
 80018c2:	f005 ff65 	bl	8007790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <MX_GPIO_Init+0x13c>)
 80018de:	f005 ff57 	bl	8007790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_GPIO_Init+0x13c>)
 80018f6:	f005 ff4b 	bl	8007790 <HAL_GPIO_Init>

}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40021800 	.word	0x40021800
 8001910:	40020800 	.word	0x40020800

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x44>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x44>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x44>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x44>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x44>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <HAL_ETH_MspInit+0x158>)
 8001986:	4293      	cmp	r3, r2
 8001988:	f040 8096 	bne.w	8001ab8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800198c:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_ETH_MspInit+0x15c>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a34:	2332      	movs	r3, #50	; 0x32
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a44:	230b      	movs	r3, #11
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <HAL_ETH_MspInit+0x160>)
 8001a50:	f005 fe9e 	bl	8007790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a54:	2386      	movs	r3, #134	; 0x86
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a64:	230b      	movs	r3, #11
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4817      	ldr	r0, [pc, #92]	; (8001acc <HAL_ETH_MspInit+0x164>)
 8001a70:	f005 fe8e 	bl	8007790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a86:	230b      	movs	r3, #11
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <HAL_ETH_MspInit+0x168>)
 8001a92:	f005 fe7d 	bl	8007790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa8:	230b      	movs	r3, #11
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <HAL_ETH_MspInit+0x16c>)
 8001ab4:	f005 fe6c 	bl	8007790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40028000 	.word	0x40028000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40021800 	.word	0x40021800

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0aa      	sub	sp, #168	; 0xa8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2284      	movs	r2, #132	; 0x84
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f009 f929 	bl	800ad50 <memset>
  if(huart->Instance==USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_UART_MspInit+0xb4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d13c      	bne.n	8001b82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4618      	mov	r0, r3
 8001b18:	f007 fd94 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b22:	f7ff fef7 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b70:	2307      	movs	r3, #7
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0xbc>)
 8001b7e:	f005 fe07 	bl	8007790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	37a8      	adds	r7, #168	; 0xa8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020c00 	.word	0x40020c00

08001b98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0ac      	sub	sp, #176	; 0xb0
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	2284      	movs	r2, #132	; 0x84
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f009 f8c9 	bl	800ad50 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc6:	d159      	bne.n	8001c7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 fd33 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001be4:	f7ff fe96 	bl	8001914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4818      	ldr	r0, [pc, #96]	; (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c28:	f005 fdb2 	bl	8007790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c48:	f005 fda2 	bl	8007790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	6353      	str	r3, [r2, #52]	; 0x34
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	37b0      	adds	r7, #176	; 0xb0
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f005 f90a 	bl	8006ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <BSP_I2C1_Init+0x70>)
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <BSP_I2C1_Init+0x74>)
 8001cee:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <BSP_I2C1_Init+0x78>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	4918      	ldr	r1, [pc, #96]	; (8001d58 <BSP_I2C1_Init+0x78>)
 8001cf8:	600a      	str	r2, [r1, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d122      	bne.n	8001d44 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <BSP_I2C1_Init+0x70>)
 8001d00:	f006 fb32 	bl	8008368 <HAL_I2C_GetState>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11c      	bne.n	8001d44 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001d0a:	4811      	ldr	r0, [pc, #68]	; (8001d50 <BSP_I2C1_Init+0x70>)
 8001d0c:	f000 f8fe 	bl	8001f0c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <BSP_I2C1_Init+0x70>)
 8001d18:	f000 f8b4 	bl	8001e84 <MX_I2C1_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001d22:	f06f 0307 	mvn.w	r3, #7
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	e00c      	b.n	8001d44 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4808      	ldr	r0, [pc, #32]	; (8001d50 <BSP_I2C1_Init+0x70>)
 8001d2e:	f006 fdcf 	bl	80088d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001d38:	f06f 0307 	mvn.w	r3, #7
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	e001      	b.n	8001d44 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000a28 	.word	0x20000a28
 8001d54:	40005400 	.word	0x40005400
 8001d58:	20000a7c 	.word	0x20000a7c

08001d5c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <BSP_I2C1_DeInit+0x48>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d014      	beq.n	8001d98 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <BSP_I2C1_DeInit+0x48>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <BSP_I2C1_DeInit+0x48>)
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <BSP_I2C1_DeInit+0x48>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <BSP_I2C1_DeInit+0x4c>)
 8001d82:	f000 f925 	bl	8001fd0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001d86:	4808      	ldr	r0, [pc, #32]	; (8001da8 <BSP_I2C1_DeInit+0x4c>)
 8001d88:	f006 f87c 	bl	8007e84 <HAL_I2C_DeInit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001d92:	f06f 0307 	mvn.w	r3, #7
 8001d96:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000a7c 	.word	0x20000a7c
 8001da8:	20000a28 	.word	0x20000a28

08001dac <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	81fb      	strh	r3, [r7, #14]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	81bb      	strh	r3, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001dc6:	89ba      	ldrh	r2, [r7, #12]
 8001dc8:	89f9      	ldrh	r1, [r7, #14]
 8001dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	480c      	ldr	r0, [pc, #48]	; (8001e0c <BSP_I2C1_WriteReg+0x60>)
 8001ddc:	f006 f896 	bl	8007f0c <HAL_I2C_Mem_Write>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <BSP_I2C1_WriteReg+0x60>)
 8001de8:	f006 facc 	bl	8008384 <HAL_I2C_GetError>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d103      	bne.n	8001dfa <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001df2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e002      	b.n	8001e00 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001dfa:	f06f 0303 	mvn.w	r3, #3
 8001dfe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001e00:	697b      	ldr	r3, [r7, #20]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000a28 	.word	0x20000a28

08001e10 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	60ba      	str	r2, [r7, #8]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	81fb      	strh	r3, [r7, #14]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	81bb      	strh	r3, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001e2a:	89ba      	ldrh	r2, [r7, #12]
 8001e2c:	89f9      	ldrh	r1, [r7, #14]
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <BSP_I2C1_ReadReg+0x60>)
 8001e40:	f006 f978 	bl	8008134 <HAL_I2C_Mem_Read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001e4a:	4809      	ldr	r0, [pc, #36]	; (8001e70 <BSP_I2C1_ReadReg+0x60>)
 8001e4c:	f006 fa9a 	bl	8008384 <HAL_I2C_GetError>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d103      	bne.n	8001e5e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001e56:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e002      	b.n	8001e64 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e5e:	f06f 0303 	mvn.w	r3, #3
 8001e62:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001e64:	697b      	ldr	r3, [r7, #20]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000a28 	.word	0x20000a28

08001e74 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001e78:	f005 f84e 	bl	8006f18 <HAL_GetTick>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <MX_I2C1_Init+0x80>)
 8001e94:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00808CD2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <MX_I2C1_Init+0x84>)
 8001e9a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f005 ff4c 	bl	8007d64 <HAL_I2C_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f006 fcf9 	bl	80088d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f006 fd3b 	bl	8008966 <HAL_I2CEx_ConfigDigitalFilter>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	00808cd2 	.word	0x00808cd2

08001f0c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0aa      	sub	sp, #168	; 0xa8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2284      	movs	r2, #132	; 0x84
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f008 ff17 	bl	800ad50 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f26:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f007 fb87 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f56:	2312      	movs	r3, #18
 8001f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001f6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f72:	4619      	mov	r1, r3
 8001f74:	4815      	ldr	r0, [pc, #84]	; (8001fcc <I2C1_MspInit+0xc0>)
 8001f76:	f005 fc0b 	bl	8007790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f82:	2312      	movs	r3, #18
 8001f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001f94:	2304      	movs	r3, #4
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001f9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <I2C1_MspInit+0xc0>)
 8001fa2:	f005 fbf5 	bl	8007790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <I2C1_MspInit+0xbc>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	37a8      	adds	r7, #168	; 0xa8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <I2C1_MspDeInit+0x30>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a08      	ldr	r2, [pc, #32]	; (8002000 <I2C1_MspDeInit+0x30>)
 8001fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <I2C1_MspDeInit+0x34>)
 8001fea:	f005 fd7d 	bl	8007ae8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <I2C1_MspDeInit+0x34>)
 8001ff4:	f005 fd78 	bl	8007ae8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400

08002008 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e00a      	b.n	8002030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800201a:	f3af 8000 	nop.w
 800201e:	4601      	mov	r1, r0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	60ba      	str	r2, [r7, #8]
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbf0      	blt.n	800201a <_read+0x12>
	}

return len;
 8002038:	687b      	ldr	r3, [r7, #4]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
	return -1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800206a:	605a      	str	r2, [r3, #4]
	return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_isatty>:

int _isatty(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	return 1;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
	return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f008 fdec 	bl	800acb8 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20050000 	.word	0x20050000
 800210c:	00000400 	.word	0x00000400
 8002110:	20000a80 	.word	0x20000a80
 8002114:	20000b70 	.word	0x20000b70

08002118 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <SystemInit+0x20>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <SystemInit+0x20>)
 8002124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002158:	4c0b      	ldr	r4, [pc, #44]	; (8002188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002166:	f7ff ffd7 	bl	8002118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f008 fdab 	bl	800acc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7ff fa05 	bl	800157c <main>
  bx  lr    
 8002172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800217c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8002180:	0800bf74 	.word	0x0800bf74
  ldr r2, =_sbss
 8002184:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8002188:	20000b70 	.word	0x20000b70

0800218c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC_IRQHandler>
	...

08002190 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e04d      	b.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7b1a      	ldrb	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <LIS2DW12_RegisterBusIO+0xc4>)
 80021e8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <LIS2DW12_RegisterBusIO+0xc8>)
 80021ee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e020      	b.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4798      	blx	r3
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e016      	b.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d112      	bne.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 800222c:	2305      	movs	r3, #5
 800222e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	461a      	mov	r2, r3
 8002234:	2121      	movs	r1, #33	; 0x21
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fd87 	bl	8002d4a <LIS2DW12_Write_Reg>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	080030dd 	.word	0x080030dd
 8002258:	08003113 	.word	0x08003113

0800225c <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	331c      	adds	r3, #28
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f001 fa94 	bl	8003798 <lis2dw12_auto_increment_set>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e04b      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	331c      	adds	r3, #28
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f001 f9a8 	bl	80035d8 <lis2dw12_block_data_update_set>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e03f      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	331c      	adds	r3, #28
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f001 faa2 	bl	80037e4 <lis2dw12_fifo_mode_set>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e033      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	331c      	adds	r3, #28
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 ff78 	bl	80031a8 <lis2dw12_power_mode_set>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e027      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <LIS2DW12_Init+0xc0>)
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	331c      	adds	r3, #28
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f869 	bl	80033b8 <lis2dw12_data_rate_set>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	e010      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	331c      	adds	r3, #28
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 f993 	bl	8003624 <lis2dw12_full_scale_set>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	e004      	b.n	8002314 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	42c80000 	.word	0x42c80000

08002320 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f888 	bl	800243e <LIS2DW12_ACC_Disable>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	e010      	b.n	800235c <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	331c      	adds	r3, #28
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f001 f9fe 	bl	8003776 <lis2dw12_device_id_get>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
 8002384:	e000      	b.n	8002388 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2210      	movs	r2, #16
 80023bc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <LIS2DW12_GetCapabilities+0x58>)
 80023d0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	44c80000 	.word	0x44c80000

080023ec <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e019      	b.n	8002436 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002414:	461a      	mov	r2, r3
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fcb0 	bl	8002d80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e004      	b.n	8002436 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e010      	b.n	8002476 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	331c      	adds	r3, #28
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f000 ffac 	bl	80033b8 <lis2dw12_data_rate_set>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e004      	b.n	8002476 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	331c      	adds	r3, #28
 8002492:	f107 020b 	add.w	r2, r7, #11
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f8e9 	bl	8003670 <lis2dw12_full_scale_get>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	e0a0      	b.n	80025ec <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	331c      	adds	r3, #28
 80024ae:	f107 020a 	add.w	r2, r7, #10
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fec5 	bl	8003244 <lis2dw12_power_mode_get>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	e092      	b.n	80025ec <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80024c6:	7abb      	ldrb	r3, [r7, #10]
 80024c8:	2b1b      	cmp	r3, #27
 80024ca:	f200 8087 	bhi.w	80025dc <LIS2DW12_ACC_GetSensitivity+0x15c>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	08002545 	.word	0x08002545
 80024d8:	08002591 	.word	0x08002591
 80024dc:	08002591 	.word	0x08002591
 80024e0:	08002591 	.word	0x08002591
 80024e4:	08002591 	.word	0x08002591
 80024e8:	080025dd 	.word	0x080025dd
 80024ec:	080025dd 	.word	0x080025dd
 80024f0:	080025dd 	.word	0x080025dd
 80024f4:	08002545 	.word	0x08002545
 80024f8:	08002591 	.word	0x08002591
 80024fc:	08002591 	.word	0x08002591
 8002500:	08002591 	.word	0x08002591
 8002504:	080025dd 	.word	0x080025dd
 8002508:	080025dd 	.word	0x080025dd
 800250c:	080025dd 	.word	0x080025dd
 8002510:	080025dd 	.word	0x080025dd
 8002514:	08002545 	.word	0x08002545
 8002518:	08002591 	.word	0x08002591
 800251c:	08002591 	.word	0x08002591
 8002520:	08002591 	.word	0x08002591
 8002524:	08002591 	.word	0x08002591
 8002528:	080025dd 	.word	0x080025dd
 800252c:	080025dd 	.word	0x080025dd
 8002530:	080025dd 	.word	0x080025dd
 8002534:	08002545 	.word	0x08002545
 8002538:	08002591 	.word	0x08002591
 800253c:	08002591 	.word	0x08002591
 8002540:	08002591 	.word	0x08002591
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d81a      	bhi.n	8002580 <LIS2DW12_ACC_GetSensitivity+0x100>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	08002561 	.word	0x08002561
 8002554:	08002569 	.word	0x08002569
 8002558:	08002571 	.word	0x08002571
 800255c:	08002579 	.word	0x08002579
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002564:	601a      	str	r2, [r3, #0]
          break;
 8002566:	e012      	b.n	800258e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4a23      	ldr	r2, [pc, #140]	; (80025f8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 800256c:	601a      	str	r2, [r3, #0]
          break;
 800256e:	e00e      	b.n	800258e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a22      	ldr	r2, [pc, #136]	; (80025fc <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002574:	601a      	str	r2, [r3, #0]
          break;
 8002576:	e00a      	b.n	800258e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <LIS2DW12_ACC_GetSensitivity+0x180>)
 800257c:	601a      	str	r2, [r3, #0]
          break;
 800257e:	e006      	b.n	800258e <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4a20      	ldr	r2, [pc, #128]	; (8002604 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002584:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	60fb      	str	r3, [r7, #12]
          break;
 800258c:	bf00      	nop
      }
      break;
 800258e:	e02c      	b.n	80025ea <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d81a      	bhi.n	80025cc <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025b5 	.word	0x080025b5
 80025a4:	080025bd 	.word	0x080025bd
 80025a8:	080025c5 	.word	0x080025c5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80025b0:	601a      	str	r2, [r3, #0]
          break;
 80025b2:	e012      	b.n	80025da <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80025b8:	601a      	str	r2, [r3, #0]
          break;
 80025ba:	e00e      	b.n	80025da <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80025c0:	601a      	str	r2, [r3, #0]
          break;
 80025c2:	e00a      	b.n	80025da <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80025c8:	601a      	str	r2, [r3, #0]
          break;
 80025ca:	e006      	b.n	80025da <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80025d0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	60fb      	str	r3, [r7, #12]
          break;
 80025d8:	bf00      	nop
      }
      break;
 80025da:	e006      	b.n	80025ea <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80025e0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	60fb      	str	r3, [r7, #12]
      break;
 80025e8:	bf00      	nop
  }

  return ret;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	3f79db23 	.word	0x3f79db23
 80025f8:	3ff9db23 	.word	0x3ff9db23
 80025fc:	4079db23 	.word	0x4079db23
 8002600:	40f9db23 	.word	0x40f9db23
 8002604:	bf800000 	.word	0xbf800000
 8002608:	3e79db23 	.word	0x3e79db23
 800260c:	3ef9db23 	.word	0x3ef9db23

08002610 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	331c      	adds	r3, #28
 8002622:	f107 020b 	add.w	r2, r7, #11
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f000 ff0b 	bl	8003444 <lis2dw12_data_rate_get>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	e1d4      	b.n	80029e4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	331c      	adds	r3, #28
 800263e:	f107 020a 	add.w	r2, r7, #10
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fdfd 	bl	8003244 <lis2dw12_power_mode_get>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	e1c6      	b.n	80029e4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	2b32      	cmp	r3, #50	; 0x32
 800265a:	f200 81bb 	bhi.w	80029d4 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002731 	.word	0x08002731
 8002668:	0800273b 	.word	0x0800273b
 800266c:	080027d9 	.word	0x080027d9
 8002670:	080027e1 	.word	0x080027e1
 8002674:	080027e9 	.word	0x080027e9
 8002678:	080027f1 	.word	0x080027f1
 800267c:	080027f9 	.word	0x080027f9
 8002680:	08002801 	.word	0x08002801
 8002684:	0800289d 	.word	0x0800289d
 8002688:	08002939 	.word	0x08002939
 800268c:	080029d5 	.word	0x080029d5
 8002690:	080029d5 	.word	0x080029d5
 8002694:	080029d5 	.word	0x080029d5
 8002698:	080029d5 	.word	0x080029d5
 800269c:	080029d5 	.word	0x080029d5
 80026a0:	080029d5 	.word	0x080029d5
 80026a4:	080029d5 	.word	0x080029d5
 80026a8:	080029d5 	.word	0x080029d5
 80026ac:	08002731 	.word	0x08002731
 80026b0:	080029d5 	.word	0x080029d5
 80026b4:	080029d5 	.word	0x080029d5
 80026b8:	080029d5 	.word	0x080029d5
 80026bc:	080029d5 	.word	0x080029d5
 80026c0:	080029d5 	.word	0x080029d5
 80026c4:	080029d5 	.word	0x080029d5
 80026c8:	080029d5 	.word	0x080029d5
 80026cc:	080029d5 	.word	0x080029d5
 80026d0:	080029d5 	.word	0x080029d5
 80026d4:	080029d5 	.word	0x080029d5
 80026d8:	080029d5 	.word	0x080029d5
 80026dc:	080029d5 	.word	0x080029d5
 80026e0:	080029d5 	.word	0x080029d5
 80026e4:	080029d5 	.word	0x080029d5
 80026e8:	080029d5 	.word	0x080029d5
 80026ec:	080029d5 	.word	0x080029d5
 80026f0:	080029d5 	.word	0x080029d5
 80026f4:	080029d5 	.word	0x080029d5
 80026f8:	080029d5 	.word	0x080029d5
 80026fc:	080029d5 	.word	0x080029d5
 8002700:	080029d5 	.word	0x080029d5
 8002704:	080029d5 	.word	0x080029d5
 8002708:	080029d5 	.word	0x080029d5
 800270c:	080029d5 	.word	0x080029d5
 8002710:	080029d5 	.word	0x080029d5
 8002714:	080029d5 	.word	0x080029d5
 8002718:	080029d5 	.word	0x080029d5
 800271c:	080029d5 	.word	0x080029d5
 8002720:	080029d5 	.word	0x080029d5
 8002724:	080029d5 	.word	0x080029d5
 8002728:	080029d5 	.word	0x080029d5
 800272c:	08002731 	.word	0x08002731
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
      break;
 8002738:	e153      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800273a:	7abb      	ldrb	r3, [r7, #10]
 800273c:	2b1b      	cmp	r3, #27
 800273e:	d843      	bhi.n	80027c8 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	080027c1 	.word	0x080027c1
 800274c:	080027c1 	.word	0x080027c1
 8002750:	080027c1 	.word	0x080027c1
 8002754:	080027c1 	.word	0x080027c1
 8002758:	080027b9 	.word	0x080027b9
 800275c:	080027c9 	.word	0x080027c9
 8002760:	080027c9 	.word	0x080027c9
 8002764:	080027c9 	.word	0x080027c9
 8002768:	080027c1 	.word	0x080027c1
 800276c:	080027c1 	.word	0x080027c1
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027c1 	.word	0x080027c1
 8002778:	080027c9 	.word	0x080027c9
 800277c:	080027c9 	.word	0x080027c9
 8002780:	080027c9 	.word	0x080027c9
 8002784:	080027c9 	.word	0x080027c9
 8002788:	080027c1 	.word	0x080027c1
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027c1 	.word	0x080027c1
 8002794:	080027c1 	.word	0x080027c1
 8002798:	080027b9 	.word	0x080027b9
 800279c:	080027c9 	.word	0x080027c9
 80027a0:	080027c9 	.word	0x080027c9
 80027a4:	080027c9 	.word	0x080027c9
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027c1 	.word	0x080027c1
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c1 	.word	0x080027c1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4a8c      	ldr	r2, [pc, #560]	; (80029ec <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80027bc:	601a      	str	r2, [r3, #0]
          break;
 80027be:	e00a      	b.n	80027d6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4a8b      	ldr	r2, [pc, #556]	; (80029f0 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80027c4:	601a      	str	r2, [r3, #0]
          break;
 80027c6:	e006      	b.n	80027d6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4a8a      	ldr	r2, [pc, #552]	; (80029f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80027cc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	60fb      	str	r3, [r7, #12]
          break;
 80027d4:	bf00      	nop
      }
      break;
 80027d6:	e104      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4a84      	ldr	r2, [pc, #528]	; (80029ec <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80027dc:	601a      	str	r2, [r3, #0]
      break;
 80027de:	e100      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4a85      	ldr	r2, [pc, #532]	; (80029f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80027e4:	601a      	str	r2, [r3, #0]
      break;
 80027e6:	e0fc      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4a84      	ldr	r2, [pc, #528]	; (80029fc <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80027ec:	601a      	str	r2, [r3, #0]
      break;
 80027ee:	e0f8      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80027f4:	601a      	str	r2, [r3, #0]
      break;
 80027f6:	e0f4      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4a82      	ldr	r2, [pc, #520]	; (8002a04 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80027fc:	601a      	str	r2, [r3, #0]
      break;
 80027fe:	e0f0      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002800:	7abb      	ldrb	r3, [r7, #10]
 8002802:	2b1b      	cmp	r3, #27
 8002804:	d842      	bhi.n	800288c <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	08002885 	.word	0x08002885
 8002810:	08002885 	.word	0x08002885
 8002814:	08002885 	.word	0x08002885
 8002818:	08002885 	.word	0x08002885
 800281c:	0800287d 	.word	0x0800287d
 8002820:	0800288d 	.word	0x0800288d
 8002824:	0800288d 	.word	0x0800288d
 8002828:	0800288d 	.word	0x0800288d
 800282c:	08002885 	.word	0x08002885
 8002830:	08002885 	.word	0x08002885
 8002834:	08002885 	.word	0x08002885
 8002838:	08002885 	.word	0x08002885
 800283c:	0800288d 	.word	0x0800288d
 8002840:	0800288d 	.word	0x0800288d
 8002844:	0800288d 	.word	0x0800288d
 8002848:	0800288d 	.word	0x0800288d
 800284c:	08002885 	.word	0x08002885
 8002850:	08002885 	.word	0x08002885
 8002854:	08002885 	.word	0x08002885
 8002858:	08002885 	.word	0x08002885
 800285c:	0800287d 	.word	0x0800287d
 8002860:	0800288d 	.word	0x0800288d
 8002864:	0800288d 	.word	0x0800288d
 8002868:	0800288d 	.word	0x0800288d
 800286c:	08002885 	.word	0x08002885
 8002870:	08002885 	.word	0x08002885
 8002874:	08002885 	.word	0x08002885
 8002878:	08002885 	.word	0x08002885
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4a62      	ldr	r2, [pc, #392]	; (8002a08 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002880:	601a      	str	r2, [r3, #0]
          break;
 8002882:	e00a      	b.n	800289a <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4a5f      	ldr	r2, [pc, #380]	; (8002a04 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002888:	601a      	str	r2, [r3, #0]
          break;
 800288a:	e006      	b.n	800289a <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4a59      	ldr	r2, [pc, #356]	; (80029f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002890:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	60fb      	str	r3, [r7, #12]
          break;
 8002898:	bf00      	nop
      }
      break;
 800289a:	e0a2      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800289c:	7abb      	ldrb	r3, [r7, #10]
 800289e:	2b1b      	cmp	r3, #27
 80028a0:	d842      	bhi.n	8002928 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	08002921 	.word	0x08002921
 80028ac:	08002921 	.word	0x08002921
 80028b0:	08002921 	.word	0x08002921
 80028b4:	08002921 	.word	0x08002921
 80028b8:	08002919 	.word	0x08002919
 80028bc:	08002929 	.word	0x08002929
 80028c0:	08002929 	.word	0x08002929
 80028c4:	08002929 	.word	0x08002929
 80028c8:	08002921 	.word	0x08002921
 80028cc:	08002921 	.word	0x08002921
 80028d0:	08002921 	.word	0x08002921
 80028d4:	08002921 	.word	0x08002921
 80028d8:	08002929 	.word	0x08002929
 80028dc:	08002929 	.word	0x08002929
 80028e0:	08002929 	.word	0x08002929
 80028e4:	08002929 	.word	0x08002929
 80028e8:	08002921 	.word	0x08002921
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002921 	.word	0x08002921
 80028f4:	08002921 	.word	0x08002921
 80028f8:	08002919 	.word	0x08002919
 80028fc:	08002929 	.word	0x08002929
 8002900:	08002929 	.word	0x08002929
 8002904:	08002929 	.word	0x08002929
 8002908:	08002921 	.word	0x08002921
 800290c:	08002921 	.word	0x08002921
 8002910:	08002921 	.word	0x08002921
 8002914:	08002921 	.word	0x08002921
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4a3c      	ldr	r2, [pc, #240]	; (8002a0c <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 800291c:	601a      	str	r2, [r3, #0]
          break;
 800291e:	e00a      	b.n	8002936 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002924:	601a      	str	r2, [r3, #0]
          break;
 8002926:	e006      	b.n	8002936 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4a32      	ldr	r2, [pc, #200]	; (80029f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800292c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	60fb      	str	r3, [r7, #12]
          break;
 8002934:	bf00      	nop
      }
      break;
 8002936:	e054      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002938:	7abb      	ldrb	r3, [r7, #10]
 800293a:	2b1b      	cmp	r3, #27
 800293c:	d842      	bhi.n	80029c4 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	080029bd 	.word	0x080029bd
 8002948:	080029bd 	.word	0x080029bd
 800294c:	080029bd 	.word	0x080029bd
 8002950:	080029bd 	.word	0x080029bd
 8002954:	080029b5 	.word	0x080029b5
 8002958:	080029c5 	.word	0x080029c5
 800295c:	080029c5 	.word	0x080029c5
 8002960:	080029c5 	.word	0x080029c5
 8002964:	080029bd 	.word	0x080029bd
 8002968:	080029bd 	.word	0x080029bd
 800296c:	080029bd 	.word	0x080029bd
 8002970:	080029bd 	.word	0x080029bd
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029c5 	.word	0x080029c5
 800297c:	080029c5 	.word	0x080029c5
 8002980:	080029c5 	.word	0x080029c5
 8002984:	080029bd 	.word	0x080029bd
 8002988:	080029bd 	.word	0x080029bd
 800298c:	080029bd 	.word	0x080029bd
 8002990:	080029bd 	.word	0x080029bd
 8002994:	080029b5 	.word	0x080029b5
 8002998:	080029c5 	.word	0x080029c5
 800299c:	080029c5 	.word	0x080029c5
 80029a0:	080029c5 	.word	0x080029c5
 80029a4:	080029bd 	.word	0x080029bd
 80029a8:	080029bd 	.word	0x080029bd
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029bd 	.word	0x080029bd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80029b8:	601a      	str	r2, [r3, #0]
          break;
 80029ba:	e00a      	b.n	80029d2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80029c0:	601a      	str	r2, [r3, #0]
          break;
 80029c2:	e006      	b.n	80029d2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80029c8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	60fb      	str	r3, [r7, #12]
          break;
 80029d0:	bf00      	nop
      }
      break;
 80029d2:	e006      	b.n	80029e2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80029d8:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	60fb      	str	r3, [r7, #12]
      break;
 80029e0:	bf00      	nop
  }

  return ret;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	41480000 	.word	0x41480000
 80029f0:	3fcccccd 	.word	0x3fcccccd
 80029f4:	bf800000 	.word	0xbf800000
 80029f8:	41c80000 	.word	0x41c80000
 80029fc:	42480000 	.word	0x42480000
 8002a00:	42c80000 	.word	0x42c80000
 8002a04:	43480000 	.word	0x43480000
 8002a08:	43c80000 	.word	0x43c80000
 8002a0c:	44480000 	.word	0x44480000
 8002a10:	44c80000 	.word	0x44c80000

08002a14 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	ed97 0a00 	vldr	s0, [r7]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f805 	bl	8002a38 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a44:	460b      	mov	r3, r1
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d109      	bne.n	8002a6a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002a56:	79ba      	ldrb	r2, [r7, #6]
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f98d 	bl	8002d80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	e008      	b.n	8002a7c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002a6a:	79ba      	ldrb	r2, [r7, #6]
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fa9f 	bl	8002fb8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002a7a:	4603      	mov	r3, r0
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	331c      	adds	r3, #28
 8002a96:	f107 020b 	add.w	r2, r7, #11
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fde7 	bl	8003670 <lis2dw12_full_scale_get>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	e027      	b.n	8002afe <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d81b      	bhi.n	8002aec <LIS2DW12_ACC_GetFullScale+0x68>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <LIS2DW12_ACC_GetFullScale+0x38>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ad5 	.word	0x08002ad5
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ae5 	.word	0x08002ae5
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
      break;
 8002ad2:	e013      	b.n	8002afc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	601a      	str	r2, [r3, #0]
      break;
 8002ada:	e00f      	b.n	8002afc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]
      break;
 8002ae2:	e00b      	b.n	8002afc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	601a      	str	r2, [r3, #0]
      break;
 8002aea:	e007      	b.n	8002afc <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	60fb      	str	r3, [r7, #12]
      break;
 8002afa:	bf00      	nop
  }

  return ret;
 8002afc:	68fb      	ldr	r3, [r7, #12]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop

08002b08 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	dd0b      	ble.n	8002b30 <LIS2DW12_ACC_SetFullScale+0x28>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	dd06      	ble.n	8002b2c <LIS2DW12_ACC_SetFullScale+0x24>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	dc01      	bgt.n	8002b28 <LIS2DW12_ACC_SetFullScale+0x20>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e004      	b.n	8002b32 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e002      	b.n	8002b32 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002b30:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002b32:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	331c      	adds	r3, #28
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fd71 	bl	8003624 <lis2dw12_full_scale_set>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	e000      	b.n	8002b50 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	331c      	adds	r3, #28
 8002b6a:	f107 020b 	add.w	r2, r7, #11
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fb67 	bl	8003244 <lis2dw12_power_mode_get>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	e089      	b.n	8002c96 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	331c      	adds	r3, #28
 8002b86:	f107 020c 	add.w	r2, r7, #12
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fda7 	bl	80036e0 <lis2dw12_acceleration_raw_get>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e07b      	b.n	8002c96 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	2b1b      	cmp	r3, #27
 8002ba2:	d873      	bhi.n	8002c8c <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002c1d 	.word	0x08002c1d
 8002bb0:	08002c55 	.word	0x08002c55
 8002bb4:	08002c55 	.word	0x08002c55
 8002bb8:	08002c55 	.word	0x08002c55
 8002bbc:	08002c55 	.word	0x08002c55
 8002bc0:	08002c8d 	.word	0x08002c8d
 8002bc4:	08002c8d 	.word	0x08002c8d
 8002bc8:	08002c8d 	.word	0x08002c8d
 8002bcc:	08002c1d 	.word	0x08002c1d
 8002bd0:	08002c55 	.word	0x08002c55
 8002bd4:	08002c55 	.word	0x08002c55
 8002bd8:	08002c55 	.word	0x08002c55
 8002bdc:	08002c8d 	.word	0x08002c8d
 8002be0:	08002c8d 	.word	0x08002c8d
 8002be4:	08002c8d 	.word	0x08002c8d
 8002be8:	08002c8d 	.word	0x08002c8d
 8002bec:	08002c1d 	.word	0x08002c1d
 8002bf0:	08002c55 	.word	0x08002c55
 8002bf4:	08002c55 	.word	0x08002c55
 8002bf8:	08002c55 	.word	0x08002c55
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002c8d 	.word	0x08002c8d
 8002c04:	08002c8d 	.word	0x08002c8d
 8002c08:	08002c8d 	.word	0x08002c8d
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c55 	.word	0x08002c55
 8002c14:	08002c55 	.word	0x08002c55
 8002c18:	08002c55 	.word	0x08002c55
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da00      	bge.n	8002c26 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002c24:	330f      	adds	r3, #15
 8002c26:	111b      	asrs	r3, r3, #4
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da00      	bge.n	8002c38 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002c36:	330f      	adds	r3, #15
 8002c38:	111b      	asrs	r3, r3, #4
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002c40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da00      	bge.n	8002c4a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002c48:	330f      	adds	r3, #15
 8002c4a:	111b      	asrs	r3, r3, #4
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	809a      	strh	r2, [r3, #4]
      break;
 8002c52:	e01f      	b.n	8002c94 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002c54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da00      	bge.n	8002c5e <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	109b      	asrs	r3, r3, #2
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da00      	bge.n	8002c70 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8002c6e:	3303      	adds	r3, #3
 8002c70:	109b      	asrs	r3, r3, #2
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002c78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da00      	bge.n	8002c82 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002c80:	3303      	adds	r3, #3
 8002c82:	109b      	asrs	r3, r3, #2
 8002c84:	b21a      	sxth	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	809a      	strh	r2, [r3, #4]
      break;
 8002c8a:	e003      	b.n	8002c94 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	617b      	str	r3, [r7, #20]
      break;
 8002c92:	bf00      	nop
  }

  return ret;
 8002c94:	697b      	ldr	r3, [r7, #20]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff4e 	bl	8002b58 <LIS2DW12_ACC_GetAxesRaw>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e03c      	b.n	8002d42 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fbd6 	bl	8002480 <LIS2DW12_ACC_GetSensitivity>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e030      	b.n	8002d42 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002ce0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf8:	ee17 2a90 	vmov	r2, s15
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002d00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 2a90 	vmov	r2, s15
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 2a90 	vmov	r2, s15
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]
 8002d56:	4613      	mov	r3, r2
 8002d58:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f103 001c 	add.w	r0, r3, #28
 8002d60:	1cba      	adds	r2, r7, #2
 8002d62:	78f9      	ldrb	r1, [r7, #3]
 8002d64:	2301      	movs	r3, #1
 8002d66:	f000 fa07 	bl	8003178 <lis2dw12_write_reg>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	e000      	b.n	8002d78 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	71fb      	strb	r3, [r7, #7]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d80b      	bhi.n	8002db4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002de1 	.word	0x08002de1
 8002da8:	08002e0d 	.word	0x08002e0d
 8002dac:	08002e39 	.word	0x08002e39
 8002db0:	08002e65 	.word	0x08002e65
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002db4:	79bb      	ldrb	r3, [r7, #6]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d002      	beq.n	8002dc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8002dbe:	e002      	b.n	8002dc6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002dc0:	2314      	movs	r3, #20
 8002dc2:	75fb      	strb	r3, [r7, #23]
          break;
 8002dc4:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dca:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d400      	bmi.n	8002dda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002dd8:	e05a      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002dda:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002ddc:	60bb      	str	r3, [r7, #8]
      break;
 8002dde:	e057      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002de0:	79bb      	ldrb	r3, [r7, #6]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002de6:	2303      	movs	r3, #3
 8002de8:	75fb      	strb	r3, [r7, #23]
          break;
 8002dea:	e002      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002dec:	2313      	movs	r3, #19
 8002dee:	75fb      	strb	r3, [r7, #23]
          break;
 8002df0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	dc00      	bgt.n	8002e06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002e04:	e044      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002e06:	4b66      	ldr	r3, [pc, #408]	; (8002fa0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e08:	60bb      	str	r3, [r7, #8]
      break;
 8002e0a:	e041      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002e12:	2302      	movs	r3, #2
 8002e14:	75fb      	strb	r3, [r7, #23]
          break;
 8002e16:	e002      	b.n	8002e1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002e18:	2312      	movs	r3, #18
 8002e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8002e1c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e22:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	dc00      	bgt.n	8002e32 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002e30:	e02e      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e34:	60bb      	str	r3, [r7, #8]
      break;
 8002e36:	e02b      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
          break;
 8002e42:	e002      	b.n	8002e4a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002e44:	2311      	movs	r3, #17
 8002e46:	75fb      	strb	r3, [r7, #23]
          break;
 8002e48:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	dc00      	bgt.n	8002e5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002e5c:	e018      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002e5e:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e015      	b.n	8002e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002e64:	79bb      	ldrb	r3, [r7, #6]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d002      	beq.n	8002e70 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8002e6e:	e002      	b.n	8002e76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002e70:	2310      	movs	r3, #16
 8002e72:	75fb      	strb	r3, [r7, #23]
          break;
 8002e74:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002e76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e7a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	dc00      	bgt.n	8002e8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002e88:	e001      	b.n	8002e8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002e8a:	4b45      	ldr	r3, [pc, #276]	; (8002fa0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002e8c:	60bb      	str	r3, [r7, #8]
      break;
 8002e8e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e94:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002fa4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d801      	bhi.n	8002ea6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04d      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eaa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d801      	bhi.n	8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e042      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d801      	bhi.n	8002ed2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e037      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002fa8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d801      	bhi.n	8002ee8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	e02c      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002fac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d801      	bhi.n	8002efe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e021      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f02:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	d801      	bhi.n	8002f14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002f10:	2306      	movs	r3, #6
 8002f12:	e016      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f18:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002fb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d801      	bhi.n	8002f2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00b      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002f2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f2e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002fb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d801      	bhi.n	8002f40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	e000      	b.n	8002f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002f40:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002f42:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	331c      	adds	r3, #28
 8002f48:	7dba      	ldrb	r2, [r7, #22]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fa33 	bl	80033b8 <lis2dw12_data_rate_set>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5c:	e018      	b.n	8002f90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	331c      	adds	r3, #28
 8002f62:	7dfa      	ldrb	r2, [r7, #23]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f91e 	bl	80031a8 <lis2dw12_power_mode_set>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	e00b      	b.n	8002f90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	79ba      	ldrb	r2, [r7, #6]
 8002f8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	41480000 	.word	0x41480000
 8002f9c:	43480000 	.word	0x43480000
 8002fa0:	43480000 	.word	0x43480000
 8002fa4:	3fcccccd 	.word	0x3fcccccd
 8002fa8:	42480000 	.word	0x42480000
 8002fac:	42c80000 	.word	0x42c80000
 8002fb0:	43c80000 	.word	0x43c80000
 8002fb4:	44480000 	.word	0x44480000

08002fb8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	79ba      	ldrb	r2, [r7, #6]
 8002fd8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80030a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fec:	d801      	bhi.n	8002ff2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002ff0:	e04d      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d801      	bhi.n	8003008 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003006:	e042      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8003008:	edd7 7a02 	vldr	s15, [r7, #8]
 800300c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d801      	bhi.n	800301e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 800301a:	4b24      	ldr	r3, [pc, #144]	; (80030ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 800301c:	e037      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800301e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003022:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80030b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	d801      	bhi.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8003032:	e02c      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8003034:	edd7 7a02 	vldr	s15, [r7, #8]
 8003038:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80030b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 800303c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d801      	bhi.n	800304a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8003048:	e021      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800304a:	edd7 7a02 	vldr	s15, [r7, #8]
 800304e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80030c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d801      	bhi.n	8003060 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800305e:	e016      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003060:	edd7 7a02 	vldr	s15, [r7, #8]
 8003064:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80030c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	d801      	bhi.n	8003076 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003074:	e00b      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8003076:	edd7 7a02 	vldr	s15, [r7, #8]
 800307a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80030d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	d801      	bhi.n	800308c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800308a:	e000      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	3fcccccd 	.word	0x3fcccccd
 80030a4:	3fcccccd 	.word	0x3fcccccd
 80030a8:	41480000 	.word	0x41480000
 80030ac:	41c80000 	.word	0x41c80000
 80030b0:	42480000 	.word	0x42480000
 80030b4:	42480000 	.word	0x42480000
 80030b8:	42c80000 	.word	0x42c80000
 80030bc:	42c80000 	.word	0x42c80000
 80030c0:	43480000 	.word	0x43480000
 80030c4:	43480000 	.word	0x43480000
 80030c8:	43c80000 	.word	0x43c80000
 80030cc:	43c80000 	.word	0x43c80000
 80030d0:	44480000 	.word	0x44480000
 80030d4:	44480000 	.word	0x44480000
 80030d8:	44c80000 	.word	0x44c80000

080030dc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	461a      	mov	r2, r3
 80030e8:	460b      	mov	r3, r1
 80030ea:	72fb      	strb	r3, [r7, #11]
 80030ec:	4613      	mov	r3, r2
 80030ee:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	695c      	ldr	r4, [r3, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	7b1b      	ldrb	r3, [r3, #12]
 80030fc:	b298      	uxth	r0, r3
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	b299      	uxth	r1, r3
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	47a0      	blx	r4
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	461a      	mov	r2, r3
 800311e:	460b      	mov	r3, r1
 8003120:	72fb      	strb	r3, [r7, #11]
 8003122:	4613      	mov	r3, r2
 8003124:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	691c      	ldr	r4, [r3, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	7b1b      	ldrb	r3, [r3, #12]
 8003132:	b298      	uxth	r0, r3
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	b299      	uxth	r1, r3
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	47a0      	blx	r4
 800313e:	4603      	mov	r3, r0
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}

08003148 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	460b      	mov	r3, r1
 8003156:	72fb      	strb	r3, [r7, #11]
 8003158:	4613      	mov	r3, r2
 800315a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685c      	ldr	r4, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	7af9      	ldrb	r1, [r7, #11]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	47a0      	blx	r4
 800316c:	6178      	str	r0, [r7, #20]

  return ret;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}

08003178 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	461a      	mov	r2, r3
 8003184:	460b      	mov	r3, r1
 8003186:	72fb      	strb	r3, [r7, #11]
 8003188:	4613      	mov	r3, r2
 800318a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681c      	ldr	r4, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6898      	ldr	r0, [r3, #8]
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	7af9      	ldrb	r1, [r7, #11]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	47a0      	blx	r4
 800319c:	6178      	str	r0, [r7, #20]

  return ret;
 800319e:	697b      	ldr	r3, [r7, #20]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80031b4:	f107 0210 	add.w	r2, r7, #16
 80031b8:	2301      	movs	r3, #1
 80031ba:	2120      	movs	r1, #32
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffc3 	bl	8003148 <lis2dw12_read_reg>
 80031c2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	7c3b      	ldrb	r3, [r7, #16]
 80031d6:	f362 0383 	bfi	r3, r2, #2, #2
 80031da:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	7c3b      	ldrb	r3, [r7, #16]
 80031e6:	f362 0301 	bfi	r3, r2, #0, #2
 80031ea:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80031ec:	f107 0210 	add.w	r2, r7, #16
 80031f0:	2301      	movs	r3, #1
 80031f2:	2120      	movs	r1, #32
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ffbf 	bl	8003178 <lis2dw12_write_reg>
 80031fa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	2301      	movs	r3, #1
 8003208:	2125      	movs	r1, #37	; 0x25
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff9c 	bl	8003148 <lis2dw12_read_reg>
 8003210:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	7b3b      	ldrb	r3, [r7, #12]
 8003224:	f362 0382 	bfi	r3, r2, #2, #1
 8003228:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800322a:	f107 020c 	add.w	r2, r7, #12
 800322e:	2301      	movs	r3, #1
 8003230:	2125      	movs	r1, #37	; 0x25
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa0 	bl	8003178 <lis2dw12_write_reg>
 8003238:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800323a:	697b      	ldr	r3, [r7, #20]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800324e:	f107 0210 	add.w	r2, r7, #16
 8003252:	2301      	movs	r3, #1
 8003254:	2120      	movs	r1, #32
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ff76 	bl	8003148 <lis2dw12_read_reg>
 800325c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 80a3 	bne.w	80033ac <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003266:	f107 020c 	add.w	r2, r7, #12
 800326a:	2301      	movs	r3, #1
 800326c:	2125      	movs	r1, #37	; 0x25
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff6a 	bl	8003148 <lis2dw12_read_reg>
 8003274:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003276:	7b3b      	ldrb	r3, [r7, #12]
 8003278:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	011a      	lsls	r2, r3, #4
 8003280:	7c3b      	ldrb	r3, [r7, #16]
 8003282:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 800328c:	7c3a      	ldrb	r2, [r7, #16]
 800328e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8003292:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003294:	4413      	add	r3, r2
 8003296:	2b1b      	cmp	r3, #27
 8003298:	f200 8084 	bhi.w	80033a4 <lis2dw12_power_mode_get+0x160>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <lis2dw12_power_mode_get+0x60>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	08003335 	.word	0x08003335
 80032a8:	0800332d 	.word	0x0800332d
 80032ac:	08003325 	.word	0x08003325
 80032b0:	0800331d 	.word	0x0800331d
 80032b4:	08003315 	.word	0x08003315
 80032b8:	080033a5 	.word	0x080033a5
 80032bc:	080033a5 	.word	0x080033a5
 80032c0:	080033a5 	.word	0x080033a5
 80032c4:	08003355 	.word	0x08003355
 80032c8:	0800334d 	.word	0x0800334d
 80032cc:	08003345 	.word	0x08003345
 80032d0:	0800333d 	.word	0x0800333d
 80032d4:	080033a5 	.word	0x080033a5
 80032d8:	080033a5 	.word	0x080033a5
 80032dc:	080033a5 	.word	0x080033a5
 80032e0:	080033a5 	.word	0x080033a5
 80032e4:	0800337d 	.word	0x0800337d
 80032e8:	08003375 	.word	0x08003375
 80032ec:	0800336d 	.word	0x0800336d
 80032f0:	08003365 	.word	0x08003365
 80032f4:	0800335d 	.word	0x0800335d
 80032f8:	080033a5 	.word	0x080033a5
 80032fc:	080033a5 	.word	0x080033a5
 8003300:	080033a5 	.word	0x080033a5
 8003304:	0800339d 	.word	0x0800339d
 8003308:	08003395 	.word	0x08003395
 800330c:	0800338d 	.word	0x0800338d
 8003310:	08003385 	.word	0x08003385
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2204      	movs	r2, #4
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	e048      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2203      	movs	r2, #3
 8003320:	701a      	strb	r2, [r3, #0]
        break;
 8003322:	e044      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	e040      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
        break;
 8003332:	e03c      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
        break;
 800333a:	e038      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	220b      	movs	r2, #11
 8003340:	701a      	strb	r2, [r3, #0]
        break;
 8003342:	e034      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	220a      	movs	r2, #10
 8003348:	701a      	strb	r2, [r3, #0]
        break;
 800334a:	e030      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2209      	movs	r2, #9
 8003350:	701a      	strb	r2, [r3, #0]
        break;
 8003352:	e02c      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2208      	movs	r2, #8
 8003358:	701a      	strb	r2, [r3, #0]
        break;
 800335a:	e028      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2214      	movs	r2, #20
 8003360:	701a      	strb	r2, [r3, #0]
        break;
 8003362:	e024      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2213      	movs	r2, #19
 8003368:	701a      	strb	r2, [r3, #0]
        break;
 800336a:	e020      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2212      	movs	r2, #18
 8003370:	701a      	strb	r2, [r3, #0]
        break;
 8003372:	e01c      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2211      	movs	r2, #17
 8003378:	701a      	strb	r2, [r3, #0]
        break;
 800337a:	e018      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2210      	movs	r2, #16
 8003380:	701a      	strb	r2, [r3, #0]
        break;
 8003382:	e014      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	221b      	movs	r2, #27
 8003388:	701a      	strb	r2, [r3, #0]
        break;
 800338a:	e010      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	221a      	movs	r2, #26
 8003390:	701a      	strb	r2, [r3, #0]
        break;
 8003392:	e00c      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2219      	movs	r2, #25
 8003398:	701a      	strb	r2, [r3, #0]
        break;
 800339a:	e008      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2218      	movs	r2, #24
 80033a0:	701a      	strb	r2, [r3, #0]
        break;
 80033a2:	e004      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	e000      	b.n	80033ae <lis2dw12_power_mode_get+0x16a>
    }
  }
 80033ac:	bf00      	nop

  return ret;
 80033ae:	697b      	ldr	r3, [r7, #20]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80033c4:	f107 0210 	add.w	r2, r7, #16
 80033c8:	2301      	movs	r3, #1
 80033ca:	2120      	movs	r1, #32
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff febb 	bl	8003148 <lis2dw12_read_reg>
 80033d2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	7c3b      	ldrb	r3, [r7, #16]
 80033e4:	f362 1307 	bfi	r3, r2, #4, #4
 80033e8:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80033ea:	f107 0210 	add.w	r2, r7, #16
 80033ee:	2301      	movs	r3, #1
 80033f0:	2120      	movs	r1, #32
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fec0 	bl	8003178 <lis2dw12_write_reg>
 80033f8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003400:	f107 020c 	add.w	r2, r7, #12
 8003404:	2301      	movs	r3, #1
 8003406:	2122      	movs	r1, #34	; 0x22
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fe9d 	bl	8003148 <lis2dw12_read_reg>
 800340e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d110      	bne.n	8003438 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	b2da      	uxtb	r2, r3
 8003420:	7b3b      	ldrb	r3, [r7, #12]
 8003422:	f362 0301 	bfi	r3, r2, #0, #2
 8003426:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003428:	f107 020c 	add.w	r2, r7, #12
 800342c:	2301      	movs	r3, #1
 800342e:	2122      	movs	r1, #34	; 0x22
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fea1 	bl	8003178 <lis2dw12_write_reg>
 8003436:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003438:	697b      	ldr	r3, [r7, #20]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800344e:	f107 0210 	add.w	r2, r7, #16
 8003452:	2301      	movs	r3, #1
 8003454:	2120      	movs	r1, #32
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fe76 	bl	8003148 <lis2dw12_read_reg>
 800345c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 80b3 	bne.w	80035cc <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003466:	f107 020c 	add.w	r2, r7, #12
 800346a:	2301      	movs	r3, #1
 800346c:	2122      	movs	r1, #34	; 0x22
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe6a 	bl	8003148 <lis2dw12_read_reg>
 8003474:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003476:	7b3b      	ldrb	r3, [r7, #12]
 8003478:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	7c3a      	ldrb	r2, [r7, #16]
 8003482:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	4413      	add	r3, r2
 800348a:	2b32      	cmp	r3, #50	; 0x32
 800348c:	f200 809a 	bhi.w	80035c4 <lis2dw12_data_rate_get+0x180>
 8003490:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <lis2dw12_data_rate_get+0x54>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	08003565 	.word	0x08003565
 800349c:	0800356d 	.word	0x0800356d
 80034a0:	08003575 	.word	0x08003575
 80034a4:	0800357d 	.word	0x0800357d
 80034a8:	08003585 	.word	0x08003585
 80034ac:	0800358d 	.word	0x0800358d
 80034b0:	08003595 	.word	0x08003595
 80034b4:	0800359d 	.word	0x0800359d
 80034b8:	080035a5 	.word	0x080035a5
 80034bc:	080035ad 	.word	0x080035ad
 80034c0:	080035c5 	.word	0x080035c5
 80034c4:	080035c5 	.word	0x080035c5
 80034c8:	080035c5 	.word	0x080035c5
 80034cc:	080035c5 	.word	0x080035c5
 80034d0:	080035c5 	.word	0x080035c5
 80034d4:	080035c5 	.word	0x080035c5
 80034d8:	080035c5 	.word	0x080035c5
 80034dc:	080035c5 	.word	0x080035c5
 80034e0:	080035bd 	.word	0x080035bd
 80034e4:	080035c5 	.word	0x080035c5
 80034e8:	080035c5 	.word	0x080035c5
 80034ec:	080035c5 	.word	0x080035c5
 80034f0:	080035c5 	.word	0x080035c5
 80034f4:	080035c5 	.word	0x080035c5
 80034f8:	080035c5 	.word	0x080035c5
 80034fc:	080035c5 	.word	0x080035c5
 8003500:	080035c5 	.word	0x080035c5
 8003504:	080035c5 	.word	0x080035c5
 8003508:	080035c5 	.word	0x080035c5
 800350c:	080035c5 	.word	0x080035c5
 8003510:	080035c5 	.word	0x080035c5
 8003514:	080035c5 	.word	0x080035c5
 8003518:	080035c5 	.word	0x080035c5
 800351c:	080035c5 	.word	0x080035c5
 8003520:	080035c5 	.word	0x080035c5
 8003524:	080035c5 	.word	0x080035c5
 8003528:	080035c5 	.word	0x080035c5
 800352c:	080035c5 	.word	0x080035c5
 8003530:	080035c5 	.word	0x080035c5
 8003534:	080035c5 	.word	0x080035c5
 8003538:	080035c5 	.word	0x080035c5
 800353c:	080035c5 	.word	0x080035c5
 8003540:	080035c5 	.word	0x080035c5
 8003544:	080035c5 	.word	0x080035c5
 8003548:	080035c5 	.word	0x080035c5
 800354c:	080035c5 	.word	0x080035c5
 8003550:	080035c5 	.word	0x080035c5
 8003554:	080035c5 	.word	0x080035c5
 8003558:	080035c5 	.word	0x080035c5
 800355c:	080035c5 	.word	0x080035c5
 8003560:	080035b5 	.word	0x080035b5
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
        break;
 800356a:	e030      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
        break;
 8003572:	e02c      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
        break;
 800357a:	e028      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2203      	movs	r2, #3
 8003580:	701a      	strb	r2, [r3, #0]
        break;
 8003582:	e024      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2204      	movs	r2, #4
 8003588:	701a      	strb	r2, [r3, #0]
        break;
 800358a:	e020      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2205      	movs	r2, #5
 8003590:	701a      	strb	r2, [r3, #0]
        break;
 8003592:	e01c      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
        break;
 800359a:	e018      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2207      	movs	r2, #7
 80035a0:	701a      	strb	r2, [r3, #0]
        break;
 80035a2:	e014      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2208      	movs	r2, #8
 80035a8:	701a      	strb	r2, [r3, #0]
        break;
 80035aa:	e010      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2209      	movs	r2, #9
 80035b0:	701a      	strb	r2, [r3, #0]
        break;
 80035b2:	e00c      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2232      	movs	r2, #50	; 0x32
 80035b8:	701a      	strb	r2, [r3, #0]
        break;
 80035ba:	e008      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2212      	movs	r2, #18
 80035c0:	701a      	strb	r2, [r3, #0]
        break;
 80035c2:	e004      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
        break;
 80035ca:	e000      	b.n	80035ce <lis2dw12_data_rate_get+0x18a>
    }
  }
 80035cc:	bf00      	nop

  return ret;
 80035ce:	697b      	ldr	r3, [r7, #20]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	2301      	movs	r3, #1
 80035ea:	2121      	movs	r1, #33	; 0x21
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fdab 	bl	8003148 <lis2dw12_read_reg>
 80035f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	7a3b      	ldrb	r3, [r7, #8]
 8003604:	f362 03c3 	bfi	r3, r2, #3, #1
 8003608:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800360a:	f107 0208 	add.w	r2, r7, #8
 800360e:	2301      	movs	r3, #1
 8003610:	2121      	movs	r1, #33	; 0x21
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fdb0 	bl	8003178 <lis2dw12_write_reg>
 8003618:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003630:	f107 0208 	add.w	r2, r7, #8
 8003634:	2301      	movs	r3, #1
 8003636:	2125      	movs	r1, #37	; 0x25
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fd85 	bl	8003148 <lis2dw12_read_reg>
 800363e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	b2da      	uxtb	r2, r3
 800364e:	7a3b      	ldrb	r3, [r7, #8]
 8003650:	f362 1305 	bfi	r3, r2, #4, #2
 8003654:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003656:	f107 0208 	add.w	r2, r7, #8
 800365a:	2301      	movs	r3, #1
 800365c:	2125      	movs	r1, #37	; 0x25
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fd8a 	bl	8003178 <lis2dw12_write_reg>
 8003664:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800367a:	f107 0208 	add.w	r2, r7, #8
 800367e:	2301      	movs	r3, #1
 8003680:	2125      	movs	r1, #37	; 0x25
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fd60 	bl	8003148 <lis2dw12_read_reg>
 8003688:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800368a:	7a3b      	ldrb	r3, [r7, #8]
 800368c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b03      	cmp	r3, #3
 8003694:	d81a      	bhi.n	80036cc <lis2dw12_full_scale_get+0x5c>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <lis2dw12_full_scale_get+0x2c>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036b5 	.word	0x080036b5
 80036a4:	080036bd 	.word	0x080036bd
 80036a8:	080036c5 	.word	0x080036c5
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e00f      	b.n	80036d4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e00b      	b.n	80036d4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2202      	movs	r2, #2
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	e007      	b.n	80036d4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2203      	movs	r2, #3
 80036c8:	701a      	strb	r2, [r3, #0]
      break;
 80036ca:	e003      	b.n	80036d4 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	bf00      	nop
  }

  return ret;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop

080036e0 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80036ea:	f107 020c 	add.w	r2, r7, #12
 80036ee:	2306      	movs	r3, #6
 80036f0:	2128      	movs	r1, #40	; 0x28
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fd28 	bl	8003148 <lis2dw12_read_reg>
 80036f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80036fa:	7b7b      	ldrb	r3, [r7, #13]
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003708:	b29b      	uxth	r3, r3
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	b29a      	uxth	r2, r3
 800370e:	7b3b      	ldrb	r3, [r7, #12]
 8003710:	b29b      	uxth	r3, r3
 8003712:	4413      	add	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	b21a      	sxth	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	3302      	adds	r3, #2
 8003722:	b212      	sxth	r2, r2
 8003724:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3302      	adds	r3, #2
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	b29b      	uxth	r3, r3
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	b29a      	uxth	r2, r3
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	b29b      	uxth	r3, r3
 8003738:	4413      	add	r3, r2
 800373a:	b29a      	uxth	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	3302      	adds	r3, #2
 8003740:	b212      	sxth	r2, r2
 8003742:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003744:	7c7a      	ldrb	r2, [r7, #17]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	3304      	adds	r3, #4
 800374a:	b212      	sxth	r2, r2
 800374c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003756:	b29b      	uxth	r3, r3
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	b29a      	uxth	r2, r3
 800375c:	7c3b      	ldrb	r3, [r7, #16]
 800375e:	b29b      	uxth	r3, r3
 8003760:	4413      	add	r3, r2
 8003762:	b29a      	uxth	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	b212      	sxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]

  return ret;
 800376c:	697b      	ldr	r3, [r7, #20]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003780:	2301      	movs	r3, #1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	210f      	movs	r1, #15
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fcde 	bl	8003148 <lis2dw12_read_reg>
 800378c:	60f8      	str	r0, [r7, #12]

  return ret;
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80037a4:	f107 0208 	add.w	r2, r7, #8
 80037a8:	2301      	movs	r3, #1
 80037aa:	2121      	movs	r1, #33	; 0x21
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fccb 	bl	8003148 <lis2dw12_read_reg>
 80037b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	7a3b      	ldrb	r3, [r7, #8]
 80037c4:	f362 0382 	bfi	r3, r2, #2, #1
 80037c8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80037ca:	f107 0208 	add.w	r2, r7, #8
 80037ce:	2301      	movs	r3, #1
 80037d0:	2121      	movs	r1, #33	; 0x21
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fcd0 	bl	8003178 <lis2dw12_write_reg>
 80037d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80037f0:	f107 0208 	add.w	r2, r7, #8
 80037f4:	2301      	movs	r3, #1
 80037f6:	212e      	movs	r1, #46	; 0x2e
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fca5 	bl	8003148 <lis2dw12_read_reg>
 80037fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2da      	uxtb	r2, r3
 800380e:	7a3b      	ldrb	r3, [r7, #8]
 8003810:	f362 1347 	bfi	r3, r2, #5, #3
 8003814:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003816:	f107 0208 	add.w	r2, r7, #8
 800381a:	2301      	movs	r3, #1
 800381c:	212e      	movs	r1, #46	; 0x2e
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fcaa 	bl	8003178 <lis2dw12_write_reg>
 8003824:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e063      	b.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7b1a      	ldrb	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a26      	ldr	r2, [pc, #152]	; (8003920 <LIS2MDL_RegisterBusIO+0xf0>)
 8003888:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <LIS2MDL_RegisterBusIO+0xf4>)
 800388e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e036      	b.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4798      	blx	r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e02c      	b.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d028      	beq.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d123      	bne.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10d      	bne.n	80038f0 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80038d4:	2334      	movs	r3, #52	; 0x34
 80038d6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	461a      	mov	r2, r3
 80038dc:	2162      	movs	r1, #98	; 0x62
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb1b 	bl	8003f1a <LIS2MDL_Write_Reg>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d014      	beq.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e012      	b.n	8003916 <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d101      	bne.n	80038fc <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e00c      	b.n	8003916 <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	331c      	adds	r3, #28
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f000 ff70 	bl	80047e8 <lis2mdl_i2c_interface_set>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e000      	b.n	8003916 <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003914:	68fb      	ldr	r3, [r7, #12]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	08003f71 	.word	0x08003f71
 8003924:	08003ff3 	.word	0x08003ff3

08003928 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d144      	bne.n	80039c2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003938:	f107 0208 	add.w	r2, r7, #8
 800393c:	2301      	movs	r3, #1
 800393e:	2162      	movs	r1, #98	; 0x62
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb97 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e06c      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003952:	f107 020c 	add.w	r2, r7, #12
 8003956:	2301      	movs	r3, #1
 8003958:	2160      	movs	r1, #96	; 0x60
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fb8a 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e05f      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800396c:	7a3b      	ldrb	r3, [r7, #8]
 800396e:	f043 0310 	orr.w	r3, r3, #16
 8003972:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003974:	7a3b      	ldrb	r3, [r7, #8]
 8003976:	f36f 0341 	bfc	r3, #1, #1
 800397a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800397c:	7b3b      	ldrb	r3, [r7, #12]
 800397e:	2202      	movs	r2, #2
 8003980:	f362 0301 	bfi	r3, r2, #0, #2
 8003984:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003986:	7b3b      	ldrb	r3, [r7, #12]
 8003988:	f043 030c 	orr.w	r3, r3, #12
 800398c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800398e:	f107 0208 	add.w	r2, r7, #8
 8003992:	2301      	movs	r3, #1
 8003994:	2162      	movs	r1, #98	; 0x62
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fcab 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	e041      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80039a8:	f107 020c 	add.w	r2, r7, #12
 80039ac:	2301      	movs	r3, #1
 80039ae:	2160      	movs	r1, #96	; 0x60
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fc9e 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d032      	beq.n	8003a22 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	e034      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	331c      	adds	r3, #28
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fe65 	bl	8004698 <lis2mdl_block_data_update_set>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	e028      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	331c      	adds	r3, #28
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fdd4 	bl	800458e <lis2mdl_operating_mode_set>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e01c      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	331c      	adds	r3, #28
 80039f6:	2103      	movs	r1, #3
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fdee 	bl	80045da <lis2mdl_data_rate_set>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	e010      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	331c      	adds	r3, #28
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fec3 	bl	800479c <lis2mdl_self_test_set>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	e004      	b.n	8003a2c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8a5 	bl	8003b8c <LIS2MDL_MAG_Disable>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e004      	b.n	8003a58 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d10b      	bne.n	8003a8a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003a72:	2301      	movs	r3, #1
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	214f      	movs	r1, #79	; 0x4f
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fafb 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	e00c      	b.n	8003aa4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	331c      	adds	r3, #28
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fe72 	bl	800477a <lis2mdl_device_id_get>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e000      	b.n	8003aa4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2200      	movs	r2, #0
 8003acc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2232      	movs	r2, #50	; 0x32
 8003ade:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <LIS2MDL_GetCapabilities+0x58>)
 8003af4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	42c80000 	.word	0x42c80000

08003b08 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e032      	b.n	8003b84 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d11d      	bne.n	8003b62 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b26:	f107 020c 	add.w	r2, r7, #12
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2160      	movs	r1, #96	; 0x60
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 faa0 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e021      	b.n	8003b84 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003b40:	7b3b      	ldrb	r3, [r7, #12]
 8003b42:	f36f 0301 	bfc	r3, #0, #2
 8003b46:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b48:	f107 020c 	add.w	r2, r7, #12
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	2160      	movs	r1, #96	; 0x60
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fbce 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	e010      	b.n	8003b84 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	331c      	adds	r3, #28
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fd10 	bl	800458e <lis2mdl_operating_mode_set>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
 8003b78:	e004      	b.n	8003b84 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e033      	b.n	8003c0a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d11e      	bne.n	8003be8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003baa:	f107 020c 	add.w	r2, r7, #12
 8003bae:	2301      	movs	r3, #1
 8003bb0:	2160      	movs	r1, #96	; 0x60
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa5e 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	e022      	b.n	8003c0a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003bc4:	7b3b      	ldrb	r3, [r7, #12]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f362 0301 	bfi	r3, r2, #0, #2
 8003bcc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003bce:	f107 020c 	add.w	r2, r7, #12
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2160      	movs	r1, #96	; 0x60
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fb8b 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e010      	b.n	8003c0a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	331c      	adds	r3, #28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fccd 	bl	800458e <lis2mdl_operating_mode_set>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e004      	b.n	8003c0a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003c22:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	331c      	adds	r3, #28
 8003c46:	f107 020b 	add.w	r2, r7, #11
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fceb 	bl	8004628 <lis2mdl_data_rate_get>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e023      	b.n	8003ca6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d81b      	bhi.n	8003c9c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c95 	.word	0x08003c95
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003c80:	601a      	str	r2, [r3, #0]
      break;
 8003c82:	e00f      	b.n	8003ca4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003c88:	601a      	str	r2, [r3, #0]
      break;
 8003c8a:	e00b      	b.n	8003ca4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003c90:	601a      	str	r2, [r3, #0]
      break;
 8003c92:	e007      	b.n	8003ca4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003c98:	601a      	str	r2, [r3, #0]
      break;
 8003c9a:	e003      	b.n	8003ca4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	60fb      	str	r3, [r7, #12]
      break;
 8003ca2:	bf00      	nop
  }

  return ret;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	41200000 	.word	0x41200000
 8003cb4:	41a00000 	.word	0x41a00000
 8003cb8:	42480000 	.word	0x42480000
 8003cbc:	42c80000 	.word	0x42c80000

08003cc0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003ccc:	edd7 7a00 	vldr	s15, [r7]
 8003cd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	d801      	bhi.n	8003ce2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e016      	b.n	8003d10 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003ce2:	edd7 7a00 	vldr	s15, [r7]
 8003ce6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf2:	d801      	bhi.n	8003cf8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e00b      	b.n	8003d10 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003cf8:	edd7 7a00 	vldr	s15, [r7]
 8003cfc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d84 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	d801      	bhi.n	8003d0e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e000      	b.n	8003d10 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003d0e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003d10:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d121      	bne.n	8003d5e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d1a:	f107 020c 	add.w	r2, r7, #12
 8003d1e:	2301      	movs	r3, #1
 8003d20:	2160      	movs	r1, #96	; 0x60
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9a6 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e022      	b.n	8003d7a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	7b3b      	ldrb	r3, [r7, #12]
 8003d3e:	f362 0383 	bfi	r3, r2, #2, #2
 8003d42:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d44:	f107 020c 	add.w	r2, r7, #12
 8003d48:	2301      	movs	r3, #1
 8003d4a:	2160      	movs	r1, #96	; 0x60
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fad0 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5c:	e00d      	b.n	8003d7a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	331c      	adds	r3, #28
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fc37 	bl	80045da <lis2mdl_data_rate_set>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e000      	b.n	8003d7a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	42480000 	.word	0x42480000

08003d88 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2232      	movs	r2, #50	; 0x32
 8003d96:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	331c      	adds	r3, #28
 8003dcc:	f107 0208 	add.w	r2, r7, #8
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc86 	bl	80046e4 <lis2mdl_magnetic_raw_get>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
 8003de2:	e00c      	b.n	8003dfe <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003de4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003dec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003df4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b088      	sub	sp, #32
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d137      	bne.n	8003e88 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003e18:	f107 0218 	add.w	r2, r7, #24
 8003e1c:	2306      	movs	r3, #6
 8003e1e:	2168      	movs	r1, #104	; 0x68
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f927 	bl	8004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	e06f      	b.n	8003f12 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003e32:	7e7b      	ldrb	r3, [r7, #25]
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003e38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	7e3b      	ldrb	r3, [r7, #24]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003e4e:	7efb      	ldrb	r3, [r7, #27]
 8003e50:	b21b      	sxth	r3, r3
 8003e52:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	7ebb      	ldrb	r3, [r7, #26]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003e6a:	7f7b      	ldrb	r3, [r7, #29]
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003e70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	7f3b      	ldrb	r3, [r7, #28]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b21b      	sxth	r3, r3
 8003e84:	82bb      	strh	r3, [r7, #20]
 8003e86:	e00d      	b.n	8003ea4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	331c      	adds	r3, #28
 8003e8c:	f107 0210 	add.w	r2, r7, #16
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fc26 	bl	80046e4 <lis2mdl_magnetic_raw_get>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e036      	b.n	8003f12 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff feb1 	bl	8003c12 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003eb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec8:	ee17 2a90 	vmov	r2, s15
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee8:	ee17 2a90 	vmov	r2, s15
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ef0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f08:	ee17 2a90 	vmov	r2, s15
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
 8003f26:	4613      	mov	r3, r2
 8003f28:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d10b      	bne.n	8003f4a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003f32:	1cba      	adds	r2, r7, #2
 8003f34:	78f9      	ldrb	r1, [r7, #3]
 8003f36:	2301      	movs	r3, #1
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9da 	bl	80042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	e00e      	b.n	8003f68 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f103 001c 	add.w	r0, r3, #28
 8003f50:	1cba      	adds	r2, r7, #2
 8003f52:	78f9      	ldrb	r1, [r7, #3]
 8003f54:	2301      	movs	r3, #1
 8003f56:	f000 fb02 	bl	800455e <lis2mdl_write_reg>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e000      	b.n	8003f68 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	72fb      	strb	r3, [r7, #11]
 8003f80:	4613      	mov	r3, r2
 8003f82:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10e      	bne.n	8003fae <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	695c      	ldr	r4, [r3, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	7b1b      	ldrb	r3, [r3, #12]
 8003f98:	b298      	uxth	r0, r3
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
 8003f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	47a0      	blx	r4
 8003faa:	4603      	mov	r3, r0
 8003fac:	e01d      	b.n	8003fea <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d10b      	bne.n	8003fce <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	695c      	ldr	r4, [r3, #20]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	7b1b      	ldrb	r3, [r3, #12]
 8003fbe:	b298      	uxth	r0, r3
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
 8003fc2:	b299      	uxth	r1, r3
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	47a0      	blx	r4
 8003fca:	4603      	mov	r3, r0
 8003fcc:	e00d      	b.n	8003fea <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	695c      	ldr	r4, [r3, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	7b1b      	ldrb	r3, [r3, #12]
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	b299      	uxth	r1, r3
 8003fe2:	893b      	ldrh	r3, [r7, #8]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	47a0      	blx	r4
 8003fe8:	4603      	mov	r3, r0
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}

08003ff2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ff2:	b590      	push	{r4, r7, lr}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	460b      	mov	r3, r1
 8004000:	72fb      	strb	r3, [r7, #11]
 8004002:	4613      	mov	r3, r2
 8004004:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	691c      	ldr	r4, [r3, #16]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	7b1b      	ldrb	r3, [r3, #12]
 800401a:	b298      	uxth	r0, r3
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004022:	b2db      	uxtb	r3, r3
 8004024:	b299      	uxth	r1, r3
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	47a0      	blx	r4
 800402c:	4603      	mov	r3, r0
 800402e:	e01d      	b.n	800406c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d10b      	bne.n	8004050 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	691c      	ldr	r4, [r3, #16]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	7b1b      	ldrb	r3, [r3, #12]
 8004040:	b298      	uxth	r0, r3
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	b299      	uxth	r1, r3
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	47a0      	blx	r4
 800404c:	4603      	mov	r3, r0
 800404e:	e00d      	b.n	800406c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	691c      	ldr	r4, [r3, #16]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	7b1b      	ldrb	r3, [r3, #12]
 8004058:	b298      	uxth	r0, r3
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004060:	b2db      	uxtb	r3, r3
 8004062:	b299      	uxth	r1, r3
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	47a0      	blx	r4
 800406a:	4603      	mov	r3, r0
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd90      	pop	{r4, r7, pc}

08004074 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	460b      	mov	r3, r1
 8004082:	72fb      	strb	r3, [r7, #11]
 8004084:	4613      	mov	r3, r2
 8004086:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004094:	2300      	movs	r3, #0
 8004096:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800409a:	233d      	movs	r3, #61	; 0x3d
 800409c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800409e:	2315      	movs	r3, #21
 80040a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80040a4:	2316      	movs	r3, #22
 80040a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80040aa:	2317      	movs	r3, #23
 80040ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 80040b0:	2314      	movs	r3, #20
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80040b6:	2344      	movs	r3, #68	; 0x44
 80040b8:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80040ba:	2302      	movs	r3, #2
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80040c0:	2339      	movs	r3, #57	; 0x39
 80040c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80040cc:	2329      	movs	r3, #41	; 0x29
 80040ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80040d2:	231e      	movs	r3, #30
 80040d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80040de:	893b      	ldrh	r3, [r7, #8]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80040e4:	2310      	movs	r3, #16
 80040e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f103 001c 	add.w	r0, r3, #28
 80040fc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004100:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004104:	2301      	movs	r3, #1
 8004106:	f000 fa2a 	bl	800455e <lis2mdl_write_reg>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e0e9      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f103 001c 	add.w	r0, r3, #28
 800411c:	f107 021f 	add.w	r2, r7, #31
 8004120:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004124:	2301      	movs	r3, #1
 8004126:	f000 fa1a 	bl	800455e <lis2mdl_write_reg>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	e0d9      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 001c 	add.w	r0, r3, #28
 800413c:	f107 020b 	add.w	r2, r7, #11
 8004140:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004144:	2301      	movs	r3, #1
 8004146:	f000 fa0a 	bl	800455e <lis2mdl_write_reg>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	e0c9      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f103 001c 	add.w	r0, r3, #28
 800415c:	f107 021d 	add.w	r2, r7, #29
 8004160:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004164:	2301      	movs	r3, #1
 8004166:	f000 f9fa 	bl	800455e <lis2mdl_write_reg>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
 8004174:	e0b9      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f103 001c 	add.w	r0, r3, #28
 800417c:	f107 021e 	add.w	r2, r7, #30
 8004180:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004184:	2301      	movs	r3, #1
 8004186:	f000 f9ea 	bl	800455e <lis2mdl_write_reg>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	e0a9      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f103 001c 	add.w	r0, r3, #28
 800419c:	f107 0220 	add.w	r2, r7, #32
 80041a0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80041a4:	2301      	movs	r3, #1
 80041a6:	f000 f9da 	bl	800455e <lis2mdl_write_reg>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	e099      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f103 001c 	add.w	r0, r3, #28
 80041bc:	f107 021c 	add.w	r2, r7, #28
 80041c0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80041c4:	2301      	movs	r3, #1
 80041c6:	f000 f9b2 	bl	800452e <lis2mdl_read_reg>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	e089      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80041d6:	7f3b      	ldrb	r3, [r7, #28]
 80041d8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80041dc:	429a      	cmp	r2, r3
 80041de:	d102      	bne.n	80041e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80041e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041e4:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f103 001c 	add.w	r0, r3, #28
 80041ec:	f107 021c 	add.w	r2, r7, #28
 80041f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80041f4:	2301      	movs	r3, #1
 80041f6:	f000 f9b2 	bl	800455e <lis2mdl_write_reg>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	e071      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f103 001c 	add.w	r0, r3, #28
 800420c:	f107 0214 	add.w	r2, r7, #20
 8004210:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004214:	2306      	movs	r3, #6
 8004216:	f000 f98a 	bl	800452e <lis2mdl_read_reg>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	e061      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f103 001c 	add.w	r0, r3, #28
 800422c:	f107 021b 	add.w	r2, r7, #27
 8004230:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004234:	2301      	movs	r3, #1
 8004236:	f000 f97a 	bl	800452e <lis2mdl_read_reg>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	e051      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004246:	7efa      	ldrb	r2, [r7, #27]
 8004248:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800424c:	4013      	ands	r3, r2
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004254:	429a      	cmp	r2, r3
 8004256:	d1e6      	bne.n	8004226 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f103 001c 	add.w	r0, r3, #28
 800425e:	f107 021b 	add.w	r2, r7, #27
 8004262:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004266:	2301      	movs	r3, #1
 8004268:	f000 f961 	bl	800452e <lis2mdl_read_reg>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e038      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004278:	7efa      	ldrb	r2, [r7, #27]
 800427a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800427e:	4013      	ands	r3, r2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004286:	429a      	cmp	r2, r3
 8004288:	d1e6      	bne.n	8004258 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f103 001c 	add.w	r0, r3, #28
 8004290:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004294:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004298:	2301      	movs	r3, #1
 800429a:	f000 f960 	bl	800455e <lis2mdl_write_reg>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	e01f      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f103 001c 	add.w	r0, r3, #28
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	f000 f939 	bl	800452e <lis2mdl_read_reg>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	e010      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f103 001c 	add.w	r0, r3, #28
 80042ce:	f107 0220 	add.w	r2, r7, #32
 80042d2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80042d6:	2301      	movs	r3, #1
 80042d8:	f000 f941 	bl	800455e <lis2mdl_write_reg>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e000      	b.n	80042ea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	461a      	mov	r2, r3
 80042fe:	460b      	mov	r3, r1
 8004300:	72fb      	strb	r3, [r7, #11]
 8004302:	4613      	mov	r3, r2
 8004304:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004318:	233c      	movs	r3, #60	; 0x3c
 800431a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800431c:	2315      	movs	r3, #21
 800431e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004322:	2316      	movs	r3, #22
 8004324:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004328:	2317      	movs	r3, #23
 800432a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004332:	2314      	movs	r3, #20
 8004334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004338:	2344      	movs	r3, #68	; 0x44
 800433a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 800433c:	2339      	movs	r3, #57	; 0x39
 800433e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004348:	2329      	movs	r3, #41	; 0x29
 800434a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800434e:	231e      	movs	r3, #30
 8004350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800435a:	2310      	movs	r3, #16
 800435c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004366:	2340      	movs	r3, #64	; 0x40
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 800436c:	230e      	movs	r3, #14
 800436e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f103 001c 	add.w	r0, r3, #28
 8004378:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800437c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004380:	2301      	movs	r3, #1
 8004382:	f000 f8ec 	bl	800455e <lis2mdl_write_reg>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
 8004390:	e0c9      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f103 001c 	add.w	r0, r3, #28
 8004398:	f107 021f 	add.w	r2, r7, #31
 800439c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80043a0:	2301      	movs	r3, #1
 80043a2:	f000 f8dc 	bl	800455e <lis2mdl_write_reg>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	e0b9      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f103 001c 	add.w	r0, r3, #28
 80043b8:	f107 020b 	add.w	r2, r7, #11
 80043bc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80043c0:	2301      	movs	r3, #1
 80043c2:	f000 f8cc 	bl	800455e <lis2mdl_write_reg>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	e0a9      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 001c 	add.w	r0, r3, #28
 80043d8:	f107 021e 	add.w	r2, r7, #30
 80043dc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80043e0:	2301      	movs	r3, #1
 80043e2:	f000 f8bc 	bl	800455e <lis2mdl_write_reg>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	e099      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f103 001c 	add.w	r0, r3, #28
 80043f8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80043fc:	2301      	movs	r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	f000 f8ad 	bl	800455e <lis2mdl_write_reg>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e08a      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f103 001c 	add.w	r0, r3, #28
 8004416:	f107 021d 	add.w	r2, r7, #29
 800441a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800441e:	2301      	movs	r3, #1
 8004420:	f000 f89d 	bl	800455e <lis2mdl_write_reg>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e07a      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f103 001c 	add.w	r0, r3, #28
 8004436:	f107 0220 	add.w	r2, r7, #32
 800443a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800443e:	2301      	movs	r3, #1
 8004440:	f000 f88d 	bl	800455e <lis2mdl_write_reg>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e06a      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f103 001c 	add.w	r0, r3, #28
 8004456:	f107 021c 	add.w	r2, r7, #28
 800445a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800445e:	2301      	movs	r3, #1
 8004460:	f000 f865 	bl	800452e <lis2mdl_read_reg>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	e05a      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004470:	7f3b      	ldrb	r3, [r7, #28]
 8004472:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004476:	429a      	cmp	r2, r3
 8004478:	d102      	bne.n	8004480 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800447a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800447e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f103 001c 	add.w	r0, r3, #28
 8004486:	f107 021c 	add.w	r2, r7, #28
 800448a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800448e:	2301      	movs	r3, #1
 8004490:	f000 f865 	bl	800455e <lis2mdl_write_reg>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	e042      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f103 001c 	add.w	r0, r3, #28
 80044a6:	f107 0214 	add.w	r2, r7, #20
 80044aa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80044ae:	2306      	movs	r3, #6
 80044b0:	f000 f83d 	bl	800452e <lis2mdl_read_reg>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	e032      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f103 001c 	add.w	r0, r3, #28
 80044c6:	f107 021b 	add.w	r2, r7, #27
 80044ca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80044ce:	2301      	movs	r3, #1
 80044d0:	f000 f82d 	bl	800452e <lis2mdl_read_reg>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	e022      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80044e0:	7efa      	ldrb	r2, [r7, #27]
 80044e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044e6:	4013      	ands	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d1e6      	bne.n	80044c0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f103 001c 	add.w	r0, r3, #28
 80044f8:	f107 021b 	add.w	r2, r7, #27
 80044fc:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004500:	2301      	movs	r3, #1
 8004502:	f000 f814 	bl	800452e <lis2mdl_read_reg>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	e009      	b.n	8004526 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004512:	7efa      	ldrb	r2, [r7, #27]
 8004514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004518:	4013      	ands	r3, r2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004520:	429a      	cmp	r2, r3
 8004522:	d1e6      	bne.n	80044f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3730      	adds	r7, #48	; 0x30
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800452e:	b590      	push	{r4, r7, lr}
 8004530:	b087      	sub	sp, #28
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	461a      	mov	r2, r3
 800453a:	460b      	mov	r3, r1
 800453c:	72fb      	strb	r3, [r7, #11]
 800453e:	4613      	mov	r3, r2
 8004540:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685c      	ldr	r4, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6898      	ldr	r0, [r3, #8]
 800454a:	893b      	ldrh	r3, [r7, #8]
 800454c:	7af9      	ldrb	r1, [r7, #11]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	47a0      	blx	r4
 8004552:	6178      	str	r0, [r7, #20]

  return ret;
 8004554:	697b      	ldr	r3, [r7, #20]
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}

0800455e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800455e:	b590      	push	{r4, r7, lr}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	461a      	mov	r2, r3
 800456a:	460b      	mov	r3, r1
 800456c:	72fb      	strb	r3, [r7, #11]
 800456e:	4613      	mov	r3, r2
 8004570:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681c      	ldr	r4, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6898      	ldr	r0, [r3, #8]
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	7af9      	ldrb	r1, [r7, #11]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	47a0      	blx	r4
 8004582:	6178      	str	r0, [r7, #20]

  return ret;
 8004584:	697b      	ldr	r3, [r7, #20]
}
 8004586:	4618      	mov	r0, r3
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd90      	pop	{r4, r7, pc}

0800458e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800459a:	f107 0208 	add.w	r2, r7, #8
 800459e:	2301      	movs	r3, #1
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ffc3 	bl	800452e <lis2mdl_read_reg>
 80045a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	7a3b      	ldrb	r3, [r7, #8]
 80045ba:	f362 0301 	bfi	r3, r2, #0, #2
 80045be:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80045c0:	f107 0208 	add.w	r2, r7, #8
 80045c4:	2301      	movs	r3, #1
 80045c6:	2160      	movs	r1, #96	; 0x60
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffc8 	bl	800455e <lis2mdl_write_reg>
 80045ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80045e6:	f107 0208 	add.w	r2, r7, #8
 80045ea:	2301      	movs	r3, #1
 80045ec:	2160      	movs	r1, #96	; 0x60
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff9d 	bl	800452e <lis2mdl_read_reg>
 80045f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10f      	bne.n	800461c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	b2da      	uxtb	r2, r3
 8004604:	7a3b      	ldrb	r3, [r7, #8]
 8004606:	f362 0383 	bfi	r3, r2, #2, #2
 800460a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800460c:	f107 0208 	add.w	r2, r7, #8
 8004610:	2301      	movs	r3, #1
 8004612:	2160      	movs	r1, #96	; 0x60
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ffa2 	bl	800455e <lis2mdl_write_reg>
 800461a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800461c:	68fb      	ldr	r3, [r7, #12]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004632:	f107 0208 	add.w	r2, r7, #8
 8004636:	2301      	movs	r3, #1
 8004638:	2160      	movs	r1, #96	; 0x60
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ff77 	bl	800452e <lis2mdl_read_reg>
 8004640:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004642:	7a3b      	ldrb	r3, [r7, #8]
 8004644:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d81a      	bhi.n	8004684 <lis2mdl_data_rate_get+0x5c>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <lis2mdl_data_rate_get+0x2c>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	0800466d 	.word	0x0800466d
 800465c:	08004675 	.word	0x08004675
 8004660:	0800467d 	.word	0x0800467d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
      break;
 800466a:	e00f      	b.n	800468c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
      break;
 8004672:	e00b      	b.n	800468c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2202      	movs	r2, #2
 8004678:	701a      	strb	r2, [r3, #0]
      break;
 800467a:	e007      	b.n	800468c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2203      	movs	r2, #3
 8004680:	701a      	strb	r2, [r3, #0]
      break;
 8004682:	e003      	b.n	800468c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
      break;
 800468a:	bf00      	nop
  }

  return ret;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop

08004698 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80046a4:	f107 0208 	add.w	r2, r7, #8
 80046a8:	2301      	movs	r3, #1
 80046aa:	2162      	movs	r1, #98	; 0x62
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff3e 	bl	800452e <lis2mdl_read_reg>
 80046b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	7a3b      	ldrb	r3, [r7, #8]
 80046c4:	f362 1304 	bfi	r3, r2, #4, #1
 80046c8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80046ca:	f107 0208 	add.w	r2, r7, #8
 80046ce:	2301      	movs	r3, #1
 80046d0:	2162      	movs	r1, #98	; 0x62
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff43 	bl	800455e <lis2mdl_write_reg>
 80046d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046da:	68fb      	ldr	r3, [r7, #12]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80046ee:	f107 020c 	add.w	r2, r7, #12
 80046f2:	2306      	movs	r3, #6
 80046f4:	2168      	movs	r1, #104	; 0x68
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff19 	bl	800452e <lis2mdl_read_reg>
 80046fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80046fe:	7b7b      	ldrb	r3, [r7, #13]
 8004700:	b21a      	sxth	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470c:	b29b      	uxth	r3, r3
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	b29a      	uxth	r2, r3
 8004712:	7b3b      	ldrb	r3, [r7, #12]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4413      	add	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	b21a      	sxth	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	3302      	adds	r3, #2
 8004726:	b212      	sxth	r2, r2
 8004728:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	3302      	adds	r3, #2
 800472e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004732:	b29b      	uxth	r3, r3
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b29a      	uxth	r2, r3
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	b29b      	uxth	r3, r3
 800473c:	4413      	add	r3, r2
 800473e:	b29a      	uxth	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	3302      	adds	r3, #2
 8004744:	b212      	sxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004748:	7c7a      	ldrb	r2, [r7, #17]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	3304      	adds	r3, #4
 800474e:	b212      	sxth	r2, r2
 8004750:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800475a:	b29b      	uxth	r3, r3
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	b29a      	uxth	r2, r3
 8004760:	7c3b      	ldrb	r3, [r7, #16]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4413      	add	r3, r2
 8004766:	b29a      	uxth	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	3304      	adds	r3, #4
 800476c:	b212      	sxth	r2, r2
 800476e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004770:	697b      	ldr	r3, [r7, #20]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004784:	2301      	movs	r3, #1
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	214f      	movs	r1, #79	; 0x4f
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fecf 	bl	800452e <lis2mdl_read_reg>
 8004790:	60f8      	str	r0, [r7, #12]

  return ret;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80047a8:	f107 0208 	add.w	r2, r7, #8
 80047ac:	2301      	movs	r3, #1
 80047ae:	2162      	movs	r1, #98	; 0x62
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff febc 	bl	800452e <lis2mdl_read_reg>
 80047b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	7a3b      	ldrb	r3, [r7, #8]
 80047c8:	f362 0341 	bfi	r3, r2, #1, #1
 80047cc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	2301      	movs	r3, #1
 80047d4:	2162      	movs	r1, #98	; 0x62
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fec1 	bl	800455e <lis2mdl_write_reg>
 80047dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80047f4:	f107 0208 	add.w	r2, r7, #8
 80047f8:	2301      	movs	r3, #1
 80047fa:	2162      	movs	r1, #98	; 0x62
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fe96 	bl	800452e <lis2mdl_read_reg>
 8004802:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	b2da      	uxtb	r2, r3
 8004812:	7a3b      	ldrb	r3, [r7, #8]
 8004814:	f362 1345 	bfi	r3, r2, #5, #1
 8004818:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800481a:	f107 0208 	add.w	r2, r7, #8
 800481e:	2301      	movs	r3, #1
 8004820:	2162      	movs	r1, #98	; 0x62
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fe9b 	bl	800455e <lis2mdl_write_reg>
 8004828:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e04d      	b.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	7b1a      	ldrb	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <LSM6DSO_RegisterBusIO+0xc4>)
 800488c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <LSM6DSO_RegisterBusIO+0xc8>)
 8004892:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e020      	b.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4798      	blx	r3
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e016      	b.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d112      	bne.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80048d0:	230c      	movs	r3, #12
 80048d2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80048d4:	7afb      	ldrb	r3, [r7, #11]
 80048d6:	461a      	mov	r2, r3
 80048d8:	2112      	movs	r1, #18
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 ff59 	bl	8005792 <LSM6DSO_Write_Reg>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	08005c35 	.word	0x08005c35
 80048fc:	08005c6b 	.word	0x08005c6b

08004900 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	331c      	adds	r3, #28
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fe97 	bl	8006642 <lsm6dso_i3c_disable_set>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	e060      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	331c      	adds	r3, #28
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fe65 	bl	80065f6 <lsm6dso_auto_increment_set>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e054      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	331c      	adds	r3, #28
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fd66 	bl	8006410 <lsm6dso_block_data_update_set>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	e048      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	331c      	adds	r3, #28
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f001 feb9 	bl	80066ce <lsm6dso_fifo_mode_set>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	e03c      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2204      	movs	r2, #4
 800496c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	331c      	adds	r3, #28
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f001 fa20 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e02c      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	331c      	adds	r3, #28
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f9b6 	bl	8005d00 <lsm6dso_xl_full_scale_set>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e020      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2204      	movs	r2, #4
 80049a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	331c      	adds	r3, #28
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fbd0 	bl	8006154 <lsm6dso_gy_data_rate_set>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	e010      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	331c      	adds	r3, #28
 80049c4:	2106      	movs	r1, #6
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fb5c 	bl	8006084 <lsm6dso_gy_full_scale_set>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	e004      	b.n	80049e2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f888 	bl	8004b08 <LSM6DSO_ACC_Disable>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	e015      	b.n	8004a30 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fc2e 	bl	8005266 <LSM6DSO_GYRO_Disable>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295
 8004a14:	e00c      	b.n	8004a30 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	331c      	adds	r3, #28
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fdc3 	bl	80065d4 <lsm6dso_device_id_get>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	e000      	b.n	8004a5c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a8c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2210      	movs	r2, #16
 8004a92:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <LSM6DSO_GetCapabilities+0x58>)
 8004a9e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4a06      	ldr	r2, [pc, #24]	; (8004abc <LSM6DSO_GetCapabilities+0x58>)
 8004aa4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	45d02000 	.word	0x45d02000

08004ac0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e014      	b.n	8004b00 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 021c 	add.w	r2, r3, #28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f001 f969 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	e004      	b.n	8004b00 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e01f      	b.n	8004b5e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f103 021c 	add.w	r2, r3, #28
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	332b      	adds	r3, #43	; 0x2b
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f001 fa42 	bl	8005fb4 <lsm6dso_xl_data_rate_get>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e010      	b.n	8004b5e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	331c      	adds	r3, #28
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f93a 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e004      	b.n	8004b5e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	331c      	adds	r3, #28
 8004b7a:	f107 020b 	add.w	r2, r7, #11
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f8e3 	bl	8005d4c <lsm6dso_xl_full_scale_get>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	e023      	b.n	8004bda <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d81b      	bhi.n	8004bd0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc1 	.word	0x08004bc1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004bb4:	601a      	str	r2, [r3, #0]
      break;
 8004bb6:	e00f      	b.n	8004bd8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004bbc:	601a      	str	r2, [r3, #0]
      break;
 8004bbe:	e00b      	b.n	8004bd8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004bc4:	601a      	str	r2, [r3, #0]
      break;
 8004bc6:	e007      	b.n	8004bd8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004bcc:	601a      	str	r2, [r3, #0]
      break;
 8004bce:	e003      	b.n	8004bd8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	60fb      	str	r3, [r7, #12]
      break;
 8004bd6:	bf00      	nop
  }

  return ret;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	3d79db23 	.word	0x3d79db23
 8004be8:	3df9db23 	.word	0x3df9db23
 8004bec:	3e79db23 	.word	0x3e79db23
 8004bf0:	3ef9db23 	.word	0x3ef9db23

08004bf4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	331c      	adds	r3, #28
 8004c06:	f107 020b 	add.w	r2, r7, #11
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 f9d1 	bl	8005fb4 <lsm6dso_xl_data_rate_get>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	e054      	b.n	8004cc8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	d84c      	bhi.n	8004cbe <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c6f 	.word	0x08004c6f
 8004c34:	08004c77 	.word	0x08004c77
 8004c38:	08004c7f 	.word	0x08004c7f
 8004c3c:	08004c87 	.word	0x08004c87
 8004c40:	08004c8f 	.word	0x08004c8f
 8004c44:	08004c97 	.word	0x08004c97
 8004c48:	08004c9f 	.word	0x08004c9f
 8004c4c:	08004ca7 	.word	0x08004ca7
 8004c50:	08004caf 	.word	0x08004caf
 8004c54:	08004cb7 	.word	0x08004cb7
 8004c58:	08004c67 	.word	0x08004c67
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
      break;
 8004c64:	e02f      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8004c6a:	601a      	str	r2, [r3, #0]
      break;
 8004c6c:	e02b      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8004c72:	601a      	str	r2, [r3, #0]
      break;
 8004c74:	e027      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8004c7a:	601a      	str	r2, [r3, #0]
      break;
 8004c7c:	e023      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8004c82:	601a      	str	r2, [r3, #0]
      break;
 8004c84:	e01f      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8004c8a:	601a      	str	r2, [r3, #0]
      break;
 8004c8c:	e01b      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8004c92:	601a      	str	r2, [r3, #0]
      break;
 8004c94:	e017      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8004c9a:	601a      	str	r2, [r3, #0]
      break;
 8004c9c:	e013      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	4a12      	ldr	r2, [pc, #72]	; (8004cec <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004ca2:	601a      	str	r2, [r3, #0]
      break;
 8004ca4:	e00f      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8004caa:	601a      	str	r2, [r3, #0]
      break;
 8004cac:	e00b      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004cb2:	601a      	str	r2, [r3, #0]
      break;
 8004cb4:	e007      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8004cba:	601a      	str	r2, [r3, #0]
      break;
 8004cbc:	e003      	b.n	8004cc6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	60fb      	str	r3, [r7, #12]
      break;
 8004cc4:	bf00      	nop
  }

  return ret;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	3fcccccd 	.word	0x3fcccccd
 8004cd4:	41480000 	.word	0x41480000
 8004cd8:	41d00000 	.word	0x41d00000
 8004cdc:	42500000 	.word	0x42500000
 8004ce0:	42d00000 	.word	0x42d00000
 8004ce4:	43500000 	.word	0x43500000
 8004ce8:	43d08000 	.word	0x43d08000
 8004cec:	44504000 	.word	0x44504000
 8004cf0:	44d06000 	.word	0x44d06000
 8004cf4:	45505000 	.word	0x45505000
 8004cf8:	45d05800 	.word	0x45d05800

08004cfc <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004d08:	2100      	movs	r1, #0
 8004d0a:	ed97 0a00 	vldr	s0, [r7]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f806 	bl	8004d20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	f000 80ea 	beq.w	8004f14 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	f300 8163 	bgt.w	800500c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d074      	beq.n	8004e38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004d4e:	e15d      	b.n	800500c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f103 001c 	add.w	r0, r3, #28
 8004d56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	2114      	movs	r1, #20
 8004d5e:	f000 ff9f 	bl	8005ca0 <lsm6dso_read_reg>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	e16c      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d025      	beq.n	8004dc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10b      	bne.n	8004d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	331c      	adds	r3, #28
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 f815 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	e154      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004da2:	f36f 13c7 	bfc	r3, #7, #1
 8004da6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f103 001c 	add.w	r0, r3, #28
 8004db0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004db4:	2301      	movs	r3, #1
 8004db6:	2114      	movs	r1, #20
 8004db8:	f000 ff8a 	bl	8005cd0 <lsm6dso_write_reg>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e13f      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f103 001c 	add.w	r0, r3, #28
 8004dce:	f107 0220 	add.w	r2, r7, #32
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	2115      	movs	r1, #21
 8004dd6:	f000 ff63 	bl	8005ca0 <lsm6dso_read_reg>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	e130      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d014      	beq.n	8004e1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004df8:	f36f 1304 	bfc	r3, #4, #1
 8004dfc:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f103 001c 	add.w	r0, r3, #28
 8004e06:	f107 0220 	add.w	r2, r7, #32
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	2115      	movs	r1, #21
 8004e0e:	f000 ff5f 	bl	8005cd0 <lsm6dso_write_reg>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	e114      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004e1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004e22:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	d400      	bmi.n	8004e32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004e30:	e0f0      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004e32:	4b87      	ldr	r3, [pc, #540]	; (8005050 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	e0ed      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f103 001c 	add.w	r0, r3, #28
 8004e3e:	f107 021c 	add.w	r2, r7, #28
 8004e42:	2301      	movs	r3, #1
 8004e44:	2114      	movs	r1, #20
 8004e46:	f000 ff2b 	bl	8005ca0 <lsm6dso_read_reg>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	e0f8      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004e56:	7f3b      	ldrb	r3, [r7, #28]
 8004e58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d023      	beq.n	8004eaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10b      	bne.n	8004e84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	331c      	adds	r3, #28
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 ffa2 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	e0e1      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004e84:	7f3b      	ldrb	r3, [r7, #28]
 8004e86:	f36f 13c7 	bfc	r3, #7, #1
 8004e8a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 001c 	add.w	r0, r3, #28
 8004e92:	f107 021c 	add.w	r2, r7, #28
 8004e96:	2301      	movs	r3, #1
 8004e98:	2114      	movs	r1, #20
 8004e9a:	f000 ff19 	bl	8005cd0 <lsm6dso_write_reg>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea8:	e0ce      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f103 001c 	add.w	r0, r3, #28
 8004eb0:	f107 0218 	add.w	r2, r7, #24
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	2115      	movs	r1, #21
 8004eb8:	f000 fef2 	bl	8005ca0 <lsm6dso_read_reg>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	e0bf      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004ec8:	7e3b      	ldrb	r3, [r7, #24]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d112      	bne.n	8004efa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004ed4:	7e3b      	ldrb	r3, [r7, #24]
 8004ed6:	f043 0310 	orr.w	r3, r3, #16
 8004eda:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f103 001c 	add.w	r0, r3, #28
 8004ee2:	f107 0218 	add.w	r2, r7, #24
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	2115      	movs	r1, #21
 8004eea:	f000 fef1 	bl	8005cd0 <lsm6dso_write_reg>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	e0a6      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004efa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004efe:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005054 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	dc00      	bgt.n	8004f0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004f0c:	e082      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004f0e:	4b52      	ldr	r3, [pc, #328]	; (8005058 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	e07f      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f103 001c 	add.w	r0, r3, #28
 8004f1a:	f107 0210 	add.w	r2, r7, #16
 8004f1e:	2301      	movs	r3, #1
 8004f20:	2115      	movs	r1, #21
 8004f22:	f000 febd 	bl	8005ca0 <lsm6dso_read_reg>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	e08a      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004f32:	7c3b      	ldrb	r3, [r7, #16]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d012      	beq.n	8004f64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004f3e:	7c3b      	ldrb	r3, [r7, #16]
 8004f40:	f36f 1304 	bfc	r3, #4, #1
 8004f44:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f103 001c 	add.w	r0, r3, #28
 8004f4c:	f107 0210 	add.w	r2, r7, #16
 8004f50:	2301      	movs	r3, #1
 8004f52:	2115      	movs	r1, #21
 8004f54:	f000 febc 	bl	8005cd0 <lsm6dso_write_reg>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	e071      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d108      	bne.n	8004f80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f979 	bl	8005266 <LSM6DSO_GYRO_Disable>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	e063      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f103 001c 	add.w	r0, r3, #28
 8004f86:	f107 0214 	add.w	r2, r7, #20
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	2114      	movs	r1, #20
 8004f8e:	f000 fe87 	bl	8005ca0 <lsm6dso_read_reg>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	e054      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004f9e:	7d3b      	ldrb	r3, [r7, #20]
 8004fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d123      	bne.n	8004ff2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d10b      	bne.n	8004fcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	331c      	adds	r3, #28
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fefe 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	e03d      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004fcc:	7d3b      	ldrb	r3, [r7, #20]
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f103 001c 	add.w	r0, r3, #28
 8004fda:	f107 0214 	add.w	r2, r7, #20
 8004fde:	2301      	movs	r3, #1
 8004fe0:	2114      	movs	r1, #20
 8004fe2:	f000 fe75 	bl	8005cd0 <lsm6dso_write_reg>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff0:	e02a      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004ff2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ff6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005054 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	dc00      	bgt.n	8005006 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005004:	e006      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
 800500a:	e003      	b.n	8005014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005012:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d102      	bne.n	8005022 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	e012      	b.n	8005048 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800502c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fbc9 	bl	80057c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005036:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005038:	e005      	b.n	8005046 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800503a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fc5a 	bl	80058f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005044:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	; 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	41480000 	.word	0x41480000
 8005054:	43500000 	.word	0x43500000
 8005058:	43500000 	.word	0x43500000

0800505c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	331c      	adds	r3, #28
 800506e:	f107 020b 	add.w	r2, r7, #11
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fe69 	bl	8005d4c <lsm6dso_xl_full_scale_get>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
 8005084:	e023      	b.n	80050ce <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d81b      	bhi.n	80050c4 <LSM6DSO_ACC_GetFullScale+0x68>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <LSM6DSO_ACC_GetFullScale+0x38>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050ad 	.word	0x080050ad
 80050a0:	080050b5 	.word	0x080050b5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2202      	movs	r2, #2
 80050a8:	601a      	str	r2, [r3, #0]
      break;
 80050aa:	e00f      	b.n	80050cc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2204      	movs	r2, #4
 80050b0:	601a      	str	r2, [r3, #0]
      break;
 80050b2:	e00b      	b.n	80050cc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2208      	movs	r2, #8
 80050b8:	601a      	str	r2, [r3, #0]
      break;
 80050ba:	e007      	b.n	80050cc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2210      	movs	r2, #16
 80050c0:	601a      	str	r2, [r3, #0]
      break;
 80050c2:	e003      	b.n	80050cc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	60fb      	str	r3, [r7, #12]
      break;
 80050ca:	bf00      	nop
  }

  return ret;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	dd0b      	ble.n	8005100 <LSM6DSO_ACC_SetFullScale+0x28>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	dd06      	ble.n	80050fc <LSM6DSO_ACC_SetFullScale+0x24>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	dc01      	bgt.n	80050f8 <LSM6DSO_ACC_SetFullScale+0x20>
 80050f4:	2303      	movs	r3, #3
 80050f6:	e004      	b.n	8005102 <LSM6DSO_ACC_SetFullScale+0x2a>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e002      	b.n	8005102 <LSM6DSO_ACC_SetFullScale+0x2a>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e000      	b.n	8005102 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005100:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005102:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	331c      	adds	r3, #28
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fdf7 	bl	8005d00 <lsm6dso_xl_full_scale_set>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	e000      	b.n	8005120 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	331c      	adds	r3, #28
 8005136:	f107 0208 	add.w	r2, r7, #8
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f9d8 	bl	80064f2 <lsm6dso_acceleration_raw_get>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	e00c      	b.n	8005168 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800514e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005156:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800515e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	331c      	adds	r3, #28
 8005184:	f107 0210 	add.w	r2, r7, #16
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f9b1 	bl	80064f2 <lsm6dso_acceleration_raw_get>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	e03c      	b.n	8005216 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fce0 	bl	8004b68 <LSM6DSO_ACC_GetSensitivity>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e030      	b.n	8005216 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80051b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051cc:	ee17 2a90 	vmov	r2, s15
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80051d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ec:	ee17 2a90 	vmov	r2, s15
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80051f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005200:	edd7 7a03 	vldr	s15, [r7, #12]
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 2a90 	vmov	r2, s15
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e014      	b.n	800525e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 021c 	add.w	r2, r3, #28
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 ff86 	bl	8006154 <lsm6dso_gy_data_rate_set>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	e004      	b.n	800525e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e01f      	b.n	80052bc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 021c 	add.w	r2, r3, #28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	332c      	adds	r3, #44	; 0x2c
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f001 f85f 	bl	800634c <lsm6dso_gy_data_rate_get>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e010      	b.n	80052bc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	331c      	adds	r3, #28
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 ff57 	bl	8006154 <lsm6dso_gy_data_rate_set>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	e004      	b.n	80052bc <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	331c      	adds	r3, #28
 80052d6:	f107 020b 	add.w	r2, r7, #11
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fef7 	bl	80060d0 <lsm6dso_gy_full_scale_get>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ec:	e02d      	b.n	800534a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d825      	bhi.n	8005340 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005319 	.word	0x08005319
 8005304:	08005329 	.word	0x08005329
 8005308:	08005341 	.word	0x08005341
 800530c:	08005331 	.word	0x08005331
 8005310:	08005341 	.word	0x08005341
 8005314:	08005339 	.word	0x08005339
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800531c:	601a      	str	r2, [r3, #0]
      break;
 800531e:	e013      	b.n	8005348 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005324:	601a      	str	r2, [r3, #0]
      break;
 8005326:	e00f      	b.n	8005348 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4a0c      	ldr	r2, [pc, #48]	; (800535c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800532c:	601a      	str	r2, [r3, #0]
      break;
 800532e:	e00b      	b.n	8005348 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4a0b      	ldr	r2, [pc, #44]	; (8005360 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005334:	601a      	str	r2, [r3, #0]
      break;
 8005336:	e007      	b.n	8005348 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800533c:	601a      	str	r2, [r3, #0]
      break;
 800533e:	e003      	b.n	8005348 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005340:	f04f 33ff 	mov.w	r3, #4294967295
 8005344:	60fb      	str	r3, [r7, #12]
      break;
 8005346:	bf00      	nop
  }

  return ret;
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	408c0000 	.word	0x408c0000
 8005358:	410c0000 	.word	0x410c0000
 800535c:	418c0000 	.word	0x418c0000
 8005360:	420c0000 	.word	0x420c0000
 8005364:	428c0000 	.word	0x428c0000

08005368 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	331c      	adds	r3, #28
 800537a:	f107 020b 	add.w	r2, r7, #11
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f000 ffe3 	bl	800634c <lsm6dso_gy_data_rate_get>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	e04e      	b.n	8005430 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	2b0a      	cmp	r3, #10
 8005396:	d846      	bhi.n	8005426 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053e7 	.word	0x080053e7
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053f7 	.word	0x080053f7
 80053b8:	080053ff 	.word	0x080053ff
 80053bc:	08005407 	.word	0x08005407
 80053c0:	0800540f 	.word	0x0800540f
 80053c4:	08005417 	.word	0x08005417
 80053c8:	0800541f 	.word	0x0800541f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
      break;
 80053d4:	e02b      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	4a17      	ldr	r2, [pc, #92]	; (8005438 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80053da:	601a      	str	r2, [r3, #0]
      break;
 80053dc:	e027      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80053e2:	601a      	str	r2, [r3, #0]
      break;
 80053e4:	e023      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4a15      	ldr	r2, [pc, #84]	; (8005440 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80053ea:	601a      	str	r2, [r3, #0]
      break;
 80053ec:	e01f      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80053f2:	601a      	str	r2, [r3, #0]
      break;
 80053f4:	e01b      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80053fa:	601a      	str	r2, [r3, #0]
      break;
 80053fc:	e017      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	4a12      	ldr	r2, [pc, #72]	; (800544c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005402:	601a      	str	r2, [r3, #0]
      break;
 8005404:	e013      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800540a:	601a      	str	r2, [r3, #0]
      break;
 800540c:	e00f      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	4a10      	ldr	r2, [pc, #64]	; (8005454 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005412:	601a      	str	r2, [r3, #0]
      break;
 8005414:	e00b      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	4a0f      	ldr	r2, [pc, #60]	; (8005458 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800541a:	601a      	str	r2, [r3, #0]
      break;
 800541c:	e007      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	4a0e      	ldr	r2, [pc, #56]	; (800545c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005422:	601a      	str	r2, [r3, #0]
      break;
 8005424:	e003      	b.n	800542e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	60fb      	str	r3, [r7, #12]
      break;
 800542c:	bf00      	nop
  }

  return ret;
 800542e:	68fb      	ldr	r3, [r7, #12]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	41480000 	.word	0x41480000
 800543c:	41d00000 	.word	0x41d00000
 8005440:	42500000 	.word	0x42500000
 8005444:	42d00000 	.word	0x42d00000
 8005448:	43500000 	.word	0x43500000
 800544c:	43d08000 	.word	0x43d08000
 8005450:	44504000 	.word	0x44504000
 8005454:	44d06000 	.word	0x44d06000
 8005458:	45505000 	.word	0x45505000
 800545c:	45d05800 	.word	0x45d05800

08005460 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800546c:	2100      	movs	r1, #0
 800546e:	ed97 0a00 	vldr	s0, [r7]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f806 	bl	8005484 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005490:	460b      	mov	r3, r1
 8005492:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d028      	beq.n	80054f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80054a6:	e05c      	b.n	8005562 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f103 001c 	add.w	r0, r3, #28
 80054ae:	f107 0214 	add.w	r2, r7, #20
 80054b2:	2301      	movs	r3, #1
 80054b4:	2116      	movs	r1, #22
 80054b6:	f000 fbf3 	bl	8005ca0 <lsm6dso_read_reg>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	e06c      	b.n	80055a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80054c6:	7d3b      	ldrb	r3, [r7, #20]
 80054c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04b      	beq.n	800556a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80054d2:	7d3b      	ldrb	r3, [r7, #20]
 80054d4:	f36f 13c7 	bfc	r3, #7, #1
 80054d8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f103 001c 	add.w	r0, r3, #28
 80054e0:	f107 0214 	add.w	r2, r7, #20
 80054e4:	2301      	movs	r3, #1
 80054e6:	2116      	movs	r1, #22
 80054e8:	f000 fbf2 	bl	8005cd0 <lsm6dso_write_reg>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03b      	beq.n	800556a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	e053      	b.n	80055a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f103 001c 	add.w	r0, r3, #28
 80054fe:	f107 0210 	add.w	r2, r7, #16
 8005502:	2301      	movs	r3, #1
 8005504:	2116      	movs	r1, #22
 8005506:	f000 fbcb 	bl	8005ca0 <lsm6dso_read_reg>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	e044      	b.n	80055a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8005516:	7c3b      	ldrb	r3, [r7, #16]
 8005518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d112      	bne.n	8005548 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005522:	7c3b      	ldrb	r3, [r7, #16]
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f103 001c 	add.w	r0, r3, #28
 8005530:	f107 0210 	add.w	r2, r7, #16
 8005534:	2301      	movs	r3, #1
 8005536:	2116      	movs	r1, #22
 8005538:	f000 fbca 	bl	8005cd0 <lsm6dso_write_reg>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	e02b      	b.n	80055a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005548:	edd7 7a06 	vldr	s15, [r7, #24]
 800554c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80055a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005558:	dc00      	bgt.n	800555c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800555a:	e007      	b.n	800556c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e004      	b.n	800556c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	61fb      	str	r3, [r7, #28]
      break;
 8005568:	e000      	b.n	800556c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800556a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d102      	bne.n	800557a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	e012      	b.n	80055a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005584:	ed97 0a06 	vldr	s0, [r7, #24]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fa45 	bl	8005a18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800558e:	61f8      	str	r0, [r7, #28]
 8005590:	e005      	b.n	800559e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005592:	ed97 0a06 	vldr	s0, [r7, #24]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 faca 	bl	8005b30 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800559c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800559e:	69fb      	ldr	r3, [r7, #28]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	43500000 	.word	0x43500000
 80055ac:	43500000 	.word	0x43500000

080055b0 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	331c      	adds	r3, #28
 80055c2:	f107 020b 	add.w	r2, r7, #11
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fd81 	bl	80060d0 <lsm6dso_gy_full_scale_get>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	e030      	b.n	800563c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80055da:	7afb      	ldrb	r3, [r7, #11]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d828      	bhi.n	8005632 <LSM6DSO_GYRO_GetFullScale+0x82>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005605 	.word	0x08005605
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005633 	.word	0x08005633
 80055f8:	0800561f 	.word	0x0800561f
 80055fc:	08005633 	.word	0x08005633
 8005600:	08005629 	.word	0x08005629
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	227d      	movs	r2, #125	; 0x7d
 8005608:	601a      	str	r2, [r3, #0]
      break;
 800560a:	e016      	b.n	800563a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	22fa      	movs	r2, #250	; 0xfa
 8005610:	601a      	str	r2, [r3, #0]
      break;
 8005612:	e012      	b.n	800563a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800561a:	601a      	str	r2, [r3, #0]
      break;
 800561c:	e00d      	b.n	800563a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005624:	601a      	str	r2, [r3, #0]
      break;
 8005626:	e008      	b.n	800563a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800562e:	601a      	str	r2, [r3, #0]
      break;
 8005630:	e003      	b.n	800563a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	60fb      	str	r3, [r7, #12]
      break;
 8005638:	bf00      	nop
  }

  return ret;
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b7d      	cmp	r3, #125	; 0x7d
 8005652:	dd12      	ble.n	800567a <LSM6DSO_GYRO_SetFullScale+0x36>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2bfa      	cmp	r3, #250	; 0xfa
 8005658:	dd0d      	ble.n	8005676 <LSM6DSO_GYRO_SetFullScale+0x32>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005660:	dd07      	ble.n	8005672 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005668:	dc01      	bgt.n	800566e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800566a:	2304      	movs	r3, #4
 800566c:	e006      	b.n	800567c <LSM6DSO_GYRO_SetFullScale+0x38>
 800566e:	2306      	movs	r3, #6
 8005670:	e004      	b.n	800567c <LSM6DSO_GYRO_SetFullScale+0x38>
 8005672:	2302      	movs	r3, #2
 8005674:	e002      	b.n	800567c <LSM6DSO_GYRO_SetFullScale+0x38>
 8005676:	2300      	movs	r3, #0
 8005678:	e000      	b.n	800567c <LSM6DSO_GYRO_SetFullScale+0x38>
 800567a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800567c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	331c      	adds	r3, #28
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fcfc 	bl	8006084 <lsm6dso_gy_full_scale_set>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	e000      	b.n	800569a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	331c      	adds	r3, #28
 80056b0:	f107 0208 	add.w	r2, r7, #8
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fed0 	bl	800645c <lsm6dso_angular_rate_raw_get>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e00c      	b.n	80056e2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80056c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80056d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80056d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	331c      	adds	r3, #28
 80056f8:	f107 0210 	add.w	r2, r7, #16
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 feac 	bl	800645c <lsm6dso_angular_rate_raw_get>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e03c      	b.n	800578a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fdd4 	bl	80052c4 <LSM6DSO_GYRO_GetSensitivity>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	e030      	b.n	800578a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005728:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005734:	edd7 7a03 	vldr	s15, [r7, #12]
 8005738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005740:	ee17 2a90 	vmov	r2, s15
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005754:	edd7 7a03 	vldr	s15, [r7, #12]
 8005758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005760:	ee17 2a90 	vmov	r2, s15
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005768:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005774:	edd7 7a03 	vldr	s15, [r7, #12]
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005780:	ee17 2a90 	vmov	r2, s15
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
 800579e:	4613      	mov	r3, r2
 80057a0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f103 001c 	add.w	r0, r3, #28
 80057a8:	1cba      	adds	r2, r7, #2
 80057aa:	78f9      	ldrb	r1, [r7, #3]
 80057ac:	2301      	movs	r3, #1
 80057ae:	f000 fa8f 	bl	8005cd0 <lsm6dso_write_reg>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	e000      	b.n	80057c0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80057d4:	edd7 7a00 	vldr	s15, [r7]
 80057d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80058d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80057dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e4:	d801      	bhi.n	80057ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80057e6:	230b      	movs	r3, #11
 80057e8:	e063      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80057ea:	edd7 7a00 	vldr	s15, [r7]
 80057ee:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80057f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	d801      	bhi.n	8005800 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e058      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005800:	edd7 7a00 	vldr	s15, [r7]
 8005804:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005810:	d801      	bhi.n	8005816 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005812:	2302      	movs	r3, #2
 8005814:	e04d      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005816:	edd7 7a00 	vldr	s15, [r7]
 800581a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80058dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800581e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005826:	d801      	bhi.n	800582c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005828:	2303      	movs	r3, #3
 800582a:	e042      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800582c:	edd7 7a00 	vldr	s15, [r7]
 8005830:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80058e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	d801      	bhi.n	8005842 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800583e:	2304      	movs	r3, #4
 8005840:	e037      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005842:	edd7 7a00 	vldr	s15, [r7]
 8005846:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80058e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800584a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	d801      	bhi.n	8005858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005854:	2305      	movs	r3, #5
 8005856:	e02c      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005858:	edd7 7a00 	vldr	s15, [r7]
 800585c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80058e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8005860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	d801      	bhi.n	800586e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800586a:	2306      	movs	r3, #6
 800586c:	e021      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800586e:	edd7 7a00 	vldr	s15, [r7]
 8005872:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80058ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8005876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	d801      	bhi.n	8005884 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005880:	2307      	movs	r3, #7
 8005882:	e016      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005884:	edd7 7a00 	vldr	s15, [r7]
 8005888:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80058f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800588c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005894:	d801      	bhi.n	800589a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005896:	2308      	movs	r3, #8
 8005898:	e00b      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800589a:	edd7 7a00 	vldr	s15, [r7]
 800589e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80058f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80058a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	d801      	bhi.n	80058b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80058ac:	2309      	movs	r3, #9
 80058ae:	e000      	b.n	80058b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80058b0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80058b2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	331c      	adds	r3, #28
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa7d 	bl	8005dbc <lsm6dso_xl_data_rate_set>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	e000      	b.n	80058d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	3fcccccd 	.word	0x3fcccccd
 80058dc:	42500000 	.word	0x42500000
 80058e0:	42d00000 	.word	0x42d00000
 80058e4:	43500000 	.word	0x43500000
 80058e8:	43d08000 	.word	0x43d08000
 80058ec:	44504000 	.word	0x44504000
 80058f0:	44d06000 	.word	0x44d06000
 80058f4:	45505000 	.word	0x45505000

080058f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005904:	edd7 7a00 	vldr	s15, [r7]
 8005908:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80059f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 800590c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d801      	bhi.n	800591a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005916:	230b      	movs	r3, #11
 8005918:	e063      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800591a:	edd7 7a00 	vldr	s15, [r7]
 800591e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	d801      	bhi.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800592c:	2301      	movs	r3, #1
 800592e:	e058      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005930:	edd7 7a00 	vldr	s15, [r7]
 8005934:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d801      	bhi.n	8005946 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005942:	2302      	movs	r3, #2
 8005944:	e04d      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005946:	edd7 7a00 	vldr	s15, [r7]
 800594a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80059fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800594e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	d801      	bhi.n	800595c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005958:	2303      	movs	r3, #3
 800595a:	e042      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800595c:	edd7 7a00 	vldr	s15, [r7]
 8005960:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005a00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596c:	d801      	bhi.n	8005972 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800596e:	2304      	movs	r3, #4
 8005970:	e037      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005972:	edd7 7a00 	vldr	s15, [r7]
 8005976:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005a04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800597a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005982:	d801      	bhi.n	8005988 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005984:	2305      	movs	r3, #5
 8005986:	e02c      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005988:	edd7 7a00 	vldr	s15, [r7]
 800598c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005a08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	d801      	bhi.n	800599e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800599a:	2306      	movs	r3, #6
 800599c:	e021      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800599e:	edd7 7a00 	vldr	s15, [r7]
 80059a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005a0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80059a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ae:	d801      	bhi.n	80059b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80059b0:	2307      	movs	r3, #7
 80059b2:	e016      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80059b4:	edd7 7a00 	vldr	s15, [r7]
 80059b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005a10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80059bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	d801      	bhi.n	80059ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80059c6:	2308      	movs	r3, #8
 80059c8:	e00b      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80059ca:	edd7 7a00 	vldr	s15, [r7]
 80059ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005a14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80059d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	d801      	bhi.n	80059e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80059dc:	2309      	movs	r3, #9
 80059de:	e000      	b.n	80059e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80059e0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	3fcccccd 	.word	0x3fcccccd
 80059fc:	42500000 	.word	0x42500000
 8005a00:	42d00000 	.word	0x42d00000
 8005a04:	43500000 	.word	0x43500000
 8005a08:	43d08000 	.word	0x43d08000
 8005a0c:	44504000 	.word	0x44504000
 8005a10:	44d06000 	.word	0x44d06000
 8005a14:	45505000 	.word	0x45505000

08005a18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005a24:	edd7 7a00 	vldr	s15, [r7]
 8005a28:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a34:	d801      	bhi.n	8005a3a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e058      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a3a:	edd7 7a00 	vldr	s15, [r7]
 8005a3e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4a:	d801      	bhi.n	8005a50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e04d      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a50:	edd7 7a00 	vldr	s15, [r7]
 8005a54:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005b14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	d801      	bhi.n	8005a66 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e042      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a66:	edd7 7a00 	vldr	s15, [r7]
 8005a6a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005b18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a76:	d801      	bhi.n	8005a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	e037      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a7c:	edd7 7a00 	vldr	s15, [r7]
 8005a80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005b1c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	d801      	bhi.n	8005a92 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005a8e:	2305      	movs	r3, #5
 8005a90:	e02c      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a92:	edd7 7a00 	vldr	s15, [r7]
 8005a96:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005b20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa2:	d801      	bhi.n	8005aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	e021      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005aa8:	edd7 7a00 	vldr	s15, [r7]
 8005aac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	d801      	bhi.n	8005abe <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005aba:	2307      	movs	r3, #7
 8005abc:	e016      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005abe:	edd7 7a00 	vldr	s15, [r7]
 8005ac2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	d801      	bhi.n	8005ad4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	e00b      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ad4:	edd7 7a00 	vldr	s15, [r7]
 8005ad8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005b2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	d801      	bhi.n	8005aea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005ae6:	2309      	movs	r3, #9
 8005ae8:	e000      	b.n	8005aec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005aea:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005aec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	331c      	adds	r3, #28
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb2c 	bl	8006154 <lsm6dso_gy_data_rate_set>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	e000      	b.n	8005b0a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	42500000 	.word	0x42500000
 8005b18:	42d00000 	.word	0x42d00000
 8005b1c:	43500000 	.word	0x43500000
 8005b20:	43d08000 	.word	0x43d08000
 8005b24:	44504000 	.word	0x44504000
 8005b28:	44d06000 	.word	0x44d06000
 8005b2c:	45505000 	.word	0x45505000

08005b30 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005b3c:	edd7 7a00 	vldr	s15, [r7]
 8005b40:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	d801      	bhi.n	8005b52 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e058      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b52:	edd7 7a00 	vldr	s15, [r7]
 8005b56:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	d801      	bhi.n	8005b68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e04d      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b68:	edd7 7a00 	vldr	s15, [r7]
 8005b6c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005c18 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b78:	d801      	bhi.n	8005b7e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e042      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b7e:	edd7 7a00 	vldr	s15, [r7]
 8005b82:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005c1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8e:	d801      	bhi.n	8005b94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005b90:	2304      	movs	r3, #4
 8005b92:	e037      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b94:	edd7 7a00 	vldr	s15, [r7]
 8005b98:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005c20 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	d801      	bhi.n	8005baa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005ba6:	2305      	movs	r3, #5
 8005ba8:	e02c      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005baa:	edd7 7a00 	vldr	s15, [r7]
 8005bae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005c24 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	d801      	bhi.n	8005bc0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005bbc:	2306      	movs	r3, #6
 8005bbe:	e021      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bc0:	edd7 7a00 	vldr	s15, [r7]
 8005bc4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005c28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd0:	d801      	bhi.n	8005bd6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	e016      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bd6:	edd7 7a00 	vldr	s15, [r7]
 8005bda:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005c2c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	d801      	bhi.n	8005bec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005be8:	2308      	movs	r3, #8
 8005bea:	e00b      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bec:	edd7 7a00 	vldr	s15, [r7]
 8005bf0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005c30 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	d801      	bhi.n	8005c02 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005bfe:	2309      	movs	r3, #9
 8005c00:	e000      	b.n	8005c04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c02:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	42500000 	.word	0x42500000
 8005c1c:	42d00000 	.word	0x42d00000
 8005c20:	43500000 	.word	0x43500000
 8005c24:	43d08000 	.word	0x43d08000
 8005c28:	44504000 	.word	0x44504000
 8005c2c:	44d06000 	.word	0x44d06000
 8005c30:	45505000 	.word	0x45505000

08005c34 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	460b      	mov	r3, r1
 8005c42:	72fb      	strb	r3, [r7, #11]
 8005c44:	4613      	mov	r3, r2
 8005c46:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	695c      	ldr	r4, [r3, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	7b1b      	ldrb	r3, [r3, #12]
 8005c54:	b298      	uxth	r0, r3
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	b299      	uxth	r1, r3
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	47a0      	blx	r4
 8005c60:	4603      	mov	r3, r0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}

08005c6a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c6a:	b590      	push	{r4, r7, lr}
 8005c6c:	b087      	sub	sp, #28
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	461a      	mov	r2, r3
 8005c76:	460b      	mov	r3, r1
 8005c78:	72fb      	strb	r3, [r7, #11]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	691c      	ldr	r4, [r3, #16]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	7b1b      	ldrb	r3, [r3, #12]
 8005c8a:	b298      	uxth	r0, r3
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	47a0      	blx	r4
 8005c96:	4603      	mov	r3, r0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd90      	pop	{r4, r7, pc}

08005ca0 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	461a      	mov	r2, r3
 8005cac:	460b      	mov	r3, r1
 8005cae:	72fb      	strb	r3, [r7, #11]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685c      	ldr	r4, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6898      	ldr	r0, [r3, #8]
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	7af9      	ldrb	r1, [r7, #11]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	47a0      	blx	r4
 8005cc4:	6178      	str	r0, [r7, #20]

  return ret;
 8005cc6:	697b      	ldr	r3, [r7, #20]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}

08005cd0 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	460b      	mov	r3, r1
 8005cde:	72fb      	strb	r3, [r7, #11]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681c      	ldr	r4, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6898      	ldr	r0, [r3, #8]
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	7af9      	ldrb	r1, [r7, #11]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	47a0      	blx	r4
 8005cf4:	6178      	str	r0, [r7, #20]

  return ret;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd90      	pop	{r4, r7, pc}

08005d00 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d0c:	f107 0208 	add.w	r2, r7, #8
 8005d10:	2301      	movs	r3, #1
 8005d12:	2110      	movs	r1, #16
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ffc3 	bl	8005ca0 <lsm6dso_read_reg>
 8005d1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	7a3b      	ldrb	r3, [r7, #8]
 8005d2c:	f362 0383 	bfi	r3, r2, #2, #2
 8005d30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d32:	f107 0208 	add.w	r2, r7, #8
 8005d36:	2301      	movs	r3, #1
 8005d38:	2110      	movs	r1, #16
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ffc8 	bl	8005cd0 <lsm6dso_write_reg>
 8005d40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d42:	68fb      	ldr	r3, [r7, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d56:	f107 0208 	add.w	r2, r7, #8
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	2110      	movs	r1, #16
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ff9e 	bl	8005ca0 <lsm6dso_read_reg>
 8005d64:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005d66:	7a3b      	ldrb	r3, [r7, #8]
 8005d68:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d81a      	bhi.n	8005da8 <lsm6dso_xl_full_scale_get+0x5c>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <lsm6dso_xl_full_scale_get+0x2c>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d91 	.word	0x08005d91
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
      break;
 8005d8e:	e00f      	b.n	8005db0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
      break;
 8005d96:	e00b      	b.n	8005db0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	701a      	strb	r2, [r3, #0]
      break;
 8005d9e:	e007      	b.n	8005db0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2203      	movs	r2, #3
 8005da4:	701a      	strb	r2, [r3, #0]
      break;
 8005da6:	e003      	b.n	8005db0 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	bf00      	nop
  }

  return ret;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop

08005dbc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005dcc:	f107 030c 	add.w	r3, r7, #12
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fca1 	bl	800671a <lsm6dso_fsm_enable_get>
 8005dd8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 80c4 	bne.w	8005f6a <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005de2:	7b3b      	ldrb	r3, [r7, #12]
 8005de4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005de8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005dea:	7b3b      	ldrb	r3, [r7, #12]
 8005dec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005df0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005df6:	7b3b      	ldrb	r3, [r7, #12]
 8005df8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005e02:	7b3b      	ldrb	r3, [r7, #12]
 8005e04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005e0e:	7b3b      	ldrb	r3, [r7, #12]
 8005e10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005e1a:	7b3b      	ldrb	r3, [r7, #12]
 8005e1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005e26:	7b3b      	ldrb	r3, [r7, #12]
 8005e28:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005e32:	7b3b      	ldrb	r3, [r7, #12]
 8005e34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005e3e:	7b7b      	ldrb	r3, [r7, #13]
 8005e40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005e4a:	7b7b      	ldrb	r3, [r7, #13]
 8005e4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005e56:	7b7b      	ldrb	r3, [r7, #13]
 8005e58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005e62:	7b7b      	ldrb	r3, [r7, #13]
 8005e64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005e6e:	7b7b      	ldrb	r3, [r7, #13]
 8005e70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005e7a:	7b7b      	ldrb	r3, [r7, #13]
 8005e7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005e92:	7b7b      	ldrb	r3, [r7, #13]
 8005e94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d163      	bne.n	8005f6a <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005ea2:	f107 030b 	add.w	r3, r7, #11
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc57 	bl	800675c <lsm6dso_fsm_data_rate_get>
 8005eae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d159      	bne.n	8005f6a <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d853      	bhi.n	8005f64 <lsm6dso_xl_data_rate_set+0x1a8>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <lsm6dso_xl_data_rate_set+0x108>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee7 	.word	0x08005ee7
 8005ecc:	08005f05 	.word	0x08005f05
 8005ed0:	08005f2f 	.word	0x08005f2f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005ede:	e045      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ee4:	e042      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005eec:	2302      	movs	r3, #2
 8005eee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005ef0:	e03c      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d102      	bne.n	8005efe <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	75fb      	strb	r3, [r7, #23]
            break;
 8005efc:	e036      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	75fb      	strb	r3, [r7, #23]
            break;
 8005f02:	e033      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005f0e:	e02d      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005f16:	2303      	movs	r3, #3
 8005f18:	75fb      	strb	r3, [r7, #23]
            break;
 8005f1a:	e027      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d102      	bne.n	8005f28 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005f22:	2303      	movs	r3, #3
 8005f24:	75fb      	strb	r3, [r7, #23]
            break;
 8005f26:	e021      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f2c:	e01e      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005f34:	2304      	movs	r3, #4
 8005f36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005f38:	e018      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d102      	bne.n	8005f46 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005f40:	2304      	movs	r3, #4
 8005f42:	75fb      	strb	r3, [r7, #23]
            break;
 8005f44:	e012      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d102      	bne.n	8005f52 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8005f50:	e00c      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d102      	bne.n	8005f5e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005f58:	2304      	movs	r3, #4
 8005f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f5c:	e006      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	75fb      	strb	r3, [r7, #23]
            break;
 8005f62:	e003      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	75fb      	strb	r3, [r7, #23]
            break;
 8005f68:	e000      	b.n	8005f6c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8005f6a:	bf00      	nop
    }
  }

  if (ret == 0)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d107      	bne.n	8005f82 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005f72:	f107 0208 	add.w	r2, r7, #8
 8005f76:	2301      	movs	r3, #1
 8005f78:	2110      	movs	r1, #16
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fe90 	bl	8005ca0 <lsm6dso_read_reg>
 8005f80:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10f      	bne.n	8005fa8 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	7a3b      	ldrb	r3, [r7, #8]
 8005f92:	f362 1307 	bfi	r3, r2, #4, #4
 8005f96:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005f98:	f107 0208 	add.w	r2, r7, #8
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	2110      	movs	r1, #16
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fe95 	bl	8005cd0 <lsm6dso_write_reg>
 8005fa6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005fa8:	693b      	ldr	r3, [r7, #16]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005fbe:	f107 0208 	add.w	r2, r7, #8
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	2110      	movs	r1, #16
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fe6a 	bl	8005ca0 <lsm6dso_read_reg>
 8005fcc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8005fce:	7a3b      	ldrb	r3, [r7, #8]
 8005fd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b0b      	cmp	r3, #11
 8005fd8:	d84a      	bhi.n	8006070 <lsm6dso_xl_data_rate_get+0xbc>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <lsm6dso_xl_data_rate_get+0x2c>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006021 	.word	0x08006021
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006041 	.word	0x08006041
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006051 	.word	0x08006051
 8006004:	08006059 	.word	0x08006059
 8006008:	08006061 	.word	0x08006061
 800600c:	08006069 	.word	0x08006069
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
      break;
 8006016:	e02f      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
      break;
 800601e:	e02b      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2202      	movs	r2, #2
 8006024:	701a      	strb	r2, [r3, #0]
      break;
 8006026:	e027      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2203      	movs	r2, #3
 800602c:	701a      	strb	r2, [r3, #0]
      break;
 800602e:	e023      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2204      	movs	r2, #4
 8006034:	701a      	strb	r2, [r3, #0]
      break;
 8006036:	e01f      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2205      	movs	r2, #5
 800603c:	701a      	strb	r2, [r3, #0]
      break;
 800603e:	e01b      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2206      	movs	r2, #6
 8006044:	701a      	strb	r2, [r3, #0]
      break;
 8006046:	e017      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2207      	movs	r2, #7
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e013      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2208      	movs	r2, #8
 8006054:	701a      	strb	r2, [r3, #0]
      break;
 8006056:	e00f      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2209      	movs	r2, #9
 800605c:	701a      	strb	r2, [r3, #0]
      break;
 800605e:	e00b      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	220a      	movs	r2, #10
 8006064:	701a      	strb	r2, [r3, #0]
      break;
 8006066:	e007      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	220b      	movs	r2, #11
 800606c:	701a      	strb	r2, [r3, #0]
      break;
 800606e:	e003      	b.n	8006078 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
      break;
 8006076:	bf00      	nop
  }

  return ret;
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop

08006084 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006090:	f107 0208 	add.w	r2, r7, #8
 8006094:	2301      	movs	r3, #1
 8006096:	2111      	movs	r1, #17
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe01 	bl	8005ca0 <lsm6dso_read_reg>
 800609e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	7a3b      	ldrb	r3, [r7, #8]
 80060b0:	f362 0343 	bfi	r3, r2, #1, #3
 80060b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80060b6:	f107 0208 	add.w	r2, r7, #8
 80060ba:	2301      	movs	r3, #1
 80060bc:	2111      	movs	r1, #17
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fe06 	bl	8005cd0 <lsm6dso_write_reg>
 80060c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80060da:	f107 0208 	add.w	r2, r7, #8
 80060de:	2301      	movs	r3, #1
 80060e0:	2111      	movs	r1, #17
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fddc 	bl	8005ca0 <lsm6dso_read_reg>
 80060e8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80060ea:	7a3b      	ldrb	r3, [r7, #8]
 80060ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d824      	bhi.n	8006140 <lsm6dso_gy_full_scale_get+0x70>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <lsm6dso_gy_full_scale_get+0x2c>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006119 	.word	0x08006119
 8006100:	08006121 	.word	0x08006121
 8006104:	08006129 	.word	0x08006129
 8006108:	08006141 	.word	0x08006141
 800610c:	08006131 	.word	0x08006131
 8006110:	08006141 	.word	0x08006141
 8006114:	08006139 	.word	0x08006139
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e013      	b.n	8006148 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
      break;
 8006126:	e00f      	b.n	8006148 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
      break;
 800612e:	e00b      	b.n	8006148 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2204      	movs	r2, #4
 8006134:	701a      	strb	r2, [r3, #0]
      break;
 8006136:	e007      	b.n	8006148 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2206      	movs	r2, #6
 800613c:	701a      	strb	r2, [r3, #0]
      break;
 800613e:	e003      	b.n	8006148 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
      break;
 8006146:	bf00      	nop
  }

  return ret;
 8006148:	68fb      	ldr	r3, [r7, #12]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop

08006154 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006164:	f107 030c 	add.w	r3, r7, #12
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fad5 	bl	800671a <lsm6dso_fsm_enable_get>
 8006170:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 80c4 	bne.w	8006302 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800617a:	7b3b      	ldrb	r3, [r7, #12]
 800617c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006182:	7b3b      	ldrb	r3, [r7, #12]
 8006184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006188:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800618a:	4313      	orrs	r3, r2
 800618c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800618e:	7b3b      	ldrb	r3, [r7, #12]
 8006190:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006196:	4313      	orrs	r3, r2
 8006198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800619a:	7b3b      	ldrb	r3, [r7, #12]
 800619c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061a6:	7b3b      	ldrb	r3, [r7, #12]
 80061a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80061b2:	7b3b      	ldrb	r3, [r7, #12]
 80061b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80061be:	7b3b      	ldrb	r3, [r7, #12]
 80061c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80061ca:	7b3b      	ldrb	r3, [r7, #12]
 80061cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80061d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80061d6:	7b7b      	ldrb	r3, [r7, #13]
 80061d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80061de:	4313      	orrs	r3, r2
 80061e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80061e2:	7b7b      	ldrb	r3, [r7, #13]
 80061e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80061ee:	7b7b      	ldrb	r3, [r7, #13]
 80061f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80061fa:	7b7b      	ldrb	r3, [r7, #13]
 80061fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006202:	4313      	orrs	r3, r2
 8006204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006206:	7b7b      	ldrb	r3, [r7, #13]
 8006208:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800620c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800620e:	4313      	orrs	r3, r2
 8006210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006212:	7b7b      	ldrb	r3, [r7, #13]
 8006214:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800621a:	4313      	orrs	r3, r2
 800621c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800621e:	7b7b      	ldrb	r3, [r7, #13]
 8006220:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006226:	4313      	orrs	r3, r2
 8006228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800622a:	7b7b      	ldrb	r3, [r7, #13]
 800622c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006232:	4313      	orrs	r3, r2
 8006234:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006236:	2b01      	cmp	r3, #1
 8006238:	d163      	bne.n	8006302 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800623a:	f107 030b 	add.w	r3, r7, #11
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fa8b 	bl	800675c <lsm6dso_fsm_data_rate_get>
 8006246:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d159      	bne.n	8006302 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d853      	bhi.n	80062fc <lsm6dso_gy_data_rate_set+0x1a8>
 8006254:	a201      	add	r2, pc, #4	; (adr r2, 800625c <lsm6dso_gy_data_rate_set+0x108>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	0800626d 	.word	0x0800626d
 8006260:	0800627f 	.word	0x0800627f
 8006264:	0800629d 	.word	0x0800629d
 8006268:	080062c7 	.word	0x080062c7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006276:	e045      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	75fb      	strb	r3, [r7, #23]
            break;
 800627c:	e042      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006284:	2302      	movs	r3, #2
 8006286:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006288:	e03c      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d102      	bne.n	8006296 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006290:	2302      	movs	r3, #2
 8006292:	75fb      	strb	r3, [r7, #23]
            break;
 8006294:	e036      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	75fb      	strb	r3, [r7, #23]
            break;
 800629a:	e033      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80062a2:	2303      	movs	r3, #3
 80062a4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062a6:	e02d      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d102      	bne.n	80062b4 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80062ae:	2303      	movs	r3, #3
 80062b0:	75fb      	strb	r3, [r7, #23]
            break;
 80062b2:	e027      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d102      	bne.n	80062c0 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80062ba:	2303      	movs	r3, #3
 80062bc:	75fb      	strb	r3, [r7, #23]
            break;
 80062be:	e021      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	75fb      	strb	r3, [r7, #23]
            break;
 80062c4:	e01e      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80062cc:	2304      	movs	r3, #4
 80062ce:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062d0:	e018      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d102      	bne.n	80062de <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80062d8:	2304      	movs	r3, #4
 80062da:	75fb      	strb	r3, [r7, #23]
            break;
 80062dc:	e012      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d102      	bne.n	80062ea <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80062e4:	2304      	movs	r3, #4
 80062e6:	75fb      	strb	r3, [r7, #23]
            break;
 80062e8:	e00c      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d102      	bne.n	80062f6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80062f0:	2304      	movs	r3, #4
 80062f2:	75fb      	strb	r3, [r7, #23]
            break;
 80062f4:	e006      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	75fb      	strb	r3, [r7, #23]
            break;
 80062fa:	e003      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006300:	e000      	b.n	8006304 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006302:	bf00      	nop
    }
  }

  if (ret == 0)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d107      	bne.n	800631a <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800630a:	f107 0208 	add.w	r2, r7, #8
 800630e:	2301      	movs	r3, #1
 8006310:	2111      	movs	r1, #17
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fcc4 	bl	8005ca0 <lsm6dso_read_reg>
 8006318:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10f      	bne.n	8006340 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	b2da      	uxtb	r2, r3
 8006328:	7a3b      	ldrb	r3, [r7, #8]
 800632a:	f362 1307 	bfi	r3, r2, #4, #4
 800632e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	2301      	movs	r3, #1
 8006336:	2111      	movs	r1, #17
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fcc9 	bl	8005cd0 <lsm6dso_write_reg>
 800633e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006340:	693b      	ldr	r3, [r7, #16]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop

0800634c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006356:	f107 0208 	add.w	r2, r7, #8
 800635a:	2301      	movs	r3, #1
 800635c:	2111      	movs	r1, #17
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fc9e 	bl	8005ca0 <lsm6dso_read_reg>
 8006364:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006366:	7a3b      	ldrb	r3, [r7, #8]
 8006368:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b0a      	cmp	r3, #10
 8006370:	d844      	bhi.n	80063fc <lsm6dso_gy_data_rate_get+0xb0>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <lsm6dso_gy_data_rate_get+0x2c>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063ad 	.word	0x080063ad
 8006380:	080063b5 	.word	0x080063b5
 8006384:	080063bd 	.word	0x080063bd
 8006388:	080063c5 	.word	0x080063c5
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063dd 	.word	0x080063dd
 8006398:	080063e5 	.word	0x080063e5
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063f5 	.word	0x080063f5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
      break;
 80063aa:	e02b      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	e027      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2202      	movs	r2, #2
 80063b8:	701a      	strb	r2, [r3, #0]
      break;
 80063ba:	e023      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2203      	movs	r2, #3
 80063c0:	701a      	strb	r2, [r3, #0]
      break;
 80063c2:	e01f      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
      break;
 80063ca:	e01b      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2205      	movs	r2, #5
 80063d0:	701a      	strb	r2, [r3, #0]
      break;
 80063d2:	e017      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2206      	movs	r2, #6
 80063d8:	701a      	strb	r2, [r3, #0]
      break;
 80063da:	e013      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2207      	movs	r2, #7
 80063e0:	701a      	strb	r2, [r3, #0]
      break;
 80063e2:	e00f      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2208      	movs	r2, #8
 80063e8:	701a      	strb	r2, [r3, #0]
      break;
 80063ea:	e00b      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2209      	movs	r2, #9
 80063f0:	701a      	strb	r2, [r3, #0]
      break;
 80063f2:	e007      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	220a      	movs	r2, #10
 80063f8:	701a      	strb	r2, [r3, #0]
      break;
 80063fa:	e003      	b.n	8006404 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
      break;
 8006402:	bf00      	nop
  }

  return ret;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop

08006410 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800641c:	f107 0208 	add.w	r2, r7, #8
 8006420:	2301      	movs	r3, #1
 8006422:	2112      	movs	r1, #18
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fc3b 	bl	8005ca0 <lsm6dso_read_reg>
 800642a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	b2da      	uxtb	r2, r3
 800643a:	7a3b      	ldrb	r3, [r7, #8]
 800643c:	f362 1386 	bfi	r3, r2, #6, #1
 8006440:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006442:	f107 0208 	add.w	r2, r7, #8
 8006446:	2301      	movs	r3, #1
 8006448:	2112      	movs	r1, #18
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fc40 	bl	8005cd0 <lsm6dso_write_reg>
 8006450:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006452:	68fb      	ldr	r3, [r7, #12]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006466:	f107 020c 	add.w	r2, r7, #12
 800646a:	2306      	movs	r3, #6
 800646c:	2122      	movs	r1, #34	; 0x22
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fc16 	bl	8005ca0 <lsm6dso_read_reg>
 8006474:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006476:	7b7b      	ldrb	r3, [r7, #13]
 8006478:	b21a      	sxth	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006484:	b29b      	uxth	r3, r3
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	b29a      	uxth	r2, r3
 800648a:	7b3b      	ldrb	r3, [r7, #12]
 800648c:	b29b      	uxth	r3, r3
 800648e:	4413      	add	r3, r2
 8006490:	b29b      	uxth	r3, r3
 8006492:	b21a      	sxth	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	3302      	adds	r3, #2
 800649e:	b212      	sxth	r2, r2
 80064a0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	3302      	adds	r3, #2
 80064a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4413      	add	r3, r2
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	3302      	adds	r3, #2
 80064bc:	b212      	sxth	r2, r2
 80064be:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80064c0:	7c7a      	ldrb	r2, [r7, #17]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	3304      	adds	r3, #4
 80064c6:	b212      	sxth	r2, r2
 80064c8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	3304      	adds	r3, #4
 80064ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	7c3b      	ldrb	r3, [r7, #16]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4413      	add	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	3304      	adds	r3, #4
 80064e4:	b212      	sxth	r2, r2
 80064e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80064e8:	697b      	ldr	r3, [r7, #20]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80064fc:	f107 020c 	add.w	r2, r7, #12
 8006500:	2306      	movs	r3, #6
 8006502:	2128      	movs	r1, #40	; 0x28
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fbcb 	bl	8005ca0 <lsm6dso_read_reg>
 800650a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800650c:	7b7b      	ldrb	r3, [r7, #13]
 800650e:	b21a      	sxth	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651a:	b29b      	uxth	r3, r3
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	b29a      	uxth	r2, r3
 8006520:	7b3b      	ldrb	r3, [r7, #12]
 8006522:	b29b      	uxth	r3, r3
 8006524:	4413      	add	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	b21a      	sxth	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	3302      	adds	r3, #2
 8006534:	b212      	sxth	r2, r2
 8006536:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3302      	adds	r3, #2
 800653c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006540:	b29b      	uxth	r3, r3
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	b29a      	uxth	r2, r3
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	b29b      	uxth	r3, r3
 800654a:	4413      	add	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3302      	adds	r3, #2
 8006552:	b212      	sxth	r2, r2
 8006554:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006556:	7c7a      	ldrb	r2, [r7, #17]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	3304      	adds	r3, #4
 800655c:	b212      	sxth	r2, r2
 800655e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006568:	b29b      	uxth	r3, r3
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	b29a      	uxth	r2, r3
 800656e:	7c3b      	ldrb	r3, [r7, #16]
 8006570:	b29b      	uxth	r3, r3
 8006572:	4413      	add	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	3304      	adds	r3, #4
 800657a:	b212      	sxth	r2, r2
 800657c:	801a      	strh	r2, [r3, #0]

  return ret;
 800657e:	697b      	ldr	r3, [r7, #20]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006594:	f107 0208 	add.w	r2, r7, #8
 8006598:	2301      	movs	r3, #1
 800659a:	2101      	movs	r1, #1
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff fb7f 	bl	8005ca0 <lsm6dso_read_reg>
 80065a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	7a3b      	ldrb	r3, [r7, #8]
 80065b4:	f362 1387 	bfi	r3, r2, #6, #2
 80065b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80065ba:	f107 0208 	add.w	r2, r7, #8
 80065be:	2301      	movs	r3, #1
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fb84 	bl	8005cd0 <lsm6dso_write_reg>
 80065c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80065de:	2301      	movs	r3, #1
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	210f      	movs	r1, #15
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fb5b 	bl	8005ca0 <lsm6dso_read_reg>
 80065ea:	60f8      	str	r0, [r7, #12]

  return ret;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006602:	f107 0208 	add.w	r2, r7, #8
 8006606:	2301      	movs	r3, #1
 8006608:	2112      	movs	r1, #18
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fb48 	bl	8005ca0 <lsm6dso_read_reg>
 8006610:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10f      	bne.n	8006638 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	7a3b      	ldrb	r3, [r7, #8]
 8006622:	f362 0382 	bfi	r3, r2, #2, #1
 8006626:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006628:	f107 0208 	add.w	r2, r7, #8
 800662c:	2301      	movs	r3, #1
 800662e:	2112      	movs	r1, #18
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff fb4d 	bl	8005cd0 <lsm6dso_write_reg>
 8006636:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800664e:	f107 020c 	add.w	r2, r7, #12
 8006652:	2301      	movs	r3, #1
 8006654:	2118      	movs	r1, #24
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fb22 	bl	8005ca0 <lsm6dso_read_reg>
 800665c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d111      	bne.n	8006688 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	09db      	lsrs	r3, r3, #7
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	b2da      	uxtb	r2, r3
 8006670:	7b3b      	ldrb	r3, [r7, #12]
 8006672:	f362 0341 	bfi	r3, r2, #1, #1
 8006676:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006678:	f107 020c 	add.w	r2, r7, #12
 800667c:	2301      	movs	r3, #1
 800667e:	2118      	movs	r1, #24
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff fb25 	bl	8005cd0 <lsm6dso_write_reg>
 8006686:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d107      	bne.n	800669e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800668e:	f107 0210 	add.w	r2, r7, #16
 8006692:	2301      	movs	r3, #1
 8006694:	2162      	movs	r1, #98	; 0x62
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fb02 	bl	8005ca0 <lsm6dso_read_reg>
 800669c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	7c3b      	ldrb	r3, [r7, #16]
 80066ae:	f362 03c4 	bfi	r3, r2, #3, #2
 80066b2:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80066b4:	f107 0210 	add.w	r2, r7, #16
 80066b8:	2301      	movs	r3, #1
 80066ba:	2162      	movs	r1, #98	; 0x62
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fb07 	bl	8005cd0 <lsm6dso_write_reg>
 80066c2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80066da:	f107 0208 	add.w	r2, r7, #8
 80066de:	2301      	movs	r3, #1
 80066e0:	210a      	movs	r1, #10
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff fadc 	bl	8005ca0 <lsm6dso_read_reg>
 80066e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10f      	bne.n	8006710 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	7a3b      	ldrb	r3, [r7, #8]
 80066fa:	f362 0302 	bfi	r3, r2, #0, #3
 80066fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006700:	f107 0208 	add.w	r2, r7, #8
 8006704:	2301      	movs	r3, #1
 8006706:	210a      	movs	r1, #10
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff fae1 	bl	8005cd0 <lsm6dso_write_reg>
 800670e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006724:	2102      	movs	r1, #2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff ff2e 	bl	8006588 <lsm6dso_mem_bank_set>
 800672c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006734:	2302      	movs	r3, #2
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	2146      	movs	r1, #70	; 0x46
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fab0 	bl	8005ca0 <lsm6dso_read_reg>
 8006740:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006748:	2100      	movs	r1, #0
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ff1c 	bl	8006588 <lsm6dso_mem_bank_set>
 8006750:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006766:	2102      	movs	r1, #2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff ff0d 	bl	8006588 <lsm6dso_mem_bank_set>
 800676e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8006776:	f107 0208 	add.w	r2, r7, #8
 800677a:	2301      	movs	r3, #1
 800677c:	215f      	movs	r1, #95	; 0x5f
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fa8e 	bl	8005ca0 <lsm6dso_read_reg>
 8006784:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d12a      	bne.n	80067e2 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800678c:	7a3b      	ldrb	r3, [r7, #8]
 800678e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d81b      	bhi.n	80067d0 <lsm6dso_fsm_data_rate_get+0x74>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <lsm6dso_fsm_data_rate_get+0x44>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067b9 	.word	0x080067b9
 80067a8:	080067c1 	.word	0x080067c1
 80067ac:	080067c9 	.word	0x080067c9
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
        break;
 80067b6:	e00f      	b.n	80067d8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
        break;
 80067be:	e00b      	b.n	80067d8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2202      	movs	r2, #2
 80067c4:	701a      	strb	r2, [r3, #0]
        break;
 80067c6:	e007      	b.n	80067d8 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2203      	movs	r2, #3
 80067cc:	701a      	strb	r2, [r3, #0]
        break;
 80067ce:	e003      	b.n	80067d8 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
        break;
 80067d6:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fed4 	bl	8006588 <lsm6dso_mem_bank_set>
 80067e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80067fa:	2301      	movs	r3, #1
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d06e      	beq.n	80068e6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	f200 809d 	bhi.w	800694a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d032      	beq.n	8006882 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800681c:	e095      	b.n	800694a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800681e:	6838      	ldr	r0, [r7, #0]
 8006820:	f000 f924 	bl	8006a6c <LSM6DSO_0_Probe>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	e0cc      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006830:	4a68      	ldr	r2, [pc, #416]	; (80069d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4967      	ldr	r1, [pc, #412]	; (80069d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006842:	f107 010c 	add.w	r1, r7, #12
 8006846:	4610      	mov	r0, r2
 8006848:	4798      	blx	r3
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006850:	f06f 0306 	mvn.w	r3, #6
 8006854:	e0b9      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006856:	7b3b      	ldrb	r3, [r7, #12]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d103      	bne.n	8006864 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006864:	7b7b      	ldrb	r3, [r7, #13]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d103      	bne.n	8006872 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d16c      	bne.n	8006952 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	f043 0304 	orr.w	r3, r3, #4
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006880:	e067      	b.n	8006952 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8006882:	6838      	ldr	r0, [r7, #0]
 8006884:	f000 f9ae 	bl	8006be4 <LIS2DW12_0_Probe>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800688e:	f04f 33ff 	mov.w	r3, #4294967295
 8006892:	e09a      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006894:	4a4f      	ldr	r2, [pc, #316]	; (80069d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	494e      	ldr	r1, [pc, #312]	; (80069d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068a6:	f107 010c 	add.w	r1, r7, #12
 80068aa:	4610      	mov	r0, r2
 80068ac:	4798      	blx	r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80068b4:	f06f 0306 	mvn.w	r3, #6
 80068b8:	e087      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80068ba:	7b3b      	ldrb	r3, [r7, #12]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d103      	bne.n	80068c8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80068c8:	7b7b      	ldrb	r3, [r7, #13]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d103      	bne.n	80068d6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d13c      	bne.n	8006956 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f043 0304 	orr.w	r3, r3, #4
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80068e4:	e037      	b.n	8006956 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	f000 fa20 	bl	8006d2c <LIS2MDL_0_Probe>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e068      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80068f8:	4a36      	ldr	r2, [pc, #216]	; (80069d4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4935      	ldr	r1, [pc, #212]	; (80069d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800690a:	f107 010c 	add.w	r1, r7, #12
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006918:	f06f 0306 	mvn.w	r3, #6
 800691c:	e055      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800691e:	7b3b      	ldrb	r3, [r7, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d103      	bne.n	800692c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f043 0302 	orr.w	r3, r3, #2
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800692c:	7b7b      	ldrb	r3, [r7, #13]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d103      	bne.n	800693a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10c      	bne.n	800695a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	f043 0304 	orr.w	r3, r3, #4
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006948:	e007      	b.n	800695a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800694a:	f06f 0301 	mvn.w	r3, #1
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006950:	e004      	b.n	800695c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006952:	bf00      	nop
 8006954:	e002      	b.n	800695c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800695a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	e031      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006966:	2300      	movs	r3, #0
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696a:	e02a      	b.n	80069c2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	4013      	ands	r3, r2
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	429a      	cmp	r2, r3
 8006976:	d11e      	bne.n	80069b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8006978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	4013      	ands	r3, r2
 800697e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006980:	429a      	cmp	r2, r3
 8006982:	d118      	bne.n	80069b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800698c:	4814      	ldr	r0, [pc, #80]	; (80069e0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	440b      	add	r3, r1
 8006998:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	490e      	ldr	r1, [pc, #56]	; (80069d8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80069a6:	4610      	mov	r0, r2
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80069b0:	f06f 0304 	mvn.w	r3, #4
 80069b4:	e009      	b.n	80069ca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	3301      	adds	r3, #1
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d9d1      	bls.n	800696c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3738      	adds	r7, #56	; 0x38
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000ab4 	.word	0x20000ab4
 80069d8:	20000a84 	.word	0x20000a84
 80069dc:	200000c4 	.word	0x200000c4
 80069e0:	20000a90 	.word	0x20000a90

080069e4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d903      	bls.n	80069fe <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069f6:	f06f 0301 	mvn.w	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e029      	b.n	8006a52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d11d      	bne.n	8006a4c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a18:	4812      	ldr	r0, [pc, #72]	; (8006a64 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	440b      	add	r3, r1
 8006a24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	490f      	ldr	r1, [pc, #60]	; (8006a68 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a3e:	f06f 0304 	mvn.w	r3, #4
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e005      	b.n	8006a52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e002      	b.n	8006a52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006a4c:	f06f 0301 	mvn.w	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006a52:	697b      	ldr	r3, [r7, #20]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000ac0 	.word	0x20000ac0
 8006a60:	200000c4 	.word	0x200000c4
 8006a64:	20000a90 	.word	0x20000a90
 8006a68:	20000a84 	.word	0x20000a84

08006a6c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b092      	sub	sp, #72	; 0x48
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8006a78:	2300      	movs	r3, #0
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006a7c:	23d7      	movs	r3, #215	; 0xd7
 8006a7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006a82:	4b4a      	ldr	r3, [pc, #296]	; (8006bac <LSM6DSO_0_Probe+0x140>)
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006a86:	4b4a      	ldr	r3, [pc, #296]	; (8006bb0 <LSM6DSO_0_Probe+0x144>)
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006a8a:	4b4a      	ldr	r3, [pc, #296]	; (8006bb4 <LSM6DSO_0_Probe+0x148>)
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006a8e:	4b4a      	ldr	r3, [pc, #296]	; (8006bb8 <LSM6DSO_0_Probe+0x14c>)
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006a92:	4b4a      	ldr	r3, [pc, #296]	; (8006bbc <LSM6DSO_0_Probe+0x150>)
 8006a94:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8006a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4848      	ldr	r0, [pc, #288]	; (8006bc0 <LSM6DSO_0_Probe+0x154>)
 8006a9e:	f7fd fec9 	bl	8004834 <LSM6DSO_RegisterBusIO>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006aa8:	f06f 0306 	mvn.w	r3, #6
 8006aac:	647b      	str	r3, [r7, #68]	; 0x44
 8006aae:	e077      	b.n	8006ba0 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8006ab0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4842      	ldr	r0, [pc, #264]	; (8006bc0 <LSM6DSO_0_Probe+0x154>)
 8006ab8:	f7fd ffbe 	bl	8004a38 <LSM6DSO_ReadID>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ac2:	f06f 0306 	mvn.w	r3, #6
 8006ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac8:	e06a      	b.n	8006ba0 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8006aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ace:	2b6c      	cmp	r3, #108	; 0x6c
 8006ad0:	d003      	beq.n	8006ada <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ad2:	f06f 0306 	mvn.w	r3, #6
 8006ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad8:	e062      	b.n	8006ba0 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4837      	ldr	r0, [pc, #220]	; (8006bc0 <LSM6DSO_0_Probe+0x154>)
 8006ae2:	f7fd ffbf 	bl	8004a64 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ae6:	7a7b      	ldrb	r3, [r7, #9]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	7a3b      	ldrb	r3, [r7, #8]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	431a      	orrs	r2, r3
 8006af0:	7abb      	ldrb	r3, [r7, #10]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4313      	orrs	r3, r2
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <LSM6DSO_0_Probe+0x158>)
 8006af8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8006afa:	4b33      	ldr	r3, [pc, #204]	; (8006bc8 <LSM6DSO_0_Probe+0x15c>)
 8006afc:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <LSM6DSO_0_Probe+0x154>)
 8006afe:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <LSM6DSO_0_Probe+0x160>)
 8006b02:	4a33      	ldr	r2, [pc, #204]	; (8006bd0 <LSM6DSO_0_Probe+0x164>)
 8006b04:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11d      	bne.n	8006b48 <LSM6DSO_0_Probe+0xdc>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <LSM6DSO_0_Probe+0xdc>
 8006b16:	7a7b      	ldrb	r3, [r7, #9]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d115      	bne.n	8006b48 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <LSM6DSO_0_Probe+0x168>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <LSM6DSO_0_Probe+0x16c>)
 8006b22:	492e      	ldr	r1, [pc, #184]	; (8006bdc <LSM6DSO_0_Probe+0x170>)
 8006b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <LSM6DSO_0_Probe+0x160>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a26      	ldr	r2, [pc, #152]	; (8006bc8 <LSM6DSO_0_Probe+0x15c>)
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b3c:	f06f 0304 	mvn.w	r3, #4
 8006b40:	647b      	str	r3, [r7, #68]	; 0x44
 8006b42:	e001      	b.n	8006b48 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11d      	bne.n	8006b8a <LSM6DSO_0_Probe+0x11e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d018      	beq.n	8006b8a <LSM6DSO_0_Probe+0x11e>
 8006b58:	7a3b      	ldrb	r3, [r7, #8]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d115      	bne.n	8006b8a <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <LSM6DSO_0_Probe+0x168>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <LSM6DSO_0_Probe+0x16c>)
 8006b64:	491e      	ldr	r1, [pc, #120]	; (8006be0 <LSM6DSO_0_Probe+0x174>)
 8006b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006b6a:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <LSM6DSO_0_Probe+0x160>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <LSM6DSO_0_Probe+0x15c>)
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b7e:	f06f 0304 	mvn.w	r3, #4
 8006b82:	647b      	str	r3, [r7, #68]	; 0x44
 8006b84:	e001      	b.n	8006b8a <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <LSM6DSO_0_Probe+0x134>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b9a:	f06f 0304 	mvn.w	r3, #4
 8006b9e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3748      	adds	r7, #72	; 0x48
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	08001ce1 	.word	0x08001ce1
 8006bb0:	08001d5d 	.word	0x08001d5d
 8006bb4:	08001e11 	.word	0x08001e11
 8006bb8:	08001dad 	.word	0x08001dad
 8006bbc:	08001e75 	.word	0x08001e75
 8006bc0:	20000acc 	.word	0x20000acc
 8006bc4:	20000ac0 	.word	0x20000ac0
 8006bc8:	20000a84 	.word	0x20000a84
 8006bcc:	20000ab4 	.word	0x20000ab4
 8006bd0:	2000006c 	.word	0x2000006c
 8006bd4:	200000c4 	.word	0x200000c4
 8006bd8:	20000a90 	.word	0x20000a90
 8006bdc:	200000a0 	.word	0x200000a0
 8006be0:	2000007c 	.word	0x2000007c

08006be4 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b092      	sub	sp, #72	; 0x48
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006bf4:	2333      	movs	r3, #51	; 0x33
 8006bf6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006bfa:	4b3f      	ldr	r3, [pc, #252]	; (8006cf8 <LIS2DW12_0_Probe+0x114>)
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <LIS2DW12_0_Probe+0x118>)
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <LIS2DW12_0_Probe+0x11c>)
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006c06:	4b3f      	ldr	r3, [pc, #252]	; (8006d04 <LIS2DW12_0_Probe+0x120>)
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006c0a:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <LIS2DW12_0_Probe+0x124>)
 8006c0c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c12:	4619      	mov	r1, r3
 8006c14:	483d      	ldr	r0, [pc, #244]	; (8006d0c <LIS2DW12_0_Probe+0x128>)
 8006c16:	f7fb fabb 	bl	8002190 <LIS2DW12_RegisterBusIO>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c20:	f06f 0306 	mvn.w	r3, #6
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
 8006c26:	e062      	b.n	8006cee <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006c28:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4837      	ldr	r0, [pc, #220]	; (8006d0c <LIS2DW12_0_Probe+0x128>)
 8006c30:	f7fb fb98 	bl	8002364 <LIS2DW12_ReadID>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c3a:	f06f 0306 	mvn.w	r3, #6
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c40:	e055      	b.n	8006cee <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8006c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c46:	2b44      	cmp	r3, #68	; 0x44
 8006c48:	d003      	beq.n	8006c52 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c4a:	f06f 0306 	mvn.w	r3, #6
 8006c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c50:	e04d      	b.n	8006cee <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006c52:	f107 0308 	add.w	r3, r7, #8
 8006c56:	4619      	mov	r1, r3
 8006c58:	482c      	ldr	r0, [pc, #176]	; (8006d0c <LIS2DW12_0_Probe+0x128>)
 8006c5a:	f7fb fb99 	bl	8002390 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c5e:	7a7b      	ldrb	r3, [r7, #9]
 8006c60:	461a      	mov	r2, r3
 8006c62:	7a3b      	ldrb	r3, [r7, #8]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	431a      	orrs	r2, r3
 8006c68:	7abb      	ldrb	r3, [r7, #10]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <LIS2DW12_0_Probe+0x12c>)
 8006c70:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006c72:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <LIS2DW12_0_Probe+0x130>)
 8006c74:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <LIS2DW12_0_Probe+0x128>)
 8006c76:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006c78:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <LIS2DW12_0_Probe+0x134>)
 8006c7a:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <LIS2DW12_0_Probe+0x138>)
 8006c7c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11e      	bne.n	8006cc2 <LIS2DW12_0_Probe+0xde>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d019      	beq.n	8006cc2 <LIS2DW12_0_Probe+0xde>
 8006c8e:	7a3b      	ldrb	r3, [r7, #8]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d116      	bne.n	8006cc2 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006c94:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <LIS2DW12_0_Probe+0x13c>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <LIS2DW12_0_Probe+0x140>)
 8006c9a:	3303      	adds	r3, #3
 8006c9c:	4922      	ldr	r1, [pc, #136]	; (8006d28 <LIS2DW12_0_Probe+0x144>)
 8006c9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <LIS2DW12_0_Probe+0x134>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <LIS2DW12_0_Probe+0x130>)
 8006caa:	6852      	ldr	r2, [r2, #4]
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cb6:	f06f 0304 	mvn.w	r3, #4
 8006cba:	647b      	str	r3, [r7, #68]	; 0x44
 8006cbc:	e001      	b.n	8006cc2 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d107      	bne.n	8006cd8 <LIS2DW12_0_Probe+0xf4>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cd2:	f06f 0304 	mvn.w	r3, #4
 8006cd6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <LIS2DW12_0_Probe+0x10a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ce8:	f06f 0304 	mvn.w	r3, #4
 8006cec:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3748      	adds	r7, #72	; 0x48
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	08001ce1 	.word	0x08001ce1
 8006cfc:	08001d5d 	.word	0x08001d5d
 8006d00:	08001e11 	.word	0x08001e11
 8006d04:	08001dad 	.word	0x08001dad
 8006d08:	08001e75 	.word	0x08001e75
 8006d0c:	20000afc 	.word	0x20000afc
 8006d10:	20000ac0 	.word	0x20000ac0
 8006d14:	20000a84 	.word	0x20000a84
 8006d18:	20000ab4 	.word	0x20000ab4
 8006d1c:	20000004 	.word	0x20000004
 8006d20:	200000c4 	.word	0x200000c4
 8006d24:	20000a90 	.word	0x20000a90
 8006d28:	20000014 	.word	0x20000014

08006d2c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b092      	sub	sp, #72	; 0x48
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006d38:	2300      	movs	r3, #0
 8006d3a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006d3c:	233d      	movs	r3, #61	; 0x3d
 8006d3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <LIS2MDL_0_Probe+0x114>)
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006d46:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <LIS2MDL_0_Probe+0x118>)
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <LIS2MDL_0_Probe+0x11c>)
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <LIS2MDL_0_Probe+0x120>)
 8006d50:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006d52:	4b3f      	ldr	r3, [pc, #252]	; (8006e50 <LIS2MDL_0_Probe+0x124>)
 8006d54:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	483d      	ldr	r0, [pc, #244]	; (8006e54 <LIS2MDL_0_Probe+0x128>)
 8006d5e:	f7fc fd67 	bl	8003830 <LIS2MDL_RegisterBusIO>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006d68:	f06f 0306 	mvn.w	r3, #6
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	e062      	b.n	8006e36 <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006d70:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006d74:	4619      	mov	r1, r3
 8006d76:	4837      	ldr	r0, [pc, #220]	; (8006e54 <LIS2MDL_0_Probe+0x128>)
 8006d78:	f7fc fe72 	bl	8003a60 <LIS2MDL_ReadID>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006d82:	f06f 0306 	mvn.w	r3, #6
 8006d86:	647b      	str	r3, [r7, #68]	; 0x44
 8006d88:	e055      	b.n	8006e36 <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8006d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d003      	beq.n	8006d9a <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006d92:	f06f 0306 	mvn.w	r3, #6
 8006d96:	647b      	str	r3, [r7, #68]	; 0x44
 8006d98:	e04d      	b.n	8006e36 <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4619      	mov	r1, r3
 8006da0:	482c      	ldr	r0, [pc, #176]	; (8006e54 <LIS2MDL_0_Probe+0x128>)
 8006da2:	f7fc fe83 	bl	8003aac <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006da6:	7a7b      	ldrb	r3, [r7, #9]
 8006da8:	461a      	mov	r2, r3
 8006daa:	7a3b      	ldrb	r3, [r7, #8]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	431a      	orrs	r2, r3
 8006db0:	7abb      	ldrb	r3, [r7, #10]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <LIS2MDL_0_Probe+0x12c>)
 8006db8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006dba:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <LIS2MDL_0_Probe+0x130>)
 8006dbc:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <LIS2MDL_0_Probe+0x128>)
 8006dbe:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006dc0:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <LIS2MDL_0_Probe+0x134>)
 8006dc2:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <LIS2MDL_0_Probe+0x138>)
 8006dc4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11e      	bne.n	8006e0a <LIS2MDL_0_Probe+0xde>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d019      	beq.n	8006e0a <LIS2MDL_0_Probe+0xde>
 8006dd6:	7abb      	ldrb	r3, [r7, #10]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d116      	bne.n	8006e0a <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006ddc:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <LIS2MDL_0_Probe+0x13c>)
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <LIS2MDL_0_Probe+0x140>)
 8006de2:	3306      	adds	r3, #6
 8006de4:	4922      	ldr	r1, [pc, #136]	; (8006e70 <LIS2MDL_0_Probe+0x144>)
 8006de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <LIS2MDL_0_Probe+0x134>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1a      	ldr	r2, [pc, #104]	; (8006e5c <LIS2MDL_0_Probe+0x130>)
 8006df2:	6892      	ldr	r2, [r2, #8]
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006dfe:	f06f 0304 	mvn.w	r3, #4
 8006e02:	647b      	str	r3, [r7, #68]	; 0x44
 8006e04:	e001      	b.n	8006e0a <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <LIS2MDL_0_Probe+0xf4>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e1a:	f06f 0304 	mvn.w	r3, #4
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d107      	bne.n	8006e36 <LIS2MDL_0_Probe+0x10a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e30:	f06f 0304 	mvn.w	r3, #4
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3748      	adds	r7, #72	; 0x48
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	08001ce1 	.word	0x08001ce1
 8006e44:	08001d5d 	.word	0x08001d5d
 8006e48:	08001e11 	.word	0x08001e11
 8006e4c:	08001dad 	.word	0x08001dad
 8006e50:	08001e75 	.word	0x08001e75
 8006e54:	20000b30 	.word	0x20000b30
 8006e58:	20000ac0 	.word	0x20000ac0
 8006e5c:	20000a84 	.word	0x20000a84
 8006e60:	20000ab4 	.word	0x20000ab4
 8006e64:	20000038 	.word	0x20000038
 8006e68:	200000c4 	.word	0x200000c4
 8006e6c:	20000a90 	.word	0x20000a90
 8006e70:	20000048 	.word	0x20000048

08006e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e78:	2003      	movs	r0, #3
 8006e7a:	f000 f92f 	bl	80070dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f000 f806 	bl	8006e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e84:	f7fa fd4c 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e98:	4b12      	ldr	r3, [pc, #72]	; (8006ee4 <HAL_InitTick+0x54>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <HAL_InitTick+0x58>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f93b 	bl	800712a <HAL_SYSTICK_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e00e      	b.n	8006edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b0f      	cmp	r3, #15
 8006ec2:	d80a      	bhi.n	8006eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	f000 f911 	bl	80070f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ed0:	4a06      	ldr	r2, [pc, #24]	; (8006eec <HAL_InitTick+0x5c>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e000      	b.n	8006edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000000 	.word	0x20000000
 8006ee8:	200000dc 	.word	0x200000dc
 8006eec:	200000d8 	.word	0x200000d8

08006ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_IncTick+0x20>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_IncTick+0x24>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <HAL_IncTick+0x24>)
 8006f02:	6013      	str	r3, [r2, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	200000dc 	.word	0x200000dc
 8006f14:	20000b5c 	.word	0x20000b5c

08006f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <HAL_GetTick+0x14>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000b5c 	.word	0x20000b5c

08006f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f38:	f7ff ffee 	bl	8006f18 <HAL_GetTick>
 8006f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d005      	beq.n	8006f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_Delay+0x44>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f56:	bf00      	nop
 8006f58:	f7ff ffde 	bl	8006f18 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d8f7      	bhi.n	8006f58 <HAL_Delay+0x28>
  {
  }
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200000dc 	.word	0x200000dc

08006f78 <__NVIC_SetPriorityGrouping>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f94:	4013      	ands	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <__NVIC_SetPriorityGrouping+0x44>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fa6:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	60d3      	str	r3, [r2, #12]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000ed00 	.word	0xe000ed00
 8006fbc:	05fa0000 	.word	0x05fa0000

08006fc0 <__NVIC_GetPriorityGrouping>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	f003 0307 	and.w	r3, r3, #7
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	e000ed00 	.word	0xe000ed00

08006fdc <__NVIC_SetPriority>:
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	db0a      	blt.n	8007006 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	490c      	ldr	r1, [pc, #48]	; (8007028 <__NVIC_SetPriority+0x4c>)
 8006ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffa:	0112      	lsls	r2, r2, #4
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	440b      	add	r3, r1
 8007000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007004:	e00a      	b.n	800701c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4908      	ldr	r1, [pc, #32]	; (800702c <__NVIC_SetPriority+0x50>)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	3b04      	subs	r3, #4
 8007014:	0112      	lsls	r2, r2, #4
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	440b      	add	r3, r1
 800701a:	761a      	strb	r2, [r3, #24]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	e000e100 	.word	0xe000e100
 800702c:	e000ed00 	.word	0xe000ed00

08007030 <NVIC_EncodePriority>:
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	; 0x24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f1c3 0307 	rsb	r3, r3, #7
 800704a:	2b04      	cmp	r3, #4
 800704c:	bf28      	it	cs
 800704e:	2304      	movcs	r3, #4
 8007050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	3304      	adds	r3, #4
 8007056:	2b06      	cmp	r3, #6
 8007058:	d902      	bls.n	8007060 <NVIC_EncodePriority+0x30>
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3b03      	subs	r3, #3
 800705e:	e000      	b.n	8007062 <NVIC_EncodePriority+0x32>
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43da      	mvns	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	401a      	ands	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007078:	f04f 31ff 	mov.w	r1, #4294967295
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	43d9      	mvns	r1, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007088:	4313      	orrs	r3, r2
}
 800708a:	4618      	mov	r0, r3
 800708c:	3724      	adds	r7, #36	; 0x24
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <SysTick_Config>:
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070a8:	d301      	bcc.n	80070ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80070aa:	2301      	movs	r3, #1
 80070ac:	e00f      	b.n	80070ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070ae:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <SysTick_Config+0x40>)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070b6:	210f      	movs	r1, #15
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	f7ff ff8e 	bl	8006fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <SysTick_Config+0x40>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070c6:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <SysTick_Config+0x40>)
 80070c8:	2207      	movs	r2, #7
 80070ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	e000e010 	.word	0xe000e010

080070dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff47 	bl	8006f78 <__NVIC_SetPriorityGrouping>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	4603      	mov	r3, r0
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007104:	f7ff ff5c 	bl	8006fc0 <__NVIC_GetPriorityGrouping>
 8007108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	6978      	ldr	r0, [r7, #20]
 8007110:	f7ff ff8e 	bl	8007030 <NVIC_EncodePriority>
 8007114:	4602      	mov	r2, r0
 8007116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff ff5d 	bl	8006fdc <__NVIC_SetPriority>
}
 8007122:	bf00      	nop
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ffb0 	bl	8007098 <SysTick_Config>
 8007138:	4603      	mov	r3, r0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e06a      	b.n	800722c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2223      	movs	r2, #35	; 0x23
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fa fbfd 	bl	8001968 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800716e:	4b31      	ldr	r3, [pc, #196]	; (8007234 <HAL_ETH_Init+0xf0>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	4a30      	ldr	r2, [pc, #192]	; (8007234 <HAL_ETH_Init+0xf0>)
 8007174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007178:	6453      	str	r3, [r2, #68]	; 0x44
 800717a:	4b2e      	ldr	r3, [pc, #184]	; (8007234 <HAL_ETH_Init+0xf0>)
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007186:	4b2c      	ldr	r3, [pc, #176]	; (8007238 <HAL_ETH_Init+0xf4>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4a2b      	ldr	r2, [pc, #172]	; (8007238 <HAL_ETH_Init+0xf4>)
 800718c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007190:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007192:	4b29      	ldr	r3, [pc, #164]	; (8007238 <HAL_ETH_Init+0xf4>)
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4927      	ldr	r1, [pc, #156]	; (8007238 <HAL_ETH_Init+0xf4>)
 800719c:	4313      	orrs	r3, r2
 800719e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <HAL_ETH_Init+0xf4>)
 80071a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071bc:	f7ff feac 	bl	8006f18 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80071c2:	e011      	b.n	80071e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80071c4:	f7ff fea8 	bl	8006f18 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071d2:	d909      	bls.n	80071e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	22e0      	movs	r2, #224	; 0xe0
 80071e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e021      	b.n	800722c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e4      	bne.n	80071c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f958 	bl	80074b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9ff 	bl	8007604 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa55 	bl	80076b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	461a      	mov	r2, r3
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9bd 	bl	8007594 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2210      	movs	r2, #16
 8007226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40023800 	.word	0x40023800
 8007238:	40013800 	.word	0x40013800

0800723c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4b51      	ldr	r3, [pc, #324]	; (8007398 <ETH_SetMACConfig+0x15c>)
 8007252:	4013      	ands	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	7c1b      	ldrb	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <ETH_SetMACConfig+0x28>
 800725e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007262:	e000      	b.n	8007266 <ETH_SetMACConfig+0x2a>
 8007264:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	7c5b      	ldrb	r3, [r3, #17]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <ETH_SetMACConfig+0x38>
 800726e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007272:	e000      	b.n	8007276 <ETH_SetMACConfig+0x3a>
 8007274:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007276:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800727c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	7fdb      	ldrb	r3, [r3, #31]
 8007282:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007284:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800728a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	7f92      	ldrb	r2, [r2, #30]
 8007290:	2a00      	cmp	r2, #0
 8007292:	d102      	bne.n	800729a <ETH_SetMACConfig+0x5e>
 8007294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007298:	e000      	b.n	800729c <ETH_SetMACConfig+0x60>
 800729a:	2200      	movs	r2, #0
                        macconf->Speed |
 800729c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	7f1b      	ldrb	r3, [r3, #28]
 80072a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80072a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80072aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	791b      	ldrb	r3, [r3, #4]
 80072b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80072b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d102      	bne.n	80072c4 <ETH_SetMACConfig+0x88>
 80072be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c2:	e000      	b.n	80072c6 <ETH_SetMACConfig+0x8a>
 80072c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80072c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	7bdb      	ldrb	r3, [r3, #15]
 80072cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80072ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80072d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80072de:	4313      	orrs	r3, r2
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80072f6:	2001      	movs	r0, #1
 80072f8:	f7ff fe1a 	bl	8006f30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007312:	4013      	ands	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007322:	2a00      	cmp	r2, #0
 8007324:	d101      	bne.n	800732a <ETH_SetMACConfig+0xee>
 8007326:	2280      	movs	r2, #128	; 0x80
 8007328:	e000      	b.n	800732c <ETH_SetMACConfig+0xf0>
 800732a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800732c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800733a:	2a01      	cmp	r2, #1
 800733c:	d101      	bne.n	8007342 <ETH_SetMACConfig+0x106>
 800733e:	2208      	movs	r2, #8
 8007340:	e000      	b.n	8007344 <ETH_SetMACConfig+0x108>
 8007342:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007344:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800734c:	2a01      	cmp	r2, #1
 800734e:	d101      	bne.n	8007354 <ETH_SetMACConfig+0x118>
 8007350:	2204      	movs	r2, #4
 8007352:	e000      	b.n	8007356 <ETH_SetMACConfig+0x11a>
 8007354:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800735e:	2a01      	cmp	r2, #1
 8007360:	d101      	bne.n	8007366 <ETH_SetMACConfig+0x12a>
 8007362:	2202      	movs	r2, #2
 8007364:	e000      	b.n	8007368 <ETH_SetMACConfig+0x12c>
 8007366:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007368:	4313      	orrs	r3, r2
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007380:	2001      	movs	r0, #1
 8007382:	f7ff fdd5 	bl	8006f30 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	619a      	str	r2, [r3, #24]
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	ff20810f 	.word	0xff20810f

0800739c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4b3d      	ldr	r3, [pc, #244]	; (80074ac <ETH_SetDMAConfig+0x110>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	7b1b      	ldrb	r3, [r3, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <ETH_SetDMAConfig+0x2c>
 80073c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80073c6:	e000      	b.n	80073ca <ETH_SetDMAConfig+0x2e>
 80073c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	7b5b      	ldrb	r3, [r3, #13]
 80073ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80073d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	7f52      	ldrb	r2, [r2, #29]
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	d102      	bne.n	80073e0 <ETH_SetDMAConfig+0x44>
 80073da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073de:	e000      	b.n	80073e2 <ETH_SetDMAConfig+0x46>
 80073e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80073e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	7b9b      	ldrb	r3, [r3, #14]
 80073e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80073ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80073f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	7f1b      	ldrb	r3, [r3, #28]
 80073f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80073f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	7f9b      	ldrb	r3, [r3, #30]
 80073fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007400:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007406:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800740e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007410:	4313      	orrs	r3, r2
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007420:	461a      	mov	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007432:	2001      	movs	r0, #1
 8007434:	f7ff fd7c 	bl	8006f30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007440:	461a      	mov	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007450:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007456:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800745c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007464:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007466:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800746e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007474:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800747e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007482:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007490:	2001      	movs	r0, #1
 8007492:	f7ff fd4d 	bl	8006f30 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	461a      	mov	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6013      	str	r3, [r2, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	f8de3f23 	.word	0xf8de3f23

080074b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0a6      	sub	sp, #152	; 0x98
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80074c4:	2300      	movs	r3, #0
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80074ec:	2300      	movs	r3, #0
 80074ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007516:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800751c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fe86 	bl	800723c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007530:	2301      	movs	r3, #1
 8007532:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007534:	2301      	movs	r3, #1
 8007536:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800753e:	2301      	movs	r3, #1
 8007540:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007546:	2300      	movs	r3, #0
 8007548:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007552:	2300      	movs	r3, #0
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800755c:	2301      	movs	r3, #1
 800755e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007564:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800756a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800756c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007570:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007578:	2300      	movs	r3, #0
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007580:	f107 0308 	add.w	r3, r7, #8
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ff08 	bl	800739c <ETH_SetDMAConfig>
}
 800758c:	bf00      	nop
 800758e:	3798      	adds	r7, #152	; 0x98
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3305      	adds	r3, #5
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	3204      	adds	r2, #4
 80075ac:	7812      	ldrb	r2, [r2, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <ETH_MACAddressConfig+0x68>)
 80075b6:	4413      	add	r3, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	061a      	lsls	r2, r3, #24
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3302      	adds	r3, #2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	041b      	lsls	r3, r3, #16
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3301      	adds	r3, #1
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	4313      	orrs	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <ETH_MACAddressConfig+0x6c>)
 80075e6:	4413      	add	r3, r2
 80075e8:	461a      	mov	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6013      	str	r3, [r2, #0]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40028040 	.word	0x40028040
 8007600:	40028044 	.word	0x40028044

08007604 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e03e      	b.n	8007690 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68d9      	ldr	r1, [r3, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	440b      	add	r3, r1
 8007622:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	3206      	adds	r2, #6
 8007644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d80c      	bhi.n	8007674 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68d9      	ldr	r1, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	440b      	add	r3, r1
 800766c:	461a      	mov	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	60da      	str	r2, [r3, #12]
 8007672:	e004      	b.n	800767e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b03      	cmp	r3, #3
 8007694:	d9bd      	bls.n	8007612 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a8:	611a      	str	r2, [r3, #16]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e046      	b.n	8007752 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6919      	ldr	r1, [r3, #16]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	440b      	add	r3, r1
 80076d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007700:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8007708:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	3212      	adds	r2, #18
 800771e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d80c      	bhi.n	8007742 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6919      	ldr	r1, [r3, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	440b      	add	r3, r1
 800773a:	461a      	mov	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	60da      	str	r2, [r3, #12]
 8007740:	e004      	b.n	800774c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	461a      	mov	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3301      	adds	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d9b5      	bls.n	80076c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007782:	60da      	str	r2, [r3, #12]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007790:	b480      	push	{r7}
 8007792:	b089      	sub	sp, #36	; 0x24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800779a:	2300      	movs	r3, #0
 800779c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e175      	b.n	8007a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80077b0:	2201      	movs	r2, #1
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4013      	ands	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	f040 8164 	bne.w	8007a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d005      	beq.n	80077e6 <HAL_GPIO_Init+0x56>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d130      	bne.n	8007848 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	2203      	movs	r2, #3
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	4013      	ands	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	4313      	orrs	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800781c:	2201      	movs	r2, #1
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	43db      	mvns	r3, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 0201 	and.w	r2, r3, #1
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4313      	orrs	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d017      	beq.n	8007884 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	2203      	movs	r2, #3
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	43db      	mvns	r3, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4313      	orrs	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d123      	bne.n	80078d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	08da      	lsrs	r2, r3, #3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3208      	adds	r2, #8
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	220f      	movs	r2, #15
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	43db      	mvns	r3, r3
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4013      	ands	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	08da      	lsrs	r2, r3, #3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3208      	adds	r2, #8
 80078d2:	69b9      	ldr	r1, [r7, #24]
 80078d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	2203      	movs	r2, #3
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	43db      	mvns	r3, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 0203 	and.w	r2, r3, #3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80be 	beq.w	8007a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800791a:	4b66      	ldr	r3, [pc, #408]	; (8007ab4 <HAL_GPIO_Init+0x324>)
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	4a65      	ldr	r2, [pc, #404]	; (8007ab4 <HAL_GPIO_Init+0x324>)
 8007920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007924:	6453      	str	r3, [r2, #68]	; 0x44
 8007926:	4b63      	ldr	r3, [pc, #396]	; (8007ab4 <HAL_GPIO_Init+0x324>)
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007932:	4a61      	ldr	r2, [pc, #388]	; (8007ab8 <HAL_GPIO_Init+0x328>)
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	3302      	adds	r3, #2
 800793a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800793e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	220f      	movs	r2, #15
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43db      	mvns	r3, r3
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4013      	ands	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a58      	ldr	r2, [pc, #352]	; (8007abc <HAL_GPIO_Init+0x32c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d037      	beq.n	80079ce <HAL_GPIO_Init+0x23e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a57      	ldr	r2, [pc, #348]	; (8007ac0 <HAL_GPIO_Init+0x330>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d031      	beq.n	80079ca <HAL_GPIO_Init+0x23a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a56      	ldr	r2, [pc, #344]	; (8007ac4 <HAL_GPIO_Init+0x334>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d02b      	beq.n	80079c6 <HAL_GPIO_Init+0x236>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a55      	ldr	r2, [pc, #340]	; (8007ac8 <HAL_GPIO_Init+0x338>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d025      	beq.n	80079c2 <HAL_GPIO_Init+0x232>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a54      	ldr	r2, [pc, #336]	; (8007acc <HAL_GPIO_Init+0x33c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01f      	beq.n	80079be <HAL_GPIO_Init+0x22e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a53      	ldr	r2, [pc, #332]	; (8007ad0 <HAL_GPIO_Init+0x340>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d019      	beq.n	80079ba <HAL_GPIO_Init+0x22a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a52      	ldr	r2, [pc, #328]	; (8007ad4 <HAL_GPIO_Init+0x344>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d013      	beq.n	80079b6 <HAL_GPIO_Init+0x226>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a51      	ldr	r2, [pc, #324]	; (8007ad8 <HAL_GPIO_Init+0x348>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00d      	beq.n	80079b2 <HAL_GPIO_Init+0x222>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a50      	ldr	r2, [pc, #320]	; (8007adc <HAL_GPIO_Init+0x34c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <HAL_GPIO_Init+0x21e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a4f      	ldr	r2, [pc, #316]	; (8007ae0 <HAL_GPIO_Init+0x350>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d101      	bne.n	80079aa <HAL_GPIO_Init+0x21a>
 80079a6:	2309      	movs	r3, #9
 80079a8:	e012      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079aa:	230a      	movs	r3, #10
 80079ac:	e010      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079ae:	2308      	movs	r3, #8
 80079b0:	e00e      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079b2:	2307      	movs	r3, #7
 80079b4:	e00c      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079b6:	2306      	movs	r3, #6
 80079b8:	e00a      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079ba:	2305      	movs	r3, #5
 80079bc:	e008      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079be:	2304      	movs	r3, #4
 80079c0:	e006      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079c2:	2303      	movs	r3, #3
 80079c4:	e004      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e002      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <HAL_GPIO_Init+0x240>
 80079ce:	2300      	movs	r3, #0
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	f002 0203 	and.w	r2, r2, #3
 80079d6:	0092      	lsls	r2, r2, #2
 80079d8:	4093      	lsls	r3, r2
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4313      	orrs	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80079e0:	4935      	ldr	r1, [pc, #212]	; (8007ab8 <HAL_GPIO_Init+0x328>)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	089b      	lsrs	r3, r3, #2
 80079e6:	3302      	adds	r3, #2
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079ee:	4b3d      	ldr	r3, [pc, #244]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a12:	4a34      	ldr	r2, [pc, #208]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a18:	4b32      	ldr	r3, [pc, #200]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a3c:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a42:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	43db      	mvns	r3, r3
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <HAL_GPIO_Init+0x354>)
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	61fb      	str	r3, [r7, #28]
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b0f      	cmp	r3, #15
 8007aa0:	f67f ae86 	bls.w	80077b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop
 8007aa8:	3724      	adds	r7, #36	; 0x24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	40013800 	.word	0x40013800
 8007abc:	40020000 	.word	0x40020000
 8007ac0:	40020400 	.word	0x40020400
 8007ac4:	40020800 	.word	0x40020800
 8007ac8:	40020c00 	.word	0x40020c00
 8007acc:	40021000 	.word	0x40021000
 8007ad0:	40021400 	.word	0x40021400
 8007ad4:	40021800 	.word	0x40021800
 8007ad8:	40021c00 	.word	0x40021c00
 8007adc:	40022000 	.word	0x40022000
 8007ae0:	40022400 	.word	0x40022400
 8007ae4:	40013c00 	.word	0x40013c00

08007ae8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007af2:	2300      	movs	r3, #0
 8007af4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	e0d9      	b.n	8007cb8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007b04:	2201      	movs	r2, #1
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	4013      	ands	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	f040 80c9 	bne.w	8007cb2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007b20:	4a6b      	ldr	r2, [pc, #428]	; (8007cd0 <HAL_GPIO_DeInit+0x1e8>)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	3302      	adds	r3, #2
 8007b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	220f      	movs	r2, #15
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a63      	ldr	r2, [pc, #396]	; (8007cd4 <HAL_GPIO_DeInit+0x1ec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d037      	beq.n	8007bba <HAL_GPIO_DeInit+0xd2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a62      	ldr	r2, [pc, #392]	; (8007cd8 <HAL_GPIO_DeInit+0x1f0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d031      	beq.n	8007bb6 <HAL_GPIO_DeInit+0xce>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a61      	ldr	r2, [pc, #388]	; (8007cdc <HAL_GPIO_DeInit+0x1f4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02b      	beq.n	8007bb2 <HAL_GPIO_DeInit+0xca>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a60      	ldr	r2, [pc, #384]	; (8007ce0 <HAL_GPIO_DeInit+0x1f8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d025      	beq.n	8007bae <HAL_GPIO_DeInit+0xc6>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a5f      	ldr	r2, [pc, #380]	; (8007ce4 <HAL_GPIO_DeInit+0x1fc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01f      	beq.n	8007baa <HAL_GPIO_DeInit+0xc2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a5e      	ldr	r2, [pc, #376]	; (8007ce8 <HAL_GPIO_DeInit+0x200>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d019      	beq.n	8007ba6 <HAL_GPIO_DeInit+0xbe>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a5d      	ldr	r2, [pc, #372]	; (8007cec <HAL_GPIO_DeInit+0x204>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_GPIO_DeInit+0xba>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a5c      	ldr	r2, [pc, #368]	; (8007cf0 <HAL_GPIO_DeInit+0x208>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00d      	beq.n	8007b9e <HAL_GPIO_DeInit+0xb6>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a5b      	ldr	r2, [pc, #364]	; (8007cf4 <HAL_GPIO_DeInit+0x20c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <HAL_GPIO_DeInit+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a5a      	ldr	r2, [pc, #360]	; (8007cf8 <HAL_GPIO_DeInit+0x210>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <HAL_GPIO_DeInit+0xae>
 8007b92:	2309      	movs	r3, #9
 8007b94:	e012      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007b96:	230a      	movs	r3, #10
 8007b98:	e010      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	e00e      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	e00c      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007ba2:	2306      	movs	r3, #6
 8007ba4:	e00a      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007ba6:	2305      	movs	r3, #5
 8007ba8:	e008      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007baa:	2304      	movs	r3, #4
 8007bac:	e006      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e004      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e002      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <HAL_GPIO_DeInit+0xd4>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	f002 0203 	and.w	r2, r2, #3
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	4093      	lsls	r3, r2
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d132      	bne.n	8007c32 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007bcc:	4b4b      	ldr	r3, [pc, #300]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	4949      	ldr	r1, [pc, #292]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007bda:	4b48      	ldr	r3, [pc, #288]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	43db      	mvns	r3, r3
 8007be2:	4946      	ldr	r1, [pc, #280]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007be8:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	4942      	ldr	r1, [pc, #264]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007bf6:	4b41      	ldr	r3, [pc, #260]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	493f      	ldr	r1, [pc, #252]	; (8007cfc <HAL_GPIO_DeInit+0x214>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	220f      	movs	r2, #15
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007c14:	4a2e      	ldr	r2, [pc, #184]	; (8007cd0 <HAL_GPIO_DeInit+0x1e8>)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	089b      	lsrs	r3, r3, #2
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	43da      	mvns	r2, r3
 8007c24:	482a      	ldr	r0, [pc, #168]	; (8007cd0 <HAL_GPIO_DeInit+0x1e8>)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	089b      	lsrs	r3, r3, #2
 8007c2a:	400a      	ands	r2, r1
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	2103      	movs	r1, #3
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	08da      	lsrs	r2, r3, #3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3208      	adds	r2, #8
 8007c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	220f      	movs	r2, #15
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	43db      	mvns	r3, r3
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	08d2      	lsrs	r2, r2, #3
 8007c68:	4019      	ands	r1, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3208      	adds	r2, #8
 8007c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	2103      	movs	r1, #3
 8007c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	401a      	ands	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	43db      	mvns	r3, r3
 8007c96:	401a      	ands	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	2103      	movs	r1, #3
 8007ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	401a      	ands	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	f67f af22 	bls.w	8007b04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40013800 	.word	0x40013800
 8007cd4:	40020000 	.word	0x40020000
 8007cd8:	40020400 	.word	0x40020400
 8007cdc:	40020800 	.word	0x40020800
 8007ce0:	40020c00 	.word	0x40020c00
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40021400 	.word	0x40021400
 8007cec:	40021800 	.word	0x40021800
 8007cf0:	40021c00 	.word	0x40021c00
 8007cf4:	40022000 	.word	0x40022000
 8007cf8:	40022400 	.word	0x40022400
 8007cfc:	40013c00 	.word	0x40013c00

08007d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
 8007d1c:	e001      	b.n	8007d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d40:	787b      	ldrb	r3, [r7, #1]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d46:	887a      	ldrh	r2, [r7, #2]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007d4c:	e003      	b.n	8007d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007d4e:	887b      	ldrh	r3, [r7, #2]
 8007d50:	041a      	lsls	r2, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	619a      	str	r2, [r3, #24]
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
	...

08007d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e07f      	b.n	8007e76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f8a9 	bl	8007ee2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2224      	movs	r2, #36	; 0x24
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d107      	bne.n	8007dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	e006      	b.n	8007dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d104      	bne.n	8007dfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <HAL_I2C_Init+0x11c>)
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69d9      	ldr	r1, [r3, #28]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0201 	orr.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	02008000 	.word	0x02008000

08007e84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e021      	b.n	8007eda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2224      	movs	r2, #36	; 0x24
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0201 	bic.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f821 	bl	8007ef6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	813b      	strh	r3, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	f040 80f9 	bne.w	8008126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <HAL_I2C_Mem_Write+0x34>
 8007f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d105      	bne.n	8007f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0ed      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <HAL_I2C_Mem_Write+0x4e>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e0e6      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f62:	f7fe ffd9 	bl	8006f18 <HAL_GetTick>
 8007f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2319      	movs	r3, #25
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fadd 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0d1      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2221      	movs	r2, #33	; 0x21
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2240      	movs	r2, #64	; 0x40
 8007f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fac:	88f8      	ldrh	r0, [r7, #6]
 8007fae:	893a      	ldrh	r2, [r7, #8]
 8007fb0:	8979      	ldrh	r1, [r7, #10]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4603      	mov	r3, r0
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f9ed 	bl	800839c <I2C_RequestMemoryWrite>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e0a9      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2bff      	cmp	r3, #255	; 0xff
 8007fdc:	d90e      	bls.n	8007ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	22ff      	movs	r2, #255	; 0xff
 8007fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	8979      	ldrh	r1, [r7, #10]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fc39 	bl	800886c <I2C_TransferConfig>
 8007ffa:	e00f      	b.n	800801c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800a:	b2da      	uxtb	r2, r3
 800800c:	8979      	ldrh	r1, [r7, #10]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fc28 	bl	800886c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fac7 	bl	80085b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e07b      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804a:	b29b      	uxth	r3, r3
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008058:	3b01      	subs	r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d034      	beq.n	80080d4 <HAL_I2C_Mem_Write+0x1c8>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	d130      	bne.n	80080d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	2200      	movs	r2, #0
 800807a:	2180      	movs	r1, #128	; 0x80
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fa59 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e04d      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008090:	b29b      	uxth	r3, r3
 8008092:	2bff      	cmp	r3, #255	; 0xff
 8008094:	d90e      	bls.n	80080b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	22ff      	movs	r2, #255	; 0xff
 800809a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	8979      	ldrh	r1, [r7, #10]
 80080a4:	2300      	movs	r3, #0
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 fbdd 	bl	800886c <I2C_TransferConfig>
 80080b2:	e00f      	b.n	80080d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	8979      	ldrh	r1, [r7, #10]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fbcc 	bl	800886c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d19e      	bne.n	800801c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 faa6 	bl	8008634 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e01a      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2220      	movs	r2, #32
 80080f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6859      	ldr	r1, [r3, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <HAL_I2C_Mem_Write+0x224>)
 8008106:	400b      	ands	r3, r1
 8008108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	e000      	b.n	8008128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008126:	2302      	movs	r3, #2
  }
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	fe00e800 	.word	0xfe00e800

08008134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	461a      	mov	r2, r3
 8008142:	4603      	mov	r3, r0
 8008144:	817b      	strh	r3, [r7, #10]
 8008146:	460b      	mov	r3, r1
 8008148:	813b      	strh	r3, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b20      	cmp	r3, #32
 8008158:	f040 80fd 	bne.w	8008356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_I2C_Mem_Read+0x34>
 8008162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d105      	bne.n	8008174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0f1      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <HAL_I2C_Mem_Read+0x4e>
 800817e:	2302      	movs	r3, #2
 8008180:	e0ea      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800818a:	f7fe fec5 	bl	8006f18 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2319      	movs	r3, #25
 8008196:	2201      	movs	r2, #1
 8008198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f9c9 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0d5      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2222      	movs	r2, #34	; 0x22
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2240      	movs	r2, #64	; 0x40
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a3a      	ldr	r2, [r7, #32]
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081d4:	88f8      	ldrh	r0, [r7, #6]
 80081d6:	893a      	ldrh	r2, [r7, #8]
 80081d8:	8979      	ldrh	r1, [r7, #10]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	4603      	mov	r3, r0
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f92d 	bl	8008444 <I2C_RequestMemoryRead>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e0ad      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29b      	uxth	r3, r3
 8008202:	2bff      	cmp	r3, #255	; 0xff
 8008204:	d90e      	bls.n	8008224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	22ff      	movs	r2, #255	; 0xff
 800820a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	8979      	ldrh	r1, [r7, #10]
 8008214:	4b52      	ldr	r3, [pc, #328]	; (8008360 <HAL_I2C_Mem_Read+0x22c>)
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fb25 	bl	800886c <I2C_TransferConfig>
 8008222:	e00f      	b.n	8008244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008232:	b2da      	uxtb	r2, r3
 8008234:	8979      	ldrh	r1, [r7, #10]
 8008236:	4b4a      	ldr	r3, [pc, #296]	; (8008360 <HAL_I2C_Mem_Read+0x22c>)
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fb14 	bl	800886c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	2200      	movs	r2, #0
 800824c:	2104      	movs	r1, #4
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f970 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e07c      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d034      	beq.n	8008304 <HAL_I2C_Mem_Read+0x1d0>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d130      	bne.n	8008304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2200      	movs	r2, #0
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f941 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e04d      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2bff      	cmp	r3, #255	; 0xff
 80082c4:	d90e      	bls.n	80082e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	22ff      	movs	r2, #255	; 0xff
 80082ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	8979      	ldrh	r1, [r7, #10]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fac5 	bl	800886c <I2C_TransferConfig>
 80082e2:	e00f      	b.n	8008304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	8979      	ldrh	r1, [r7, #10]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fab4 	bl	800886c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d19a      	bne.n	8008244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f98e 	bl	8008634 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e01a      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2220      	movs	r2, #32
 8008328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6859      	ldr	r1, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_I2C_Mem_Read+0x230>)
 8008336:	400b      	ands	r3, r1
 8008338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008356:	2302      	movs	r3, #2
  }
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	80002400 	.word	0x80002400
 8008364:	fe00e800 	.word	0xfe00e800

08008368 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008376:	b2db      	uxtb	r3, r3
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	461a      	mov	r2, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	817b      	strh	r3, [r7, #10]
 80083ae:	460b      	mov	r3, r1
 80083b0:	813b      	strh	r3, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	8979      	ldrh	r1, [r7, #10]
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <I2C_RequestMemoryWrite+0xa4>)
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fa51 	bl	800886c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f8f0 	bl	80085b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e02c      	b.n	8008438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d105      	bne.n	80083f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083e4:	893b      	ldrh	r3, [r7, #8]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	629a      	str	r2, [r3, #40]	; 0x28
 80083ee:	e015      	b.n	800841c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083f0:	893b      	ldrh	r3, [r7, #8]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f8d6 	bl	80085b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e012      	b.n	8008438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008412:	893b      	ldrh	r3, [r7, #8]
 8008414:	b2da      	uxtb	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2200      	movs	r2, #0
 8008424:	2180      	movs	r1, #128	; 0x80
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f884 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	80002000 	.word	0x80002000

08008444 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	4608      	mov	r0, r1
 800844e:	4611      	mov	r1, r2
 8008450:	461a      	mov	r2, r3
 8008452:	4603      	mov	r3, r0
 8008454:	817b      	strh	r3, [r7, #10]
 8008456:	460b      	mov	r3, r1
 8008458:	813b      	strh	r3, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	8979      	ldrh	r1, [r7, #10]
 8008464:	4b20      	ldr	r3, [pc, #128]	; (80084e8 <I2C_RequestMemoryRead+0xa4>)
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	2300      	movs	r3, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f9fe 	bl	800886c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	69b9      	ldr	r1, [r7, #24]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f89d 	bl	80085b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e02c      	b.n	80084de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d105      	bne.n	8008496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800848a:	893b      	ldrh	r3, [r7, #8]
 800848c:	b2da      	uxtb	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	629a      	str	r2, [r3, #40]	; 0x28
 8008494:	e015      	b.n	80084c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008496:	893b      	ldrh	r3, [r7, #8]
 8008498:	0a1b      	lsrs	r3, r3, #8
 800849a:	b29b      	uxth	r3, r3
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f883 	bl	80085b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e012      	b.n	80084de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2200      	movs	r2, #0
 80084ca:	2140      	movs	r1, #64	; 0x40
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f831 	bl	8008534 <I2C_WaitOnFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	80002000 	.word	0x80002000

080084ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d103      	bne.n	800850a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b01      	cmp	r3, #1
 8008516:	d007      	beq.n	8008528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	619a      	str	r2, [r3, #24]
  }
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008544:	e022      	b.n	800858c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d01e      	beq.n	800858c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800854e:	f7fe fce3 	bl	8006f18 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d302      	bcc.n	8008564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d113      	bne.n	800858c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008568:	f043 0220 	orr.w	r2, r3, #32
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e00f      	b.n	80085ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d0cd      	beq.n	8008546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085c0:	e02c      	b.n	800861c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f870 	bl	80086ac <I2C_IsErrorOccurred>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e02a      	b.n	800862c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d01e      	beq.n	800861c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085de:	f7fe fc9b 	bl	8006f18 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d302      	bcc.n	80085f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d113      	bne.n	800861c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f8:	f043 0220 	orr.w	r2, r3, #32
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e007      	b.n	800862c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b02      	cmp	r3, #2
 8008628:	d1cb      	bne.n	80085c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008640:	e028      	b.n	8008694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f830 	bl	80086ac <I2C_IsErrorOccurred>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e026      	b.n	80086a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fe fc5f 	bl	8006f18 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d113      	bne.n	8008694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e007      	b.n	80086a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d1cf      	bne.n	8008642 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	; 0x28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d068      	beq.n	80087aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2210      	movs	r2, #16
 80086de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086e0:	e049      	b.n	8008776 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e8:	d045      	beq.n	8008776 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086ea:	f7fe fc15 	bl	8006f18 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d302      	bcc.n	8008700 <I2C_IsErrorOccurred+0x54>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d13a      	bne.n	8008776 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800870a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008722:	d121      	bne.n	8008768 <I2C_IsErrorOccurred+0xbc>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800872a:	d01d      	beq.n	8008768 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800872c:	7cfb      	ldrb	r3, [r7, #19]
 800872e:	2b20      	cmp	r3, #32
 8008730:	d01a      	beq.n	8008768 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008742:	f7fe fbe9 	bl	8006f18 <HAL_GetTick>
 8008746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008748:	e00e      	b.n	8008768 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800874a:	f7fe fbe5 	bl	8006f18 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b19      	cmp	r3, #25
 8008756:	d907      	bls.n	8008768 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	f043 0320 	orr.w	r3, r3, #32
 800875e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008766:	e006      	b.n	8008776 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b20      	cmp	r3, #32
 8008774:	d1e9      	bne.n	800874a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b20      	cmp	r3, #32
 8008782:	d003      	beq.n	800878c <I2C_IsErrorOccurred+0xe0>
 8008784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0aa      	beq.n	80086e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800878c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2220      	movs	r2, #32
 800879a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f043 0304 	orr.w	r3, r3, #4
 80087a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	f043 0308 	orr.w	r3, r3, #8
 80087e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	f043 0302 	orr.w	r3, r3, #2
 8008806:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01c      	beq.n	800885a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fe63 	bl	80084ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6859      	ldr	r1, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <I2C_IsErrorOccurred+0x1bc>)
 8008832:	400b      	ands	r3, r1
 8008834:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800885a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800885e:	4618      	mov	r0, r3
 8008860:	3728      	adds	r7, #40	; 0x28
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	fe00e800 	.word	0xfe00e800

0800886c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	817b      	strh	r3, [r7, #10]
 800887a:	4613      	mov	r3, r2
 800887c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800887e:	897b      	ldrh	r3, [r7, #10]
 8008880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008884:	7a7b      	ldrb	r3, [r7, #9]
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800888c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	4313      	orrs	r3, r2
 8008896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800889a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	0d5b      	lsrs	r3, r3, #21
 80088a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80088aa:	4b08      	ldr	r3, [pc, #32]	; (80088cc <I2C_TransferConfig+0x60>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	43db      	mvns	r3, r3
 80088b0:	ea02 0103 	and.w	r1, r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	03ff63ff 	.word	0x03ff63ff

080088d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d138      	bne.n	8008958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e032      	b.n	800895a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2224      	movs	r2, #36	; 0x24
 8008900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b20      	cmp	r3, #32
 800897a:	d139      	bne.n	80089f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008986:	2302      	movs	r3, #2
 8008988:	e033      	b.n	80089f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2224      	movs	r2, #36	; 0x24
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0201 	bic.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e000      	b.n	80089f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80089fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a00:	b08f      	sub	sp, #60	; 0x3c
 8008a02:	af0a      	add	r7, sp, #40	; 0x28
 8008a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e116      	b.n	8008c3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7f9 f8b4 	bl	8001b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2203      	movs	r2, #3
 8008a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d102      	bne.n	8008a4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fe92 	bl	800a778 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	687e      	ldr	r6, [r7, #4]
 8008a5c:	466d      	mov	r5, sp
 8008a5e:	f106 0410 	add.w	r4, r6, #16
 8008a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a72:	1d33      	adds	r3, r6, #4
 8008a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a76:	6838      	ldr	r0, [r7, #0]
 8008a78:	f001 fe26 	bl	800a6c8 <USB_CoreInit>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e0d7      	b.n	8008c3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2100      	movs	r1, #0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 fe80 	bl	800a79a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
 8008a9e:	e04a      	b.n	8008b36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008aa0:	7bfa      	ldrb	r2, [r7, #15]
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	333d      	adds	r3, #61	; 0x3d
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ab4:	7bfa      	ldrb	r2, [r7, #15]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	333c      	adds	r3, #60	; 0x3c
 8008ac4:	7bfa      	ldrb	r2, [r7, #15]
 8008ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	b298      	uxth	r0, r3
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	3344      	adds	r3, #68	; 0x44
 8008adc:	4602      	mov	r2, r0
 8008ade:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ae0:	7bfa      	ldrb	r2, [r7, #15]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3340      	adds	r3, #64	; 0x40
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008af4:	7bfa      	ldrb	r2, [r7, #15]
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	3348      	adds	r3, #72	; 0x48
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b08:	7bfa      	ldrb	r2, [r7, #15]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	334c      	adds	r3, #76	; 0x4c
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b1c:	7bfa      	ldrb	r2, [r7, #15]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	3354      	adds	r3, #84	; 0x54
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	3301      	adds	r3, #1
 8008b34:	73fb      	strb	r3, [r7, #15]
 8008b36:	7bfa      	ldrb	r2, [r7, #15]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d3af      	bcc.n	8008aa0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
 8008b44:	e044      	b.n	8008bd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b46:	7bfa      	ldrb	r2, [r7, #15]
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008b5c:	7bfa      	ldrb	r2, [r7, #15]
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b72:	7bfa      	ldrb	r2, [r7, #15]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008b88:	7bfa      	ldrb	r2, [r7, #15]
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	73fb      	strb	r3, [r7, #15]
 8008bd0:	7bfa      	ldrb	r2, [r7, #15]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d3b5      	bcc.n	8008b46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	687e      	ldr	r6, [r7, #4]
 8008be2:	466d      	mov	r5, sp
 8008be4:	f106 0410 	add.w	r4, r6, #16
 8008be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008bf8:	1d33      	adds	r3, r6, #4
 8008bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bfc:	6838      	ldr	r0, [r7, #0]
 8008bfe:	f001 fe19 	bl	800a834 <USB_DevInit>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e014      	b.n	8008c3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d102      	bne.n	8008c32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f80b 	bl	8008c48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 ffd7 	bl	800abea <USB_DevDisconnect>

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <HAL_PCDEx_ActivateLPM+0x44>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	10000003 	.word	0x10000003

08008c90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a04      	ldr	r2, [pc, #16]	; (8008cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c9e:	6013      	str	r3, [r2, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	40007000 	.word	0x40007000

08008cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e291      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8087 	beq.w	8008de2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cd4:	4b96      	ldr	r3, [pc, #600]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 030c 	and.w	r3, r3, #12
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d00c      	beq.n	8008cfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ce0:	4b93      	ldr	r3, [pc, #588]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 030c 	and.w	r3, r3, #12
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d112      	bne.n	8008d12 <HAL_RCC_OscConfig+0x62>
 8008cec:	4b90      	ldr	r3, [pc, #576]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf8:	d10b      	bne.n	8008d12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cfa:	4b8d      	ldr	r3, [pc, #564]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d06c      	beq.n	8008de0 <HAL_RCC_OscConfig+0x130>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d168      	bne.n	8008de0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e26b      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCC_OscConfig+0x7a>
 8008d1c:	4b84      	ldr	r3, [pc, #528]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a83      	ldr	r2, [pc, #524]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	e02e      	b.n	8008d88 <HAL_RCC_OscConfig+0xd8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCC_OscConfig+0x9c>
 8008d32:	4b7f      	ldr	r3, [pc, #508]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7e      	ldr	r2, [pc, #504]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	4b7c      	ldr	r3, [pc, #496]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a7b      	ldr	r2, [pc, #492]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	e01d      	b.n	8008d88 <HAL_RCC_OscConfig+0xd8>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d54:	d10c      	bne.n	8008d70 <HAL_RCC_OscConfig+0xc0>
 8008d56:	4b76      	ldr	r3, [pc, #472]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a75      	ldr	r2, [pc, #468]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4b73      	ldr	r3, [pc, #460]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a72      	ldr	r2, [pc, #456]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e00b      	b.n	8008d88 <HAL_RCC_OscConfig+0xd8>
 8008d70:	4b6f      	ldr	r3, [pc, #444]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a6e      	ldr	r2, [pc, #440]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	4b6c      	ldr	r3, [pc, #432]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a6b      	ldr	r2, [pc, #428]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d013      	beq.n	8008db8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7fe f8c2 	bl	8006f18 <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d98:	f7fe f8be 	bl	8006f18 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b64      	cmp	r3, #100	; 0x64
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e21f      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008daa:	4b61      	ldr	r3, [pc, #388]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0xe8>
 8008db6:	e014      	b.n	8008de2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fe f8ae 	bl	8006f18 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dc0:	f7fe f8aa 	bl	8006f18 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b64      	cmp	r3, #100	; 0x64
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e20b      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dd2:	4b57      	ldr	r3, [pc, #348]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x110>
 8008dde:	e000      	b.n	8008de2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d069      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dee:	4b50      	ldr	r3, [pc, #320]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 030c 	and.w	r3, r3, #12
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dfa:	4b4d      	ldr	r3, [pc, #308]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d11c      	bne.n	8008e40 <HAL_RCC_OscConfig+0x190>
 8008e06:	4b4a      	ldr	r3, [pc, #296]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d116      	bne.n	8008e40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e12:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <HAL_RCC_OscConfig+0x17a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d001      	beq.n	8008e2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e1df      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e2a:	4b41      	ldr	r3, [pc, #260]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	493d      	ldr	r1, [pc, #244]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e3e:	e040      	b.n	8008ec2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d023      	beq.n	8008e90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e48:	4b39      	ldr	r3, [pc, #228]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a38      	ldr	r2, [pc, #224]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fe f860 	bl	8006f18 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e5c:	f7fe f85c 	bl	8006f18 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e1bd      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e6e:	4b30      	ldr	r3, [pc, #192]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e7a:	4b2d      	ldr	r3, [pc, #180]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4929      	ldr	r1, [pc, #164]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	600b      	str	r3, [r1, #0]
 8008e8e:	e018      	b.n	8008ec2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e90:	4b27      	ldr	r3, [pc, #156]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008e96:	f023 0301 	bic.w	r3, r3, #1
 8008e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fe f83c 	bl	8006f18 <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ea4:	f7fe f838 	bl	8006f18 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e199      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eb6:	4b1e      	ldr	r3, [pc, #120]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1f0      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d038      	beq.n	8008f40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d019      	beq.n	8008f0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ed6:	4b16      	ldr	r3, [pc, #88]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eda:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ee2:	f7fe f819 	bl	8006f18 <HAL_GetTick>
 8008ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ee8:	e008      	b.n	8008efc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eea:	f7fe f815 	bl	8006f18 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e176      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008efc:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0f0      	beq.n	8008eea <HAL_RCC_OscConfig+0x23a>
 8008f08:	e01a      	b.n	8008f40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f0e:	4a08      	ldr	r2, [pc, #32]	; (8008f30 <HAL_RCC_OscConfig+0x280>)
 8008f10:	f023 0301 	bic.w	r3, r3, #1
 8008f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f16:	f7fd ffff 	bl	8006f18 <HAL_GetTick>
 8008f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f1c:	e00a      	b.n	8008f34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f1e:	f7fd fffb 	bl	8006f18 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d903      	bls.n	8008f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e15c      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
 8008f30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f34:	4b91      	ldr	r3, [pc, #580]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1ee      	bne.n	8008f1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80a4 	beq.w	8009096 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f4e:	4b8b      	ldr	r3, [pc, #556]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10d      	bne.n	8008f76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f5a:	4b88      	ldr	r3, [pc, #544]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	4a87      	ldr	r2, [pc, #540]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f64:	6413      	str	r3, [r2, #64]	; 0x40
 8008f66:	4b85      	ldr	r3, [pc, #532]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6e:	60bb      	str	r3, [r7, #8]
 8008f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f76:	4b82      	ldr	r3, [pc, #520]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d118      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008f82:	4b7f      	ldr	r3, [pc, #508]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a7e      	ldr	r2, [pc, #504]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f8e:	f7fd ffc3 	bl	8006f18 <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f94:	e008      	b.n	8008fa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f96:	f7fd ffbf 	bl	8006f18 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b64      	cmp	r3, #100	; 0x64
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e120      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fa8:	4b75      	ldr	r3, [pc, #468]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d0f0      	beq.n	8008f96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d106      	bne.n	8008fca <HAL_RCC_OscConfig+0x31a>
 8008fbc:	4b6f      	ldr	r3, [pc, #444]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc0:	4a6e      	ldr	r2, [pc, #440]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fc2:	f043 0301 	orr.w	r3, r3, #1
 8008fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc8:	e02d      	b.n	8009026 <HAL_RCC_OscConfig+0x376>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10c      	bne.n	8008fec <HAL_RCC_OscConfig+0x33c>
 8008fd2:	4b6a      	ldr	r3, [pc, #424]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	4a69      	ldr	r2, [pc, #420]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008fde:	4b67      	ldr	r3, [pc, #412]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe2:	4a66      	ldr	r2, [pc, #408]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008fe4:	f023 0304 	bic.w	r3, r3, #4
 8008fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8008fea:	e01c      	b.n	8009026 <HAL_RCC_OscConfig+0x376>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2b05      	cmp	r3, #5
 8008ff2:	d10c      	bne.n	800900e <HAL_RCC_OscConfig+0x35e>
 8008ff4:	4b61      	ldr	r3, [pc, #388]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff8:	4a60      	ldr	r2, [pc, #384]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8008ffa:	f043 0304 	orr.w	r3, r3, #4
 8008ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8009000:	4b5e      	ldr	r3, [pc, #376]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009004:	4a5d      	ldr	r2, [pc, #372]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	6713      	str	r3, [r2, #112]	; 0x70
 800900c:	e00b      	b.n	8009026 <HAL_RCC_OscConfig+0x376>
 800900e:	4b5b      	ldr	r3, [pc, #364]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	4a5a      	ldr	r2, [pc, #360]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	6713      	str	r3, [r2, #112]	; 0x70
 800901a:	4b58      	ldr	r3, [pc, #352]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800901c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901e:	4a57      	ldr	r2, [pc, #348]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d015      	beq.n	800905a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800902e:	f7fd ff73 	bl	8006f18 <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009034:	e00a      	b.n	800904c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009036:	f7fd ff6f 	bl	8006f18 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f241 3288 	movw	r2, #5000	; 0x1388
 8009044:	4293      	cmp	r3, r2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e0ce      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800904c:	4b4b      	ldr	r3, [pc, #300]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800904e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0ee      	beq.n	8009036 <HAL_RCC_OscConfig+0x386>
 8009058:	e014      	b.n	8009084 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905a:	f7fd ff5d 	bl	8006f18 <HAL_GetTick>
 800905e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009060:	e00a      	b.n	8009078 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009062:	f7fd ff59 	bl	8006f18 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009070:	4293      	cmp	r3, r2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e0b8      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009078:	4b40      	ldr	r3, [pc, #256]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ee      	bne.n	8009062 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d105      	bne.n	8009096 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800908a:	4b3c      	ldr	r3, [pc, #240]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	4a3b      	ldr	r2, [pc, #236]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80a4 	beq.w	80091e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090a0:	4b36      	ldr	r3, [pc, #216]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 030c 	and.w	r3, r3, #12
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d06b      	beq.n	8009184 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d149      	bne.n	8009148 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b4:	4b31      	ldr	r3, [pc, #196]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a30      	ldr	r2, [pc, #192]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 80090ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c0:	f7fd ff2a 	bl	8006f18 <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090c8:	f7fd ff26 	bl	8006f18 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e087      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090da:	4b28      	ldr	r3, [pc, #160]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1f0      	bne.n	80090c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69da      	ldr	r2, [r3, #28]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	019b      	lsls	r3, r3, #6
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	3b01      	subs	r3, #1
 8009100:	041b      	lsls	r3, r3, #16
 8009102:	431a      	orrs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	061b      	lsls	r3, r3, #24
 800910a:	4313      	orrs	r3, r2
 800910c:	4a1b      	ldr	r2, [pc, #108]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800910e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009112:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a18      	ldr	r2, [pc, #96]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800911a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800911e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fd fefa 	bl	8006f18 <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009128:	f7fd fef6 	bl	8006f18 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e057      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800913a:	4b10      	ldr	r3, [pc, #64]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <HAL_RCC_OscConfig+0x478>
 8009146:	e04f      	b.n	80091e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a0b      	ldr	r2, [pc, #44]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 800914e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009154:	f7fd fee0 	bl	8006f18 <HAL_GetTick>
 8009158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800915c:	f7fd fedc 	bl	8006f18 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e03d      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800916e:	4b03      	ldr	r3, [pc, #12]	; (800917c <HAL_RCC_OscConfig+0x4cc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f0      	bne.n	800915c <HAL_RCC_OscConfig+0x4ac>
 800917a:	e035      	b.n	80091e8 <HAL_RCC_OscConfig+0x538>
 800917c:	40023800 	.word	0x40023800
 8009180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009184:	4b1b      	ldr	r3, [pc, #108]	; (80091f4 <HAL_RCC_OscConfig+0x544>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d028      	beq.n	80091e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800919c:	429a      	cmp	r2, r3
 800919e:	d121      	bne.n	80091e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d11a      	bne.n	80091e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091b4:	4013      	ands	r3, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091bc:	4293      	cmp	r3, r2
 80091be:	d111      	bne.n	80091e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	3b01      	subs	r3, #1
 80091ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d107      	bne.n	80091e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d001      	beq.n	80091e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40023800 	.word	0x40023800

080091f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0d0      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009210:	4b6a      	ldr	r3, [pc, #424]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d910      	bls.n	8009240 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921e:	4b67      	ldr	r3, [pc, #412]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f023 020f 	bic.w	r2, r3, #15
 8009226:	4965      	ldr	r1, [pc, #404]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	4313      	orrs	r3, r2
 800922c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800922e:	4b63      	ldr	r3, [pc, #396]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d001      	beq.n	8009240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e0b8      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d020      	beq.n	800928e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009258:	4b59      	ldr	r3, [pc, #356]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	4a58      	ldr	r2, [pc, #352]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800925e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009262:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009270:	4b53      	ldr	r3, [pc, #332]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	4a52      	ldr	r2, [pc, #328]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800927a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800927c:	4b50      	ldr	r3, [pc, #320]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	494d      	ldr	r1, [pc, #308]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800928a:	4313      	orrs	r3, r2
 800928c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d040      	beq.n	800931c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d107      	bne.n	80092b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092a2:	4b47      	ldr	r3, [pc, #284]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d115      	bne.n	80092da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e07f      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d107      	bne.n	80092ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092ba:	4b41      	ldr	r3, [pc, #260]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e073      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ca:	4b3d      	ldr	r3, [pc, #244]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e06b      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092da:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f023 0203 	bic.w	r2, r3, #3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	4936      	ldr	r1, [pc, #216]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ec:	f7fd fe14 	bl	8006f18 <HAL_GetTick>
 80092f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f2:	e00a      	b.n	800930a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092f4:	f7fd fe10 	bl	8006f18 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009302:	4293      	cmp	r3, r2
 8009304:	d901      	bls.n	800930a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e053      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800930a:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 020c 	and.w	r2, r3, #12
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	429a      	cmp	r2, r3
 800931a:	d1eb      	bne.n	80092f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800931c:	4b27      	ldr	r3, [pc, #156]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d210      	bcs.n	800934c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932a:	4b24      	ldr	r3, [pc, #144]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f023 020f 	bic.w	r2, r3, #15
 8009332:	4922      	ldr	r1, [pc, #136]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	4313      	orrs	r3, r2
 8009338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800933a:	4b20      	ldr	r3, [pc, #128]	; (80093bc <HAL_RCC_ClockConfig+0x1c4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d001      	beq.n	800934c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e032      	b.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d008      	beq.n	800936a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009358:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	4916      	ldr	r1, [pc, #88]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009366:	4313      	orrs	r3, r2
 8009368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009376:	4b12      	ldr	r3, [pc, #72]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	490e      	ldr	r1, [pc, #56]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009386:	4313      	orrs	r3, r2
 8009388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800938a:	f000 f821 	bl	80093d0 <HAL_RCC_GetSysClockFreq>
 800938e:	4602      	mov	r2, r0
 8009390:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	091b      	lsrs	r3, r3, #4
 8009396:	f003 030f 	and.w	r3, r3, #15
 800939a:	490a      	ldr	r1, [pc, #40]	; (80093c4 <HAL_RCC_ClockConfig+0x1cc>)
 800939c:	5ccb      	ldrb	r3, [r1, r3]
 800939e:	fa22 f303 	lsr.w	r3, r2, r3
 80093a2:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <HAL_RCC_ClockConfig+0x1d0>)
 80093a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <HAL_RCC_ClockConfig+0x1d4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fd fd70 	bl	8006e90 <HAL_InitTick>

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	40023c00 	.word	0x40023c00
 80093c0:	40023800 	.word	0x40023800
 80093c4:	0800beac 	.word	0x0800beac
 80093c8:	20000000 	.word	0x20000000
 80093cc:	200000d8 	.word	0x200000d8

080093d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d4:	b094      	sub	sp, #80	; 0x50
 80093d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	647b      	str	r3, [r7, #68]	; 0x44
 80093dc:	2300      	movs	r3, #0
 80093de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093e0:	2300      	movs	r3, #0
 80093e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093e8:	4b79      	ldr	r3, [pc, #484]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f003 030c 	and.w	r3, r3, #12
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d00d      	beq.n	8009410 <HAL_RCC_GetSysClockFreq+0x40>
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	f200 80e1 	bhi.w	80095bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <HAL_RCC_GetSysClockFreq+0x34>
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d003      	beq.n	800940a <HAL_RCC_GetSysClockFreq+0x3a>
 8009402:	e0db      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009404:	4b73      	ldr	r3, [pc, #460]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009408:	e0db      	b.n	80095c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800940a:	4b73      	ldr	r3, [pc, #460]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800940e:	e0d8      	b.n	80095c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009410:	4b6f      	ldr	r3, [pc, #444]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009418:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800941a:	4b6d      	ldr	r3, [pc, #436]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d063      	beq.n	80094ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009426:	4b6a      	ldr	r3, [pc, #424]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	099b      	lsrs	r3, r3, #6
 800942c:	2200      	movs	r2, #0
 800942e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009430:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	633b      	str	r3, [r7, #48]	; 0x30
 800943a:	2300      	movs	r3, #0
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
 800943e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	f04f 0000 	mov.w	r0, #0
 800944a:	f04f 0100 	mov.w	r1, #0
 800944e:	0159      	lsls	r1, r3, #5
 8009450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009454:	0150      	lsls	r0, r2, #5
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4621      	mov	r1, r4
 800945c:	1a51      	subs	r1, r2, r1
 800945e:	6139      	str	r1, [r7, #16]
 8009460:	4629      	mov	r1, r5
 8009462:	eb63 0301 	sbc.w	r3, r3, r1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009474:	4659      	mov	r1, fp
 8009476:	018b      	lsls	r3, r1, #6
 8009478:	4651      	mov	r1, sl
 800947a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800947e:	4651      	mov	r1, sl
 8009480:	018a      	lsls	r2, r1, #6
 8009482:	4651      	mov	r1, sl
 8009484:	ebb2 0801 	subs.w	r8, r2, r1
 8009488:	4659      	mov	r1, fp
 800948a:	eb63 0901 	sbc.w	r9, r3, r1
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	f04f 0300 	mov.w	r3, #0
 8009496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800949a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800949e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094a2:	4690      	mov	r8, r2
 80094a4:	4699      	mov	r9, r3
 80094a6:	4623      	mov	r3, r4
 80094a8:	eb18 0303 	adds.w	r3, r8, r3
 80094ac:	60bb      	str	r3, [r7, #8]
 80094ae:	462b      	mov	r3, r5
 80094b0:	eb49 0303 	adc.w	r3, r9, r3
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80094c2:	4629      	mov	r1, r5
 80094c4:	024b      	lsls	r3, r1, #9
 80094c6:	4621      	mov	r1, r4
 80094c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094cc:	4621      	mov	r1, r4
 80094ce:	024a      	lsls	r2, r1, #9
 80094d0:	4610      	mov	r0, r2
 80094d2:	4619      	mov	r1, r3
 80094d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d6:	2200      	movs	r2, #0
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094e0:	f7f6 ff36 	bl	8000350 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4613      	mov	r3, r2
 80094ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ec:	e058      	b.n	80095a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094ee:	4b38      	ldr	r3, [pc, #224]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	099b      	lsrs	r3, r3, #6
 80094f4:	2200      	movs	r2, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	4611      	mov	r1, r2
 80094fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80094fe:	623b      	str	r3, [r7, #32]
 8009500:	2300      	movs	r3, #0
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
 8009504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	f04f 0000 	mov.w	r0, #0
 8009510:	f04f 0100 	mov.w	r1, #0
 8009514:	0159      	lsls	r1, r3, #5
 8009516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800951a:	0150      	lsls	r0, r2, #5
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4641      	mov	r1, r8
 8009522:	ebb2 0a01 	subs.w	sl, r2, r1
 8009526:	4649      	mov	r1, r9
 8009528:	eb63 0b01 	sbc.w	fp, r3, r1
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800953c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009540:	ebb2 040a 	subs.w	r4, r2, sl
 8009544:	eb63 050b 	sbc.w	r5, r3, fp
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	00eb      	lsls	r3, r5, #3
 8009552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009556:	00e2      	lsls	r2, r4, #3
 8009558:	4614      	mov	r4, r2
 800955a:	461d      	mov	r5, r3
 800955c:	4643      	mov	r3, r8
 800955e:	18e3      	adds	r3, r4, r3
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	464b      	mov	r3, r9
 8009564:	eb45 0303 	adc.w	r3, r5, r3
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009576:	4629      	mov	r1, r5
 8009578:	028b      	lsls	r3, r1, #10
 800957a:	4621      	mov	r1, r4
 800957c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009580:	4621      	mov	r1, r4
 8009582:	028a      	lsls	r2, r1, #10
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958a:	2200      	movs	r2, #0
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	61fa      	str	r2, [r7, #28]
 8009590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009594:	f7f6 fedc 	bl	8000350 <__aeabi_uldivmod>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4613      	mov	r3, r2
 800959e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	3301      	adds	r3, #1
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80095b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095ba:	e002      	b.n	80095c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80095be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3750      	adds	r7, #80	; 0x50
 80095c8:	46bd      	mov	sp, r7
 80095ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ce:	bf00      	nop
 80095d0:	40023800 	.word	0x40023800
 80095d4:	00f42400 	.word	0x00f42400
 80095d8:	007a1200 	.word	0x007a1200

080095dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095e0:	4b03      	ldr	r3, [pc, #12]	; (80095f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80095e2:	681b      	ldr	r3, [r3, #0]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20000000 	.word	0x20000000

080095f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80095f8:	f7ff fff0 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 80095fc:	4602      	mov	r2, r0
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	0a9b      	lsrs	r3, r3, #10
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	4903      	ldr	r1, [pc, #12]	; (8009618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800960a:	5ccb      	ldrb	r3, [r1, r3]
 800960c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009610:	4618      	mov	r0, r3
 8009612:	bd80      	pop	{r7, pc}
 8009614:	40023800 	.word	0x40023800
 8009618:	0800bebc 	.word	0x0800bebc

0800961c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009620:	f7ff ffdc 	bl	80095dc <HAL_RCC_GetHCLKFreq>
 8009624:	4602      	mov	r2, r0
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	0b5b      	lsrs	r3, r3, #13
 800962c:	f003 0307 	and.w	r3, r3, #7
 8009630:	4903      	ldr	r1, [pc, #12]	; (8009640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009632:	5ccb      	ldrb	r3, [r1, r3]
 8009634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009638:	4618      	mov	r0, r3
 800963a:	bd80      	pop	{r7, pc}
 800963c:	40023800 	.word	0x40023800
 8009640:	0800bebc 	.word	0x0800bebc

08009644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d012      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800966c:	4b69      	ldr	r3, [pc, #420]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	4a68      	ldr	r2, [pc, #416]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009672:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009676:	6093      	str	r3, [r2, #8]
 8009678:	4b66      	ldr	r3, [pc, #408]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009680:	4964      	ldr	r1, [pc, #400]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009682:	4313      	orrs	r3, r2
 8009684:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d017      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800969e:	4b5d      	ldr	r3, [pc, #372]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ac:	4959      	ldr	r1, [pc, #356]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096bc:	d101      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80096be:	2301      	movs	r3, #1
 80096c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80096ca:	2301      	movs	r3, #1
 80096cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d017      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80096da:	4b4e      	ldr	r3, [pc, #312]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	494a      	ldr	r1, [pc, #296]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096f8:	d101      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80096fa:	2301      	movs	r3, #1
 80096fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009706:	2301      	movs	r3, #1
 8009708:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009716:	2301      	movs	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 808b 	beq.w	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009728:	4b3a      	ldr	r3, [pc, #232]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800972a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972c:	4a39      	ldr	r2, [pc, #228]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800972e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009732:	6413      	str	r3, [r2, #64]	; 0x40
 8009734:	4b37      	ldr	r3, [pc, #220]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800973c:	60bb      	str	r3, [r7, #8]
 800973e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009740:	4b35      	ldr	r3, [pc, #212]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a34      	ldr	r2, [pc, #208]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800974a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800974c:	f7fd fbe4 	bl	8006f18 <HAL_GetTick>
 8009750:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009752:	e008      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009754:	f7fd fbe0 	bl	8006f18 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b64      	cmp	r3, #100	; 0x64
 8009760:	d901      	bls.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e357      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009766:	4b2c      	ldr	r3, [pc, #176]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f0      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009772:	4b28      	ldr	r3, [pc, #160]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800977a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d035      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	429a      	cmp	r2, r3
 800978e:	d02e      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009790:	4b20      	ldr	r3, [pc, #128]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009798:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800979a:	4b1e      	ldr	r3, [pc, #120]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800979c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979e:	4a1d      	ldr	r2, [pc, #116]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097a6:	4b1b      	ldr	r3, [pc, #108]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	4a1a      	ldr	r2, [pc, #104]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097b8:	4b16      	ldr	r3, [pc, #88]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d114      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c4:	f7fd fba8 	bl	8006f18 <HAL_GetTick>
 80097c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ca:	e00a      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097cc:	f7fd fba4 	bl	8006f18 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e319      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e2:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0ee      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fa:	d111      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800980a:	400b      	ands	r3, r1
 800980c:	4901      	ldr	r1, [pc, #4]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800980e:	4313      	orrs	r3, r2
 8009810:	608b      	str	r3, [r1, #8]
 8009812:	e00b      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009814:	40023800 	.word	0x40023800
 8009818:	40007000 	.word	0x40007000
 800981c:	0ffffcff 	.word	0x0ffffcff
 8009820:	4baa      	ldr	r3, [pc, #680]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4aa9      	ldr	r2, [pc, #676]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009826:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800982a:	6093      	str	r3, [r2, #8]
 800982c:	4ba7      	ldr	r3, [pc, #668]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800982e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009838:	49a4      	ldr	r1, [pc, #656]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800983a:	4313      	orrs	r3, r2
 800983c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0310 	and.w	r3, r3, #16
 8009846:	2b00      	cmp	r3, #0
 8009848:	d010      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800984a:	4ba0      	ldr	r3, [pc, #640]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800984c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009850:	4a9e      	ldr	r2, [pc, #632]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009856:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800985a:	4b9c      	ldr	r3, [pc, #624]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800985c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	4999      	ldr	r1, [pc, #612]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009866:	4313      	orrs	r3, r2
 8009868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009878:	4b94      	ldr	r3, [pc, #592]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800987a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800987e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009886:	4991      	ldr	r1, [pc, #580]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009888:	4313      	orrs	r3, r2
 800988a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800989a:	4b8c      	ldr	r3, [pc, #560]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800989c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a8:	4988      	ldr	r1, [pc, #544]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098bc:	4b83      	ldr	r3, [pc, #524]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ca:	4980      	ldr	r1, [pc, #512]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098de:	4b7b      	ldr	r3, [pc, #492]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ec:	4977      	ldr	r1, [pc, #476]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009900:	4b72      	ldr	r3, [pc, #456]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	f023 0203 	bic.w	r2, r3, #3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990e:	496f      	ldr	r1, [pc, #444]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009910:	4313      	orrs	r3, r2
 8009912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009922:	4b6a      	ldr	r3, [pc, #424]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009928:	f023 020c 	bic.w	r2, r3, #12
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009930:	4966      	ldr	r1, [pc, #408]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009932:	4313      	orrs	r3, r2
 8009934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009944:	4b61      	ldr	r3, [pc, #388]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009952:	495e      	ldr	r1, [pc, #376]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009954:	4313      	orrs	r3, r2
 8009956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009966:	4b59      	ldr	r3, [pc, #356]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	4955      	ldr	r1, [pc, #340]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009976:	4313      	orrs	r3, r2
 8009978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009988:	4b50      	ldr	r3, [pc, #320]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009996:	494d      	ldr	r1, [pc, #308]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009998:	4313      	orrs	r3, r2
 800999a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80099aa:	4b48      	ldr	r3, [pc, #288]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b8:	4944      	ldr	r1, [pc, #272]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80099cc:	4b3f      	ldr	r3, [pc, #252]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099da:	493c      	ldr	r1, [pc, #240]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80099ee:	4b37      	ldr	r3, [pc, #220]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099fc:	4933      	ldr	r1, [pc, #204]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a10:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a1e:	492b      	ldr	r1, [pc, #172]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d011      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a32:	4b26      	ldr	r3, [pc, #152]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a40:	4922      	ldr	r1, [pc, #136]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a50:	d101      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009a52:	2301      	movs	r3, #1
 8009a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0308 	and.w	r3, r3, #8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a80:	4912      	ldr	r1, [pc, #72]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aa4:	4909      	ldr	r1, [pc, #36]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d006      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 80d9 	beq.w	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ac0:	4b02      	ldr	r3, [pc, #8]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a01      	ldr	r2, [pc, #4]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aca:	e001      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009acc:	40023800 	.word	0x40023800
 8009ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad2:	f7fd fa21 	bl	8006f18 <HAL_GetTick>
 8009ad6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ad8:	e008      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ada:	f7fd fa1d 	bl	8006f18 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b64      	cmp	r3, #100	; 0x64
 8009ae6:	d901      	bls.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e194      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009aec:	4b6c      	ldr	r3, [pc, #432]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1f0      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d021      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11d      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009b0c:	4b64      	ldr	r3, [pc, #400]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	0c1b      	lsrs	r3, r3, #16
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009b1a:	4b61      	ldr	r3, [pc, #388]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b20:	0e1b      	lsrs	r3, r3, #24
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	019a      	lsls	r2, r3, #6
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	431a      	orrs	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	071b      	lsls	r3, r3, #28
 8009b40:	4957      	ldr	r1, [pc, #348]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b5c:	d00a      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d02e      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b72:	d129      	bne.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009b74:	4b4a      	ldr	r3, [pc, #296]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b7a:	0c1b      	lsrs	r3, r3, #16
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009b82:	4b47      	ldr	r3, [pc, #284]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b88:	0f1b      	lsrs	r3, r3, #28
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	019a      	lsls	r2, r3, #6
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	071b      	lsls	r3, r3, #28
 8009ba8:	493d      	ldr	r1, [pc, #244]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009bb0:	4b3b      	ldr	r3, [pc, #236]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb6:	f023 021f 	bic.w	r2, r3, #31
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4937      	ldr	r1, [pc, #220]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01d      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bda:	0e1b      	lsrs	r3, r3, #24
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009be2:	4b2f      	ldr	r3, [pc, #188]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be8:	0f1b      	lsrs	r3, r3, #28
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	019a      	lsls	r2, r3, #6
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	041b      	lsls	r3, r3, #16
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	061b      	lsls	r3, r3, #24
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	071b      	lsls	r3, r3, #28
 8009c08:	4925      	ldr	r1, [pc, #148]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d011      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	019a      	lsls	r2, r3, #6
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	061b      	lsls	r3, r3, #24
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	071b      	lsls	r3, r3, #28
 8009c38:	4919      	ldr	r1, [pc, #100]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4c:	f7fd f964 	bl	8006f18 <HAL_GetTick>
 8009c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c54:	f7fd f960 	bl	8006f18 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b64      	cmp	r3, #100	; 0x64
 8009c60:	d901      	bls.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e0d7      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c66:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	f040 80cd 	bne.w	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c86:	f7fd f947 	bl	8006f18 <HAL_GetTick>
 8009c8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c8c:	e00a      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c8e:	f7fd f943 	bl	8006f18 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b64      	cmp	r3, #100	; 0x64
 8009c9a:	d903      	bls.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e0ba      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009ca0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ca4:	4b5e      	ldr	r3, [pc, #376]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb0:	d0ed      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d02e      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d12a      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009cda:	4b51      	ldr	r3, [pc, #324]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ce8:	4b4d      	ldr	r3, [pc, #308]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cee:	0f1b      	lsrs	r3, r3, #28
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	019a      	lsls	r2, r3, #6
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	071b      	lsls	r3, r3, #28
 8009d0e:	4944      	ldr	r1, [pc, #272]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d16:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	3b01      	subs	r3, #1
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	493d      	ldr	r1, [pc, #244]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d022      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d44:	d11d      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d46:	4b36      	ldr	r3, [pc, #216]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d54:	4b32      	ldr	r3, [pc, #200]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5a:	0f1b      	lsrs	r3, r3, #28
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	019a      	lsls	r2, r3, #6
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	431a      	orrs	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	071b      	lsls	r3, r3, #28
 8009d7a:	4929      	ldr	r1, [pc, #164]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d028      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d8e:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	0e1b      	lsrs	r3, r3, #24
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d9c:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	0c1b      	lsrs	r3, r3, #16
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	019a      	lsls	r2, r3, #6
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	431a      	orrs	r2, r3
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	061b      	lsls	r3, r3, #24
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	071b      	lsls	r3, r3, #28
 8009dc2:	4917      	ldr	r1, [pc, #92]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009dca:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4911      	ldr	r1, [pc, #68]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a0e      	ldr	r2, [pc, #56]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dec:	f7fd f894 	bl	8006f18 <HAL_GetTick>
 8009df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009df2:	e008      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009df4:	f7fd f890 	bl	8006f18 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b64      	cmp	r3, #100	; 0x64
 8009e00:	d901      	bls.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e007      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e12:	d1ef      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	40023800 	.word	0x40023800

08009e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e040      	b.n	8009eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7f7 fe46 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2224      	movs	r2, #36	; 0x24
 8009e50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0201 	bic.w	r2, r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f82c 	bl	8009ec0 <UART_SetConfig>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e022      	b.n	8009eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa84 	bl	800a388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fb0b 	bl	800a4cc <UART_CheckIdleState>
 8009eb6:	4603      	mov	r3, r0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4ba6      	ldr	r3, [pc, #664]	; (800a184 <UART_SetConfig+0x2c4>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a94      	ldr	r2, [pc, #592]	; (800a188 <UART_SetConfig+0x2c8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d120      	bne.n	8009f7e <UART_SetConfig+0xbe>
 8009f3c:	4b93      	ldr	r3, [pc, #588]	; (800a18c <UART_SetConfig+0x2cc>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d816      	bhi.n	8009f78 <UART_SetConfig+0xb8>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x90>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009f61 	.word	0x08009f61
 8009f54:	08009f6d 	.word	0x08009f6d
 8009f58:	08009f67 	.word	0x08009f67
 8009f5c:	08009f73 	.word	0x08009f73
 8009f60:	2301      	movs	r3, #1
 8009f62:	77fb      	strb	r3, [r7, #31]
 8009f64:	e150      	b.n	800a208 <UART_SetConfig+0x348>
 8009f66:	2302      	movs	r3, #2
 8009f68:	77fb      	strb	r3, [r7, #31]
 8009f6a:	e14d      	b.n	800a208 <UART_SetConfig+0x348>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e14a      	b.n	800a208 <UART_SetConfig+0x348>
 8009f72:	2308      	movs	r3, #8
 8009f74:	77fb      	strb	r3, [r7, #31]
 8009f76:	e147      	b.n	800a208 <UART_SetConfig+0x348>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	77fb      	strb	r3, [r7, #31]
 8009f7c:	e144      	b.n	800a208 <UART_SetConfig+0x348>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a83      	ldr	r2, [pc, #524]	; (800a190 <UART_SetConfig+0x2d0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d132      	bne.n	8009fee <UART_SetConfig+0x12e>
 8009f88:	4b80      	ldr	r3, [pc, #512]	; (800a18c <UART_SetConfig+0x2cc>)
 8009f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	2b0c      	cmp	r3, #12
 8009f94:	d828      	bhi.n	8009fe8 <UART_SetConfig+0x128>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0xdc>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009fe9 	.word	0x08009fe9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009fe9 	.word	0x08009fe9
 8009fac:	08009fdd 	.word	0x08009fdd
 8009fb0:	08009fe9 	.word	0x08009fe9
 8009fb4:	08009fe9 	.word	0x08009fe9
 8009fb8:	08009fe9 	.word	0x08009fe9
 8009fbc:	08009fd7 	.word	0x08009fd7
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	08009fe3 	.word	0x08009fe3
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	77fb      	strb	r3, [r7, #31]
 8009fd4:	e118      	b.n	800a208 <UART_SetConfig+0x348>
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	77fb      	strb	r3, [r7, #31]
 8009fda:	e115      	b.n	800a208 <UART_SetConfig+0x348>
 8009fdc:	2304      	movs	r3, #4
 8009fde:	77fb      	strb	r3, [r7, #31]
 8009fe0:	e112      	b.n	800a208 <UART_SetConfig+0x348>
 8009fe2:	2308      	movs	r3, #8
 8009fe4:	77fb      	strb	r3, [r7, #31]
 8009fe6:	e10f      	b.n	800a208 <UART_SetConfig+0x348>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e10c      	b.n	800a208 <UART_SetConfig+0x348>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a68      	ldr	r2, [pc, #416]	; (800a194 <UART_SetConfig+0x2d4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d120      	bne.n	800a03a <UART_SetConfig+0x17a>
 8009ff8:	4b64      	ldr	r3, [pc, #400]	; (800a18c <UART_SetConfig+0x2cc>)
 8009ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a002:	2b30      	cmp	r3, #48	; 0x30
 800a004:	d013      	beq.n	800a02e <UART_SetConfig+0x16e>
 800a006:	2b30      	cmp	r3, #48	; 0x30
 800a008:	d814      	bhi.n	800a034 <UART_SetConfig+0x174>
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d009      	beq.n	800a022 <UART_SetConfig+0x162>
 800a00e:	2b20      	cmp	r3, #32
 800a010:	d810      	bhi.n	800a034 <UART_SetConfig+0x174>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <UART_SetConfig+0x15c>
 800a016:	2b10      	cmp	r3, #16
 800a018:	d006      	beq.n	800a028 <UART_SetConfig+0x168>
 800a01a:	e00b      	b.n	800a034 <UART_SetConfig+0x174>
 800a01c:	2300      	movs	r3, #0
 800a01e:	77fb      	strb	r3, [r7, #31]
 800a020:	e0f2      	b.n	800a208 <UART_SetConfig+0x348>
 800a022:	2302      	movs	r3, #2
 800a024:	77fb      	strb	r3, [r7, #31]
 800a026:	e0ef      	b.n	800a208 <UART_SetConfig+0x348>
 800a028:	2304      	movs	r3, #4
 800a02a:	77fb      	strb	r3, [r7, #31]
 800a02c:	e0ec      	b.n	800a208 <UART_SetConfig+0x348>
 800a02e:	2308      	movs	r3, #8
 800a030:	77fb      	strb	r3, [r7, #31]
 800a032:	e0e9      	b.n	800a208 <UART_SetConfig+0x348>
 800a034:	2310      	movs	r3, #16
 800a036:	77fb      	strb	r3, [r7, #31]
 800a038:	e0e6      	b.n	800a208 <UART_SetConfig+0x348>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a56      	ldr	r2, [pc, #344]	; (800a198 <UART_SetConfig+0x2d8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d120      	bne.n	800a086 <UART_SetConfig+0x1c6>
 800a044:	4b51      	ldr	r3, [pc, #324]	; (800a18c <UART_SetConfig+0x2cc>)
 800a046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a04a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a04e:	2bc0      	cmp	r3, #192	; 0xc0
 800a050:	d013      	beq.n	800a07a <UART_SetConfig+0x1ba>
 800a052:	2bc0      	cmp	r3, #192	; 0xc0
 800a054:	d814      	bhi.n	800a080 <UART_SetConfig+0x1c0>
 800a056:	2b80      	cmp	r3, #128	; 0x80
 800a058:	d009      	beq.n	800a06e <UART_SetConfig+0x1ae>
 800a05a:	2b80      	cmp	r3, #128	; 0x80
 800a05c:	d810      	bhi.n	800a080 <UART_SetConfig+0x1c0>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <UART_SetConfig+0x1a8>
 800a062:	2b40      	cmp	r3, #64	; 0x40
 800a064:	d006      	beq.n	800a074 <UART_SetConfig+0x1b4>
 800a066:	e00b      	b.n	800a080 <UART_SetConfig+0x1c0>
 800a068:	2300      	movs	r3, #0
 800a06a:	77fb      	strb	r3, [r7, #31]
 800a06c:	e0cc      	b.n	800a208 <UART_SetConfig+0x348>
 800a06e:	2302      	movs	r3, #2
 800a070:	77fb      	strb	r3, [r7, #31]
 800a072:	e0c9      	b.n	800a208 <UART_SetConfig+0x348>
 800a074:	2304      	movs	r3, #4
 800a076:	77fb      	strb	r3, [r7, #31]
 800a078:	e0c6      	b.n	800a208 <UART_SetConfig+0x348>
 800a07a:	2308      	movs	r3, #8
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e0c3      	b.n	800a208 <UART_SetConfig+0x348>
 800a080:	2310      	movs	r3, #16
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e0c0      	b.n	800a208 <UART_SetConfig+0x348>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a44      	ldr	r2, [pc, #272]	; (800a19c <UART_SetConfig+0x2dc>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d125      	bne.n	800a0dc <UART_SetConfig+0x21c>
 800a090:	4b3e      	ldr	r3, [pc, #248]	; (800a18c <UART_SetConfig+0x2cc>)
 800a092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a09a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a09e:	d017      	beq.n	800a0d0 <UART_SetConfig+0x210>
 800a0a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a4:	d817      	bhi.n	800a0d6 <UART_SetConfig+0x216>
 800a0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0aa:	d00b      	beq.n	800a0c4 <UART_SetConfig+0x204>
 800a0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b0:	d811      	bhi.n	800a0d6 <UART_SetConfig+0x216>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <UART_SetConfig+0x1fe>
 800a0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ba:	d006      	beq.n	800a0ca <UART_SetConfig+0x20a>
 800a0bc:	e00b      	b.n	800a0d6 <UART_SetConfig+0x216>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	77fb      	strb	r3, [r7, #31]
 800a0c2:	e0a1      	b.n	800a208 <UART_SetConfig+0x348>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	77fb      	strb	r3, [r7, #31]
 800a0c8:	e09e      	b.n	800a208 <UART_SetConfig+0x348>
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	77fb      	strb	r3, [r7, #31]
 800a0ce:	e09b      	b.n	800a208 <UART_SetConfig+0x348>
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	77fb      	strb	r3, [r7, #31]
 800a0d4:	e098      	b.n	800a208 <UART_SetConfig+0x348>
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	77fb      	strb	r3, [r7, #31]
 800a0da:	e095      	b.n	800a208 <UART_SetConfig+0x348>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a2f      	ldr	r2, [pc, #188]	; (800a1a0 <UART_SetConfig+0x2e0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d125      	bne.n	800a132 <UART_SetConfig+0x272>
 800a0e6:	4b29      	ldr	r3, [pc, #164]	; (800a18c <UART_SetConfig+0x2cc>)
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0f4:	d017      	beq.n	800a126 <UART_SetConfig+0x266>
 800a0f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0fa:	d817      	bhi.n	800a12c <UART_SetConfig+0x26c>
 800a0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a100:	d00b      	beq.n	800a11a <UART_SetConfig+0x25a>
 800a102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a106:	d811      	bhi.n	800a12c <UART_SetConfig+0x26c>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <UART_SetConfig+0x254>
 800a10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a110:	d006      	beq.n	800a120 <UART_SetConfig+0x260>
 800a112:	e00b      	b.n	800a12c <UART_SetConfig+0x26c>
 800a114:	2301      	movs	r3, #1
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e076      	b.n	800a208 <UART_SetConfig+0x348>
 800a11a:	2302      	movs	r3, #2
 800a11c:	77fb      	strb	r3, [r7, #31]
 800a11e:	e073      	b.n	800a208 <UART_SetConfig+0x348>
 800a120:	2304      	movs	r3, #4
 800a122:	77fb      	strb	r3, [r7, #31]
 800a124:	e070      	b.n	800a208 <UART_SetConfig+0x348>
 800a126:	2308      	movs	r3, #8
 800a128:	77fb      	strb	r3, [r7, #31]
 800a12a:	e06d      	b.n	800a208 <UART_SetConfig+0x348>
 800a12c:	2310      	movs	r3, #16
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	e06a      	b.n	800a208 <UART_SetConfig+0x348>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a1b      	ldr	r2, [pc, #108]	; (800a1a4 <UART_SetConfig+0x2e4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d138      	bne.n	800a1ae <UART_SetConfig+0x2ee>
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <UART_SetConfig+0x2cc>)
 800a13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a142:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a146:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a14a:	d017      	beq.n	800a17c <UART_SetConfig+0x2bc>
 800a14c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a150:	d82a      	bhi.n	800a1a8 <UART_SetConfig+0x2e8>
 800a152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a156:	d00b      	beq.n	800a170 <UART_SetConfig+0x2b0>
 800a158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15c:	d824      	bhi.n	800a1a8 <UART_SetConfig+0x2e8>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <UART_SetConfig+0x2aa>
 800a162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a166:	d006      	beq.n	800a176 <UART_SetConfig+0x2b6>
 800a168:	e01e      	b.n	800a1a8 <UART_SetConfig+0x2e8>
 800a16a:	2300      	movs	r3, #0
 800a16c:	77fb      	strb	r3, [r7, #31]
 800a16e:	e04b      	b.n	800a208 <UART_SetConfig+0x348>
 800a170:	2302      	movs	r3, #2
 800a172:	77fb      	strb	r3, [r7, #31]
 800a174:	e048      	b.n	800a208 <UART_SetConfig+0x348>
 800a176:	2304      	movs	r3, #4
 800a178:	77fb      	strb	r3, [r7, #31]
 800a17a:	e045      	b.n	800a208 <UART_SetConfig+0x348>
 800a17c:	2308      	movs	r3, #8
 800a17e:	77fb      	strb	r3, [r7, #31]
 800a180:	e042      	b.n	800a208 <UART_SetConfig+0x348>
 800a182:	bf00      	nop
 800a184:	efff69f3 	.word	0xefff69f3
 800a188:	40011000 	.word	0x40011000
 800a18c:	40023800 	.word	0x40023800
 800a190:	40004400 	.word	0x40004400
 800a194:	40004800 	.word	0x40004800
 800a198:	40004c00 	.word	0x40004c00
 800a19c:	40005000 	.word	0x40005000
 800a1a0:	40011400 	.word	0x40011400
 800a1a4:	40007800 	.word	0x40007800
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e02c      	b.n	800a208 <UART_SetConfig+0x348>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a72      	ldr	r2, [pc, #456]	; (800a37c <UART_SetConfig+0x4bc>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d125      	bne.n	800a204 <UART_SetConfig+0x344>
 800a1b8:	4b71      	ldr	r3, [pc, #452]	; (800a380 <UART_SetConfig+0x4c0>)
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1c6:	d017      	beq.n	800a1f8 <UART_SetConfig+0x338>
 800a1c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1cc:	d817      	bhi.n	800a1fe <UART_SetConfig+0x33e>
 800a1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d2:	d00b      	beq.n	800a1ec <UART_SetConfig+0x32c>
 800a1d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d8:	d811      	bhi.n	800a1fe <UART_SetConfig+0x33e>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <UART_SetConfig+0x326>
 800a1de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1e2:	d006      	beq.n	800a1f2 <UART_SetConfig+0x332>
 800a1e4:	e00b      	b.n	800a1fe <UART_SetConfig+0x33e>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e00d      	b.n	800a208 <UART_SetConfig+0x348>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e00a      	b.n	800a208 <UART_SetConfig+0x348>
 800a1f2:	2304      	movs	r3, #4
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e007      	b.n	800a208 <UART_SetConfig+0x348>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e004      	b.n	800a208 <UART_SetConfig+0x348>
 800a1fe:	2310      	movs	r3, #16
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	e001      	b.n	800a208 <UART_SetConfig+0x348>
 800a204:	2310      	movs	r3, #16
 800a206:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a210:	d15b      	bne.n	800a2ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a212:	7ffb      	ldrb	r3, [r7, #31]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d828      	bhi.n	800a26a <UART_SetConfig+0x3aa>
 800a218:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <UART_SetConfig+0x360>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a255 	.word	0x0800a255
 800a22c:	0800a26b 	.word	0x0800a26b
 800a230:	0800a25b 	.word	0x0800a25b
 800a234:	0800a26b 	.word	0x0800a26b
 800a238:	0800a26b 	.word	0x0800a26b
 800a23c:	0800a26b 	.word	0x0800a26b
 800a240:	0800a263 	.word	0x0800a263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a244:	f7ff f9d6 	bl	80095f4 <HAL_RCC_GetPCLK1Freq>
 800a248:	61b8      	str	r0, [r7, #24]
        break;
 800a24a:	e013      	b.n	800a274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a24c:	f7ff f9e6 	bl	800961c <HAL_RCC_GetPCLK2Freq>
 800a250:	61b8      	str	r0, [r7, #24]
        break;
 800a252:	e00f      	b.n	800a274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a254:	4b4b      	ldr	r3, [pc, #300]	; (800a384 <UART_SetConfig+0x4c4>)
 800a256:	61bb      	str	r3, [r7, #24]
        break;
 800a258:	e00c      	b.n	800a274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a25a:	f7ff f8b9 	bl	80093d0 <HAL_RCC_GetSysClockFreq>
 800a25e:	61b8      	str	r0, [r7, #24]
        break;
 800a260:	e008      	b.n	800a274 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a266:	61bb      	str	r3, [r7, #24]
        break;
 800a268:	e004      	b.n	800a274 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	77bb      	strb	r3, [r7, #30]
        break;
 800a272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d074      	beq.n	800a364 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d916      	bls.n	800a2c4 <UART_SetConfig+0x404>
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29c:	d212      	bcs.n	800a2c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f023 030f 	bic.w	r3, r3, #15
 800a2a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	89fb      	ldrh	r3, [r7, #14]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	89fa      	ldrh	r2, [r7, #14]
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	e04f      	b.n	800a364 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	77bb      	strb	r3, [r7, #30]
 800a2c8:	e04c      	b.n	800a364 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2ca:	7ffb      	ldrb	r3, [r7, #31]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d828      	bhi.n	800a322 <UART_SetConfig+0x462>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <UART_SetConfig+0x418>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2fd 	.word	0x0800a2fd
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	0800a323 	.word	0x0800a323
 800a2e8:	0800a313 	.word	0x0800a313
 800a2ec:	0800a323 	.word	0x0800a323
 800a2f0:	0800a323 	.word	0x0800a323
 800a2f4:	0800a323 	.word	0x0800a323
 800a2f8:	0800a31b 	.word	0x0800a31b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2fc:	f7ff f97a 	bl	80095f4 <HAL_RCC_GetPCLK1Freq>
 800a300:	61b8      	str	r0, [r7, #24]
        break;
 800a302:	e013      	b.n	800a32c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a304:	f7ff f98a 	bl	800961c <HAL_RCC_GetPCLK2Freq>
 800a308:	61b8      	str	r0, [r7, #24]
        break;
 800a30a:	e00f      	b.n	800a32c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a30c:	4b1d      	ldr	r3, [pc, #116]	; (800a384 <UART_SetConfig+0x4c4>)
 800a30e:	61bb      	str	r3, [r7, #24]
        break;
 800a310:	e00c      	b.n	800a32c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a312:	f7ff f85d 	bl	80093d0 <HAL_RCC_GetSysClockFreq>
 800a316:	61b8      	str	r0, [r7, #24]
        break;
 800a318:	e008      	b.n	800a32c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a31e:	61bb      	str	r3, [r7, #24]
        break;
 800a320:	e004      	b.n	800a32c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	77bb      	strb	r3, [r7, #30]
        break;
 800a32a:	bf00      	nop
    }

    if (pclk != 0U)
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d018      	beq.n	800a364 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	085a      	lsrs	r2, r3, #1
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	441a      	add	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	fbb2 f3f3 	udiv	r3, r2, r3
 800a344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b0f      	cmp	r3, #15
 800a34a:	d909      	bls.n	800a360 <UART_SetConfig+0x4a0>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a352:	d205      	bcs.n	800a360 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e001      	b.n	800a364 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a370:	7fbb      	ldrb	r3, [r7, #30]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	40007c00 	.word	0x40007c00
 800a380:	40023800 	.word	0x40023800
 800a384:	00f42400 	.word	0x00f42400

0800a388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00a      	beq.n	800a3b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00a      	beq.n	800a3f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00a      	beq.n	800a43a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d01a      	beq.n	800a49e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a486:	d10a      	bne.n	800a49e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	605a      	str	r2, [r3, #4]
  }
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4dc:	f7fc fd1c 	bl	8006f18 <HAL_GetTick>
 800a4e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0308 	and.w	r3, r3, #8
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d10e      	bne.n	800a50e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f81b 	bl	800a53a <UART_WaitOnFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e011      	b.n	800a532 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2220      	movs	r2, #32
 800a512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b09c      	sub	sp, #112	; 0x70
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	603b      	str	r3, [r7, #0]
 800a546:	4613      	mov	r3, r2
 800a548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54a:	e0a7      	b.n	800a69c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a54c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	f000 80a3 	beq.w	800a69c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a556:	f7fc fcdf 	bl	8006f18 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <UART_WaitOnFlagUntilTimeout+0x32>
 800a566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d13f      	bne.n	800a5ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a57c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a580:	667b      	str	r3, [r7, #100]	; 0x64
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a58c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e6      	bne.n	800a56c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e5      	bne.n	800a59e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e068      	b.n	800a6be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0304 	and.w	r3, r3, #4
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d050      	beq.n	800a69c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a608:	d148      	bne.n	800a69c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a612:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a632:	637b      	str	r3, [r7, #52]	; 0x34
 800a634:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a63a:	e841 2300 	strex	r3, r2, [r1]
 800a63e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1e6      	bne.n	800a614 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3308      	adds	r3, #8
 800a64c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	613b      	str	r3, [r7, #16]
   return(result);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f023 0301 	bic.w	r3, r3, #1
 800a65c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3308      	adds	r3, #8
 800a664:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a666:	623a      	str	r2, [r7, #32]
 800a668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	69f9      	ldr	r1, [r7, #28]
 800a66c:	6a3a      	ldr	r2, [r7, #32]
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	61bb      	str	r3, [r7, #24]
   return(result);
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e5      	bne.n	800a646 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2220      	movs	r2, #32
 800a684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e010      	b.n	800a6be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	69da      	ldr	r2, [r3, #28]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	bf0c      	ite	eq
 800a6ac:	2301      	moveq	r3, #1
 800a6ae:	2300      	movne	r3, #0
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	f43f af48 	beq.w	800a54c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3770      	adds	r7, #112	; 0x70
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	f107 001c 	add.w	r0, r7, #28
 800a6d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d120      	bne.n	800a722 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	4b20      	ldr	r3, [pc, #128]	; (800a774 <USB_CoreInit+0xac>)
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a706:	2b01      	cmp	r3, #1
 800a708:	d105      	bne.n	800a716 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fa96 	bl	800ac48 <USB_CoreReset>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]
 800a720:	e010      	b.n	800a744 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fa8a 	bl	800ac48 <USB_CoreReset>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2b01      	cmp	r3, #1
 800a748:	d10b      	bne.n	800a762 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f043 0206 	orr.w	r2, r3, #6
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f043 0220 	orr.w	r2, r3, #32
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a76e:	b004      	add	sp, #16
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	ffbdffbf 	.word	0xffbdffbf

0800a778 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f023 0201 	bic.w	r2, r3, #1
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d115      	bne.n	800a7e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f7fc fbb1 	bl	8006f30 <HAL_Delay>
      ms++;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fa29 	bl	800ac2c <USB_GetMode>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d01e      	beq.n	800a81e <USB_SetCurrentMode+0x84>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b31      	cmp	r3, #49	; 0x31
 800a7e4:	d9f0      	bls.n	800a7c8 <USB_SetCurrentMode+0x2e>
 800a7e6:	e01a      	b.n	800a81e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d115      	bne.n	800a81a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	f7fc fb98 	bl	8006f30 <HAL_Delay>
      ms++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa10 	bl	800ac2c <USB_GetMode>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <USB_SetCurrentMode+0x84>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b31      	cmp	r3, #49	; 0x31
 800a816:	d9f0      	bls.n	800a7fa <USB_SetCurrentMode+0x60>
 800a818:	e001      	b.n	800a81e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e005      	b.n	800a82a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b32      	cmp	r3, #50	; 0x32
 800a822:	d101      	bne.n	800a828 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e000      	b.n	800a82a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a834:	b084      	sub	sp, #16
 800a836:	b580      	push	{r7, lr}
 800a838:	b086      	sub	sp, #24
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a84e:	2300      	movs	r3, #0
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	e009      	b.n	800a868 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3340      	adds	r3, #64	; 0x40
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	3301      	adds	r3, #1
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b0e      	cmp	r3, #14
 800a86c:	d9f2      	bls.n	800a854 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11c      	bne.n	800a8ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a882:	f043 0302 	orr.w	r3, r3, #2
 800a886:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e005      	b.n	800a8ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	680b      	ldr	r3, [r1, #0]
 800a8d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d10c      	bne.n	800a8fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d104      	bne.n	800a8f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f965 	bl	800abb8 <USB_SetDevSpeed>
 800a8ee:	e008      	b.n	800a902 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f960 	bl	800abb8 <USB_SetDevSpeed>
 800a8f8:	e003      	b.n	800a902 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8fa:	2103      	movs	r1, #3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f95b 	bl	800abb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a902:	2110      	movs	r1, #16
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f8f3 	bl	800aaf0 <USB_FlushTxFifo>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f91f 	bl	800ab58 <USB_FlushRxFifo>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92a:	461a      	mov	r2, r3
 800a92c:	2300      	movs	r3, #0
 800a92e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a936:	461a      	mov	r2, r3
 800a938:	2300      	movs	r3, #0
 800a93a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	461a      	mov	r2, r3
 800a944:	2300      	movs	r3, #0
 800a946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	e043      	b.n	800a9d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a964:	d118      	bne.n	800a998 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10a      	bne.n	800a982 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a978:	461a      	mov	r2, r3
 800a97a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	e013      	b.n	800a9aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98e:	461a      	mov	r2, r3
 800a990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	e008      	b.n	800a9aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d3b7      	bcc.n	800a94e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	e043      	b.n	800aa6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9fa:	d118      	bne.n	800aa2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e013      	b.n	800aa40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa24:	461a      	mov	r2, r3
 800aa26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	e008      	b.n	800aa40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d3b7      	bcc.n	800a9e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d105      	bne.n	800aaa8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f043 0210 	orr.w	r2, r3, #16
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	4b0e      	ldr	r3, [pc, #56]	; (800aae8 <USB_DevInit+0x2b4>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	f043 0208 	orr.w	r2, r3, #8
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d105      	bne.n	800aad8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	699a      	ldr	r2, [r3, #24]
 800aad0:	4b06      	ldr	r3, [pc, #24]	; (800aaec <USB_DevInit+0x2b8>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aae4:	b004      	add	sp, #16
 800aae6:	4770      	bx	lr
 800aae8:	803c3800 	.word	0x803c3800
 800aaec:	40000004 	.word	0x40000004

0800aaf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <USB_FlushTxFifo+0x64>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d901      	bls.n	800ab10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e01b      	b.n	800ab48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	daf2      	bge.n	800aafe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	019b      	lsls	r3, r3, #6
 800ab20:	f043 0220 	orr.w	r2, r3, #32
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4a08      	ldr	r2, [pc, #32]	; (800ab54 <USB_FlushTxFifo+0x64>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d901      	bls.n	800ab3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e006      	b.n	800ab48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	d0f0      	beq.n	800ab28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	00030d40 	.word	0x00030d40

0800ab58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3301      	adds	r3, #1
 800ab68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <USB_FlushRxFifo+0x5c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d901      	bls.n	800ab76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e018      	b.n	800aba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	daf2      	bge.n	800ab64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2210      	movs	r2, #16
 800ab86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4a08      	ldr	r2, [pc, #32]	; (800abb4 <USB_FlushRxFifo+0x5c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d901      	bls.n	800ab9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e006      	b.n	800aba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	f003 0310 	and.w	r3, r3, #16
 800aba2:	2b10      	cmp	r3, #16
 800aba4:	d0f0      	beq.n	800ab88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	00030d40 	.word	0x00030d40

0800abb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	68f9      	ldr	r1, [r7, #12]
 800abd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abd8:	4313      	orrs	r3, r2
 800abda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac04:	f023 0303 	bic.w	r3, r3, #3
 800ac08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	f003 0301 	and.w	r3, r3, #1
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3301      	adds	r3, #1
 800ac58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4a13      	ldr	r2, [pc, #76]	; (800acac <USB_CoreReset+0x64>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d901      	bls.n	800ac66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e01b      	b.n	800ac9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	daf2      	bge.n	800ac54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f043 0201 	orr.w	r2, r3, #1
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4a09      	ldr	r2, [pc, #36]	; (800acac <USB_CoreReset+0x64>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d901      	bls.n	800ac90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e006      	b.n	800ac9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d0f0      	beq.n	800ac7e <USB_CoreReset+0x36>

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	00030d40 	.word	0x00030d40

0800acb0 <_ZdlPvj>:
 800acb0:	f000 b800 	b.w	800acb4 <_ZdlPv>

0800acb4 <_ZdlPv>:
 800acb4:	f000 b82a 	b.w	800ad0c <free>

0800acb8 <__errno>:
 800acb8:	4b01      	ldr	r3, [pc, #4]	; (800acc0 <__errno+0x8>)
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	200000e0 	.word	0x200000e0

0800acc4 <__libc_init_array>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4d0d      	ldr	r5, [pc, #52]	; (800acfc <__libc_init_array+0x38>)
 800acc8:	4c0d      	ldr	r4, [pc, #52]	; (800ad00 <__libc_init_array+0x3c>)
 800acca:	1b64      	subs	r4, r4, r5
 800accc:	10a4      	asrs	r4, r4, #2
 800acce:	2600      	movs	r6, #0
 800acd0:	42a6      	cmp	r6, r4
 800acd2:	d109      	bne.n	800ace8 <__libc_init_array+0x24>
 800acd4:	4d0b      	ldr	r5, [pc, #44]	; (800ad04 <__libc_init_array+0x40>)
 800acd6:	4c0c      	ldr	r4, [pc, #48]	; (800ad08 <__libc_init_array+0x44>)
 800acd8:	f001 f8a4 	bl	800be24 <_init>
 800acdc:	1b64      	subs	r4, r4, r5
 800acde:	10a4      	asrs	r4, r4, #2
 800ace0:	2600      	movs	r6, #0
 800ace2:	42a6      	cmp	r6, r4
 800ace4:	d105      	bne.n	800acf2 <__libc_init_array+0x2e>
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acec:	4798      	blx	r3
 800acee:	3601      	adds	r6, #1
 800acf0:	e7ee      	b.n	800acd0 <__libc_init_array+0xc>
 800acf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acf6:	4798      	blx	r3
 800acf8:	3601      	adds	r6, #1
 800acfa:	e7f2      	b.n	800ace2 <__libc_init_array+0x1e>
 800acfc:	0800bf64 	.word	0x0800bf64
 800ad00:	0800bf64 	.word	0x0800bf64
 800ad04:	0800bf64 	.word	0x0800bf64
 800ad08:	0800bf6c 	.word	0x0800bf6c

0800ad0c <free>:
 800ad0c:	4b02      	ldr	r3, [pc, #8]	; (800ad18 <free+0xc>)
 800ad0e:	4601      	mov	r1, r0
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	f000 b825 	b.w	800ad60 <_free_r>
 800ad16:	bf00      	nop
 800ad18:	200000e0 	.word	0x200000e0

0800ad1c <memmove>:
 800ad1c:	4288      	cmp	r0, r1
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	eb01 0402 	add.w	r4, r1, r2
 800ad24:	d902      	bls.n	800ad2c <memmove+0x10>
 800ad26:	4284      	cmp	r4, r0
 800ad28:	4623      	mov	r3, r4
 800ad2a:	d807      	bhi.n	800ad3c <memmove+0x20>
 800ad2c:	1e43      	subs	r3, r0, #1
 800ad2e:	42a1      	cmp	r1, r4
 800ad30:	d008      	beq.n	800ad44 <memmove+0x28>
 800ad32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad3a:	e7f8      	b.n	800ad2e <memmove+0x12>
 800ad3c:	4402      	add	r2, r0
 800ad3e:	4601      	mov	r1, r0
 800ad40:	428a      	cmp	r2, r1
 800ad42:	d100      	bne.n	800ad46 <memmove+0x2a>
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad4e:	e7f7      	b.n	800ad40 <memmove+0x24>

0800ad50 <memset>:
 800ad50:	4402      	add	r2, r0
 800ad52:	4603      	mov	r3, r0
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d100      	bne.n	800ad5a <memset+0xa>
 800ad58:	4770      	bx	lr
 800ad5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad5e:	e7f9      	b.n	800ad54 <memset+0x4>

0800ad60 <_free_r>:
 800ad60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad62:	2900      	cmp	r1, #0
 800ad64:	d044      	beq.n	800adf0 <_free_r+0x90>
 800ad66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6a:	9001      	str	r0, [sp, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ad72:	bfb8      	it	lt
 800ad74:	18e4      	addlt	r4, r4, r3
 800ad76:	f000 fc67 	bl	800b648 <__malloc_lock>
 800ad7a:	4a1e      	ldr	r2, [pc, #120]	; (800adf4 <_free_r+0x94>)
 800ad7c:	9801      	ldr	r0, [sp, #4]
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	b933      	cbnz	r3, 800ad90 <_free_r+0x30>
 800ad82:	6063      	str	r3, [r4, #4]
 800ad84:	6014      	str	r4, [r2, #0]
 800ad86:	b003      	add	sp, #12
 800ad88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad8c:	f000 bc62 	b.w	800b654 <__malloc_unlock>
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d908      	bls.n	800ada6 <_free_r+0x46>
 800ad94:	6825      	ldr	r5, [r4, #0]
 800ad96:	1961      	adds	r1, r4, r5
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf01      	itttt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	1949      	addeq	r1, r1, r5
 800ada2:	6021      	streq	r1, [r4, #0]
 800ada4:	e7ed      	b.n	800ad82 <_free_r+0x22>
 800ada6:	461a      	mov	r2, r3
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	b10b      	cbz	r3, 800adb0 <_free_r+0x50>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d9fa      	bls.n	800ada6 <_free_r+0x46>
 800adb0:	6811      	ldr	r1, [r2, #0]
 800adb2:	1855      	adds	r5, r2, r1
 800adb4:	42a5      	cmp	r5, r4
 800adb6:	d10b      	bne.n	800add0 <_free_r+0x70>
 800adb8:	6824      	ldr	r4, [r4, #0]
 800adba:	4421      	add	r1, r4
 800adbc:	1854      	adds	r4, r2, r1
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	d1e0      	bne.n	800ad86 <_free_r+0x26>
 800adc4:	681c      	ldr	r4, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	6053      	str	r3, [r2, #4]
 800adca:	4421      	add	r1, r4
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	e7da      	b.n	800ad86 <_free_r+0x26>
 800add0:	d902      	bls.n	800add8 <_free_r+0x78>
 800add2:	230c      	movs	r3, #12
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	e7d6      	b.n	800ad86 <_free_r+0x26>
 800add8:	6825      	ldr	r5, [r4, #0]
 800adda:	1961      	adds	r1, r4, r5
 800addc:	428b      	cmp	r3, r1
 800adde:	bf04      	itt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	6063      	str	r3, [r4, #4]
 800ade6:	bf04      	itt	eq
 800ade8:	1949      	addeq	r1, r1, r5
 800adea:	6021      	streq	r1, [r4, #0]
 800adec:	6054      	str	r4, [r2, #4]
 800adee:	e7ca      	b.n	800ad86 <_free_r+0x26>
 800adf0:	b003      	add	sp, #12
 800adf2:	bd30      	pop	{r4, r5, pc}
 800adf4:	20000b60 	.word	0x20000b60

0800adf8 <sbrk_aligned>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4e0e      	ldr	r6, [pc, #56]	; (800ae34 <sbrk_aligned+0x3c>)
 800adfc:	460c      	mov	r4, r1
 800adfe:	6831      	ldr	r1, [r6, #0]
 800ae00:	4605      	mov	r5, r0
 800ae02:	b911      	cbnz	r1, 800ae0a <sbrk_aligned+0x12>
 800ae04:	f000 f930 	bl	800b068 <_sbrk_r>
 800ae08:	6030      	str	r0, [r6, #0]
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 f92b 	bl	800b068 <_sbrk_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d00a      	beq.n	800ae2c <sbrk_aligned+0x34>
 800ae16:	1cc4      	adds	r4, r0, #3
 800ae18:	f024 0403 	bic.w	r4, r4, #3
 800ae1c:	42a0      	cmp	r0, r4
 800ae1e:	d007      	beq.n	800ae30 <sbrk_aligned+0x38>
 800ae20:	1a21      	subs	r1, r4, r0
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 f920 	bl	800b068 <_sbrk_r>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d101      	bne.n	800ae30 <sbrk_aligned+0x38>
 800ae2c:	f04f 34ff 	mov.w	r4, #4294967295
 800ae30:	4620      	mov	r0, r4
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	20000b64 	.word	0x20000b64

0800ae38 <_malloc_r>:
 800ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3c:	1ccd      	adds	r5, r1, #3
 800ae3e:	f025 0503 	bic.w	r5, r5, #3
 800ae42:	3508      	adds	r5, #8
 800ae44:	2d0c      	cmp	r5, #12
 800ae46:	bf38      	it	cc
 800ae48:	250c      	movcc	r5, #12
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	4607      	mov	r7, r0
 800ae4e:	db01      	blt.n	800ae54 <_malloc_r+0x1c>
 800ae50:	42a9      	cmp	r1, r5
 800ae52:	d905      	bls.n	800ae60 <_malloc_r+0x28>
 800ae54:	230c      	movs	r3, #12
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	2600      	movs	r6, #0
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae60:	4e2e      	ldr	r6, [pc, #184]	; (800af1c <_malloc_r+0xe4>)
 800ae62:	f000 fbf1 	bl	800b648 <__malloc_lock>
 800ae66:	6833      	ldr	r3, [r6, #0]
 800ae68:	461c      	mov	r4, r3
 800ae6a:	bb34      	cbnz	r4, 800aeba <_malloc_r+0x82>
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	4638      	mov	r0, r7
 800ae70:	f7ff ffc2 	bl	800adf8 <sbrk_aligned>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	4604      	mov	r4, r0
 800ae78:	d14d      	bne.n	800af16 <_malloc_r+0xde>
 800ae7a:	6834      	ldr	r4, [r6, #0]
 800ae7c:	4626      	mov	r6, r4
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	d140      	bne.n	800af04 <_malloc_r+0xcc>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	4631      	mov	r1, r6
 800ae86:	4638      	mov	r0, r7
 800ae88:	eb04 0803 	add.w	r8, r4, r3
 800ae8c:	f000 f8ec 	bl	800b068 <_sbrk_r>
 800ae90:	4580      	cmp	r8, r0
 800ae92:	d13a      	bne.n	800af0a <_malloc_r+0xd2>
 800ae94:	6821      	ldr	r1, [r4, #0]
 800ae96:	3503      	adds	r5, #3
 800ae98:	1a6d      	subs	r5, r5, r1
 800ae9a:	f025 0503 	bic.w	r5, r5, #3
 800ae9e:	3508      	adds	r5, #8
 800aea0:	2d0c      	cmp	r5, #12
 800aea2:	bf38      	it	cc
 800aea4:	250c      	movcc	r5, #12
 800aea6:	4629      	mov	r1, r5
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f7ff ffa5 	bl	800adf8 <sbrk_aligned>
 800aeae:	3001      	adds	r0, #1
 800aeb0:	d02b      	beq.n	800af0a <_malloc_r+0xd2>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	442b      	add	r3, r5
 800aeb6:	6023      	str	r3, [r4, #0]
 800aeb8:	e00e      	b.n	800aed8 <_malloc_r+0xa0>
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	1b52      	subs	r2, r2, r5
 800aebe:	d41e      	bmi.n	800aefe <_malloc_r+0xc6>
 800aec0:	2a0b      	cmp	r2, #11
 800aec2:	d916      	bls.n	800aef2 <_malloc_r+0xba>
 800aec4:	1961      	adds	r1, r4, r5
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	6025      	str	r5, [r4, #0]
 800aeca:	bf18      	it	ne
 800aecc:	6059      	strne	r1, [r3, #4]
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	bf08      	it	eq
 800aed2:	6031      	streq	r1, [r6, #0]
 800aed4:	5162      	str	r2, [r4, r5]
 800aed6:	604b      	str	r3, [r1, #4]
 800aed8:	4638      	mov	r0, r7
 800aeda:	f104 060b 	add.w	r6, r4, #11
 800aede:	f000 fbb9 	bl	800b654 <__malloc_unlock>
 800aee2:	f026 0607 	bic.w	r6, r6, #7
 800aee6:	1d23      	adds	r3, r4, #4
 800aee8:	1af2      	subs	r2, r6, r3
 800aeea:	d0b6      	beq.n	800ae5a <_malloc_r+0x22>
 800aeec:	1b9b      	subs	r3, r3, r6
 800aeee:	50a3      	str	r3, [r4, r2]
 800aef0:	e7b3      	b.n	800ae5a <_malloc_r+0x22>
 800aef2:	6862      	ldr	r2, [r4, #4]
 800aef4:	42a3      	cmp	r3, r4
 800aef6:	bf0c      	ite	eq
 800aef8:	6032      	streq	r2, [r6, #0]
 800aefa:	605a      	strne	r2, [r3, #4]
 800aefc:	e7ec      	b.n	800aed8 <_malloc_r+0xa0>
 800aefe:	4623      	mov	r3, r4
 800af00:	6864      	ldr	r4, [r4, #4]
 800af02:	e7b2      	b.n	800ae6a <_malloc_r+0x32>
 800af04:	4634      	mov	r4, r6
 800af06:	6876      	ldr	r6, [r6, #4]
 800af08:	e7b9      	b.n	800ae7e <_malloc_r+0x46>
 800af0a:	230c      	movs	r3, #12
 800af0c:	603b      	str	r3, [r7, #0]
 800af0e:	4638      	mov	r0, r7
 800af10:	f000 fba0 	bl	800b654 <__malloc_unlock>
 800af14:	e7a1      	b.n	800ae5a <_malloc_r+0x22>
 800af16:	6025      	str	r5, [r4, #0]
 800af18:	e7de      	b.n	800aed8 <_malloc_r+0xa0>
 800af1a:	bf00      	nop
 800af1c:	20000b60 	.word	0x20000b60

0800af20 <iprintf>:
 800af20:	b40f      	push	{r0, r1, r2, r3}
 800af22:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <iprintf+0x2c>)
 800af24:	b513      	push	{r0, r1, r4, lr}
 800af26:	681c      	ldr	r4, [r3, #0]
 800af28:	b124      	cbz	r4, 800af34 <iprintf+0x14>
 800af2a:	69a3      	ldr	r3, [r4, #24]
 800af2c:	b913      	cbnz	r3, 800af34 <iprintf+0x14>
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 fa84 	bl	800b43c <__sinit>
 800af34:	ab05      	add	r3, sp, #20
 800af36:	9a04      	ldr	r2, [sp, #16]
 800af38:	68a1      	ldr	r1, [r4, #8]
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 fbb9 	bl	800b6b4 <_vfiprintf_r>
 800af42:	b002      	add	sp, #8
 800af44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af48:	b004      	add	sp, #16
 800af4a:	4770      	bx	lr
 800af4c:	200000e0 	.word	0x200000e0

0800af50 <putchar>:
 800af50:	4b09      	ldr	r3, [pc, #36]	; (800af78 <putchar+0x28>)
 800af52:	b513      	push	{r0, r1, r4, lr}
 800af54:	681c      	ldr	r4, [r3, #0]
 800af56:	4601      	mov	r1, r0
 800af58:	b134      	cbz	r4, 800af68 <putchar+0x18>
 800af5a:	69a3      	ldr	r3, [r4, #24]
 800af5c:	b923      	cbnz	r3, 800af68 <putchar+0x18>
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fa6b 	bl	800b43c <__sinit>
 800af66:	9901      	ldr	r1, [sp, #4]
 800af68:	68a2      	ldr	r2, [r4, #8]
 800af6a:	4620      	mov	r0, r4
 800af6c:	b002      	add	sp, #8
 800af6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af72:	f000 be63 	b.w	800bc3c <_putc_r>
 800af76:	bf00      	nop
 800af78:	200000e0 	.word	0x200000e0

0800af7c <_puts_r>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	460e      	mov	r6, r1
 800af80:	4605      	mov	r5, r0
 800af82:	b118      	cbz	r0, 800af8c <_puts_r+0x10>
 800af84:	6983      	ldr	r3, [r0, #24]
 800af86:	b90b      	cbnz	r3, 800af8c <_puts_r+0x10>
 800af88:	f000 fa58 	bl	800b43c <__sinit>
 800af8c:	69ab      	ldr	r3, [r5, #24]
 800af8e:	68ac      	ldr	r4, [r5, #8]
 800af90:	b913      	cbnz	r3, 800af98 <_puts_r+0x1c>
 800af92:	4628      	mov	r0, r5
 800af94:	f000 fa52 	bl	800b43c <__sinit>
 800af98:	4b2c      	ldr	r3, [pc, #176]	; (800b04c <_puts_r+0xd0>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d120      	bne.n	800afe0 <_puts_r+0x64>
 800af9e:	686c      	ldr	r4, [r5, #4]
 800afa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afa2:	07db      	lsls	r3, r3, #31
 800afa4:	d405      	bmi.n	800afb2 <_puts_r+0x36>
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	0598      	lsls	r0, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_puts_r+0x36>
 800afac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afae:	f000 fae3 	bl	800b578 <__retarget_lock_acquire_recursive>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	0719      	lsls	r1, r3, #28
 800afb6:	d51d      	bpl.n	800aff4 <_puts_r+0x78>
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	b1db      	cbz	r3, 800aff4 <_puts_r+0x78>
 800afbc:	3e01      	subs	r6, #1
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afc4:	3b01      	subs	r3, #1
 800afc6:	60a3      	str	r3, [r4, #8]
 800afc8:	bb39      	cbnz	r1, 800b01a <_puts_r+0x9e>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	da38      	bge.n	800b040 <_puts_r+0xc4>
 800afce:	4622      	mov	r2, r4
 800afd0:	210a      	movs	r1, #10
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f858 	bl	800b088 <__swbuf_r>
 800afd8:	3001      	adds	r0, #1
 800afda:	d011      	beq.n	800b000 <_puts_r+0x84>
 800afdc:	250a      	movs	r5, #10
 800afde:	e011      	b.n	800b004 <_puts_r+0x88>
 800afe0:	4b1b      	ldr	r3, [pc, #108]	; (800b050 <_puts_r+0xd4>)
 800afe2:	429c      	cmp	r4, r3
 800afe4:	d101      	bne.n	800afea <_puts_r+0x6e>
 800afe6:	68ac      	ldr	r4, [r5, #8]
 800afe8:	e7da      	b.n	800afa0 <_puts_r+0x24>
 800afea:	4b1a      	ldr	r3, [pc, #104]	; (800b054 <_puts_r+0xd8>)
 800afec:	429c      	cmp	r4, r3
 800afee:	bf08      	it	eq
 800aff0:	68ec      	ldreq	r4, [r5, #12]
 800aff2:	e7d5      	b.n	800afa0 <_puts_r+0x24>
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 f898 	bl	800b12c <__swsetup_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	d0dd      	beq.n	800afbc <_puts_r+0x40>
 800b000:	f04f 35ff 	mov.w	r5, #4294967295
 800b004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b006:	07da      	lsls	r2, r3, #31
 800b008:	d405      	bmi.n	800b016 <_puts_r+0x9a>
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	059b      	lsls	r3, r3, #22
 800b00e:	d402      	bmi.n	800b016 <_puts_r+0x9a>
 800b010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b012:	f000 fab2 	bl	800b57a <__retarget_lock_release_recursive>
 800b016:	4628      	mov	r0, r5
 800b018:	bd70      	pop	{r4, r5, r6, pc}
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	da04      	bge.n	800b028 <_puts_r+0xac>
 800b01e:	69a2      	ldr	r2, [r4, #24]
 800b020:	429a      	cmp	r2, r3
 800b022:	dc06      	bgt.n	800b032 <_puts_r+0xb6>
 800b024:	290a      	cmp	r1, #10
 800b026:	d004      	beq.n	800b032 <_puts_r+0xb6>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	6022      	str	r2, [r4, #0]
 800b02e:	7019      	strb	r1, [r3, #0]
 800b030:	e7c5      	b.n	800afbe <_puts_r+0x42>
 800b032:	4622      	mov	r2, r4
 800b034:	4628      	mov	r0, r5
 800b036:	f000 f827 	bl	800b088 <__swbuf_r>
 800b03a:	3001      	adds	r0, #1
 800b03c:	d1bf      	bne.n	800afbe <_puts_r+0x42>
 800b03e:	e7df      	b.n	800b000 <_puts_r+0x84>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	250a      	movs	r5, #10
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	701d      	strb	r5, [r3, #0]
 800b04a:	e7db      	b.n	800b004 <_puts_r+0x88>
 800b04c:	0800bee8 	.word	0x0800bee8
 800b050:	0800bf08 	.word	0x0800bf08
 800b054:	0800bec8 	.word	0x0800bec8

0800b058 <puts>:
 800b058:	4b02      	ldr	r3, [pc, #8]	; (800b064 <puts+0xc>)
 800b05a:	4601      	mov	r1, r0
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	f7ff bf8d 	b.w	800af7c <_puts_r>
 800b062:	bf00      	nop
 800b064:	200000e0 	.word	0x200000e0

0800b068 <_sbrk_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_sbrk_r+0x1c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	f7f7 f81a 	bl	80020ac <_sbrk>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_sbrk_r+0x1a>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_sbrk_r+0x1a>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	20000b6c 	.word	0x20000b6c

0800b088 <__swbuf_r>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	460e      	mov	r6, r1
 800b08c:	4614      	mov	r4, r2
 800b08e:	4605      	mov	r5, r0
 800b090:	b118      	cbz	r0, 800b09a <__swbuf_r+0x12>
 800b092:	6983      	ldr	r3, [r0, #24]
 800b094:	b90b      	cbnz	r3, 800b09a <__swbuf_r+0x12>
 800b096:	f000 f9d1 	bl	800b43c <__sinit>
 800b09a:	4b21      	ldr	r3, [pc, #132]	; (800b120 <__swbuf_r+0x98>)
 800b09c:	429c      	cmp	r4, r3
 800b09e:	d12b      	bne.n	800b0f8 <__swbuf_r+0x70>
 800b0a0:	686c      	ldr	r4, [r5, #4]
 800b0a2:	69a3      	ldr	r3, [r4, #24]
 800b0a4:	60a3      	str	r3, [r4, #8]
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	071a      	lsls	r2, r3, #28
 800b0aa:	d52f      	bpl.n	800b10c <__swbuf_r+0x84>
 800b0ac:	6923      	ldr	r3, [r4, #16]
 800b0ae:	b36b      	cbz	r3, 800b10c <__swbuf_r+0x84>
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	6820      	ldr	r0, [r4, #0]
 800b0b4:	1ac0      	subs	r0, r0, r3
 800b0b6:	6963      	ldr	r3, [r4, #20]
 800b0b8:	b2f6      	uxtb	r6, r6
 800b0ba:	4283      	cmp	r3, r0
 800b0bc:	4637      	mov	r7, r6
 800b0be:	dc04      	bgt.n	800b0ca <__swbuf_r+0x42>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 f926 	bl	800b314 <_fflush_r>
 800b0c8:	bb30      	cbnz	r0, 800b118 <__swbuf_r+0x90>
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	60a3      	str	r3, [r4, #8]
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	6022      	str	r2, [r4, #0]
 800b0d6:	701e      	strb	r6, [r3, #0]
 800b0d8:	6963      	ldr	r3, [r4, #20]
 800b0da:	3001      	adds	r0, #1
 800b0dc:	4283      	cmp	r3, r0
 800b0de:	d004      	beq.n	800b0ea <__swbuf_r+0x62>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	07db      	lsls	r3, r3, #31
 800b0e4:	d506      	bpl.n	800b0f4 <__swbuf_r+0x6c>
 800b0e6:	2e0a      	cmp	r6, #10
 800b0e8:	d104      	bne.n	800b0f4 <__swbuf_r+0x6c>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 f911 	bl	800b314 <_fflush_r>
 800b0f2:	b988      	cbnz	r0, 800b118 <__swbuf_r+0x90>
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <__swbuf_r+0x9c>)
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	d101      	bne.n	800b102 <__swbuf_r+0x7a>
 800b0fe:	68ac      	ldr	r4, [r5, #8]
 800b100:	e7cf      	b.n	800b0a2 <__swbuf_r+0x1a>
 800b102:	4b09      	ldr	r3, [pc, #36]	; (800b128 <__swbuf_r+0xa0>)
 800b104:	429c      	cmp	r4, r3
 800b106:	bf08      	it	eq
 800b108:	68ec      	ldreq	r4, [r5, #12]
 800b10a:	e7ca      	b.n	800b0a2 <__swbuf_r+0x1a>
 800b10c:	4621      	mov	r1, r4
 800b10e:	4628      	mov	r0, r5
 800b110:	f000 f80c 	bl	800b12c <__swsetup_r>
 800b114:	2800      	cmp	r0, #0
 800b116:	d0cb      	beq.n	800b0b0 <__swbuf_r+0x28>
 800b118:	f04f 37ff 	mov.w	r7, #4294967295
 800b11c:	e7ea      	b.n	800b0f4 <__swbuf_r+0x6c>
 800b11e:	bf00      	nop
 800b120:	0800bee8 	.word	0x0800bee8
 800b124:	0800bf08 	.word	0x0800bf08
 800b128:	0800bec8 	.word	0x0800bec8

0800b12c <__swsetup_r>:
 800b12c:	4b32      	ldr	r3, [pc, #200]	; (800b1f8 <__swsetup_r+0xcc>)
 800b12e:	b570      	push	{r4, r5, r6, lr}
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	4606      	mov	r6, r0
 800b134:	460c      	mov	r4, r1
 800b136:	b125      	cbz	r5, 800b142 <__swsetup_r+0x16>
 800b138:	69ab      	ldr	r3, [r5, #24]
 800b13a:	b913      	cbnz	r3, 800b142 <__swsetup_r+0x16>
 800b13c:	4628      	mov	r0, r5
 800b13e:	f000 f97d 	bl	800b43c <__sinit>
 800b142:	4b2e      	ldr	r3, [pc, #184]	; (800b1fc <__swsetup_r+0xd0>)
 800b144:	429c      	cmp	r4, r3
 800b146:	d10f      	bne.n	800b168 <__swsetup_r+0x3c>
 800b148:	686c      	ldr	r4, [r5, #4]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b150:	0719      	lsls	r1, r3, #28
 800b152:	d42c      	bmi.n	800b1ae <__swsetup_r+0x82>
 800b154:	06dd      	lsls	r5, r3, #27
 800b156:	d411      	bmi.n	800b17c <__swsetup_r+0x50>
 800b158:	2309      	movs	r3, #9
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	f04f 30ff 	mov.w	r0, #4294967295
 800b166:	e03e      	b.n	800b1e6 <__swsetup_r+0xba>
 800b168:	4b25      	ldr	r3, [pc, #148]	; (800b200 <__swsetup_r+0xd4>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d101      	bne.n	800b172 <__swsetup_r+0x46>
 800b16e:	68ac      	ldr	r4, [r5, #8]
 800b170:	e7eb      	b.n	800b14a <__swsetup_r+0x1e>
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <__swsetup_r+0xd8>)
 800b174:	429c      	cmp	r4, r3
 800b176:	bf08      	it	eq
 800b178:	68ec      	ldreq	r4, [r5, #12]
 800b17a:	e7e6      	b.n	800b14a <__swsetup_r+0x1e>
 800b17c:	0758      	lsls	r0, r3, #29
 800b17e:	d512      	bpl.n	800b1a6 <__swsetup_r+0x7a>
 800b180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b182:	b141      	cbz	r1, 800b196 <__swsetup_r+0x6a>
 800b184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b188:	4299      	cmp	r1, r3
 800b18a:	d002      	beq.n	800b192 <__swsetup_r+0x66>
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7ff fde7 	bl	800ad60 <_free_r>
 800b192:	2300      	movs	r3, #0
 800b194:	6363      	str	r3, [r4, #52]	; 0x34
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6063      	str	r3, [r4, #4]
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	f043 0308 	orr.w	r3, r3, #8
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	b94b      	cbnz	r3, 800b1c6 <__swsetup_r+0x9a>
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1bc:	d003      	beq.n	800b1c6 <__swsetup_r+0x9a>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f000 fa01 	bl	800b5c8 <__smakebuf_r>
 800b1c6:	89a0      	ldrh	r0, [r4, #12]
 800b1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1cc:	f010 0301 	ands.w	r3, r0, #1
 800b1d0:	d00a      	beq.n	800b1e8 <__swsetup_r+0xbc>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60a3      	str	r3, [r4, #8]
 800b1d6:	6963      	ldr	r3, [r4, #20]
 800b1d8:	425b      	negs	r3, r3
 800b1da:	61a3      	str	r3, [r4, #24]
 800b1dc:	6923      	ldr	r3, [r4, #16]
 800b1de:	b943      	cbnz	r3, 800b1f2 <__swsetup_r+0xc6>
 800b1e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1e4:	d1ba      	bne.n	800b15c <__swsetup_r+0x30>
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}
 800b1e8:	0781      	lsls	r1, r0, #30
 800b1ea:	bf58      	it	pl
 800b1ec:	6963      	ldrpl	r3, [r4, #20]
 800b1ee:	60a3      	str	r3, [r4, #8]
 800b1f0:	e7f4      	b.n	800b1dc <__swsetup_r+0xb0>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	e7f7      	b.n	800b1e6 <__swsetup_r+0xba>
 800b1f6:	bf00      	nop
 800b1f8:	200000e0 	.word	0x200000e0
 800b1fc:	0800bee8 	.word	0x0800bee8
 800b200:	0800bf08 	.word	0x0800bf08
 800b204:	0800bec8 	.word	0x0800bec8

0800b208 <__sflush_r>:
 800b208:	898a      	ldrh	r2, [r1, #12]
 800b20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b20e:	4605      	mov	r5, r0
 800b210:	0710      	lsls	r0, r2, #28
 800b212:	460c      	mov	r4, r1
 800b214:	d458      	bmi.n	800b2c8 <__sflush_r+0xc0>
 800b216:	684b      	ldr	r3, [r1, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc05      	bgt.n	800b228 <__sflush_r+0x20>
 800b21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dc02      	bgt.n	800b228 <__sflush_r+0x20>
 800b222:	2000      	movs	r0, #0
 800b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	d0f9      	beq.n	800b222 <__sflush_r+0x1a>
 800b22e:	2300      	movs	r3, #0
 800b230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b234:	682f      	ldr	r7, [r5, #0]
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	d032      	beq.n	800b2a0 <__sflush_r+0x98>
 800b23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	075a      	lsls	r2, r3, #29
 800b240:	d505      	bpl.n	800b24e <__sflush_r+0x46>
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b248:	b10b      	cbz	r3, 800b24e <__sflush_r+0x46>
 800b24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b24c:	1ac0      	subs	r0, r0, r3
 800b24e:	2300      	movs	r3, #0
 800b250:	4602      	mov	r2, r0
 800b252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b254:	6a21      	ldr	r1, [r4, #32]
 800b256:	4628      	mov	r0, r5
 800b258:	47b0      	blx	r6
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	d106      	bne.n	800b26e <__sflush_r+0x66>
 800b260:	6829      	ldr	r1, [r5, #0]
 800b262:	291d      	cmp	r1, #29
 800b264:	d82c      	bhi.n	800b2c0 <__sflush_r+0xb8>
 800b266:	4a2a      	ldr	r2, [pc, #168]	; (800b310 <__sflush_r+0x108>)
 800b268:	40ca      	lsrs	r2, r1
 800b26a:	07d6      	lsls	r6, r2, #31
 800b26c:	d528      	bpl.n	800b2c0 <__sflush_r+0xb8>
 800b26e:	2200      	movs	r2, #0
 800b270:	6062      	str	r2, [r4, #4]
 800b272:	04d9      	lsls	r1, r3, #19
 800b274:	6922      	ldr	r2, [r4, #16]
 800b276:	6022      	str	r2, [r4, #0]
 800b278:	d504      	bpl.n	800b284 <__sflush_r+0x7c>
 800b27a:	1c42      	adds	r2, r0, #1
 800b27c:	d101      	bne.n	800b282 <__sflush_r+0x7a>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	b903      	cbnz	r3, 800b284 <__sflush_r+0x7c>
 800b282:	6560      	str	r0, [r4, #84]	; 0x54
 800b284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b286:	602f      	str	r7, [r5, #0]
 800b288:	2900      	cmp	r1, #0
 800b28a:	d0ca      	beq.n	800b222 <__sflush_r+0x1a>
 800b28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b290:	4299      	cmp	r1, r3
 800b292:	d002      	beq.n	800b29a <__sflush_r+0x92>
 800b294:	4628      	mov	r0, r5
 800b296:	f7ff fd63 	bl	800ad60 <_free_r>
 800b29a:	2000      	movs	r0, #0
 800b29c:	6360      	str	r0, [r4, #52]	; 0x34
 800b29e:	e7c1      	b.n	800b224 <__sflush_r+0x1c>
 800b2a0:	6a21      	ldr	r1, [r4, #32]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	1c41      	adds	r1, r0, #1
 800b2aa:	d1c7      	bne.n	800b23c <__sflush_r+0x34>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0c4      	beq.n	800b23c <__sflush_r+0x34>
 800b2b2:	2b1d      	cmp	r3, #29
 800b2b4:	d001      	beq.n	800b2ba <__sflush_r+0xb2>
 800b2b6:	2b16      	cmp	r3, #22
 800b2b8:	d101      	bne.n	800b2be <__sflush_r+0xb6>
 800b2ba:	602f      	str	r7, [r5, #0]
 800b2bc:	e7b1      	b.n	800b222 <__sflush_r+0x1a>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7ad      	b.n	800b224 <__sflush_r+0x1c>
 800b2c8:	690f      	ldr	r7, [r1, #16]
 800b2ca:	2f00      	cmp	r7, #0
 800b2cc:	d0a9      	beq.n	800b222 <__sflush_r+0x1a>
 800b2ce:	0793      	lsls	r3, r2, #30
 800b2d0:	680e      	ldr	r6, [r1, #0]
 800b2d2:	bf08      	it	eq
 800b2d4:	694b      	ldreq	r3, [r1, #20]
 800b2d6:	600f      	str	r7, [r1, #0]
 800b2d8:	bf18      	it	ne
 800b2da:	2300      	movne	r3, #0
 800b2dc:	eba6 0807 	sub.w	r8, r6, r7
 800b2e0:	608b      	str	r3, [r1, #8]
 800b2e2:	f1b8 0f00 	cmp.w	r8, #0
 800b2e6:	dd9c      	ble.n	800b222 <__sflush_r+0x1a>
 800b2e8:	6a21      	ldr	r1, [r4, #32]
 800b2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2ec:	4643      	mov	r3, r8
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b0      	blx	r6
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	dc06      	bgt.n	800b306 <__sflush_r+0xfe>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	e78e      	b.n	800b224 <__sflush_r+0x1c>
 800b306:	4407      	add	r7, r0
 800b308:	eba8 0800 	sub.w	r8, r8, r0
 800b30c:	e7e9      	b.n	800b2e2 <__sflush_r+0xda>
 800b30e:	bf00      	nop
 800b310:	20400001 	.word	0x20400001

0800b314 <_fflush_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	690b      	ldr	r3, [r1, #16]
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	b913      	cbnz	r3, 800b324 <_fflush_r+0x10>
 800b31e:	2500      	movs	r5, #0
 800b320:	4628      	mov	r0, r5
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	b118      	cbz	r0, 800b32e <_fflush_r+0x1a>
 800b326:	6983      	ldr	r3, [r0, #24]
 800b328:	b90b      	cbnz	r3, 800b32e <_fflush_r+0x1a>
 800b32a:	f000 f887 	bl	800b43c <__sinit>
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <_fflush_r+0x6c>)
 800b330:	429c      	cmp	r4, r3
 800b332:	d11b      	bne.n	800b36c <_fflush_r+0x58>
 800b334:	686c      	ldr	r4, [r5, #4]
 800b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0ef      	beq.n	800b31e <_fflush_r+0xa>
 800b33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b340:	07d0      	lsls	r0, r2, #31
 800b342:	d404      	bmi.n	800b34e <_fflush_r+0x3a>
 800b344:	0599      	lsls	r1, r3, #22
 800b346:	d402      	bmi.n	800b34e <_fflush_r+0x3a>
 800b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b34a:	f000 f915 	bl	800b578 <__retarget_lock_acquire_recursive>
 800b34e:	4628      	mov	r0, r5
 800b350:	4621      	mov	r1, r4
 800b352:	f7ff ff59 	bl	800b208 <__sflush_r>
 800b356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b358:	07da      	lsls	r2, r3, #31
 800b35a:	4605      	mov	r5, r0
 800b35c:	d4e0      	bmi.n	800b320 <_fflush_r+0xc>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	059b      	lsls	r3, r3, #22
 800b362:	d4dd      	bmi.n	800b320 <_fflush_r+0xc>
 800b364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b366:	f000 f908 	bl	800b57a <__retarget_lock_release_recursive>
 800b36a:	e7d9      	b.n	800b320 <_fflush_r+0xc>
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <_fflush_r+0x70>)
 800b36e:	429c      	cmp	r4, r3
 800b370:	d101      	bne.n	800b376 <_fflush_r+0x62>
 800b372:	68ac      	ldr	r4, [r5, #8]
 800b374:	e7df      	b.n	800b336 <_fflush_r+0x22>
 800b376:	4b04      	ldr	r3, [pc, #16]	; (800b388 <_fflush_r+0x74>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	bf08      	it	eq
 800b37c:	68ec      	ldreq	r4, [r5, #12]
 800b37e:	e7da      	b.n	800b336 <_fflush_r+0x22>
 800b380:	0800bee8 	.word	0x0800bee8
 800b384:	0800bf08 	.word	0x0800bf08
 800b388:	0800bec8 	.word	0x0800bec8

0800b38c <std>:
 800b38c:	2300      	movs	r3, #0
 800b38e:	b510      	push	{r4, lr}
 800b390:	4604      	mov	r4, r0
 800b392:	e9c0 3300 	strd	r3, r3, [r0]
 800b396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b39a:	6083      	str	r3, [r0, #8]
 800b39c:	8181      	strh	r1, [r0, #12]
 800b39e:	6643      	str	r3, [r0, #100]	; 0x64
 800b3a0:	81c2      	strh	r2, [r0, #14]
 800b3a2:	6183      	str	r3, [r0, #24]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	2208      	movs	r2, #8
 800b3a8:	305c      	adds	r0, #92	; 0x5c
 800b3aa:	f7ff fcd1 	bl	800ad50 <memset>
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <std+0x38>)
 800b3b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b3b2:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <std+0x3c>)
 800b3b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3b6:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <std+0x40>)
 800b3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3ba:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <std+0x44>)
 800b3bc:	6224      	str	r4, [r4, #32]
 800b3be:	6323      	str	r3, [r4, #48]	; 0x30
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800bccd 	.word	0x0800bccd
 800b3c8:	0800bcef 	.word	0x0800bcef
 800b3cc:	0800bd27 	.word	0x0800bd27
 800b3d0:	0800bd4b 	.word	0x0800bd4b

0800b3d4 <_cleanup_r>:
 800b3d4:	4901      	ldr	r1, [pc, #4]	; (800b3dc <_cleanup_r+0x8>)
 800b3d6:	f000 b8af 	b.w	800b538 <_fwalk_reent>
 800b3da:	bf00      	nop
 800b3dc:	0800b315 	.word	0x0800b315

0800b3e0 <__sfmoreglue>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	2268      	movs	r2, #104	; 0x68
 800b3e4:	1e4d      	subs	r5, r1, #1
 800b3e6:	4355      	muls	r5, r2
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3ee:	f7ff fd23 	bl	800ae38 <_malloc_r>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	b140      	cbz	r0, 800b408 <__sfmoreglue+0x28>
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b3fc:	300c      	adds	r0, #12
 800b3fe:	60a0      	str	r0, [r4, #8]
 800b400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b404:	f7ff fca4 	bl	800ad50 <memset>
 800b408:	4620      	mov	r0, r4
 800b40a:	bd70      	pop	{r4, r5, r6, pc}

0800b40c <__sfp_lock_acquire>:
 800b40c:	4801      	ldr	r0, [pc, #4]	; (800b414 <__sfp_lock_acquire+0x8>)
 800b40e:	f000 b8b3 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b412:	bf00      	nop
 800b414:	20000b69 	.word	0x20000b69

0800b418 <__sfp_lock_release>:
 800b418:	4801      	ldr	r0, [pc, #4]	; (800b420 <__sfp_lock_release+0x8>)
 800b41a:	f000 b8ae 	b.w	800b57a <__retarget_lock_release_recursive>
 800b41e:	bf00      	nop
 800b420:	20000b69 	.word	0x20000b69

0800b424 <__sinit_lock_acquire>:
 800b424:	4801      	ldr	r0, [pc, #4]	; (800b42c <__sinit_lock_acquire+0x8>)
 800b426:	f000 b8a7 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b42a:	bf00      	nop
 800b42c:	20000b6a 	.word	0x20000b6a

0800b430 <__sinit_lock_release>:
 800b430:	4801      	ldr	r0, [pc, #4]	; (800b438 <__sinit_lock_release+0x8>)
 800b432:	f000 b8a2 	b.w	800b57a <__retarget_lock_release_recursive>
 800b436:	bf00      	nop
 800b438:	20000b6a 	.word	0x20000b6a

0800b43c <__sinit>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4604      	mov	r4, r0
 800b440:	f7ff fff0 	bl	800b424 <__sinit_lock_acquire>
 800b444:	69a3      	ldr	r3, [r4, #24]
 800b446:	b11b      	cbz	r3, 800b450 <__sinit+0x14>
 800b448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44c:	f7ff bff0 	b.w	800b430 <__sinit_lock_release>
 800b450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b454:	6523      	str	r3, [r4, #80]	; 0x50
 800b456:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <__sinit+0x68>)
 800b458:	4a13      	ldr	r2, [pc, #76]	; (800b4a8 <__sinit+0x6c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b45e:	42a3      	cmp	r3, r4
 800b460:	bf04      	itt	eq
 800b462:	2301      	moveq	r3, #1
 800b464:	61a3      	streq	r3, [r4, #24]
 800b466:	4620      	mov	r0, r4
 800b468:	f000 f820 	bl	800b4ac <__sfp>
 800b46c:	6060      	str	r0, [r4, #4]
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 f81c 	bl	800b4ac <__sfp>
 800b474:	60a0      	str	r0, [r4, #8]
 800b476:	4620      	mov	r0, r4
 800b478:	f000 f818 	bl	800b4ac <__sfp>
 800b47c:	2200      	movs	r2, #0
 800b47e:	60e0      	str	r0, [r4, #12]
 800b480:	2104      	movs	r1, #4
 800b482:	6860      	ldr	r0, [r4, #4]
 800b484:	f7ff ff82 	bl	800b38c <std>
 800b488:	68a0      	ldr	r0, [r4, #8]
 800b48a:	2201      	movs	r2, #1
 800b48c:	2109      	movs	r1, #9
 800b48e:	f7ff ff7d 	bl	800b38c <std>
 800b492:	68e0      	ldr	r0, [r4, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	2112      	movs	r1, #18
 800b498:	f7ff ff78 	bl	800b38c <std>
 800b49c:	2301      	movs	r3, #1
 800b49e:	61a3      	str	r3, [r4, #24]
 800b4a0:	e7d2      	b.n	800b448 <__sinit+0xc>
 800b4a2:	bf00      	nop
 800b4a4:	0800bec4 	.word	0x0800bec4
 800b4a8:	0800b3d5 	.word	0x0800b3d5

0800b4ac <__sfp>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	f7ff ffac 	bl	800b40c <__sfp_lock_acquire>
 800b4b4:	4b1e      	ldr	r3, [pc, #120]	; (800b530 <__sfp+0x84>)
 800b4b6:	681e      	ldr	r6, [r3, #0]
 800b4b8:	69b3      	ldr	r3, [r6, #24]
 800b4ba:	b913      	cbnz	r3, 800b4c2 <__sfp+0x16>
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7ff ffbd 	bl	800b43c <__sinit>
 800b4c2:	3648      	adds	r6, #72	; 0x48
 800b4c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	d503      	bpl.n	800b4d4 <__sfp+0x28>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	b30b      	cbz	r3, 800b514 <__sfp+0x68>
 800b4d0:	6836      	ldr	r6, [r6, #0]
 800b4d2:	e7f7      	b.n	800b4c4 <__sfp+0x18>
 800b4d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4d8:	b9d5      	cbnz	r5, 800b510 <__sfp+0x64>
 800b4da:	4b16      	ldr	r3, [pc, #88]	; (800b534 <__sfp+0x88>)
 800b4dc:	60e3      	str	r3, [r4, #12]
 800b4de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b4e4:	f000 f847 	bl	800b576 <__retarget_lock_init_recursive>
 800b4e8:	f7ff ff96 	bl	800b418 <__sfp_lock_release>
 800b4ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4f4:	6025      	str	r5, [r4, #0]
 800b4f6:	61a5      	str	r5, [r4, #24]
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b500:	f7ff fc26 	bl	800ad50 <memset>
 800b504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b50c:	4620      	mov	r0, r4
 800b50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b510:	3468      	adds	r4, #104	; 0x68
 800b512:	e7d9      	b.n	800b4c8 <__sfp+0x1c>
 800b514:	2104      	movs	r1, #4
 800b516:	4638      	mov	r0, r7
 800b518:	f7ff ff62 	bl	800b3e0 <__sfmoreglue>
 800b51c:	4604      	mov	r4, r0
 800b51e:	6030      	str	r0, [r6, #0]
 800b520:	2800      	cmp	r0, #0
 800b522:	d1d5      	bne.n	800b4d0 <__sfp+0x24>
 800b524:	f7ff ff78 	bl	800b418 <__sfp_lock_release>
 800b528:	230c      	movs	r3, #12
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	e7ee      	b.n	800b50c <__sfp+0x60>
 800b52e:	bf00      	nop
 800b530:	0800bec4 	.word	0x0800bec4
 800b534:	ffff0001 	.word	0xffff0001

0800b538 <_fwalk_reent>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	4606      	mov	r6, r0
 800b53e:	4688      	mov	r8, r1
 800b540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b544:	2700      	movs	r7, #0
 800b546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b54a:	f1b9 0901 	subs.w	r9, r9, #1
 800b54e:	d505      	bpl.n	800b55c <_fwalk_reent+0x24>
 800b550:	6824      	ldr	r4, [r4, #0]
 800b552:	2c00      	cmp	r4, #0
 800b554:	d1f7      	bne.n	800b546 <_fwalk_reent+0xe>
 800b556:	4638      	mov	r0, r7
 800b558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d907      	bls.n	800b572 <_fwalk_reent+0x3a>
 800b562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b566:	3301      	adds	r3, #1
 800b568:	d003      	beq.n	800b572 <_fwalk_reent+0x3a>
 800b56a:	4629      	mov	r1, r5
 800b56c:	4630      	mov	r0, r6
 800b56e:	47c0      	blx	r8
 800b570:	4307      	orrs	r7, r0
 800b572:	3568      	adds	r5, #104	; 0x68
 800b574:	e7e9      	b.n	800b54a <_fwalk_reent+0x12>

0800b576 <__retarget_lock_init_recursive>:
 800b576:	4770      	bx	lr

0800b578 <__retarget_lock_acquire_recursive>:
 800b578:	4770      	bx	lr

0800b57a <__retarget_lock_release_recursive>:
 800b57a:	4770      	bx	lr

0800b57c <__swhatbuf_r>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	460e      	mov	r6, r1
 800b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b584:	2900      	cmp	r1, #0
 800b586:	b096      	sub	sp, #88	; 0x58
 800b588:	4614      	mov	r4, r2
 800b58a:	461d      	mov	r5, r3
 800b58c:	da08      	bge.n	800b5a0 <__swhatbuf_r+0x24>
 800b58e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	061a      	lsls	r2, r3, #24
 800b598:	d410      	bmi.n	800b5bc <__swhatbuf_r+0x40>
 800b59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59e:	e00e      	b.n	800b5be <__swhatbuf_r+0x42>
 800b5a0:	466a      	mov	r2, sp
 800b5a2:	f000 fbf9 	bl	800bd98 <_fstat_r>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	dbf1      	blt.n	800b58e <__swhatbuf_r+0x12>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5b4:	425a      	negs	r2, r3
 800b5b6:	415a      	adcs	r2, r3
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	e7ee      	b.n	800b59a <__swhatbuf_r+0x1e>
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	2000      	movs	r0, #0
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	b016      	add	sp, #88	; 0x58
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c8 <__smakebuf_r>:
 800b5c8:	898b      	ldrh	r3, [r1, #12]
 800b5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5cc:	079d      	lsls	r5, r3, #30
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	d507      	bpl.n	800b5e4 <__smakebuf_r+0x1c>
 800b5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	6163      	str	r3, [r4, #20]
 800b5e0:	b002      	add	sp, #8
 800b5e2:	bd70      	pop	{r4, r5, r6, pc}
 800b5e4:	ab01      	add	r3, sp, #4
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f7ff ffc8 	bl	800b57c <__swhatbuf_r>
 800b5ec:	9900      	ldr	r1, [sp, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff fc21 	bl	800ae38 <_malloc_r>
 800b5f6:	b948      	cbnz	r0, 800b60c <__smakebuf_r+0x44>
 800b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fc:	059a      	lsls	r2, r3, #22
 800b5fe:	d4ef      	bmi.n	800b5e0 <__smakebuf_r+0x18>
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	81a3      	strh	r3, [r4, #12]
 800b60a:	e7e3      	b.n	800b5d4 <__smakebuf_r+0xc>
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <__smakebuf_r+0x7c>)
 800b60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	6020      	str	r0, [r4, #0]
 800b614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	6120      	str	r0, [r4, #16]
 800b622:	b15b      	cbz	r3, 800b63c <__smakebuf_r+0x74>
 800b624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b628:	4630      	mov	r0, r6
 800b62a:	f000 fbc7 	bl	800bdbc <_isatty_r>
 800b62e:	b128      	cbz	r0, 800b63c <__smakebuf_r+0x74>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f023 0303 	bic.w	r3, r3, #3
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	81a3      	strh	r3, [r4, #12]
 800b63c:	89a0      	ldrh	r0, [r4, #12]
 800b63e:	4305      	orrs	r5, r0
 800b640:	81a5      	strh	r5, [r4, #12]
 800b642:	e7cd      	b.n	800b5e0 <__smakebuf_r+0x18>
 800b644:	0800b3d5 	.word	0x0800b3d5

0800b648 <__malloc_lock>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__malloc_lock+0x8>)
 800b64a:	f7ff bf95 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b64e:	bf00      	nop
 800b650:	20000b68 	.word	0x20000b68

0800b654 <__malloc_unlock>:
 800b654:	4801      	ldr	r0, [pc, #4]	; (800b65c <__malloc_unlock+0x8>)
 800b656:	f7ff bf90 	b.w	800b57a <__retarget_lock_release_recursive>
 800b65a:	bf00      	nop
 800b65c:	20000b68 	.word	0x20000b68

0800b660 <__sfputc_r>:
 800b660:	6893      	ldr	r3, [r2, #8]
 800b662:	3b01      	subs	r3, #1
 800b664:	2b00      	cmp	r3, #0
 800b666:	b410      	push	{r4}
 800b668:	6093      	str	r3, [r2, #8]
 800b66a:	da08      	bge.n	800b67e <__sfputc_r+0x1e>
 800b66c:	6994      	ldr	r4, [r2, #24]
 800b66e:	42a3      	cmp	r3, r4
 800b670:	db01      	blt.n	800b676 <__sfputc_r+0x16>
 800b672:	290a      	cmp	r1, #10
 800b674:	d103      	bne.n	800b67e <__sfputc_r+0x1e>
 800b676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67a:	f7ff bd05 	b.w	800b088 <__swbuf_r>
 800b67e:	6813      	ldr	r3, [r2, #0]
 800b680:	1c58      	adds	r0, r3, #1
 800b682:	6010      	str	r0, [r2, #0]
 800b684:	7019      	strb	r1, [r3, #0]
 800b686:	4608      	mov	r0, r1
 800b688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <__sfputs_r>:
 800b68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	4614      	mov	r4, r2
 800b696:	18d5      	adds	r5, r2, r3
 800b698:	42ac      	cmp	r4, r5
 800b69a:	d101      	bne.n	800b6a0 <__sfputs_r+0x12>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e007      	b.n	800b6b0 <__sfputs_r+0x22>
 800b6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a4:	463a      	mov	r2, r7
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7ff ffda 	bl	800b660 <__sfputc_r>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d1f3      	bne.n	800b698 <__sfputs_r+0xa>
 800b6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6b4 <_vfiprintf_r>:
 800b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b8:	460d      	mov	r5, r1
 800b6ba:	b09d      	sub	sp, #116	; 0x74
 800b6bc:	4614      	mov	r4, r2
 800b6be:	4698      	mov	r8, r3
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	b118      	cbz	r0, 800b6cc <_vfiprintf_r+0x18>
 800b6c4:	6983      	ldr	r3, [r0, #24]
 800b6c6:	b90b      	cbnz	r3, 800b6cc <_vfiprintf_r+0x18>
 800b6c8:	f7ff feb8 	bl	800b43c <__sinit>
 800b6cc:	4b89      	ldr	r3, [pc, #548]	; (800b8f4 <_vfiprintf_r+0x240>)
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	d11b      	bne.n	800b70a <_vfiprintf_r+0x56>
 800b6d2:	6875      	ldr	r5, [r6, #4]
 800b6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	d405      	bmi.n	800b6e6 <_vfiprintf_r+0x32>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	059a      	lsls	r2, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_vfiprintf_r+0x32>
 800b6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e2:	f7ff ff49 	bl	800b578 <__retarget_lock_acquire_recursive>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	071b      	lsls	r3, r3, #28
 800b6ea:	d501      	bpl.n	800b6f0 <_vfiprintf_r+0x3c>
 800b6ec:	692b      	ldr	r3, [r5, #16]
 800b6ee:	b9eb      	cbnz	r3, 800b72c <_vfiprintf_r+0x78>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff fd1a 	bl	800b12c <__swsetup_r>
 800b6f8:	b1c0      	cbz	r0, 800b72c <_vfiprintf_r+0x78>
 800b6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fc:	07dc      	lsls	r4, r3, #31
 800b6fe:	d50e      	bpl.n	800b71e <_vfiprintf_r+0x6a>
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	b01d      	add	sp, #116	; 0x74
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	4b7b      	ldr	r3, [pc, #492]	; (800b8f8 <_vfiprintf_r+0x244>)
 800b70c:	429d      	cmp	r5, r3
 800b70e:	d101      	bne.n	800b714 <_vfiprintf_r+0x60>
 800b710:	68b5      	ldr	r5, [r6, #8]
 800b712:	e7df      	b.n	800b6d4 <_vfiprintf_r+0x20>
 800b714:	4b79      	ldr	r3, [pc, #484]	; (800b8fc <_vfiprintf_r+0x248>)
 800b716:	429d      	cmp	r5, r3
 800b718:	bf08      	it	eq
 800b71a:	68f5      	ldreq	r5, [r6, #12]
 800b71c:	e7da      	b.n	800b6d4 <_vfiprintf_r+0x20>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	0598      	lsls	r0, r3, #22
 800b722:	d4ed      	bmi.n	800b700 <_vfiprintf_r+0x4c>
 800b724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b726:	f7ff ff28 	bl	800b57a <__retarget_lock_release_recursive>
 800b72a:	e7e9      	b.n	800b700 <_vfiprintf_r+0x4c>
 800b72c:	2300      	movs	r3, #0
 800b72e:	9309      	str	r3, [sp, #36]	; 0x24
 800b730:	2320      	movs	r3, #32
 800b732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b736:	f8cd 800c 	str.w	r8, [sp, #12]
 800b73a:	2330      	movs	r3, #48	; 0x30
 800b73c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b900 <_vfiprintf_r+0x24c>
 800b740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b744:	f04f 0901 	mov.w	r9, #1
 800b748:	4623      	mov	r3, r4
 800b74a:	469a      	mov	sl, r3
 800b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b750:	b10a      	cbz	r2, 800b756 <_vfiprintf_r+0xa2>
 800b752:	2a25      	cmp	r2, #37	; 0x25
 800b754:	d1f9      	bne.n	800b74a <_vfiprintf_r+0x96>
 800b756:	ebba 0b04 	subs.w	fp, sl, r4
 800b75a:	d00b      	beq.n	800b774 <_vfiprintf_r+0xc0>
 800b75c:	465b      	mov	r3, fp
 800b75e:	4622      	mov	r2, r4
 800b760:	4629      	mov	r1, r5
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff93 	bl	800b68e <__sfputs_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	f000 80aa 	beq.w	800b8c2 <_vfiprintf_r+0x20e>
 800b76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b770:	445a      	add	r2, fp
 800b772:	9209      	str	r2, [sp, #36]	; 0x24
 800b774:	f89a 3000 	ldrb.w	r3, [sl]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 80a2 	beq.w	800b8c2 <_vfiprintf_r+0x20e>
 800b77e:	2300      	movs	r3, #0
 800b780:	f04f 32ff 	mov.w	r2, #4294967295
 800b784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b788:	f10a 0a01 	add.w	sl, sl, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	9307      	str	r3, [sp, #28]
 800b790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b794:	931a      	str	r3, [sp, #104]	; 0x68
 800b796:	4654      	mov	r4, sl
 800b798:	2205      	movs	r2, #5
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	4858      	ldr	r0, [pc, #352]	; (800b900 <_vfiprintf_r+0x24c>)
 800b7a0:	f7f4 fd36 	bl	8000210 <memchr>
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	b9d8      	cbnz	r0, 800b7e0 <_vfiprintf_r+0x12c>
 800b7a8:	06d1      	lsls	r1, r2, #27
 800b7aa:	bf44      	itt	mi
 800b7ac:	2320      	movmi	r3, #32
 800b7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b2:	0713      	lsls	r3, r2, #28
 800b7b4:	bf44      	itt	mi
 800b7b6:	232b      	movmi	r3, #43	; 0x2b
 800b7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c2:	d015      	beq.n	800b7f0 <_vfiprintf_r+0x13c>
 800b7c4:	9a07      	ldr	r2, [sp, #28]
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d4:	3b30      	subs	r3, #48	; 0x30
 800b7d6:	2b09      	cmp	r3, #9
 800b7d8:	d94e      	bls.n	800b878 <_vfiprintf_r+0x1c4>
 800b7da:	b1b0      	cbz	r0, 800b80a <_vfiprintf_r+0x156>
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	e014      	b.n	800b80a <_vfiprintf_r+0x156>
 800b7e0:	eba0 0308 	sub.w	r3, r0, r8
 800b7e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	46a2      	mov	sl, r4
 800b7ee:	e7d2      	b.n	800b796 <_vfiprintf_r+0xe2>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	1d19      	adds	r1, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9103      	str	r1, [sp, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bfbb      	ittet	lt
 800b7fc:	425b      	neglt	r3, r3
 800b7fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b802:	9307      	strge	r3, [sp, #28]
 800b804:	9307      	strlt	r3, [sp, #28]
 800b806:	bfb8      	it	lt
 800b808:	9204      	strlt	r2, [sp, #16]
 800b80a:	7823      	ldrb	r3, [r4, #0]
 800b80c:	2b2e      	cmp	r3, #46	; 0x2e
 800b80e:	d10c      	bne.n	800b82a <_vfiprintf_r+0x176>
 800b810:	7863      	ldrb	r3, [r4, #1]
 800b812:	2b2a      	cmp	r3, #42	; 0x2a
 800b814:	d135      	bne.n	800b882 <_vfiprintf_r+0x1ce>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d1a      	adds	r2, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9203      	str	r2, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfb8      	it	lt
 800b822:	f04f 33ff 	movlt.w	r3, #4294967295
 800b826:	3402      	adds	r4, #2
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b910 <_vfiprintf_r+0x25c>
 800b82e:	7821      	ldrb	r1, [r4, #0]
 800b830:	2203      	movs	r2, #3
 800b832:	4650      	mov	r0, sl
 800b834:	f7f4 fcec 	bl	8000210 <memchr>
 800b838:	b140      	cbz	r0, 800b84c <_vfiprintf_r+0x198>
 800b83a:	2340      	movs	r3, #64	; 0x40
 800b83c:	eba0 000a 	sub.w	r0, r0, sl
 800b840:	fa03 f000 	lsl.w	r0, r3, r0
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	4303      	orrs	r3, r0
 800b848:	3401      	adds	r4, #1
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b850:	482c      	ldr	r0, [pc, #176]	; (800b904 <_vfiprintf_r+0x250>)
 800b852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b856:	2206      	movs	r2, #6
 800b858:	f7f4 fcda 	bl	8000210 <memchr>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d03f      	beq.n	800b8e0 <_vfiprintf_r+0x22c>
 800b860:	4b29      	ldr	r3, [pc, #164]	; (800b908 <_vfiprintf_r+0x254>)
 800b862:	bb1b      	cbnz	r3, 800b8ac <_vfiprintf_r+0x1f8>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	3307      	adds	r3, #7
 800b868:	f023 0307 	bic.w	r3, r3, #7
 800b86c:	3308      	adds	r3, #8
 800b86e:	9303      	str	r3, [sp, #12]
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	443b      	add	r3, r7
 800b874:	9309      	str	r3, [sp, #36]	; 0x24
 800b876:	e767      	b.n	800b748 <_vfiprintf_r+0x94>
 800b878:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87c:	460c      	mov	r4, r1
 800b87e:	2001      	movs	r0, #1
 800b880:	e7a5      	b.n	800b7ce <_vfiprintf_r+0x11a>
 800b882:	2300      	movs	r3, #0
 800b884:	3401      	adds	r4, #1
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	4619      	mov	r1, r3
 800b88a:	f04f 0c0a 	mov.w	ip, #10
 800b88e:	4620      	mov	r0, r4
 800b890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b894:	3a30      	subs	r2, #48	; 0x30
 800b896:	2a09      	cmp	r2, #9
 800b898:	d903      	bls.n	800b8a2 <_vfiprintf_r+0x1ee>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d0c5      	beq.n	800b82a <_vfiprintf_r+0x176>
 800b89e:	9105      	str	r1, [sp, #20]
 800b8a0:	e7c3      	b.n	800b82a <_vfiprintf_r+0x176>
 800b8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e7f0      	b.n	800b88e <_vfiprintf_r+0x1da>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b16      	ldr	r3, [pc, #88]	; (800b90c <_vfiprintf_r+0x258>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f3af 8000 	nop.w
 800b8bc:	4607      	mov	r7, r0
 800b8be:	1c78      	adds	r0, r7, #1
 800b8c0:	d1d6      	bne.n	800b870 <_vfiprintf_r+0x1bc>
 800b8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c4:	07d9      	lsls	r1, r3, #31
 800b8c6:	d405      	bmi.n	800b8d4 <_vfiprintf_r+0x220>
 800b8c8:	89ab      	ldrh	r3, [r5, #12]
 800b8ca:	059a      	lsls	r2, r3, #22
 800b8cc:	d402      	bmi.n	800b8d4 <_vfiprintf_r+0x220>
 800b8ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d0:	f7ff fe53 	bl	800b57a <__retarget_lock_release_recursive>
 800b8d4:	89ab      	ldrh	r3, [r5, #12]
 800b8d6:	065b      	lsls	r3, r3, #25
 800b8d8:	f53f af12 	bmi.w	800b700 <_vfiprintf_r+0x4c>
 800b8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8de:	e711      	b.n	800b704 <_vfiprintf_r+0x50>
 800b8e0:	ab03      	add	r3, sp, #12
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4b09      	ldr	r3, [pc, #36]	; (800b90c <_vfiprintf_r+0x258>)
 800b8e8:	a904      	add	r1, sp, #16
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f000 f880 	bl	800b9f0 <_printf_i>
 800b8f0:	e7e4      	b.n	800b8bc <_vfiprintf_r+0x208>
 800b8f2:	bf00      	nop
 800b8f4:	0800bee8 	.word	0x0800bee8
 800b8f8:	0800bf08 	.word	0x0800bf08
 800b8fc:	0800bec8 	.word	0x0800bec8
 800b900:	0800bf28 	.word	0x0800bf28
 800b904:	0800bf32 	.word	0x0800bf32
 800b908:	00000000 	.word	0x00000000
 800b90c:	0800b68f 	.word	0x0800b68f
 800b910:	0800bf2e 	.word	0x0800bf2e

0800b914 <_printf_common>:
 800b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b918:	4616      	mov	r6, r2
 800b91a:	4699      	mov	r9, r3
 800b91c:	688a      	ldr	r2, [r1, #8]
 800b91e:	690b      	ldr	r3, [r1, #16]
 800b920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b924:	4293      	cmp	r3, r2
 800b926:	bfb8      	it	lt
 800b928:	4613      	movlt	r3, r2
 800b92a:	6033      	str	r3, [r6, #0]
 800b92c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b930:	4607      	mov	r7, r0
 800b932:	460c      	mov	r4, r1
 800b934:	b10a      	cbz	r2, 800b93a <_printf_common+0x26>
 800b936:	3301      	adds	r3, #1
 800b938:	6033      	str	r3, [r6, #0]
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	0699      	lsls	r1, r3, #26
 800b93e:	bf42      	ittt	mi
 800b940:	6833      	ldrmi	r3, [r6, #0]
 800b942:	3302      	addmi	r3, #2
 800b944:	6033      	strmi	r3, [r6, #0]
 800b946:	6825      	ldr	r5, [r4, #0]
 800b948:	f015 0506 	ands.w	r5, r5, #6
 800b94c:	d106      	bne.n	800b95c <_printf_common+0x48>
 800b94e:	f104 0a19 	add.w	sl, r4, #25
 800b952:	68e3      	ldr	r3, [r4, #12]
 800b954:	6832      	ldr	r2, [r6, #0]
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	42ab      	cmp	r3, r5
 800b95a:	dc26      	bgt.n	800b9aa <_printf_common+0x96>
 800b95c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b960:	1e13      	subs	r3, r2, #0
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	bf18      	it	ne
 800b966:	2301      	movne	r3, #1
 800b968:	0692      	lsls	r2, r2, #26
 800b96a:	d42b      	bmi.n	800b9c4 <_printf_common+0xb0>
 800b96c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b970:	4649      	mov	r1, r9
 800b972:	4638      	mov	r0, r7
 800b974:	47c0      	blx	r8
 800b976:	3001      	adds	r0, #1
 800b978:	d01e      	beq.n	800b9b8 <_printf_common+0xa4>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	68e5      	ldr	r5, [r4, #12]
 800b97e:	6832      	ldr	r2, [r6, #0]
 800b980:	f003 0306 	and.w	r3, r3, #6
 800b984:	2b04      	cmp	r3, #4
 800b986:	bf08      	it	eq
 800b988:	1aad      	subeq	r5, r5, r2
 800b98a:	68a3      	ldr	r3, [r4, #8]
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	bf0c      	ite	eq
 800b990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b994:	2500      	movne	r5, #0
 800b996:	4293      	cmp	r3, r2
 800b998:	bfc4      	itt	gt
 800b99a:	1a9b      	subgt	r3, r3, r2
 800b99c:	18ed      	addgt	r5, r5, r3
 800b99e:	2600      	movs	r6, #0
 800b9a0:	341a      	adds	r4, #26
 800b9a2:	42b5      	cmp	r5, r6
 800b9a4:	d11a      	bne.n	800b9dc <_printf_common+0xc8>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e008      	b.n	800b9bc <_printf_common+0xa8>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	47c0      	blx	r8
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d103      	bne.n	800b9c0 <_printf_common+0xac>
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c0:	3501      	adds	r5, #1
 800b9c2:	e7c6      	b.n	800b952 <_printf_common+0x3e>
 800b9c4:	18e1      	adds	r1, r4, r3
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	2030      	movs	r0, #48	; 0x30
 800b9ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9ce:	4422      	add	r2, r4
 800b9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9d8:	3302      	adds	r3, #2
 800b9da:	e7c7      	b.n	800b96c <_printf_common+0x58>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	4622      	mov	r2, r4
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	47c0      	blx	r8
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	d0e6      	beq.n	800b9b8 <_printf_common+0xa4>
 800b9ea:	3601      	adds	r6, #1
 800b9ec:	e7d9      	b.n	800b9a2 <_printf_common+0x8e>
	...

0800b9f0 <_printf_i>:
 800b9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f4:	7e0f      	ldrb	r7, [r1, #24]
 800b9f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9f8:	2f78      	cmp	r7, #120	; 0x78
 800b9fa:	4691      	mov	r9, r2
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	469a      	mov	sl, r3
 800ba02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba06:	d807      	bhi.n	800ba18 <_printf_i+0x28>
 800ba08:	2f62      	cmp	r7, #98	; 0x62
 800ba0a:	d80a      	bhi.n	800ba22 <_printf_i+0x32>
 800ba0c:	2f00      	cmp	r7, #0
 800ba0e:	f000 80d8 	beq.w	800bbc2 <_printf_i+0x1d2>
 800ba12:	2f58      	cmp	r7, #88	; 0x58
 800ba14:	f000 80a3 	beq.w	800bb5e <_printf_i+0x16e>
 800ba18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba20:	e03a      	b.n	800ba98 <_printf_i+0xa8>
 800ba22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba26:	2b15      	cmp	r3, #21
 800ba28:	d8f6      	bhi.n	800ba18 <_printf_i+0x28>
 800ba2a:	a101      	add	r1, pc, #4	; (adr r1, 800ba30 <_printf_i+0x40>)
 800ba2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba30:	0800ba89 	.word	0x0800ba89
 800ba34:	0800ba9d 	.word	0x0800ba9d
 800ba38:	0800ba19 	.word	0x0800ba19
 800ba3c:	0800ba19 	.word	0x0800ba19
 800ba40:	0800ba19 	.word	0x0800ba19
 800ba44:	0800ba19 	.word	0x0800ba19
 800ba48:	0800ba9d 	.word	0x0800ba9d
 800ba4c:	0800ba19 	.word	0x0800ba19
 800ba50:	0800ba19 	.word	0x0800ba19
 800ba54:	0800ba19 	.word	0x0800ba19
 800ba58:	0800ba19 	.word	0x0800ba19
 800ba5c:	0800bba9 	.word	0x0800bba9
 800ba60:	0800bacd 	.word	0x0800bacd
 800ba64:	0800bb8b 	.word	0x0800bb8b
 800ba68:	0800ba19 	.word	0x0800ba19
 800ba6c:	0800ba19 	.word	0x0800ba19
 800ba70:	0800bbcb 	.word	0x0800bbcb
 800ba74:	0800ba19 	.word	0x0800ba19
 800ba78:	0800bacd 	.word	0x0800bacd
 800ba7c:	0800ba19 	.word	0x0800ba19
 800ba80:	0800ba19 	.word	0x0800ba19
 800ba84:	0800bb93 	.word	0x0800bb93
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	1d1a      	adds	r2, r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	602a      	str	r2, [r5, #0]
 800ba90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e0a3      	b.n	800bbe4 <_printf_i+0x1f4>
 800ba9c:	6820      	ldr	r0, [r4, #0]
 800ba9e:	6829      	ldr	r1, [r5, #0]
 800baa0:	0606      	lsls	r6, r0, #24
 800baa2:	f101 0304 	add.w	r3, r1, #4
 800baa6:	d50a      	bpl.n	800babe <_printf_i+0xce>
 800baa8:	680e      	ldr	r6, [r1, #0]
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	2e00      	cmp	r6, #0
 800baae:	da03      	bge.n	800bab8 <_printf_i+0xc8>
 800bab0:	232d      	movs	r3, #45	; 0x2d
 800bab2:	4276      	negs	r6, r6
 800bab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bab8:	485e      	ldr	r0, [pc, #376]	; (800bc34 <_printf_i+0x244>)
 800baba:	230a      	movs	r3, #10
 800babc:	e019      	b.n	800baf2 <_printf_i+0x102>
 800babe:	680e      	ldr	r6, [r1, #0]
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bac6:	bf18      	it	ne
 800bac8:	b236      	sxthne	r6, r6
 800baca:	e7ef      	b.n	800baac <_printf_i+0xbc>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	6820      	ldr	r0, [r4, #0]
 800bad0:	1d19      	adds	r1, r3, #4
 800bad2:	6029      	str	r1, [r5, #0]
 800bad4:	0601      	lsls	r1, r0, #24
 800bad6:	d501      	bpl.n	800badc <_printf_i+0xec>
 800bad8:	681e      	ldr	r6, [r3, #0]
 800bada:	e002      	b.n	800bae2 <_printf_i+0xf2>
 800badc:	0646      	lsls	r6, r0, #25
 800bade:	d5fb      	bpl.n	800bad8 <_printf_i+0xe8>
 800bae0:	881e      	ldrh	r6, [r3, #0]
 800bae2:	4854      	ldr	r0, [pc, #336]	; (800bc34 <_printf_i+0x244>)
 800bae4:	2f6f      	cmp	r7, #111	; 0x6f
 800bae6:	bf0c      	ite	eq
 800bae8:	2308      	moveq	r3, #8
 800baea:	230a      	movne	r3, #10
 800baec:	2100      	movs	r1, #0
 800baee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baf2:	6865      	ldr	r5, [r4, #4]
 800baf4:	60a5      	str	r5, [r4, #8]
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	bfa2      	ittt	ge
 800bafa:	6821      	ldrge	r1, [r4, #0]
 800bafc:	f021 0104 	bicge.w	r1, r1, #4
 800bb00:	6021      	strge	r1, [r4, #0]
 800bb02:	b90e      	cbnz	r6, 800bb08 <_printf_i+0x118>
 800bb04:	2d00      	cmp	r5, #0
 800bb06:	d04d      	beq.n	800bba4 <_printf_i+0x1b4>
 800bb08:	4615      	mov	r5, r2
 800bb0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb0e:	fb03 6711 	mls	r7, r3, r1, r6
 800bb12:	5dc7      	ldrb	r7, [r0, r7]
 800bb14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb18:	4637      	mov	r7, r6
 800bb1a:	42bb      	cmp	r3, r7
 800bb1c:	460e      	mov	r6, r1
 800bb1e:	d9f4      	bls.n	800bb0a <_printf_i+0x11a>
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d10b      	bne.n	800bb3c <_printf_i+0x14c>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	07de      	lsls	r6, r3, #31
 800bb28:	d508      	bpl.n	800bb3c <_printf_i+0x14c>
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	6861      	ldr	r1, [r4, #4]
 800bb2e:	4299      	cmp	r1, r3
 800bb30:	bfde      	ittt	le
 800bb32:	2330      	movle	r3, #48	; 0x30
 800bb34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb3c:	1b52      	subs	r2, r2, r5
 800bb3e:	6122      	str	r2, [r4, #16]
 800bb40:	f8cd a000 	str.w	sl, [sp]
 800bb44:	464b      	mov	r3, r9
 800bb46:	aa03      	add	r2, sp, #12
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	f7ff fee2 	bl	800b914 <_printf_common>
 800bb50:	3001      	adds	r0, #1
 800bb52:	d14c      	bne.n	800bbee <_printf_i+0x1fe>
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295
 800bb58:	b004      	add	sp, #16
 800bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5e:	4835      	ldr	r0, [pc, #212]	; (800bc34 <_printf_i+0x244>)
 800bb60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb64:	6829      	ldr	r1, [r5, #0]
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb6c:	6029      	str	r1, [r5, #0]
 800bb6e:	061d      	lsls	r5, r3, #24
 800bb70:	d514      	bpl.n	800bb9c <_printf_i+0x1ac>
 800bb72:	07df      	lsls	r7, r3, #31
 800bb74:	bf44      	itt	mi
 800bb76:	f043 0320 	orrmi.w	r3, r3, #32
 800bb7a:	6023      	strmi	r3, [r4, #0]
 800bb7c:	b91e      	cbnz	r6, 800bb86 <_printf_i+0x196>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	f023 0320 	bic.w	r3, r3, #32
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	2310      	movs	r3, #16
 800bb88:	e7b0      	b.n	800baec <_printf_i+0xfc>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	f043 0320 	orr.w	r3, r3, #32
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	2378      	movs	r3, #120	; 0x78
 800bb94:	4828      	ldr	r0, [pc, #160]	; (800bc38 <_printf_i+0x248>)
 800bb96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb9a:	e7e3      	b.n	800bb64 <_printf_i+0x174>
 800bb9c:	0659      	lsls	r1, r3, #25
 800bb9e:	bf48      	it	mi
 800bba0:	b2b6      	uxthmi	r6, r6
 800bba2:	e7e6      	b.n	800bb72 <_printf_i+0x182>
 800bba4:	4615      	mov	r5, r2
 800bba6:	e7bb      	b.n	800bb20 <_printf_i+0x130>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	6826      	ldr	r6, [r4, #0]
 800bbac:	6961      	ldr	r1, [r4, #20]
 800bbae:	1d18      	adds	r0, r3, #4
 800bbb0:	6028      	str	r0, [r5, #0]
 800bbb2:	0635      	lsls	r5, r6, #24
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	d501      	bpl.n	800bbbc <_printf_i+0x1cc>
 800bbb8:	6019      	str	r1, [r3, #0]
 800bbba:	e002      	b.n	800bbc2 <_printf_i+0x1d2>
 800bbbc:	0670      	lsls	r0, r6, #25
 800bbbe:	d5fb      	bpl.n	800bbb8 <_printf_i+0x1c8>
 800bbc0:	8019      	strh	r1, [r3, #0]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	4615      	mov	r5, r2
 800bbc8:	e7ba      	b.n	800bb40 <_printf_i+0x150>
 800bbca:	682b      	ldr	r3, [r5, #0]
 800bbcc:	1d1a      	adds	r2, r3, #4
 800bbce:	602a      	str	r2, [r5, #0]
 800bbd0:	681d      	ldr	r5, [r3, #0]
 800bbd2:	6862      	ldr	r2, [r4, #4]
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f7f4 fb1a 	bl	8000210 <memchr>
 800bbdc:	b108      	cbz	r0, 800bbe2 <_printf_i+0x1f2>
 800bbde:	1b40      	subs	r0, r0, r5
 800bbe0:	6060      	str	r0, [r4, #4]
 800bbe2:	6863      	ldr	r3, [r4, #4]
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbec:	e7a8      	b.n	800bb40 <_printf_i+0x150>
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	47d0      	blx	sl
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d0ab      	beq.n	800bb54 <_printf_i+0x164>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	079b      	lsls	r3, r3, #30
 800bc00:	d413      	bmi.n	800bc2a <_printf_i+0x23a>
 800bc02:	68e0      	ldr	r0, [r4, #12]
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	4298      	cmp	r0, r3
 800bc08:	bfb8      	it	lt
 800bc0a:	4618      	movlt	r0, r3
 800bc0c:	e7a4      	b.n	800bb58 <_printf_i+0x168>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	4632      	mov	r2, r6
 800bc12:	4649      	mov	r1, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	47d0      	blx	sl
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d09b      	beq.n	800bb54 <_printf_i+0x164>
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	68e3      	ldr	r3, [r4, #12]
 800bc20:	9903      	ldr	r1, [sp, #12]
 800bc22:	1a5b      	subs	r3, r3, r1
 800bc24:	42ab      	cmp	r3, r5
 800bc26:	dcf2      	bgt.n	800bc0e <_printf_i+0x21e>
 800bc28:	e7eb      	b.n	800bc02 <_printf_i+0x212>
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	f104 0619 	add.w	r6, r4, #25
 800bc30:	e7f5      	b.n	800bc1e <_printf_i+0x22e>
 800bc32:	bf00      	nop
 800bc34:	0800bf39 	.word	0x0800bf39
 800bc38:	0800bf4a 	.word	0x0800bf4a

0800bc3c <_putc_r>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	460d      	mov	r5, r1
 800bc40:	4614      	mov	r4, r2
 800bc42:	4606      	mov	r6, r0
 800bc44:	b118      	cbz	r0, 800bc4e <_putc_r+0x12>
 800bc46:	6983      	ldr	r3, [r0, #24]
 800bc48:	b90b      	cbnz	r3, 800bc4e <_putc_r+0x12>
 800bc4a:	f7ff fbf7 	bl	800b43c <__sinit>
 800bc4e:	4b1c      	ldr	r3, [pc, #112]	; (800bcc0 <_putc_r+0x84>)
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d124      	bne.n	800bc9e <_putc_r+0x62>
 800bc54:	6874      	ldr	r4, [r6, #4]
 800bc56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc58:	07d8      	lsls	r0, r3, #31
 800bc5a:	d405      	bmi.n	800bc68 <_putc_r+0x2c>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	0599      	lsls	r1, r3, #22
 800bc60:	d402      	bmi.n	800bc68 <_putc_r+0x2c>
 800bc62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc64:	f7ff fc88 	bl	800b578 <__retarget_lock_acquire_recursive>
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	60a3      	str	r3, [r4, #8]
 800bc70:	da05      	bge.n	800bc7e <_putc_r+0x42>
 800bc72:	69a2      	ldr	r2, [r4, #24]
 800bc74:	4293      	cmp	r3, r2
 800bc76:	db1c      	blt.n	800bcb2 <_putc_r+0x76>
 800bc78:	b2eb      	uxtb	r3, r5
 800bc7a:	2b0a      	cmp	r3, #10
 800bc7c:	d019      	beq.n	800bcb2 <_putc_r+0x76>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	6022      	str	r2, [r4, #0]
 800bc84:	701d      	strb	r5, [r3, #0]
 800bc86:	b2ed      	uxtb	r5, r5
 800bc88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc8a:	07da      	lsls	r2, r3, #31
 800bc8c:	d405      	bmi.n	800bc9a <_putc_r+0x5e>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	059b      	lsls	r3, r3, #22
 800bc92:	d402      	bmi.n	800bc9a <_putc_r+0x5e>
 800bc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc96:	f7ff fc70 	bl	800b57a <__retarget_lock_release_recursive>
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	bd70      	pop	{r4, r5, r6, pc}
 800bc9e:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <_putc_r+0x88>)
 800bca0:	429c      	cmp	r4, r3
 800bca2:	d101      	bne.n	800bca8 <_putc_r+0x6c>
 800bca4:	68b4      	ldr	r4, [r6, #8]
 800bca6:	e7d6      	b.n	800bc56 <_putc_r+0x1a>
 800bca8:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <_putc_r+0x8c>)
 800bcaa:	429c      	cmp	r4, r3
 800bcac:	bf08      	it	eq
 800bcae:	68f4      	ldreq	r4, [r6, #12]
 800bcb0:	e7d1      	b.n	800bc56 <_putc_r+0x1a>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7ff f9e6 	bl	800b088 <__swbuf_r>
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	e7e3      	b.n	800bc88 <_putc_r+0x4c>
 800bcc0:	0800bee8 	.word	0x0800bee8
 800bcc4:	0800bf08 	.word	0x0800bf08
 800bcc8:	0800bec8 	.word	0x0800bec8

0800bccc <__sread>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	460c      	mov	r4, r1
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	f000 f894 	bl	800be00 <_read_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	bfab      	itete	ge
 800bcdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcde:	89a3      	ldrhlt	r3, [r4, #12]
 800bce0:	181b      	addge	r3, r3, r0
 800bce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bce6:	bfac      	ite	ge
 800bce8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcea:	81a3      	strhlt	r3, [r4, #12]
 800bcec:	bd10      	pop	{r4, pc}

0800bcee <__swrite>:
 800bcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf2:	461f      	mov	r7, r3
 800bcf4:	898b      	ldrh	r3, [r1, #12]
 800bcf6:	05db      	lsls	r3, r3, #23
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	4616      	mov	r6, r2
 800bcfe:	d505      	bpl.n	800bd0c <__swrite+0x1e>
 800bd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd04:	2302      	movs	r3, #2
 800bd06:	2200      	movs	r2, #0
 800bd08:	f000 f868 	bl	800bddc <_lseek_r>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd22:	f000 b817 	b.w	800bd54 <_write_r>

0800bd26 <__sseek>:
 800bd26:	b510      	push	{r4, lr}
 800bd28:	460c      	mov	r4, r1
 800bd2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2e:	f000 f855 	bl	800bddc <_lseek_r>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	bf15      	itete	ne
 800bd38:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd42:	81a3      	strheq	r3, [r4, #12]
 800bd44:	bf18      	it	ne
 800bd46:	81a3      	strhne	r3, [r4, #12]
 800bd48:	bd10      	pop	{r4, pc}

0800bd4a <__sclose>:
 800bd4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4e:	f000 b813 	b.w	800bd78 <_close_r>
	...

0800bd54 <_write_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	; (800bd74 <_write_r+0x20>)
 800bd58:	4604      	mov	r4, r0
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	2200      	movs	r2, #0
 800bd60:	602a      	str	r2, [r5, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7f5 fbed 	bl	8001542 <_write>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_write_r+0x1e>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_write_r+0x1e>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	20000b6c 	.word	0x20000b6c

0800bd78 <_close_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d06      	ldr	r5, [pc, #24]	; (800bd94 <_close_r+0x1c>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f6 f95d 	bl	8002042 <_close>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_close_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_close_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20000b6c 	.word	0x20000b6c

0800bd98 <_fstat_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_fstat_r+0x20>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f7f6 f958 	bl	800205a <_fstat>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	d102      	bne.n	800bdb4 <_fstat_r+0x1c>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	b103      	cbz	r3, 800bdb4 <_fstat_r+0x1c>
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd38      	pop	{r3, r4, r5, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000b6c 	.word	0x20000b6c

0800bdbc <_isatty_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d06      	ldr	r5, [pc, #24]	; (800bdd8 <_isatty_r+0x1c>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	602b      	str	r3, [r5, #0]
 800bdc8:	f7f6 f957 	bl	800207a <_isatty>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_isatty_r+0x1a>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_isatty_r+0x1a>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20000b6c 	.word	0x20000b6c

0800bddc <_lseek_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d07      	ldr	r5, [pc, #28]	; (800bdfc <_lseek_r+0x20>)
 800bde0:	4604      	mov	r4, r0
 800bde2:	4608      	mov	r0, r1
 800bde4:	4611      	mov	r1, r2
 800bde6:	2200      	movs	r2, #0
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f7f6 f950 	bl	8002090 <_lseek>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_lseek_r+0x1e>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_lseek_r+0x1e>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	20000b6c 	.word	0x20000b6c

0800be00 <_read_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4d07      	ldr	r5, [pc, #28]	; (800be20 <_read_r+0x20>)
 800be04:	4604      	mov	r4, r0
 800be06:	4608      	mov	r0, r1
 800be08:	4611      	mov	r1, r2
 800be0a:	2200      	movs	r2, #0
 800be0c:	602a      	str	r2, [r5, #0]
 800be0e:	461a      	mov	r2, r3
 800be10:	f7f6 f8fa 	bl	8002008 <_read>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d102      	bne.n	800be1e <_read_r+0x1e>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b103      	cbz	r3, 800be1e <_read_r+0x1e>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	20000b6c 	.word	0x20000b6c

0800be24 <_init>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	bf00      	nop
 800be28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2a:	bc08      	pop	{r3}
 800be2c:	469e      	mov	lr, r3
 800be2e:	4770      	bx	lr

0800be30 <_fini>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	bf00      	nop
 800be34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be36:	bc08      	pop	{r3}
 800be38:	469e      	mov	lr, r3
 800be3a:	4770      	bx	lr
