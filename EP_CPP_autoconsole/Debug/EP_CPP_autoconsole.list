
EP_CPP_autoconsole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007c80  08007c80  00017c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  080082d0  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  08008370  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000708  2000031c  08008410  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a24  08008410  00020a24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019b34  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d4  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  0003d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fe8  00000000  00000000  0003e388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c4c4  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017c39  00000000  00000000  0006b834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8512  00000000  00000000  0008346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017b97f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005944  00000000  00000000  0017b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c64 	.word	0x08007c64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	08007c64 	.word	0x08007c64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f38:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d013      	beq.n	8000f6c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f48:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f4c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f54:	e000      	b.n	8000f58 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f62:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 ff44 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f818 	bl	8000fb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <main+0x34>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 f967 	bl	8001260 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f92:	f000 f879 	bl	8001088 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f96:	f000 f905 	bl	80011a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f9a:	f000 f933 	bl	8001204 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f9e:	f000 f8c1 	bl	8001124 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <main+0x38>)
 8000fa4:	f004 fe4c 	bl	8005c40 <puts>
	  cpp_main();
 8000fa8:	f000 fed6 	bl	8001d58 <cpp_main>
	  printf(" C Main started!\n");
 8000fac:	e7f9      	b.n	8000fa2 <main+0x26>
 8000fae:	bf00      	nop
 8000fb0:	e000007c 	.word	0xe000007c
 8000fb4:	08007c80 	.word	0x08007c80

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f84c 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fdc:	f001 fff4 	bl	8002fc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <SystemClock_Config+0xc8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <SystemClock_Config+0xcc>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <SystemClock_Config+0xcc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001018:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800102c:	2348      	movs	r3, #72	; 0x48
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001034:	2303      	movs	r3, #3
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f001 ffd3 	bl	8002fe8 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001048:	f000 f9c8 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fa61 	bl	8003530 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001074:	f000 f9b2 	bl	80013dc <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	; 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_ETH_Init+0x84>)
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <MX_ETH_Init+0x88>)
 8001090:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ETH_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ETH_Init+0x8c>)
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ETH_Init+0x8c>)
 80010a0:	22e1      	movs	r2, #225	; 0xe1
 80010a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ETH_Init+0x8c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ETH_Init+0x8c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ETH_Init+0x8c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_ETH_Init+0x84>)
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <MX_ETH_Init+0x8c>)
 80010ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_ETH_Init+0x84>)
 80010be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_ETH_Init+0x84>)
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <MX_ETH_Init+0x90>)
 80010c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_ETH_Init+0x84>)
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_ETH_Init+0x94>)
 80010ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_ETH_Init+0x84>)
 80010d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_ETH_Init+0x84>)
 80010da:	f000 ffff 	bl	80020dc <HAL_ETH_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010e4:	f000 f97a 	bl	80013dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010e8:	2238      	movs	r2, #56	; 0x38
 80010ea:	2100      	movs	r1, #0
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_ETH_Init+0x98>)
 80010ee:	f003 ffb9 	bl	8005064 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_ETH_Init+0x98>)
 80010f4:	2221      	movs	r2, #33	; 0x21
 80010f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_ETH_Init+0x98>)
 80010fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_ETH_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000370 	.word	0x20000370
 8001110:	40028000 	.word	0x40028000
 8001114:	20000a04 	.word	0x20000a04
 8001118:	2000027c 	.word	0x2000027c
 800111c:	200001dc 	.word	0x200001dc
 8001120:	20000338 	.word	0x20000338

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f001 fcc2 	bl	8002ae8 <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f937 	bl	80013dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f001 fd49 	bl	8002c08 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 f92e 	bl	80013dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f001 fd8b 	bl	8002c9e <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f925 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000420 	.word	0x20000420
 800119c:	40005400 	.word	0x40005400
 80011a0:	00808cd2 	.word	0x00808cd2

080011a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <MX_USART3_UART_Init+0x5c>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART3_UART_Init+0x58>)
 80011e8:	f002 ffb8 	bl	800415c <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011f2:	f000 f8f3 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000474 	.word	0x20000474
 8001200:	40004800 	.word	0x40004800

08001204 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800120e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001212:	2206      	movs	r2, #6
 8001214:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001218:	2202      	movs	r2, #2
 800121a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001224:	2202      	movs	r2, #2
 8001226:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	2201      	movs	r2, #1
 800122c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123c:	2201      	movs	r2, #1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001248:	f001 fd75 	bl	8002d36 <HAL_PCD_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001252:	f000 f8c3 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200004fc 	.word	0x200004fc

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <MX_GPIO_Init+0x134>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <MX_GPIO_Init+0x134>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <MX_GPIO_Init+0x134>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_GPIO_Init+0x134>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <MX_GPIO_Init+0x134>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x134>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x134>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <MX_GPIO_Init+0x134>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <MX_GPIO_Init+0x134>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <MX_GPIO_Init+0x134>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <MX_GPIO_Init+0x134>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <MX_GPIO_Init+0x134>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <MX_GPIO_Init+0x134>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <MX_GPIO_Init+0x134>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0x134>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0x134>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <MX_GPIO_Init+0x134>)
 80012f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0x134>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f244 0181 	movw	r1, #16513	; 0x4081
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <MX_GPIO_Init+0x138>)
 800130e:	f001 fbb7 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <MX_GPIO_Init+0x13c>)
 8001318:	f001 fbb2 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_GPIO_Init+0x140>)
 8001334:	f001 f9f8 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin;
 8001338:	f244 0381 	movw	r3, #16513	; 0x4081
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x138>)
 8001352:	f001 f9e9 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0x13c>)
 800136e:	f001 f9db 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0x13c>)
 8001386:	f001 f9cf 	bl	8002728 <HAL_GPIO_Init>

}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	; 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40020800 	.word	0x40020800

080013a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e009      	b.n	80013ca <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fdb4 	bl	8000f2c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbf1      	blt.n	80013b6 <_write+0x12>
  }
  return len;
 80013d2:	687b      	ldr	r3, [r7, #4]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x44>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x44>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x44>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x44>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x44>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_ETH_MspInit+0x158>)
 800144e:	4293      	cmp	r3, r2
 8001450:	f040 8096 	bne.w	8001580 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a40      	ldr	r2, [pc, #256]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800148a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149c:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a2e      	ldr	r2, [pc, #184]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150c:	230b      	movs	r3, #11
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	481e      	ldr	r0, [pc, #120]	; (8001590 <HAL_ETH_MspInit+0x160>)
 8001518:	f001 f906 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800151c:	2386      	movs	r3, #134	; 0x86
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152c:	230b      	movs	r3, #11
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <HAL_ETH_MspInit+0x164>)
 8001538:	f001 f8f6 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154e:	230b      	movs	r3, #11
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <HAL_ETH_MspInit+0x168>)
 800155a:	f001 f8e5 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800155e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001570:	230b      	movs	r3, #11
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_ETH_MspInit+0x16c>)
 800157c:	f001 f8d4 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40028000 	.word	0x40028000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40021800 	.word	0x40021800

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0aa      	sub	sp, #168	; 0xa8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2284      	movs	r2, #132	; 0x84
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd4f 	bl	8005064 <memset>
  if(hi2c->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d13c      	bne.n	800164a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 f9cc 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ea:	f7ff fef7 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001620:	2304      	movs	r3, #4
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800162a:	4619      	mov	r1, r3
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <HAL_I2C_MspInit+0xbc>)
 800162e:	f001 f87b 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	37a8      	adds	r7, #168	; 0xa8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0aa      	sub	sp, #168	; 0xa8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	2284      	movs	r2, #132	; 0x84
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fcef 	bl	8005064 <memset>
  if(huart->Instance==USART3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_UART_MspInit+0xb4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d13c      	bne.n	800170a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001696:	2300      	movs	r3, #0
 8001698:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f96c 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016aa:	f7ff fe97 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0xb8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f8:	2307      	movs	r3, #7
 80016fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0xbc>)
 8001706:	f001 f80f 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	37a8      	adds	r7, #168	; 0xa8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40004800 	.word	0x40004800
 8001718:	40023800 	.word	0x40023800
 800171c:	40020c00 	.word	0x40020c00

08001720 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0ac      	sub	sp, #176	; 0xb0
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	2284      	movs	r2, #132	; 0x84
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fc8f 	bl	8005064 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800174e:	d159      	bne.n	8001804 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001750:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001754:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f90b 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800176c:	f7ff fe36 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_PCD_MspInit+0xec>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <HAL_PCD_MspInit+0xec>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_PCD_MspInit+0xec>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001788:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800178c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a2:	230a      	movs	r3, #10
 80017a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <HAL_PCD_MspInit+0xf0>)
 80017b0:	f000 ffba 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_PCD_MspInit+0xf0>)
 80017d0:	f000 ffaa 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017de:	6353      	str	r3, [r2, #52]	; 0x34
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6453      	str	r3, [r2, #68]	; 0x44
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_PCD_MspInit+0xec>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	37b0      	adds	r7, #176	; 0xb0
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 fb12 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001882:	f003 fbb5 	bl	8004ff0 <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
	}

return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f003 fb36 	bl	8004ff0 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20050000 	.word	0x20050000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000a0c 	.word	0x20000a0c
 80019b8:	20000a28 	.word	0x20000a28

080019bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffd7 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f003 faf5 	bl	8004ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fab3 	bl	8000f7c <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a24:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8001a28:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8001a2c:	20000a24 	.word	0x20000a24

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>

08001a32 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>:
	uint32_t DelayNoneBlocking_tickstart; 	// last_time
public:
	NoneBlockSystemTickDelay();
	virtual ~NoneBlockSystemTickDelay();

	void DelayNonBlocking_Init(uint32_t Delay) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
		DelayNoneBlocking_wait = Delay;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	605a      	str	r2, [r3, #4]
		DelayNoneBlocking_tickstart = HAL_GetTick();
 8001a42:	f000 fa35 	bl	8001eb0 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
	}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>:

	uint8_t DelayNonBlocking_CheckExpiration() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
		// 1: Toggle LED!
		// 0: Don't Toggle LED!
		if(HAL_GetTick() - DelayNoneBlocking_wait > DelayNoneBlocking_tickstart)
 8001a5c:	f000 fa28 	bl	8001eb0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	bf8c      	ite	hi
 8001a70:	2301      	movhi	r3, #1
 8001a72:	2300      	movls	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x34>
		{
			DelayNoneBlocking_tickstart = HAL_GetTick();
 8001a7a:	f000 fa19 	bl	8001eb0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
			return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x36>
		}
		else
		{
			return 0;
 8001a88:	2300      	movs	r3, #0
		}
	}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN5myHal10STM32H7Led9toggleLEDEv>:
public:
	STM32H7Led(GPIO_TypeDef* aPort,
			   uint16_t aPin);
	virtual ~STM32H7Led();

	const void toggleLED(void) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(Port, Pin);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	891b      	ldrh	r3, [r3, #8]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f001 f804 	bl	8002ab2 <HAL_GPIO_TogglePin>
	}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>:
 *      Author: raphael.baumeler
 */

#include "BlinkingLed.h"

BlinkingLed::BlinkingLed(GPIO_TypeDef *aPort, uint16_t aPin, float_t aFrequency, uint16_t aDutyCycle)	:
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	ed87 0a00 	vstr	s0, [r7]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	80fb      	strh	r3, [r7, #6]
 8001aca:	4613      	mov	r3, r2
 8001acc:	80bb      	strh	r3, [r7, #4]
STM32H7Led(aPort, aPin), Frequency(aFrequency), DutyCycle(aDutyCycle)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f899 	bl	8001c08 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8c2 	bl	8001c68 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xa8>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xac>)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	619a      	str	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88ba      	ldrh	r2, [r7, #4]
 8001afa:	839a      	strh	r2, [r3, #28]
{
	uint32_t Delay = uint32_t((1000.0/aFrequency)*(aDutyCycle/100.0)); //in ms
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f7fe fd43 	bl	8000588 <__aeabi_f2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	f04f 0000 	mov.w	r0, #0
 8001b0a:	4916      	ldr	r1, [pc, #88]	; (8001b64 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb0>)
 8001b0c:	f7fe febe 	bl	800088c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd22 	bl	8000564 <__aeabi_i2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb4>)
 8001b26:	f7fe feb1 	bl	800088c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fd81 	bl	8000638 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f853 	bl	8000be8 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	617b      	str	r3, [r7, #20]
	NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6979      	ldr	r1, [r7, #20]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff71 	bl	8001a32 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
}
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	08007cd0 	.word	0x08007cd0
 8001b60:	08007ce0 	.word	0x08007ce0
 8001b64:	408f4000 	.word	0x408f4000
 8001b68:	40590000 	.word	0x40590000

08001b6c <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <_ZN11BlinkingLedD1Ev+0x30>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <_ZN11BlinkingLedD1Ev+0x34>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	330c      	adds	r3, #12
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f889 	bl	8001c9c <_ZN5myHal10STM32H7LedD1Ev>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f84b 	bl	8001c28 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
}
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	08007cd0 	.word	0x08007cd0
 8001ba0:	08007ce0 	.word	0x08007ce0

08001ba4 <_ZThn12_N11BlinkingLedD1Ev>:
public:
	BlinkingLed(GPIO_TypeDef* aPort,
				uint16_t aPin,
			    float_t aFrequency=1,
			    uint16_t aDutyCycle=50);
	virtual ~BlinkingLed();
 8001ba4:	f1a0 000c 	sub.w	r0, r0, #12
 8001ba8:	f7ff bfe0 	b.w	8001b6c <_ZN11BlinkingLedD1Ev>

08001bac <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
}
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffd9 	bl	8001b6c <_ZN11BlinkingLedD1Ev>
 8001bba:	2120      	movs	r1, #32
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f003 fa13 	bl	8004fe8 <_ZdlPvj>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_ZThn12_N11BlinkingLedD0Ev>:
 8001bcc:	f1a0 000c 	sub.w	r0, r0, #12
 8001bd0:	f7ff bfec 	b.w	8001bac <_ZN11BlinkingLedD0Ev>

08001bd4 <_ZN11BlinkingLed15processBlinkingEv>:

const void BlinkingLed::processBlinking() {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if(NoneBlockSystemTickDelay::DelayNonBlocking_CheckExpiration())
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff38 	bl	8001a54 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <_ZN11BlinkingLed15processBlinkingEv+0x2a>
	{
		STM32H7Led::toggleLED();
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff4a 	bl	8001a92 <_ZN5myHal10STM32H7Led9toggleLEDEv>
	}
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>:
 *      Author: raphael.baumeler
 */

#include "NoneBlockSystemTickDelay.h"

myHal::NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev+0x1c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]

}
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	08007cf0 	.word	0x08007cf0

08001c28 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>:

myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev+0x1c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]

}
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	08007cf0 	.word	0x08007cf0

08001c48 <_ZN5myHal24NoneBlockSystemTickDelayD0Ev>:
myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
}
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffe9 	bl	8001c28 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
 8001c56:	210c      	movs	r1, #12
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f003 f9c5 	bl	8004fe8 <_ZdlPvj>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

myHal::STM32H7Led::STM32H7Led(GPIO_TypeDef *aPort, uint16_t aPin)	:
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
Port(aPort), Pin(aPin)
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	811a      	strh	r2, [r3, #8]
{
}
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	08007d00 	.word	0x08007d00

08001c9c <_ZN5myHal10STM32H7LedD1Ev>:

myHal::STM32H7Led::~STM32H7Led() {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <_ZN5myHal10STM32H7LedD1Ev+0x1c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	08007d00 	.word	0x08007d00

08001cbc <_ZN5myHal10STM32H7LedD0Ev>:
myHal::STM32H7Led::~STM32H7Led() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
}
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ffe9 	bl	8001c9c <_ZN5myHal10STM32H7LedD1Ev>
 8001cca:	210c      	movs	r1, #12
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f003 f98b 	bl	8004fe8 <_ZdlPvj>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZN11BlinkingLed12setFrequencyEf>:
		DutyCycle = dutyCycle;
		// uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
		// NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
	}

	void setFrequency(float_t frequency) {
 8001cdc:	b5b0      	push	{r4, r5, r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	ed87 0a00 	vstr	s0, [r7]
		Frequency = frequency;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	619a      	str	r2, [r3, #24]
		uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc48 	bl	8000588 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	4913      	ldr	r1, [pc, #76]	; (8001d50 <_ZN11BlinkingLed12setFrequencyEf+0x74>)
 8001d02:	f7fe fdc3 	bl	800088c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8b9b      	ldrh	r3, [r3, #28]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc26 	bl	8000564 <__aeabi_i2d>
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <_ZN11BlinkingLed12setFrequencyEf+0x78>)
 8001d1e:	f7fe fdb5 	bl	800088c <__aeabi_ddiv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fc85 	bl	8000638 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff57 	bl	8000be8 <__aeabi_d2uiz>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	60fb      	str	r3, [r7, #12]
		NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fe75 	bl	8001a32 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
	}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	408f4000 	.word	0x408f4000
 8001d54:	40590000 	.word	0x40590000

08001d58 <cpp_main>:
const dataType calcAverage(const dataType *arr, const int len);

template <typename dataType>
vector<dataType> mySort(const int16_t *arr, const int len, int stEleNr);

void cpp_main(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b09a      	sub	sp, #104	; 0x68
 8001d5c:	af00      	add	r7, sp, #0
	printf("CPP Main started!\n");
 8001d5e:	4828      	ldr	r0, [pc, #160]	; (8001e00 <cpp_main+0xa8>)
 8001d60:	f003 ff6e 	bl	8005c40 <puts>

	// Output to Console
	for(auto cnt = 0; cnt<256; cnt++){
 8001d64:	2300      	movs	r3, #0
 8001d66:	667b      	str	r3, [r7, #100]	; 0x64
 8001d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	dc0a      	bgt.n	8001d84 <cpp_main+0x2c>
		printf("Cnt=%d",cnt); printf("\n");
 8001d6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d70:	4824      	ldr	r0, [pc, #144]	; (8001e04 <cpp_main+0xac>)
 8001d72:	f003 fec9 	bl	8005b08 <iprintf>
 8001d76:	200a      	movs	r0, #10
 8001d78:	f003 fede 	bl	8005b38 <putchar>
	for(auto cnt = 0; cnt<256; cnt++){
 8001d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d7e:	3301      	adds	r3, #1
 8001d80:	667b      	str	r3, [r7, #100]	; 0x64
 8001d82:	e7f1      	b.n	8001d68 <cpp_main+0x10>
	}


	// Blinking LED
	BlinkingLed LED1(LD1_green_GPIO_Port, LD1_green_Pin);
 8001d84:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d88:	2332      	movs	r3, #50	; 0x32
 8001d8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d8e:	2201      	movs	r2, #1
 8001d90:	491d      	ldr	r1, [pc, #116]	; (8001e08 <cpp_main+0xb0>)
 8001d92:	f7ff fe8f 	bl	8001ab4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED1.setFrequency(2);	//PB_0:  2Hz, toggle every 250ms
 8001d96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff9c 	bl	8001cdc <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED2(LD2_blue_GPIO_Port, LD2_blue_Pin);
 8001da4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001da8:	2332      	movs	r3, #50	; 0x32
 8001daa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	4915      	ldr	r1, [pc, #84]	; (8001e08 <cpp_main+0xb0>)
 8001db2:	f7ff fe7f 	bl	8001ab4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED2.setFrequency(1);	//PB_7:  1Hz, toggle every 500ms
 8001db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff8c 	bl	8001cdc <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED3(LD3_red_GPIO_Port, LD3_red_Pin);
 8001dc4:	1d38      	adds	r0, r7, #4
 8001dc6:	2332      	movs	r3, #50	; 0x32
 8001dc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001dcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd0:	490d      	ldr	r1, [pc, #52]	; (8001e08 <cpp_main+0xb0>)
 8001dd2:	f7ff fe6f 	bl	8001ab4 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED3.setFrequency(0.5);	//PB_14: 0.5Hz, toggle every 1000ms
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff7d 	bl	8001cdc <_ZN11BlinkingLed12setFrequencyEf>
	while(1){
		LED1.processBlinking();
 8001de2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fef4 	bl	8001bd4 <_ZN11BlinkingLed15processBlinkingEv>
		LED2.processBlinking();
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff feef 	bl	8001bd4 <_ZN11BlinkingLed15processBlinkingEv>
		LED3.processBlinking();
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff feeb 	bl	8001bd4 <_ZN11BlinkingLed15processBlinkingEv>
		LED1.processBlinking();
 8001dfe:	e7f0      	b.n	8001de2 <cpp_main+0x8a>
 8001e00:	08007c94 	.word	0x08007c94
 8001e04:	08007ca8 	.word	0x08007ca8
 8001e08:	40020400 	.word	0x40020400

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f92f 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f806 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fae4 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f93b 	bl	80020c2 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 f911 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000a10 	.word	0x20000a10

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000a10 	.word	0x20000a10

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <__NVIC_SetPriorityGrouping>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <__NVIC_SetPriorityGrouping+0x40>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x40>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	05fa0000 	.word	0x05fa0000

08001f58 <__NVIC_GetPriorityGrouping>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_SetPriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <SysTick_Config>:
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff8e 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff47 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff5c 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff8e 	bl	8001fc8 <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5d 	bl	8001f74 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffb0 	bl	8002030 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06a      	b.n	80021c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2223      	movs	r2, #35	; 0x23
 80020fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff f995 	bl	8001430 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_ETH_Init+0xf0>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a30      	ldr	r2, [pc, #192]	; (80021cc <HAL_ETH_Init+0xf0>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_ETH_Init+0xf0>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_ETH_Init+0xf4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_ETH_Init+0xf4>)
 8002124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002128:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_ETH_Init+0xf4>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4927      	ldr	r1, [pc, #156]	; (80021d0 <HAL_ETH_Init+0xf4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_ETH_Init+0xf4>)
 800213a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002152:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002154:	f7ff feac 	bl	8001eb0 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800215a:	e011      	b.n	8002180 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800215c:	f7ff fea8 	bl	8001eb0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800216a:	d909      	bls.n	8002180 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	22e0      	movs	r2, #224	; 0xe0
 8002178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e021      	b.n	80021c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e4      	bne.n	800215c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f958 	bl	8002448 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f9ff 	bl	800259c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa55 	bl	800264e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	461a      	mov	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f9bd 	bl	800252c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2210      	movs	r2, #16
 80021be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40013800 	.word	0x40013800

080021d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4b51      	ldr	r3, [pc, #324]	; (8002330 <ETH_SetMACConfig+0x15c>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7c1b      	ldrb	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <ETH_SetMACConfig+0x28>
 80021f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021fa:	e000      	b.n	80021fe <ETH_SetMACConfig+0x2a>
 80021fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7c5b      	ldrb	r3, [r3, #17]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <ETH_SetMACConfig+0x38>
 8002206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800220a:	e000      	b.n	800220e <ETH_SetMACConfig+0x3a>
 800220c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800220e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002214:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	7fdb      	ldrb	r3, [r3, #31]
 800221a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800221c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002222:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	7f92      	ldrb	r2, [r2, #30]
 8002228:	2a00      	cmp	r2, #0
 800222a:	d102      	bne.n	8002232 <ETH_SetMACConfig+0x5e>
 800222c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002230:	e000      	b.n	8002234 <ETH_SetMACConfig+0x60>
 8002232:	2200      	movs	r2, #0
                        macconf->Speed |
 8002234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	7f1b      	ldrb	r3, [r3, #28]
 800223a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800223c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002242:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800224a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002252:	2a00      	cmp	r2, #0
 8002254:	d102      	bne.n	800225c <ETH_SetMACConfig+0x88>
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	e000      	b.n	800225e <ETH_SetMACConfig+0x8a>
 800225c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800225e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7bdb      	ldrb	r3, [r3, #15]
 8002264:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002266:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800226c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002274:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002276:	4313      	orrs	r3, r2
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff fe1a 	bl	8001ec8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d101      	bne.n	80022c2 <ETH_SetMACConfig+0xee>
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	e000      	b.n	80022c4 <ETH_SetMACConfig+0xf0>
 80022c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d101      	bne.n	80022da <ETH_SetMACConfig+0x106>
 80022d6:	2208      	movs	r2, #8
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0x108>
 80022da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022e4:	2a01      	cmp	r2, #1
 80022e6:	d101      	bne.n	80022ec <ETH_SetMACConfig+0x118>
 80022e8:	2204      	movs	r2, #4
 80022ea:	e000      	b.n	80022ee <ETH_SetMACConfig+0x11a>
 80022ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022f6:	2a01      	cmp	r2, #1
 80022f8:	d101      	bne.n	80022fe <ETH_SetMACConfig+0x12a>
 80022fa:	2202      	movs	r2, #2
 80022fc:	e000      	b.n	8002300 <ETH_SetMACConfig+0x12c>
 80022fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002300:	4313      	orrs	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff fdd5 	bl	8001ec8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	ff20810f 	.word	0xff20810f

08002334 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <ETH_SetDMAConfig+0x110>)
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <ETH_SetDMAConfig+0x2c>
 800235a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800235e:	e000      	b.n	8002362 <ETH_SetDMAConfig+0x2e>
 8002360:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7b5b      	ldrb	r3, [r3, #13]
 8002366:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002368:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	7f52      	ldrb	r2, [r2, #29]
 800236e:	2a00      	cmp	r2, #0
 8002370:	d102      	bne.n	8002378 <ETH_SetDMAConfig+0x44>
 8002372:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002376:	e000      	b.n	800237a <ETH_SetDMAConfig+0x46>
 8002378:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800237a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	7b9b      	ldrb	r3, [r3, #14]
 8002380:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002382:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002388:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	7f1b      	ldrb	r3, [r3, #28]
 800238e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002390:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	7f9b      	ldrb	r3, [r3, #30]
 8002396:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002398:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800239e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	461a      	mov	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7ff fd7c 	bl	8001ec8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	791b      	ldrb	r3, [r3, #4]
 80023e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002406:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800240c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800241a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002428:	2001      	movs	r0, #1
 800242a:	f7ff fd4d 	bl	8001ec8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	f8de3f23 	.word	0xf8de3f23

08002448 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0a6      	sub	sp, #152	; 0x98
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800245c:	2300      	movs	r3, #0
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002484:	2300      	movs	r3, #0
 8002486:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800248e:	2300      	movs	r3, #0
 8002490:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fe86 	bl	80021d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002502:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002508:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002510:	2300      	movs	r3, #0
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff08 	bl	8002334 <ETH_SetDMAConfig>
}
 8002524:	bf00      	nop
 8002526:	3798      	adds	r7, #152	; 0x98
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3305      	adds	r3, #5
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	3204      	adds	r2, #4
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <ETH_MACAddressConfig+0x68>)
 800254e:	4413      	add	r3, r2
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3303      	adds	r3, #3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	4313      	orrs	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <ETH_MACAddressConfig+0x6c>)
 800257e:	4413      	add	r3, r2
 8002580:	461a      	mov	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6013      	str	r3, [r2, #0]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40028040 	.word	0x40028040
 8002598:	40028044 	.word	0x40028044

0800259c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e03e      	b.n	8002628 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	3206      	adds	r2, #6
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d80c      	bhi.n	800260c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68d9      	ldr	r1, [r3, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e004      	b.n	8002616 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d9bd      	bls.n	80025aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e046      	b.n	80026ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6919      	ldr	r1, [r3, #16]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002698:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	3212      	adds	r2, #18
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d80c      	bhi.n	80026da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6919      	ldr	r1, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	e004      	b.n	80026e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d9b5      	bls.n	800265c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271a:	60da      	str	r2, [r3, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e175      	b.n	8002a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	f040 8164 	bne.w	8002a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d005      	beq.n	800277e <HAL_GPIO_Init+0x56>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d130      	bne.n	80027e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 0201 	and.w	r2, r3, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d017      	beq.n	800281c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d123      	bne.n	8002870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	08da      	lsrs	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3208      	adds	r2, #8
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80be 	beq.w	8002a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ca:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_GPIO_Init+0x328>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d037      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_GPIO_Init+0x330>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_GPIO_Init+0x334>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <HAL_GPIO_Init+0x338>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_GPIO_Init+0x340>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x22a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_GPIO_Init+0x344>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a51      	ldr	r2, [pc, #324]	; (8002a70 <HAL_GPIO_Init+0x348>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a50      	ldr	r2, [pc, #320]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4f      	ldr	r2, [pc, #316]	; (8002a78 <HAL_GPIO_Init+0x350>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x21a>
 800293e:	2309      	movs	r3, #9
 8002940:	e012      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002942:	230a      	movs	r3, #10
 8002944:	e010      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002946:	2308      	movs	r3, #8
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294a:	2307      	movs	r3, #7
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_GPIO_Init+0x328>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae86 	bls.w	8002748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40021c00 	.word	0x40021c00
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40022400 	.word	0x40022400
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac4:	887a      	ldrh	r2, [r7, #2]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fd46 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	e006      	b.n	8002b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d104      	bne.n	8002b82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_I2C_Init+0x11c>)
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	02008000 	.word	0x02008000

08002c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d138      	bne.n	8002c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e032      	b.n	8002c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d139      	bne.n	8002d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e033      	b.n	8002d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2224      	movs	r2, #36	; 0x24
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d38:	b08f      	sub	sp, #60	; 0x3c
 8002d3a:	af0a      	add	r7, sp, #40	; 0x28
 8002d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e116      	b.n	8002f76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fcdc 	bl	8001720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fe92 	bl	8004ab0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f001 fe26 	bl	8004a00 <USB_CoreInit>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0d7      	b.n	8002f76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fe80 	bl	8004ad2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e04a      	b.n	8002e6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	333d      	adds	r3, #61	; 0x3d
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	333c      	adds	r3, #60	; 0x3c
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	b298      	uxth	r0, r3
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	; 0x44
 8002e14:	4602      	mov	r2, r0
 8002e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3340      	adds	r3, #64	; 0x40
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3348      	adds	r3, #72	; 0x48
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	334c      	adds	r3, #76	; 0x4c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3354      	adds	r3, #84	; 0x54
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3af      	bcc.n	8002dd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e044      	b.n	8002f08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3301      	adds	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3b5      	bcc.n	8002e7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	687e      	ldr	r6, [r7, #4]
 8002f1a:	466d      	mov	r5, sp
 8002f1c:	f106 0410 	add.w	r4, r6, #16
 8002f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f30:	1d33      	adds	r3, r6, #4
 8002f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f001 fe19 	bl	8004b6c <USB_DevInit>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e014      	b.n	8002f76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f80b 	bl	8002f80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 ffd7 	bl	8004f22 <USB_DevDisconnect>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	10000003 	.word	0x10000003

08002fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e291      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8087 	beq.w	800311a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300c:	4b96      	ldr	r3, [pc, #600]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b04      	cmp	r3, #4
 8003016:	d00c      	beq.n	8003032 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003018:	4b93      	ldr	r3, [pc, #588]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d112      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06c      	beq.n	8003118 <HAL_RCC_OscConfig+0x130>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d168      	bne.n	8003118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e26b      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x7a>
 8003054:	4b84      	ldr	r3, [pc, #528]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a83      	ldr	r2, [pc, #524]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e02e      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x9c>
 800306a:	4b7f      	ldr	r3, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7e      	ldr	r2, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b7c      	ldr	r3, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7b      	ldr	r2, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800307c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0xc0>
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a72      	ldr	r2, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6b      	ldr	r2, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fef2 	bl	8001eb0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe feee 	bl	8001eb0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e21f      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe8>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fede 	bl	8001eb0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe feda 	bl	8001eb0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e20b      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x110>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d069      	beq.n	80031fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1df      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	493d      	ldr	r1, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e040      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fe90 	bl	8001eb0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fe8c 	bl	8001eb0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1bd      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4929      	ldr	r1, [pc, #164]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fe6c 	bl	8001eb0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe fe68 	bl	8001eb0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e199      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d038      	beq.n	8003278 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	4a15      	ldr	r2, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fe49 	bl	8001eb0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fe45 	bl	8001eb0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e176      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x23a>
 8003240:	e01a      	b.n	8003278 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fe2f 	bl	8001eb0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fe2b 	bl	8001eb0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d903      	bls.n	800326c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e15c      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
 8003268:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a4 	beq.w	80033ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a87      	ldr	r2, [pc, #540]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ba:	4b7f      	ldr	r3, [pc, #508]	; (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7e      	ldr	r2, [pc, #504]	; (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fdf3 	bl	8001eb0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fdef 	bl	8001eb0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	; 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e120      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	4b75      	ldr	r3, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x31a>
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	e02d      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x33c>
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a66      	ldr	r2, [pc, #408]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	e01c      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x35e>
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a60      	ldr	r2, [pc, #384]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a5d      	ldr	r2, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	4a5a      	ldr	r2, [pc, #360]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	; 0x70
 8003352:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fda3 	bl	8001eb0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fd9f 	bl	8001eb0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0ce      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCC_OscConfig+0x386>
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fd8d 	bl	8001eb0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fd89 	bl	8001eb0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a4 	beq.w	8003520 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d06b      	beq.n	80034bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d149      	bne.n	8003480 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a30      	ldr	r2, [pc, #192]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fd5a 	bl	8001eb0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fd56 	bl	8001eb0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4313      	orrs	r3, r2
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800344a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fd2a 	bl	8001eb0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe fd26 	bl	8001eb0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e057      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x478>
 800347e:	e04f      	b.n	8003520 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fd10 	bl	8001eb0 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fd0c 	bl	8001eb0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e03d      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x4ac>
 80034b2:	e035      	b.n	8003520 <HAL_RCC_OscConfig+0x538>
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x544>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d0      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 020f 	bic.w	r2, r3, #15
 800355e:	4965      	ldr	r1, [pc, #404]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d040      	beq.n	8003654 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e073      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fe fc44 	bl	8001eb0 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fc40 	bl	8001eb0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e053      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d210      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e032      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4916      	ldr	r1, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f821 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c6:	4602      	mov	r2, r0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1cc>)
 80036d4:	5ccb      	ldrb	r3, [r1, r3]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1d0>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1d4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fba0 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00
 80036f8:	40023800 	.word	0x40023800
 80036fc:	08007cb0 	.word	0x08007cb0
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800370c:	b094      	sub	sp, #80	; 0x50
 800370e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
 8003714:	2300      	movs	r3, #0
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	2300      	movs	r3, #0
 800371a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003720:	4b79      	ldr	r3, [pc, #484]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d00d      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x40>
 800372c:	2b08      	cmp	r3, #8
 800372e:	f200 80e1 	bhi.w	80038f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x34>
 8003736:	2b04      	cmp	r3, #4
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x3a>
 800373a:	e0db      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b73      	ldr	r3, [pc, #460]	; (800390c <HAL_RCC_GetSysClockFreq+0x204>)
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003740:	e0db      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_GetSysClockFreq+0x208>)
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003746:	e0d8      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003748:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003752:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
 8003768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	f04f 0000 	mov.w	r0, #0
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	0159      	lsls	r1, r3, #5
 8003788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378c:	0150      	lsls	r0, r2, #5
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4621      	mov	r1, r4
 8003794:	1a51      	subs	r1, r2, r1
 8003796:	6139      	str	r1, [r7, #16]
 8003798:	4629      	mov	r1, r5
 800379a:	eb63 0301 	sbc.w	r3, r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	018b      	lsls	r3, r1, #6
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037b6:	4651      	mov	r1, sl
 80037b8:	018a      	lsls	r2, r1, #6
 80037ba:	4651      	mov	r1, sl
 80037bc:	ebb2 0801 	subs.w	r8, r2, r1
 80037c0:	4659      	mov	r1, fp
 80037c2:	eb63 0901 	sbc.w	r9, r3, r1
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037da:	4690      	mov	r8, r2
 80037dc:	4699      	mov	r9, r3
 80037de:	4623      	mov	r3, r4
 80037e0:	eb18 0303 	adds.w	r3, r8, r3
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	462b      	mov	r3, r5
 80037e8:	eb49 0303 	adc.w	r3, r9, r3
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037fa:	4629      	mov	r1, r5
 80037fc:	024b      	lsls	r3, r1, #9
 80037fe:	4621      	mov	r1, r4
 8003800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003804:	4621      	mov	r1, r4
 8003806:	024a      	lsls	r2, r1, #9
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003818:	f7fd fa06 	bl	8000c28 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	e058      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	4618      	mov	r0, r3
 8003830:	4611      	mov	r1, r2
 8003832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	0159      	lsls	r1, r3, #5
 800384e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003852:	0150      	lsls	r0, r2, #5
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4641      	mov	r1, r8
 800385a:	ebb2 0a01 	subs.w	sl, r2, r1
 800385e:	4649      	mov	r1, r9
 8003860:	eb63 0b01 	sbc.w	fp, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003878:	ebb2 040a 	subs.w	r4, r2, sl
 800387c:	eb63 050b 	sbc.w	r5, r3, fp
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	00eb      	lsls	r3, r5, #3
 800388a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	4614      	mov	r4, r2
 8003892:	461d      	mov	r5, r3
 8003894:	4643      	mov	r3, r8
 8003896:	18e3      	adds	r3, r4, r3
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	464b      	mov	r3, r9
 800389c:	eb45 0303 	adc.w	r3, r5, r3
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ae:	4629      	mov	r1, r5
 80038b0:	028b      	lsls	r3, r1, #10
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b8:	4621      	mov	r1, r4
 80038ba:	028a      	lsls	r2, r1, #10
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	2200      	movs	r2, #0
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	61fa      	str	r2, [r7, #28]
 80038c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038cc:	f7fd f9ac 	bl	8000c28 <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4613      	mov	r3, r2
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	3301      	adds	r3, #1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80038e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetSysClockFreq+0x204>)
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3750      	adds	r7, #80	; 0x50
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	00f42400 	.word	0x00f42400
 8003910:	007a1200 	.word	0x007a1200

08003914 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_RCC_GetHCLKFreq+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003930:	f7ff fff0 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	08007cc0 	.word	0x08007cc0

08003954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003958:	f7ff ffdc 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0b5b      	lsrs	r3, r3, #13
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	08007cc0 	.word	0x08007cc0

0800397c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a4:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a68      	ldr	r2, [pc, #416]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ae:	6093      	str	r3, [r2, #8]
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	4964      	ldr	r1, [pc, #400]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d017      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	4959      	ldr	r1, [pc, #356]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f4:	d101      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d017      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	494a      	ldr	r1, [pc, #296]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a30:	d101      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 808b 	beq.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	4a39      	ldr	r2, [pc, #228]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a78:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fe fa14 	bl	8001eb0 <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8c:	f7fe fa10 	bl	8001eb0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e357      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d035      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d02e      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003aea:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d114      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe f9d8 	bl	8001eb0 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe f9d4 	bl	8001eb0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e319      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ee      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b32:	d111      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	4901      	ldr	r1, [pc, #4]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	0ffffcff 	.word	0x0ffffcff
 8003b58:	4baa      	ldr	r3, [pc, #680]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4aa9      	ldr	r2, [pc, #676]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b62:	6093      	str	r3, [r2, #8]
 8003b64:	4ba7      	ldr	r3, [pc, #668]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	49a4      	ldr	r1, [pc, #656]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b82:	4ba0      	ldr	r3, [pc, #640]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b88:	4a9e      	ldr	r2, [pc, #632]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b92:	4b9c      	ldr	r3, [pc, #624]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4999      	ldr	r1, [pc, #612]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb0:	4b94      	ldr	r3, [pc, #592]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbe:	4991      	ldr	r1, [pc, #580]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd2:	4b8c      	ldr	r3, [pc, #560]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	4988      	ldr	r1, [pc, #544]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bf4:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	4980      	ldr	r1, [pc, #512]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c16:	4b7b      	ldr	r3, [pc, #492]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4977      	ldr	r1, [pc, #476]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c38:	4b72      	ldr	r3, [pc, #456]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	496f      	ldr	r1, [pc, #444]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	f023 020c 	bic.w	r2, r3, #12
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	4966      	ldr	r1, [pc, #408]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	495e      	ldr	r1, [pc, #376]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c9e:	4b59      	ldr	r3, [pc, #356]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	4955      	ldr	r1, [pc, #340]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	494d      	ldr	r1, [pc, #308]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ce2:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4944      	ldr	r1, [pc, #272]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	493c      	ldr	r1, [pc, #240]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	4933      	ldr	r1, [pc, #204]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d56:	492b      	ldr	r1, [pc, #172]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d011      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d78:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	4912      	ldr	r1, [pc, #72]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ddc:	4909      	ldr	r1, [pc, #36]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d006      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80d9 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003df8:	4b02      	ldr	r3, [pc, #8]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a01      	ldr	r2, [pc, #4]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fe f851 	bl	8001eb0 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e12:	f7fe f84d 	bl	8001eb0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e194      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d021      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d11d      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e44:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e52:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	019a      	lsls	r2, r3, #6
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	071b      	lsls	r3, r3, #28
 8003e78:	4957      	ldr	r1, [pc, #348]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eaa:	d129      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eac:	4b4a      	ldr	r3, [pc, #296]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec0:	0f1b      	lsrs	r3, r3, #28
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	019a      	lsls	r2, r3, #6
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	493d      	ldr	r1, [pc, #244]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eee:	f023 021f 	bic.w	r2, r3, #31
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01d      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f12:	0e1b      	lsrs	r3, r3, #24
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	0f1b      	lsrs	r3, r3, #28
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	019a      	lsls	r2, r3, #6
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	071b      	lsls	r3, r3, #28
 8003f40:	4925      	ldr	r1, [pc, #148]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d011      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	071b      	lsls	r3, r3, #28
 8003f70:	4919      	ldr	r1, [pc, #100]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fd ff94 	bl	8001eb0 <HAL_GetTick>
 8003f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f8c:	f7fd ff90 	bl	8001eb0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0d7      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 80cd 	bne.w	800414c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd ff77 	bl	8001eb0 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fc6:	f7fd ff73 	bl	8001eb0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d903      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0ba      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003fd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fdc:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe8:	d0ed      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02e      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d12a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004012:	4b51      	ldr	r3, [pc, #324]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004020:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	0f1b      	lsrs	r3, r3, #28
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	019a      	lsls	r2, r3, #6
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	4944      	ldr	r1, [pc, #272]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004054:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	493d      	ldr	r1, [pc, #244]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d022      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407c:	d11d      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800407e:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	0f1b      	lsrs	r3, r3, #28
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	019a      	lsls	r2, r3, #6
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	071b      	lsls	r3, r3, #28
 80040b2:	4929      	ldr	r1, [pc, #164]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d028      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	019a      	lsls	r2, r3, #6
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	4911      	ldr	r1, [pc, #68]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fd fec4 	bl	8001eb0 <HAL_GetTick>
 8004128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800412c:	f7fd fec0 	bl	8001eb0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e007      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414a:	d1ef      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800

0800415c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e040      	b.n	80041f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fa6e 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f82c 	bl	80041f8 <UART_SetConfig>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e022      	b.n	80041f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa84 	bl	80046c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb0b 	bl	8004804 <UART_CheckIdleState>
 80041ee:	4603      	mov	r3, r0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4ba6      	ldr	r3, [pc, #664]	; (80044bc <UART_SetConfig+0x2c4>)
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	430b      	orrs	r3, r1
 800422e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	430a      	orrs	r2, r1
 8004268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a94      	ldr	r2, [pc, #592]	; (80044c0 <UART_SetConfig+0x2c8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d120      	bne.n	80042b6 <UART_SetConfig+0xbe>
 8004274:	4b93      	ldr	r3, [pc, #588]	; (80044c4 <UART_SetConfig+0x2cc>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b03      	cmp	r3, #3
 8004280:	d816      	bhi.n	80042b0 <UART_SetConfig+0xb8>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x90>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a5 	.word	0x080042a5
 8004290:	0800429f 	.word	0x0800429f
 8004294:	080042ab 	.word	0x080042ab
 8004298:	2301      	movs	r3, #1
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e150      	b.n	8004540 <UART_SetConfig+0x348>
 800429e:	2302      	movs	r3, #2
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e14d      	b.n	8004540 <UART_SetConfig+0x348>
 80042a4:	2304      	movs	r3, #4
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e14a      	b.n	8004540 <UART_SetConfig+0x348>
 80042aa:	2308      	movs	r3, #8
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e147      	b.n	8004540 <UART_SetConfig+0x348>
 80042b0:	2310      	movs	r3, #16
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e144      	b.n	8004540 <UART_SetConfig+0x348>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a83      	ldr	r2, [pc, #524]	; (80044c8 <UART_SetConfig+0x2d0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d132      	bne.n	8004326 <UART_SetConfig+0x12e>
 80042c0:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <UART_SetConfig+0x2cc>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d828      	bhi.n	8004320 <UART_SetConfig+0x128>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0xdc>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004321 	.word	0x08004321
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004321 	.word	0x08004321
 80042f4:	0800430f 	.word	0x0800430f
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004321 	.word	0x08004321
 8004304:	0800431b 	.word	0x0800431b
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e118      	b.n	8004540 <UART_SetConfig+0x348>
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e115      	b.n	8004540 <UART_SetConfig+0x348>
 8004314:	2304      	movs	r3, #4
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e112      	b.n	8004540 <UART_SetConfig+0x348>
 800431a:	2308      	movs	r3, #8
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e10f      	b.n	8004540 <UART_SetConfig+0x348>
 8004320:	2310      	movs	r3, #16
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e10c      	b.n	8004540 <UART_SetConfig+0x348>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a68      	ldr	r2, [pc, #416]	; (80044cc <UART_SetConfig+0x2d4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <UART_SetConfig+0x17a>
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <UART_SetConfig+0x2cc>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800433a:	2b30      	cmp	r3, #48	; 0x30
 800433c:	d013      	beq.n	8004366 <UART_SetConfig+0x16e>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d814      	bhi.n	800436c <UART_SetConfig+0x174>
 8004342:	2b20      	cmp	r3, #32
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x162>
 8004346:	2b20      	cmp	r3, #32
 8004348:	d810      	bhi.n	800436c <UART_SetConfig+0x174>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <UART_SetConfig+0x15c>
 800434e:	2b10      	cmp	r3, #16
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x168>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x174>
 8004354:	2300      	movs	r3, #0
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0f2      	b.n	8004540 <UART_SetConfig+0x348>
 800435a:	2302      	movs	r3, #2
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e0ef      	b.n	8004540 <UART_SetConfig+0x348>
 8004360:	2304      	movs	r3, #4
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e0ec      	b.n	8004540 <UART_SetConfig+0x348>
 8004366:	2308      	movs	r3, #8
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e0e9      	b.n	8004540 <UART_SetConfig+0x348>
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e0e6      	b.n	8004540 <UART_SetConfig+0x348>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a56      	ldr	r2, [pc, #344]	; (80044d0 <UART_SetConfig+0x2d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d120      	bne.n	80043be <UART_SetConfig+0x1c6>
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <UART_SetConfig+0x2cc>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004386:	2bc0      	cmp	r3, #192	; 0xc0
 8004388:	d013      	beq.n	80043b2 <UART_SetConfig+0x1ba>
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d814      	bhi.n	80043b8 <UART_SetConfig+0x1c0>
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d009      	beq.n	80043a6 <UART_SetConfig+0x1ae>
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d810      	bhi.n	80043b8 <UART_SetConfig+0x1c0>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x1a8>
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x1b4>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x1c0>
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e0cc      	b.n	8004540 <UART_SetConfig+0x348>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e0c9      	b.n	8004540 <UART_SetConfig+0x348>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e0c6      	b.n	8004540 <UART_SetConfig+0x348>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e0c3      	b.n	8004540 <UART_SetConfig+0x348>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e0c0      	b.n	8004540 <UART_SetConfig+0x348>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a44      	ldr	r2, [pc, #272]	; (80044d4 <UART_SetConfig+0x2dc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d125      	bne.n	8004414 <UART_SetConfig+0x21c>
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <UART_SetConfig+0x2cc>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0x210>
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043dc:	d817      	bhi.n	800440e <UART_SetConfig+0x216>
 80043de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x204>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d811      	bhi.n	800440e <UART_SetConfig+0x216>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <UART_SetConfig+0x1fe>
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d006      	beq.n	8004402 <UART_SetConfig+0x20a>
 80043f4:	e00b      	b.n	800440e <UART_SetConfig+0x216>
 80043f6:	2300      	movs	r3, #0
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e0a1      	b.n	8004540 <UART_SetConfig+0x348>
 80043fc:	2302      	movs	r3, #2
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e09e      	b.n	8004540 <UART_SetConfig+0x348>
 8004402:	2304      	movs	r3, #4
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e09b      	b.n	8004540 <UART_SetConfig+0x348>
 8004408:	2308      	movs	r3, #8
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e098      	b.n	8004540 <UART_SetConfig+0x348>
 800440e:	2310      	movs	r3, #16
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e095      	b.n	8004540 <UART_SetConfig+0x348>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <UART_SetConfig+0x2e0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d125      	bne.n	800446a <UART_SetConfig+0x272>
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <UART_SetConfig+0x2cc>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442c:	d017      	beq.n	800445e <UART_SetConfig+0x266>
 800442e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004432:	d817      	bhi.n	8004464 <UART_SetConfig+0x26c>
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004438:	d00b      	beq.n	8004452 <UART_SetConfig+0x25a>
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d811      	bhi.n	8004464 <UART_SetConfig+0x26c>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <UART_SetConfig+0x254>
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d006      	beq.n	8004458 <UART_SetConfig+0x260>
 800444a:	e00b      	b.n	8004464 <UART_SetConfig+0x26c>
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e076      	b.n	8004540 <UART_SetConfig+0x348>
 8004452:	2302      	movs	r3, #2
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e073      	b.n	8004540 <UART_SetConfig+0x348>
 8004458:	2304      	movs	r3, #4
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e070      	b.n	8004540 <UART_SetConfig+0x348>
 800445e:	2308      	movs	r3, #8
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e06d      	b.n	8004540 <UART_SetConfig+0x348>
 8004464:	2310      	movs	r3, #16
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e06a      	b.n	8004540 <UART_SetConfig+0x348>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <UART_SetConfig+0x2e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d138      	bne.n	80044e6 <UART_SetConfig+0x2ee>
 8004474:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <UART_SetConfig+0x2cc>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800447e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004482:	d017      	beq.n	80044b4 <UART_SetConfig+0x2bc>
 8004484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004488:	d82a      	bhi.n	80044e0 <UART_SetConfig+0x2e8>
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448e:	d00b      	beq.n	80044a8 <UART_SetConfig+0x2b0>
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d824      	bhi.n	80044e0 <UART_SetConfig+0x2e8>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <UART_SetConfig+0x2aa>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d006      	beq.n	80044ae <UART_SetConfig+0x2b6>
 80044a0:	e01e      	b.n	80044e0 <UART_SetConfig+0x2e8>
 80044a2:	2300      	movs	r3, #0
 80044a4:	77fb      	strb	r3, [r7, #31]
 80044a6:	e04b      	b.n	8004540 <UART_SetConfig+0x348>
 80044a8:	2302      	movs	r3, #2
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	e048      	b.n	8004540 <UART_SetConfig+0x348>
 80044ae:	2304      	movs	r3, #4
 80044b0:	77fb      	strb	r3, [r7, #31]
 80044b2:	e045      	b.n	8004540 <UART_SetConfig+0x348>
 80044b4:	2308      	movs	r3, #8
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e042      	b.n	8004540 <UART_SetConfig+0x348>
 80044ba:	bf00      	nop
 80044bc:	efff69f3 	.word	0xefff69f3
 80044c0:	40011000 	.word	0x40011000
 80044c4:	40023800 	.word	0x40023800
 80044c8:	40004400 	.word	0x40004400
 80044cc:	40004800 	.word	0x40004800
 80044d0:	40004c00 	.word	0x40004c00
 80044d4:	40005000 	.word	0x40005000
 80044d8:	40011400 	.word	0x40011400
 80044dc:	40007800 	.word	0x40007800
 80044e0:	2310      	movs	r3, #16
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e02c      	b.n	8004540 <UART_SetConfig+0x348>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a72      	ldr	r2, [pc, #456]	; (80046b4 <UART_SetConfig+0x4bc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d125      	bne.n	800453c <UART_SetConfig+0x344>
 80044f0:	4b71      	ldr	r3, [pc, #452]	; (80046b8 <UART_SetConfig+0x4c0>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044fe:	d017      	beq.n	8004530 <UART_SetConfig+0x338>
 8004500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004504:	d817      	bhi.n	8004536 <UART_SetConfig+0x33e>
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450a:	d00b      	beq.n	8004524 <UART_SetConfig+0x32c>
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004510:	d811      	bhi.n	8004536 <UART_SetConfig+0x33e>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <UART_SetConfig+0x326>
 8004516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451a:	d006      	beq.n	800452a <UART_SetConfig+0x332>
 800451c:	e00b      	b.n	8004536 <UART_SetConfig+0x33e>
 800451e:	2300      	movs	r3, #0
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e00d      	b.n	8004540 <UART_SetConfig+0x348>
 8004524:	2302      	movs	r3, #2
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e00a      	b.n	8004540 <UART_SetConfig+0x348>
 800452a:	2304      	movs	r3, #4
 800452c:	77fb      	strb	r3, [r7, #31]
 800452e:	e007      	b.n	8004540 <UART_SetConfig+0x348>
 8004530:	2308      	movs	r3, #8
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e004      	b.n	8004540 <UART_SetConfig+0x348>
 8004536:	2310      	movs	r3, #16
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e001      	b.n	8004540 <UART_SetConfig+0x348>
 800453c:	2310      	movs	r3, #16
 800453e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	d15b      	bne.n	8004602 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800454a:	7ffb      	ldrb	r3, [r7, #31]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d828      	bhi.n	80045a2 <UART_SetConfig+0x3aa>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x360>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004585 	.word	0x08004585
 8004560:	0800458d 	.word	0x0800458d
 8004564:	080045a3 	.word	0x080045a3
 8004568:	08004593 	.word	0x08004593
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045a3 	.word	0x080045a3
 8004574:	080045a3 	.word	0x080045a3
 8004578:	0800459b 	.word	0x0800459b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7ff f9d6 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8004580:	61b8      	str	r0, [r7, #24]
        break;
 8004582:	e013      	b.n	80045ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004584:	f7ff f9e6 	bl	8003954 <HAL_RCC_GetPCLK2Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800458c:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <UART_SetConfig+0x4c4>)
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e00c      	b.n	80045ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7ff f8b9 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 8004596:	61b8      	str	r0, [r7, #24]
        break;
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e004      	b.n	80045ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	77bb      	strb	r3, [r7, #30]
        break;
 80045aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d074      	beq.n	800469c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	005a      	lsls	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	d916      	bls.n	80045fc <UART_SetConfig+0x404>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d212      	bcs.n	80045fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f023 030f 	bic.w	r3, r3, #15
 80045de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	89fb      	ldrh	r3, [r7, #14]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	89fa      	ldrh	r2, [r7, #14]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	e04f      	b.n	800469c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	77bb      	strb	r3, [r7, #30]
 8004600:	e04c      	b.n	800469c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004602:	7ffb      	ldrb	r3, [r7, #31]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d828      	bhi.n	800465a <UART_SetConfig+0x462>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0x418>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	0800465b 	.word	0x0800465b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800465b 	.word	0x0800465b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7ff f97a 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8004638:	61b8      	str	r0, [r7, #24]
        break;
 800463a:	e013      	b.n	8004664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7ff f98a 	bl	8003954 <HAL_RCC_GetPCLK2Freq>
 8004640:	61b8      	str	r0, [r7, #24]
        break;
 8004642:	e00f      	b.n	8004664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <UART_SetConfig+0x4c4>)
 8004646:	61bb      	str	r3, [r7, #24]
        break;
 8004648:	e00c      	b.n	8004664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7ff f85d 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 800464e:	61b8      	str	r0, [r7, #24]
        break;
 8004650:	e008      	b.n	8004664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61bb      	str	r3, [r7, #24]
        break;
 8004658:	e004      	b.n	8004664 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	77bb      	strb	r3, [r7, #30]
        break;
 8004662:	bf00      	nop
    }

    if (pclk != 0U)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085a      	lsrs	r2, r3, #1
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	441a      	add	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d909      	bls.n	8004698 <UART_SetConfig+0x4a0>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468a:	d205      	bcs.n	8004698 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e001      	b.n	800469c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40007c00 	.word	0x40007c00
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400

080046c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047be:	d10a      	bne.n	80047d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004814:	f7fd fb4c 	bl	8001eb0 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b08      	cmp	r3, #8
 8004826:	d10e      	bne.n	8004846 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f81b 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e011      	b.n	800486a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b09c      	sub	sp, #112	; 0x70
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	e0a7      	b.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	f000 80a3 	beq.w	80049d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fd fb0f 	bl	8001eb0 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800489e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d13f      	bne.n	8004924 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e068      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d050      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d148      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
 800496c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	66bb      	str	r3, [r7, #104]	; 0x68
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800499e:	623a      	str	r2, [r7, #32]
 80049a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e010      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f43f af48 	beq.w	8004884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3770      	adds	r7, #112	; 0x70
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 001c 	add.w	r0, r7, #28
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d120      	bne.n	8004a5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <USB_CoreInit+0xac>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa96 	bl	8004f80 <USB_CoreReset>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e010      	b.n	8004a7c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa8a 	bl	8004f80 <USB_CoreReset>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10b      	bne.n	8004a9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f043 0206 	orr.w	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa6:	b004      	add	sp, #16
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	ffbdffbf 	.word	0xffbdffbf

08004ab0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 0201 	bic.w	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d115      	bne.n	8004b20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b00:	2001      	movs	r0, #1
 8004b02:	f7fd f9e1 	bl	8001ec8 <HAL_Delay>
      ms++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa29 	bl	8004f64 <USB_GetMode>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d01e      	beq.n	8004b56 <USB_SetCurrentMode+0x84>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b31      	cmp	r3, #49	; 0x31
 8004b1c:	d9f0      	bls.n	8004b00 <USB_SetCurrentMode+0x2e>
 8004b1e:	e01a      	b.n	8004b56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d115      	bne.n	8004b52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7fd f9c8 	bl	8001ec8 <HAL_Delay>
      ms++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa10 	bl	8004f64 <USB_GetMode>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <USB_SetCurrentMode+0x84>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b31      	cmp	r3, #49	; 0x31
 8004b4e:	d9f0      	bls.n	8004b32 <USB_SetCurrentMode+0x60>
 8004b50:	e001      	b.n	8004b56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e005      	b.n	8004b62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b32      	cmp	r3, #50	; 0x32
 8004b5a:	d101      	bne.n	8004b60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e009      	b.n	8004ba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3340      	adds	r3, #64	; 0x40
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b0e      	cmp	r3, #14
 8004ba4:	d9f2      	bls.n	8004b8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11c      	bne.n	8004be6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e005      	b.n	8004bf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	4619      	mov	r1, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	680b      	ldr	r3, [r1, #0]
 8004c10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10c      	bne.n	8004c32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f965 	bl	8004ef0 <USB_SetDevSpeed>
 8004c26:	e008      	b.n	8004c3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c28:	2101      	movs	r1, #1
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f960 	bl	8004ef0 <USB_SetDevSpeed>
 8004c30:	e003      	b.n	8004c3a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c32:	2103      	movs	r1, #3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f95b 	bl	8004ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f8f3 	bl	8004e28 <USB_FlushTxFifo>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f91f 	bl	8004e90 <USB_FlushRxFifo>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e043      	b.n	8004d0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c9c:	d118      	bne.n	8004cd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e013      	b.n	8004ce2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e008      	b.n	8004ce2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	461a      	mov	r2, r3
 8004d02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d3b7      	bcc.n	8004c86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	e043      	b.n	8004da4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d32:	d118      	bne.n	8004d66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e013      	b.n	8004d78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e008      	b.n	8004d78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	461a      	mov	r2, r3
 8004d86:	2300      	movs	r3, #0
 8004d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	461a      	mov	r2, r3
 8004d98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	3301      	adds	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3b7      	bcc.n	8004d1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f043 0210 	orr.w	r2, r3, #16
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699a      	ldr	r2, [r3, #24]
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <USB_DevInit+0x2b4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f043 0208 	orr.w	r2, r3, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <USB_DevInit+0x2b8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr
 8004e20:	803c3800 	.word	0x803c3800
 8004e24:	40000004 	.word	0x40000004

08004e28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <USB_FlushTxFifo+0x64>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e01b      	b.n	8004e80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	daf2      	bge.n	8004e36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	019b      	lsls	r3, r3, #6
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <USB_FlushTxFifo+0x64>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e006      	b.n	8004e80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d0f0      	beq.n	8004e60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	00030d40 	.word	0x00030d40

08004e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <USB_FlushRxFifo+0x5c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e018      	b.n	8004ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	daf2      	bge.n	8004e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a08      	ldr	r2, [pc, #32]	; (8004eec <USB_FlushRxFifo+0x5c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e006      	b.n	8004ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d0f0      	beq.n	8004ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0301 	and.w	r3, r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <USB_CoreReset+0x64>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e01b      	b.n	8004fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	daf2      	bge.n	8004f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <USB_CoreReset+0x64>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d0f0      	beq.n	8004fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	00030d40 	.word	0x00030d40

08004fe8 <_ZdlPvj>:
 8004fe8:	f000 b800 	b.w	8004fec <_ZdlPv>

08004fec <_ZdlPv>:
 8004fec:	f000 b832 	b.w	8005054 <free>

08004ff0 <__errno>:
 8004ff0:	4b01      	ldr	r3, [pc, #4]	; (8004ff8 <__errno+0x8>)
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4d0d      	ldr	r5, [pc, #52]	; (8005034 <__libc_init_array+0x38>)
 8005000:	4c0d      	ldr	r4, [pc, #52]	; (8005038 <__libc_init_array+0x3c>)
 8005002:	1b64      	subs	r4, r4, r5
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	2600      	movs	r6, #0
 8005008:	42a6      	cmp	r6, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	4d0b      	ldr	r5, [pc, #44]	; (800503c <__libc_init_array+0x40>)
 800500e:	4c0c      	ldr	r4, [pc, #48]	; (8005040 <__libc_init_array+0x44>)
 8005010:	f002 fe28 	bl	8007c64 <_init>
 8005014:	1b64      	subs	r4, r4, r5
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	2600      	movs	r6, #0
 800501a:	42a6      	cmp	r6, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	f855 3b04 	ldr.w	r3, [r5], #4
 8005024:	4798      	blx	r3
 8005026:	3601      	adds	r6, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	f855 3b04 	ldr.w	r3, [r5], #4
 800502e:	4798      	blx	r3
 8005030:	3601      	adds	r6, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	080080ec 	.word	0x080080ec
 8005038:	080080ec 	.word	0x080080ec
 800503c:	080080ec 	.word	0x080080ec
 8005040:	080080f0 	.word	0x080080f0

08005044 <malloc>:
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <malloc+0xc>)
 8005046:	4601      	mov	r1, r0
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f000 b87f 	b.w	800514c <_malloc_r>
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c

08005054 <free>:
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <free+0xc>)
 8005056:	4601      	mov	r1, r0
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f000 b80b 	b.w	8005074 <_free_r>
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c

08005064 <memset>:
 8005064:	4402      	add	r2, r0
 8005066:	4603      	mov	r3, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <_free_r>:
 8005074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005076:	2900      	cmp	r1, #0
 8005078:	d044      	beq.n	8005104 <_free_r+0x90>
 800507a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800507e:	9001      	str	r0, [sp, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f1a1 0404 	sub.w	r4, r1, #4
 8005086:	bfb8      	it	lt
 8005088:	18e4      	addlt	r4, r4, r3
 800508a:	f001 ff5d 	bl	8006f48 <__malloc_lock>
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <_free_r+0x94>)
 8005090:	9801      	ldr	r0, [sp, #4]
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	b933      	cbnz	r3, 80050a4 <_free_r+0x30>
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	6014      	str	r4, [r2, #0]
 800509a:	b003      	add	sp, #12
 800509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050a0:	f001 bf58 	b.w	8006f54 <__malloc_unlock>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x46>
 80050a8:	6825      	ldr	r5, [r4, #0]
 80050aa:	1961      	adds	r1, r4, r5
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf01      	itttt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	1949      	addeq	r1, r1, r5
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	e7ed      	b.n	8005096 <_free_r+0x22>
 80050ba:	461a      	mov	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b10b      	cbz	r3, 80050c4 <_free_r+0x50>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d9fa      	bls.n	80050ba <_free_r+0x46>
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	1855      	adds	r5, r2, r1
 80050c8:	42a5      	cmp	r5, r4
 80050ca:	d10b      	bne.n	80050e4 <_free_r+0x70>
 80050cc:	6824      	ldr	r4, [r4, #0]
 80050ce:	4421      	add	r1, r4
 80050d0:	1854      	adds	r4, r2, r1
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	d1e0      	bne.n	800509a <_free_r+0x26>
 80050d8:	681c      	ldr	r4, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	6053      	str	r3, [r2, #4]
 80050de:	4421      	add	r1, r4
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	e7da      	b.n	800509a <_free_r+0x26>
 80050e4:	d902      	bls.n	80050ec <_free_r+0x78>
 80050e6:	230c      	movs	r3, #12
 80050e8:	6003      	str	r3, [r0, #0]
 80050ea:	e7d6      	b.n	800509a <_free_r+0x26>
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	1961      	adds	r1, r4, r5
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf04      	itt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	bf04      	itt	eq
 80050fc:	1949      	addeq	r1, r1, r5
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	6054      	str	r4, [r2, #4]
 8005102:	e7ca      	b.n	800509a <_free_r+0x26>
 8005104:	b003      	add	sp, #12
 8005106:	bd30      	pop	{r4, r5, pc}
 8005108:	20000a14 	.word	0x20000a14

0800510c <sbrk_aligned>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0e      	ldr	r6, [pc, #56]	; (8005148 <sbrk_aligned+0x3c>)
 8005110:	460c      	mov	r4, r1
 8005112:	6831      	ldr	r1, [r6, #0]
 8005114:	4605      	mov	r5, r0
 8005116:	b911      	cbnz	r1, 800511e <sbrk_aligned+0x12>
 8005118:	f000 fd9a 	bl	8005c50 <_sbrk_r>
 800511c:	6030      	str	r0, [r6, #0]
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 fd95 	bl	8005c50 <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d00a      	beq.n	8005140 <sbrk_aligned+0x34>
 800512a:	1cc4      	adds	r4, r0, #3
 800512c:	f024 0403 	bic.w	r4, r4, #3
 8005130:	42a0      	cmp	r0, r4
 8005132:	d007      	beq.n	8005144 <sbrk_aligned+0x38>
 8005134:	1a21      	subs	r1, r4, r0
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fd8a 	bl	8005c50 <_sbrk_r>
 800513c:	3001      	adds	r0, #1
 800513e:	d101      	bne.n	8005144 <sbrk_aligned+0x38>
 8005140:	f04f 34ff 	mov.w	r4, #4294967295
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	20000a18 	.word	0x20000a18

0800514c <_malloc_r>:
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	1ccd      	adds	r5, r1, #3
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	2d00      	cmp	r5, #0
 8005160:	4607      	mov	r7, r0
 8005162:	db01      	blt.n	8005168 <_malloc_r+0x1c>
 8005164:	42a9      	cmp	r1, r5
 8005166:	d905      	bls.n	8005174 <_malloc_r+0x28>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	2600      	movs	r6, #0
 800516e:	4630      	mov	r0, r6
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	4e2e      	ldr	r6, [pc, #184]	; (8005230 <_malloc_r+0xe4>)
 8005176:	f001 fee7 	bl	8006f48 <__malloc_lock>
 800517a:	6833      	ldr	r3, [r6, #0]
 800517c:	461c      	mov	r4, r3
 800517e:	bb34      	cbnz	r4, 80051ce <_malloc_r+0x82>
 8005180:	4629      	mov	r1, r5
 8005182:	4638      	mov	r0, r7
 8005184:	f7ff ffc2 	bl	800510c <sbrk_aligned>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	4604      	mov	r4, r0
 800518c:	d14d      	bne.n	800522a <_malloc_r+0xde>
 800518e:	6834      	ldr	r4, [r6, #0]
 8005190:	4626      	mov	r6, r4
 8005192:	2e00      	cmp	r6, #0
 8005194:	d140      	bne.n	8005218 <_malloc_r+0xcc>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	4631      	mov	r1, r6
 800519a:	4638      	mov	r0, r7
 800519c:	eb04 0803 	add.w	r8, r4, r3
 80051a0:	f000 fd56 	bl	8005c50 <_sbrk_r>
 80051a4:	4580      	cmp	r8, r0
 80051a6:	d13a      	bne.n	800521e <_malloc_r+0xd2>
 80051a8:	6821      	ldr	r1, [r4, #0]
 80051aa:	3503      	adds	r5, #3
 80051ac:	1a6d      	subs	r5, r5, r1
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	4629      	mov	r1, r5
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff ffa5 	bl	800510c <sbrk_aligned>
 80051c2:	3001      	adds	r0, #1
 80051c4:	d02b      	beq.n	800521e <_malloc_r+0xd2>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	442b      	add	r3, r5
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	e00e      	b.n	80051ec <_malloc_r+0xa0>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	1b52      	subs	r2, r2, r5
 80051d2:	d41e      	bmi.n	8005212 <_malloc_r+0xc6>
 80051d4:	2a0b      	cmp	r2, #11
 80051d6:	d916      	bls.n	8005206 <_malloc_r+0xba>
 80051d8:	1961      	adds	r1, r4, r5
 80051da:	42a3      	cmp	r3, r4
 80051dc:	6025      	str	r5, [r4, #0]
 80051de:	bf18      	it	ne
 80051e0:	6059      	strne	r1, [r3, #4]
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	bf08      	it	eq
 80051e6:	6031      	streq	r1, [r6, #0]
 80051e8:	5162      	str	r2, [r4, r5]
 80051ea:	604b      	str	r3, [r1, #4]
 80051ec:	4638      	mov	r0, r7
 80051ee:	f104 060b 	add.w	r6, r4, #11
 80051f2:	f001 feaf 	bl	8006f54 <__malloc_unlock>
 80051f6:	f026 0607 	bic.w	r6, r6, #7
 80051fa:	1d23      	adds	r3, r4, #4
 80051fc:	1af2      	subs	r2, r6, r3
 80051fe:	d0b6      	beq.n	800516e <_malloc_r+0x22>
 8005200:	1b9b      	subs	r3, r3, r6
 8005202:	50a3      	str	r3, [r4, r2]
 8005204:	e7b3      	b.n	800516e <_malloc_r+0x22>
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	42a3      	cmp	r3, r4
 800520a:	bf0c      	ite	eq
 800520c:	6032      	streq	r2, [r6, #0]
 800520e:	605a      	strne	r2, [r3, #4]
 8005210:	e7ec      	b.n	80051ec <_malloc_r+0xa0>
 8005212:	4623      	mov	r3, r4
 8005214:	6864      	ldr	r4, [r4, #4]
 8005216:	e7b2      	b.n	800517e <_malloc_r+0x32>
 8005218:	4634      	mov	r4, r6
 800521a:	6876      	ldr	r6, [r6, #4]
 800521c:	e7b9      	b.n	8005192 <_malloc_r+0x46>
 800521e:	230c      	movs	r3, #12
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4638      	mov	r0, r7
 8005224:	f001 fe96 	bl	8006f54 <__malloc_unlock>
 8005228:	e7a1      	b.n	800516e <_malloc_r+0x22>
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	e7de      	b.n	80051ec <_malloc_r+0xa0>
 800522e:	bf00      	nop
 8005230:	20000a14 	.word	0x20000a14

08005234 <__cvt>:
 8005234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	ec55 4b10 	vmov	r4, r5, d0
 800523c:	2d00      	cmp	r5, #0
 800523e:	460e      	mov	r6, r1
 8005240:	4619      	mov	r1, r3
 8005242:	462b      	mov	r3, r5
 8005244:	bfbb      	ittet	lt
 8005246:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800524a:	461d      	movlt	r5, r3
 800524c:	2300      	movge	r3, #0
 800524e:	232d      	movlt	r3, #45	; 0x2d
 8005250:	700b      	strb	r3, [r1, #0]
 8005252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005254:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005258:	4691      	mov	r9, r2
 800525a:	f023 0820 	bic.w	r8, r3, #32
 800525e:	bfbc      	itt	lt
 8005260:	4622      	movlt	r2, r4
 8005262:	4614      	movlt	r4, r2
 8005264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005268:	d005      	beq.n	8005276 <__cvt+0x42>
 800526a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800526e:	d100      	bne.n	8005272 <__cvt+0x3e>
 8005270:	3601      	adds	r6, #1
 8005272:	2102      	movs	r1, #2
 8005274:	e000      	b.n	8005278 <__cvt+0x44>
 8005276:	2103      	movs	r1, #3
 8005278:	ab03      	add	r3, sp, #12
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	ab02      	add	r3, sp, #8
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	ec45 4b10 	vmov	d0, r4, r5
 8005284:	4653      	mov	r3, sl
 8005286:	4632      	mov	r2, r6
 8005288:	f000 fe3e 	bl	8005f08 <_dtoa_r>
 800528c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005290:	4607      	mov	r7, r0
 8005292:	d102      	bne.n	800529a <__cvt+0x66>
 8005294:	f019 0f01 	tst.w	r9, #1
 8005298:	d022      	beq.n	80052e0 <__cvt+0xac>
 800529a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800529e:	eb07 0906 	add.w	r9, r7, r6
 80052a2:	d110      	bne.n	80052c6 <__cvt+0x92>
 80052a4:	783b      	ldrb	r3, [r7, #0]
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d10a      	bne.n	80052c0 <__cvt+0x8c>
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80052b6:	b918      	cbnz	r0, 80052c0 <__cvt+0x8c>
 80052b8:	f1c6 0601 	rsb	r6, r6, #1
 80052bc:	f8ca 6000 	str.w	r6, [sl]
 80052c0:	f8da 3000 	ldr.w	r3, [sl]
 80052c4:	4499      	add	r9, r3
 80052c6:	2200      	movs	r2, #0
 80052c8:	2300      	movs	r3, #0
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fb fc1b 	bl	8000b08 <__aeabi_dcmpeq>
 80052d2:	b108      	cbz	r0, 80052d8 <__cvt+0xa4>
 80052d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80052d8:	2230      	movs	r2, #48	; 0x30
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	454b      	cmp	r3, r9
 80052de:	d307      	bcc.n	80052f0 <__cvt+0xbc>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052e4:	1bdb      	subs	r3, r3, r7
 80052e6:	4638      	mov	r0, r7
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	b004      	add	sp, #16
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	9103      	str	r1, [sp, #12]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e7f0      	b.n	80052da <__cvt+0xa6>

080052f8 <__exponent>:
 80052f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fa:	4603      	mov	r3, r0
 80052fc:	2900      	cmp	r1, #0
 80052fe:	bfb8      	it	lt
 8005300:	4249      	neglt	r1, r1
 8005302:	f803 2b02 	strb.w	r2, [r3], #2
 8005306:	bfb4      	ite	lt
 8005308:	222d      	movlt	r2, #45	; 0x2d
 800530a:	222b      	movge	r2, #43	; 0x2b
 800530c:	2909      	cmp	r1, #9
 800530e:	7042      	strb	r2, [r0, #1]
 8005310:	dd2a      	ble.n	8005368 <__exponent+0x70>
 8005312:	f10d 0407 	add.w	r4, sp, #7
 8005316:	46a4      	mov	ip, r4
 8005318:	270a      	movs	r7, #10
 800531a:	46a6      	mov	lr, r4
 800531c:	460a      	mov	r2, r1
 800531e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005322:	fb07 1516 	mls	r5, r7, r6, r1
 8005326:	3530      	adds	r5, #48	; 0x30
 8005328:	2a63      	cmp	r2, #99	; 0x63
 800532a:	f104 34ff 	add.w	r4, r4, #4294967295
 800532e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005332:	4631      	mov	r1, r6
 8005334:	dcf1      	bgt.n	800531a <__exponent+0x22>
 8005336:	3130      	adds	r1, #48	; 0x30
 8005338:	f1ae 0502 	sub.w	r5, lr, #2
 800533c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005340:	1c44      	adds	r4, r0, #1
 8005342:	4629      	mov	r1, r5
 8005344:	4561      	cmp	r1, ip
 8005346:	d30a      	bcc.n	800535e <__exponent+0x66>
 8005348:	f10d 0209 	add.w	r2, sp, #9
 800534c:	eba2 020e 	sub.w	r2, r2, lr
 8005350:	4565      	cmp	r5, ip
 8005352:	bf88      	it	hi
 8005354:	2200      	movhi	r2, #0
 8005356:	4413      	add	r3, r2
 8005358:	1a18      	subs	r0, r3, r0
 800535a:	b003      	add	sp, #12
 800535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005362:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005366:	e7ed      	b.n	8005344 <__exponent+0x4c>
 8005368:	2330      	movs	r3, #48	; 0x30
 800536a:	3130      	adds	r1, #48	; 0x30
 800536c:	7083      	strb	r3, [r0, #2]
 800536e:	70c1      	strb	r1, [r0, #3]
 8005370:	1d03      	adds	r3, r0, #4
 8005372:	e7f1      	b.n	8005358 <__exponent+0x60>

08005374 <_printf_float>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	ed2d 8b02 	vpush	{d8}
 800537c:	b08d      	sub	sp, #52	; 0x34
 800537e:	460c      	mov	r4, r1
 8005380:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005384:	4616      	mov	r6, r2
 8005386:	461f      	mov	r7, r3
 8005388:	4605      	mov	r5, r0
 800538a:	f001 fd63 	bl	8006e54 <_localeconv_r>
 800538e:	f8d0 a000 	ldr.w	sl, [r0]
 8005392:	4650      	mov	r0, sl
 8005394:	f7fa ff3c 	bl	8000210 <strlen>
 8005398:	2300      	movs	r3, #0
 800539a:	930a      	str	r3, [sp, #40]	; 0x28
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	f8d8 3000 	ldr.w	r3, [r8]
 80053a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	f103 0208 	add.w	r2, r3, #8
 80053b2:	f8c8 2000 	str.w	r2, [r8]
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053cc:	ee08 0a10 	vmov	s16, r0
 80053d0:	4b9f      	ldr	r3, [pc, #636]	; (8005650 <_printf_float+0x2dc>)
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295
 80053da:	f7fb fbc7 	bl	8000b6c <__aeabi_dcmpun>
 80053de:	bb88      	cbnz	r0, 8005444 <_printf_float+0xd0>
 80053e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e4:	4b9a      	ldr	r3, [pc, #616]	; (8005650 <_printf_float+0x2dc>)
 80053e6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ea:	f7fb fba1 	bl	8000b30 <__aeabi_dcmple>
 80053ee:	bb48      	cbnz	r0, 8005444 <_printf_float+0xd0>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb fb90 	bl	8000b1c <__aeabi_dcmplt>
 80053fc:	b110      	cbz	r0, 8005404 <_printf_float+0x90>
 80053fe:	232d      	movs	r3, #45	; 0x2d
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	4b93      	ldr	r3, [pc, #588]	; (8005654 <_printf_float+0x2e0>)
 8005406:	4894      	ldr	r0, [pc, #592]	; (8005658 <_printf_float+0x2e4>)
 8005408:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800540c:	bf94      	ite	ls
 800540e:	4698      	movls	r8, r3
 8005410:	4680      	movhi	r8, r0
 8005412:	2303      	movs	r3, #3
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	9b05      	ldr	r3, [sp, #20]
 8005418:	f023 0204 	bic.w	r2, r3, #4
 800541c:	6022      	str	r2, [r4, #0]
 800541e:	f04f 0900 	mov.w	r9, #0
 8005422:	9700      	str	r7, [sp, #0]
 8005424:	4633      	mov	r3, r6
 8005426:	aa0b      	add	r2, sp, #44	; 0x2c
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f9d8 	bl	80057e0 <_printf_common>
 8005430:	3001      	adds	r0, #1
 8005432:	f040 8090 	bne.w	8005556 <_printf_float+0x1e2>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	b00d      	add	sp, #52	; 0x34
 800543c:	ecbd 8b02 	vpop	{d8}
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	4640      	mov	r0, r8
 800544a:	4649      	mov	r1, r9
 800544c:	f7fb fb8e 	bl	8000b6c <__aeabi_dcmpun>
 8005450:	b140      	cbz	r0, 8005464 <_printf_float+0xf0>
 8005452:	464b      	mov	r3, r9
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfbc      	itt	lt
 8005458:	232d      	movlt	r3, #45	; 0x2d
 800545a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800545e:	487f      	ldr	r0, [pc, #508]	; (800565c <_printf_float+0x2e8>)
 8005460:	4b7f      	ldr	r3, [pc, #508]	; (8005660 <_printf_float+0x2ec>)
 8005462:	e7d1      	b.n	8005408 <_printf_float+0x94>
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800546a:	9206      	str	r2, [sp, #24]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	d13f      	bne.n	80054f0 <_printf_float+0x17c>
 8005470:	2306      	movs	r3, #6
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	6861      	ldr	r1, [r4, #4]
 8005478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800547c:	2300      	movs	r3, #0
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	ab0a      	add	r3, sp, #40	; 0x28
 8005482:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005486:	ab09      	add	r3, sp, #36	; 0x24
 8005488:	ec49 8b10 	vmov	d0, r8, r9
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	6022      	str	r2, [r4, #0]
 8005490:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005494:	4628      	mov	r0, r5
 8005496:	f7ff fecd 	bl	8005234 <__cvt>
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800549e:	2b47      	cmp	r3, #71	; 0x47
 80054a0:	4680      	mov	r8, r0
 80054a2:	d108      	bne.n	80054b6 <_printf_float+0x142>
 80054a4:	1cc8      	adds	r0, r1, #3
 80054a6:	db02      	blt.n	80054ae <_printf_float+0x13a>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	4299      	cmp	r1, r3
 80054ac:	dd41      	ble.n	8005532 <_printf_float+0x1be>
 80054ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80054b2:	fa5f fb8b 	uxtb.w	fp, fp
 80054b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ba:	d820      	bhi.n	80054fe <_printf_float+0x18a>
 80054bc:	3901      	subs	r1, #1
 80054be:	465a      	mov	r2, fp
 80054c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054c4:	9109      	str	r1, [sp, #36]	; 0x24
 80054c6:	f7ff ff17 	bl	80052f8 <__exponent>
 80054ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054cc:	1813      	adds	r3, r2, r0
 80054ce:	2a01      	cmp	r2, #1
 80054d0:	4681      	mov	r9, r0
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	dc02      	bgt.n	80054dc <_printf_float+0x168>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	07d2      	lsls	r2, r2, #31
 80054da:	d501      	bpl.n	80054e0 <_printf_float+0x16c>
 80054dc:	3301      	adds	r3, #1
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d09c      	beq.n	8005422 <_printf_float+0xae>
 80054e8:	232d      	movs	r3, #45	; 0x2d
 80054ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ee:	e798      	b.n	8005422 <_printf_float+0xae>
 80054f0:	9a06      	ldr	r2, [sp, #24]
 80054f2:	2a47      	cmp	r2, #71	; 0x47
 80054f4:	d1be      	bne.n	8005474 <_printf_float+0x100>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1bc      	bne.n	8005474 <_printf_float+0x100>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7b9      	b.n	8005472 <_printf_float+0xfe>
 80054fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005502:	d118      	bne.n	8005536 <_printf_float+0x1c2>
 8005504:	2900      	cmp	r1, #0
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	dd0b      	ble.n	8005522 <_printf_float+0x1ae>
 800550a:	6121      	str	r1, [r4, #16]
 800550c:	b913      	cbnz	r3, 8005514 <_printf_float+0x1a0>
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	07d0      	lsls	r0, r2, #31
 8005512:	d502      	bpl.n	800551a <_printf_float+0x1a6>
 8005514:	3301      	adds	r3, #1
 8005516:	440b      	add	r3, r1
 8005518:	6123      	str	r3, [r4, #16]
 800551a:	65a1      	str	r1, [r4, #88]	; 0x58
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	e7de      	b.n	80054e0 <_printf_float+0x16c>
 8005522:	b913      	cbnz	r3, 800552a <_printf_float+0x1b6>
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	07d2      	lsls	r2, r2, #31
 8005528:	d501      	bpl.n	800552e <_printf_float+0x1ba>
 800552a:	3302      	adds	r3, #2
 800552c:	e7f4      	b.n	8005518 <_printf_float+0x1a4>
 800552e:	2301      	movs	r3, #1
 8005530:	e7f2      	b.n	8005518 <_printf_float+0x1a4>
 8005532:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	4299      	cmp	r1, r3
 800553a:	db05      	blt.n	8005548 <_printf_float+0x1d4>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	6121      	str	r1, [r4, #16]
 8005540:	07d8      	lsls	r0, r3, #31
 8005542:	d5ea      	bpl.n	800551a <_printf_float+0x1a6>
 8005544:	1c4b      	adds	r3, r1, #1
 8005546:	e7e7      	b.n	8005518 <_printf_float+0x1a4>
 8005548:	2900      	cmp	r1, #0
 800554a:	bfd4      	ite	le
 800554c:	f1c1 0202 	rsble	r2, r1, #2
 8005550:	2201      	movgt	r2, #1
 8005552:	4413      	add	r3, r2
 8005554:	e7e0      	b.n	8005518 <_printf_float+0x1a4>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	055a      	lsls	r2, r3, #21
 800555a:	d407      	bmi.n	800556c <_printf_float+0x1f8>
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	4642      	mov	r2, r8
 8005560:	4631      	mov	r1, r6
 8005562:	4628      	mov	r0, r5
 8005564:	47b8      	blx	r7
 8005566:	3001      	adds	r0, #1
 8005568:	d12c      	bne.n	80055c4 <_printf_float+0x250>
 800556a:	e764      	b.n	8005436 <_printf_float+0xc2>
 800556c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005570:	f240 80e0 	bls.w	8005734 <_printf_float+0x3c0>
 8005574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005578:	2200      	movs	r2, #0
 800557a:	2300      	movs	r3, #0
 800557c:	f7fb fac4 	bl	8000b08 <__aeabi_dcmpeq>
 8005580:	2800      	cmp	r0, #0
 8005582:	d034      	beq.n	80055ee <_printf_float+0x27a>
 8005584:	4a37      	ldr	r2, [pc, #220]	; (8005664 <_printf_float+0x2f0>)
 8005586:	2301      	movs	r3, #1
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af51 	beq.w	8005436 <_printf_float+0xc2>
 8005594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	db02      	blt.n	80055a2 <_printf_float+0x22e>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	07d8      	lsls	r0, r3, #31
 80055a0:	d510      	bpl.n	80055c4 <_printf_float+0x250>
 80055a2:	ee18 3a10 	vmov	r3, s16
 80055a6:	4652      	mov	r2, sl
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f af41 	beq.w	8005436 <_printf_float+0xc2>
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	f104 091a 	add.w	r9, r4, #26
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	4543      	cmp	r3, r8
 80055c2:	dc09      	bgt.n	80055d8 <_printf_float+0x264>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	079b      	lsls	r3, r3, #30
 80055c8:	f100 8105 	bmi.w	80057d6 <_printf_float+0x462>
 80055cc:	68e0      	ldr	r0, [r4, #12]
 80055ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d0:	4298      	cmp	r0, r3
 80055d2:	bfb8      	it	lt
 80055d4:	4618      	movlt	r0, r3
 80055d6:	e730      	b.n	800543a <_printf_float+0xc6>
 80055d8:	2301      	movs	r3, #1
 80055da:	464a      	mov	r2, r9
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f af27 	beq.w	8005436 <_printf_float+0xc2>
 80055e8:	f108 0801 	add.w	r8, r8, #1
 80055ec:	e7e6      	b.n	80055bc <_printf_float+0x248>
 80055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dc39      	bgt.n	8005668 <_printf_float+0x2f4>
 80055f4:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <_printf_float+0x2f0>)
 80055f6:	2301      	movs	r3, #1
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	f43f af19 	beq.w	8005436 <_printf_float+0xc2>
 8005604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005608:	4313      	orrs	r3, r2
 800560a:	d102      	bne.n	8005612 <_printf_float+0x29e>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07d9      	lsls	r1, r3, #31
 8005610:	d5d8      	bpl.n	80055c4 <_printf_float+0x250>
 8005612:	ee18 3a10 	vmov	r3, s16
 8005616:	4652      	mov	r2, sl
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af09 	beq.w	8005436 <_printf_float+0xc2>
 8005624:	f04f 0900 	mov.w	r9, #0
 8005628:	f104 0a1a 	add.w	sl, r4, #26
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	425b      	negs	r3, r3
 8005630:	454b      	cmp	r3, r9
 8005632:	dc01      	bgt.n	8005638 <_printf_float+0x2c4>
 8005634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005636:	e792      	b.n	800555e <_printf_float+0x1ea>
 8005638:	2301      	movs	r3, #1
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f aef7 	beq.w	8005436 <_printf_float+0xc2>
 8005648:	f109 0901 	add.w	r9, r9, #1
 800564c:	e7ee      	b.n	800562c <_printf_float+0x2b8>
 800564e:	bf00      	nop
 8005650:	7fefffff 	.word	0x7fefffff
 8005654:	08007d0c 	.word	0x08007d0c
 8005658:	08007d10 	.word	0x08007d10
 800565c:	08007d18 	.word	0x08007d18
 8005660:	08007d14 	.word	0x08007d14
 8005664:	08007d1c 	.word	0x08007d1c
 8005668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800566c:	429a      	cmp	r2, r3
 800566e:	bfa8      	it	ge
 8005670:	461a      	movge	r2, r3
 8005672:	2a00      	cmp	r2, #0
 8005674:	4691      	mov	r9, r2
 8005676:	dc37      	bgt.n	80056e8 <_printf_float+0x374>
 8005678:	f04f 0b00 	mov.w	fp, #0
 800567c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005680:	f104 021a 	add.w	r2, r4, #26
 8005684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	eba3 0309 	sub.w	r3, r3, r9
 800568c:	455b      	cmp	r3, fp
 800568e:	dc33      	bgt.n	80056f8 <_printf_float+0x384>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	429a      	cmp	r2, r3
 8005696:	db3b      	blt.n	8005710 <_printf_float+0x39c>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07da      	lsls	r2, r3, #31
 800569c:	d438      	bmi.n	8005710 <_printf_float+0x39c>
 800569e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a0:	9a05      	ldr	r2, [sp, #20]
 80056a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a4:	1a9a      	subs	r2, r3, r2
 80056a6:	eba3 0901 	sub.w	r9, r3, r1
 80056aa:	4591      	cmp	r9, r2
 80056ac:	bfa8      	it	ge
 80056ae:	4691      	movge	r9, r2
 80056b0:	f1b9 0f00 	cmp.w	r9, #0
 80056b4:	dc35      	bgt.n	8005722 <_printf_float+0x3ae>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056be:	f104 0a1a 	add.w	sl, r4, #26
 80056c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	eba3 0309 	sub.w	r3, r3, r9
 80056cc:	4543      	cmp	r3, r8
 80056ce:	f77f af79 	ble.w	80055c4 <_printf_float+0x250>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4652      	mov	r2, sl
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f aeaa 	beq.w	8005436 <_printf_float+0xc2>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	e7ec      	b.n	80056c2 <_printf_float+0x34e>
 80056e8:	4613      	mov	r3, r2
 80056ea:	4631      	mov	r1, r6
 80056ec:	4642      	mov	r2, r8
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	d1c0      	bne.n	8005678 <_printf_float+0x304>
 80056f6:	e69e      	b.n	8005436 <_printf_float+0xc2>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	9205      	str	r2, [sp, #20]
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f ae97 	beq.w	8005436 <_printf_float+0xc2>
 8005708:	9a05      	ldr	r2, [sp, #20]
 800570a:	f10b 0b01 	add.w	fp, fp, #1
 800570e:	e7b9      	b.n	8005684 <_printf_float+0x310>
 8005710:	ee18 3a10 	vmov	r3, s16
 8005714:	4652      	mov	r2, sl
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	d1be      	bne.n	800569e <_printf_float+0x32a>
 8005720:	e689      	b.n	8005436 <_printf_float+0xc2>
 8005722:	9a05      	ldr	r2, [sp, #20]
 8005724:	464b      	mov	r3, r9
 8005726:	4442      	add	r2, r8
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	d1c1      	bne.n	80056b6 <_printf_float+0x342>
 8005732:	e680      	b.n	8005436 <_printf_float+0xc2>
 8005734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005736:	2a01      	cmp	r2, #1
 8005738:	dc01      	bgt.n	800573e <_printf_float+0x3ca>
 800573a:	07db      	lsls	r3, r3, #31
 800573c:	d538      	bpl.n	80057b0 <_printf_float+0x43c>
 800573e:	2301      	movs	r3, #1
 8005740:	4642      	mov	r2, r8
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f ae74 	beq.w	8005436 <_printf_float+0xc2>
 800574e:	ee18 3a10 	vmov	r3, s16
 8005752:	4652      	mov	r2, sl
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	f43f ae6b 	beq.w	8005436 <_printf_float+0xc2>
 8005760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	f7fb f9ce 	bl	8000b08 <__aeabi_dcmpeq>
 800576c:	b9d8      	cbnz	r0, 80057a6 <_printf_float+0x432>
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	f108 0201 	add.w	r2, r8, #1
 8005774:	3b01      	subs	r3, #1
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	d10e      	bne.n	800579e <_printf_float+0x42a>
 8005780:	e659      	b.n	8005436 <_printf_float+0xc2>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae52 	beq.w	8005436 <_printf_float+0xc2>
 8005792:	f108 0801 	add.w	r8, r8, #1
 8005796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	4543      	cmp	r3, r8
 800579c:	dcf1      	bgt.n	8005782 <_printf_float+0x40e>
 800579e:	464b      	mov	r3, r9
 80057a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057a4:	e6dc      	b.n	8005560 <_printf_float+0x1ec>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	f104 0a1a 	add.w	sl, r4, #26
 80057ae:	e7f2      	b.n	8005796 <_printf_float+0x422>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4642      	mov	r2, r8
 80057b4:	e7df      	b.n	8005776 <_printf_float+0x402>
 80057b6:	2301      	movs	r3, #1
 80057b8:	464a      	mov	r2, r9
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae38 	beq.w	8005436 <_printf_float+0xc2>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	4543      	cmp	r3, r8
 80057d2:	dcf0      	bgt.n	80057b6 <_printf_float+0x442>
 80057d4:	e6fa      	b.n	80055cc <_printf_float+0x258>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	f104 0919 	add.w	r9, r4, #25
 80057de:	e7f4      	b.n	80057ca <_printf_float+0x456>

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4699      	mov	r9, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bfb8      	it	lt
 80057f4:	4613      	movlt	r3, r2
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057fc:	4607      	mov	r7, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc26      	bgt.n	8005876 <_printf_common+0x96>
 8005828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800582c:	1e13      	subs	r3, r2, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d42b      	bmi.n	8005890 <_printf_common+0xb0>
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	4649      	mov	r1, r9
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d01e      	beq.n	8005884 <_printf_common+0xa4>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	68e5      	ldr	r5, [r4, #12]
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	f003 0306 	and.w	r3, r3, #6
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf08      	it	eq
 8005854:	1aad      	subeq	r5, r5, r2
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	bf0c      	ite	eq
 800585c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005860:	2500      	movne	r5, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfc4      	itt	gt
 8005866:	1a9b      	subgt	r3, r3, r2
 8005868:	18ed      	addgt	r5, r5, r3
 800586a:	2600      	movs	r6, #0
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xc8>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xa8>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xac>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c6      	b.n	800581e <_printf_common+0x3e>
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	2030      	movs	r0, #48	; 0x30
 8005896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589a:	4422      	add	r2, r4
 800589c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a4:	3302      	adds	r3, #2
 80058a6:	e7c7      	b.n	8005838 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa4>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x8e>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	7e0f      	ldrb	r7, [r1, #24]
 80058c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058c4:	2f78      	cmp	r7, #120	; 0x78
 80058c6:	4691      	mov	r9, r2
 80058c8:	4680      	mov	r8, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	469a      	mov	sl, r3
 80058ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d8 	beq.w	8005a8e <_printf_i+0x1d2>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a3 	beq.w	8005a2a <_printf_i+0x16e>
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a101      	add	r1, pc, #4	; (adr r1, 80058fc <_printf_i+0x40>)
 80058f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a75 	.word	0x08005a75
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a57 	.word	0x08005a57
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a97 	.word	0x08005a97
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a5f 	.word	0x08005a5f
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a3      	b.n	8005ab0 <_printf_i+0x1f4>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	6829      	ldr	r1, [r5, #0]
 800596c:	0606      	lsls	r6, r0, #24
 800596e:	f101 0304 	add.w	r3, r1, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	2e00      	cmp	r6, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	4276      	negs	r6, r6
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005986:	230a      	movs	r3, #10
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	680e      	ldr	r6, [r1, #0]
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005992:	bf18      	it	ne
 8005994:	b236      	sxthne	r6, r6
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	6029      	str	r1, [r5, #0]
 80059a0:	0601      	lsls	r1, r0, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681e      	ldr	r6, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0646      	lsls	r6, r0, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881e      	ldrh	r6, [r3, #0]
 80059ae:	4854      	ldr	r0, [pc, #336]	; (8005b00 <_printf_i+0x244>)
 80059b0:	2f6f      	cmp	r7, #111	; 0x6f
 80059b2:	bf0c      	ite	eq
 80059b4:	2308      	moveq	r3, #8
 80059b6:	230a      	movne	r3, #10
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6865      	ldr	r5, [r4, #4]
 80059c0:	60a5      	str	r5, [r4, #8]
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90e      	cbnz	r6, 80059d4 <_printf_i+0x118>
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d04d      	beq.n	8005a70 <_printf_i+0x1b4>
 80059d4:	4615      	mov	r5, r2
 80059d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059da:	fb03 6711 	mls	r7, r3, r1, r6
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059e4:	4637      	mov	r7, r6
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460e      	mov	r6, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x11a>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x14c>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07de      	lsls	r6, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x14c>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	; 0x30
 8005a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a08:	1b52      	subs	r2, r2, r5
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee2 	bl	80057e0 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14c      	bne.n	8005aba <_printf_i+0x1fe>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	4835      	ldr	r0, [pc, #212]	; (8005b00 <_printf_i+0x244>)
 8005a2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a38:	6029      	str	r1, [r5, #0]
 8005a3a:	061d      	lsls	r5, r3, #24
 8005a3c:	d514      	bpl.n	8005a68 <_printf_i+0x1ac>
 8005a3e:	07df      	lsls	r7, r3, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f043 0320 	orrmi.w	r3, r3, #32
 8005a46:	6023      	strmi	r3, [r4, #0]
 8005a48:	b91e      	cbnz	r6, 8005a52 <_printf_i+0x196>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2310      	movs	r3, #16
 8005a54:	e7b0      	b.n	80059b8 <_printf_i+0xfc>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2378      	movs	r3, #120	; 0x78
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	e7e3      	b.n	8005a30 <_printf_i+0x174>
 8005a68:	0659      	lsls	r1, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2b6      	uxthmi	r6, r6
 8005a6e:	e7e6      	b.n	8005a3e <_printf_i+0x182>
 8005a70:	4615      	mov	r5, r2
 8005a72:	e7bb      	b.n	80059ec <_printf_i+0x130>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6826      	ldr	r6, [r4, #0]
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	1d18      	adds	r0, r3, #4
 8005a7c:	6028      	str	r0, [r5, #0]
 8005a7e:	0635      	lsls	r5, r6, #24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0x1cc>
 8005a84:	6019      	str	r1, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <_printf_i+0x1d2>
 8005a88:	0670      	lsls	r0, r6, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0x1c8>
 8005a8c:	8019      	strh	r1, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	4615      	mov	r5, r2
 8005a94:	e7ba      	b.n	8005a0c <_printf_i+0x150>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7fa fbbc 	bl	8000220 <memchr>
 8005aa8:	b108      	cbz	r0, 8005aae <_printf_i+0x1f2>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	e7a8      	b.n	8005a0c <_printf_i+0x150>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ab      	beq.n	8005a20 <_printf_i+0x164>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d413      	bmi.n	8005af6 <_printf_i+0x23a>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	bfb8      	it	lt
 8005ad6:	4618      	movlt	r0, r3
 8005ad8:	e7a4      	b.n	8005a24 <_printf_i+0x168>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4632      	mov	r2, r6
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09b      	beq.n	8005a20 <_printf_i+0x164>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9903      	ldr	r1, [sp, #12]
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf2      	bgt.n	8005ada <_printf_i+0x21e>
 8005af4:	e7eb      	b.n	8005ace <_printf_i+0x212>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f104 0619 	add.w	r6, r4, #25
 8005afc:	e7f5      	b.n	8005aea <_printf_i+0x22e>
 8005afe:	bf00      	nop
 8005b00:	08007d1e 	.word	0x08007d1e
 8005b04:	08007d2f 	.word	0x08007d2f

08005b08 <iprintf>:
 8005b08:	b40f      	push	{r0, r1, r2, r3}
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <iprintf+0x2c>)
 8005b0c:	b513      	push	{r0, r1, r4, lr}
 8005b0e:	681c      	ldr	r4, [r3, #0]
 8005b10:	b124      	cbz	r4, 8005b1c <iprintf+0x14>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	b913      	cbnz	r3, 8005b1c <iprintf+0x14>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f001 f8fe 	bl	8006d18 <__sinit>
 8005b1c:	ab05      	add	r3, sp, #20
 8005b1e:	9a04      	ldr	r2, [sp, #16]
 8005b20:	68a1      	ldr	r1, [r4, #8]
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f001 fddf 	bl	80076e8 <_vfiprintf_r>
 8005b2a:	b002      	add	sp, #8
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	b004      	add	sp, #16
 8005b32:	4770      	bx	lr
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <putchar>:
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <putchar+0x28>)
 8005b3a:	b513      	push	{r0, r1, r4, lr}
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	4601      	mov	r1, r0
 8005b40:	b134      	cbz	r4, 8005b50 <putchar+0x18>
 8005b42:	69a3      	ldr	r3, [r4, #24]
 8005b44:	b923      	cbnz	r3, 8005b50 <putchar+0x18>
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 f8e5 	bl	8006d18 <__sinit>
 8005b4e:	9901      	ldr	r1, [sp, #4]
 8005b50:	68a2      	ldr	r2, [r4, #8]
 8005b52:	4620      	mov	r0, r4
 8005b54:	b002      	add	sp, #8
 8005b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5a:	f001 bef5 	b.w	8007948 <_putc_r>
 8005b5e:	bf00      	nop
 8005b60:	2000000c 	.word	0x2000000c

08005b64 <_puts_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	4605      	mov	r5, r0
 8005b6a:	b118      	cbz	r0, 8005b74 <_puts_r+0x10>
 8005b6c:	6983      	ldr	r3, [r0, #24]
 8005b6e:	b90b      	cbnz	r3, 8005b74 <_puts_r+0x10>
 8005b70:	f001 f8d2 	bl	8006d18 <__sinit>
 8005b74:	69ab      	ldr	r3, [r5, #24]
 8005b76:	68ac      	ldr	r4, [r5, #8]
 8005b78:	b913      	cbnz	r3, 8005b80 <_puts_r+0x1c>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f001 f8cc 	bl	8006d18 <__sinit>
 8005b80:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <_puts_r+0xd0>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d120      	bne.n	8005bc8 <_puts_r+0x64>
 8005b86:	686c      	ldr	r4, [r5, #4]
 8005b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d405      	bmi.n	8005b9a <_puts_r+0x36>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	0598      	lsls	r0, r3, #22
 8005b92:	d402      	bmi.n	8005b9a <_puts_r+0x36>
 8005b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b96:	f001 f962 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	0719      	lsls	r1, r3, #28
 8005b9e:	d51d      	bpl.n	8005bdc <_puts_r+0x78>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	b1db      	cbz	r3, 8005bdc <_puts_r+0x78>
 8005ba4:	3e01      	subs	r6, #1
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60a3      	str	r3, [r4, #8]
 8005bb0:	bb39      	cbnz	r1, 8005c02 <_puts_r+0x9e>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da38      	bge.n	8005c28 <_puts_r+0xc4>
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	210a      	movs	r1, #10
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f858 	bl	8005c70 <__swbuf_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d011      	beq.n	8005be8 <_puts_r+0x84>
 8005bc4:	250a      	movs	r5, #10
 8005bc6:	e011      	b.n	8005bec <_puts_r+0x88>
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <_puts_r+0xd4>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d101      	bne.n	8005bd2 <_puts_r+0x6e>
 8005bce:	68ac      	ldr	r4, [r5, #8]
 8005bd0:	e7da      	b.n	8005b88 <_puts_r+0x24>
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <_puts_r+0xd8>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	bf08      	it	eq
 8005bd8:	68ec      	ldreq	r4, [r5, #12]
 8005bda:	e7d5      	b.n	8005b88 <_puts_r+0x24>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f898 	bl	8005d14 <__swsetup_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0dd      	beq.n	8005ba4 <_puts_r+0x40>
 8005be8:	f04f 35ff 	mov.w	r5, #4294967295
 8005bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bee:	07da      	lsls	r2, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_puts_r+0x9a>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	059b      	lsls	r3, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_puts_r+0x9a>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f001 f931 	bl	8006e60 <__retarget_lock_release_recursive>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da04      	bge.n	8005c10 <_puts_r+0xac>
 8005c06:	69a2      	ldr	r2, [r4, #24]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	dc06      	bgt.n	8005c1a <_puts_r+0xb6>
 8005c0c:	290a      	cmp	r1, #10
 8005c0e:	d004      	beq.n	8005c1a <_puts_r+0xb6>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	7019      	strb	r1, [r3, #0]
 8005c18:	e7c5      	b.n	8005ba6 <_puts_r+0x42>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f827 	bl	8005c70 <__swbuf_r>
 8005c22:	3001      	adds	r0, #1
 8005c24:	d1bf      	bne.n	8005ba6 <_puts_r+0x42>
 8005c26:	e7df      	b.n	8005be8 <_puts_r+0x84>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	250a      	movs	r5, #10
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	701d      	strb	r5, [r3, #0]
 8005c32:	e7db      	b.n	8005bec <_puts_r+0x88>
 8005c34:	08007df0 	.word	0x08007df0
 8005c38:	08007e10 	.word	0x08007e10
 8005c3c:	08007dd0 	.word	0x08007dd0

08005c40 <puts>:
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <puts+0xc>)
 8005c42:	4601      	mov	r1, r0
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	f7ff bf8d 	b.w	8005b64 <_puts_r>
 8005c4a:	bf00      	nop
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <_sbrk_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_sbrk_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fb fe78 	bl	8001950 <_sbrk>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_sbrk_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_sbrk_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000a20 	.word	0x20000a20

08005c70 <__swbuf_r>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	460e      	mov	r6, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	4605      	mov	r5, r0
 8005c78:	b118      	cbz	r0, 8005c82 <__swbuf_r+0x12>
 8005c7a:	6983      	ldr	r3, [r0, #24]
 8005c7c:	b90b      	cbnz	r3, 8005c82 <__swbuf_r+0x12>
 8005c7e:	f001 f84b 	bl	8006d18 <__sinit>
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <__swbuf_r+0x98>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d12b      	bne.n	8005ce0 <__swbuf_r+0x70>
 8005c88:	686c      	ldr	r4, [r5, #4]
 8005c8a:	69a3      	ldr	r3, [r4, #24]
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	071a      	lsls	r2, r3, #28
 8005c92:	d52f      	bpl.n	8005cf4 <__swbuf_r+0x84>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b36b      	cbz	r3, 8005cf4 <__swbuf_r+0x84>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	1ac0      	subs	r0, r0, r3
 8005c9e:	6963      	ldr	r3, [r4, #20]
 8005ca0:	b2f6      	uxtb	r6, r6
 8005ca2:	4283      	cmp	r3, r0
 8005ca4:	4637      	mov	r7, r6
 8005ca6:	dc04      	bgt.n	8005cb2 <__swbuf_r+0x42>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 ffa0 	bl	8006bf0 <_fflush_r>
 8005cb0:	bb30      	cbnz	r0, 8005d00 <__swbuf_r+0x90>
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	701e      	strb	r6, [r3, #0]
 8005cc0:	6963      	ldr	r3, [r4, #20]
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	4283      	cmp	r3, r0
 8005cc6:	d004      	beq.n	8005cd2 <__swbuf_r+0x62>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d506      	bpl.n	8005cdc <__swbuf_r+0x6c>
 8005cce:	2e0a      	cmp	r6, #10
 8005cd0:	d104      	bne.n	8005cdc <__swbuf_r+0x6c>
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 ff8b 	bl	8006bf0 <_fflush_r>
 8005cda:	b988      	cbnz	r0, 8005d00 <__swbuf_r+0x90>
 8005cdc:	4638      	mov	r0, r7
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <__swbuf_r+0x9c>)
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	d101      	bne.n	8005cea <__swbuf_r+0x7a>
 8005ce6:	68ac      	ldr	r4, [r5, #8]
 8005ce8:	e7cf      	b.n	8005c8a <__swbuf_r+0x1a>
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <__swbuf_r+0xa0>)
 8005cec:	429c      	cmp	r4, r3
 8005cee:	bf08      	it	eq
 8005cf0:	68ec      	ldreq	r4, [r5, #12]
 8005cf2:	e7ca      	b.n	8005c8a <__swbuf_r+0x1a>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f80c 	bl	8005d14 <__swsetup_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d0cb      	beq.n	8005c98 <__swbuf_r+0x28>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295
 8005d04:	e7ea      	b.n	8005cdc <__swbuf_r+0x6c>
 8005d06:	bf00      	nop
 8005d08:	08007df0 	.word	0x08007df0
 8005d0c:	08007e10 	.word	0x08007e10
 8005d10:	08007dd0 	.word	0x08007dd0

08005d14 <__swsetup_r>:
 8005d14:	4b32      	ldr	r3, [pc, #200]	; (8005de0 <__swsetup_r+0xcc>)
 8005d16:	b570      	push	{r4, r5, r6, lr}
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	b125      	cbz	r5, 8005d2a <__swsetup_r+0x16>
 8005d20:	69ab      	ldr	r3, [r5, #24]
 8005d22:	b913      	cbnz	r3, 8005d2a <__swsetup_r+0x16>
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 fff7 	bl	8006d18 <__sinit>
 8005d2a:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <__swsetup_r+0xd0>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	d10f      	bne.n	8005d50 <__swsetup_r+0x3c>
 8005d30:	686c      	ldr	r4, [r5, #4]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d38:	0719      	lsls	r1, r3, #28
 8005d3a:	d42c      	bmi.n	8005d96 <__swsetup_r+0x82>
 8005d3c:	06dd      	lsls	r5, r3, #27
 8005d3e:	d411      	bmi.n	8005d64 <__swsetup_r+0x50>
 8005d40:	2309      	movs	r3, #9
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	e03e      	b.n	8005dce <__swsetup_r+0xba>
 8005d50:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <__swsetup_r+0xd4>)
 8005d52:	429c      	cmp	r4, r3
 8005d54:	d101      	bne.n	8005d5a <__swsetup_r+0x46>
 8005d56:	68ac      	ldr	r4, [r5, #8]
 8005d58:	e7eb      	b.n	8005d32 <__swsetup_r+0x1e>
 8005d5a:	4b24      	ldr	r3, [pc, #144]	; (8005dec <__swsetup_r+0xd8>)
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	bf08      	it	eq
 8005d60:	68ec      	ldreq	r4, [r5, #12]
 8005d62:	e7e6      	b.n	8005d32 <__swsetup_r+0x1e>
 8005d64:	0758      	lsls	r0, r3, #29
 8005d66:	d512      	bpl.n	8005d8e <__swsetup_r+0x7a>
 8005d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d6a:	b141      	cbz	r1, 8005d7e <__swsetup_r+0x6a>
 8005d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d002      	beq.n	8005d7a <__swsetup_r+0x66>
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff f97d 	bl	8005074 <_free_r>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	2300      	movs	r3, #0
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	b94b      	cbnz	r3, 8005dae <__swsetup_r+0x9a>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d003      	beq.n	8005dae <__swsetup_r+0x9a>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4630      	mov	r0, r6
 8005daa:	f001 f87f 	bl	8006eac <__smakebuf_r>
 8005dae:	89a0      	ldrh	r0, [r4, #12]
 8005db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005db4:	f010 0301 	ands.w	r3, r0, #1
 8005db8:	d00a      	beq.n	8005dd0 <__swsetup_r+0xbc>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60a3      	str	r3, [r4, #8]
 8005dbe:	6963      	ldr	r3, [r4, #20]
 8005dc0:	425b      	negs	r3, r3
 8005dc2:	61a3      	str	r3, [r4, #24]
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	b943      	cbnz	r3, 8005dda <__swsetup_r+0xc6>
 8005dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dcc:	d1ba      	bne.n	8005d44 <__swsetup_r+0x30>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	0781      	lsls	r1, r0, #30
 8005dd2:	bf58      	it	pl
 8005dd4:	6963      	ldrpl	r3, [r4, #20]
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	e7f4      	b.n	8005dc4 <__swsetup_r+0xb0>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e7f7      	b.n	8005dce <__swsetup_r+0xba>
 8005dde:	bf00      	nop
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	08007df0 	.word	0x08007df0
 8005de8:	08007e10 	.word	0x08007e10
 8005dec:	08007dd0 	.word	0x08007dd0

08005df0 <quorem>:
 8005df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	6903      	ldr	r3, [r0, #16]
 8005df6:	690c      	ldr	r4, [r1, #16]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	f2c0 8081 	blt.w	8005f02 <quorem+0x112>
 8005e00:	3c01      	subs	r4, #1
 8005e02:	f101 0814 	add.w	r8, r1, #20
 8005e06:	f100 0514 	add.w	r5, r0, #20
 8005e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e24:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e28:	d331      	bcc.n	8005e8e <quorem+0x9e>
 8005e2a:	f04f 0e00 	mov.w	lr, #0
 8005e2e:	4640      	mov	r0, r8
 8005e30:	46ac      	mov	ip, r5
 8005e32:	46f2      	mov	sl, lr
 8005e34:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e38:	b293      	uxth	r3, r2
 8005e3a:	fb06 e303 	mla	r3, r6, r3, lr
 8005e3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ebaa 0303 	sub.w	r3, sl, r3
 8005e48:	f8dc a000 	ldr.w	sl, [ip]
 8005e4c:	0c12      	lsrs	r2, r2, #16
 8005e4e:	fa13 f38a 	uxtah	r3, r3, sl
 8005e52:	fb06 e202 	mla	r2, r6, r2, lr
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	9b00      	ldr	r3, [sp, #0]
 8005e5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e68:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e6c:	4581      	cmp	r9, r0
 8005e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e72:	f84c 3b04 	str.w	r3, [ip], #4
 8005e76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e7a:	d2db      	bcs.n	8005e34 <quorem+0x44>
 8005e7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e80:	b92b      	cbnz	r3, 8005e8e <quorem+0x9e>
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	429d      	cmp	r5, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	d32e      	bcc.n	8005eea <quorem+0xfa>
 8005e8c:	613c      	str	r4, [r7, #16]
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f001 fae8 	bl	8007464 <__mcmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	db24      	blt.n	8005ee2 <quorem+0xf2>
 8005e98:	3601      	adds	r6, #1
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f04f 0c00 	mov.w	ip, #0
 8005ea0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea4:	f8d0 e000 	ldr.w	lr, [r0]
 8005ea8:	b293      	uxth	r3, r2
 8005eaa:	ebac 0303 	sub.w	r3, ip, r3
 8005eae:	0c12      	lsrs	r2, r2, #16
 8005eb0:	fa13 f38e 	uxtah	r3, r3, lr
 8005eb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec2:	45c1      	cmp	r9, r8
 8005ec4:	f840 3b04 	str.w	r3, [r0], #4
 8005ec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ecc:	d2e8      	bcs.n	8005ea0 <quorem+0xb0>
 8005ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ed6:	b922      	cbnz	r2, 8005ee2 <quorem+0xf2>
 8005ed8:	3b04      	subs	r3, #4
 8005eda:	429d      	cmp	r5, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	d30a      	bcc.n	8005ef6 <quorem+0x106>
 8005ee0:	613c      	str	r4, [r7, #16]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	b003      	add	sp, #12
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d1cc      	bne.n	8005e8c <quorem+0x9c>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	e7c7      	b.n	8005e86 <quorem+0x96>
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	d1f0      	bne.n	8005ee0 <quorem+0xf0>
 8005efe:	3c01      	subs	r4, #1
 8005f00:	e7eb      	b.n	8005eda <quorem+0xea>
 8005f02:	2000      	movs	r0, #0
 8005f04:	e7ee      	b.n	8005ee4 <quorem+0xf4>
	...

08005f08 <_dtoa_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	ed2d 8b04 	vpush	{d8-d9}
 8005f10:	ec57 6b10 	vmov	r6, r7, d0
 8005f14:	b093      	sub	sp, #76	; 0x4c
 8005f16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f1c:	9106      	str	r1, [sp, #24]
 8005f1e:	ee10 aa10 	vmov	sl, s0
 8005f22:	4604      	mov	r4, r0
 8005f24:	9209      	str	r2, [sp, #36]	; 0x24
 8005f26:	930c      	str	r3, [sp, #48]	; 0x30
 8005f28:	46bb      	mov	fp, r7
 8005f2a:	b975      	cbnz	r5, 8005f4a <_dtoa_r+0x42>
 8005f2c:	2010      	movs	r0, #16
 8005f2e:	f7ff f889 	bl	8005044 <malloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6260      	str	r0, [r4, #36]	; 0x24
 8005f36:	b920      	cbnz	r0, 8005f42 <_dtoa_r+0x3a>
 8005f38:	4ba7      	ldr	r3, [pc, #668]	; (80061d8 <_dtoa_r+0x2d0>)
 8005f3a:	21ea      	movs	r1, #234	; 0xea
 8005f3c:	48a7      	ldr	r0, [pc, #668]	; (80061dc <_dtoa_r+0x2d4>)
 8005f3e:	f001 fda1 	bl	8007a84 <__assert_func>
 8005f42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f46:	6005      	str	r5, [r0, #0]
 8005f48:	60c5      	str	r5, [r0, #12]
 8005f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	b151      	cbz	r1, 8005f66 <_dtoa_r+0x5e>
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	604a      	str	r2, [r1, #4]
 8005f54:	2301      	movs	r3, #1
 8005f56:	4093      	lsls	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f001 f840 	bl	8006fe0 <_Bfree>
 8005f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	1e3b      	subs	r3, r7, #0
 8005f68:	bfaa      	itet	ge
 8005f6a:	2300      	movge	r3, #0
 8005f6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f70:	f8c8 3000 	strge.w	r3, [r8]
 8005f74:	4b9a      	ldr	r3, [pc, #616]	; (80061e0 <_dtoa_r+0x2d8>)
 8005f76:	bfbc      	itt	lt
 8005f78:	2201      	movlt	r2, #1
 8005f7a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f7e:	ea33 030b 	bics.w	r3, r3, fp
 8005f82:	d11b      	bne.n	8005fbc <_dtoa_r+0xb4>
 8005f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f86:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f90:	4333      	orrs	r3, r6
 8005f92:	f000 8592 	beq.w	8006aba <_dtoa_r+0xbb2>
 8005f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f98:	b963      	cbnz	r3, 8005fb4 <_dtoa_r+0xac>
 8005f9a:	4b92      	ldr	r3, [pc, #584]	; (80061e4 <_dtoa_r+0x2dc>)
 8005f9c:	e022      	b.n	8005fe4 <_dtoa_r+0xdc>
 8005f9e:	4b92      	ldr	r3, [pc, #584]	; (80061e8 <_dtoa_r+0x2e0>)
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	b013      	add	sp, #76	; 0x4c
 8005fac:	ecbd 8b04 	vpop	{d8-d9}
 8005fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb4:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <_dtoa_r+0x2dc>)
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	e7f3      	b.n	8005fa4 <_dtoa_r+0x9c>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fda0 	bl	8000b08 <__aeabi_dcmpeq>
 8005fc8:	ec4b ab19 	vmov	d9, sl, fp
 8005fcc:	4680      	mov	r8, r0
 8005fce:	b158      	cbz	r0, 8005fe8 <_dtoa_r+0xe0>
 8005fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 856b 	beq.w	8006ab4 <_dtoa_r+0xbac>
 8005fde:	4883      	ldr	r0, [pc, #524]	; (80061ec <_dtoa_r+0x2e4>)
 8005fe0:	6018      	str	r0, [r3, #0]
 8005fe2:	1e43      	subs	r3, r0, #1
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	e7df      	b.n	8005fa8 <_dtoa_r+0xa0>
 8005fe8:	ec4b ab10 	vmov	d0, sl, fp
 8005fec:	aa10      	add	r2, sp, #64	; 0x40
 8005fee:	a911      	add	r1, sp, #68	; 0x44
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f001 fadd 	bl	80075b0 <__d2b>
 8005ff6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005ffa:	ee08 0a10 	vmov	s16, r0
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	f000 8084 	beq.w	800610c <_dtoa_r+0x204>
 8006004:	ee19 3a90 	vmov	r3, s19
 8006008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800600c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006010:	4656      	mov	r6, sl
 8006012:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800601a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800601e:	4b74      	ldr	r3, [pc, #464]	; (80061f0 <_dtoa_r+0x2e8>)
 8006020:	2200      	movs	r2, #0
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa f94f 	bl	80002c8 <__aeabi_dsub>
 800602a:	a365      	add	r3, pc, #404	; (adr r3, 80061c0 <_dtoa_r+0x2b8>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa fb02 	bl	8000638 <__aeabi_dmul>
 8006034:	a364      	add	r3, pc, #400	; (adr r3, 80061c8 <_dtoa_r+0x2c0>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f947 	bl	80002cc <__adddf3>
 800603e:	4606      	mov	r6, r0
 8006040:	4628      	mov	r0, r5
 8006042:	460f      	mov	r7, r1
 8006044:	f7fa fa8e 	bl	8000564 <__aeabi_i2d>
 8006048:	a361      	add	r3, pc, #388	; (adr r3, 80061d0 <_dtoa_r+0x2c8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa faf3 	bl	8000638 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa f937 	bl	80002cc <__adddf3>
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	f7fa fd99 	bl	8000b98 <__aeabi_d2iz>
 8006066:	2200      	movs	r2, #0
 8006068:	9000      	str	r0, [sp, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fd54 	bl	8000b1c <__aeabi_dcmplt>
 8006074:	b150      	cbz	r0, 800608c <_dtoa_r+0x184>
 8006076:	9800      	ldr	r0, [sp, #0]
 8006078:	f7fa fa74 	bl	8000564 <__aeabi_i2d>
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	f7fa fd42 	bl	8000b08 <__aeabi_dcmpeq>
 8006084:	b910      	cbnz	r0, 800608c <_dtoa_r+0x184>
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	2b16      	cmp	r3, #22
 8006090:	d85a      	bhi.n	8006148 <_dtoa_r+0x240>
 8006092:	9a00      	ldr	r2, [sp, #0]
 8006094:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <_dtoa_r+0x2ec>)
 8006096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	ec51 0b19 	vmov	r0, r1, d9
 80060a2:	f7fa fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d050      	beq.n	800614c <_dtoa_r+0x244>
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b6:	1b5d      	subs	r5, r3, r5
 80060b8:	1e6b      	subs	r3, r5, #1
 80060ba:	9305      	str	r3, [sp, #20]
 80060bc:	bf45      	ittet	mi
 80060be:	f1c5 0301 	rsbmi	r3, r5, #1
 80060c2:	9304      	strmi	r3, [sp, #16]
 80060c4:	2300      	movpl	r3, #0
 80060c6:	2300      	movmi	r3, #0
 80060c8:	bf4c      	ite	mi
 80060ca:	9305      	strmi	r3, [sp, #20]
 80060cc:	9304      	strpl	r3, [sp, #16]
 80060ce:	9b00      	ldr	r3, [sp, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db3d      	blt.n	8006150 <_dtoa_r+0x248>
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	9a00      	ldr	r2, [sp, #0]
 80060d8:	920a      	str	r2, [sp, #40]	; 0x28
 80060da:	4413      	add	r3, r2
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	2300      	movs	r3, #0
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	f200 8089 	bhi.w	80061fc <_dtoa_r+0x2f4>
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	bfc4      	itt	gt
 80060ee:	3b04      	subgt	r3, #4
 80060f0:	9306      	strgt	r3, [sp, #24]
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	f1a3 0302 	sub.w	r3, r3, #2
 80060f8:	bfcc      	ite	gt
 80060fa:	2500      	movgt	r5, #0
 80060fc:	2501      	movle	r5, #1
 80060fe:	2b03      	cmp	r3, #3
 8006100:	f200 8087 	bhi.w	8006212 <_dtoa_r+0x30a>
 8006104:	e8df f003 	tbb	[pc, r3]
 8006108:	59383a2d 	.word	0x59383a2d
 800610c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006110:	441d      	add	r5, r3
 8006112:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006116:	2b20      	cmp	r3, #32
 8006118:	bfc1      	itttt	gt
 800611a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800611e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006122:	fa0b f303 	lslgt.w	r3, fp, r3
 8006126:	fa26 f000 	lsrgt.w	r0, r6, r0
 800612a:	bfda      	itte	le
 800612c:	f1c3 0320 	rsble	r3, r3, #32
 8006130:	fa06 f003 	lslle.w	r0, r6, r3
 8006134:	4318      	orrgt	r0, r3
 8006136:	f7fa fa05 	bl	8000544 <__aeabi_ui2d>
 800613a:	2301      	movs	r3, #1
 800613c:	4606      	mov	r6, r0
 800613e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006142:	3d01      	subs	r5, #1
 8006144:	930e      	str	r3, [sp, #56]	; 0x38
 8006146:	e76a      	b.n	800601e <_dtoa_r+0x116>
 8006148:	2301      	movs	r3, #1
 800614a:	e7b2      	b.n	80060b2 <_dtoa_r+0x1aa>
 800614c:	900b      	str	r0, [sp, #44]	; 0x2c
 800614e:	e7b1      	b.n	80060b4 <_dtoa_r+0x1ac>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	9a00      	ldr	r2, [sp, #0]
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	4253      	negs	r3, r2
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	2300      	movs	r3, #0
 800615e:	930a      	str	r3, [sp, #40]	; 0x28
 8006160:	e7bf      	b.n	80060e2 <_dtoa_r+0x1da>
 8006162:	2300      	movs	r3, #0
 8006164:	9308      	str	r3, [sp, #32]
 8006166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc55      	bgt.n	8006218 <_dtoa_r+0x310>
 800616c:	2301      	movs	r3, #1
 800616e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006172:	461a      	mov	r2, r3
 8006174:	9209      	str	r2, [sp, #36]	; 0x24
 8006176:	e00c      	b.n	8006192 <_dtoa_r+0x28a>
 8006178:	2301      	movs	r3, #1
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x25c>
 800617c:	2300      	movs	r3, #0
 800617e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	9b00      	ldr	r3, [sp, #0]
 8006184:	4413      	add	r3, r2
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	3301      	adds	r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	bfb8      	it	lt
 8006190:	2301      	movlt	r3, #1
 8006192:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006194:	2200      	movs	r2, #0
 8006196:	6042      	str	r2, [r0, #4]
 8006198:	2204      	movs	r2, #4
 800619a:	f102 0614 	add.w	r6, r2, #20
 800619e:	429e      	cmp	r6, r3
 80061a0:	6841      	ldr	r1, [r0, #4]
 80061a2:	d93d      	bls.n	8006220 <_dtoa_r+0x318>
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 fedb 	bl	8006f60 <_Balloc>
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d13b      	bne.n	8006228 <_dtoa_r+0x320>
 80061b0:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <_dtoa_r+0x2f0>)
 80061b2:	4602      	mov	r2, r0
 80061b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061b8:	e6c0      	b.n	8005f3c <_dtoa_r+0x34>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7df      	b.n	800617e <_dtoa_r+0x276>
 80061be:	bf00      	nop
 80061c0:	636f4361 	.word	0x636f4361
 80061c4:	3fd287a7 	.word	0x3fd287a7
 80061c8:	8b60c8b3 	.word	0x8b60c8b3
 80061cc:	3fc68a28 	.word	0x3fc68a28
 80061d0:	509f79fb 	.word	0x509f79fb
 80061d4:	3fd34413 	.word	0x3fd34413
 80061d8:	08007d4d 	.word	0x08007d4d
 80061dc:	08007d64 	.word	0x08007d64
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	08007d49 	.word	0x08007d49
 80061e8:	08007d40 	.word	0x08007d40
 80061ec:	08007d1d 	.word	0x08007d1d
 80061f0:	3ff80000 	.word	0x3ff80000
 80061f4:	08007eb8 	.word	0x08007eb8
 80061f8:	08007dbf 	.word	0x08007dbf
 80061fc:	2501      	movs	r5, #1
 80061fe:	2300      	movs	r3, #0
 8006200:	9306      	str	r3, [sp, #24]
 8006202:	9508      	str	r5, [sp, #32]
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	2312      	movs	r3, #18
 8006210:	e7b0      	b.n	8006174 <_dtoa_r+0x26c>
 8006212:	2301      	movs	r3, #1
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	e7f5      	b.n	8006204 <_dtoa_r+0x2fc>
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800621e:	e7b8      	b.n	8006192 <_dtoa_r+0x28a>
 8006220:	3101      	adds	r1, #1
 8006222:	6041      	str	r1, [r0, #4]
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	e7b8      	b.n	800619a <_dtoa_r+0x292>
 8006228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	2b0e      	cmp	r3, #14
 8006232:	f200 809d 	bhi.w	8006370 <_dtoa_r+0x468>
 8006236:	2d00      	cmp	r5, #0
 8006238:	f000 809a 	beq.w	8006370 <_dtoa_r+0x468>
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dd32      	ble.n	80062a8 <_dtoa_r+0x3a0>
 8006242:	4ab7      	ldr	r2, [pc, #732]	; (8006520 <_dtoa_r+0x618>)
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800624c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006250:	9b00      	ldr	r3, [sp, #0]
 8006252:	05d8      	lsls	r0, r3, #23
 8006254:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006258:	d516      	bpl.n	8006288 <_dtoa_r+0x380>
 800625a:	4bb2      	ldr	r3, [pc, #712]	; (8006524 <_dtoa_r+0x61c>)
 800625c:	ec51 0b19 	vmov	r0, r1, d9
 8006260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006264:	f7fa fb12 	bl	800088c <__aeabi_ddiv>
 8006268:	f007 070f 	and.w	r7, r7, #15
 800626c:	4682      	mov	sl, r0
 800626e:	468b      	mov	fp, r1
 8006270:	2503      	movs	r5, #3
 8006272:	4eac      	ldr	r6, [pc, #688]	; (8006524 <_dtoa_r+0x61c>)
 8006274:	b957      	cbnz	r7, 800628c <_dtoa_r+0x384>
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa fb05 	bl	800088c <__aeabi_ddiv>
 8006282:	4682      	mov	sl, r0
 8006284:	468b      	mov	fp, r1
 8006286:	e028      	b.n	80062da <_dtoa_r+0x3d2>
 8006288:	2502      	movs	r5, #2
 800628a:	e7f2      	b.n	8006272 <_dtoa_r+0x36a>
 800628c:	07f9      	lsls	r1, r7, #31
 800628e:	d508      	bpl.n	80062a2 <_dtoa_r+0x39a>
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006298:	f7fa f9ce 	bl	8000638 <__aeabi_dmul>
 800629c:	3501      	adds	r5, #1
 800629e:	4680      	mov	r8, r0
 80062a0:	4689      	mov	r9, r1
 80062a2:	107f      	asrs	r7, r7, #1
 80062a4:	3608      	adds	r6, #8
 80062a6:	e7e5      	b.n	8006274 <_dtoa_r+0x36c>
 80062a8:	f000 809b 	beq.w	80063e2 <_dtoa_r+0x4da>
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	4f9d      	ldr	r7, [pc, #628]	; (8006524 <_dtoa_r+0x61c>)
 80062b0:	425e      	negs	r6, r3
 80062b2:	4b9b      	ldr	r3, [pc, #620]	; (8006520 <_dtoa_r+0x618>)
 80062b4:	f006 020f 	and.w	r2, r6, #15
 80062b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	ec51 0b19 	vmov	r0, r1, d9
 80062c4:	f7fa f9b8 	bl	8000638 <__aeabi_dmul>
 80062c8:	1136      	asrs	r6, r6, #4
 80062ca:	4682      	mov	sl, r0
 80062cc:	468b      	mov	fp, r1
 80062ce:	2300      	movs	r3, #0
 80062d0:	2502      	movs	r5, #2
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d17a      	bne.n	80063cc <_dtoa_r+0x4c4>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1d3      	bne.n	8006282 <_dtoa_r+0x37a>
 80062da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8082 	beq.w	80063e6 <_dtoa_r+0x4de>
 80062e2:	4b91      	ldr	r3, [pc, #580]	; (8006528 <_dtoa_r+0x620>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	4650      	mov	r0, sl
 80062e8:	4659      	mov	r1, fp
 80062ea:	f7fa fc17 	bl	8000b1c <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d079      	beq.n	80063e6 <_dtoa_r+0x4de>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d076      	beq.n	80063e6 <_dtoa_r+0x4de>
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd36      	ble.n	800636c <_dtoa_r+0x464>
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	4650      	mov	r0, sl
 8006302:	4659      	mov	r1, fp
 8006304:	1e5f      	subs	r7, r3, #1
 8006306:	2200      	movs	r2, #0
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <_dtoa_r+0x624>)
 800630a:	f7fa f995 	bl	8000638 <__aeabi_dmul>
 800630e:	9e02      	ldr	r6, [sp, #8]
 8006310:	4682      	mov	sl, r0
 8006312:	468b      	mov	fp, r1
 8006314:	3501      	adds	r5, #1
 8006316:	4628      	mov	r0, r5
 8006318:	f7fa f924 	bl	8000564 <__aeabi_i2d>
 800631c:	4652      	mov	r2, sl
 800631e:	465b      	mov	r3, fp
 8006320:	f7fa f98a 	bl	8000638 <__aeabi_dmul>
 8006324:	4b82      	ldr	r3, [pc, #520]	; (8006530 <_dtoa_r+0x628>)
 8006326:	2200      	movs	r2, #0
 8006328:	f7f9 ffd0 	bl	80002cc <__adddf3>
 800632c:	46d0      	mov	r8, sl
 800632e:	46d9      	mov	r9, fp
 8006330:	4682      	mov	sl, r0
 8006332:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006336:	2e00      	cmp	r6, #0
 8006338:	d158      	bne.n	80063ec <_dtoa_r+0x4e4>
 800633a:	4b7e      	ldr	r3, [pc, #504]	; (8006534 <_dtoa_r+0x62c>)
 800633c:	2200      	movs	r2, #0
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7f9 ffc1 	bl	80002c8 <__aeabi_dsub>
 8006346:	4652      	mov	r2, sl
 8006348:	465b      	mov	r3, fp
 800634a:	4680      	mov	r8, r0
 800634c:	4689      	mov	r9, r1
 800634e:	f7fa fc03 	bl	8000b58 <__aeabi_dcmpgt>
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 8295 	bne.w	8006882 <_dtoa_r+0x97a>
 8006358:	4652      	mov	r2, sl
 800635a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7fa fbdb 	bl	8000b1c <__aeabi_dcmplt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8289 	bne.w	800687e <_dtoa_r+0x976>
 800636c:	ec5b ab19 	vmov	sl, fp, d9
 8006370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006372:	2b00      	cmp	r3, #0
 8006374:	f2c0 8148 	blt.w	8006608 <_dtoa_r+0x700>
 8006378:	9a00      	ldr	r2, [sp, #0]
 800637a:	2a0e      	cmp	r2, #14
 800637c:	f300 8144 	bgt.w	8006608 <_dtoa_r+0x700>
 8006380:	4b67      	ldr	r3, [pc, #412]	; (8006520 <_dtoa_r+0x618>)
 8006382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006386:	e9d3 8900 	ldrd	r8, r9, [r3]
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	f280 80d5 	bge.w	800653c <_dtoa_r+0x634>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f300 80d1 	bgt.w	800653c <_dtoa_r+0x634>
 800639a:	f040 826f 	bne.w	800687c <_dtoa_r+0x974>
 800639e:	4b65      	ldr	r3, [pc, #404]	; (8006534 <_dtoa_r+0x62c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa f947 	bl	8000638 <__aeabi_dmul>
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f7fa fbc9 	bl	8000b44 <__aeabi_dcmpge>
 80063b2:	9e03      	ldr	r6, [sp, #12]
 80063b4:	4637      	mov	r7, r6
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f040 8245 	bne.w	8006846 <_dtoa_r+0x93e>
 80063bc:	9d01      	ldr	r5, [sp, #4]
 80063be:	2331      	movs	r3, #49	; 0x31
 80063c0:	f805 3b01 	strb.w	r3, [r5], #1
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	e240      	b.n	800684e <_dtoa_r+0x946>
 80063cc:	07f2      	lsls	r2, r6, #31
 80063ce:	d505      	bpl.n	80063dc <_dtoa_r+0x4d4>
 80063d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d4:	f7fa f930 	bl	8000638 <__aeabi_dmul>
 80063d8:	3501      	adds	r5, #1
 80063da:	2301      	movs	r3, #1
 80063dc:	1076      	asrs	r6, r6, #1
 80063de:	3708      	adds	r7, #8
 80063e0:	e777      	b.n	80062d2 <_dtoa_r+0x3ca>
 80063e2:	2502      	movs	r5, #2
 80063e4:	e779      	b.n	80062da <_dtoa_r+0x3d2>
 80063e6:	9f00      	ldr	r7, [sp, #0]
 80063e8:	9e03      	ldr	r6, [sp, #12]
 80063ea:	e794      	b.n	8006316 <_dtoa_r+0x40e>
 80063ec:	9901      	ldr	r1, [sp, #4]
 80063ee:	4b4c      	ldr	r3, [pc, #304]	; (8006520 <_dtoa_r+0x618>)
 80063f0:	4431      	add	r1, r6
 80063f2:	910d      	str	r1, [sp, #52]	; 0x34
 80063f4:	9908      	ldr	r1, [sp, #32]
 80063f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063fe:	2900      	cmp	r1, #0
 8006400:	d043      	beq.n	800648a <_dtoa_r+0x582>
 8006402:	494d      	ldr	r1, [pc, #308]	; (8006538 <_dtoa_r+0x630>)
 8006404:	2000      	movs	r0, #0
 8006406:	f7fa fa41 	bl	800088c <__aeabi_ddiv>
 800640a:	4652      	mov	r2, sl
 800640c:	465b      	mov	r3, fp
 800640e:	f7f9 ff5b 	bl	80002c8 <__aeabi_dsub>
 8006412:	9d01      	ldr	r5, [sp, #4]
 8006414:	4682      	mov	sl, r0
 8006416:	468b      	mov	fp, r1
 8006418:	4649      	mov	r1, r9
 800641a:	4640      	mov	r0, r8
 800641c:	f7fa fbbc 	bl	8000b98 <__aeabi_d2iz>
 8006420:	4606      	mov	r6, r0
 8006422:	f7fa f89f 	bl	8000564 <__aeabi_i2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7f9 ff4b 	bl	80002c8 <__aeabi_dsub>
 8006432:	3630      	adds	r6, #48	; 0x30
 8006434:	f805 6b01 	strb.w	r6, [r5], #1
 8006438:	4652      	mov	r2, sl
 800643a:	465b      	mov	r3, fp
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	f7fa fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	d163      	bne.n	8006510 <_dtoa_r+0x608>
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	4936      	ldr	r1, [pc, #216]	; (8006528 <_dtoa_r+0x620>)
 800644e:	2000      	movs	r0, #0
 8006450:	f7f9 ff3a 	bl	80002c8 <__aeabi_dsub>
 8006454:	4652      	mov	r2, sl
 8006456:	465b      	mov	r3, fp
 8006458:	f7fa fb60 	bl	8000b1c <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 80b5 	bne.w	80065cc <_dtoa_r+0x6c4>
 8006462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006464:	429d      	cmp	r5, r3
 8006466:	d081      	beq.n	800636c <_dtoa_r+0x464>
 8006468:	4b30      	ldr	r3, [pc, #192]	; (800652c <_dtoa_r+0x624>)
 800646a:	2200      	movs	r2, #0
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7fa f8e2 	bl	8000638 <__aeabi_dmul>
 8006474:	4b2d      	ldr	r3, [pc, #180]	; (800652c <_dtoa_r+0x624>)
 8006476:	4682      	mov	sl, r0
 8006478:	468b      	mov	fp, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	2200      	movs	r2, #0
 8006480:	f7fa f8da 	bl	8000638 <__aeabi_dmul>
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	e7c6      	b.n	8006418 <_dtoa_r+0x510>
 800648a:	4650      	mov	r0, sl
 800648c:	4659      	mov	r1, fp
 800648e:	f7fa f8d3 	bl	8000638 <__aeabi_dmul>
 8006492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006494:	9d01      	ldr	r5, [sp, #4]
 8006496:	930f      	str	r3, [sp, #60]	; 0x3c
 8006498:	4682      	mov	sl, r0
 800649a:	468b      	mov	fp, r1
 800649c:	4649      	mov	r1, r9
 800649e:	4640      	mov	r0, r8
 80064a0:	f7fa fb7a 	bl	8000b98 <__aeabi_d2iz>
 80064a4:	4606      	mov	r6, r0
 80064a6:	f7fa f85d 	bl	8000564 <__aeabi_i2d>
 80064aa:	3630      	adds	r6, #48	; 0x30
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	f7f9 ff08 	bl	80002c8 <__aeabi_dsub>
 80064b8:	f805 6b01 	strb.w	r6, [r5], #1
 80064bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064be:	429d      	cmp	r5, r3
 80064c0:	4680      	mov	r8, r0
 80064c2:	4689      	mov	r9, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	d124      	bne.n	8006514 <_dtoa_r+0x60c>
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <_dtoa_r+0x630>)
 80064cc:	4650      	mov	r0, sl
 80064ce:	4659      	mov	r1, fp
 80064d0:	f7f9 fefc 	bl	80002cc <__adddf3>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f7fa fb3c 	bl	8000b58 <__aeabi_dcmpgt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d173      	bne.n	80065cc <_dtoa_r+0x6c4>
 80064e4:	4652      	mov	r2, sl
 80064e6:	465b      	mov	r3, fp
 80064e8:	4913      	ldr	r1, [pc, #76]	; (8006538 <_dtoa_r+0x630>)
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7f9 feec 	bl	80002c8 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7fa fb10 	bl	8000b1c <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f af35 	beq.w	800636c <_dtoa_r+0x464>
 8006502:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006504:	1e6b      	subs	r3, r5, #1
 8006506:	930f      	str	r3, [sp, #60]	; 0x3c
 8006508:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800650c:	2b30      	cmp	r3, #48	; 0x30
 800650e:	d0f8      	beq.n	8006502 <_dtoa_r+0x5fa>
 8006510:	9700      	str	r7, [sp, #0]
 8006512:	e049      	b.n	80065a8 <_dtoa_r+0x6a0>
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <_dtoa_r+0x624>)
 8006516:	f7fa f88f 	bl	8000638 <__aeabi_dmul>
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	e7bd      	b.n	800649c <_dtoa_r+0x594>
 8006520:	08007eb8 	.word	0x08007eb8
 8006524:	08007e90 	.word	0x08007e90
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	40240000 	.word	0x40240000
 8006530:	401c0000 	.word	0x401c0000
 8006534:	40140000 	.word	0x40140000
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	9d01      	ldr	r5, [sp, #4]
 800653e:	4656      	mov	r6, sl
 8006540:	465f      	mov	r7, fp
 8006542:	4642      	mov	r2, r8
 8006544:	464b      	mov	r3, r9
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa f99f 	bl	800088c <__aeabi_ddiv>
 800654e:	f7fa fb23 	bl	8000b98 <__aeabi_d2iz>
 8006552:	4682      	mov	sl, r0
 8006554:	f7fa f806 	bl	8000564 <__aeabi_i2d>
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	f7fa f86c 	bl	8000638 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800656c:	f7f9 feac 	bl	80002c8 <__aeabi_dsub>
 8006570:	f805 6b01 	strb.w	r6, [r5], #1
 8006574:	9e01      	ldr	r6, [sp, #4]
 8006576:	9f03      	ldr	r7, [sp, #12]
 8006578:	1bae      	subs	r6, r5, r6
 800657a:	42b7      	cmp	r7, r6
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	d135      	bne.n	80065ee <_dtoa_r+0x6e6>
 8006582:	f7f9 fea3 	bl	80002cc <__adddf3>
 8006586:	4642      	mov	r2, r8
 8006588:	464b      	mov	r3, r9
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	f7fa fae3 	bl	8000b58 <__aeabi_dcmpgt>
 8006592:	b9d0      	cbnz	r0, 80065ca <_dtoa_r+0x6c2>
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa fab4 	bl	8000b08 <__aeabi_dcmpeq>
 80065a0:	b110      	cbz	r0, 80065a8 <_dtoa_r+0x6a0>
 80065a2:	f01a 0f01 	tst.w	sl, #1
 80065a6:	d110      	bne.n	80065ca <_dtoa_r+0x6c2>
 80065a8:	4620      	mov	r0, r4
 80065aa:	ee18 1a10 	vmov	r1, s16
 80065ae:	f000 fd17 	bl	8006fe0 <_Bfree>
 80065b2:	2300      	movs	r3, #0
 80065b4:	9800      	ldr	r0, [sp, #0]
 80065b6:	702b      	strb	r3, [r5, #0]
 80065b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ba:	3001      	adds	r0, #1
 80065bc:	6018      	str	r0, [r3, #0]
 80065be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f43f acf1 	beq.w	8005fa8 <_dtoa_r+0xa0>
 80065c6:	601d      	str	r5, [r3, #0]
 80065c8:	e4ee      	b.n	8005fa8 <_dtoa_r+0xa0>
 80065ca:	9f00      	ldr	r7, [sp, #0]
 80065cc:	462b      	mov	r3, r5
 80065ce:	461d      	mov	r5, r3
 80065d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065d4:	2a39      	cmp	r2, #57	; 0x39
 80065d6:	d106      	bne.n	80065e6 <_dtoa_r+0x6de>
 80065d8:	9a01      	ldr	r2, [sp, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d1f7      	bne.n	80065ce <_dtoa_r+0x6c6>
 80065de:	9901      	ldr	r1, [sp, #4]
 80065e0:	2230      	movs	r2, #48	; 0x30
 80065e2:	3701      	adds	r7, #1
 80065e4:	700a      	strb	r2, [r1, #0]
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	3201      	adds	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e790      	b.n	8006510 <_dtoa_r+0x608>
 80065ee:	4ba6      	ldr	r3, [pc, #664]	; (8006888 <_dtoa_r+0x980>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	f7fa f821 	bl	8000638 <__aeabi_dmul>
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	f7fa fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8006602:	2800      	cmp	r0, #0
 8006604:	d09d      	beq.n	8006542 <_dtoa_r+0x63a>
 8006606:	e7cf      	b.n	80065a8 <_dtoa_r+0x6a0>
 8006608:	9a08      	ldr	r2, [sp, #32]
 800660a:	2a00      	cmp	r2, #0
 800660c:	f000 80d7 	beq.w	80067be <_dtoa_r+0x8b6>
 8006610:	9a06      	ldr	r2, [sp, #24]
 8006612:	2a01      	cmp	r2, #1
 8006614:	f300 80ba 	bgt.w	800678c <_dtoa_r+0x884>
 8006618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661a:	2a00      	cmp	r2, #0
 800661c:	f000 80b2 	beq.w	8006784 <_dtoa_r+0x87c>
 8006620:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006624:	9e07      	ldr	r6, [sp, #28]
 8006626:	9d04      	ldr	r5, [sp, #16]
 8006628:	9a04      	ldr	r2, [sp, #16]
 800662a:	441a      	add	r2, r3
 800662c:	9204      	str	r2, [sp, #16]
 800662e:	9a05      	ldr	r2, [sp, #20]
 8006630:	2101      	movs	r1, #1
 8006632:	441a      	add	r2, r3
 8006634:	4620      	mov	r0, r4
 8006636:	9205      	str	r2, [sp, #20]
 8006638:	f000 fd8a 	bl	8007150 <__i2b>
 800663c:	4607      	mov	r7, r0
 800663e:	2d00      	cmp	r5, #0
 8006640:	dd0c      	ble.n	800665c <_dtoa_r+0x754>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd09      	ble.n	800665c <_dtoa_r+0x754>
 8006648:	42ab      	cmp	r3, r5
 800664a:	9a04      	ldr	r2, [sp, #16]
 800664c:	bfa8      	it	ge
 800664e:	462b      	movge	r3, r5
 8006650:	1ad2      	subs	r2, r2, r3
 8006652:	9204      	str	r2, [sp, #16]
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	1aed      	subs	r5, r5, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	b31b      	cbz	r3, 80066a8 <_dtoa_r+0x7a0>
 8006660:	9b08      	ldr	r3, [sp, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80af 	beq.w	80067c6 <_dtoa_r+0x8be>
 8006668:	2e00      	cmp	r6, #0
 800666a:	dd13      	ble.n	8006694 <_dtoa_r+0x78c>
 800666c:	4639      	mov	r1, r7
 800666e:	4632      	mov	r2, r6
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fe2d 	bl	80072d0 <__pow5mult>
 8006676:	ee18 2a10 	vmov	r2, s16
 800667a:	4601      	mov	r1, r0
 800667c:	4607      	mov	r7, r0
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fd7c 	bl	800717c <__multiply>
 8006684:	ee18 1a10 	vmov	r1, s16
 8006688:	4680      	mov	r8, r0
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fca8 	bl	8006fe0 <_Bfree>
 8006690:	ee08 8a10 	vmov	s16, r8
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	1b9a      	subs	r2, r3, r6
 8006698:	d006      	beq.n	80066a8 <_dtoa_r+0x7a0>
 800669a:	ee18 1a10 	vmov	r1, s16
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fe16 	bl	80072d0 <__pow5mult>
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	2101      	movs	r1, #1
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fd50 	bl	8007150 <__i2b>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	4606      	mov	r6, r0
 80066b6:	f340 8088 	ble.w	80067ca <_dtoa_r+0x8c2>
 80066ba:	461a      	mov	r2, r3
 80066bc:	4601      	mov	r1, r0
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fe06 	bl	80072d0 <__pow5mult>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	4606      	mov	r6, r0
 80066ca:	f340 8081 	ble.w	80067d0 <_dtoa_r+0x8c8>
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	6933      	ldr	r3, [r6, #16]
 80066d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066d8:	6918      	ldr	r0, [r3, #16]
 80066da:	f000 fce9 	bl	80070b0 <__hi0bits>
 80066de:	f1c0 0020 	rsb	r0, r0, #32
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	4418      	add	r0, r3
 80066e6:	f010 001f 	ands.w	r0, r0, #31
 80066ea:	f000 8092 	beq.w	8006812 <_dtoa_r+0x90a>
 80066ee:	f1c0 0320 	rsb	r3, r0, #32
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	f340 808a 	ble.w	800680c <_dtoa_r+0x904>
 80066f8:	f1c0 001c 	rsb	r0, r0, #28
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	4403      	add	r3, r0
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	4403      	add	r3, r0
 8006706:	4405      	add	r5, r0
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd07      	ble.n	8006720 <_dtoa_r+0x818>
 8006710:	ee18 1a10 	vmov	r1, s16
 8006714:	461a      	mov	r2, r3
 8006716:	4620      	mov	r0, r4
 8006718:	f000 fe34 	bl	8007384 <__lshift>
 800671c:	ee08 0a10 	vmov	s16, r0
 8006720:	9b05      	ldr	r3, [sp, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dd05      	ble.n	8006732 <_dtoa_r+0x82a>
 8006726:	4631      	mov	r1, r6
 8006728:	461a      	mov	r2, r3
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fe2a 	bl	8007384 <__lshift>
 8006730:	4606      	mov	r6, r0
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d06e      	beq.n	8006816 <_dtoa_r+0x90e>
 8006738:	ee18 0a10 	vmov	r0, s16
 800673c:	4631      	mov	r1, r6
 800673e:	f000 fe91 	bl	8007464 <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	da67      	bge.n	8006816 <_dtoa_r+0x90e>
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	ee18 1a10 	vmov	r1, s16
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	220a      	movs	r2, #10
 8006752:	2300      	movs	r3, #0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fc65 	bl	8007024 <__multadd>
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	ee08 0a10 	vmov	s16, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 81b1 	beq.w	8006ac8 <_dtoa_r+0xbc0>
 8006766:	2300      	movs	r3, #0
 8006768:	4639      	mov	r1, r7
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fc59 	bl	8007024 <__multadd>
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	4607      	mov	r7, r0
 8006778:	f300 808e 	bgt.w	8006898 <_dtoa_r+0x990>
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc51      	bgt.n	8006826 <_dtoa_r+0x91e>
 8006782:	e089      	b.n	8006898 <_dtoa_r+0x990>
 8006784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800678a:	e74b      	b.n	8006624 <_dtoa_r+0x71c>
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	1e5e      	subs	r6, r3, #1
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfbf      	itttt	lt
 8006796:	9b07      	ldrlt	r3, [sp, #28]
 8006798:	9607      	strlt	r6, [sp, #28]
 800679a:	1af2      	sublt	r2, r6, r3
 800679c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800679e:	bfb6      	itet	lt
 80067a0:	189b      	addlt	r3, r3, r2
 80067a2:	1b9e      	subge	r6, r3, r6
 80067a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	bfb8      	it	lt
 80067aa:	2600      	movlt	r6, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb7      	itett	lt
 80067b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80067b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80067b8:	1a9d      	sublt	r5, r3, r2
 80067ba:	2300      	movlt	r3, #0
 80067bc:	e734      	b.n	8006628 <_dtoa_r+0x720>
 80067be:	9e07      	ldr	r6, [sp, #28]
 80067c0:	9d04      	ldr	r5, [sp, #16]
 80067c2:	9f08      	ldr	r7, [sp, #32]
 80067c4:	e73b      	b.n	800663e <_dtoa_r+0x736>
 80067c6:	9a07      	ldr	r2, [sp, #28]
 80067c8:	e767      	b.n	800669a <_dtoa_r+0x792>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	dc18      	bgt.n	8006802 <_dtoa_r+0x8fa>
 80067d0:	f1ba 0f00 	cmp.w	sl, #0
 80067d4:	d115      	bne.n	8006802 <_dtoa_r+0x8fa>
 80067d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067da:	b993      	cbnz	r3, 8006802 <_dtoa_r+0x8fa>
 80067dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067e0:	0d1b      	lsrs	r3, r3, #20
 80067e2:	051b      	lsls	r3, r3, #20
 80067e4:	b183      	cbz	r3, 8006808 <_dtoa_r+0x900>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	9b05      	ldr	r3, [sp, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	f04f 0801 	mov.w	r8, #1
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f47f af6a 	bne.w	80066d2 <_dtoa_r+0x7ca>
 80067fe:	2001      	movs	r0, #1
 8006800:	e76f      	b.n	80066e2 <_dtoa_r+0x7da>
 8006802:	f04f 0800 	mov.w	r8, #0
 8006806:	e7f6      	b.n	80067f6 <_dtoa_r+0x8ee>
 8006808:	4698      	mov	r8, r3
 800680a:	e7f4      	b.n	80067f6 <_dtoa_r+0x8ee>
 800680c:	f43f af7d 	beq.w	800670a <_dtoa_r+0x802>
 8006810:	4618      	mov	r0, r3
 8006812:	301c      	adds	r0, #28
 8006814:	e772      	b.n	80066fc <_dtoa_r+0x7f4>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc37      	bgt.n	800688c <_dtoa_r+0x984>
 800681c:	9b06      	ldr	r3, [sp, #24]
 800681e:	2b02      	cmp	r3, #2
 8006820:	dd34      	ble.n	800688c <_dtoa_r+0x984>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	9302      	str	r3, [sp, #8]
 8006826:	9b02      	ldr	r3, [sp, #8]
 8006828:	b96b      	cbnz	r3, 8006846 <_dtoa_r+0x93e>
 800682a:	4631      	mov	r1, r6
 800682c:	2205      	movs	r2, #5
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fbf8 	bl	8007024 <__multadd>
 8006834:	4601      	mov	r1, r0
 8006836:	4606      	mov	r6, r0
 8006838:	ee18 0a10 	vmov	r0, s16
 800683c:	f000 fe12 	bl	8007464 <__mcmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	f73f adbb 	bgt.w	80063bc <_dtoa_r+0x4b4>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	9d01      	ldr	r5, [sp, #4]
 800684a:	43db      	mvns	r3, r3
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	4631      	mov	r1, r6
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fbc3 	bl	8006fe0 <_Bfree>
 800685a:	2f00      	cmp	r7, #0
 800685c:	f43f aea4 	beq.w	80065a8 <_dtoa_r+0x6a0>
 8006860:	f1b8 0f00 	cmp.w	r8, #0
 8006864:	d005      	beq.n	8006872 <_dtoa_r+0x96a>
 8006866:	45b8      	cmp	r8, r7
 8006868:	d003      	beq.n	8006872 <_dtoa_r+0x96a>
 800686a:	4641      	mov	r1, r8
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fbb7 	bl	8006fe0 <_Bfree>
 8006872:	4639      	mov	r1, r7
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fbb3 	bl	8006fe0 <_Bfree>
 800687a:	e695      	b.n	80065a8 <_dtoa_r+0x6a0>
 800687c:	2600      	movs	r6, #0
 800687e:	4637      	mov	r7, r6
 8006880:	e7e1      	b.n	8006846 <_dtoa_r+0x93e>
 8006882:	9700      	str	r7, [sp, #0]
 8006884:	4637      	mov	r7, r6
 8006886:	e599      	b.n	80063bc <_dtoa_r+0x4b4>
 8006888:	40240000 	.word	0x40240000
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80ca 	beq.w	8006a28 <_dtoa_r+0xb20>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	2d00      	cmp	r5, #0
 800689a:	dd05      	ble.n	80068a8 <_dtoa_r+0x9a0>
 800689c:	4639      	mov	r1, r7
 800689e:	462a      	mov	r2, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fd6f 	bl	8007384 <__lshift>
 80068a6:	4607      	mov	r7, r0
 80068a8:	f1b8 0f00 	cmp.w	r8, #0
 80068ac:	d05b      	beq.n	8006966 <_dtoa_r+0xa5e>
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fb55 	bl	8006f60 <_Balloc>
 80068b6:	4605      	mov	r5, r0
 80068b8:	b928      	cbnz	r0, 80068c6 <_dtoa_r+0x9be>
 80068ba:	4b87      	ldr	r3, [pc, #540]	; (8006ad8 <_dtoa_r+0xbd0>)
 80068bc:	4602      	mov	r2, r0
 80068be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068c2:	f7ff bb3b 	b.w	8005f3c <_dtoa_r+0x34>
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	3202      	adds	r2, #2
 80068ca:	0092      	lsls	r2, r2, #2
 80068cc:	f107 010c 	add.w	r1, r7, #12
 80068d0:	300c      	adds	r0, #12
 80068d2:	f000 fb2b 	bl	8006f2c <memcpy>
 80068d6:	2201      	movs	r2, #1
 80068d8:	4629      	mov	r1, r5
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fd52 	bl	8007384 <__lshift>
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	f103 0901 	add.w	r9, r3, #1
 80068e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	f00a 0301 	and.w	r3, sl, #1
 80068f2:	46b8      	mov	r8, r7
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	4607      	mov	r7, r0
 80068f8:	4631      	mov	r1, r6
 80068fa:	ee18 0a10 	vmov	r0, s16
 80068fe:	f7ff fa77 	bl	8005df0 <quorem>
 8006902:	4641      	mov	r1, r8
 8006904:	9002      	str	r0, [sp, #8]
 8006906:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800690a:	ee18 0a10 	vmov	r0, s16
 800690e:	f000 fda9 	bl	8007464 <__mcmp>
 8006912:	463a      	mov	r2, r7
 8006914:	9003      	str	r0, [sp, #12]
 8006916:	4631      	mov	r1, r6
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fdbf 	bl	800749c <__mdiff>
 800691e:	68c2      	ldr	r2, [r0, #12]
 8006920:	f109 3bff 	add.w	fp, r9, #4294967295
 8006924:	4605      	mov	r5, r0
 8006926:	bb02      	cbnz	r2, 800696a <_dtoa_r+0xa62>
 8006928:	4601      	mov	r1, r0
 800692a:	ee18 0a10 	vmov	r0, s16
 800692e:	f000 fd99 	bl	8007464 <__mcmp>
 8006932:	4602      	mov	r2, r0
 8006934:	4629      	mov	r1, r5
 8006936:	4620      	mov	r0, r4
 8006938:	9207      	str	r2, [sp, #28]
 800693a:	f000 fb51 	bl	8006fe0 <_Bfree>
 800693e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006942:	ea43 0102 	orr.w	r1, r3, r2
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	430b      	orrs	r3, r1
 800694a:	464d      	mov	r5, r9
 800694c:	d10f      	bne.n	800696e <_dtoa_r+0xa66>
 800694e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006952:	d02a      	beq.n	80069aa <_dtoa_r+0xaa2>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	dd02      	ble.n	8006960 <_dtoa_r+0xa58>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006960:	f88b a000 	strb.w	sl, [fp]
 8006964:	e775      	b.n	8006852 <_dtoa_r+0x94a>
 8006966:	4638      	mov	r0, r7
 8006968:	e7ba      	b.n	80068e0 <_dtoa_r+0x9d8>
 800696a:	2201      	movs	r2, #1
 800696c:	e7e2      	b.n	8006934 <_dtoa_r+0xa2c>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db04      	blt.n	800697e <_dtoa_r+0xa76>
 8006974:	9906      	ldr	r1, [sp, #24]
 8006976:	430b      	orrs	r3, r1
 8006978:	9904      	ldr	r1, [sp, #16]
 800697a:	430b      	orrs	r3, r1
 800697c:	d122      	bne.n	80069c4 <_dtoa_r+0xabc>
 800697e:	2a00      	cmp	r2, #0
 8006980:	ddee      	ble.n	8006960 <_dtoa_r+0xa58>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	2201      	movs	r2, #1
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fcfb 	bl	8007384 <__lshift>
 800698e:	4631      	mov	r1, r6
 8006990:	ee08 0a10 	vmov	s16, r0
 8006994:	f000 fd66 	bl	8007464 <__mcmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	dc03      	bgt.n	80069a4 <_dtoa_r+0xa9c>
 800699c:	d1e0      	bne.n	8006960 <_dtoa_r+0xa58>
 800699e:	f01a 0f01 	tst.w	sl, #1
 80069a2:	d0dd      	beq.n	8006960 <_dtoa_r+0xa58>
 80069a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069a8:	d1d7      	bne.n	800695a <_dtoa_r+0xa52>
 80069aa:	2339      	movs	r3, #57	; 0x39
 80069ac:	f88b 3000 	strb.w	r3, [fp]
 80069b0:	462b      	mov	r3, r5
 80069b2:	461d      	mov	r5, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ba:	2a39      	cmp	r2, #57	; 0x39
 80069bc:	d071      	beq.n	8006aa2 <_dtoa_r+0xb9a>
 80069be:	3201      	adds	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e746      	b.n	8006852 <_dtoa_r+0x94a>
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	dd07      	ble.n	80069d8 <_dtoa_r+0xad0>
 80069c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069cc:	d0ed      	beq.n	80069aa <_dtoa_r+0xaa2>
 80069ce:	f10a 0301 	add.w	r3, sl, #1
 80069d2:	f88b 3000 	strb.w	r3, [fp]
 80069d6:	e73c      	b.n	8006852 <_dtoa_r+0x94a>
 80069d8:	9b05      	ldr	r3, [sp, #20]
 80069da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80069de:	4599      	cmp	r9, r3
 80069e0:	d047      	beq.n	8006a72 <_dtoa_r+0xb6a>
 80069e2:	ee18 1a10 	vmov	r1, s16
 80069e6:	2300      	movs	r3, #0
 80069e8:	220a      	movs	r2, #10
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 fb1a 	bl	8007024 <__multadd>
 80069f0:	45b8      	cmp	r8, r7
 80069f2:	ee08 0a10 	vmov	s16, r0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	f04f 020a 	mov.w	r2, #10
 80069fe:	4641      	mov	r1, r8
 8006a00:	4620      	mov	r0, r4
 8006a02:	d106      	bne.n	8006a12 <_dtoa_r+0xb0a>
 8006a04:	f000 fb0e 	bl	8007024 <__multadd>
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	f109 0901 	add.w	r9, r9, #1
 8006a10:	e772      	b.n	80068f8 <_dtoa_r+0x9f0>
 8006a12:	f000 fb07 	bl	8007024 <__multadd>
 8006a16:	4639      	mov	r1, r7
 8006a18:	4680      	mov	r8, r0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fb00 	bl	8007024 <__multadd>
 8006a24:	4607      	mov	r7, r0
 8006a26:	e7f1      	b.n	8006a0c <_dtoa_r+0xb04>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	9d01      	ldr	r5, [sp, #4]
 8006a2e:	ee18 0a10 	vmov	r0, s16
 8006a32:	4631      	mov	r1, r6
 8006a34:	f7ff f9dc 	bl	8005df0 <quorem>
 8006a38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	f805 ab01 	strb.w	sl, [r5], #1
 8006a42:	1aea      	subs	r2, r5, r3
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	dd09      	ble.n	8006a5e <_dtoa_r+0xb56>
 8006a4a:	ee18 1a10 	vmov	r1, s16
 8006a4e:	2300      	movs	r3, #0
 8006a50:	220a      	movs	r2, #10
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fae6 	bl	8007024 <__multadd>
 8006a58:	ee08 0a10 	vmov	s16, r0
 8006a5c:	e7e7      	b.n	8006a2e <_dtoa_r+0xb26>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfc8      	it	gt
 8006a64:	461d      	movgt	r5, r3
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	bfd8      	it	le
 8006a6a:	2501      	movle	r5, #1
 8006a6c:	441d      	add	r5, r3
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	ee18 1a10 	vmov	r1, s16
 8006a76:	2201      	movs	r2, #1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fc83 	bl	8007384 <__lshift>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	ee08 0a10 	vmov	s16, r0
 8006a84:	f000 fcee 	bl	8007464 <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	dc91      	bgt.n	80069b0 <_dtoa_r+0xaa8>
 8006a8c:	d102      	bne.n	8006a94 <_dtoa_r+0xb8c>
 8006a8e:	f01a 0f01 	tst.w	sl, #1
 8006a92:	d18d      	bne.n	80069b0 <_dtoa_r+0xaa8>
 8006a94:	462b      	mov	r3, r5
 8006a96:	461d      	mov	r5, r3
 8006a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9c:	2a30      	cmp	r2, #48	; 0x30
 8006a9e:	d0fa      	beq.n	8006a96 <_dtoa_r+0xb8e>
 8006aa0:	e6d7      	b.n	8006852 <_dtoa_r+0x94a>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d184      	bne.n	80069b2 <_dtoa_r+0xaaa>
 8006aa8:	9b00      	ldr	r3, [sp, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2331      	movs	r3, #49	; 0x31
 8006ab0:	7013      	strb	r3, [r2, #0]
 8006ab2:	e6ce      	b.n	8006852 <_dtoa_r+0x94a>
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <_dtoa_r+0xbd4>)
 8006ab6:	f7ff ba95 	b.w	8005fe4 <_dtoa_r+0xdc>
 8006aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f47f aa6e 	bne.w	8005f9e <_dtoa_r+0x96>
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <_dtoa_r+0xbd8>)
 8006ac4:	f7ff ba8e 	b.w	8005fe4 <_dtoa_r+0xdc>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dcae      	bgt.n	8006a2c <_dtoa_r+0xb24>
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	f73f aea8 	bgt.w	8006826 <_dtoa_r+0x91e>
 8006ad6:	e7a9      	b.n	8006a2c <_dtoa_r+0xb24>
 8006ad8:	08007dbf 	.word	0x08007dbf
 8006adc:	08007d1c 	.word	0x08007d1c
 8006ae0:	08007d40 	.word	0x08007d40

08006ae4 <__sflush_r>:
 8006ae4:	898a      	ldrh	r2, [r1, #12]
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	4605      	mov	r5, r0
 8006aec:	0710      	lsls	r0, r2, #28
 8006aee:	460c      	mov	r4, r1
 8006af0:	d458      	bmi.n	8006ba4 <__sflush_r+0xc0>
 8006af2:	684b      	ldr	r3, [r1, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dc05      	bgt.n	8006b04 <__sflush_r+0x20>
 8006af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dc02      	bgt.n	8006b04 <__sflush_r+0x20>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d0f9      	beq.n	8006afe <__sflush_r+0x1a>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b10:	682f      	ldr	r7, [r5, #0]
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	d032      	beq.n	8006b7c <__sflush_r+0x98>
 8006b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	075a      	lsls	r2, r3, #29
 8006b1c:	d505      	bpl.n	8006b2a <__sflush_r+0x46>
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	1ac0      	subs	r0, r0, r3
 8006b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b24:	b10b      	cbz	r3, 8006b2a <__sflush_r+0x46>
 8006b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b28:	1ac0      	subs	r0, r0, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b0      	blx	r6
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	d106      	bne.n	8006b4a <__sflush_r+0x66>
 8006b3c:	6829      	ldr	r1, [r5, #0]
 8006b3e:	291d      	cmp	r1, #29
 8006b40:	d82c      	bhi.n	8006b9c <__sflush_r+0xb8>
 8006b42:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <__sflush_r+0x108>)
 8006b44:	40ca      	lsrs	r2, r1
 8006b46:	07d6      	lsls	r6, r2, #31
 8006b48:	d528      	bpl.n	8006b9c <__sflush_r+0xb8>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6062      	str	r2, [r4, #4]
 8006b4e:	04d9      	lsls	r1, r3, #19
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	d504      	bpl.n	8006b60 <__sflush_r+0x7c>
 8006b56:	1c42      	adds	r2, r0, #1
 8006b58:	d101      	bne.n	8006b5e <__sflush_r+0x7a>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	b903      	cbnz	r3, 8006b60 <__sflush_r+0x7c>
 8006b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b62:	602f      	str	r7, [r5, #0]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d0ca      	beq.n	8006afe <__sflush_r+0x1a>
 8006b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	d002      	beq.n	8006b76 <__sflush_r+0x92>
 8006b70:	4628      	mov	r0, r5
 8006b72:	f7fe fa7f 	bl	8005074 <_free_r>
 8006b76:	2000      	movs	r0, #0
 8006b78:	6360      	str	r0, [r4, #52]	; 0x34
 8006b7a:	e7c1      	b.n	8006b00 <__sflush_r+0x1c>
 8006b7c:	6a21      	ldr	r1, [r4, #32]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b0      	blx	r6
 8006b84:	1c41      	adds	r1, r0, #1
 8006b86:	d1c7      	bne.n	8006b18 <__sflush_r+0x34>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0c4      	beq.n	8006b18 <__sflush_r+0x34>
 8006b8e:	2b1d      	cmp	r3, #29
 8006b90:	d001      	beq.n	8006b96 <__sflush_r+0xb2>
 8006b92:	2b16      	cmp	r3, #22
 8006b94:	d101      	bne.n	8006b9a <__sflush_r+0xb6>
 8006b96:	602f      	str	r7, [r5, #0]
 8006b98:	e7b1      	b.n	8006afe <__sflush_r+0x1a>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	e7ad      	b.n	8006b00 <__sflush_r+0x1c>
 8006ba4:	690f      	ldr	r7, [r1, #16]
 8006ba6:	2f00      	cmp	r7, #0
 8006ba8:	d0a9      	beq.n	8006afe <__sflush_r+0x1a>
 8006baa:	0793      	lsls	r3, r2, #30
 8006bac:	680e      	ldr	r6, [r1, #0]
 8006bae:	bf08      	it	eq
 8006bb0:	694b      	ldreq	r3, [r1, #20]
 8006bb2:	600f      	str	r7, [r1, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	eba6 0807 	sub.w	r8, r6, r7
 8006bbc:	608b      	str	r3, [r1, #8]
 8006bbe:	f1b8 0f00 	cmp.w	r8, #0
 8006bc2:	dd9c      	ble.n	8006afe <__sflush_r+0x1a>
 8006bc4:	6a21      	ldr	r1, [r4, #32]
 8006bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bc8:	4643      	mov	r3, r8
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b0      	blx	r6
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	dc06      	bgt.n	8006be2 <__sflush_r+0xfe>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e78e      	b.n	8006b00 <__sflush_r+0x1c>
 8006be2:	4407      	add	r7, r0
 8006be4:	eba8 0800 	sub.w	r8, r8, r0
 8006be8:	e7e9      	b.n	8006bbe <__sflush_r+0xda>
 8006bea:	bf00      	nop
 8006bec:	20400001 	.word	0x20400001

08006bf0 <_fflush_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b913      	cbnz	r3, 8006c00 <_fflush_r+0x10>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	b118      	cbz	r0, 8006c0a <_fflush_r+0x1a>
 8006c02:	6983      	ldr	r3, [r0, #24]
 8006c04:	b90b      	cbnz	r3, 8006c0a <_fflush_r+0x1a>
 8006c06:	f000 f887 	bl	8006d18 <__sinit>
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <_fflush_r+0x6c>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d11b      	bne.n	8006c48 <_fflush_r+0x58>
 8006c10:	686c      	ldr	r4, [r5, #4]
 8006c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0ef      	beq.n	8006bfa <_fflush_r+0xa>
 8006c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c1c:	07d0      	lsls	r0, r2, #31
 8006c1e:	d404      	bmi.n	8006c2a <_fflush_r+0x3a>
 8006c20:	0599      	lsls	r1, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_fflush_r+0x3a>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f91a 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7ff ff59 	bl	8006ae4 <__sflush_r>
 8006c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c34:	07da      	lsls	r2, r3, #31
 8006c36:	4605      	mov	r5, r0
 8006c38:	d4e0      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d4dd      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c42:	f000 f90d 	bl	8006e60 <__retarget_lock_release_recursive>
 8006c46:	e7d9      	b.n	8006bfc <_fflush_r+0xc>
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <_fflush_r+0x70>)
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	d101      	bne.n	8006c52 <_fflush_r+0x62>
 8006c4e:	68ac      	ldr	r4, [r5, #8]
 8006c50:	e7df      	b.n	8006c12 <_fflush_r+0x22>
 8006c52:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <_fflush_r+0x74>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	bf08      	it	eq
 8006c58:	68ec      	ldreq	r4, [r5, #12]
 8006c5a:	e7da      	b.n	8006c12 <_fflush_r+0x22>
 8006c5c:	08007df0 	.word	0x08007df0
 8006c60:	08007e10 	.word	0x08007e10
 8006c64:	08007dd0 	.word	0x08007dd0

08006c68 <std>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c76:	6083      	str	r3, [r0, #8]
 8006c78:	8181      	strh	r1, [r0, #12]
 8006c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c7c:	81c2      	strh	r2, [r0, #14]
 8006c7e:	6183      	str	r3, [r0, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2208      	movs	r2, #8
 8006c84:	305c      	adds	r0, #92	; 0x5c
 8006c86:	f7fe f9ed 	bl	8005064 <memset>
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <std+0x38>)
 8006c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <std+0x3c>)
 8006c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <std+0x40>)
 8006c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x44>)
 8006c98:	6224      	str	r4, [r4, #32]
 8006c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	080079d9 	.word	0x080079d9
 8006ca4:	080079fb 	.word	0x080079fb
 8006ca8:	08007a33 	.word	0x08007a33
 8006cac:	08007a57 	.word	0x08007a57

08006cb0 <_cleanup_r>:
 8006cb0:	4901      	ldr	r1, [pc, #4]	; (8006cb8 <_cleanup_r+0x8>)
 8006cb2:	f000 b8af 	b.w	8006e14 <_fwalk_reent>
 8006cb6:	bf00      	nop
 8006cb8:	08006bf1 	.word	0x08006bf1

08006cbc <__sfmoreglue>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	2268      	movs	r2, #104	; 0x68
 8006cc0:	1e4d      	subs	r5, r1, #1
 8006cc2:	4355      	muls	r5, r2
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cca:	f7fe fa3f 	bl	800514c <_malloc_r>
 8006cce:	4604      	mov	r4, r0
 8006cd0:	b140      	cbz	r0, 8006ce4 <__sfmoreglue+0x28>
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cd8:	300c      	adds	r0, #12
 8006cda:	60a0      	str	r0, [r4, #8]
 8006cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ce0:	f7fe f9c0 	bl	8005064 <memset>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}

08006ce8 <__sfp_lock_acquire>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__sfp_lock_acquire+0x8>)
 8006cea:	f000 b8b8 	b.w	8006e5e <__retarget_lock_acquire_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000a1d 	.word	0x20000a1d

08006cf4 <__sfp_lock_release>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sfp_lock_release+0x8>)
 8006cf6:	f000 b8b3 	b.w	8006e60 <__retarget_lock_release_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000a1d 	.word	0x20000a1d

08006d00 <__sinit_lock_acquire>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sinit_lock_acquire+0x8>)
 8006d02:	f000 b8ac 	b.w	8006e5e <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000a1e 	.word	0x20000a1e

08006d0c <__sinit_lock_release>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__sinit_lock_release+0x8>)
 8006d0e:	f000 b8a7 	b.w	8006e60 <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000a1e 	.word	0x20000a1e

08006d18 <__sinit>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	f7ff fff0 	bl	8006d00 <__sinit_lock_acquire>
 8006d20:	69a3      	ldr	r3, [r4, #24]
 8006d22:	b11b      	cbz	r3, 8006d2c <__sinit+0x14>
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d28:	f7ff bff0 	b.w	8006d0c <__sinit_lock_release>
 8006d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d30:	6523      	str	r3, [r4, #80]	; 0x50
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <__sinit+0x68>)
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <__sinit+0x6c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	bf04      	itt	eq
 8006d3e:	2301      	moveq	r3, #1
 8006d40:	61a3      	streq	r3, [r4, #24]
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f820 	bl	8006d88 <__sfp>
 8006d48:	6060      	str	r0, [r4, #4]
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 f81c 	bl	8006d88 <__sfp>
 8006d50:	60a0      	str	r0, [r4, #8]
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 f818 	bl	8006d88 <__sfp>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60e0      	str	r0, [r4, #12]
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	6860      	ldr	r0, [r4, #4]
 8006d60:	f7ff ff82 	bl	8006c68 <std>
 8006d64:	68a0      	ldr	r0, [r4, #8]
 8006d66:	2201      	movs	r2, #1
 8006d68:	2109      	movs	r1, #9
 8006d6a:	f7ff ff7d 	bl	8006c68 <std>
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	2202      	movs	r2, #2
 8006d72:	2112      	movs	r1, #18
 8006d74:	f7ff ff78 	bl	8006c68 <std>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	61a3      	str	r3, [r4, #24]
 8006d7c:	e7d2      	b.n	8006d24 <__sinit+0xc>
 8006d7e:	bf00      	nop
 8006d80:	08007d08 	.word	0x08007d08
 8006d84:	08006cb1 	.word	0x08006cb1

08006d88 <__sfp>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	f7ff ffac 	bl	8006ce8 <__sfp_lock_acquire>
 8006d90:	4b1e      	ldr	r3, [pc, #120]	; (8006e0c <__sfp+0x84>)
 8006d92:	681e      	ldr	r6, [r3, #0]
 8006d94:	69b3      	ldr	r3, [r6, #24]
 8006d96:	b913      	cbnz	r3, 8006d9e <__sfp+0x16>
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7ff ffbd 	bl	8006d18 <__sinit>
 8006d9e:	3648      	adds	r6, #72	; 0x48
 8006da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	d503      	bpl.n	8006db0 <__sfp+0x28>
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	b30b      	cbz	r3, 8006df0 <__sfp+0x68>
 8006dac:	6836      	ldr	r6, [r6, #0]
 8006dae:	e7f7      	b.n	8006da0 <__sfp+0x18>
 8006db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006db4:	b9d5      	cbnz	r5, 8006dec <__sfp+0x64>
 8006db6:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <__sfp+0x88>)
 8006db8:	60e3      	str	r3, [r4, #12]
 8006dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8006dc0:	f000 f84c 	bl	8006e5c <__retarget_lock_init_recursive>
 8006dc4:	f7ff ff96 	bl	8006cf4 <__sfp_lock_release>
 8006dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dd0:	6025      	str	r5, [r4, #0]
 8006dd2:	61a5      	str	r5, [r4, #24]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ddc:	f7fe f942 	bl	8005064 <memset>
 8006de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006de8:	4620      	mov	r0, r4
 8006dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dec:	3468      	adds	r4, #104	; 0x68
 8006dee:	e7d9      	b.n	8006da4 <__sfp+0x1c>
 8006df0:	2104      	movs	r1, #4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff ff62 	bl	8006cbc <__sfmoreglue>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	6030      	str	r0, [r6, #0]
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d1d5      	bne.n	8006dac <__sfp+0x24>
 8006e00:	f7ff ff78 	bl	8006cf4 <__sfp_lock_release>
 8006e04:	230c      	movs	r3, #12
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	e7ee      	b.n	8006de8 <__sfp+0x60>
 8006e0a:	bf00      	nop
 8006e0c:	08007d08 	.word	0x08007d08
 8006e10:	ffff0001 	.word	0xffff0001

08006e14 <_fwalk_reent>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	4606      	mov	r6, r0
 8006e1a:	4688      	mov	r8, r1
 8006e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e20:	2700      	movs	r7, #0
 8006e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e26:	f1b9 0901 	subs.w	r9, r9, #1
 8006e2a:	d505      	bpl.n	8006e38 <_fwalk_reent+0x24>
 8006e2c:	6824      	ldr	r4, [r4, #0]
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d1f7      	bne.n	8006e22 <_fwalk_reent+0xe>
 8006e32:	4638      	mov	r0, r7
 8006e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e38:	89ab      	ldrh	r3, [r5, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d907      	bls.n	8006e4e <_fwalk_reent+0x3a>
 8006e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e42:	3301      	adds	r3, #1
 8006e44:	d003      	beq.n	8006e4e <_fwalk_reent+0x3a>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4630      	mov	r0, r6
 8006e4a:	47c0      	blx	r8
 8006e4c:	4307      	orrs	r7, r0
 8006e4e:	3568      	adds	r5, #104	; 0x68
 8006e50:	e7e9      	b.n	8006e26 <_fwalk_reent+0x12>
	...

08006e54 <_localeconv_r>:
 8006e54:	4800      	ldr	r0, [pc, #0]	; (8006e58 <_localeconv_r+0x4>)
 8006e56:	4770      	bx	lr
 8006e58:	20000160 	.word	0x20000160

08006e5c <__retarget_lock_init_recursive>:
 8006e5c:	4770      	bx	lr

08006e5e <__retarget_lock_acquire_recursive>:
 8006e5e:	4770      	bx	lr

08006e60 <__retarget_lock_release_recursive>:
 8006e60:	4770      	bx	lr

08006e62 <__swhatbuf_r>:
 8006e62:	b570      	push	{r4, r5, r6, lr}
 8006e64:	460e      	mov	r6, r1
 8006e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	b096      	sub	sp, #88	; 0x58
 8006e6e:	4614      	mov	r4, r2
 8006e70:	461d      	mov	r5, r3
 8006e72:	da08      	bge.n	8006e86 <__swhatbuf_r+0x24>
 8006e74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	061a      	lsls	r2, r3, #24
 8006e7e:	d410      	bmi.n	8006ea2 <__swhatbuf_r+0x40>
 8006e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e84:	e00e      	b.n	8006ea4 <__swhatbuf_r+0x42>
 8006e86:	466a      	mov	r2, sp
 8006e88:	f000 fe3c 	bl	8007b04 <_fstat_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dbf1      	blt.n	8006e74 <__swhatbuf_r+0x12>
 8006e90:	9a01      	ldr	r2, [sp, #4]
 8006e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e9a:	425a      	negs	r2, r3
 8006e9c:	415a      	adcs	r2, r3
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	e7ee      	b.n	8006e80 <__swhatbuf_r+0x1e>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	b016      	add	sp, #88	; 0x58
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__smakebuf_r>:
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb0:	079d      	lsls	r5, r3, #30
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d507      	bpl.n	8006ec8 <__smakebuf_r+0x1c>
 8006eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	ab01      	add	r3, sp, #4
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f7ff ffc9 	bl	8006e62 <__swhatbuf_r>
 8006ed0:	9900      	ldr	r1, [sp, #0]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7fe f939 	bl	800514c <_malloc_r>
 8006eda:	b948      	cbnz	r0, 8006ef0 <__smakebuf_r+0x44>
 8006edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d4ef      	bmi.n	8006ec4 <__smakebuf_r+0x18>
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	e7e3      	b.n	8006eb8 <__smakebuf_r+0xc>
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <__smakebuf_r+0x7c>)
 8006ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	6020      	str	r0, [r4, #0]
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	6163      	str	r3, [r4, #20]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	6120      	str	r0, [r4, #16]
 8006f06:	b15b      	cbz	r3, 8006f20 <__smakebuf_r+0x74>
 8006f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 fe0b 	bl	8007b28 <_isatty_r>
 8006f12:	b128      	cbz	r0, 8006f20 <__smakebuf_r+0x74>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	89a0      	ldrh	r0, [r4, #12]
 8006f22:	4305      	orrs	r5, r0
 8006f24:	81a5      	strh	r5, [r4, #12]
 8006f26:	e7cd      	b.n	8006ec4 <__smakebuf_r+0x18>
 8006f28:	08006cb1 	.word	0x08006cb1

08006f2c <memcpy>:
 8006f2c:	440a      	add	r2, r1
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f34:	d100      	bne.n	8006f38 <memcpy+0xc>
 8006f36:	4770      	bx	lr
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f42:	4291      	cmp	r1, r2
 8006f44:	d1f9      	bne.n	8006f3a <memcpy+0xe>
 8006f46:	bd10      	pop	{r4, pc}

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f7ff bf88 	b.w	8006e5e <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20000a1c 	.word	0x20000a1c

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f7ff bf83 	b.w	8006e60 <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000a1c 	.word	0x20000a1c

08006f60 <_Balloc>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Balloc+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7fe f86a 	bl	8005044 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6260      	str	r0, [r4, #36]	; 0x24
 8006f74:	b920      	cbnz	r0, 8006f80 <_Balloc+0x20>
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <_Balloc+0x78>)
 8006f78:	4818      	ldr	r0, [pc, #96]	; (8006fdc <_Balloc+0x7c>)
 8006f7a:	2166      	movs	r1, #102	; 0x66
 8006f7c:	f000 fd82 	bl	8007a84 <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f8a:	68f3      	ldr	r3, [r6, #12]
 8006f8c:	b183      	cbz	r3, 8006fb0 <_Balloc+0x50>
 8006f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f96:	b9b8      	cbnz	r0, 8006fc8 <_Balloc+0x68>
 8006f98:	2101      	movs	r1, #1
 8006f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f9e:	1d72      	adds	r2, r6, #5
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fb60 	bl	8007668 <_calloc_r>
 8006fa8:	b160      	cbz	r0, 8006fc4 <_Balloc+0x64>
 8006faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fae:	e00e      	b.n	8006fce <_Balloc+0x6e>
 8006fb0:	2221      	movs	r2, #33	; 0x21
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fb57 	bl	8007668 <_calloc_r>
 8006fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fbc:	60f0      	str	r0, [r6, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <_Balloc+0x2e>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	6802      	ldr	r2, [r0, #0]
 8006fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd4:	e7f7      	b.n	8006fc6 <_Balloc+0x66>
 8006fd6:	bf00      	nop
 8006fd8:	08007d4d 	.word	0x08007d4d
 8006fdc:	08007e30 	.word	0x08007e30

08006fe0 <_Bfree>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	b976      	cbnz	r6, 8007008 <_Bfree+0x28>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f7fe f82a 	bl	8005044 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8006ff4:	b920      	cbnz	r0, 8007000 <_Bfree+0x20>
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <_Bfree+0x3c>)
 8006ff8:	4809      	ldr	r0, [pc, #36]	; (8007020 <_Bfree+0x40>)
 8006ffa:	218a      	movs	r1, #138	; 0x8a
 8006ffc:	f000 fd42 	bl	8007a84 <__assert_func>
 8007000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007004:	6006      	str	r6, [r0, #0]
 8007006:	60c6      	str	r6, [r0, #12]
 8007008:	b13c      	cbz	r4, 800701a <_Bfree+0x3a>
 800700a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800700c:	6862      	ldr	r2, [r4, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007014:	6021      	str	r1, [r4, #0]
 8007016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	08007d4d 	.word	0x08007d4d
 8007020:	08007e30 	.word	0x08007e30

08007024 <__multadd>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	690d      	ldr	r5, [r1, #16]
 800702a:	4607      	mov	r7, r0
 800702c:	460c      	mov	r4, r1
 800702e:	461e      	mov	r6, r3
 8007030:	f101 0c14 	add.w	ip, r1, #20
 8007034:	2000      	movs	r0, #0
 8007036:	f8dc 3000 	ldr.w	r3, [ip]
 800703a:	b299      	uxth	r1, r3
 800703c:	fb02 6101 	mla	r1, r2, r1, r6
 8007040:	0c1e      	lsrs	r6, r3, #16
 8007042:	0c0b      	lsrs	r3, r1, #16
 8007044:	fb02 3306 	mla	r3, r2, r6, r3
 8007048:	b289      	uxth	r1, r1
 800704a:	3001      	adds	r0, #1
 800704c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007050:	4285      	cmp	r5, r0
 8007052:	f84c 1b04 	str.w	r1, [ip], #4
 8007056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800705a:	dcec      	bgt.n	8007036 <__multadd+0x12>
 800705c:	b30e      	cbz	r6, 80070a2 <__multadd+0x7e>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	42ab      	cmp	r3, r5
 8007062:	dc19      	bgt.n	8007098 <__multadd+0x74>
 8007064:	6861      	ldr	r1, [r4, #4]
 8007066:	4638      	mov	r0, r7
 8007068:	3101      	adds	r1, #1
 800706a:	f7ff ff79 	bl	8006f60 <_Balloc>
 800706e:	4680      	mov	r8, r0
 8007070:	b928      	cbnz	r0, 800707e <__multadd+0x5a>
 8007072:	4602      	mov	r2, r0
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <__multadd+0x84>)
 8007076:	480d      	ldr	r0, [pc, #52]	; (80070ac <__multadd+0x88>)
 8007078:	21b5      	movs	r1, #181	; 0xb5
 800707a:	f000 fd03 	bl	8007a84 <__assert_func>
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	3202      	adds	r2, #2
 8007082:	f104 010c 	add.w	r1, r4, #12
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	300c      	adds	r0, #12
 800708a:	f7ff ff4f 	bl	8006f2c <memcpy>
 800708e:	4621      	mov	r1, r4
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa5 	bl	8006fe0 <_Bfree>
 8007096:	4644      	mov	r4, r8
 8007098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800709c:	3501      	adds	r5, #1
 800709e:	615e      	str	r6, [r3, #20]
 80070a0:	6125      	str	r5, [r4, #16]
 80070a2:	4620      	mov	r0, r4
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	08007dbf 	.word	0x08007dbf
 80070ac:	08007e30 	.word	0x08007e30

080070b0 <__hi0bits>:
 80070b0:	0c03      	lsrs	r3, r0, #16
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	b9d3      	cbnz	r3, 80070ec <__hi0bits+0x3c>
 80070b6:	0400      	lsls	r0, r0, #16
 80070b8:	2310      	movs	r3, #16
 80070ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070be:	bf04      	itt	eq
 80070c0:	0200      	lsleq	r0, r0, #8
 80070c2:	3308      	addeq	r3, #8
 80070c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070c8:	bf04      	itt	eq
 80070ca:	0100      	lsleq	r0, r0, #4
 80070cc:	3304      	addeq	r3, #4
 80070ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070d2:	bf04      	itt	eq
 80070d4:	0080      	lsleq	r0, r0, #2
 80070d6:	3302      	addeq	r3, #2
 80070d8:	2800      	cmp	r0, #0
 80070da:	db05      	blt.n	80070e8 <__hi0bits+0x38>
 80070dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070e0:	f103 0301 	add.w	r3, r3, #1
 80070e4:	bf08      	it	eq
 80070e6:	2320      	moveq	r3, #32
 80070e8:	4618      	mov	r0, r3
 80070ea:	4770      	bx	lr
 80070ec:	2300      	movs	r3, #0
 80070ee:	e7e4      	b.n	80070ba <__hi0bits+0xa>

080070f0 <__lo0bits>:
 80070f0:	6803      	ldr	r3, [r0, #0]
 80070f2:	f013 0207 	ands.w	r2, r3, #7
 80070f6:	4601      	mov	r1, r0
 80070f8:	d00b      	beq.n	8007112 <__lo0bits+0x22>
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d423      	bmi.n	8007146 <__lo0bits+0x56>
 80070fe:	0798      	lsls	r0, r3, #30
 8007100:	bf49      	itett	mi
 8007102:	085b      	lsrmi	r3, r3, #1
 8007104:	089b      	lsrpl	r3, r3, #2
 8007106:	2001      	movmi	r0, #1
 8007108:	600b      	strmi	r3, [r1, #0]
 800710a:	bf5c      	itt	pl
 800710c:	600b      	strpl	r3, [r1, #0]
 800710e:	2002      	movpl	r0, #2
 8007110:	4770      	bx	lr
 8007112:	b298      	uxth	r0, r3
 8007114:	b9a8      	cbnz	r0, 8007142 <__lo0bits+0x52>
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	2010      	movs	r0, #16
 800711a:	b2da      	uxtb	r2, r3
 800711c:	b90a      	cbnz	r2, 8007122 <__lo0bits+0x32>
 800711e:	3008      	adds	r0, #8
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	071a      	lsls	r2, r3, #28
 8007124:	bf04      	itt	eq
 8007126:	091b      	lsreq	r3, r3, #4
 8007128:	3004      	addeq	r0, #4
 800712a:	079a      	lsls	r2, r3, #30
 800712c:	bf04      	itt	eq
 800712e:	089b      	lsreq	r3, r3, #2
 8007130:	3002      	addeq	r0, #2
 8007132:	07da      	lsls	r2, r3, #31
 8007134:	d403      	bmi.n	800713e <__lo0bits+0x4e>
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	f100 0001 	add.w	r0, r0, #1
 800713c:	d005      	beq.n	800714a <__lo0bits+0x5a>
 800713e:	600b      	str	r3, [r1, #0]
 8007140:	4770      	bx	lr
 8007142:	4610      	mov	r0, r2
 8007144:	e7e9      	b.n	800711a <__lo0bits+0x2a>
 8007146:	2000      	movs	r0, #0
 8007148:	4770      	bx	lr
 800714a:	2020      	movs	r0, #32
 800714c:	4770      	bx	lr
	...

08007150 <__i2b>:
 8007150:	b510      	push	{r4, lr}
 8007152:	460c      	mov	r4, r1
 8007154:	2101      	movs	r1, #1
 8007156:	f7ff ff03 	bl	8006f60 <_Balloc>
 800715a:	4602      	mov	r2, r0
 800715c:	b928      	cbnz	r0, 800716a <__i2b+0x1a>
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <__i2b+0x24>)
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <__i2b+0x28>)
 8007162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007166:	f000 fc8d 	bl	8007a84 <__assert_func>
 800716a:	2301      	movs	r3, #1
 800716c:	6144      	str	r4, [r0, #20]
 800716e:	6103      	str	r3, [r0, #16]
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	08007dbf 	.word	0x08007dbf
 8007178:	08007e30 	.word	0x08007e30

0800717c <__multiply>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4691      	mov	r9, r2
 8007182:	690a      	ldr	r2, [r1, #16]
 8007184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	bfb8      	it	lt
 800718c:	460b      	movlt	r3, r1
 800718e:	460c      	mov	r4, r1
 8007190:	bfbc      	itt	lt
 8007192:	464c      	movlt	r4, r9
 8007194:	4699      	movlt	r9, r3
 8007196:	6927      	ldr	r7, [r4, #16]
 8007198:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800719c:	68a3      	ldr	r3, [r4, #8]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	eb07 060a 	add.w	r6, r7, sl
 80071a4:	42b3      	cmp	r3, r6
 80071a6:	b085      	sub	sp, #20
 80071a8:	bfb8      	it	lt
 80071aa:	3101      	addlt	r1, #1
 80071ac:	f7ff fed8 	bl	8006f60 <_Balloc>
 80071b0:	b930      	cbnz	r0, 80071c0 <__multiply+0x44>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b44      	ldr	r3, [pc, #272]	; (80072c8 <__multiply+0x14c>)
 80071b6:	4845      	ldr	r0, [pc, #276]	; (80072cc <__multiply+0x150>)
 80071b8:	f240 115d 	movw	r1, #349	; 0x15d
 80071bc:	f000 fc62 	bl	8007a84 <__assert_func>
 80071c0:	f100 0514 	add.w	r5, r0, #20
 80071c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071c8:	462b      	mov	r3, r5
 80071ca:	2200      	movs	r2, #0
 80071cc:	4543      	cmp	r3, r8
 80071ce:	d321      	bcc.n	8007214 <__multiply+0x98>
 80071d0:	f104 0314 	add.w	r3, r4, #20
 80071d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071d8:	f109 0314 	add.w	r3, r9, #20
 80071dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071e0:	9202      	str	r2, [sp, #8]
 80071e2:	1b3a      	subs	r2, r7, r4
 80071e4:	3a15      	subs	r2, #21
 80071e6:	f022 0203 	bic.w	r2, r2, #3
 80071ea:	3204      	adds	r2, #4
 80071ec:	f104 0115 	add.w	r1, r4, #21
 80071f0:	428f      	cmp	r7, r1
 80071f2:	bf38      	it	cc
 80071f4:	2204      	movcc	r2, #4
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9a02      	ldr	r2, [sp, #8]
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d80c      	bhi.n	800721a <__multiply+0x9e>
 8007200:	2e00      	cmp	r6, #0
 8007202:	dd03      	ble.n	800720c <__multiply+0x90>
 8007204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007208:	2b00      	cmp	r3, #0
 800720a:	d05a      	beq.n	80072c2 <__multiply+0x146>
 800720c:	6106      	str	r6, [r0, #16]
 800720e:	b005      	add	sp, #20
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	f843 2b04 	str.w	r2, [r3], #4
 8007218:	e7d8      	b.n	80071cc <__multiply+0x50>
 800721a:	f8b3 a000 	ldrh.w	sl, [r3]
 800721e:	f1ba 0f00 	cmp.w	sl, #0
 8007222:	d024      	beq.n	800726e <__multiply+0xf2>
 8007224:	f104 0e14 	add.w	lr, r4, #20
 8007228:	46a9      	mov	r9, r5
 800722a:	f04f 0c00 	mov.w	ip, #0
 800722e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007232:	f8d9 1000 	ldr.w	r1, [r9]
 8007236:	fa1f fb82 	uxth.w	fp, r2
 800723a:	b289      	uxth	r1, r1
 800723c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007240:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007244:	f8d9 2000 	ldr.w	r2, [r9]
 8007248:	4461      	add	r1, ip
 800724a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800724e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007256:	b289      	uxth	r1, r1
 8007258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800725c:	4577      	cmp	r7, lr
 800725e:	f849 1b04 	str.w	r1, [r9], #4
 8007262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007266:	d8e2      	bhi.n	800722e <__multiply+0xb2>
 8007268:	9a01      	ldr	r2, [sp, #4]
 800726a:	f845 c002 	str.w	ip, [r5, r2]
 800726e:	9a03      	ldr	r2, [sp, #12]
 8007270:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007274:	3304      	adds	r3, #4
 8007276:	f1b9 0f00 	cmp.w	r9, #0
 800727a:	d020      	beq.n	80072be <__multiply+0x142>
 800727c:	6829      	ldr	r1, [r5, #0]
 800727e:	f104 0c14 	add.w	ip, r4, #20
 8007282:	46ae      	mov	lr, r5
 8007284:	f04f 0a00 	mov.w	sl, #0
 8007288:	f8bc b000 	ldrh.w	fp, [ip]
 800728c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007290:	fb09 220b 	mla	r2, r9, fp, r2
 8007294:	4492      	add	sl, r2
 8007296:	b289      	uxth	r1, r1
 8007298:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800729c:	f84e 1b04 	str.w	r1, [lr], #4
 80072a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072a4:	f8be 1000 	ldrh.w	r1, [lr]
 80072a8:	0c12      	lsrs	r2, r2, #16
 80072aa:	fb09 1102 	mla	r1, r9, r2, r1
 80072ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072b2:	4567      	cmp	r7, ip
 80072b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072b8:	d8e6      	bhi.n	8007288 <__multiply+0x10c>
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	50a9      	str	r1, [r5, r2]
 80072be:	3504      	adds	r5, #4
 80072c0:	e79a      	b.n	80071f8 <__multiply+0x7c>
 80072c2:	3e01      	subs	r6, #1
 80072c4:	e79c      	b.n	8007200 <__multiply+0x84>
 80072c6:	bf00      	nop
 80072c8:	08007dbf 	.word	0x08007dbf
 80072cc:	08007e30 	.word	0x08007e30

080072d0 <__pow5mult>:
 80072d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d4:	4615      	mov	r5, r2
 80072d6:	f012 0203 	ands.w	r2, r2, #3
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	d007      	beq.n	80072f0 <__pow5mult+0x20>
 80072e0:	4c25      	ldr	r4, [pc, #148]	; (8007378 <__pow5mult+0xa8>)
 80072e2:	3a01      	subs	r2, #1
 80072e4:	2300      	movs	r3, #0
 80072e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ea:	f7ff fe9b 	bl	8007024 <__multadd>
 80072ee:	4607      	mov	r7, r0
 80072f0:	10ad      	asrs	r5, r5, #2
 80072f2:	d03d      	beq.n	8007370 <__pow5mult+0xa0>
 80072f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072f6:	b97c      	cbnz	r4, 8007318 <__pow5mult+0x48>
 80072f8:	2010      	movs	r0, #16
 80072fa:	f7fd fea3 	bl	8005044 <malloc>
 80072fe:	4602      	mov	r2, r0
 8007300:	6270      	str	r0, [r6, #36]	; 0x24
 8007302:	b928      	cbnz	r0, 8007310 <__pow5mult+0x40>
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <__pow5mult+0xac>)
 8007306:	481e      	ldr	r0, [pc, #120]	; (8007380 <__pow5mult+0xb0>)
 8007308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800730c:	f000 fbba 	bl	8007a84 <__assert_func>
 8007310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007314:	6004      	str	r4, [r0, #0]
 8007316:	60c4      	str	r4, [r0, #12]
 8007318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800731c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007320:	b94c      	cbnz	r4, 8007336 <__pow5mult+0x66>
 8007322:	f240 2171 	movw	r1, #625	; 0x271
 8007326:	4630      	mov	r0, r6
 8007328:	f7ff ff12 	bl	8007150 <__i2b>
 800732c:	2300      	movs	r3, #0
 800732e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007332:	4604      	mov	r4, r0
 8007334:	6003      	str	r3, [r0, #0]
 8007336:	f04f 0900 	mov.w	r9, #0
 800733a:	07eb      	lsls	r3, r5, #31
 800733c:	d50a      	bpl.n	8007354 <__pow5mult+0x84>
 800733e:	4639      	mov	r1, r7
 8007340:	4622      	mov	r2, r4
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff1a 	bl	800717c <__multiply>
 8007348:	4639      	mov	r1, r7
 800734a:	4680      	mov	r8, r0
 800734c:	4630      	mov	r0, r6
 800734e:	f7ff fe47 	bl	8006fe0 <_Bfree>
 8007352:	4647      	mov	r7, r8
 8007354:	106d      	asrs	r5, r5, #1
 8007356:	d00b      	beq.n	8007370 <__pow5mult+0xa0>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	b938      	cbnz	r0, 800736c <__pow5mult+0x9c>
 800735c:	4622      	mov	r2, r4
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff ff0b 	bl	800717c <__multiply>
 8007366:	6020      	str	r0, [r4, #0]
 8007368:	f8c0 9000 	str.w	r9, [r0]
 800736c:	4604      	mov	r4, r0
 800736e:	e7e4      	b.n	800733a <__pow5mult+0x6a>
 8007370:	4638      	mov	r0, r7
 8007372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007376:	bf00      	nop
 8007378:	08007f80 	.word	0x08007f80
 800737c:	08007d4d 	.word	0x08007d4d
 8007380:	08007e30 	.word	0x08007e30

08007384 <__lshift>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	460c      	mov	r4, r1
 800738a:	6849      	ldr	r1, [r1, #4]
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	4607      	mov	r7, r0
 8007396:	4691      	mov	r9, r2
 8007398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800739c:	f108 0601 	add.w	r6, r8, #1
 80073a0:	42b3      	cmp	r3, r6
 80073a2:	db0b      	blt.n	80073bc <__lshift+0x38>
 80073a4:	4638      	mov	r0, r7
 80073a6:	f7ff fddb 	bl	8006f60 <_Balloc>
 80073aa:	4605      	mov	r5, r0
 80073ac:	b948      	cbnz	r0, 80073c2 <__lshift+0x3e>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <__lshift+0xd8>)
 80073b2:	482b      	ldr	r0, [pc, #172]	; (8007460 <__lshift+0xdc>)
 80073b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073b8:	f000 fb64 	bl	8007a84 <__assert_func>
 80073bc:	3101      	adds	r1, #1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	e7ee      	b.n	80073a0 <__lshift+0x1c>
 80073c2:	2300      	movs	r3, #0
 80073c4:	f100 0114 	add.w	r1, r0, #20
 80073c8:	f100 0210 	add.w	r2, r0, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	4553      	cmp	r3, sl
 80073d0:	db37      	blt.n	8007442 <__lshift+0xbe>
 80073d2:	6920      	ldr	r0, [r4, #16]
 80073d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073d8:	f104 0314 	add.w	r3, r4, #20
 80073dc:	f019 091f 	ands.w	r9, r9, #31
 80073e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073e8:	d02f      	beq.n	800744a <__lshift+0xc6>
 80073ea:	f1c9 0e20 	rsb	lr, r9, #32
 80073ee:	468a      	mov	sl, r1
 80073f0:	f04f 0c00 	mov.w	ip, #0
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	fa02 f209 	lsl.w	r2, r2, r9
 80073fa:	ea42 020c 	orr.w	r2, r2, ip
 80073fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007402:	f853 2b04 	ldr.w	r2, [r3], #4
 8007406:	4298      	cmp	r0, r3
 8007408:	fa22 fc0e 	lsr.w	ip, r2, lr
 800740c:	d8f2      	bhi.n	80073f4 <__lshift+0x70>
 800740e:	1b03      	subs	r3, r0, r4
 8007410:	3b15      	subs	r3, #21
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	3304      	adds	r3, #4
 8007418:	f104 0215 	add.w	r2, r4, #21
 800741c:	4290      	cmp	r0, r2
 800741e:	bf38      	it	cc
 8007420:	2304      	movcc	r3, #4
 8007422:	f841 c003 	str.w	ip, [r1, r3]
 8007426:	f1bc 0f00 	cmp.w	ip, #0
 800742a:	d001      	beq.n	8007430 <__lshift+0xac>
 800742c:	f108 0602 	add.w	r6, r8, #2
 8007430:	3e01      	subs	r6, #1
 8007432:	4638      	mov	r0, r7
 8007434:	612e      	str	r6, [r5, #16]
 8007436:	4621      	mov	r1, r4
 8007438:	f7ff fdd2 	bl	8006fe0 <_Bfree>
 800743c:	4628      	mov	r0, r5
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	f842 0f04 	str.w	r0, [r2, #4]!
 8007446:	3301      	adds	r3, #1
 8007448:	e7c1      	b.n	80073ce <__lshift+0x4a>
 800744a:	3904      	subs	r1, #4
 800744c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007450:	f841 2f04 	str.w	r2, [r1, #4]!
 8007454:	4298      	cmp	r0, r3
 8007456:	d8f9      	bhi.n	800744c <__lshift+0xc8>
 8007458:	e7ea      	b.n	8007430 <__lshift+0xac>
 800745a:	bf00      	nop
 800745c:	08007dbf 	.word	0x08007dbf
 8007460:	08007e30 	.word	0x08007e30

08007464 <__mcmp>:
 8007464:	b530      	push	{r4, r5, lr}
 8007466:	6902      	ldr	r2, [r0, #16]
 8007468:	690c      	ldr	r4, [r1, #16]
 800746a:	1b12      	subs	r2, r2, r4
 800746c:	d10e      	bne.n	800748c <__mcmp+0x28>
 800746e:	f100 0314 	add.w	r3, r0, #20
 8007472:	3114      	adds	r1, #20
 8007474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800747c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007484:	42a5      	cmp	r5, r4
 8007486:	d003      	beq.n	8007490 <__mcmp+0x2c>
 8007488:	d305      	bcc.n	8007496 <__mcmp+0x32>
 800748a:	2201      	movs	r2, #1
 800748c:	4610      	mov	r0, r2
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	4283      	cmp	r3, r0
 8007492:	d3f3      	bcc.n	800747c <__mcmp+0x18>
 8007494:	e7fa      	b.n	800748c <__mcmp+0x28>
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	e7f7      	b.n	800748c <__mcmp+0x28>

0800749c <__mdiff>:
 800749c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	460c      	mov	r4, r1
 80074a2:	4606      	mov	r6, r0
 80074a4:	4611      	mov	r1, r2
 80074a6:	4620      	mov	r0, r4
 80074a8:	4690      	mov	r8, r2
 80074aa:	f7ff ffdb 	bl	8007464 <__mcmp>
 80074ae:	1e05      	subs	r5, r0, #0
 80074b0:	d110      	bne.n	80074d4 <__mdiff+0x38>
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff fd53 	bl	8006f60 <_Balloc>
 80074ba:	b930      	cbnz	r0, 80074ca <__mdiff+0x2e>
 80074bc:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <__mdiff+0x10c>)
 80074be:	4602      	mov	r2, r0
 80074c0:	f240 2132 	movw	r1, #562	; 0x232
 80074c4:	4839      	ldr	r0, [pc, #228]	; (80075ac <__mdiff+0x110>)
 80074c6:	f000 fadd 	bl	8007a84 <__assert_func>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	bfa4      	itt	ge
 80074d6:	4643      	movge	r3, r8
 80074d8:	46a0      	movge	r8, r4
 80074da:	4630      	mov	r0, r6
 80074dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074e0:	bfa6      	itte	ge
 80074e2:	461c      	movge	r4, r3
 80074e4:	2500      	movge	r5, #0
 80074e6:	2501      	movlt	r5, #1
 80074e8:	f7ff fd3a 	bl	8006f60 <_Balloc>
 80074ec:	b920      	cbnz	r0, 80074f8 <__mdiff+0x5c>
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <__mdiff+0x10c>)
 80074f0:	4602      	mov	r2, r0
 80074f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074f6:	e7e5      	b.n	80074c4 <__mdiff+0x28>
 80074f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074fc:	6926      	ldr	r6, [r4, #16]
 80074fe:	60c5      	str	r5, [r0, #12]
 8007500:	f104 0914 	add.w	r9, r4, #20
 8007504:	f108 0514 	add.w	r5, r8, #20
 8007508:	f100 0e14 	add.w	lr, r0, #20
 800750c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007514:	f108 0210 	add.w	r2, r8, #16
 8007518:	46f2      	mov	sl, lr
 800751a:	2100      	movs	r1, #0
 800751c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007524:	fa1f f883 	uxth.w	r8, r3
 8007528:	fa11 f18b 	uxtah	r1, r1, fp
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	eba1 0808 	sub.w	r8, r1, r8
 8007532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800753a:	fa1f f888 	uxth.w	r8, r8
 800753e:	1419      	asrs	r1, r3, #16
 8007540:	454e      	cmp	r6, r9
 8007542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007546:	f84a 3b04 	str.w	r3, [sl], #4
 800754a:	d8e7      	bhi.n	800751c <__mdiff+0x80>
 800754c:	1b33      	subs	r3, r6, r4
 800754e:	3b15      	subs	r3, #21
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	3304      	adds	r3, #4
 8007556:	3415      	adds	r4, #21
 8007558:	42a6      	cmp	r6, r4
 800755a:	bf38      	it	cc
 800755c:	2304      	movcc	r3, #4
 800755e:	441d      	add	r5, r3
 8007560:	4473      	add	r3, lr
 8007562:	469e      	mov	lr, r3
 8007564:	462e      	mov	r6, r5
 8007566:	4566      	cmp	r6, ip
 8007568:	d30e      	bcc.n	8007588 <__mdiff+0xec>
 800756a:	f10c 0203 	add.w	r2, ip, #3
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	f022 0203 	bic.w	r2, r2, #3
 8007574:	3d03      	subs	r5, #3
 8007576:	45ac      	cmp	ip, r5
 8007578:	bf38      	it	cc
 800757a:	2200      	movcc	r2, #0
 800757c:	441a      	add	r2, r3
 800757e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007582:	b17b      	cbz	r3, 80075a4 <__mdiff+0x108>
 8007584:	6107      	str	r7, [r0, #16]
 8007586:	e7a3      	b.n	80074d0 <__mdiff+0x34>
 8007588:	f856 8b04 	ldr.w	r8, [r6], #4
 800758c:	fa11 f288 	uxtah	r2, r1, r8
 8007590:	1414      	asrs	r4, r2, #16
 8007592:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007596:	b292      	uxth	r2, r2
 8007598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800759c:	f84e 2b04 	str.w	r2, [lr], #4
 80075a0:	1421      	asrs	r1, r4, #16
 80075a2:	e7e0      	b.n	8007566 <__mdiff+0xca>
 80075a4:	3f01      	subs	r7, #1
 80075a6:	e7ea      	b.n	800757e <__mdiff+0xe2>
 80075a8:	08007dbf 	.word	0x08007dbf
 80075ac:	08007e30 	.word	0x08007e30

080075b0 <__d2b>:
 80075b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4689      	mov	r9, r1
 80075b6:	2101      	movs	r1, #1
 80075b8:	ec57 6b10 	vmov	r6, r7, d0
 80075bc:	4690      	mov	r8, r2
 80075be:	f7ff fccf 	bl	8006f60 <_Balloc>
 80075c2:	4604      	mov	r4, r0
 80075c4:	b930      	cbnz	r0, 80075d4 <__d2b+0x24>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <__d2b+0xb0>)
 80075ca:	4826      	ldr	r0, [pc, #152]	; (8007664 <__d2b+0xb4>)
 80075cc:	f240 310a 	movw	r1, #778	; 0x30a
 80075d0:	f000 fa58 	bl	8007a84 <__assert_func>
 80075d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075dc:	bb35      	cbnz	r5, 800762c <__d2b+0x7c>
 80075de:	2e00      	cmp	r6, #0
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	d028      	beq.n	8007636 <__d2b+0x86>
 80075e4:	4668      	mov	r0, sp
 80075e6:	9600      	str	r6, [sp, #0]
 80075e8:	f7ff fd82 	bl	80070f0 <__lo0bits>
 80075ec:	9900      	ldr	r1, [sp, #0]
 80075ee:	b300      	cbz	r0, 8007632 <__d2b+0x82>
 80075f0:	9a01      	ldr	r2, [sp, #4]
 80075f2:	f1c0 0320 	rsb	r3, r0, #32
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	430b      	orrs	r3, r1
 80075fc:	40c2      	lsrs	r2, r0
 80075fe:	6163      	str	r3, [r4, #20]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	61a3      	str	r3, [r4, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2202      	movne	r2, #2
 800760c:	2201      	moveq	r2, #1
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	b1d5      	cbz	r5, 8007648 <__d2b+0x98>
 8007612:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007616:	4405      	add	r5, r0
 8007618:	f8c9 5000 	str.w	r5, [r9]
 800761c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007620:	f8c8 0000 	str.w	r0, [r8]
 8007624:	4620      	mov	r0, r4
 8007626:	b003      	add	sp, #12
 8007628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007630:	e7d5      	b.n	80075de <__d2b+0x2e>
 8007632:	6161      	str	r1, [r4, #20]
 8007634:	e7e5      	b.n	8007602 <__d2b+0x52>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd5a 	bl	80070f0 <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	2201      	movs	r2, #1
 8007642:	6122      	str	r2, [r4, #16]
 8007644:	3020      	adds	r0, #32
 8007646:	e7e3      	b.n	8007610 <__d2b+0x60>
 8007648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800764c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007650:	f8c9 0000 	str.w	r0, [r9]
 8007654:	6918      	ldr	r0, [r3, #16]
 8007656:	f7ff fd2b 	bl	80070b0 <__hi0bits>
 800765a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800765e:	e7df      	b.n	8007620 <__d2b+0x70>
 8007660:	08007dbf 	.word	0x08007dbf
 8007664:	08007e30 	.word	0x08007e30

08007668 <_calloc_r>:
 8007668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800766a:	fba1 2402 	umull	r2, r4, r1, r2
 800766e:	b94c      	cbnz	r4, 8007684 <_calloc_r+0x1c>
 8007670:	4611      	mov	r1, r2
 8007672:	9201      	str	r2, [sp, #4]
 8007674:	f7fd fd6a 	bl	800514c <_malloc_r>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	4605      	mov	r5, r0
 800767c:	b930      	cbnz	r0, 800768c <_calloc_r+0x24>
 800767e:	4628      	mov	r0, r5
 8007680:	b003      	add	sp, #12
 8007682:	bd30      	pop	{r4, r5, pc}
 8007684:	220c      	movs	r2, #12
 8007686:	6002      	str	r2, [r0, #0]
 8007688:	2500      	movs	r5, #0
 800768a:	e7f8      	b.n	800767e <_calloc_r+0x16>
 800768c:	4621      	mov	r1, r4
 800768e:	f7fd fce9 	bl	8005064 <memset>
 8007692:	e7f4      	b.n	800767e <_calloc_r+0x16>

08007694 <__sfputc_r>:
 8007694:	6893      	ldr	r3, [r2, #8]
 8007696:	3b01      	subs	r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	b410      	push	{r4}
 800769c:	6093      	str	r3, [r2, #8]
 800769e:	da08      	bge.n	80076b2 <__sfputc_r+0x1e>
 80076a0:	6994      	ldr	r4, [r2, #24]
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	db01      	blt.n	80076aa <__sfputc_r+0x16>
 80076a6:	290a      	cmp	r1, #10
 80076a8:	d103      	bne.n	80076b2 <__sfputc_r+0x1e>
 80076aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ae:	f7fe badf 	b.w	8005c70 <__swbuf_r>
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	1c58      	adds	r0, r3, #1
 80076b6:	6010      	str	r0, [r2, #0]
 80076b8:	7019      	strb	r1, [r3, #0]
 80076ba:	4608      	mov	r0, r1
 80076bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <__sfputs_r>:
 80076c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	4614      	mov	r4, r2
 80076ca:	18d5      	adds	r5, r2, r3
 80076cc:	42ac      	cmp	r4, r5
 80076ce:	d101      	bne.n	80076d4 <__sfputs_r+0x12>
 80076d0:	2000      	movs	r0, #0
 80076d2:	e007      	b.n	80076e4 <__sfputs_r+0x22>
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	463a      	mov	r2, r7
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ffda 	bl	8007694 <__sfputc_r>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d1f3      	bne.n	80076cc <__sfputs_r+0xa>
 80076e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076e8 <_vfiprintf_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	460d      	mov	r5, r1
 80076ee:	b09d      	sub	sp, #116	; 0x74
 80076f0:	4614      	mov	r4, r2
 80076f2:	4698      	mov	r8, r3
 80076f4:	4606      	mov	r6, r0
 80076f6:	b118      	cbz	r0, 8007700 <_vfiprintf_r+0x18>
 80076f8:	6983      	ldr	r3, [r0, #24]
 80076fa:	b90b      	cbnz	r3, 8007700 <_vfiprintf_r+0x18>
 80076fc:	f7ff fb0c 	bl	8006d18 <__sinit>
 8007700:	4b89      	ldr	r3, [pc, #548]	; (8007928 <_vfiprintf_r+0x240>)
 8007702:	429d      	cmp	r5, r3
 8007704:	d11b      	bne.n	800773e <_vfiprintf_r+0x56>
 8007706:	6875      	ldr	r5, [r6, #4]
 8007708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	d405      	bmi.n	800771a <_vfiprintf_r+0x32>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	059a      	lsls	r2, r3, #22
 8007712:	d402      	bmi.n	800771a <_vfiprintf_r+0x32>
 8007714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007716:	f7ff fba2 	bl	8006e5e <__retarget_lock_acquire_recursive>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	071b      	lsls	r3, r3, #28
 800771e:	d501      	bpl.n	8007724 <_vfiprintf_r+0x3c>
 8007720:	692b      	ldr	r3, [r5, #16]
 8007722:	b9eb      	cbnz	r3, 8007760 <_vfiprintf_r+0x78>
 8007724:	4629      	mov	r1, r5
 8007726:	4630      	mov	r0, r6
 8007728:	f7fe faf4 	bl	8005d14 <__swsetup_r>
 800772c:	b1c0      	cbz	r0, 8007760 <_vfiprintf_r+0x78>
 800772e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007730:	07dc      	lsls	r4, r3, #31
 8007732:	d50e      	bpl.n	8007752 <_vfiprintf_r+0x6a>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b01d      	add	sp, #116	; 0x74
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	4b7b      	ldr	r3, [pc, #492]	; (800792c <_vfiprintf_r+0x244>)
 8007740:	429d      	cmp	r5, r3
 8007742:	d101      	bne.n	8007748 <_vfiprintf_r+0x60>
 8007744:	68b5      	ldr	r5, [r6, #8]
 8007746:	e7df      	b.n	8007708 <_vfiprintf_r+0x20>
 8007748:	4b79      	ldr	r3, [pc, #484]	; (8007930 <_vfiprintf_r+0x248>)
 800774a:	429d      	cmp	r5, r3
 800774c:	bf08      	it	eq
 800774e:	68f5      	ldreq	r5, [r6, #12]
 8007750:	e7da      	b.n	8007708 <_vfiprintf_r+0x20>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	0598      	lsls	r0, r3, #22
 8007756:	d4ed      	bmi.n	8007734 <_vfiprintf_r+0x4c>
 8007758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775a:	f7ff fb81 	bl	8006e60 <__retarget_lock_release_recursive>
 800775e:	e7e9      	b.n	8007734 <_vfiprintf_r+0x4c>
 8007760:	2300      	movs	r3, #0
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
 8007764:	2320      	movs	r3, #32
 8007766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776a:	f8cd 800c 	str.w	r8, [sp, #12]
 800776e:	2330      	movs	r3, #48	; 0x30
 8007770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007934 <_vfiprintf_r+0x24c>
 8007774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007778:	f04f 0901 	mov.w	r9, #1
 800777c:	4623      	mov	r3, r4
 800777e:	469a      	mov	sl, r3
 8007780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007784:	b10a      	cbz	r2, 800778a <_vfiprintf_r+0xa2>
 8007786:	2a25      	cmp	r2, #37	; 0x25
 8007788:	d1f9      	bne.n	800777e <_vfiprintf_r+0x96>
 800778a:	ebba 0b04 	subs.w	fp, sl, r4
 800778e:	d00b      	beq.n	80077a8 <_vfiprintf_r+0xc0>
 8007790:	465b      	mov	r3, fp
 8007792:	4622      	mov	r2, r4
 8007794:	4629      	mov	r1, r5
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff ff93 	bl	80076c2 <__sfputs_r>
 800779c:	3001      	adds	r0, #1
 800779e:	f000 80aa 	beq.w	80078f6 <_vfiprintf_r+0x20e>
 80077a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a4:	445a      	add	r2, fp
 80077a6:	9209      	str	r2, [sp, #36]	; 0x24
 80077a8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a2 	beq.w	80078f6 <_vfiprintf_r+0x20e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295
 80077b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077bc:	f10a 0a01 	add.w	sl, sl, #1
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	9307      	str	r3, [sp, #28]
 80077c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077c8:	931a      	str	r3, [sp, #104]	; 0x68
 80077ca:	4654      	mov	r4, sl
 80077cc:	2205      	movs	r2, #5
 80077ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d2:	4858      	ldr	r0, [pc, #352]	; (8007934 <_vfiprintf_r+0x24c>)
 80077d4:	f7f8 fd24 	bl	8000220 <memchr>
 80077d8:	9a04      	ldr	r2, [sp, #16]
 80077da:	b9d8      	cbnz	r0, 8007814 <_vfiprintf_r+0x12c>
 80077dc:	06d1      	lsls	r1, r2, #27
 80077de:	bf44      	itt	mi
 80077e0:	2320      	movmi	r3, #32
 80077e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e6:	0713      	lsls	r3, r2, #28
 80077e8:	bf44      	itt	mi
 80077ea:	232b      	movmi	r3, #43	; 0x2b
 80077ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f0:	f89a 3000 	ldrb.w	r3, [sl]
 80077f4:	2b2a      	cmp	r3, #42	; 0x2a
 80077f6:	d015      	beq.n	8007824 <_vfiprintf_r+0x13c>
 80077f8:	9a07      	ldr	r2, [sp, #28]
 80077fa:	4654      	mov	r4, sl
 80077fc:	2000      	movs	r0, #0
 80077fe:	f04f 0c0a 	mov.w	ip, #10
 8007802:	4621      	mov	r1, r4
 8007804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007808:	3b30      	subs	r3, #48	; 0x30
 800780a:	2b09      	cmp	r3, #9
 800780c:	d94e      	bls.n	80078ac <_vfiprintf_r+0x1c4>
 800780e:	b1b0      	cbz	r0, 800783e <_vfiprintf_r+0x156>
 8007810:	9207      	str	r2, [sp, #28]
 8007812:	e014      	b.n	800783e <_vfiprintf_r+0x156>
 8007814:	eba0 0308 	sub.w	r3, r0, r8
 8007818:	fa09 f303 	lsl.w	r3, r9, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	9304      	str	r3, [sp, #16]
 8007820:	46a2      	mov	sl, r4
 8007822:	e7d2      	b.n	80077ca <_vfiprintf_r+0xe2>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	1d19      	adds	r1, r3, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	9103      	str	r1, [sp, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	bfbb      	ittet	lt
 8007830:	425b      	neglt	r3, r3
 8007832:	f042 0202 	orrlt.w	r2, r2, #2
 8007836:	9307      	strge	r3, [sp, #28]
 8007838:	9307      	strlt	r3, [sp, #28]
 800783a:	bfb8      	it	lt
 800783c:	9204      	strlt	r2, [sp, #16]
 800783e:	7823      	ldrb	r3, [r4, #0]
 8007840:	2b2e      	cmp	r3, #46	; 0x2e
 8007842:	d10c      	bne.n	800785e <_vfiprintf_r+0x176>
 8007844:	7863      	ldrb	r3, [r4, #1]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d135      	bne.n	80078b6 <_vfiprintf_r+0x1ce>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	1d1a      	adds	r2, r3, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	9203      	str	r2, [sp, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfb8      	it	lt
 8007856:	f04f 33ff 	movlt.w	r3, #4294967295
 800785a:	3402      	adds	r4, #2
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007944 <_vfiprintf_r+0x25c>
 8007862:	7821      	ldrb	r1, [r4, #0]
 8007864:	2203      	movs	r2, #3
 8007866:	4650      	mov	r0, sl
 8007868:	f7f8 fcda 	bl	8000220 <memchr>
 800786c:	b140      	cbz	r0, 8007880 <_vfiprintf_r+0x198>
 800786e:	2340      	movs	r3, #64	; 0x40
 8007870:	eba0 000a 	sub.w	r0, r0, sl
 8007874:	fa03 f000 	lsl.w	r0, r3, r0
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	4303      	orrs	r3, r0
 800787c:	3401      	adds	r4, #1
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007884:	482c      	ldr	r0, [pc, #176]	; (8007938 <_vfiprintf_r+0x250>)
 8007886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800788a:	2206      	movs	r2, #6
 800788c:	f7f8 fcc8 	bl	8000220 <memchr>
 8007890:	2800      	cmp	r0, #0
 8007892:	d03f      	beq.n	8007914 <_vfiprintf_r+0x22c>
 8007894:	4b29      	ldr	r3, [pc, #164]	; (800793c <_vfiprintf_r+0x254>)
 8007896:	bb1b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x1f8>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	3307      	adds	r3, #7
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	443b      	add	r3, r7
 80078a8:	9309      	str	r3, [sp, #36]	; 0x24
 80078aa:	e767      	b.n	800777c <_vfiprintf_r+0x94>
 80078ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b0:	460c      	mov	r4, r1
 80078b2:	2001      	movs	r0, #1
 80078b4:	e7a5      	b.n	8007802 <_vfiprintf_r+0x11a>
 80078b6:	2300      	movs	r3, #0
 80078b8:	3401      	adds	r4, #1
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	4619      	mov	r1, r3
 80078be:	f04f 0c0a 	mov.w	ip, #10
 80078c2:	4620      	mov	r0, r4
 80078c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c8:	3a30      	subs	r2, #48	; 0x30
 80078ca:	2a09      	cmp	r2, #9
 80078cc:	d903      	bls.n	80078d6 <_vfiprintf_r+0x1ee>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c5      	beq.n	800785e <_vfiprintf_r+0x176>
 80078d2:	9105      	str	r1, [sp, #20]
 80078d4:	e7c3      	b.n	800785e <_vfiprintf_r+0x176>
 80078d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078da:	4604      	mov	r4, r0
 80078dc:	2301      	movs	r3, #1
 80078de:	e7f0      	b.n	80078c2 <_vfiprintf_r+0x1da>
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	462a      	mov	r2, r5
 80078e6:	4b16      	ldr	r3, [pc, #88]	; (8007940 <_vfiprintf_r+0x258>)
 80078e8:	a904      	add	r1, sp, #16
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7fd fd42 	bl	8005374 <_printf_float>
 80078f0:	4607      	mov	r7, r0
 80078f2:	1c78      	adds	r0, r7, #1
 80078f4:	d1d6      	bne.n	80078a4 <_vfiprintf_r+0x1bc>
 80078f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f8:	07d9      	lsls	r1, r3, #31
 80078fa:	d405      	bmi.n	8007908 <_vfiprintf_r+0x220>
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	059a      	lsls	r2, r3, #22
 8007900:	d402      	bmi.n	8007908 <_vfiprintf_r+0x220>
 8007902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007904:	f7ff faac 	bl	8006e60 <__retarget_lock_release_recursive>
 8007908:	89ab      	ldrh	r3, [r5, #12]
 800790a:	065b      	lsls	r3, r3, #25
 800790c:	f53f af12 	bmi.w	8007734 <_vfiprintf_r+0x4c>
 8007910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007912:	e711      	b.n	8007738 <_vfiprintf_r+0x50>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	462a      	mov	r2, r5
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <_vfiprintf_r+0x258>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	4630      	mov	r0, r6
 8007920:	f7fd ffcc 	bl	80058bc <_printf_i>
 8007924:	e7e4      	b.n	80078f0 <_vfiprintf_r+0x208>
 8007926:	bf00      	nop
 8007928:	08007df0 	.word	0x08007df0
 800792c:	08007e10 	.word	0x08007e10
 8007930:	08007dd0 	.word	0x08007dd0
 8007934:	08007f8c 	.word	0x08007f8c
 8007938:	08007f96 	.word	0x08007f96
 800793c:	08005375 	.word	0x08005375
 8007940:	080076c3 	.word	0x080076c3
 8007944:	08007f92 	.word	0x08007f92

08007948 <_putc_r>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	460d      	mov	r5, r1
 800794c:	4614      	mov	r4, r2
 800794e:	4606      	mov	r6, r0
 8007950:	b118      	cbz	r0, 800795a <_putc_r+0x12>
 8007952:	6983      	ldr	r3, [r0, #24]
 8007954:	b90b      	cbnz	r3, 800795a <_putc_r+0x12>
 8007956:	f7ff f9df 	bl	8006d18 <__sinit>
 800795a:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <_putc_r+0x84>)
 800795c:	429c      	cmp	r4, r3
 800795e:	d124      	bne.n	80079aa <_putc_r+0x62>
 8007960:	6874      	ldr	r4, [r6, #4]
 8007962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007964:	07d8      	lsls	r0, r3, #31
 8007966:	d405      	bmi.n	8007974 <_putc_r+0x2c>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	0599      	lsls	r1, r3, #22
 800796c:	d402      	bmi.n	8007974 <_putc_r+0x2c>
 800796e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007970:	f7ff fa75 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	3b01      	subs	r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	60a3      	str	r3, [r4, #8]
 800797c:	da05      	bge.n	800798a <_putc_r+0x42>
 800797e:	69a2      	ldr	r2, [r4, #24]
 8007980:	4293      	cmp	r3, r2
 8007982:	db1c      	blt.n	80079be <_putc_r+0x76>
 8007984:	b2eb      	uxtb	r3, r5
 8007986:	2b0a      	cmp	r3, #10
 8007988:	d019      	beq.n	80079be <_putc_r+0x76>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	6022      	str	r2, [r4, #0]
 8007990:	701d      	strb	r5, [r3, #0]
 8007992:	b2ed      	uxtb	r5, r5
 8007994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007996:	07da      	lsls	r2, r3, #31
 8007998:	d405      	bmi.n	80079a6 <_putc_r+0x5e>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	059b      	lsls	r3, r3, #22
 800799e:	d402      	bmi.n	80079a6 <_putc_r+0x5e>
 80079a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a2:	f7ff fa5d 	bl	8006e60 <__retarget_lock_release_recursive>
 80079a6:	4628      	mov	r0, r5
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <_putc_r+0x88>)
 80079ac:	429c      	cmp	r4, r3
 80079ae:	d101      	bne.n	80079b4 <_putc_r+0x6c>
 80079b0:	68b4      	ldr	r4, [r6, #8]
 80079b2:	e7d6      	b.n	8007962 <_putc_r+0x1a>
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <_putc_r+0x8c>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	bf08      	it	eq
 80079ba:	68f4      	ldreq	r4, [r6, #12]
 80079bc:	e7d1      	b.n	8007962 <_putc_r+0x1a>
 80079be:	4629      	mov	r1, r5
 80079c0:	4622      	mov	r2, r4
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7fe f954 	bl	8005c70 <__swbuf_r>
 80079c8:	4605      	mov	r5, r0
 80079ca:	e7e3      	b.n	8007994 <_putc_r+0x4c>
 80079cc:	08007df0 	.word	0x08007df0
 80079d0:	08007e10 	.word	0x08007e10
 80079d4:	08007dd0 	.word	0x08007dd0

080079d8 <__sread>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	460c      	mov	r4, r1
 80079dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e0:	f000 f8d6 	bl	8007b90 <_read_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	bfab      	itete	ge
 80079e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079ea:	89a3      	ldrhlt	r3, [r4, #12]
 80079ec:	181b      	addge	r3, r3, r0
 80079ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079f2:	bfac      	ite	ge
 80079f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f6:	81a3      	strhlt	r3, [r4, #12]
 80079f8:	bd10      	pop	{r4, pc}

080079fa <__swrite>:
 80079fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	461f      	mov	r7, r3
 8007a00:	898b      	ldrh	r3, [r1, #12]
 8007a02:	05db      	lsls	r3, r3, #23
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4616      	mov	r6, r2
 8007a0a:	d505      	bpl.n	8007a18 <__swrite+0x1e>
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	2302      	movs	r3, #2
 8007a12:	2200      	movs	r2, #0
 8007a14:	f000 f898 	bl	8007b48 <_lseek_r>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	4632      	mov	r2, r6
 8007a26:	463b      	mov	r3, r7
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	f000 b817 	b.w	8007a60 <_write_r>

08007a32 <__sseek>:
 8007a32:	b510      	push	{r4, lr}
 8007a34:	460c      	mov	r4, r1
 8007a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3a:	f000 f885 	bl	8007b48 <_lseek_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	bf15      	itete	ne
 8007a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4e:	81a3      	strheq	r3, [r4, #12]
 8007a50:	bf18      	it	ne
 8007a52:	81a3      	strhne	r3, [r4, #12]
 8007a54:	bd10      	pop	{r4, pc}

08007a56 <__sclose>:
 8007a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5a:	f000 b831 	b.w	8007ac0 <_close_r>
	...

08007a60 <_write_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	; (8007a80 <_write_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7f9 fc98 	bl	80013a4 <_write>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_write_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_write_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	20000a20 	.word	0x20000a20

08007a84 <__assert_func>:
 8007a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a86:	4614      	mov	r4, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <__assert_func+0x2c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4605      	mov	r5, r0
 8007a90:	68d8      	ldr	r0, [r3, #12]
 8007a92:	b14c      	cbz	r4, 8007aa8 <__assert_func+0x24>
 8007a94:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <__assert_func+0x30>)
 8007a96:	9100      	str	r1, [sp, #0]
 8007a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a9c:	4906      	ldr	r1, [pc, #24]	; (8007ab8 <__assert_func+0x34>)
 8007a9e:	462b      	mov	r3, r5
 8007aa0:	f000 f81e 	bl	8007ae0 <fiprintf>
 8007aa4:	f000 f893 	bl	8007bce <abort>
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <__assert_func+0x38>)
 8007aaa:	461c      	mov	r4, r3
 8007aac:	e7f3      	b.n	8007a96 <__assert_func+0x12>
 8007aae:	bf00      	nop
 8007ab0:	2000000c 	.word	0x2000000c
 8007ab4:	08007f9d 	.word	0x08007f9d
 8007ab8:	08007faa 	.word	0x08007faa
 8007abc:	08007fd8 	.word	0x08007fd8

08007ac0 <_close_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d06      	ldr	r5, [pc, #24]	; (8007adc <_close_r+0x1c>)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	f7f9 ff0b 	bl	80018e6 <_close>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_close_r+0x1a>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_close_r+0x1a>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20000a20 	.word	0x20000a20

08007ae0 <fiprintf>:
 8007ae0:	b40e      	push	{r1, r2, r3}
 8007ae2:	b503      	push	{r0, r1, lr}
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <fiprintf+0x20>)
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	f7ff fdf9 	bl	80076e8 <_vfiprintf_r>
 8007af6:	b002      	add	sp, #8
 8007af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007afc:	b003      	add	sp, #12
 8007afe:	4770      	bx	lr
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <_fstat_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d07      	ldr	r5, [pc, #28]	; (8007b24 <_fstat_r+0x20>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	f7f9 fef4 	bl	80018fe <_fstat>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d102      	bne.n	8007b20 <_fstat_r+0x1c>
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	b103      	cbz	r3, 8007b20 <_fstat_r+0x1c>
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	20000a20 	.word	0x20000a20

08007b28 <_isatty_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d06      	ldr	r5, [pc, #24]	; (8007b44 <_isatty_r+0x1c>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7f9 fef3 	bl	800191e <_isatty>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_isatty_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_isatty_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20000a20 	.word	0x20000a20

08007b48 <_lseek_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d07      	ldr	r5, [pc, #28]	; (8007b68 <_lseek_r+0x20>)
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4611      	mov	r1, r2
 8007b52:	2200      	movs	r2, #0
 8007b54:	602a      	str	r2, [r5, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f7f9 feec 	bl	8001934 <_lseek>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_lseek_r+0x1e>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_lseek_r+0x1e>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000a20 	.word	0x20000a20

08007b6c <__ascii_mbtowc>:
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	b901      	cbnz	r1, 8007b72 <__ascii_mbtowc+0x6>
 8007b70:	a901      	add	r1, sp, #4
 8007b72:	b142      	cbz	r2, 8007b86 <__ascii_mbtowc+0x1a>
 8007b74:	b14b      	cbz	r3, 8007b8a <__ascii_mbtowc+0x1e>
 8007b76:	7813      	ldrb	r3, [r2, #0]
 8007b78:	600b      	str	r3, [r1, #0]
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	1e10      	subs	r0, r2, #0
 8007b7e:	bf18      	it	ne
 8007b80:	2001      	movne	r0, #1
 8007b82:	b002      	add	sp, #8
 8007b84:	4770      	bx	lr
 8007b86:	4610      	mov	r0, r2
 8007b88:	e7fb      	b.n	8007b82 <__ascii_mbtowc+0x16>
 8007b8a:	f06f 0001 	mvn.w	r0, #1
 8007b8e:	e7f8      	b.n	8007b82 <__ascii_mbtowc+0x16>

08007b90 <_read_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_read_r+0x20>)
 8007b94:	4604      	mov	r4, r0
 8007b96:	4608      	mov	r0, r1
 8007b98:	4611      	mov	r1, r2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	602a      	str	r2, [r5, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f7f9 fe84 	bl	80018ac <_read>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_read_r+0x1e>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_read_r+0x1e>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000a20 	.word	0x20000a20

08007bb4 <__ascii_wctomb>:
 8007bb4:	b149      	cbz	r1, 8007bca <__ascii_wctomb+0x16>
 8007bb6:	2aff      	cmp	r2, #255	; 0xff
 8007bb8:	bf85      	ittet	hi
 8007bba:	238a      	movhi	r3, #138	; 0x8a
 8007bbc:	6003      	strhi	r3, [r0, #0]
 8007bbe:	700a      	strbls	r2, [r1, #0]
 8007bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bc4:	bf98      	it	ls
 8007bc6:	2001      	movls	r0, #1
 8007bc8:	4770      	bx	lr
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4770      	bx	lr

08007bce <abort>:
 8007bce:	b508      	push	{r3, lr}
 8007bd0:	2006      	movs	r0, #6
 8007bd2:	f000 f82b 	bl	8007c2c <raise>
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	f7f9 fe5e 	bl	8001898 <_exit>

08007bdc <_raise_r>:
 8007bdc:	291f      	cmp	r1, #31
 8007bde:	b538      	push	{r3, r4, r5, lr}
 8007be0:	4604      	mov	r4, r0
 8007be2:	460d      	mov	r5, r1
 8007be4:	d904      	bls.n	8007bf0 <_raise_r+0x14>
 8007be6:	2316      	movs	r3, #22
 8007be8:	6003      	str	r3, [r0, #0]
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bf2:	b112      	cbz	r2, 8007bfa <_raise_r+0x1e>
 8007bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bf8:	b94b      	cbnz	r3, 8007c0e <_raise_r+0x32>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f830 	bl	8007c60 <_getpid_r>
 8007c00:	462a      	mov	r2, r5
 8007c02:	4601      	mov	r1, r0
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0a:	f000 b817 	b.w	8007c3c <_kill_r>
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d00a      	beq.n	8007c28 <_raise_r+0x4c>
 8007c12:	1c59      	adds	r1, r3, #1
 8007c14:	d103      	bne.n	8007c1e <_raise_r+0x42>
 8007c16:	2316      	movs	r3, #22
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	e7e7      	b.n	8007bee <_raise_r+0x12>
 8007c1e:	2400      	movs	r4, #0
 8007c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c24:	4628      	mov	r0, r5
 8007c26:	4798      	blx	r3
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7e0      	b.n	8007bee <_raise_r+0x12>

08007c2c <raise>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <raise+0xc>)
 8007c2e:	4601      	mov	r1, r0
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f7ff bfd3 	b.w	8007bdc <_raise_r>
 8007c36:	bf00      	nop
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <_kill_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	; (8007c5c <_kill_r+0x20>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	f7f9 fe15 	bl	8001878 <_kill>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d102      	bne.n	8007c58 <_kill_r+0x1c>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b103      	cbz	r3, 8007c58 <_kill_r+0x1c>
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000a20 	.word	0x20000a20

08007c60 <_getpid_r>:
 8007c60:	f7f9 be02 	b.w	8001868 <_getpid>

08007c64 <_init>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr

08007c70 <_fini>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr
