
CPP_Blinky_Delay_not_Blocking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a4  080043a4  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043ac  080043ac  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080043c0  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004460  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006ec  2000014c  08004500  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000838  08004500  00020838  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012d73  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002416  00000000  00000000  00032eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000cb0  00000000  00000000  000360a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029182  00000000  00000000  00036d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000113b5  00000000  00000000  0005fed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3a01  00000000  00000000  00071287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00164c88  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000038b0  00000000  00000000  00164cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004374 	.word	0x08004374

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08004374 	.word	0x08004374

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fcaa 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f80e 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f972 	bl	8000800 <MX_GPIO_Init>
  MX_ETH_Init();
 800051c:	f000 f8c4 	bl	80006a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f910 	bl	8000744 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f93e 	bl	80007a4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 8000528:	f000 f86c 	bl	8000604 <MX_ADC3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 800052c:	f000 fc78 	bl	8000e20 <cpp_main>
 8000530:	e7fc      	b.n	800052c <main+0x20>
	...

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 ff0e 	bl	8004364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000558:	f001 fed0 	bl	80022fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <SystemClock_Config+0xc8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <SystemClock_Config+0xcc>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a8:	2348      	movs	r3, #72	; 0x48
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b0:	2303      	movs	r3, #3
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 feaf 	bl	800231c <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f9ca 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2102      	movs	r1, #2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f93d 	bl	8002864 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 f9b4 	bl	800095c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC3_Init+0x98>)
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_ADC3_Init+0x9c>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC3_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_ADC3_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC3_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ADC3_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC3_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_ADC3_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_ADC3_Init+0x98>)
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_ADC3_Init+0xa0>)
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_ADC3_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_ADC3_Init+0x98>)
 8000650:	2201      	movs	r2, #1
 8000652:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ADC3_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_ADC3_Init+0x98>)
 800065e:	2201      	movs	r2, #1
 8000660:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <MX_ADC3_Init+0x98>)
 8000664:	f000 fc82 	bl	8000f6c <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f975 	bl	800095c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000672:	2309      	movs	r3, #9
 8000674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000676:	2301      	movs	r3, #1
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_ADC3_Init+0x98>)
 8000684:	f000 fcb6 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800068e:	f000 f965 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001a0 	.word	0x200001a0
 80006a0:	40012200 	.word	0x40012200
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ETH_Init+0x84>)
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <MX_ETH_Init+0x88>)
 80006b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_ETH_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ETH_Init+0x8c>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ETH_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ETH_Init+0x84>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_ETH_Init+0x8c>)
 80006da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ETH_Init+0x84>)
 80006de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ETH_Init+0x84>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_ETH_Init+0x90>)
 80006e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_ETH_Init+0x84>)
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_ETH_Init+0x94>)
 80006ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ETH_Init+0x84>)
 80006f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ETH_Init+0x84>)
 80006fa:	f000 ffb1 	bl	8001660 <HAL_ETH_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f92a 	bl	800095c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000708:	2238      	movs	r2, #56	; 0x38
 800070a:	2100      	movs	r1, #0
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x98>)
 800070e:	f003 fe29 	bl	8004364 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_ETH_Init+0x98>)
 8000714:	2221      	movs	r2, #33	; 0x21
 8000716:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_ETH_Init+0x98>)
 800071a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800071e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_ETH_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001e8 	.word	0x200001e8
 8000730:	40028000 	.word	0x40028000
 8000734:	20000828 	.word	0x20000828
 8000738:	200000ac 	.word	0x200000ac
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000168 	.word	0x20000168

08000744 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART3_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART3_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART3_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000788:	f002 fe82 	bl	8003490 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8e3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000298 	.word	0x20000298
 80007a0:	40004800 	.word	0x40004800

080007a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2206      	movs	r2, #6
 80007b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2201      	movs	r2, #1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	f001 fc3f 	bl	800206a <HAL_PCD_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f8b3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000320 	.word	0x20000320

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a4c      	ldr	r2, [pc, #304]	; (800094c <MX_GPIO_Init+0x14c>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4b47      	ldr	r3, [pc, #284]	; (800094c <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a46      	ldr	r2, [pc, #280]	; (800094c <MX_GPIO_Init+0x14c>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a40      	ldr	r2, [pc, #256]	; (800094c <MX_GPIO_Init+0x14c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a3a      	ldr	r2, [pc, #232]	; (800094c <MX_GPIO_Init+0x14c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <MX_GPIO_Init+0x14c>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b32      	ldr	r3, [pc, #200]	; (800094c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <MX_GPIO_Init+0x14c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a28      	ldr	r2, [pc, #160]	; (800094c <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <MX_GPIO_Init+0x150>)
 80008c6:	f001 fb9d 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4821      	ldr	r0, [pc, #132]	; (8000954 <MX_GPIO_Init+0x154>)
 80008d0:	f001 fb98 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <MX_GPIO_Init+0x158>)
 80008ec:	f001 f9de 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_GPIO_Init+0x150>)
 800090a:	f001 f9cf 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0x154>)
 8000926:	f001 f9c1 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_GPIO_Init+0x154>)
 800093e:	f001 f9b5 	bl	8001cac <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <HAL_ADC_MspInit+0x74>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d123      	bne.n	8000a1a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_ADC_MspInit+0x78>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a02:	2308      	movs	r3, #8
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_ADC_MspInit+0x7c>)
 8000a16:	f001 f949 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012200 	.word	0x40012200
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40021400 	.word	0x40021400

08000a30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	; (8000b88 <HAL_ETH_MspInit+0x158>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	f040 8096 	bne.w	8000b80 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a54:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a68:	623b      	str	r3, [r7, #32]
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a40      	ldr	r2, [pc, #256]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a34      	ldr	r2, [pc, #208]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	481e      	ldr	r0, [pc, #120]	; (8000b90 <HAL_ETH_MspInit+0x160>)
 8000b18:	f001 f8c8 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b1c:	2386      	movs	r3, #134	; 0x86
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4817      	ldr	r0, [pc, #92]	; (8000b94 <HAL_ETH_MspInit+0x164>)
 8000b38:	f001 f8b8 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <HAL_ETH_MspInit+0x168>)
 8000b5a:	f001 f8a7 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <HAL_ETH_MspInit+0x16c>)
 8000b7c:	f001 f896 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40028000 	.word	0x40028000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40021800 	.word	0x40021800

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0aa      	sub	sp, #168	; 0xa8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2284      	movs	r2, #132	; 0x84
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fbcf 	bl	8004364 <memset>
  if(huart->Instance==USART3)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_UART_MspInit+0xb4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d13c      	bne.n	8000c4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f866 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bea:	f7ff feb7 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xbc>)
 8000c46:	f001 f831 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	37a8      	adds	r7, #168	; 0xa8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004800 	.word	0x40004800
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ac      	sub	sp, #176	; 0xb0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	2284      	movs	r2, #132	; 0x84
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 fb6f 	bl	8004364 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c8e:	d159      	bne.n	8000d44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f805 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cac:	f7ff fe56 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cec:	4619      	mov	r1, r3
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <HAL_PCD_MspInit+0xf0>)
 8000cf0:	f000 ffdc 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <HAL_PCD_MspInit+0xf0>)
 8000d10:	f000 ffcc 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6453      	str	r3, [r2, #68]	; 0x44
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_PCD_MspInit+0xec>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	37b0      	adds	r7, #176	; 0xb0
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f8a0 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f003 fa8f 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb85 	bl	800050c <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e10:	080043b4 	.word	0x080043b4
  ldr r2, =_sbss
 8000e14:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e18:	20000838 	.word	0x20000838

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <cpp_main>:
#include "main.h"

#define INTERVALL 100 // intervall in ms
uint32_t last_time;

void cpp_main(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	last_time = HAL_GetTick();
 8000e24:	f000 f872 	bl	8000f0c <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <cpp_main+0x40>)
 8000e2c:	6013      	str	r3, [r2, #0]
	while(1){
		// Delay not blocking
		if(HAL_GetTick() - INTERVALL > last_time)
 8000e2e:	f000 f86d 	bl	8000f0c <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <cpp_main+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	bf8c      	ite	hi
 8000e40:	2301      	movhi	r3, #1
 8000e42:	2300      	movls	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f1      	beq.n	8000e2e <cpp_main+0xe>
		{
			last_time = HAL_GetTick();
 8000e4a:	f000 f85f 	bl	8000f0c <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <cpp_main+0x40>)
 8000e52:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <cpp_main+0x44>)
 8000e58:	f001 f8ed 	bl	8002036 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - INTERVALL > last_time)
 8000e5c:	e7e7      	b.n	8000e2e <cpp_main+0xe>
 8000e5e:	bf00      	nop
 8000e60:	20000830 	.word	0x20000830
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 fbc3 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f806 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fd76 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fbcf 	bl	8001646 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 fba5 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000834 	.word	0x20000834

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000834 	.word	0x20000834

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e031      	b.n	8000fe6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fd10 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_ADC_Init+0x84>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f970 	bl	80012a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	ffffeefd 	.word	0xffffeefd

08000ff4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1c>
 800100c:	2302      	movs	r3, #2
 800100e:	e136      	b.n	800127e <HAL_ADC_ConfigChannel+0x28a>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b09      	cmp	r3, #9
 800101e:	d93a      	bls.n	8001096 <HAL_ADC_ConfigChannel+0xa2>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001028:	d035      	beq.n	8001096 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68d9      	ldr	r1, [r3, #12]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	3b1e      	subs	r3, #30
 8001040:	2207      	movs	r2, #7
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	400a      	ands	r2, r1
 800104e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a8d      	ldr	r2, [pc, #564]	; (800128c <HAL_ADC_ConfigChannel+0x298>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10a      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68d9      	ldr	r1, [r3, #12]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	061a      	lsls	r2, r3, #24
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800106e:	e035      	b.n	80010dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d9      	ldr	r1, [r3, #12]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	4603      	mov	r3, r0
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4403      	add	r3, r0
 8001088:	3b1e      	subs	r3, #30
 800108a:	409a      	lsls	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001094:	e022      	b.n	80010dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6919      	ldr	r1, [r3, #16]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43da      	mvns	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	400a      	ands	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6919      	ldr	r1, [r3, #16]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4403      	add	r3, r0
 80010d2:	409a      	lsls	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b06      	cmp	r3, #6
 80010e2:	d824      	bhi.n	800112e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b05      	subs	r3, #5
 80010f6:	221f      	movs	r2, #31
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43da      	mvns	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	400a      	ands	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b05      	subs	r3, #5
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
 800112c:	e04c      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	d824      	bhi.n	8001180 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b23      	subs	r3, #35	; 0x23
 8001148:	221f      	movs	r2, #31
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	400a      	ands	r2, r1
 8001156:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	3b23      	subs	r3, #35	; 0x23
 8001172:	fa00 f203 	lsl.w	r2, r0, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
 800117e:	e023      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3b41      	subs	r3, #65	; 0x41
 8001192:	221f      	movs	r2, #31
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b41      	subs	r3, #65	; 0x41
 80011bc:	fa00 f203 	lsl.w	r2, r0, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a30      	ldr	r2, [pc, #192]	; (8001290 <HAL_ADC_ConfigChannel+0x29c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10a      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x1f4>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011da:	d105      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 80011e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a28      	ldr	r2, [pc, #160]	; (8001290 <HAL_ADC_ConfigChannel+0x29c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10f      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x21e>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d10b      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a25      	ldr	r2, [pc, #148]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 8001200:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001204:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001210:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_ADC_ConfigChannel+0x29c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d12b      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x280>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_ADC_ConfigChannel+0x298>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_ADC_ConfigChannel+0x23a>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b11      	cmp	r3, #17
 800122c:	d122      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 8001234:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001238:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_ADC_ConfigChannel+0x2a0>)
 8001240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001244:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_ADC_ConfigChannel+0x298>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d111      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_ADC_ConfigChannel+0x2a4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_ADC_ConfigChannel+0x2a8>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9a      	lsrs	r2, r3, #18
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001266:	e002      	b.n	800126e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3b01      	subs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f9      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	10000012 	.word	0x10000012
 8001290:	40012000 	.word	0x40012000
 8001294:	40012300 	.word	0x40012300
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012a8:	4b78      	ldr	r3, [pc, #480]	; (800148c <ADC_Init+0x1ec>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a77      	ldr	r2, [pc, #476]	; (800148c <ADC_Init+0x1ec>)
 80012ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80012b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <ADC_Init+0x1ec>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4973      	ldr	r1, [pc, #460]	; (800148c <ADC_Init+0x1ec>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	021a      	lsls	r2, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6899      	ldr	r1, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <ADC_Init+0x1f0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d022      	beq.n	800137a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	e00f      	b.n	800139a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001398:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0202 	bic.w	r2, r2, #2
 80013a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	005a      	lsls	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01b      	beq.n	8001400 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	3b01      	subs	r3, #1
 80013f4:	035a      	lsls	r2, r3, #13
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	e007      	b.n	8001410 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	3b01      	subs	r3, #1
 800142c:	051a      	lsls	r2, r3, #20
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001452:	025a      	lsls	r2, r3, #9
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	029a      	lsls	r2, r3, #10
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40012300 	.word	0x40012300
 8001490:	0f000001 	.word	0x0f000001

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	05fa0000 	.word	0x05fa0000

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff47 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5c 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff8e 	bl	800154c <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5d 	bl	80014f8 <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06a      	b.n	8001748 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2223      	movs	r2, #35	; 0x23
 8001680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff f9d3 	bl	8000a30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_ETH_Init+0xf0>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_ETH_Init+0xf0>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_ETH_Init+0xf0>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_ETH_Init+0xf4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_ETH_Init+0xf4>)
 80016a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_ETH_Init+0xf4>)
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4927      	ldr	r1, [pc, #156]	; (8001754 <HAL_ETH_Init+0xf4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_ETH_Init+0xf4>)
 80016be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d8:	f7ff fc18 	bl	8000f0c <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016de:	e011      	b.n	8001704 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016e0:	f7ff fc14 	bl	8000f0c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ee:	d909      	bls.n	8001704 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2204      	movs	r2, #4
 80016f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	22e0      	movs	r2, #224	; 0xe0
 80016fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e021      	b.n	8001748 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e4      	bne.n	80016e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f958 	bl	80019cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f9ff 	bl	8001b20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fa55 	bl	8001bd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	461a      	mov	r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f9bd 	bl	8001ab0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2210      	movs	r2, #16
 8001742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40013800 	.word	0x40013800

08001758 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <ETH_SetMACConfig+0x15c>)
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	7c1b      	ldrb	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <ETH_SetMACConfig+0x28>
 800177a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800177e:	e000      	b.n	8001782 <ETH_SetMACConfig+0x2a>
 8001780:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	7c5b      	ldrb	r3, [r3, #17]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <ETH_SetMACConfig+0x38>
 800178a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178e:	e000      	b.n	8001792 <ETH_SetMACConfig+0x3a>
 8001790:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001792:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001798:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	7fdb      	ldrb	r3, [r3, #31]
 800179e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	7f92      	ldrb	r2, [r2, #30]
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	d102      	bne.n	80017b6 <ETH_SetMACConfig+0x5e>
 80017b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b4:	e000      	b.n	80017b8 <ETH_SetMACConfig+0x60>
 80017b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80017b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7f1b      	ldrb	r3, [r3, #28]
 80017be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d102      	bne.n	80017e0 <ETH_SetMACConfig+0x88>
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	e000      	b.n	80017e2 <ETH_SetMACConfig+0x8a>
 80017e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	7bdb      	ldrb	r3, [r3, #15]
 80017e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017fa:	4313      	orrs	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fb86 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800182e:	4013      	ands	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800183e:	2a00      	cmp	r2, #0
 8001840:	d101      	bne.n	8001846 <ETH_SetMACConfig+0xee>
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	e000      	b.n	8001848 <ETH_SetMACConfig+0xf0>
 8001846:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001848:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800184e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001856:	2a01      	cmp	r2, #1
 8001858:	d101      	bne.n	800185e <ETH_SetMACConfig+0x106>
 800185a:	2208      	movs	r2, #8
 800185c:	e000      	b.n	8001860 <ETH_SetMACConfig+0x108>
 800185e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001860:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001868:	2a01      	cmp	r2, #1
 800186a:	d101      	bne.n	8001870 <ETH_SetMACConfig+0x118>
 800186c:	2204      	movs	r2, #4
 800186e:	e000      	b.n	8001872 <ETH_SetMACConfig+0x11a>
 8001870:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001872:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800187a:	2a01      	cmp	r2, #1
 800187c:	d101      	bne.n	8001882 <ETH_SetMACConfig+0x12a>
 800187e:	2202      	movs	r2, #2
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x12c>
 8001882:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001884:	4313      	orrs	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fb41 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	ff20810f 	.word	0xff20810f

080018b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <ETH_SetDMAConfig+0x110>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	7b1b      	ldrb	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <ETH_SetDMAConfig+0x2c>
 80018de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e2:	e000      	b.n	80018e6 <ETH_SetDMAConfig+0x2e>
 80018e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	7b5b      	ldrb	r3, [r3, #13]
 80018ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	7f52      	ldrb	r2, [r2, #29]
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d102      	bne.n	80018fc <ETH_SetDMAConfig+0x44>
 80018f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018fa:	e000      	b.n	80018fe <ETH_SetDMAConfig+0x46>
 80018fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7b9b      	ldrb	r3, [r3, #14]
 8001904:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001906:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800190c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	7f1b      	ldrb	r3, [r3, #28]
 8001912:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001914:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	7f9b      	ldrb	r3, [r3, #30]
 800191a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800191c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001922:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800192c:	4313      	orrs	r3, r2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	461a      	mov	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fae8 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195c:	461a      	mov	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800196c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001972:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001978:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001980:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001982:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800198a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001990:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800199a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800199e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff fab9 	bl	8000f24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	f8de3f23 	.word	0xf8de3f23

080019cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0a6      	sub	sp, #152	; 0x98
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe86 	bl	8001758 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a80:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff08 	bl	80018b8 <ETH_SetDMAConfig>
}
 8001aa8:	bf00      	nop
 8001aaa:	3798      	adds	r7, #152	; 0x98
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	3204      	adds	r2, #4
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <ETH_MACAddressConfig+0x68>)
 8001ad2:	4413      	add	r3, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3303      	adds	r3, #3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	4313      	orrs	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <ETH_MACAddressConfig+0x6c>)
 8001b02:	4413      	add	r3, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40028040 	.word	0x40028040
 8001b1c:	40028044 	.word	0x40028044

08001b20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e03e      	b.n	8001bac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	3206      	adds	r2, #6
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d80c      	bhi.n	8001b90 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e004      	b.n	8001b9a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d9bd      	bls.n	8001b2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e046      	b.n	8001c6e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6919      	ldr	r1, [r3, #16]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	3212      	adds	r2, #18
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d80c      	bhi.n	8001c5e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	e004      	b.n	8001c68 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d9b5      	bls.n	8001be0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	60da      	str	r2, [r3, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e175      	b.n	8001fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8164 	bne.w	8001fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x56>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80be 	beq.w	8001fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e4e:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_GPIO_Init+0x32c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d037      	beq.n	8001eea <HAL_GPIO_Init+0x23e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d031      	beq.n	8001ee6 <HAL_GPIO_Init+0x23a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x334>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02b      	beq.n	8001ee2 <HAL_GPIO_Init+0x236>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d025      	beq.n	8001ede <HAL_GPIO_Init+0x232>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x22e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a53      	ldr	r2, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x22a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x222>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a50      	ldr	r2, [pc, #320]	; (8001ff8 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x21e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	e012      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	e010      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eca:	2308      	movs	r3, #8
 8001ecc:	e00e      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00c      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00a      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eea:	2300      	movs	r3, #0
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f ae86 	bls.w	8001ccc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43d9      	mvns	r1, r3
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	400b      	ands	r3, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206c:	b08f      	sub	sp, #60	; 0x3c
 800206e:	af0a      	add	r7, sp, #40	; 0x28
 8002070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e116      	b.n	80022aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fde2 	bl	8000c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fe92 	bl	8003de4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f001 fe26 	bl	8003d34 <USB_CoreInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0d7      	b.n	80022aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f001 fe80 	bl	8003e06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e04a      	b.n	80021a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	333d      	adds	r3, #61	; 0x3d
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	b298      	uxth	r0, r3
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3344      	adds	r3, #68	; 0x44
 8002148:	4602      	mov	r2, r0
 800214a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3340      	adds	r3, #64	; 0x40
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3348      	adds	r3, #72	; 0x48
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	334c      	adds	r3, #76	; 0x4c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	3301      	adds	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3af      	bcc.n	800210c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e044      	b.n	800223c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	3301      	adds	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3b5      	bcc.n	80021b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	687e      	ldr	r6, [r7, #4]
 800224e:	466d      	mov	r5, sp
 8002250:	f106 0410 	add.w	r4, r6, #16
 8002254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002260:	e885 0003 	stmia.w	r5, {r0, r1}
 8002264:	1d33      	adds	r3, r6, #4
 8002266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	f001 fe19 	bl	8003ea0 <USB_DevInit>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e014      	b.n	80022aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f80b 	bl	80022b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 ffd7 	bl	8004256 <USB_DevDisconnect>

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	10000003 	.word	0x10000003

080022fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000

0800231c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e291      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002340:	4b96      	ldr	r3, [pc, #600]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234c:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
 8002358:	4b90      	ldr	r3, [pc, #576]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b8d      	ldr	r3, [pc, #564]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06c      	beq.n	800244c <HAL_RCC_OscConfig+0x130>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d168      	bne.n	800244c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e26b      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x7a>
 8002388:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e02e      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x9c>
 800239e:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7e      	ldr	r2, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b7c      	ldr	r3, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7b      	ldr	r2, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xc0>
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a72      	ldr	r2, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023dc:	4b6f      	ldr	r3, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6e      	ldr	r2, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6b      	ldr	r2, [pc, #428]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd86 	bl	8000f0c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fd82 	bl	8000f0c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e21f      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xe8>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fd72 	bl	8000f0c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fd6e 	bl	8000f0c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e20b      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x110>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d069      	beq.n	800252e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x190>
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x17a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1df      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	493d      	ldr	r1, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e040      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd24 	bl	8000f0c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fd20 	bl	8000f0c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1bd      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4929      	ldr	r1, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fd00 	bl	8000f0c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe fcfc 	bl	8000f0c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e199      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d038      	beq.n	80025ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fcdd 	bl	8000f0c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fcd9 	bl	8000f0c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e176      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x23a>
 8002574:	e01a      	b.n	80025ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fcc3 	bl	8000f0c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fcbf 	bl	8000f0c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d903      	bls.n	80025a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e15c      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
 800259c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a4 	beq.w	8002702 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a87      	ldr	r2, [pc, #540]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a7e      	ldr	r2, [pc, #504]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc87 	bl	8000f0c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe fc83 	bl	8000f0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e120      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002614:	4b75      	ldr	r3, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x31a>
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e02d      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x33c>
 800263e:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	e01c      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0x35e>
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	e00b      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 800267a:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fc37 	bl	8000f0c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fc33 	bl	8000f0c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ce      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ee      	beq.n	80026a2 <HAL_RCC_OscConfig+0x386>
 80026c4:	e014      	b.n	80026f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fc21 	bl	8000f0c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fc1d 	bl	8000f0c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d105      	bne.n	8002702 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80a4 	beq.w	8002854 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d06b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d149      	bne.n	80027b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a30      	ldr	r2, [pc, #192]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fbee 	bl	8000f0c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fbea 	bl	8000f0c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e087      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	4313      	orrs	r3, r2
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800277e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fbbe 	bl	8000f0c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fbba 	bl	8000f0c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e057      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x478>
 80027b2:	e04f      	b.n	8002854 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fba4 	bl	8000f0c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fba0 	bl	8000f0c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e03d      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4ac>
 80027e6:	e035      	b.n	8002854 <HAL_RCC_OscConfig+0x538>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x544>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d028      	beq.n	8002850 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d121      	bne.n	8002850 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11a      	bne.n	8002850 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002826:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002828:	4293      	cmp	r3, r2
 800282a:	d111      	bne.n	8002850 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d0      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 020f 	bic.w	r2, r3, #15
 8002892:	4965      	ldr	r1, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d040      	beq.n	8002988 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d115      	bne.n	8002946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e073      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4936      	ldr	r1, [pc, #216]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002958:	f7fe fad8 	bl	8000f0c <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fad4 	bl	8000f0c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e053      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d210      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	4922      	ldr	r1, [pc, #136]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1cc>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1d0>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1d4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fa34 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	0800438c 	.word	0x0800438c
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b094      	sub	sp, #80	; 0x50
 8002a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	647b      	str	r3, [r7, #68]	; 0x44
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d00d      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x40>
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f200 80e1 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6e:	e0db      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a74:	e0db      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7a:	e0d8      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac0:	0150      	lsls	r0, r2, #5
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	6139      	str	r1, [r7, #16]
 8002acc:	4629      	mov	r1, r5
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	018b      	lsls	r3, r1, #6
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aea:	4651      	mov	r1, sl
 8002aec:	018a      	lsls	r2, r1, #6
 8002aee:	4651      	mov	r1, sl
 8002af0:	ebb2 0801 	subs.w	r8, r2, r1
 8002af4:	4659      	mov	r1, fp
 8002af6:	eb63 0901 	sbc.w	r9, r3, r1
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	eb18 0303 	adds.w	r3, r8, r3
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	eb49 0303 	adc.w	r3, r9, r3
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b2e:	4629      	mov	r1, r5
 8002b30:	024b      	lsls	r3, r1, #9
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b38:	4621      	mov	r1, r4
 8002b3a:	024a      	lsls	r2, r1, #9
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	2200      	movs	r2, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4c:	f7fd fb5c 	bl	8000208 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	e058      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	4611      	mov	r1, r2
 8002b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	0159      	lsls	r1, r3, #5
 8002b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b86:	0150      	lsls	r0, r2, #5
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b92:	4649      	mov	r1, r9
 8002b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bac:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	00eb      	lsls	r3, r5, #3
 8002bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc2:	00e2      	lsls	r2, r4, #3
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	461d      	mov	r5, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	18e3      	adds	r3, r4, r3
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb45 0303 	adc.w	r3, r5, r3
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be2:	4629      	mov	r1, r5
 8002be4:	028b      	lsls	r3, r1, #10
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bec:	4621      	mov	r1, r4
 8002bee:	028a      	lsls	r2, r1, #10
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c00:	f7fd fb02 	bl	8000208 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3750      	adds	r7, #80	; 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	0800439c 	.word	0x0800439c

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	0800439c 	.word	0x0800439c

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd8:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a68      	ldr	r2, [pc, #416]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ce2:	6093      	str	r3, [r2, #8]
 8002ce4:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	4964      	ldr	r1, [pc, #400]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d017      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	4959      	ldr	r1, [pc, #356]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d28:	d101      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d017      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d46:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	494a      	ldr	r1, [pc, #296]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 808b 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe f8a8 	bl	8000f0c <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fe f8a4 	bl	8000f0c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e357      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dde:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d035      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d02e      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d114      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe f86c 	bl	8000f0c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe f868 	bl	8000f0c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e319      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ee      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e66:	d111      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	4901      	ldr	r1, [pc, #4]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40007000 	.word	0x40007000
 8002e88:	0ffffcff 	.word	0x0ffffcff
 8002e8c:	4baa      	ldr	r3, [pc, #680]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4aa9      	ldr	r2, [pc, #676]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	4ba7      	ldr	r3, [pc, #668]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	49a4      	ldr	r1, [pc, #656]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ebc:	4a9e      	ldr	r2, [pc, #632]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ec6:	4b9c      	ldr	r3, [pc, #624]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	4999      	ldr	r1, [pc, #612]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee4:	4b94      	ldr	r3, [pc, #592]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef2:	4991      	ldr	r1, [pc, #580]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f06:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f14:	4988      	ldr	r1, [pc, #544]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f28:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f36:	4980      	ldr	r1, [pc, #512]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4977      	ldr	r1, [pc, #476]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6c:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	496f      	ldr	r1, [pc, #444]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f023 020c 	bic.w	r2, r3, #12
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	4966      	ldr	r1, [pc, #408]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb0:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	495e      	ldr	r1, [pc, #376]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd2:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	4955      	ldr	r1, [pc, #340]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4944      	ldr	r1, [pc, #272]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003038:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	493c      	ldr	r1, [pc, #240]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	4933      	ldr	r1, [pc, #204]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800308a:	492b      	ldr	r1, [pc, #172]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ac:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030bc:	d101      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	4912      	ldr	r1, [pc, #72]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003110:	4909      	ldr	r1, [pc, #36]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d006      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80d9 	beq.w	80032de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a01      	ldr	r2, [pc, #4]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003136:	e001      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003138:	40023800 	.word	0x40023800
 800313c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313e:	f7fd fee5 	bl	8000f0c <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003146:	f7fd fee1 	bl	8000f0c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	; 0x64
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e194      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003158:	4b6c      	ldr	r3, [pc, #432]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d021      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	2b00      	cmp	r3, #0
 8003176:	d11d      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	0e1b      	lsrs	r3, r3, #24
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	019a      	lsls	r2, r3, #6
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	071b      	lsls	r3, r3, #28
 80031ac:	4957      	ldr	r1, [pc, #348]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02e      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031de:	d129      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	0f1b      	lsrs	r3, r3, #28
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	071b      	lsls	r3, r3, #28
 8003214:	493d      	ldr	r1, [pc, #244]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800321c:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800321e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003222:	f023 021f 	bic.w	r2, r3, #31
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	3b01      	subs	r3, #1
 800322c:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01d      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003254:	0f1b      	lsrs	r3, r3, #28
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	019a      	lsls	r2, r3, #6
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	431a      	orrs	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	071b      	lsls	r3, r3, #28
 8003274:	4925      	ldr	r1, [pc, #148]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d011      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	019a      	lsls	r2, r3, #6
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	071b      	lsls	r3, r3, #28
 80032a4:	4919      	ldr	r1, [pc, #100]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fd fe28 	bl	8000f0c <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032c0:	f7fd fe24 	bl	8000f0c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0d7      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80cd 	bne.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f2:	f7fd fe0b 	bl	8000f0c <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032fa:	f7fd fe07 	bl	8000f0c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d903      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0ba      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800330c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331c:	d0ed      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02e      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d12a      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003346:	4b51      	ldr	r3, [pc, #324]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	0f1b      	lsrs	r3, r3, #28
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	019a      	lsls	r2, r3, #6
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	4944      	ldr	r1, [pc, #272]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	493d      	ldr	r1, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b0:	d11d      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	0e1b      	lsrs	r3, r3, #24
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	0f1b      	lsrs	r3, r3, #28
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	019a      	lsls	r2, r3, #6
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	4929      	ldr	r1, [pc, #164]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d028      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4917      	ldr	r1, [pc, #92]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4911      	ldr	r1, [pc, #68]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003458:	f7fd fd58 	bl	8000f0c <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003460:	f7fd fd54 	bl	8000f0c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e007      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347e:	d1ef      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e040      	b.n	8003524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fb74 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f82c 	bl	800352c <UART_SetConfig>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e022      	b.n	8003524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa84 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800350a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb0b 	bl	8003b38 <UART_CheckIdleState>
 8003522:	4603      	mov	r3, r0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <UART_SetConfig+0x2c4>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	430b      	orrs	r3, r1
 8003562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a94      	ldr	r2, [pc, #592]	; (80037f4 <UART_SetConfig+0x2c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0xbe>
 80035a8:	4b93      	ldr	r3, [pc, #588]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d816      	bhi.n	80035e4 <UART_SetConfig+0xb8>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x90>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035d3 	.word	0x080035d3
 80035c8:	080035df 	.word	0x080035df
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e150      	b.n	8003874 <UART_SetConfig+0x348>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e14d      	b.n	8003874 <UART_SetConfig+0x348>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e14a      	b.n	8003874 <UART_SetConfig+0x348>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e147      	b.n	8003874 <UART_SetConfig+0x348>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e144      	b.n	8003874 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a83      	ldr	r2, [pc, #524]	; (80037fc <UART_SetConfig+0x2d0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d132      	bne.n	800365a <UART_SetConfig+0x12e>
 80035f4:	4b80      	ldr	r3, [pc, #512]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d828      	bhi.n	8003654 <UART_SetConfig+0x128>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0xdc>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003655 	.word	0x08003655
 8003610:	08003655 	.word	0x08003655
 8003614:	08003655 	.word	0x08003655
 8003618:	08003649 	.word	0x08003649
 800361c:	08003655 	.word	0x08003655
 8003620:	08003655 	.word	0x08003655
 8003624:	08003655 	.word	0x08003655
 8003628:	08003643 	.word	0x08003643
 800362c:	08003655 	.word	0x08003655
 8003630:	08003655 	.word	0x08003655
 8003634:	08003655 	.word	0x08003655
 8003638:	0800364f 	.word	0x0800364f
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e118      	b.n	8003874 <UART_SetConfig+0x348>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e115      	b.n	8003874 <UART_SetConfig+0x348>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e112      	b.n	8003874 <UART_SetConfig+0x348>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e10f      	b.n	8003874 <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e10c      	b.n	8003874 <UART_SetConfig+0x348>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a68      	ldr	r2, [pc, #416]	; (8003800 <UART_SetConfig+0x2d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0x17a>
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800366e:	2b30      	cmp	r3, #48	; 0x30
 8003670:	d013      	beq.n	800369a <UART_SetConfig+0x16e>
 8003672:	2b30      	cmp	r3, #48	; 0x30
 8003674:	d814      	bhi.n	80036a0 <UART_SetConfig+0x174>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x162>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d810      	bhi.n	80036a0 <UART_SetConfig+0x174>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <UART_SetConfig+0x15c>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d006      	beq.n	8003694 <UART_SetConfig+0x168>
 8003686:	e00b      	b.n	80036a0 <UART_SetConfig+0x174>
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e0f2      	b.n	8003874 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e0ef      	b.n	8003874 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e0ec      	b.n	8003874 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0e9      	b.n	8003874 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0e6      	b.n	8003874 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a56      	ldr	r2, [pc, #344]	; (8003804 <UART_SetConfig+0x2d8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d120      	bne.n	80036f2 <UART_SetConfig+0x1c6>
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ba:	2bc0      	cmp	r3, #192	; 0xc0
 80036bc:	d013      	beq.n	80036e6 <UART_SetConfig+0x1ba>
 80036be:	2bc0      	cmp	r3, #192	; 0xc0
 80036c0:	d814      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d009      	beq.n	80036da <UART_SetConfig+0x1ae>
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d810      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1a8>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d006      	beq.n	80036e0 <UART_SetConfig+0x1b4>
 80036d2:	e00b      	b.n	80036ec <UART_SetConfig+0x1c0>
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e0cc      	b.n	8003874 <UART_SetConfig+0x348>
 80036da:	2302      	movs	r3, #2
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e0c9      	b.n	8003874 <UART_SetConfig+0x348>
 80036e0:	2304      	movs	r3, #4
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0c6      	b.n	8003874 <UART_SetConfig+0x348>
 80036e6:	2308      	movs	r3, #8
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0c3      	b.n	8003874 <UART_SetConfig+0x348>
 80036ec:	2310      	movs	r3, #16
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0c0      	b.n	8003874 <UART_SetConfig+0x348>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	; (8003808 <UART_SetConfig+0x2dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d125      	bne.n	8003748 <UART_SetConfig+0x21c>
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370a:	d017      	beq.n	800373c <UART_SetConfig+0x210>
 800370c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003710:	d817      	bhi.n	8003742 <UART_SetConfig+0x216>
 8003712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003716:	d00b      	beq.n	8003730 <UART_SetConfig+0x204>
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d811      	bhi.n	8003742 <UART_SetConfig+0x216>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <UART_SetConfig+0x1fe>
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d006      	beq.n	8003736 <UART_SetConfig+0x20a>
 8003728:	e00b      	b.n	8003742 <UART_SetConfig+0x216>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e0a1      	b.n	8003874 <UART_SetConfig+0x348>
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e09e      	b.n	8003874 <UART_SetConfig+0x348>
 8003736:	2304      	movs	r3, #4
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e09b      	b.n	8003874 <UART_SetConfig+0x348>
 800373c:	2308      	movs	r3, #8
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e098      	b.n	8003874 <UART_SetConfig+0x348>
 8003742:	2310      	movs	r3, #16
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e095      	b.n	8003874 <UART_SetConfig+0x348>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <UART_SetConfig+0x2e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d125      	bne.n	800379e <UART_SetConfig+0x272>
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003760:	d017      	beq.n	8003792 <UART_SetConfig+0x266>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376c:	d00b      	beq.n	8003786 <UART_SetConfig+0x25a>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d811      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x254>
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x260>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x26c>
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e076      	b.n	8003874 <UART_SetConfig+0x348>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e073      	b.n	8003874 <UART_SetConfig+0x348>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e070      	b.n	8003874 <UART_SetConfig+0x348>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e06d      	b.n	8003874 <UART_SetConfig+0x348>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e06a      	b.n	8003874 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <UART_SetConfig+0x2e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d138      	bne.n	800381a <UART_SetConfig+0x2ee>
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b6:	d017      	beq.n	80037e8 <UART_SetConfig+0x2bc>
 80037b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037bc:	d82a      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d00b      	beq.n	80037dc <UART_SetConfig+0x2b0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d824      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <UART_SetConfig+0x2aa>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d006      	beq.n	80037e2 <UART_SetConfig+0x2b6>
 80037d4:	e01e      	b.n	8003814 <UART_SetConfig+0x2e8>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e04b      	b.n	8003874 <UART_SetConfig+0x348>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e048      	b.n	8003874 <UART_SetConfig+0x348>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e045      	b.n	8003874 <UART_SetConfig+0x348>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e042      	b.n	8003874 <UART_SetConfig+0x348>
 80037ee:	bf00      	nop
 80037f0:	efff69f3 	.word	0xefff69f3
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	40011400 	.word	0x40011400
 8003810:	40007800 	.word	0x40007800
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e02c      	b.n	8003874 <UART_SetConfig+0x348>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <UART_SetConfig+0x4bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d125      	bne.n	8003870 <UART_SetConfig+0x344>
 8003824:	4b71      	ldr	r3, [pc, #452]	; (80039ec <UART_SetConfig+0x4c0>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003832:	d017      	beq.n	8003864 <UART_SetConfig+0x338>
 8003834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003838:	d817      	bhi.n	800386a <UART_SetConfig+0x33e>
 800383a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383e:	d00b      	beq.n	8003858 <UART_SetConfig+0x32c>
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d811      	bhi.n	800386a <UART_SetConfig+0x33e>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <UART_SetConfig+0x326>
 800384a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384e:	d006      	beq.n	800385e <UART_SetConfig+0x332>
 8003850:	e00b      	b.n	800386a <UART_SetConfig+0x33e>
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e00d      	b.n	8003874 <UART_SetConfig+0x348>
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e00a      	b.n	8003874 <UART_SetConfig+0x348>
 800385e:	2304      	movs	r3, #4
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e007      	b.n	8003874 <UART_SetConfig+0x348>
 8003864:	2308      	movs	r3, #8
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x348>
 800386a:	2310      	movs	r3, #16
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e001      	b.n	8003874 <UART_SetConfig+0x348>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d15b      	bne.n	8003936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x3aa>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x360>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7ff f9d6 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7ff f9e6 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7ff f8b9 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d074      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d916      	bls.n	8003930 <UART_SetConfig+0x404>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d212      	bcs.n	8003930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	4313      	orrs	r3, r2
 8003924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	89fa      	ldrh	r2, [r7, #14]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e04f      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	77bb      	strb	r3, [r7, #30]
 8003934:	e04c      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x462>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x418>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7ff f97a 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7ff f98a 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <UART_SetConfig+0x4c4>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7ff f85d 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d909      	bls.n	80039cc <UART_SetConfig+0x4a0>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d205      	bcs.n	80039cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40007c00 	.word	0x40007c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b48:	f7fd f9e0 	bl	8000f0c <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10e      	bne.n	8003b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f81b 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e011      	b.n	8003b9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b09c      	sub	sp, #112	; 0x70
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	e0a7      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	f000 80a3 	beq.w	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd f9a3 	bl	8000f0c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13f      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e068      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d050      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d148      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e6      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cd2:	623a      	str	r2, [r7, #32]
 8003cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	69f9      	ldr	r1, [r7, #28]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e010      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f43f af48 	beq.w	8003bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3770      	adds	r7, #112	; 0x70
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d34:	b084      	sub	sp, #16
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	f107 001c 	add.w	r0, r7, #28
 8003d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d120      	bne.n	8003d8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <USB_CoreInit+0xac>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa96 	bl	80042b4 <USB_CoreReset>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e010      	b.n	8003db0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa8a 	bl	80042b4 <USB_CoreReset>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10b      	bne.n	8003dce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f043 0206 	orr.w	r2, r3, #6
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dda:	b004      	add	sp, #16
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	ffbdffbf 	.word	0xffbdffbf

08003de4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 0201 	bic.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f7fd f875 	bl	8000f24 <HAL_Delay>
      ms++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa29 	bl	8004298 <USB_GetMode>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d01e      	beq.n	8003e8a <USB_SetCurrentMode+0x84>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b31      	cmp	r3, #49	; 0x31
 8003e50:	d9f0      	bls.n	8003e34 <USB_SetCurrentMode+0x2e>
 8003e52:	e01a      	b.n	8003e8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d115      	bne.n	8003e86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fd f85c 	bl	8000f24 <HAL_Delay>
      ms++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa10 	bl	8004298 <USB_GetMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <USB_SetCurrentMode+0x84>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b31      	cmp	r3, #49	; 0x31
 8003e82:	d9f0      	bls.n	8003e66 <USB_SetCurrentMode+0x60>
 8003e84:	e001      	b.n	8003e8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e005      	b.n	8003e96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b32      	cmp	r3, #50	; 0x32
 8003e8e:	d101      	bne.n	8003e94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	e009      	b.n	8003ed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	3340      	adds	r3, #64	; 0x40
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b0e      	cmp	r3, #14
 8003ed8:	d9f2      	bls.n	8003ec0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11c      	bne.n	8003f1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e005      	b.n	8003f26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	461a      	mov	r2, r3
 8003f42:	680b      	ldr	r3, [r1, #0]
 8003f44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10c      	bne.n	8003f66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f52:	2100      	movs	r1, #0
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f965 	bl	8004224 <USB_SetDevSpeed>
 8003f5a:	e008      	b.n	8003f6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f960 	bl	8004224 <USB_SetDevSpeed>
 8003f64:	e003      	b.n	8003f6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f66:	2103      	movs	r1, #3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f95b 	bl	8004224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f6e:	2110      	movs	r1, #16
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8f3 	bl	800415c <USB_FlushTxFifo>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f91f 	bl	80041c4 <USB_FlushRxFifo>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e043      	b.n	8004042 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd0:	d118      	bne.n	8004004 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e013      	b.n	8004016 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e008      	b.n	8004016 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	461a      	mov	r2, r3
 8004036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800403a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3301      	adds	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3b7      	bcc.n	8003fba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e043      	b.n	80040d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004066:	d118      	bne.n	800409a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e013      	b.n	80040ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e008      	b.n	80040ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3301      	adds	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3b7      	bcc.n	8004050 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <USB_DevInit+0x2b4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <USB_DevInit+0x2b8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004150:	b004      	add	sp, #16
 8004152:	4770      	bx	lr
 8004154:	803c3800 	.word	0x803c3800
 8004158:	40000004 	.word	0x40000004

0800415c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <USB_FlushTxFifo+0x64>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e01b      	b.n	80041b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	daf2      	bge.n	800416a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	019b      	lsls	r3, r3, #6
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <USB_FlushTxFifo+0x64>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e006      	b.n	80041b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d0f0      	beq.n	8004194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	00030d40 	.word	0x00030d40

080041c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <USB_FlushRxFifo+0x5c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e018      	b.n	8004214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	daf2      	bge.n	80041d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2210      	movs	r2, #16
 80041f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <USB_FlushRxFifo+0x5c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e006      	b.n	8004214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d0f0      	beq.n	80041f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00030d40 	.word	0x00030d40

08004224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0301 	and.w	r3, r3, #1
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <USB_CoreReset+0x64>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e01b      	b.n	800430a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	daf2      	bge.n	80042c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <USB_CoreReset+0x64>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d0f0      	beq.n	80042ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	00030d40 	.word	0x00030d40

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4d0d      	ldr	r5, [pc, #52]	; (8004354 <__libc_init_array+0x38>)
 8004320:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <__libc_init_array+0x3c>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	2600      	movs	r6, #0
 8004328:	42a6      	cmp	r6, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	4d0b      	ldr	r5, [pc, #44]	; (800435c <__libc_init_array+0x40>)
 800432e:	4c0c      	ldr	r4, [pc, #48]	; (8004360 <__libc_init_array+0x44>)
 8004330:	f000 f820 	bl	8004374 <_init>
 8004334:	1b64      	subs	r4, r4, r5
 8004336:	10a4      	asrs	r4, r4, #2
 8004338:	2600      	movs	r6, #0
 800433a:	42a6      	cmp	r6, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f855 3b04 	ldr.w	r3, [r5], #4
 8004344:	4798      	blx	r3
 8004346:	3601      	adds	r6, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f855 3b04 	ldr.w	r3, [r5], #4
 800434e:	4798      	blx	r3
 8004350:	3601      	adds	r6, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	080043ac 	.word	0x080043ac
 8004358:	080043ac 	.word	0x080043ac
 800435c:	080043ac 	.word	0x080043ac
 8004360:	080043b0 	.word	0x080043b0

08004364 <memset>:
 8004364:	4402      	add	r2, r0
 8004366:	4603      	mov	r3, r0
 8004368:	4293      	cmp	r3, r2
 800436a:	d100      	bne.n	800436e <memset+0xa>
 800436c:	4770      	bx	lr
 800436e:	f803 1b01 	strb.w	r1, [r3], #1
 8004372:	e7f9      	b.n	8004368 <memset+0x4>

08004374 <_init>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr

08004380 <_fini>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr
