
CPP_Blinky_Delay_not_Blocking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800551c  0800551c  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005524  08005524  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  0800559c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  0800563c  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  200001b0  080056dc  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  080056dc  00020864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015f66  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dbd  00000000  00000000  00036146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e40  00000000  00000000  00038f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d18  00000000  00000000  00039d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b547  00000000  00000000  0003aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001363b  00000000  00000000  00065fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4354  00000000  00000000  000795e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016d936  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004224  00000000  00000000  0016d988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b0 	.word	0x200001b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005420 	.word	0x08005420

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001b4 	.word	0x200001b4
 8000204:	08005420 	.word	0x08005420

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00b      	beq.n	8000d28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d10:	e000      	b.n	8000d14 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d12:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fe6e 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f816 	bl	8000d70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <main+0x30>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 f925 	bl	8000f98 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d4e:	f000 f877 	bl	8000e40 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d52:	f000 f8c3 	bl	8000edc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d56:	f000 f8f1 	bl	8000f3c <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <main+0x34>)
 8000d5c:	f003 ffb0 	bl	8004cc0 <puts>
	  cpp_main();
 8000d60:	f000 fe14 	bl	800198c <cpp_main>
	  printf(" C Main started!\n");
 8000d64:	e7f9      	b.n	8000d5a <main+0x22>
 8000d66:	bf00      	nop
 8000d68:	e000007c 	.word	0xe000007c
 8000d6c:	08005438 	.word	0x08005438

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fe48 	bl	8004a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d94:	f001 fdf8 	bl	8002988 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <SystemClock_Config+0xc8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xcc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000de4:	2348      	movs	r3, #72	; 0x48
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fdd7 	bl	80029a8 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e00:	f000 f988 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 f865 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e2c:	f000 f972 	bl	8001114 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <MX_ETH_Init+0x88>)
 8000e48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e58:	22e1      	movs	r2, #225	; 0xe1
 8000e5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <MX_ETH_Init+0x90>)
 8000e80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_ETH_Init+0x94>)
 8000e86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e92:	f000 ff2b 	bl	8001cec <HAL_ETH_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e9c:	f000 f93a 	bl	8001114 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ea0:	2238      	movs	r2, #56	; 0x38
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000ea6:	f003 fdb5 	bl	8004a14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eac:	2221      	movs	r2, #33	; 0x21
 8000eae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eb2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000eb6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000204 	.word	0x20000204
 8000ec8:	40028000 	.word	0x40028000
 8000ecc:	20000844 	.word	0x20000844
 8000ed0:	20000110 	.word	0x20000110
 8000ed4:	20000070 	.word	0x20000070
 8000ed8:	200001cc 	.word	0x200001cc

08000edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_USART3_UART_Init+0x5c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f20:	f002 fdfc 	bl	8003b1c <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f8f3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002b4 	.word	0x200002b4
 8000f38:	40004800 	.word	0x40004800

08000f3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2206      	movs	r2, #6
 8000f4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	f001 fbb9 	bl	80026f6 <HAL_PCD_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f8c3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000033c 	.word	0x2000033c

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b47      	ldr	r3, [pc, #284]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a34      	ldr	r2, [pc, #208]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <MX_GPIO_Init+0x134>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <MX_GPIO_Init+0x134>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <MX_GPIO_Init+0x134>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_GPIO_Init+0x134>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_GPIO_Init+0x134>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <MX_GPIO_Init+0x134>)
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_GPIO_Init+0x134>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f244 0181 	movw	r1, #16513	; 0x4081
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <MX_GPIO_Init+0x138>)
 8001046:	f001 fb23 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	4821      	ldr	r0, [pc, #132]	; (80010d4 <MX_GPIO_Init+0x13c>)
 8001050:	f001 fb1e 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	481b      	ldr	r0, [pc, #108]	; (80010d8 <MX_GPIO_Init+0x140>)
 800106c:	f001 f964 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin;
 8001070:	f244 0381 	movw	r3, #16513	; 0x4081
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_GPIO_Init+0x138>)
 800108a:	f001 f955 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x13c>)
 80010a6:	f001 f947 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x13c>)
 80010be:	f001 f93b 	bl	8002338 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3730      	adds	r7, #48	; 0x30
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40020800 	.word	0x40020800

080010dc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fdf6 	bl	8000ce8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
  }
  return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_ETH_MspInit+0x158>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f040 8096 	bne.w	80012b8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001234:	2332      	movs	r3, #50	; 0x32
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <HAL_ETH_MspInit+0x160>)
 8001250:	f001 f872 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001254:	2386      	movs	r3, #134	; 0x86
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_ETH_MspInit+0x164>)
 8001270:	f001 f862 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001286:	230b      	movs	r3, #11
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_ETH_MspInit+0x168>)
 8001292:	f001 f851 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001296:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_ETH_MspInit+0x16c>)
 80012b4:	f001 f840 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	; 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40028000 	.word	0x40028000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40021800 	.word	0x40021800

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0aa      	sub	sp, #168	; 0xa8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2284      	movs	r2, #132	; 0x84
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fb8b 	bl	8004a14 <memset>
  if(huart->Instance==USART3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_UART_MspInit+0xb4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d13c      	bne.n	8001382 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800130e:	2300      	movs	r3, #0
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f002 f810 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001322:	f7ff fef7 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0xbc>)
 800137e:	f000 ffdb 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	37a8      	adds	r7, #168	; 0xa8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004800 	.word	0x40004800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	; 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2284      	movs	r2, #132	; 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fb2b 	bl	8004a14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c6:	d159      	bne.n	800147c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 ffaf 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013e4:	f7ff fe96 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001400:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800141a:	230a      	movs	r3, #10
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001428:	f000 ff86 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4619      	mov	r1, r3
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001448:	f000 ff76 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	6353      	str	r3, [r2, #52]	; 0x34
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37b0      	adds	r7, #176	; 0xb0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 fade 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
	}

return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:
	}
	return len;
}

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f003 f9fc 	bl	80049b0 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20050000 	.word	0x20050000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2000084c 	.word	0x2000084c
 80015ec:	20000868 	.word	0x20000868

080015f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 f9bb 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fb77 	bl	8000d38 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001658:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 800165c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001660:	20000864 	.word	0x20000864

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>

08001666 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>:
	uint32_t DelayNoneBlocking_tickstart; 	// last_time
public:
	NoneBlockSystemTickDelay();
	virtual ~NoneBlockSystemTickDelay();

	void DelayNonBlocking_Init(uint32_t Delay) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
		DelayNoneBlocking_wait = Delay;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	605a      	str	r2, [r3, #4]
		DelayNoneBlocking_tickstart = HAL_GetTick();
 8001676:	f000 fa23 	bl	8001ac0 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
	}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>:

	uint8_t DelayNonBlocking_CheckExpiration() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		// 1: Toggle LED!
		// 0: Don't Toggle LED!
		if(HAL_GetTick() - DelayNoneBlocking_wait > DelayNoneBlocking_tickstart)
 8001690:	f000 fa16 	bl	8001ac0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	1ad2      	subs	r2, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	bf8c      	ite	hi
 80016a4:	2301      	movhi	r3, #1
 80016a6:	2300      	movls	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x34>
		{
			DelayNoneBlocking_tickstart = HAL_GetTick();
 80016ae:	f000 fa07 	bl	8001ac0 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
			return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x36>
		}
		else
		{
			return 0;
 80016bc:	2300      	movs	r3, #0
		}
	}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN5myHal10STM32H7Led9toggleLEDEv>:
public:
	STM32H7Led(GPIO_TypeDef* aPort,
			   uint16_t aPin);
	virtual ~STM32H7Led();

	const void toggleLED(void) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(Port, Pin);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	891b      	ldrh	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f000 fff2 	bl	80026c2 <HAL_GPIO_TogglePin>
	}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>:
 *      Author: raphael.baumeler
 */

#include "BlinkingLed.h"

BlinkingLed::BlinkingLed(GPIO_TypeDef *aPort, uint16_t aPin, float_t aFrequency, uint16_t aDutyCycle)	:
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	4611      	mov	r1, r2
 80016f4:	ed87 0a00 	vstr	s0, [r7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	460b      	mov	r3, r1
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	4613      	mov	r3, r2
 8001700:	80bb      	strh	r3, [r7, #4]
STM32H7Led(aPort, aPin), Frequency(aFrequency), DutyCycle(aDutyCycle)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f899 	bl	800183c <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	88fa      	ldrh	r2, [r7, #6]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f8c2 	bl	800189c <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xa8>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xac>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	619a      	str	r2, [r3, #24]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88ba      	ldrh	r2, [r7, #4]
 800172e:	839a      	strh	r2, [r3, #28]
{
	uint32_t Delay = uint32_t((1000.0/aFrequency)*(aDutyCycle/100.0)); //in ms
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7fe fecd 	bl	80004d0 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	4916      	ldr	r1, [pc, #88]	; (8001798 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb0>)
 8001740:	f7ff f848 	bl	80007d4 <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe feac 	bl	80004ac <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb4>)
 800175a:	f7ff f83b 	bl	80007d4 <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe ff0b 	bl	8000580 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f917 	bl	80009a4 <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	617b      	str	r3, [r7, #20]
	NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff71 	bl	8001666 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
}
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	bf00      	nop
 8001790:	08005480 	.word	0x08005480
 8001794:	08005490 	.word	0x08005490
 8001798:	408f4000 	.word	0x408f4000
 800179c:	40590000 	.word	0x40590000

080017a0 <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <_ZN11BlinkingLedD1Ev+0x30>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <_ZN11BlinkingLedD1Ev+0x34>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	330c      	adds	r3, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f889 	bl	80018d0 <_ZN5myHal10STM32H7LedD1Ev>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f84b 	bl	800185c <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
}
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	08005480 	.word	0x08005480
 80017d4:	08005490 	.word	0x08005490

080017d8 <_ZThn12_N11BlinkingLedD1Ev>:
public:
	BlinkingLed(GPIO_TypeDef* aPort,
				uint16_t aPin,
			    float_t aFrequency=1,
			    uint16_t aDutyCycle=50);
	virtual ~BlinkingLed();
 80017d8:	f1a0 000c 	sub.w	r0, r0, #12
 80017dc:	f7ff bfe0 	b.w	80017a0 <_ZN11BlinkingLedD1Ev>

080017e0 <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
}
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffd9 	bl	80017a0 <_ZN11BlinkingLedD1Ev>
 80017ee:	2120      	movs	r1, #32
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f003 f8d9 	bl	80049a8 <_ZdlPvj>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZThn12_N11BlinkingLedD0Ev>:
 8001800:	f1a0 000c 	sub.w	r0, r0, #12
 8001804:	f7ff bfec 	b.w	80017e0 <_ZN11BlinkingLedD0Ev>

08001808 <_ZN11BlinkingLed15processBlinkingEv>:

const void BlinkingLed::processBlinking() {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if(NoneBlockSystemTickDelay::DelayNonBlocking_CheckExpiration())
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff38 	bl	8001688 <_ZN5myHal24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <_ZN11BlinkingLed15processBlinkingEv+0x2a>
	{
		STM32H7Led::toggleLED();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	330c      	adds	r3, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff4a 	bl	80016c6 <_ZN5myHal10STM32H7Led9toggleLEDEv>
	}
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <_ZN5myHal24NoneBlockSystemTickDelayC1Ev>:
 *      Author: raphael.baumeler
 */

#include "NoneBlockSystemTickDelay.h"

myHal::NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <_ZN5myHal24NoneBlockSystemTickDelayC1Ev+0x1c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]

}
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	080054a0 	.word	0x080054a0

0800185c <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>:

myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <_ZN5myHal24NoneBlockSystemTickDelayD1Ev+0x1c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]

}
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	080054a0 	.word	0x080054a0

0800187c <_ZN5myHal24NoneBlockSystemTickDelayD0Ev>:
myHal::NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
}
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe9 	bl	800185c <_ZN5myHal24NoneBlockSystemTickDelayD1Ev>
 800188a:	210c      	movs	r1, #12
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f003 f88b 	bl	80049a8 <_ZdlPvj>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

myHal::STM32H7Led::STM32H7Led(GPIO_TypeDef *aPort, uint16_t aPin)	:
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
Port(aPort), Pin(aPin)
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <_ZN5myHal10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	811a      	strh	r2, [r3, #8]
{
}
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	080054b0 	.word	0x080054b0

080018d0 <_ZN5myHal10STM32H7LedD1Ev>:

myHal::STM32H7Led::~STM32H7Led() {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <_ZN5myHal10STM32H7LedD1Ev+0x1c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	080054b0 	.word	0x080054b0

080018f0 <_ZN5myHal10STM32H7LedD0Ev>:
myHal::STM32H7Led::~STM32H7Led() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
}
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe9 	bl	80018d0 <_ZN5myHal10STM32H7LedD1Ev>
 80018fe:	210c      	movs	r1, #12
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f003 f851 	bl	80049a8 <_ZdlPvj>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZN11BlinkingLed12setFrequencyEf>:
		DutyCycle = dutyCycle;
		// uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
		// NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
	}

	void setFrequency(float_t frequency) {
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	ed87 0a00 	vstr	s0, [r7]
		Frequency = frequency;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	619a      	str	r2, [r3, #24]
		uint32_t Delay = uint32_t((1000.0/Frequency)*(DutyCycle/100.0)); //in ms
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdd2 	bl	80004d0 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	4913      	ldr	r1, [pc, #76]	; (8001984 <_ZN11BlinkingLed12setFrequencyEf+0x74>)
 8001936:	f7fe ff4d 	bl	80007d4 <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	461d      	mov	r5, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8b9b      	ldrh	r3, [r3, #28]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdb0 	bl	80004ac <__aeabi_i2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <_ZN11BlinkingLed12setFrequencyEf+0x78>)
 8001952:	f7fe ff3f 	bl	80007d4 <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fe0f 	bl	8000580 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f81b 	bl	80009a4 <__aeabi_d2uiz>
 800196e:	4603      	mov	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
		NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe75 	bl	8001666 <_ZN5myHal24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
	}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	408f4000 	.word	0x408f4000
 8001988:	40590000 	.word	0x40590000

0800198c <cpp_main>:

#include "main.h"
#include <stdio.h> //For: printf()
#include "BlinkingLed.h"

void cpp_main(){
 800198c:	b580      	push	{r7, lr}
 800198e:	b098      	sub	sp, #96	; 0x60
 8001990:	af00      	add	r7, sp, #0
	printf("CPP Main started!\n");
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <cpp_main+0x88>)
 8001994:	f003 f994 	bl	8004cc0 <puts>
	BlinkingLed LED1(LD1_green_GPIO_Port, LD1_green_Pin);
 8001998:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800199c:	2332      	movs	r3, #50	; 0x32
 800199e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019a2:	2201      	movs	r2, #1
 80019a4:	491c      	ldr	r1, [pc, #112]	; (8001a18 <cpp_main+0x8c>)
 80019a6:	f7ff fe9f 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED1.setFrequency(2);	//PB_0:  2Hz, toggle every 250ms
 80019aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffac 	bl	8001910 <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED2(LD2_blue_GPIO_Port, LD2_blue_Pin);
 80019b8:	f107 0020 	add.w	r0, r7, #32
 80019bc:	2332      	movs	r3, #50	; 0x32
 80019be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	4914      	ldr	r1, [pc, #80]	; (8001a18 <cpp_main+0x8c>)
 80019c6:	f7ff fe8f 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED2.setFrequency(1);	//PB_7:  1Hz, toggle every 500ms
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff9c 	bl	8001910 <_ZN11BlinkingLed12setFrequencyEf>
	BlinkingLed LED3(LD3_red_GPIO_Port, LD3_red_Pin);
 80019d8:	4638      	mov	r0, r7
 80019da:	2332      	movs	r3, #50	; 0x32
 80019dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <cpp_main+0x8c>)
 80019e6:	f7ff fe7f 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	LED3.setFrequency(0.5);	//PB_14: 0.5Hz, toggle every 1000ms
 80019ea:	463b      	mov	r3, r7
 80019ec:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff8d 	bl	8001910 <_ZN11BlinkingLed12setFrequencyEf>
	while(1){
		LED1.processBlinking();
 80019f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff04 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED2.processBlinking();
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff feff 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED3.processBlinking();
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fefb 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED1.processBlinking();
 8001a12:	e7f0      	b.n	80019f6 <cpp_main+0x6a>
 8001a14:	0800544c 	.word	0x0800544c
 8001a18:	40020400 	.word	0x40020400

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f92f 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f806 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fb78 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f93b 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f911 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000850 	.word	0x20000850

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000850 	.word	0x20000850

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ffee 	bl	8001ac0 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_Delay+0x44>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
  {
  }
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008

08001b20 <__NVIC_SetPriorityGrouping>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <__NVIC_SetPriorityGrouping+0x40>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x40>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00
 8001b64:	05fa0000 	.word	0x05fa0000

08001b68 <__NVIC_GetPriorityGrouping>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_SetPriority>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff47 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff5c 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffb0 	bl	8001c40 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06a      	b.n	8001dd4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2223      	movs	r2, #35	; 0x23
 8001d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fa29 	bl	8001168 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_ETH_Init+0xf0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_ETH_Init+0xf0>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_ETH_Init+0xf0>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_ETH_Init+0xf4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_ETH_Init+0xf4>)
 8001d34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d38:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_ETH_Init+0xf4>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_ETH_Init+0xf4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_ETH_Init+0xf4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d64:	f7ff feac 	bl	8001ac0 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d6a:	e011      	b.n	8001d90 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d6c:	f7ff fea8 	bl	8001ac0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d7a:	d909      	bls.n	8001d90 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	22e0      	movs	r2, #224	; 0xe0
 8001d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e021      	b.n	8001dd4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e4      	bne.n	8001d6c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f958 	bl	8002058 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f9ff 	bl	80021ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa55 	bl	800225e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	461a      	mov	r2, r3
 8001dba:	2100      	movs	r1, #0
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f9bd 	bl	800213c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800

08001de4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <ETH_SetMACConfig+0x15c>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	7c1b      	ldrb	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <ETH_SetMACConfig+0x28>
 8001e06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e0a:	e000      	b.n	8001e0e <ETH_SetMACConfig+0x2a>
 8001e0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7c5b      	ldrb	r3, [r3, #17]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <ETH_SetMACConfig+0x38>
 8001e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e1a:	e000      	b.n	8001e1e <ETH_SetMACConfig+0x3a>
 8001e1c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e1e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	7fdb      	ldrb	r3, [r3, #31]
 8001e2a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e2c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	7f92      	ldrb	r2, [r2, #30]
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d102      	bne.n	8001e42 <ETH_SetMACConfig+0x5e>
 8001e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e40:	e000      	b.n	8001e44 <ETH_SetMACConfig+0x60>
 8001e42:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e4c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d102      	bne.n	8001e6c <ETH_SetMACConfig+0x88>
 8001e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6a:	e000      	b.n	8001e6e <ETH_SetMACConfig+0x8a>
 8001e6c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7bdb      	ldrb	r3, [r3, #15]
 8001e74:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e76:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e84:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e86:	4313      	orrs	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff fe1a 	bl	8001ad8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	d101      	bne.n	8001ed2 <ETH_SetMACConfig+0xee>
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	e000      	b.n	8001ed4 <ETH_SetMACConfig+0xf0>
 8001ed2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ed4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	d101      	bne.n	8001eea <ETH_SetMACConfig+0x106>
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	e000      	b.n	8001eec <ETH_SetMACConfig+0x108>
 8001eea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001eec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ef4:	2a01      	cmp	r2, #1
 8001ef6:	d101      	bne.n	8001efc <ETH_SetMACConfig+0x118>
 8001ef8:	2204      	movs	r2, #4
 8001efa:	e000      	b.n	8001efe <ETH_SetMACConfig+0x11a>
 8001efc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f06:	2a01      	cmp	r2, #1
 8001f08:	d101      	bne.n	8001f0e <ETH_SetMACConfig+0x12a>
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	e000      	b.n	8001f10 <ETH_SetMACConfig+0x12c>
 8001f0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f10:	4313      	orrs	r3, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff fdd5 	bl	8001ad8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	ff20810f 	.word	0xff20810f

08001f44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <ETH_SetDMAConfig+0x110>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7b1b      	ldrb	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <ETH_SetDMAConfig+0x2c>
 8001f6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f6e:	e000      	b.n	8001f72 <ETH_SetDMAConfig+0x2e>
 8001f70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	7b5b      	ldrb	r3, [r3, #13]
 8001f76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	7f52      	ldrb	r2, [r2, #29]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetDMAConfig+0x44>
 8001f82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f86:	e000      	b.n	8001f8a <ETH_SetDMAConfig+0x46>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7b9b      	ldrb	r3, [r3, #14]
 8001f90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	7f1b      	ldrb	r3, [r3, #28]
 8001f9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fa0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7f9b      	ldrb	r3, [r3, #30]
 8001fa6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fa8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff fd7c 	bl	8001ad8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ff8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ffe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002004:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800200e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002016:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800201c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800202a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff fd4d 	bl	8001ad8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	f8de3f23 	.word	0xf8de3f23

08002058 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a6      	sub	sp, #152	; 0x98
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002094:	2300      	movs	r3, #0
 8002096:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fe86 	bl	8001de4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020d8:	2301      	movs	r3, #1
 80020da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020dc:	2301      	movs	r3, #1
 80020de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800210e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002112:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002118:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002120:	2300      	movs	r3, #0
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff08 	bl	8001f44 <ETH_SetDMAConfig>
}
 8002134:	bf00      	nop
 8002136:	3798      	adds	r7, #152	; 0x98
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3305      	adds	r3, #5
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	3204      	adds	r2, #4
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <ETH_MACAddressConfig+0x68>)
 800215e:	4413      	add	r3, r2
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3303      	adds	r3, #3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3302      	adds	r3, #2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	4313      	orrs	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <ETH_MACAddressConfig+0x6c>)
 800218e:	4413      	add	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40028040 	.word	0x40028040
 80021a8:	40028044 	.word	0x40028044

080021ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e03e      	b.n	8002238 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68d9      	ldr	r1, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	3206      	adds	r2, #6
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d80c      	bhi.n	800221c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e004      	b.n	8002226 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d9bd      	bls.n	80021ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e046      	b.n	80022fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80022b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	3212      	adds	r2, #18
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d80c      	bhi.n	80022ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6919      	ldr	r1, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	e004      	b.n	80022f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d9b5      	bls.n	800226c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e175      	b.n	8002644 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 8164 	bne.w	800263e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_GPIO_Init+0x56>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d130      	bne.n	80023f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0201 	and.w	r2, r3, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d017      	beq.n	800242c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d123      	bne.n	8002480 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80be 	beq.w	800263e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_GPIO_Init+0x324>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_GPIO_Init+0x328>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d037      	beq.n	8002576 <HAL_GPIO_Init+0x23e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_GPIO_Init+0x23a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_GPIO_Init+0x334>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x236>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a55      	ldr	r2, [pc, #340]	; (8002670 <HAL_GPIO_Init+0x338>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x232>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a54      	ldr	r2, [pc, #336]	; (8002674 <HAL_GPIO_Init+0x33c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x340>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x22a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x344>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_GPIO_Init+0x348>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_GPIO_Init+0x34c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_GPIO_Init+0x350>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x21a>
 800254e:	2309      	movs	r3, #9
 8002550:	e012      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002552:	230a      	movs	r3, #10
 8002554:	e010      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002556:	2308      	movs	r3, #8
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255a:	2307      	movs	r3, #7
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x328>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <HAL_GPIO_Init+0x354>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_GPIO_Init+0x354>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_GPIO_Init+0x354>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_GPIO_Init+0x354>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae86 	bls.w	8002358 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40022000 	.word	0x40022000
 8002688:	40022400 	.word	0x40022400
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	041a      	lsls	r2, r3, #16
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43d9      	mvns	r1, r3
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	400b      	ands	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f8:	b08f      	sub	sp, #60	; 0x3c
 80026fa:	af0a      	add	r7, sp, #40	; 0x28
 80026fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e116      	b.n	8002936 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fe38 	bl	8001398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2203      	movs	r2, #3
 800272c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f001 fe92 	bl	8004470 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	687e      	ldr	r6, [r7, #4]
 8002754:	466d      	mov	r5, sp
 8002756:	f106 0410 	add.w	r4, r6, #16
 800275a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002762:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002766:	e885 0003 	stmia.w	r5, {r0, r1}
 800276a:	1d33      	adds	r3, r6, #4
 800276c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	f001 fe26 	bl	80043c0 <USB_CoreInit>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0d7      	b.n	8002936 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fe80 	bl	8004492 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e04a      	b.n	800282e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	333d      	adds	r3, #61	; 0x3d
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	333c      	adds	r3, #60	; 0x3c
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	b298      	uxth	r0, r3
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	; 0x44
 80027d4:	4602      	mov	r2, r0
 80027d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3340      	adds	r3, #64	; 0x40
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3348      	adds	r3, #72	; 0x48
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334c      	adds	r3, #76	; 0x4c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3354      	adds	r3, #84	; 0x54
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3301      	adds	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3af      	bcc.n	8002798 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e044      	b.n	80028c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	3301      	adds	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3b5      	bcc.n	800283e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	687e      	ldr	r6, [r7, #4]
 80028da:	466d      	mov	r5, sp
 80028dc:	f106 0410 	add.w	r4, r6, #16
 80028e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f0:	1d33      	adds	r3, r6, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f001 fe19 	bl	800452c <USB_DevInit>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e014      	b.n	8002936 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f80b 	bl	8002940 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f001 ffd7 	bl	80048e2 <USB_DevDisconnect>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002940 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_PCDEx_ActivateLPM+0x44>)
 8002970:	4313      	orrs	r3, r2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	10000003 	.word	0x10000003

08002988 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40007000 	.word	0x40007000

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e291      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8087 	beq.w	8002ada <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029cc:	4b96      	ldr	r3, [pc, #600]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d8:	4b93      	ldr	r3, [pc, #588]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d112      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62>
 80029e4:	4b90      	ldr	r3, [pc, #576]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b8d      	ldr	r3, [pc, #564]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x130>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d168      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e26b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x7a>
 8002a14:	4b84      	ldr	r3, [pc, #528]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a83      	ldr	r2, [pc, #524]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x9c>
 8002a2a:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7e      	ldr	r2, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b7c      	ldr	r3, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7b      	ldr	r2, [pc, #492]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a4e:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a75      	ldr	r2, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a72      	ldr	r2, [pc, #456]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xd8>
 8002a68:	4b6f      	ldr	r3, [pc, #444]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a6b      	ldr	r2, [pc, #428]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7ff f81a 	bl	8001ac0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f816 	bl	8001ac0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e21f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f806 	bl	8001ac0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f802 	bl	8001ac0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e20b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x110>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d069      	beq.n	8002bba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x190>
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1df      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	493d      	ldr	r1, [pc, #244]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e040      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d023      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe ffb8 	bl	8001ac0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe ffb4 	bl	8001ac0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1bd      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4929      	ldr	r1, [pc, #164]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
 8002b86:	e018      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe ff94 	bl	8001ac0 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9c:	f7fe ff90 	bl	8001ac0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e199      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d038      	beq.n	8002c38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d019      	beq.n	8002c02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe ff71 	bl	8001ac0 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be2:	f7fe ff6d 	bl	8001ac0 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e176      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x23a>
 8002c00:	e01a      	b.n	8002c38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fe ff57 	bl	8001ac0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe ff53 	bl	8001ac0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d903      	bls.n	8002c2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e15c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
 8002c28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ee      	bne.n	8002c16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a4 	beq.w	8002d8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a87      	ldr	r2, [pc, #540]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6e:	4b82      	ldr	r3, [pc, #520]	; (8002e78 <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x4d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	; (8002e78 <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe ff1b 	bl	8001ac0 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe ff17 	bl	8001ac0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e120      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca0:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x31a>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x33c>
 8002cca:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x35e>
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
 8002d06:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe fecb 	bl	8001ac0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fec7 	bl	8001ac0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0ce      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x386>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe feb5 	bl	8001ac0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe feb1 	bl	8001ac0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a4 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d98:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d06b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d149      	bne.n	8002e40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fe82 	bl	8001ac0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fe7e 	bl	8001ac0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e087      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4313      	orrs	r3, r2
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fe52 	bl	8001ac0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fe4e 	bl	8001ac0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e057      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x478>
 8002e3e:	e04f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fe38 	bl	8001ac0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fe34 	bl	8001ac0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e03d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4ac>
 8002e72:	e035      	b.n	8002ee0 <HAL_RCC_OscConfig+0x538>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x544>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d028      	beq.n	8002edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d121      	bne.n	8002edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d11a      	bne.n	8002edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d111      	bne.n	8002edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d0      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	4965      	ldr	r1, [pc, #404]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d040      	beq.n	8003014 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e073      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4936      	ldr	r1, [pc, #216]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fd6c 	bl	8001ac0 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fd68 	bl	8001ac0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e053      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d210      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4922      	ldr	r1, [pc, #136]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x1cc>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1d0>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fcc8 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08005460 	.word	0x08005460
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b094      	sub	sp, #80	; 0x50
 80030ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	2300      	movs	r3, #0
 80030da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e0:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d00d      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	f200 80e1 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fa:	e0db      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003100:	e0db      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003106:	e0d8      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	2200      	movs	r2, #0
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
 8003128:	63fa      	str	r2, [r7, #60]	; 0x3c
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	6139      	str	r1, [r7, #16]
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4651      	mov	r1, sl
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4651      	mov	r1, sl
 800317c:	ebb2 0801 	subs.w	r8, r2, r1
 8003180:	4659      	mov	r1, fp
 8003182:	eb63 0901 	sbc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	462b      	mov	r3, r5
 80031a8:	eb49 0303 	adc.w	r3, r9, r3
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ba:	4629      	mov	r1, r5
 80031bc:	024b      	lsls	r3, r1, #9
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c4:	4621      	mov	r1, r4
 80031c6:	024a      	lsls	r2, r1, #9
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d8:	f7fd fc04 	bl	80009e4 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e4:	e058      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4641      	mov	r1, r8
 800321a:	ebb2 0a01 	subs.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb63 0b01 	sbc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003238:	ebb2 040a 	subs.w	r4, r2, sl
 800323c:	eb63 050b 	sbc.w	r5, r3, fp
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	464b      	mov	r3, r9
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	f7fd fbaa 	bl	80009e4 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3750      	adds	r7, #80	; 0x50
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000000 	.word	0x20000000

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	08005470 	.word	0x08005470

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0b5b      	lsrs	r3, r3, #13
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	08005470 	.word	0x08005470

0800333c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003364:	4b69      	ldr	r3, [pc, #420]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a68      	ldr	r2, [pc, #416]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	4b66      	ldr	r3, [pc, #408]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	4964      	ldr	r1, [pc, #400]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	4959      	ldr	r1, [pc, #356]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d2:	4b4e      	ldr	r3, [pc, #312]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	494a      	ldr	r1, [pc, #296]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 808b 	beq.w	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a39      	ldr	r2, [pc, #228]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fe fb3c 	bl	8001ac0 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fb38 	bl	8001ac0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e357      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d035      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d02e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a1a      	ldr	r2, [pc, #104]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d114      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fb00 	bl	8001ac0 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fafc 	bl	8001ac0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e319      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ee      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f2:	d111      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003502:	400b      	ands	r3, r1
 8003504:	4901      	ldr	r1, [pc, #4]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	0ffffcff 	.word	0x0ffffcff
 8003518:	4baa      	ldr	r3, [pc, #680]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4aa9      	ldr	r2, [pc, #676]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003522:	6093      	str	r3, [r2, #8]
 8003524:	4ba7      	ldr	r3, [pc, #668]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	49a4      	ldr	r1, [pc, #656]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	4313      	orrs	r3, r2
 8003534:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003542:	4ba0      	ldr	r3, [pc, #640]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	4a9e      	ldr	r2, [pc, #632]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003552:	4b9c      	ldr	r3, [pc, #624]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	4999      	ldr	r1, [pc, #612]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003570:	4b94      	ldr	r3, [pc, #592]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357e:	4991      	ldr	r1, [pc, #580]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003592:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a0:	4988      	ldr	r1, [pc, #544]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b4:	4b83      	ldr	r3, [pc, #524]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	4980      	ldr	r1, [pc, #512]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d6:	4b7b      	ldr	r3, [pc, #492]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4977      	ldr	r1, [pc, #476]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	496f      	ldr	r1, [pc, #444]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f023 020c 	bic.w	r2, r3, #12
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	4966      	ldr	r1, [pc, #408]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	495e      	ldr	r1, [pc, #376]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365e:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	4955      	ldr	r1, [pc, #340]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	494d      	ldr	r1, [pc, #308]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036a2:	4b48      	ldr	r3, [pc, #288]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4944      	ldr	r1, [pc, #272]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c4:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	493c      	ldr	r1, [pc, #240]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	4933      	ldr	r1, [pc, #204]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003708:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	492b      	ldr	r1, [pc, #172]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	4912      	ldr	r1, [pc, #72]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379c:	4909      	ldr	r1, [pc, #36]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d006      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80d9 	beq.w	800396a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a01      	ldr	r2, [pc, #4]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037c2:	e001      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ca:	f7fe f979 	bl	8001ac0 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037d2:	f7fe f975 	bl	8001ac0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e194      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d021      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11d      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003804:	4b64      	ldr	r3, [pc, #400]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003818:	0e1b      	lsrs	r3, r3, #24
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	019a      	lsls	r2, r3, #6
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	071b      	lsls	r3, r3, #28
 8003838:	4957      	ldr	r1, [pc, #348]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386a:	d129      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800386c:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	0f1b      	lsrs	r3, r3, #28
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	019a      	lsls	r2, r3, #6
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	071b      	lsls	r3, r3, #28
 80038a0:	493d      	ldr	r1, [pc, #244]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038a8:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ae:	f023 021f 	bic.w	r2, r3, #31
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01d      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d2:	0e1b      	lsrs	r3, r3, #24
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038da:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e0:	0f1b      	lsrs	r3, r3, #28
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	019a      	lsls	r2, r3, #6
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	431a      	orrs	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	071b      	lsls	r3, r3, #28
 8003900:	4925      	ldr	r1, [pc, #148]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	019a      	lsls	r2, r3, #6
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	071b      	lsls	r3, r3, #28
 8003930:	4919      	ldr	r1, [pc, #100]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fe f8bc 	bl	8001ac0 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800394c:	f7fe f8b8 	bl	8001ac0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0d7      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	f040 80cd 	bne.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397e:	f7fe f89f 	bl	8001ac0 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003986:	f7fe f89b 	bl	8001ac0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d903      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0ba      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003998:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800399c:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a8:	d0ed      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d12a      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039e0:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	0f1b      	lsrs	r3, r3, #28
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	019a      	lsls	r2, r3, #6
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	061b      	lsls	r3, r3, #24
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	4944      	ldr	r1, [pc, #272]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	493d      	ldr	r1, [pc, #244]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d022      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3c:	d11d      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	0e1b      	lsrs	r3, r3, #24
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a4c:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	431a      	orrs	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	4929      	ldr	r1, [pc, #164]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	0e1b      	lsrs	r3, r3, #24
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	019a      	lsls	r2, r3, #6
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	431a      	orrs	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	4917      	ldr	r1, [pc, #92]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	4911      	ldr	r1, [pc, #68]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd ffec 	bl	8001ac0 <HAL_GetTick>
 8003ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aec:	f7fd ffe8 	bl	8001ac0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e007      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b0a:	d1ef      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e040      	b.n	8003bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fbca 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f82c 	bl	8003bb8 <UART_SetConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e022      	b.n	8003bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa84 	bl	8004080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fb0b 	bl	80041c4 <UART_CheckIdleState>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4ba6      	ldr	r3, [pc, #664]	; (8003e7c <UART_SetConfig+0x2c4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a94      	ldr	r2, [pc, #592]	; (8003e80 <UART_SetConfig+0x2c8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d120      	bne.n	8003c76 <UART_SetConfig+0xbe>
 8003c34:	4b93      	ldr	r3, [pc, #588]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d816      	bhi.n	8003c70 <UART_SetConfig+0xb8>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x90>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c59 	.word	0x08003c59
 8003c4c:	08003c65 	.word	0x08003c65
 8003c50:	08003c5f 	.word	0x08003c5f
 8003c54:	08003c6b 	.word	0x08003c6b
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e150      	b.n	8003f00 <UART_SetConfig+0x348>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	e14d      	b.n	8003f00 <UART_SetConfig+0x348>
 8003c64:	2304      	movs	r3, #4
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e14a      	b.n	8003f00 <UART_SetConfig+0x348>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e147      	b.n	8003f00 <UART_SetConfig+0x348>
 8003c70:	2310      	movs	r3, #16
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e144      	b.n	8003f00 <UART_SetConfig+0x348>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a83      	ldr	r2, [pc, #524]	; (8003e88 <UART_SetConfig+0x2d0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d132      	bne.n	8003ce6 <UART_SetConfig+0x12e>
 8003c80:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d828      	bhi.n	8003ce0 <UART_SetConfig+0x128>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0xdc>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003ce1 	.word	0x08003ce1
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003cd5 	.word	0x08003cd5
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003ce1 	.word	0x08003ce1
 8003cb4:	08003ccf 	.word	0x08003ccf
 8003cb8:	08003ce1 	.word	0x08003ce1
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003ce1 	.word	0x08003ce1
 8003cc4:	08003cdb 	.word	0x08003cdb
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e118      	b.n	8003f00 <UART_SetConfig+0x348>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e115      	b.n	8003f00 <UART_SetConfig+0x348>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e112      	b.n	8003f00 <UART_SetConfig+0x348>
 8003cda:	2308      	movs	r3, #8
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e10f      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e10c      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a68      	ldr	r2, [pc, #416]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d120      	bne.n	8003d32 <UART_SetConfig+0x17a>
 8003cf0:	4b64      	ldr	r3, [pc, #400]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cfa:	2b30      	cmp	r3, #48	; 0x30
 8003cfc:	d013      	beq.n	8003d26 <UART_SetConfig+0x16e>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d814      	bhi.n	8003d2c <UART_SetConfig+0x174>
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d009      	beq.n	8003d1a <UART_SetConfig+0x162>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d810      	bhi.n	8003d2c <UART_SetConfig+0x174>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <UART_SetConfig+0x15c>
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d006      	beq.n	8003d20 <UART_SetConfig+0x168>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x174>
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e0f2      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e0ef      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d20:	2304      	movs	r3, #4
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e0ec      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d26:	2308      	movs	r3, #8
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e0e9      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e0e6      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <UART_SetConfig+0x2d8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d120      	bne.n	8003d7e <UART_SetConfig+0x1c6>
 8003d3c:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d46:	2bc0      	cmp	r3, #192	; 0xc0
 8003d48:	d013      	beq.n	8003d72 <UART_SetConfig+0x1ba>
 8003d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d4c:	d814      	bhi.n	8003d78 <UART_SetConfig+0x1c0>
 8003d4e:	2b80      	cmp	r3, #128	; 0x80
 8003d50:	d009      	beq.n	8003d66 <UART_SetConfig+0x1ae>
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d810      	bhi.n	8003d78 <UART_SetConfig+0x1c0>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <UART_SetConfig+0x1a8>
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d006      	beq.n	8003d6c <UART_SetConfig+0x1b4>
 8003d5e:	e00b      	b.n	8003d78 <UART_SetConfig+0x1c0>
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e0cc      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e0c9      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e0c6      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d72:	2308      	movs	r3, #8
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e0c3      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e0c0      	b.n	8003f00 <UART_SetConfig+0x348>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a44      	ldr	r2, [pc, #272]	; (8003e94 <UART_SetConfig+0x2dc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d125      	bne.n	8003dd4 <UART_SetConfig+0x21c>
 8003d88:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d96:	d017      	beq.n	8003dc8 <UART_SetConfig+0x210>
 8003d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9c:	d817      	bhi.n	8003dce <UART_SetConfig+0x216>
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da2:	d00b      	beq.n	8003dbc <UART_SetConfig+0x204>
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d811      	bhi.n	8003dce <UART_SetConfig+0x216>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <UART_SetConfig+0x1fe>
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db2:	d006      	beq.n	8003dc2 <UART_SetConfig+0x20a>
 8003db4:	e00b      	b.n	8003dce <UART_SetConfig+0x216>
 8003db6:	2300      	movs	r3, #0
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e0a1      	b.n	8003f00 <UART_SetConfig+0x348>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e09e      	b.n	8003f00 <UART_SetConfig+0x348>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e09b      	b.n	8003f00 <UART_SetConfig+0x348>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e098      	b.n	8003f00 <UART_SetConfig+0x348>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e095      	b.n	8003f00 <UART_SetConfig+0x348>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <UART_SetConfig+0x2e0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d125      	bne.n	8003e2a <UART_SetConfig+0x272>
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dec:	d017      	beq.n	8003e1e <UART_SetConfig+0x266>
 8003dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df2:	d817      	bhi.n	8003e24 <UART_SetConfig+0x26c>
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d00b      	beq.n	8003e12 <UART_SetConfig+0x25a>
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d811      	bhi.n	8003e24 <UART_SetConfig+0x26c>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <UART_SetConfig+0x254>
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d006      	beq.n	8003e18 <UART_SetConfig+0x260>
 8003e0a:	e00b      	b.n	8003e24 <UART_SetConfig+0x26c>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e076      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e073      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e070      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e06d      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e06a      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d138      	bne.n	8003ea6 <UART_SetConfig+0x2ee>
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e42:	d017      	beq.n	8003e74 <UART_SetConfig+0x2bc>
 8003e44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e48:	d82a      	bhi.n	8003ea0 <UART_SetConfig+0x2e8>
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	d00b      	beq.n	8003e68 <UART_SetConfig+0x2b0>
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d824      	bhi.n	8003ea0 <UART_SetConfig+0x2e8>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <UART_SetConfig+0x2aa>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	d006      	beq.n	8003e6e <UART_SetConfig+0x2b6>
 8003e60:	e01e      	b.n	8003ea0 <UART_SetConfig+0x2e8>
 8003e62:	2300      	movs	r3, #0
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e04b      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e048      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e045      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e74:	2308      	movs	r3, #8
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e042      	b.n	8003f00 <UART_SetConfig+0x348>
 8003e7a:	bf00      	nop
 8003e7c:	efff69f3 	.word	0xefff69f3
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40004400 	.word	0x40004400
 8003e8c:	40004800 	.word	0x40004800
 8003e90:	40004c00 	.word	0x40004c00
 8003e94:	40005000 	.word	0x40005000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	40007800 	.word	0x40007800
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e02c      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a72      	ldr	r2, [pc, #456]	; (8004074 <UART_SetConfig+0x4bc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d125      	bne.n	8003efc <UART_SetConfig+0x344>
 8003eb0:	4b71      	ldr	r3, [pc, #452]	; (8004078 <UART_SetConfig+0x4c0>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ebe:	d017      	beq.n	8003ef0 <UART_SetConfig+0x338>
 8003ec0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ec4:	d817      	bhi.n	8003ef6 <UART_SetConfig+0x33e>
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eca:	d00b      	beq.n	8003ee4 <UART_SetConfig+0x32c>
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed0:	d811      	bhi.n	8003ef6 <UART_SetConfig+0x33e>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <UART_SetConfig+0x326>
 8003ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eda:	d006      	beq.n	8003eea <UART_SetConfig+0x332>
 8003edc:	e00b      	b.n	8003ef6 <UART_SetConfig+0x33e>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e00d      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e00a      	b.n	8003f00 <UART_SetConfig+0x348>
 8003eea:	2304      	movs	r3, #4
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e007      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e004      	b.n	8003f00 <UART_SetConfig+0x348>
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e001      	b.n	8003f00 <UART_SetConfig+0x348>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d15b      	bne.n	8003fc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d828      	bhi.n	8003f62 <UART_SetConfig+0x3aa>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x360>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f53 	.word	0x08003f53
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f5b 	.word	0x08003f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7ff f9d6 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8003f40:	61b8      	str	r0, [r7, #24]
        break;
 8003f42:	e013      	b.n	8003f6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7ff f9e6 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8003f48:	61b8      	str	r0, [r7, #24]
        break;
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <UART_SetConfig+0x4c4>)
 8003f4e:	61bb      	str	r3, [r7, #24]
        break;
 8003f50:	e00c      	b.n	8003f6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f52:	f7ff f8b9 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003f56:	61b8      	str	r0, [r7, #24]
        break;
 8003f58:	e008      	b.n	8003f6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	61bb      	str	r3, [r7, #24]
        break;
 8003f60:	e004      	b.n	8003f6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	77bb      	strb	r3, [r7, #30]
        break;
 8003f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d074      	beq.n	800405c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	005a      	lsls	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d916      	bls.n	8003fbc <UART_SetConfig+0x404>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d212      	bcs.n	8003fbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f023 030f 	bic.w	r3, r3, #15
 8003f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	89fa      	ldrh	r2, [r7, #14]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e04f      	b.n	800405c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77bb      	strb	r3, [r7, #30]
 8003fc0:	e04c      	b.n	800405c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d828      	bhi.n	800401a <UART_SetConfig+0x462>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0x418>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	0800401b 	.word	0x0800401b
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	0800401b 	.word	0x0800401b
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7ff f97a 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61b8      	str	r0, [r7, #24]
        break;
 8003ffa:	e013      	b.n	8004024 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7ff f98a 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8004000:	61b8      	str	r0, [r7, #24]
        break;
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <UART_SetConfig+0x4c4>)
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e00c      	b.n	8004024 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7ff f85d 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 800400e:	61b8      	str	r0, [r7, #24]
        break;
 8004010:	e008      	b.n	8004024 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e004      	b.n	8004024 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	77bb      	strb	r3, [r7, #30]
        break;
 8004022:	bf00      	nop
    }

    if (pclk != 0U)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085a      	lsrs	r2, r3, #1
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	441a      	add	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b0f      	cmp	r3, #15
 8004042:	d909      	bls.n	8004058 <UART_SetConfig+0x4a0>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d205      	bcs.n	8004058 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e001      	b.n	800405c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004068:	7fbb      	ldrb	r3, [r7, #30]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40007c00 	.word	0x40007c00
 8004078:	40023800 	.word	0x40023800
 800407c:	00f42400 	.word	0x00f42400

08004080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01a      	beq.n	8004196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417e:	d10a      	bne.n	8004196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d4:	f7fd fc74 	bl	8001ac0 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d10e      	bne.n	8004206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f81b 	bl	8004232 <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e011      	b.n	800422a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b09c      	sub	sp, #112	; 0x70
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004242:	e0a7      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	f000 80a3 	beq.w	8004394 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fd fc37 	bl	8001ac0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <UART_WaitOnFlagUntilTimeout+0x32>
 800425e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004260:	2b00      	cmp	r3, #0
 8004262:	d13f      	bne.n	80042e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004278:	667b      	str	r3, [r7, #100]	; 0x64
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004284:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	663b      	str	r3, [r7, #96]	; 0x60
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e068      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d050      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004300:	d148      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
 800432c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e6      	bne.n	800430c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	613b      	str	r3, [r7, #16]
   return(result);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	66bb      	str	r3, [r7, #104]	; 0x68
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800435e:	623a      	str	r2, [r7, #32]
 8004360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	69f9      	ldr	r1, [r7, #28]
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	61bb      	str	r3, [r7, #24]
   return(result);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e5      	bne.n	800433e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e010      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	f43f af48 	beq.w	8004244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3770      	adds	r7, #112	; 0x70
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 001c 	add.w	r0, r7, #28
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d120      	bne.n	800441a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <USB_CoreInit+0xac>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa96 	bl	8004940 <USB_CoreReset>
 8004414:	4603      	mov	r3, r0
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e010      	b.n	800443c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa8a 	bl	8004940 <USB_CoreReset>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10b      	bne.n	800445a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f043 0206 	orr.w	r2, r3, #6
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004466:	b004      	add	sp, #16
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	ffbdffbf 	.word	0xffbdffbf

08004470 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 0201 	bic.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d115      	bne.n	80044e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7fd fb09 	bl	8001ad8 <HAL_Delay>
      ms++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa29 	bl	8004924 <USB_GetMode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d01e      	beq.n	8004516 <USB_SetCurrentMode+0x84>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b31      	cmp	r3, #49	; 0x31
 80044dc:	d9f0      	bls.n	80044c0 <USB_SetCurrentMode+0x2e>
 80044de:	e01a      	b.n	8004516 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d115      	bne.n	8004512 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fd faf0 	bl	8001ad8 <HAL_Delay>
      ms++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa10 	bl	8004924 <USB_GetMode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <USB_SetCurrentMode+0x84>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b31      	cmp	r3, #49	; 0x31
 800450e:	d9f0      	bls.n	80044f2 <USB_SetCurrentMode+0x60>
 8004510:	e001      	b.n	8004516 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e005      	b.n	8004522 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b32      	cmp	r3, #50	; 0x32
 800451a:	d101      	bne.n	8004520 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800452c:	b084      	sub	sp, #16
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800453a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e009      	b.n	8004560 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3340      	adds	r3, #64	; 0x40
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	2200      	movs	r2, #0
 8004558:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	3301      	adds	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b0e      	cmp	r3, #14
 8004564:	d9f2      	bls.n	800454c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11c      	bne.n	80045a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457a:	f043 0302 	orr.w	r3, r3, #2
 800457e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e005      	b.n	80045b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	4619      	mov	r1, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	461a      	mov	r2, r3
 80045ce:	680b      	ldr	r3, [r1, #0]
 80045d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10c      	bne.n	80045f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045de:	2100      	movs	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f965 	bl	80048b0 <USB_SetDevSpeed>
 80045e6:	e008      	b.n	80045fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045e8:	2101      	movs	r1, #1
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f960 	bl	80048b0 <USB_SetDevSpeed>
 80045f0:	e003      	b.n	80045fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045f2:	2103      	movs	r1, #3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f95b 	bl	80048b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045fa:	2110      	movs	r1, #16
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8f3 	bl	80047e8 <USB_FlushTxFifo>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f91f 	bl	8004850 <USB_FlushRxFifo>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	461a      	mov	r2, r3
 8004624:	2300      	movs	r3, #0
 8004626:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e043      	b.n	80046ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800465c:	d118      	bne.n	8004690 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	461a      	mov	r2, r3
 8004672:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e013      	b.n	80046a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	461a      	mov	r2, r3
 8004688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e008      	b.n	80046a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	461a      	mov	r2, r3
 80046b0:	2300      	movs	r3, #0
 80046b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	461a      	mov	r2, r3
 80046c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3301      	adds	r3, #1
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3b7      	bcc.n	8004646 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e043      	b.n	8004764 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d118      	bne.n	8004726 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e013      	b.n	8004738 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	461a      	mov	r2, r3
 800471e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e008      	b.n	8004738 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	461a      	mov	r2, r3
 8004758:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800475c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3301      	adds	r3, #1
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d3b7      	bcc.n	80046dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800478c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <USB_DevInit+0x2b4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f043 0208 	orr.w	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <USB_DevInit+0x2b8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	803c3800 	.word	0x803c3800
 80047e4:	40000004 	.word	0x40000004

080047e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <USB_FlushTxFifo+0x64>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e01b      	b.n	8004840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	daf2      	bge.n	80047f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	019b      	lsls	r3, r3, #6
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a08      	ldr	r2, [pc, #32]	; (800484c <USB_FlushTxFifo+0x64>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e006      	b.n	8004840 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b20      	cmp	r3, #32
 800483c:	d0f0      	beq.n	8004820 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	00030d40 	.word	0x00030d40

08004850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a11      	ldr	r2, [pc, #68]	; (80048ac <USB_FlushRxFifo+0x5c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e018      	b.n	80048a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	daf2      	bge.n	800485c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2210      	movs	r2, #16
 800487e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <USB_FlushRxFifo+0x5c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e006      	b.n	80048a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d0f0      	beq.n	8004880 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	00030d40 	.word	0x00030d40

080048b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048fc:	f023 0303 	bic.w	r3, r3, #3
 8004900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0301 	and.w	r3, r3, #1
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <USB_CoreReset+0x64>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e01b      	b.n	8004996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	daf2      	bge.n	800494c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <USB_CoreReset+0x64>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e006      	b.n	8004996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d0f0      	beq.n	8004976 <USB_CoreReset+0x36>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	00030d40 	.word	0x00030d40

080049a8 <_ZdlPvj>:
 80049a8:	f000 b800 	b.w	80049ac <_ZdlPv>

080049ac <_ZdlPv>:
 80049ac:	f000 b82a 	b.w	8004a04 <free>

080049b0 <__errno>:
 80049b0:	4b01      	ldr	r3, [pc, #4]	; (80049b8 <__errno+0x8>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000000c 	.word	0x2000000c

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4d0d      	ldr	r5, [pc, #52]	; (80049f4 <__libc_init_array+0x38>)
 80049c0:	4c0d      	ldr	r4, [pc, #52]	; (80049f8 <__libc_init_array+0x3c>)
 80049c2:	1b64      	subs	r4, r4, r5
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	2600      	movs	r6, #0
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	4d0b      	ldr	r5, [pc, #44]	; (80049fc <__libc_init_array+0x40>)
 80049ce:	4c0c      	ldr	r4, [pc, #48]	; (8004a00 <__libc_init_array+0x44>)
 80049d0:	f000 fd26 	bl	8005420 <_init>
 80049d4:	1b64      	subs	r4, r4, r5
 80049d6:	10a4      	asrs	r4, r4, #2
 80049d8:	2600      	movs	r6, #0
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	08005524 	.word	0x08005524
 80049f8:	08005524 	.word	0x08005524
 80049fc:	08005524 	.word	0x08005524
 8004a00:	08005528 	.word	0x08005528

08004a04 <free>:
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <free+0xc>)
 8004a06:	4601      	mov	r1, r0
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	f000 b80b 	b.w	8004a24 <_free_r>
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <memset>:
 8004a14:	4402      	add	r2, r0
 8004a16:	4603      	mov	r3, r0
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d100      	bne.n	8004a1e <memset+0xa>
 8004a1c:	4770      	bx	lr
 8004a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a22:	e7f9      	b.n	8004a18 <memset+0x4>

08004a24 <_free_r>:
 8004a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a26:	2900      	cmp	r1, #0
 8004a28:	d044      	beq.n	8004ab4 <_free_r+0x90>
 8004a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a2e:	9001      	str	r0, [sp, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f1a1 0404 	sub.w	r4, r1, #4
 8004a36:	bfb8      	it	lt
 8004a38:	18e4      	addlt	r4, r4, r3
 8004a3a:	f000 fc39 	bl	80052b0 <__malloc_lock>
 8004a3e:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <_free_r+0x94>)
 8004a40:	9801      	ldr	r0, [sp, #4]
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	b933      	cbnz	r3, 8004a54 <_free_r+0x30>
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	6014      	str	r4, [r2, #0]
 8004a4a:	b003      	add	sp, #12
 8004a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a50:	f000 bc34 	b.w	80052bc <__malloc_unlock>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d908      	bls.n	8004a6a <_free_r+0x46>
 8004a58:	6825      	ldr	r5, [r4, #0]
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf01      	itttt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	e7ed      	b.n	8004a46 <_free_r+0x22>
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b10b      	cbz	r3, 8004a74 <_free_r+0x50>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d9fa      	bls.n	8004a6a <_free_r+0x46>
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	1855      	adds	r5, r2, r1
 8004a78:	42a5      	cmp	r5, r4
 8004a7a:	d10b      	bne.n	8004a94 <_free_r+0x70>
 8004a7c:	6824      	ldr	r4, [r4, #0]
 8004a7e:	4421      	add	r1, r4
 8004a80:	1854      	adds	r4, r2, r1
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	d1e0      	bne.n	8004a4a <_free_r+0x26>
 8004a88:	681c      	ldr	r4, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	6053      	str	r3, [r2, #4]
 8004a8e:	4421      	add	r1, r4
 8004a90:	6011      	str	r1, [r2, #0]
 8004a92:	e7da      	b.n	8004a4a <_free_r+0x26>
 8004a94:	d902      	bls.n	8004a9c <_free_r+0x78>
 8004a96:	230c      	movs	r3, #12
 8004a98:	6003      	str	r3, [r0, #0]
 8004a9a:	e7d6      	b.n	8004a4a <_free_r+0x26>
 8004a9c:	6825      	ldr	r5, [r4, #0]
 8004a9e:	1961      	adds	r1, r4, r5
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf04      	itt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	bf04      	itt	eq
 8004aac:	1949      	addeq	r1, r1, r5
 8004aae:	6021      	streq	r1, [r4, #0]
 8004ab0:	6054      	str	r4, [r2, #4]
 8004ab2:	e7ca      	b.n	8004a4a <_free_r+0x26>
 8004ab4:	b003      	add	sp, #12
 8004ab6:	bd30      	pop	{r4, r5, pc}
 8004ab8:	20000854 	.word	0x20000854

08004abc <sbrk_aligned>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4e0e      	ldr	r6, [pc, #56]	; (8004af8 <sbrk_aligned+0x3c>)
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	6831      	ldr	r1, [r6, #0]
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	b911      	cbnz	r1, 8004ace <sbrk_aligned+0x12>
 8004ac8:	f000 f902 	bl	8004cd0 <_sbrk_r>
 8004acc:	6030      	str	r0, [r6, #0]
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 f8fd 	bl	8004cd0 <_sbrk_r>
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	d00a      	beq.n	8004af0 <sbrk_aligned+0x34>
 8004ada:	1cc4      	adds	r4, r0, #3
 8004adc:	f024 0403 	bic.w	r4, r4, #3
 8004ae0:	42a0      	cmp	r0, r4
 8004ae2:	d007      	beq.n	8004af4 <sbrk_aligned+0x38>
 8004ae4:	1a21      	subs	r1, r4, r0
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f8f2 	bl	8004cd0 <_sbrk_r>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d101      	bne.n	8004af4 <sbrk_aligned+0x38>
 8004af0:	f04f 34ff 	mov.w	r4, #4294967295
 8004af4:	4620      	mov	r0, r4
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	20000858 	.word	0x20000858

08004afc <_malloc_r>:
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	1ccd      	adds	r5, r1, #3
 8004b02:	f025 0503 	bic.w	r5, r5, #3
 8004b06:	3508      	adds	r5, #8
 8004b08:	2d0c      	cmp	r5, #12
 8004b0a:	bf38      	it	cc
 8004b0c:	250c      	movcc	r5, #12
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	4607      	mov	r7, r0
 8004b12:	db01      	blt.n	8004b18 <_malloc_r+0x1c>
 8004b14:	42a9      	cmp	r1, r5
 8004b16:	d905      	bls.n	8004b24 <_malloc_r+0x28>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	4630      	mov	r0, r6
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b24:	4e2e      	ldr	r6, [pc, #184]	; (8004be0 <_malloc_r+0xe4>)
 8004b26:	f000 fbc3 	bl	80052b0 <__malloc_lock>
 8004b2a:	6833      	ldr	r3, [r6, #0]
 8004b2c:	461c      	mov	r4, r3
 8004b2e:	bb34      	cbnz	r4, 8004b7e <_malloc_r+0x82>
 8004b30:	4629      	mov	r1, r5
 8004b32:	4638      	mov	r0, r7
 8004b34:	f7ff ffc2 	bl	8004abc <sbrk_aligned>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	d14d      	bne.n	8004bda <_malloc_r+0xde>
 8004b3e:	6834      	ldr	r4, [r6, #0]
 8004b40:	4626      	mov	r6, r4
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	d140      	bne.n	8004bc8 <_malloc_r+0xcc>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	eb04 0803 	add.w	r8, r4, r3
 8004b50:	f000 f8be 	bl	8004cd0 <_sbrk_r>
 8004b54:	4580      	cmp	r8, r0
 8004b56:	d13a      	bne.n	8004bce <_malloc_r+0xd2>
 8004b58:	6821      	ldr	r1, [r4, #0]
 8004b5a:	3503      	adds	r5, #3
 8004b5c:	1a6d      	subs	r5, r5, r1
 8004b5e:	f025 0503 	bic.w	r5, r5, #3
 8004b62:	3508      	adds	r5, #8
 8004b64:	2d0c      	cmp	r5, #12
 8004b66:	bf38      	it	cc
 8004b68:	250c      	movcc	r5, #12
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ffa5 	bl	8004abc <sbrk_aligned>
 8004b72:	3001      	adds	r0, #1
 8004b74:	d02b      	beq.n	8004bce <_malloc_r+0xd2>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	442b      	add	r3, r5
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	e00e      	b.n	8004b9c <_malloc_r+0xa0>
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	1b52      	subs	r2, r2, r5
 8004b82:	d41e      	bmi.n	8004bc2 <_malloc_r+0xc6>
 8004b84:	2a0b      	cmp	r2, #11
 8004b86:	d916      	bls.n	8004bb6 <_malloc_r+0xba>
 8004b88:	1961      	adds	r1, r4, r5
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	6025      	str	r5, [r4, #0]
 8004b8e:	bf18      	it	ne
 8004b90:	6059      	strne	r1, [r3, #4]
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	bf08      	it	eq
 8004b96:	6031      	streq	r1, [r6, #0]
 8004b98:	5162      	str	r2, [r4, r5]
 8004b9a:	604b      	str	r3, [r1, #4]
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	f104 060b 	add.w	r6, r4, #11
 8004ba2:	f000 fb8b 	bl	80052bc <__malloc_unlock>
 8004ba6:	f026 0607 	bic.w	r6, r6, #7
 8004baa:	1d23      	adds	r3, r4, #4
 8004bac:	1af2      	subs	r2, r6, r3
 8004bae:	d0b6      	beq.n	8004b1e <_malloc_r+0x22>
 8004bb0:	1b9b      	subs	r3, r3, r6
 8004bb2:	50a3      	str	r3, [r4, r2]
 8004bb4:	e7b3      	b.n	8004b1e <_malloc_r+0x22>
 8004bb6:	6862      	ldr	r2, [r4, #4]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	bf0c      	ite	eq
 8004bbc:	6032      	streq	r2, [r6, #0]
 8004bbe:	605a      	strne	r2, [r3, #4]
 8004bc0:	e7ec      	b.n	8004b9c <_malloc_r+0xa0>
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	6864      	ldr	r4, [r4, #4]
 8004bc6:	e7b2      	b.n	8004b2e <_malloc_r+0x32>
 8004bc8:	4634      	mov	r4, r6
 8004bca:	6876      	ldr	r6, [r6, #4]
 8004bcc:	e7b9      	b.n	8004b42 <_malloc_r+0x46>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f000 fb72 	bl	80052bc <__malloc_unlock>
 8004bd8:	e7a1      	b.n	8004b1e <_malloc_r+0x22>
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	e7de      	b.n	8004b9c <_malloc_r+0xa0>
 8004bde:	bf00      	nop
 8004be0:	20000854 	.word	0x20000854

08004be4 <_puts_r>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	460e      	mov	r6, r1
 8004be8:	4605      	mov	r5, r0
 8004bea:	b118      	cbz	r0, 8004bf4 <_puts_r+0x10>
 8004bec:	6983      	ldr	r3, [r0, #24]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <_puts_r+0x10>
 8004bf0:	f000 fa58 	bl	80050a4 <__sinit>
 8004bf4:	69ab      	ldr	r3, [r5, #24]
 8004bf6:	68ac      	ldr	r4, [r5, #8]
 8004bf8:	b913      	cbnz	r3, 8004c00 <_puts_r+0x1c>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 fa52 	bl	80050a4 <__sinit>
 8004c00:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <_puts_r+0xd0>)
 8004c02:	429c      	cmp	r4, r3
 8004c04:	d120      	bne.n	8004c48 <_puts_r+0x64>
 8004c06:	686c      	ldr	r4, [r5, #4]
 8004c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c0a:	07db      	lsls	r3, r3, #31
 8004c0c:	d405      	bmi.n	8004c1a <_puts_r+0x36>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	0598      	lsls	r0, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_puts_r+0x36>
 8004c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c16:	f000 fae3 	bl	80051e0 <__retarget_lock_acquire_recursive>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	0719      	lsls	r1, r3, #28
 8004c1e:	d51d      	bpl.n	8004c5c <_puts_r+0x78>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	b1db      	cbz	r3, 8004c5c <_puts_r+0x78>
 8004c24:	3e01      	subs	r6, #1
 8004c26:	68a3      	ldr	r3, [r4, #8]
 8004c28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	60a3      	str	r3, [r4, #8]
 8004c30:	bb39      	cbnz	r1, 8004c82 <_puts_r+0x9e>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da38      	bge.n	8004ca8 <_puts_r+0xc4>
 8004c36:	4622      	mov	r2, r4
 8004c38:	210a      	movs	r1, #10
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f858 	bl	8004cf0 <__swbuf_r>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d011      	beq.n	8004c68 <_puts_r+0x84>
 8004c44:	250a      	movs	r5, #10
 8004c46:	e011      	b.n	8004c6c <_puts_r+0x88>
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <_puts_r+0xd4>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d101      	bne.n	8004c52 <_puts_r+0x6e>
 8004c4e:	68ac      	ldr	r4, [r5, #8]
 8004c50:	e7da      	b.n	8004c08 <_puts_r+0x24>
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <_puts_r+0xd8>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	bf08      	it	eq
 8004c58:	68ec      	ldreq	r4, [r5, #12]
 8004c5a:	e7d5      	b.n	8004c08 <_puts_r+0x24>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f898 	bl	8004d94 <__swsetup_r>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d0dd      	beq.n	8004c24 <_puts_r+0x40>
 8004c68:	f04f 35ff 	mov.w	r5, #4294967295
 8004c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c6e:	07da      	lsls	r2, r3, #31
 8004c70:	d405      	bmi.n	8004c7e <_puts_r+0x9a>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	059b      	lsls	r3, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_puts_r+0x9a>
 8004c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7a:	f000 fab2 	bl	80051e2 <__retarget_lock_release_recursive>
 8004c7e:	4628      	mov	r0, r5
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da04      	bge.n	8004c90 <_puts_r+0xac>
 8004c86:	69a2      	ldr	r2, [r4, #24]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	dc06      	bgt.n	8004c9a <_puts_r+0xb6>
 8004c8c:	290a      	cmp	r1, #10
 8004c8e:	d004      	beq.n	8004c9a <_puts_r+0xb6>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	6022      	str	r2, [r4, #0]
 8004c96:	7019      	strb	r1, [r3, #0]
 8004c98:	e7c5      	b.n	8004c26 <_puts_r+0x42>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 f827 	bl	8004cf0 <__swbuf_r>
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d1bf      	bne.n	8004c26 <_puts_r+0x42>
 8004ca6:	e7df      	b.n	8004c68 <_puts_r+0x84>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	250a      	movs	r5, #10
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	6022      	str	r2, [r4, #0]
 8004cb0:	701d      	strb	r5, [r3, #0]
 8004cb2:	e7db      	b.n	8004c6c <_puts_r+0x88>
 8004cb4:	080054dc 	.word	0x080054dc
 8004cb8:	080054fc 	.word	0x080054fc
 8004cbc:	080054bc 	.word	0x080054bc

08004cc0 <puts>:
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <puts+0xc>)
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f7ff bf8d 	b.w	8004be4 <_puts_r>
 8004cca:	bf00      	nop
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <_sbrk_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4d06      	ldr	r5, [pc, #24]	; (8004cec <_sbrk_r+0x1c>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	f7fc fc52 	bl	8001584 <_sbrk>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_sbrk_r+0x1a>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_sbrk_r+0x1a>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000860 	.word	0x20000860

08004cf0 <__swbuf_r>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	b118      	cbz	r0, 8004d02 <__swbuf_r+0x12>
 8004cfa:	6983      	ldr	r3, [r0, #24]
 8004cfc:	b90b      	cbnz	r3, 8004d02 <__swbuf_r+0x12>
 8004cfe:	f000 f9d1 	bl	80050a4 <__sinit>
 8004d02:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <__swbuf_r+0x98>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	d12b      	bne.n	8004d60 <__swbuf_r+0x70>
 8004d08:	686c      	ldr	r4, [r5, #4]
 8004d0a:	69a3      	ldr	r3, [r4, #24]
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	071a      	lsls	r2, r3, #28
 8004d12:	d52f      	bpl.n	8004d74 <__swbuf_r+0x84>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	b36b      	cbz	r3, 8004d74 <__swbuf_r+0x84>
 8004d18:	6923      	ldr	r3, [r4, #16]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1ac0      	subs	r0, r0, r3
 8004d1e:	6963      	ldr	r3, [r4, #20]
 8004d20:	b2f6      	uxtb	r6, r6
 8004d22:	4283      	cmp	r3, r0
 8004d24:	4637      	mov	r7, r6
 8004d26:	dc04      	bgt.n	8004d32 <__swbuf_r+0x42>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f926 	bl	8004f7c <_fflush_r>
 8004d30:	bb30      	cbnz	r0, 8004d80 <__swbuf_r+0x90>
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	60a3      	str	r3, [r4, #8]
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	701e      	strb	r6, [r3, #0]
 8004d40:	6963      	ldr	r3, [r4, #20]
 8004d42:	3001      	adds	r0, #1
 8004d44:	4283      	cmp	r3, r0
 8004d46:	d004      	beq.n	8004d52 <__swbuf_r+0x62>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d506      	bpl.n	8004d5c <__swbuf_r+0x6c>
 8004d4e:	2e0a      	cmp	r6, #10
 8004d50:	d104      	bne.n	8004d5c <__swbuf_r+0x6c>
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f911 	bl	8004f7c <_fflush_r>
 8004d5a:	b988      	cbnz	r0, 8004d80 <__swbuf_r+0x90>
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <__swbuf_r+0x9c>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swbuf_r+0x7a>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7cf      	b.n	8004d0a <__swbuf_r+0x1a>
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <__swbuf_r+0xa0>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7ca      	b.n	8004d0a <__swbuf_r+0x1a>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f80c 	bl	8004d94 <__swsetup_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d0cb      	beq.n	8004d18 <__swbuf_r+0x28>
 8004d80:	f04f 37ff 	mov.w	r7, #4294967295
 8004d84:	e7ea      	b.n	8004d5c <__swbuf_r+0x6c>
 8004d86:	bf00      	nop
 8004d88:	080054dc 	.word	0x080054dc
 8004d8c:	080054fc 	.word	0x080054fc
 8004d90:	080054bc 	.word	0x080054bc

08004d94 <__swsetup_r>:
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <__swsetup_r+0xcc>)
 8004d96:	b570      	push	{r4, r5, r6, lr}
 8004d98:	681d      	ldr	r5, [r3, #0]
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	b125      	cbz	r5, 8004daa <__swsetup_r+0x16>
 8004da0:	69ab      	ldr	r3, [r5, #24]
 8004da2:	b913      	cbnz	r3, 8004daa <__swsetup_r+0x16>
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f97d 	bl	80050a4 <__sinit>
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <__swsetup_r+0xd0>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d10f      	bne.n	8004dd0 <__swsetup_r+0x3c>
 8004db0:	686c      	ldr	r4, [r5, #4]
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004db8:	0719      	lsls	r1, r3, #28
 8004dba:	d42c      	bmi.n	8004e16 <__swsetup_r+0x82>
 8004dbc:	06dd      	lsls	r5, r3, #27
 8004dbe:	d411      	bmi.n	8004de4 <__swsetup_r+0x50>
 8004dc0:	2309      	movs	r3, #9
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dc8:	81a3      	strh	r3, [r4, #12]
 8004dca:	f04f 30ff 	mov.w	r0, #4294967295
 8004dce:	e03e      	b.n	8004e4e <__swsetup_r+0xba>
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <__swsetup_r+0xd4>)
 8004dd2:	429c      	cmp	r4, r3
 8004dd4:	d101      	bne.n	8004dda <__swsetup_r+0x46>
 8004dd6:	68ac      	ldr	r4, [r5, #8]
 8004dd8:	e7eb      	b.n	8004db2 <__swsetup_r+0x1e>
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <__swsetup_r+0xd8>)
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	bf08      	it	eq
 8004de0:	68ec      	ldreq	r4, [r5, #12]
 8004de2:	e7e6      	b.n	8004db2 <__swsetup_r+0x1e>
 8004de4:	0758      	lsls	r0, r3, #29
 8004de6:	d512      	bpl.n	8004e0e <__swsetup_r+0x7a>
 8004de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dea:	b141      	cbz	r1, 8004dfe <__swsetup_r+0x6a>
 8004dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df0:	4299      	cmp	r1, r3
 8004df2:	d002      	beq.n	8004dfa <__swsetup_r+0x66>
 8004df4:	4630      	mov	r0, r6
 8004df6:	f7ff fe15 	bl	8004a24 <_free_r>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	2300      	movs	r3, #0
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	b94b      	cbnz	r3, 8004e2e <__swsetup_r+0x9a>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d003      	beq.n	8004e2e <__swsetup_r+0x9a>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f000 fa01 	bl	8005230 <__smakebuf_r>
 8004e2e:	89a0      	ldrh	r0, [r4, #12]
 8004e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e34:	f010 0301 	ands.w	r3, r0, #1
 8004e38:	d00a      	beq.n	8004e50 <__swsetup_r+0xbc>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60a3      	str	r3, [r4, #8]
 8004e3e:	6963      	ldr	r3, [r4, #20]
 8004e40:	425b      	negs	r3, r3
 8004e42:	61a3      	str	r3, [r4, #24]
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	b943      	cbnz	r3, 8004e5a <__swsetup_r+0xc6>
 8004e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e4c:	d1ba      	bne.n	8004dc4 <__swsetup_r+0x30>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	0781      	lsls	r1, r0, #30
 8004e52:	bf58      	it	pl
 8004e54:	6963      	ldrpl	r3, [r4, #20]
 8004e56:	60a3      	str	r3, [r4, #8]
 8004e58:	e7f4      	b.n	8004e44 <__swsetup_r+0xb0>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e7f7      	b.n	8004e4e <__swsetup_r+0xba>
 8004e5e:	bf00      	nop
 8004e60:	2000000c 	.word	0x2000000c
 8004e64:	080054dc 	.word	0x080054dc
 8004e68:	080054fc 	.word	0x080054fc
 8004e6c:	080054bc 	.word	0x080054bc

08004e70 <__sflush_r>:
 8004e70:	898a      	ldrh	r2, [r1, #12]
 8004e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e76:	4605      	mov	r5, r0
 8004e78:	0710      	lsls	r0, r2, #28
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	d458      	bmi.n	8004f30 <__sflush_r+0xc0>
 8004e7e:	684b      	ldr	r3, [r1, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dc05      	bgt.n	8004e90 <__sflush_r+0x20>
 8004e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	dc02      	bgt.n	8004e90 <__sflush_r+0x20>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	d0f9      	beq.n	8004e8a <__sflush_r+0x1a>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e9c:	682f      	ldr	r7, [r5, #0]
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	d032      	beq.n	8004f08 <__sflush_r+0x98>
 8004ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	075a      	lsls	r2, r3, #29
 8004ea8:	d505      	bpl.n	8004eb6 <__sflush_r+0x46>
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	1ac0      	subs	r0, r0, r3
 8004eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eb0:	b10b      	cbz	r3, 8004eb6 <__sflush_r+0x46>
 8004eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eb4:	1ac0      	subs	r0, r0, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ebc:	6a21      	ldr	r1, [r4, #32]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b0      	blx	r6
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	d106      	bne.n	8004ed6 <__sflush_r+0x66>
 8004ec8:	6829      	ldr	r1, [r5, #0]
 8004eca:	291d      	cmp	r1, #29
 8004ecc:	d82c      	bhi.n	8004f28 <__sflush_r+0xb8>
 8004ece:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <__sflush_r+0x108>)
 8004ed0:	40ca      	lsrs	r2, r1
 8004ed2:	07d6      	lsls	r6, r2, #31
 8004ed4:	d528      	bpl.n	8004f28 <__sflush_r+0xb8>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	6062      	str	r2, [r4, #4]
 8004eda:	04d9      	lsls	r1, r3, #19
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	d504      	bpl.n	8004eec <__sflush_r+0x7c>
 8004ee2:	1c42      	adds	r2, r0, #1
 8004ee4:	d101      	bne.n	8004eea <__sflush_r+0x7a>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	b903      	cbnz	r3, 8004eec <__sflush_r+0x7c>
 8004eea:	6560      	str	r0, [r4, #84]	; 0x54
 8004eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eee:	602f      	str	r7, [r5, #0]
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d0ca      	beq.n	8004e8a <__sflush_r+0x1a>
 8004ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	d002      	beq.n	8004f02 <__sflush_r+0x92>
 8004efc:	4628      	mov	r0, r5
 8004efe:	f7ff fd91 	bl	8004a24 <_free_r>
 8004f02:	2000      	movs	r0, #0
 8004f04:	6360      	str	r0, [r4, #52]	; 0x34
 8004f06:	e7c1      	b.n	8004e8c <__sflush_r+0x1c>
 8004f08:	6a21      	ldr	r1, [r4, #32]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b0      	blx	r6
 8004f10:	1c41      	adds	r1, r0, #1
 8004f12:	d1c7      	bne.n	8004ea4 <__sflush_r+0x34>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0c4      	beq.n	8004ea4 <__sflush_r+0x34>
 8004f1a:	2b1d      	cmp	r3, #29
 8004f1c:	d001      	beq.n	8004f22 <__sflush_r+0xb2>
 8004f1e:	2b16      	cmp	r3, #22
 8004f20:	d101      	bne.n	8004f26 <__sflush_r+0xb6>
 8004f22:	602f      	str	r7, [r5, #0]
 8004f24:	e7b1      	b.n	8004e8a <__sflush_r+0x1a>
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	e7ad      	b.n	8004e8c <__sflush_r+0x1c>
 8004f30:	690f      	ldr	r7, [r1, #16]
 8004f32:	2f00      	cmp	r7, #0
 8004f34:	d0a9      	beq.n	8004e8a <__sflush_r+0x1a>
 8004f36:	0793      	lsls	r3, r2, #30
 8004f38:	680e      	ldr	r6, [r1, #0]
 8004f3a:	bf08      	it	eq
 8004f3c:	694b      	ldreq	r3, [r1, #20]
 8004f3e:	600f      	str	r7, [r1, #0]
 8004f40:	bf18      	it	ne
 8004f42:	2300      	movne	r3, #0
 8004f44:	eba6 0807 	sub.w	r8, r6, r7
 8004f48:	608b      	str	r3, [r1, #8]
 8004f4a:	f1b8 0f00 	cmp.w	r8, #0
 8004f4e:	dd9c      	ble.n	8004e8a <__sflush_r+0x1a>
 8004f50:	6a21      	ldr	r1, [r4, #32]
 8004f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f54:	4643      	mov	r3, r8
 8004f56:	463a      	mov	r2, r7
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b0      	blx	r6
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	dc06      	bgt.n	8004f6e <__sflush_r+0xfe>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	e78e      	b.n	8004e8c <__sflush_r+0x1c>
 8004f6e:	4407      	add	r7, r0
 8004f70:	eba8 0800 	sub.w	r8, r8, r0
 8004f74:	e7e9      	b.n	8004f4a <__sflush_r+0xda>
 8004f76:	bf00      	nop
 8004f78:	20400001 	.word	0x20400001

08004f7c <_fflush_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	690b      	ldr	r3, [r1, #16]
 8004f80:	4605      	mov	r5, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b913      	cbnz	r3, 8004f8c <_fflush_r+0x10>
 8004f86:	2500      	movs	r5, #0
 8004f88:	4628      	mov	r0, r5
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	b118      	cbz	r0, 8004f96 <_fflush_r+0x1a>
 8004f8e:	6983      	ldr	r3, [r0, #24]
 8004f90:	b90b      	cbnz	r3, 8004f96 <_fflush_r+0x1a>
 8004f92:	f000 f887 	bl	80050a4 <__sinit>
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <_fflush_r+0x6c>)
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	d11b      	bne.n	8004fd4 <_fflush_r+0x58>
 8004f9c:	686c      	ldr	r4, [r5, #4]
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ef      	beq.n	8004f86 <_fflush_r+0xa>
 8004fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fa8:	07d0      	lsls	r0, r2, #31
 8004faa:	d404      	bmi.n	8004fb6 <_fflush_r+0x3a>
 8004fac:	0599      	lsls	r1, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_fflush_r+0x3a>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f000 f915 	bl	80051e0 <__retarget_lock_acquire_recursive>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f7ff ff59 	bl	8004e70 <__sflush_r>
 8004fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fc0:	07da      	lsls	r2, r3, #31
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	d4e0      	bmi.n	8004f88 <_fflush_r+0xc>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	059b      	lsls	r3, r3, #22
 8004fca:	d4dd      	bmi.n	8004f88 <_fflush_r+0xc>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fce:	f000 f908 	bl	80051e2 <__retarget_lock_release_recursive>
 8004fd2:	e7d9      	b.n	8004f88 <_fflush_r+0xc>
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <_fflush_r+0x70>)
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	d101      	bne.n	8004fde <_fflush_r+0x62>
 8004fda:	68ac      	ldr	r4, [r5, #8]
 8004fdc:	e7df      	b.n	8004f9e <_fflush_r+0x22>
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <_fflush_r+0x74>)
 8004fe0:	429c      	cmp	r4, r3
 8004fe2:	bf08      	it	eq
 8004fe4:	68ec      	ldreq	r4, [r5, #12]
 8004fe6:	e7da      	b.n	8004f9e <_fflush_r+0x22>
 8004fe8:	080054dc 	.word	0x080054dc
 8004fec:	080054fc 	.word	0x080054fc
 8004ff0:	080054bc 	.word	0x080054bc

08004ff4 <std>:
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8004ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005002:	6083      	str	r3, [r0, #8]
 8005004:	8181      	strh	r1, [r0, #12]
 8005006:	6643      	str	r3, [r0, #100]	; 0x64
 8005008:	81c2      	strh	r2, [r0, #14]
 800500a:	6183      	str	r3, [r0, #24]
 800500c:	4619      	mov	r1, r3
 800500e:	2208      	movs	r2, #8
 8005010:	305c      	adds	r0, #92	; 0x5c
 8005012:	f7ff fcff 	bl	8004a14 <memset>
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <std+0x38>)
 8005018:	6263      	str	r3, [r4, #36]	; 0x24
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <std+0x3c>)
 800501c:	62a3      	str	r3, [r4, #40]	; 0x28
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <std+0x40>)
 8005020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <std+0x44>)
 8005024:	6224      	str	r4, [r4, #32]
 8005026:	6323      	str	r3, [r4, #48]	; 0x30
 8005028:	bd10      	pop	{r4, pc}
 800502a:	bf00      	nop
 800502c:	080052c9 	.word	0x080052c9
 8005030:	080052eb 	.word	0x080052eb
 8005034:	08005323 	.word	0x08005323
 8005038:	08005347 	.word	0x08005347

0800503c <_cleanup_r>:
 800503c:	4901      	ldr	r1, [pc, #4]	; (8005044 <_cleanup_r+0x8>)
 800503e:	f000 b8af 	b.w	80051a0 <_fwalk_reent>
 8005042:	bf00      	nop
 8005044:	08004f7d 	.word	0x08004f7d

08005048 <__sfmoreglue>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	2268      	movs	r2, #104	; 0x68
 800504c:	1e4d      	subs	r5, r1, #1
 800504e:	4355      	muls	r5, r2
 8005050:	460e      	mov	r6, r1
 8005052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005056:	f7ff fd51 	bl	8004afc <_malloc_r>
 800505a:	4604      	mov	r4, r0
 800505c:	b140      	cbz	r0, 8005070 <__sfmoreglue+0x28>
 800505e:	2100      	movs	r1, #0
 8005060:	e9c0 1600 	strd	r1, r6, [r0]
 8005064:	300c      	adds	r0, #12
 8005066:	60a0      	str	r0, [r4, #8]
 8005068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800506c:	f7ff fcd2 	bl	8004a14 <memset>
 8005070:	4620      	mov	r0, r4
 8005072:	bd70      	pop	{r4, r5, r6, pc}

08005074 <__sfp_lock_acquire>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sfp_lock_acquire+0x8>)
 8005076:	f000 b8b3 	b.w	80051e0 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	2000085d 	.word	0x2000085d

08005080 <__sfp_lock_release>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sfp_lock_release+0x8>)
 8005082:	f000 b8ae 	b.w	80051e2 <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	2000085d 	.word	0x2000085d

0800508c <__sinit_lock_acquire>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__sinit_lock_acquire+0x8>)
 800508e:	f000 b8a7 	b.w	80051e0 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	2000085e 	.word	0x2000085e

08005098 <__sinit_lock_release>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__sinit_lock_release+0x8>)
 800509a:	f000 b8a2 	b.w	80051e2 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	2000085e 	.word	0x2000085e

080050a4 <__sinit>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4604      	mov	r4, r0
 80050a8:	f7ff fff0 	bl	800508c <__sinit_lock_acquire>
 80050ac:	69a3      	ldr	r3, [r4, #24]
 80050ae:	b11b      	cbz	r3, 80050b8 <__sinit+0x14>
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f7ff bff0 	b.w	8005098 <__sinit_lock_release>
 80050b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050bc:	6523      	str	r3, [r4, #80]	; 0x50
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <__sinit+0x68>)
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <__sinit+0x6c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	bf04      	itt	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	61a3      	streq	r3, [r4, #24]
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 f820 	bl	8005114 <__sfp>
 80050d4:	6060      	str	r0, [r4, #4]
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 f81c 	bl	8005114 <__sfp>
 80050dc:	60a0      	str	r0, [r4, #8]
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 f818 	bl	8005114 <__sfp>
 80050e4:	2200      	movs	r2, #0
 80050e6:	60e0      	str	r0, [r4, #12]
 80050e8:	2104      	movs	r1, #4
 80050ea:	6860      	ldr	r0, [r4, #4]
 80050ec:	f7ff ff82 	bl	8004ff4 <std>
 80050f0:	68a0      	ldr	r0, [r4, #8]
 80050f2:	2201      	movs	r2, #1
 80050f4:	2109      	movs	r1, #9
 80050f6:	f7ff ff7d 	bl	8004ff4 <std>
 80050fa:	68e0      	ldr	r0, [r4, #12]
 80050fc:	2202      	movs	r2, #2
 80050fe:	2112      	movs	r1, #18
 8005100:	f7ff ff78 	bl	8004ff4 <std>
 8005104:	2301      	movs	r3, #1
 8005106:	61a3      	str	r3, [r4, #24]
 8005108:	e7d2      	b.n	80050b0 <__sinit+0xc>
 800510a:	bf00      	nop
 800510c:	080054b8 	.word	0x080054b8
 8005110:	0800503d 	.word	0x0800503d

08005114 <__sfp>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	4607      	mov	r7, r0
 8005118:	f7ff ffac 	bl	8005074 <__sfp_lock_acquire>
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <__sfp+0x84>)
 800511e:	681e      	ldr	r6, [r3, #0]
 8005120:	69b3      	ldr	r3, [r6, #24]
 8005122:	b913      	cbnz	r3, 800512a <__sfp+0x16>
 8005124:	4630      	mov	r0, r6
 8005126:	f7ff ffbd 	bl	80050a4 <__sinit>
 800512a:	3648      	adds	r6, #72	; 0x48
 800512c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005130:	3b01      	subs	r3, #1
 8005132:	d503      	bpl.n	800513c <__sfp+0x28>
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	b30b      	cbz	r3, 800517c <__sfp+0x68>
 8005138:	6836      	ldr	r6, [r6, #0]
 800513a:	e7f7      	b.n	800512c <__sfp+0x18>
 800513c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005140:	b9d5      	cbnz	r5, 8005178 <__sfp+0x64>
 8005142:	4b16      	ldr	r3, [pc, #88]	; (800519c <__sfp+0x88>)
 8005144:	60e3      	str	r3, [r4, #12]
 8005146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800514a:	6665      	str	r5, [r4, #100]	; 0x64
 800514c:	f000 f847 	bl	80051de <__retarget_lock_init_recursive>
 8005150:	f7ff ff96 	bl	8005080 <__sfp_lock_release>
 8005154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800515c:	6025      	str	r5, [r4, #0]
 800515e:	61a5      	str	r5, [r4, #24]
 8005160:	2208      	movs	r2, #8
 8005162:	4629      	mov	r1, r5
 8005164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005168:	f7ff fc54 	bl	8004a14 <memset>
 800516c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005174:	4620      	mov	r0, r4
 8005176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005178:	3468      	adds	r4, #104	; 0x68
 800517a:	e7d9      	b.n	8005130 <__sfp+0x1c>
 800517c:	2104      	movs	r1, #4
 800517e:	4638      	mov	r0, r7
 8005180:	f7ff ff62 	bl	8005048 <__sfmoreglue>
 8005184:	4604      	mov	r4, r0
 8005186:	6030      	str	r0, [r6, #0]
 8005188:	2800      	cmp	r0, #0
 800518a:	d1d5      	bne.n	8005138 <__sfp+0x24>
 800518c:	f7ff ff78 	bl	8005080 <__sfp_lock_release>
 8005190:	230c      	movs	r3, #12
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	e7ee      	b.n	8005174 <__sfp+0x60>
 8005196:	bf00      	nop
 8005198:	080054b8 	.word	0x080054b8
 800519c:	ffff0001 	.word	0xffff0001

080051a0 <_fwalk_reent>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4606      	mov	r6, r0
 80051a6:	4688      	mov	r8, r1
 80051a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051ac:	2700      	movs	r7, #0
 80051ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b2:	f1b9 0901 	subs.w	r9, r9, #1
 80051b6:	d505      	bpl.n	80051c4 <_fwalk_reent+0x24>
 80051b8:	6824      	ldr	r4, [r4, #0]
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	d1f7      	bne.n	80051ae <_fwalk_reent+0xe>
 80051be:	4638      	mov	r0, r7
 80051c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c4:	89ab      	ldrh	r3, [r5, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d907      	bls.n	80051da <_fwalk_reent+0x3a>
 80051ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051ce:	3301      	adds	r3, #1
 80051d0:	d003      	beq.n	80051da <_fwalk_reent+0x3a>
 80051d2:	4629      	mov	r1, r5
 80051d4:	4630      	mov	r0, r6
 80051d6:	47c0      	blx	r8
 80051d8:	4307      	orrs	r7, r0
 80051da:	3568      	adds	r5, #104	; 0x68
 80051dc:	e7e9      	b.n	80051b2 <_fwalk_reent+0x12>

080051de <__retarget_lock_init_recursive>:
 80051de:	4770      	bx	lr

080051e0 <__retarget_lock_acquire_recursive>:
 80051e0:	4770      	bx	lr

080051e2 <__retarget_lock_release_recursive>:
 80051e2:	4770      	bx	lr

080051e4 <__swhatbuf_r>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	460e      	mov	r6, r1
 80051e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ec:	2900      	cmp	r1, #0
 80051ee:	b096      	sub	sp, #88	; 0x58
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	da08      	bge.n	8005208 <__swhatbuf_r+0x24>
 80051f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	061a      	lsls	r2, r3, #24
 8005200:	d410      	bmi.n	8005224 <__swhatbuf_r+0x40>
 8005202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005206:	e00e      	b.n	8005226 <__swhatbuf_r+0x42>
 8005208:	466a      	mov	r2, sp
 800520a:	f000 f8c3 	bl	8005394 <_fstat_r>
 800520e:	2800      	cmp	r0, #0
 8005210:	dbf1      	blt.n	80051f6 <__swhatbuf_r+0x12>
 8005212:	9a01      	ldr	r2, [sp, #4]
 8005214:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005218:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800521c:	425a      	negs	r2, r3
 800521e:	415a      	adcs	r2, r3
 8005220:	602a      	str	r2, [r5, #0]
 8005222:	e7ee      	b.n	8005202 <__swhatbuf_r+0x1e>
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	2000      	movs	r0, #0
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	b016      	add	sp, #88	; 0x58
 800522c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005230 <__smakebuf_r>:
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005234:	079d      	lsls	r5, r3, #30
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	d507      	bpl.n	800524c <__smakebuf_r+0x1c>
 800523c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2301      	movs	r3, #1
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	b002      	add	sp, #8
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	ab01      	add	r3, sp, #4
 800524e:	466a      	mov	r2, sp
 8005250:	f7ff ffc8 	bl	80051e4 <__swhatbuf_r>
 8005254:	9900      	ldr	r1, [sp, #0]
 8005256:	4605      	mov	r5, r0
 8005258:	4630      	mov	r0, r6
 800525a:	f7ff fc4f 	bl	8004afc <_malloc_r>
 800525e:	b948      	cbnz	r0, 8005274 <__smakebuf_r+0x44>
 8005260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005264:	059a      	lsls	r2, r3, #22
 8005266:	d4ef      	bmi.n	8005248 <__smakebuf_r+0x18>
 8005268:	f023 0303 	bic.w	r3, r3, #3
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	e7e3      	b.n	800523c <__smakebuf_r+0xc>
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <__smakebuf_r+0x7c>)
 8005276:	62b3      	str	r3, [r6, #40]	; 0x28
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	6163      	str	r3, [r4, #20]
 8005286:	9b01      	ldr	r3, [sp, #4]
 8005288:	6120      	str	r0, [r4, #16]
 800528a:	b15b      	cbz	r3, 80052a4 <__smakebuf_r+0x74>
 800528c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f891 	bl	80053b8 <_isatty_r>
 8005296:	b128      	cbz	r0, 80052a4 <__smakebuf_r+0x74>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	89a0      	ldrh	r0, [r4, #12]
 80052a6:	4305      	orrs	r5, r0
 80052a8:	81a5      	strh	r5, [r4, #12]
 80052aa:	e7cd      	b.n	8005248 <__smakebuf_r+0x18>
 80052ac:	0800503d 	.word	0x0800503d

080052b0 <__malloc_lock>:
 80052b0:	4801      	ldr	r0, [pc, #4]	; (80052b8 <__malloc_lock+0x8>)
 80052b2:	f7ff bf95 	b.w	80051e0 <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	2000085c 	.word	0x2000085c

080052bc <__malloc_unlock>:
 80052bc:	4801      	ldr	r0, [pc, #4]	; (80052c4 <__malloc_unlock+0x8>)
 80052be:	f7ff bf90 	b.w	80051e2 <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	2000085c 	.word	0x2000085c

080052c8 <__sread>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 f894 	bl	80053fc <_read_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	bfab      	itete	ge
 80052d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052da:	89a3      	ldrhlt	r3, [r4, #12]
 80052dc:	181b      	addge	r3, r3, r0
 80052de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e2:	bfac      	ite	ge
 80052e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e6:	81a3      	strhlt	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__swrite>:
 80052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	461f      	mov	r7, r3
 80052f0:	898b      	ldrh	r3, [r1, #12]
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	d505      	bpl.n	8005308 <__swrite+0x1e>
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2302      	movs	r3, #2
 8005302:	2200      	movs	r2, #0
 8005304:	f000 f868 	bl	80053d8 <_lseek_r>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f000 b817 	b.w	8005350 <_write_r>

08005322 <__sseek>:
 8005322:	b510      	push	{r4, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 f855 	bl	80053d8 <_lseek_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	bf15      	itete	ne
 8005334:	6560      	strne	r0, [r4, #84]	; 0x54
 8005336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533e:	81a3      	strheq	r3, [r4, #12]
 8005340:	bf18      	it	ne
 8005342:	81a3      	strhne	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__sclose>:
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 b813 	b.w	8005374 <_close_r>
	...

08005350 <_write_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d07      	ldr	r5, [pc, #28]	; (8005370 <_write_r+0x20>)
 8005354:	4604      	mov	r4, r0
 8005356:	4608      	mov	r0, r1
 8005358:	4611      	mov	r1, r2
 800535a:	2200      	movs	r2, #0
 800535c:	602a      	str	r2, [r5, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7fb febc 	bl	80010dc <_write>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_write_r+0x1e>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_write_r+0x1e>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000860 	.word	0x20000860

08005374 <_close_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d06      	ldr	r5, [pc, #24]	; (8005390 <_close_r+0x1c>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fc f8cb 	bl	800151a <_close>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_close_r+0x1a>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_close_r+0x1a>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	20000860 	.word	0x20000860

08005394 <_fstat_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d07      	ldr	r5, [pc, #28]	; (80053b4 <_fstat_r+0x20>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	f7fc f8c6 	bl	8001532 <_fstat>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d102      	bne.n	80053b0 <_fstat_r+0x1c>
 80053aa:	682b      	ldr	r3, [r5, #0]
 80053ac:	b103      	cbz	r3, 80053b0 <_fstat_r+0x1c>
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	20000860 	.word	0x20000860

080053b8 <_isatty_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_isatty_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fc f8c5 	bl	8001552 <_isatty>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_isatty_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_isatty_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20000860 	.word	0x20000860

080053d8 <_lseek_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	; (80053f8 <_lseek_r+0x20>)
 80053dc:	4604      	mov	r4, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	602a      	str	r2, [r5, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fc f8be 	bl	8001568 <_lseek>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_lseek_r+0x1e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_lseek_r+0x1e>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	20000860 	.word	0x20000860

080053fc <_read_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	; (800541c <_read_r+0x20>)
 8005400:	4604      	mov	r4, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fc f868 	bl	80014e0 <_read>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_read_r+0x1e>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_read_r+0x1e>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20000860 	.word	0x20000860

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
