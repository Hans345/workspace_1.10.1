
CPP_Blinky_Delay_not_Blocking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005478  08005478  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005480  08005480  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  080054f8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08005598  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  200001b0  08005638  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  08005638  00020864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015e68  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d11  00000000  00000000  00036048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e30  00000000  00000000  00038d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d08  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b547  00000000  00000000  0003a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000135e3  00000000  00000000  00065ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f42f2  00000000  00000000  000793c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016d6b4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000041d8  00000000  00000000  0016d704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b0 	.word	0x200001b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800537c 	.word	0x0800537c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001b4 	.word	0x200001b4
 8000204:	0800537c 	.word	0x0800537c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00b      	beq.n	8000d28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d10:	e000      	b.n	8000d14 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d12:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fe1c 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f816 	bl	8000d70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <main+0x30>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 f925 	bl	8000f98 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d4e:	f000 f877 	bl	8000e40 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d52:	f000 f8c3 	bl	8000edc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d56:	f000 f8f1 	bl	8000f3c <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf(" C Main started!\n");
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <main+0x34>)
 8000d5c:	f003 ff5e 	bl	8004c1c <puts>
	  cpp_main();
 8000d60:	f000 fdd6 	bl	8001910 <cpp_main>
	  printf(" C Main started!\n");
 8000d64:	e7f9      	b.n	8000d5a <main+0x22>
 8000d66:	bf00      	nop
 8000d68:	e000007c 	.word	0xe000007c
 8000d6c:	08005394 	.word	0x08005394

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fdf6 	bl	8004970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d94:	f001 fda6 	bl	80028e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <SystemClock_Config+0xc8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xcc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000de4:	2348      	movs	r3, #72	; 0x48
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fd85 	bl	8002904 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e00:	f000 f988 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 f813 	bl	8002e4c <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e2c:	f000 f972 	bl	8001114 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <MX_ETH_Init+0x88>)
 8000e48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e58:	22e1      	movs	r2, #225	; 0xe1
 8000e5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_ETH_Init+0x8c>)
 8000e72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <MX_ETH_Init+0x90>)
 8000e80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_ETH_Init+0x94>)
 8000e86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_ETH_Init+0x84>)
 8000e92:	f000 fed9 	bl	8001c48 <HAL_ETH_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e9c:	f000 f93a 	bl	8001114 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ea0:	2238      	movs	r2, #56	; 0x38
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000ea6:	f003 fd63 	bl	8004970 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eac:	2221      	movs	r2, #33	; 0x21
 8000eae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eb2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000eb6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_ETH_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000204 	.word	0x20000204
 8000ec8:	40028000 	.word	0x40028000
 8000ecc:	20000844 	.word	0x20000844
 8000ed0:	20000110 	.word	0x20000110
 8000ed4:	20000070 	.word	0x20000070
 8000ed8:	200001cc 	.word	0x200001cc

08000edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_USART3_UART_Init+0x5c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f20:	f002 fdaa 	bl	8003a78 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f8f3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002b4 	.word	0x200002b4
 8000f38:	40004800 	.word	0x40004800

08000f3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2206      	movs	r2, #6
 8000f4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	f001 fb67 	bl	8002652 <HAL_PCD_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f8c3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000033c 	.word	0x2000033c

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b47      	ldr	r3, [pc, #284]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a34      	ldr	r2, [pc, #208]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <MX_GPIO_Init+0x134>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <MX_GPIO_Init+0x134>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <MX_GPIO_Init+0x134>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_GPIO_Init+0x134>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_GPIO_Init+0x134>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <MX_GPIO_Init+0x134>)
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_GPIO_Init+0x134>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f244 0181 	movw	r1, #16513	; 0x4081
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <MX_GPIO_Init+0x138>)
 8001046:	f001 fad1 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	4821      	ldr	r0, [pc, #132]	; (80010d4 <MX_GPIO_Init+0x13c>)
 8001050:	f001 facc 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	481b      	ldr	r0, [pc, #108]	; (80010d8 <MX_GPIO_Init+0x140>)
 800106c:	f001 f912 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_red_Pin LD2_blue_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_red_Pin|LD2_blue_Pin;
 8001070:	f244 0381 	movw	r3, #16513	; 0x4081
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_GPIO_Init+0x138>)
 800108a:	f001 f903 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x13c>)
 80010a6:	f001 f8f5 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x13c>)
 80010be:	f001 f8e9 	bl	8002294 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3730      	adds	r7, #48	; 0x30
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40020800 	.word	0x40020800

080010dc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fdf6 	bl	8000ce8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
  }
  return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_ETH_MspInit+0x158>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f040 8096 	bne.w	80012b8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 8001222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001234:	2332      	movs	r3, #50	; 0x32
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <HAL_ETH_MspInit+0x160>)
 8001250:	f001 f820 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001254:	2386      	movs	r3, #134	; 0x86
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_ETH_MspInit+0x164>)
 8001270:	f001 f810 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001286:	230b      	movs	r3, #11
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_ETH_MspInit+0x168>)
 8001292:	f000 ffff 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001296:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_ETH_MspInit+0x16c>)
 80012b4:	f000 ffee 	bl	8002294 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	; 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40028000 	.word	0x40028000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40021800 	.word	0x40021800

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0aa      	sub	sp, #168	; 0xa8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2284      	movs	r2, #132	; 0x84
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fb39 	bl	8004970 <memset>
  if(huart->Instance==USART3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_UART_MspInit+0xb4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d13c      	bne.n	8001382 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800130e:	2300      	movs	r3, #0
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f001 ffbe 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001322:	f7ff fef7 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0xbc>)
 800137e:	f000 ff89 	bl	8002294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	37a8      	adds	r7, #168	; 0xa8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004800 	.word	0x40004800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	; 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2284      	movs	r2, #132	; 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fad9 	bl	8004970 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c6:	d159      	bne.n	800147c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 ff5d 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013e4:	f7ff fe96 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001400:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800141a:	230a      	movs	r3, #10
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001428:	f000 ff34 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4619      	mov	r1, r3
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001448:	f000 ff24 	bl	8002294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	6353      	str	r3, [r2, #52]	; 0x34
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37b0      	adds	r7, #176	; 0xb0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 fa8c 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
	}

return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:
	}
	return len;
}

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f003 f9aa 	bl	800490c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20050000 	.word	0x20050000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2000084c 	.word	0x2000084c
 80015ec:	20000868 	.word	0x20000868

080015f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 f969 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fb77 	bl	8000d38 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001658:	08005488 	.word	0x08005488
  ldr r2, =_sbss
 800165c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001660:	20000864 	.word	0x20000864

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>

08001666 <_ZN24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>:
	uint32_t DelayNoneBlocking_tickstart; 	// last_time
public:
	NoneBlockSystemTickDelay();
	virtual ~NoneBlockSystemTickDelay();

	void DelayNonBlocking_Init(uint32_t Delay) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
		DelayNoneBlocking_wait = Delay;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	605a      	str	r2, [r3, #4]
		DelayNoneBlocking_tickstart = HAL_GetTick();
 8001676:	f000 f9d1 	bl	8001a1c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
	}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>:

	uint8_t DelayNonBlocking_CheckExpiration() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		// 1: Toggle LED!
		// 0: Don't Toggle LED!
		if(HAL_GetTick() - DelayNoneBlocking_wait > DelayNoneBlocking_tickstart)
 8001690:	f000 f9c4 	bl	8001a1c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	1ad2      	subs	r2, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	bf8c      	ite	hi
 80016a4:	2301      	movhi	r3, #1
 80016a6:	2300      	movls	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <_ZN24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x34>
		{
			DelayNoneBlocking_tickstart = HAL_GetTick();
 80016ae:	f000 f9b5 	bl	8001a1c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
			return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <_ZN24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv+0x36>
		}
		else
		{
			return 0;
 80016bc:	2300      	movs	r3, #0
		}
	}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN10STM32H7Led9toggleLEDEv>:
public:
	STM32H7Led(GPIO_TypeDef* aPort,
			   uint16_t aPin);
	virtual ~STM32H7Led();

	void toggleLED(void) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(Port, Pin);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	891b      	ldrh	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f000 ffa0 	bl	800261e <HAL_GPIO_TogglePin>
	}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>:
 *      Author: raphael.baumeler
 */

#include "BlinkingLed.h"

BlinkingLed::BlinkingLed(GPIO_TypeDef *aPort, uint16_t aPin, float_t aFrequency, uint16_t aDutyCycle)	:
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	4611      	mov	r1, r2
 80016f4:	ed87 0a00 	vstr	s0, [r7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	460b      	mov	r3, r1
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	4613      	mov	r3, r2
 8001700:	80bb      	strh	r3, [r7, #4]
STM32H7Led(aPort, aPin), Frequency(aFrequency), DutyCycle(aDutyCycle)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f899 	bl	800183c <_ZN24NoneBlockSystemTickDelayC1Ev>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	88fa      	ldrh	r2, [r7, #6]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f8c2 	bl	800189c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xa8>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xac>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	619a      	str	r2, [r3, #24]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88ba      	ldrh	r2, [r7, #4]
 800172e:	839a      	strh	r2, [r3, #28]
{
	uint32_t Delay = uint32_t((1000.0/aFrequency)*(aDutyCycle/100.0)); //in ms
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7fe fecd 	bl	80004d0 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	4916      	ldr	r1, [pc, #88]	; (8001798 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb0>)
 8001740:	f7ff f848 	bl	80007d4 <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe feac 	bl	80004ac <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft+0xb4>)
 800175a:	f7ff f83b 	bl	80007d4 <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe ff0b 	bl	8000580 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f917 	bl	80009a4 <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	617b      	str	r3, [r7, #20]
	NoneBlockSystemTickDelay::DelayNonBlocking_Init(Delay);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff71 	bl	8001666 <_ZN24NoneBlockSystemTickDelay21DelayNonBlocking_InitEm>
}
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	bf00      	nop
 8001790:	080053dc 	.word	0x080053dc
 8001794:	080053ec 	.word	0x080053ec
 8001798:	408f4000 	.word	0x408f4000
 800179c:	40590000 	.word	0x40590000

080017a0 <_ZN11BlinkingLedD1Ev>:

BlinkingLed::~BlinkingLed() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <_ZN11BlinkingLedD1Ev+0x30>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <_ZN11BlinkingLedD1Ev+0x34>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	330c      	adds	r3, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f889 	bl	80018d0 <_ZN10STM32H7LedD1Ev>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f84b 	bl	800185c <_ZN24NoneBlockSystemTickDelayD1Ev>
}
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	080053dc 	.word	0x080053dc
 80017d4:	080053ec 	.word	0x080053ec

080017d8 <_ZThn12_N11BlinkingLedD1Ev>:
public:
	BlinkingLed(GPIO_TypeDef* aPort,
				uint16_t aPin,
			    float_t aFrequency=1,
			    uint16_t aDutyCycle=50);
	virtual ~BlinkingLed();
 80017d8:	f1a0 000c 	sub.w	r0, r0, #12
 80017dc:	f7ff bfe0 	b.w	80017a0 <_ZN11BlinkingLedD1Ev>

080017e0 <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
}
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffd9 	bl	80017a0 <_ZN11BlinkingLedD1Ev>
 80017ee:	2120      	movs	r1, #32
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f003 f887 	bl	8004904 <_ZdlPvj>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZThn12_N11BlinkingLedD0Ev>:
 8001800:	f1a0 000c 	sub.w	r0, r0, #12
 8001804:	f7ff bfec 	b.w	80017e0 <_ZN11BlinkingLedD0Ev>

08001808 <_ZN11BlinkingLed15processBlinkingEv>:

void BlinkingLed::processBlinking() {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if(NoneBlockSystemTickDelay::DelayNonBlocking_CheckExpiration())
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff38 	bl	8001688 <_ZN24NoneBlockSystemTickDelay32DelayNonBlocking_CheckExpirationEv>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <_ZN11BlinkingLed15processBlinkingEv+0x2a>
	{
		STM32H7Led::toggleLED();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	330c      	adds	r3, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff4a 	bl	80016c6 <_ZN10STM32H7Led9toggleLEDEv>
	}
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <_ZN24NoneBlockSystemTickDelayC1Ev>:
 *      Author: raphael.baumeler
 */

#include "NoneBlockSystemTickDelay.h"

NoneBlockSystemTickDelay::NoneBlockSystemTickDelay() {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <_ZN24NoneBlockSystemTickDelayC1Ev+0x1c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	080053fc 	.word	0x080053fc

0800185c <_ZN24NoneBlockSystemTickDelayD1Ev>:

NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <_ZN24NoneBlockSystemTickDelayD1Ev+0x1c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	080053fc 	.word	0x080053fc

0800187c <_ZN24NoneBlockSystemTickDelayD0Ev>:
NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay() {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
}
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe9 	bl	800185c <_ZN24NoneBlockSystemTickDelayD1Ev>
 800188a:	210c      	movs	r1, #12
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f003 f839 	bl	8004904 <_ZdlPvj>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>:
 *      Author: raphael.baumeler
 */

#include "STM32H7Led.h"

STM32H7Led::STM32H7Led(GPIO_TypeDef *aPort, uint16_t aPin)	:
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
Port(aPort), Pin(aPin)
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <_ZN10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	811a      	strh	r2, [r3, #8]
{
}
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	0800540c 	.word	0x0800540c

080018d0 <_ZN10STM32H7LedD1Ev>:

STM32H7Led::~STM32H7Led() {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <_ZN10STM32H7LedD1Ev+0x1c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	0800540c 	.word	0x0800540c

080018f0 <_ZN10STM32H7LedD0Ev>:
STM32H7Led::~STM32H7Led() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
}
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe9 	bl	80018d0 <_ZN10STM32H7LedD1Ev>
 80018fe:	210c      	movs	r1, #12
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f002 ffff 	bl	8004904 <_ZdlPvj>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <cpp_main>:

#include "main.h"
#include <stdio.h> //For: printf()
#include "BlinkingLed.h"

void cpp_main(){
 8001910:	b580      	push	{r7, lr}
 8001912:	b098      	sub	sp, #96	; 0x60
 8001914:	af00      	add	r7, sp, #0
	printf("CPP Main started!\n");
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <cpp_main+0x60>)
 8001918:	f003 f980 	bl	8004c1c <puts>
	BlinkingLed LED1(LD1_green_GPIO_Port, LD1_green_Pin, 2);//PB_0:  2Hz, toggle every 250ms
 800191c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001920:	2332      	movs	r3, #50	; 0x32
 8001922:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001926:	2201      	movs	r2, #1
 8001928:	4912      	ldr	r1, [pc, #72]	; (8001974 <cpp_main+0x64>)
 800192a:	f7ff fedd 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	BlinkingLed LED2(LD2_blue_GPIO_Port, LD2_blue_Pin, 1); 	//PB_7:  1Hz, toggle every 500ms
 800192e:	f107 0020 	add.w	r0, r7, #32
 8001932:	2332      	movs	r3, #50	; 0x32
 8001934:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <cpp_main+0x64>)
 800193c:	f7ff fed4 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	BlinkingLed LED3(LD3_red_GPIO_Port, LD3_red_Pin, 0.5); 	//PB_14: 0.5Hz, toggle every 1000ms
 8001940:	4638      	mov	r0, r7
 8001942:	2332      	movs	r3, #50	; 0x32
 8001944:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194c:	4909      	ldr	r1, [pc, #36]	; (8001974 <cpp_main+0x64>)
 800194e:	f7ff fecb 	bl	80016e8 <_ZN11BlinkingLedC1EP12GPIO_TypeDeftft>
	while(1){
		LED1.processBlinking();
 8001952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff56 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED2.processBlinking();
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff51 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED3.processBlinking();
 8001966:	463b      	mov	r3, r7
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff4d 	bl	8001808 <_ZN11BlinkingLed15processBlinkingEv>
		LED1.processBlinking();
 800196e:	e7f0      	b.n	8001952 <cpp_main+0x42>
 8001970:	080053a8 	.word	0x080053a8
 8001974:	40020400 	.word	0x40020400

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f92f 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f806 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fbca 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f93b 	bl	8001c2e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f911 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000850 	.word	0x20000850

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000850 	.word	0x20000850

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <__NVIC_SetPriorityGrouping>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	05fa0000 	.word	0x05fa0000

08001ac4 <__NVIC_GetPriorityGrouping>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_SetPriority>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff47 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff5c 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffb0 	bl	8001b9c <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e06a      	b.n	8001d30 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2223      	movs	r2, #35	; 0x23
 8001c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fa7b 	bl	8001168 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_ETH_Init+0xf0>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_ETH_Init+0xf0>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_ETH_Init+0xf0>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_ETH_Init+0xf4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_ETH_Init+0xf4>)
 8001c90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c94:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_ETH_Init+0xf4>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4927      	ldr	r1, [pc, #156]	; (8001d3c <HAL_ETH_Init+0xf4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_ETH_Init+0xf4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc0:	f7ff feac 	bl	8001a1c <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cc6:	e011      	b.n	8001cec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cc8:	f7ff fea8 	bl	8001a1c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cd6:	d909      	bls.n	8001cec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	22e0      	movs	r2, #224	; 0xe0
 8001ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e021      	b.n	8001d30 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e4      	bne.n	8001cc8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f958 	bl	8001fb4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f9ff 	bl	8002108 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa55 	bl	80021ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	461a      	mov	r2, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f9bd 	bl	8002098 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800

08001d40 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <ETH_SetMACConfig+0x15c>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	7c1b      	ldrb	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <ETH_SetMACConfig+0x28>
 8001d62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d66:	e000      	b.n	8001d6a <ETH_SetMACConfig+0x2a>
 8001d68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	7c5b      	ldrb	r3, [r3, #17]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <ETH_SetMACConfig+0x38>
 8001d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d76:	e000      	b.n	8001d7a <ETH_SetMACConfig+0x3a>
 8001d78:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d7a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	7fdb      	ldrb	r3, [r3, #31]
 8001d86:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d88:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	7f92      	ldrb	r2, [r2, #30]
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d102      	bne.n	8001d9e <ETH_SetMACConfig+0x5e>
 8001d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9c:	e000      	b.n	8001da0 <ETH_SetMACConfig+0x60>
 8001d9e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001da0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7f1b      	ldrb	r3, [r3, #28]
 8001da6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001da8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001db6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d102      	bne.n	8001dc8 <ETH_SetMACConfig+0x88>
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	e000      	b.n	8001dca <ETH_SetMACConfig+0x8a>
 8001dc8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	7bdb      	ldrb	r3, [r3, #15]
 8001dd0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dd2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001de0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001de2:	4313      	orrs	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff fe1a 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d101      	bne.n	8001e2e <ETH_SetMACConfig+0xee>
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	e000      	b.n	8001e30 <ETH_SetMACConfig+0xf0>
 8001e2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e30:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e3e:	2a01      	cmp	r2, #1
 8001e40:	d101      	bne.n	8001e46 <ETH_SetMACConfig+0x106>
 8001e42:	2208      	movs	r2, #8
 8001e44:	e000      	b.n	8001e48 <ETH_SetMACConfig+0x108>
 8001e46:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e48:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e50:	2a01      	cmp	r2, #1
 8001e52:	d101      	bne.n	8001e58 <ETH_SetMACConfig+0x118>
 8001e54:	2204      	movs	r2, #4
 8001e56:	e000      	b.n	8001e5a <ETH_SetMACConfig+0x11a>
 8001e58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e62:	2a01      	cmp	r2, #1
 8001e64:	d101      	bne.n	8001e6a <ETH_SetMACConfig+0x12a>
 8001e66:	2202      	movs	r2, #2
 8001e68:	e000      	b.n	8001e6c <ETH_SetMACConfig+0x12c>
 8001e6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fdd5 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	ff20810f 	.word	0xff20810f

08001ea0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <ETH_SetDMAConfig+0x110>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	7b1b      	ldrb	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetDMAConfig+0x2c>
 8001ec6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eca:	e000      	b.n	8001ece <ETH_SetDMAConfig+0x2e>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7b5b      	ldrb	r3, [r3, #13]
 8001ed2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ed4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	7f52      	ldrb	r2, [r2, #29]
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d102      	bne.n	8001ee4 <ETH_SetDMAConfig+0x44>
 8001ede:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ee2:	e000      	b.n	8001ee6 <ETH_SetDMAConfig+0x46>
 8001ee4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ee6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	7b9b      	ldrb	r3, [r3, #14]
 8001eec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001eee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ef4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	7f1b      	ldrb	r3, [r3, #28]
 8001efa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001efc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f9b      	ldrb	r3, [r3, #30]
 8001f02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7ff fd7c 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	791b      	ldrb	r3, [r3, #4]
 8001f4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fd4d 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	f8de3f23 	.word	0xf8de3f23

08001fb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0a6      	sub	sp, #152	; 0x98
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800201c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002028:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fe86 	bl	8001d40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002034:	2301      	movs	r3, #1
 8002036:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002038:	2301      	movs	r3, #1
 800203a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002042:	2301      	movs	r3, #1
 8002044:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002068:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800206a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002074:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff08 	bl	8001ea0 <ETH_SetDMAConfig>
}
 8002090:	bf00      	nop
 8002092:	3798      	adds	r7, #152	; 0x98
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3305      	adds	r3, #5
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	3204      	adds	r2, #4
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <ETH_MACAddressConfig+0x68>)
 80020ba:	4413      	add	r3, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3303      	adds	r3, #3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	061a      	lsls	r2, r3, #24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3302      	adds	r3, #2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <ETH_MACAddressConfig+0x6c>)
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6013      	str	r3, [r2, #0]
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40028040 	.word	0x40028040
 8002104:	40028044 	.word	0x40028044

08002108 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e03e      	b.n	8002194 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	3206      	adds	r2, #6
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d80c      	bhi.n	8002178 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	e004      	b.n	8002182 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3301      	adds	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d9bd      	bls.n	8002116 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e046      	b.n	8002256 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6919      	ldr	r1, [r3, #16]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002204:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800220c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	3212      	adds	r2, #18
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d80c      	bhi.n	8002246 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6919      	ldr	r1, [r3, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	e004      	b.n	8002250 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d9b5      	bls.n	80021c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e175      	b.n	80025a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8164 	bne.w	800259a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x56>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80be 	beq.w	800259a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_GPIO_Init+0x324>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_GPIO_Init+0x324>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_GPIO_Init+0x324>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002436:	4a61      	ldr	r2, [pc, #388]	; (80025bc <HAL_GPIO_Init+0x328>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d037      	beq.n	80024d2 <HAL_GPIO_Init+0x23e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_GPIO_Init+0x330>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_GPIO_Init+0x23a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <HAL_GPIO_Init+0x236>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_GPIO_Init+0x338>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d025      	beq.n	80024c6 <HAL_GPIO_Init+0x232>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x33c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x22e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <HAL_GPIO_Init+0x340>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x22a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_GPIO_Init+0x344>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x226>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_GPIO_Init+0x348>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x222>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x21e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <HAL_GPIO_Init+0x350>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x21a>
 80024aa:	2309      	movs	r3, #9
 80024ac:	e012      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ae:	230a      	movs	r3, #10
 80024b0:	e010      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024b2:	2308      	movs	r3, #8
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x328>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_GPIO_Init+0x354>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_GPIO_Init+0x354>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_GPIO_Init+0x354>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae86 	bls.w	80022b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022400 	.word	0x40022400
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43d9      	mvns	r1, r3
 800263c:	887b      	ldrh	r3, [r7, #2]
 800263e:	400b      	ands	r3, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002654:	b08f      	sub	sp, #60	; 0x3c
 8002656:	af0a      	add	r7, sp, #40	; 0x28
 8002658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e116      	b.n	8002892 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fe8a 	bl	8001398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fe92 	bl	80043cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	687e      	ldr	r6, [r7, #4]
 80026b0:	466d      	mov	r5, sp
 80026b2:	f106 0410 	add.w	r4, r6, #16
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c6:	1d33      	adds	r3, r6, #4
 80026c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f001 fe26 	bl	800431c <USB_CoreInit>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0d7      	b.n	8002892 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 fe80 	bl	80043ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e04a      	b.n	800278a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	333c      	adds	r3, #60	; 0x3c
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	b298      	uxth	r0, r3
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3344      	adds	r3, #68	; 0x44
 8002730:	4602      	mov	r2, r0
 8002732:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3340      	adds	r3, #64	; 0x40
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3348      	adds	r3, #72	; 0x48
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334c      	adds	r3, #76	; 0x4c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3354      	adds	r3, #84	; 0x54
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3af      	bcc.n	80026f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e044      	b.n	8002824 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3301      	adds	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3b5      	bcc.n	800279a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	687e      	ldr	r6, [r7, #4]
 8002836:	466d      	mov	r5, sp
 8002838:	f106 0410 	add.w	r4, r6, #16
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002848:	e885 0003 	stmia.w	r5, {r0, r1}
 800284c:	1d33      	adds	r3, r6, #4
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f001 fe19 	bl	8004488 <USB_DevInit>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e014      	b.n	8002892 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f80b 	bl	800289c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f001 ffd7 	bl	800483e <USB_DevDisconnect>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800289c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	10000003 	.word	0x10000003

080028e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000

08002904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e291      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002928:	4b96      	ldr	r3, [pc, #600]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b04      	cmp	r3, #4
 8002932:	d00c      	beq.n	800294e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002934:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d112      	bne.n	8002966 <HAL_RCC_OscConfig+0x62>
 8002940:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b8d      	ldr	r3, [pc, #564]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x130>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d168      	bne.n	8002a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e26b      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x7a>
 8002970:	4b84      	ldr	r3, [pc, #528]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a83      	ldr	r2, [pc, #524]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e02e      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x9c>
 8002986:	4b7f      	ldr	r3, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b7c      	ldr	r3, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7b      	ldr	r2, [pc, #492]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc0>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a72      	ldr	r2, [pc, #456]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xd8>
 80029c4:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6e      	ldr	r2, [pc, #440]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b6c      	ldr	r3, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6b      	ldr	r2, [pc, #428]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff f81a 	bl	8001a1c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff f816 	bl	8001a1c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e21f      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xe8>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff f806 	bl	8001a1c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff f802 	bl	8001a1c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e20b      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x110>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d069      	beq.n	8002b16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a42:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x190>
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1df      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	493d      	ldr	r1, [pc, #244]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e040      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a38      	ldr	r2, [pc, #224]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe ffb8 	bl	8001a1c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe ffb4 	bl	8001a1c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1bd      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4929      	ldr	r1, [pc, #164]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
 8002ae2:	e018      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe ff94 	bl	8001a1c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe ff90 	bl	8001a1c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e199      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d038      	beq.n	8002b94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d019      	beq.n	8002b5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe ff71 	bl	8001a1c <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe ff6d 	bl	8001a1c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e176      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x23a>
 8002b5c:	e01a      	b.n	8002b94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_RCC_OscConfig+0x280>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe ff57 	bl	8001a1c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe ff53 	bl	8001a1c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d903      	bls.n	8002b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e15c      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
 8002b84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b91      	ldr	r3, [pc, #580]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a4 	beq.w	8002cea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a87      	ldr	r2, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7e      	ldr	r2, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe ff1b 	bl	8001a1c <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe ff17 	bl	8001a1c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e120      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x31a>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e02d      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x33c>
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a69      	ldr	r2, [pc, #420]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a66      	ldr	r2, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x35e>
 8002c48:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x376>
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a5a      	ldr	r2, [pc, #360]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fecb 	bl	8001a1c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fec7 	bl	8001a1c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0ce      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCC_OscConfig+0x386>
 8002cac:	e014      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe feb5 	bl	8001a1c <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe feb1 	bl	8001a1c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a4 	beq.w	8002e3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d06b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d149      	bne.n	8002d9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe82 	bl	8001a1c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fe7e 	bl	8001a1c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e087      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fe52 	bl	8001a1c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fe4e 	bl	8001a1c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e057      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x478>
 8002d9a:	e04f      	b.n	8002e3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe38 	bl	8001a1c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fe34 	bl	8001a1c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e03d      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4ac>
 8002dce:	e035      	b.n	8002e3c <HAL_RCC_OscConfig+0x538>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x544>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d0      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4965      	ldr	r1, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d040      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e073      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4936      	ldr	r1, [pc, #216]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe fd6c 	bl	8001a1c <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7fe fd68 	bl	8001a1c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e053      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d210      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	4922      	ldr	r1, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1d0>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fcc8 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	080053bc 	.word	0x080053bc
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003028:	b094      	sub	sp, #80	; 0x50
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
 8003030:	2300      	movs	r3, #0
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003034:	2300      	movs	r3, #0
 8003036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b79      	ldr	r3, [pc, #484]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80e1 	bhi.w	8003210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e0db      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 800305a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800305c:	e0db      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_RCC_GetSysClockFreq+0x208>)
 8003060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003062:	e0d8      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	63bb      	str	r3, [r7, #56]	; 0x38
 8003084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
 8003092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4621      	mov	r1, r4
 80030b0:	1a51      	subs	r1, r2, r1
 80030b2:	6139      	str	r1, [r7, #16]
 80030b4:	4629      	mov	r1, r5
 80030b6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c8:	4659      	mov	r1, fp
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d2:	4651      	mov	r1, sl
 80030d4:	018a      	lsls	r2, r1, #6
 80030d6:	4651      	mov	r1, sl
 80030d8:	ebb2 0801 	subs.w	r8, r2, r1
 80030dc:	4659      	mov	r1, fp
 80030de:	eb63 0901 	sbc.w	r9, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb18 0303 	adds.w	r3, r8, r3
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	462b      	mov	r3, r5
 8003104:	eb49 0303 	adc.w	r3, r9, r3
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003116:	4629      	mov	r1, r5
 8003118:	024b      	lsls	r3, r1, #9
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003120:	4621      	mov	r1, r4
 8003122:	024a      	lsls	r2, r1, #9
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	2200      	movs	r2, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
 800312e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003134:	f7fd fc56 	bl	80009e4 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003140:	e058      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	2200      	movs	r2, #0
 800314a:	4618      	mov	r0, r3
 800314c:	4611      	mov	r1, r2
 800314e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0159      	lsls	r1, r3, #5
 800316a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316e:	0150      	lsls	r0, r2, #5
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4641      	mov	r1, r8
 8003176:	ebb2 0a01 	subs.w	sl, r2, r1
 800317a:	4649      	mov	r1, r9
 800317c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800318c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003194:	ebb2 040a 	subs.w	r4, r2, sl
 8003198:	eb63 050b 	sbc.w	r5, r3, fp
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	00eb      	lsls	r3, r5, #3
 80031a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031aa:	00e2      	lsls	r2, r4, #3
 80031ac:	4614      	mov	r4, r2
 80031ae:	461d      	mov	r5, r3
 80031b0:	4643      	mov	r3, r8
 80031b2:	18e3      	adds	r3, r4, r3
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	464b      	mov	r3, r9
 80031b8:	eb45 0303 	adc.w	r3, r5, r3
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ca:	4629      	mov	r1, r5
 80031cc:	028b      	lsls	r3, r1, #10
 80031ce:	4621      	mov	r1, r4
 80031d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d4:	4621      	mov	r1, r4
 80031d6:	028a      	lsls	r2, r1, #10
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031de:	2200      	movs	r2, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	61fa      	str	r2, [r7, #28]
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	f7fd fbfc 	bl	80009e4 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003218:	4618      	mov	r0, r3
 800321a:	3750      	adds	r7, #80	; 0x50
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_RCC_GetHCLKFreq+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000000 	.word	0x20000000

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800324c:	f7ff fff0 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	; (800326c <HAL_RCC_GetPCLK1Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	080053cc 	.word	0x080053cc

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003274:	f7ff ffdc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0b5b      	lsrs	r3, r3, #13
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	080053cc 	.word	0x080053cc

08003298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032c0:	4b69      	ldr	r3, [pc, #420]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a68      	ldr	r2, [pc, #416]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	4b66      	ldr	r3, [pc, #408]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	4964      	ldr	r1, [pc, #400]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d017      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f2:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	4959      	ldr	r1, [pc, #356]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003310:	d101      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800332e:	4b4e      	ldr	r3, [pc, #312]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	494a      	ldr	r1, [pc, #296]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334c:	d101      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 808b 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a39      	ldr	r2, [pc, #228]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
 8003388:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fe fb3c 	bl	8001a1c <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fe fb38 	bl	8001a1c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e357      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d035      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d02e      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d114      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fb00 	bl	8001a1c <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fafc 	bl	8001a1c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e319      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344e:	d111      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800345e:	400b      	ands	r3, r1
 8003460:	4901      	ldr	r1, [pc, #4]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
 8003466:	e00b      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000
 8003470:	0ffffcff 	.word	0x0ffffcff
 8003474:	4baa      	ldr	r3, [pc, #680]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4aa9      	ldr	r2, [pc, #676]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800347e:	6093      	str	r3, [r2, #8]
 8003480:	4ba7      	ldr	r3, [pc, #668]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	49a4      	ldr	r1, [pc, #656]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348e:	4313      	orrs	r3, r2
 8003490:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800349e:	4ba0      	ldr	r3, [pc, #640]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a4:	4a9e      	ldr	r2, [pc, #632]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034ae:	4b9c      	ldr	r3, [pc, #624]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	4999      	ldr	r1, [pc, #612]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034cc:	4b94      	ldr	r3, [pc, #592]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034da:	4991      	ldr	r1, [pc, #580]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ee:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fc:	4988      	ldr	r1, [pc, #544]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003510:	4b83      	ldr	r3, [pc, #524]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351e:	4980      	ldr	r1, [pc, #512]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4977      	ldr	r1, [pc, #476]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003554:	4b72      	ldr	r3, [pc, #456]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	496f      	ldr	r1, [pc, #444]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f023 020c 	bic.w	r2, r3, #12
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	4966      	ldr	r1, [pc, #408]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	495e      	ldr	r1, [pc, #376]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	4955      	ldr	r1, [pc, #340]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	494d      	ldr	r1, [pc, #308]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4944      	ldr	r1, [pc, #272]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003620:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	493c      	ldr	r1, [pc, #240]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	4933      	ldr	r1, [pc, #204]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	492b      	ldr	r1, [pc, #172]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003694:	4922      	ldr	r1, [pc, #136]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a4:	d101      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	4912      	ldr	r1, [pc, #72]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f8:	4909      	ldr	r1, [pc, #36]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d006      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80d9 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a01      	ldr	r2, [pc, #4]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800371e:	e001      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003720:	40023800 	.word	0x40023800
 8003724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003726:	f7fe f979 	bl	8001a1c <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800372e:	f7fe f975 	bl	8001a1c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b64      	cmp	r3, #100	; 0x64
 800373a:	d901      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e194      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003740:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d021      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003766:	0c1b      	lsrs	r3, r3, #16
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800376e:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	019a      	lsls	r2, r3, #6
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	4957      	ldr	r1, [pc, #348]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02e      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c6:	d129      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	0f1b      	lsrs	r3, r3, #28
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	019a      	lsls	r2, r3, #6
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	493d      	ldr	r1, [pc, #244]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380a:	f023 021f 	bic.w	r2, r3, #31
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	3b01      	subs	r3, #1
 8003814:	4937      	ldr	r1, [pc, #220]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01d      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800383c:	0f1b      	lsrs	r3, r3, #28
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	019a      	lsls	r2, r3, #6
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	431a      	orrs	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	071b      	lsls	r3, r3, #28
 800385c:	4925      	ldr	r1, [pc, #148]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d011      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	019a      	lsls	r2, r3, #6
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	071b      	lsls	r3, r3, #28
 800388c:	4919      	ldr	r1, [pc, #100]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800389e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe f8bc 	bl	8001a1c <HAL_GetTick>
 80038a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038a8:	f7fe f8b8 	bl	8001a1c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0d7      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 80cd 	bne.w	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038da:	f7fe f89f 	bl	8001a1c <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038e2:	f7fe f89b 	bl	8001a1c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d903      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0ba      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f8:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003904:	d0ed      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d12a      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800392e:	4b51      	ldr	r3, [pc, #324]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	0f1b      	lsrs	r3, r3, #28
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	019a      	lsls	r2, r3, #6
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	4944      	ldr	r1, [pc, #272]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800396a:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	493d      	ldr	r1, [pc, #244]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003998:	d11d      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	0f1b      	lsrs	r3, r3, #28
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	019a      	lsls	r2, r3, #6
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	431a      	orrs	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	4929      	ldr	r1, [pc, #164]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	019a      	lsls	r2, r3, #6
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	071b      	lsls	r3, r3, #28
 8003a16:	4917      	ldr	r1, [pc, #92]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4911      	ldr	r1, [pc, #68]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fd ffec 	bl	8001a1c <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a48:	f7fd ffe8 	bl	8001a1c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e007      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a66:	d1ef      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e040      	b.n	8003b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fc1c 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f82c 	bl	8003b14 <UART_SetConfig>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa84 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb0b 	bl	8004120 <UART_CheckIdleState>
 8003b0a:	4603      	mov	r3, r0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4ba6      	ldr	r3, [pc, #664]	; (8003dd8 <UART_SetConfig+0x2c4>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	6979      	ldr	r1, [r7, #20]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a94      	ldr	r2, [pc, #592]	; (8003ddc <UART_SetConfig+0x2c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d120      	bne.n	8003bd2 <UART_SetConfig+0xbe>
 8003b90:	4b93      	ldr	r3, [pc, #588]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d816      	bhi.n	8003bcc <UART_SetConfig+0xb8>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x90>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bbb 	.word	0x08003bbb
 8003bb0:	08003bc7 	.word	0x08003bc7
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e150      	b.n	8003e5c <UART_SetConfig+0x348>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e14d      	b.n	8003e5c <UART_SetConfig+0x348>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e14a      	b.n	8003e5c <UART_SetConfig+0x348>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e147      	b.n	8003e5c <UART_SetConfig+0x348>
 8003bcc:	2310      	movs	r3, #16
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e144      	b.n	8003e5c <UART_SetConfig+0x348>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a83      	ldr	r2, [pc, #524]	; (8003de4 <UART_SetConfig+0x2d0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d132      	bne.n	8003c42 <UART_SetConfig+0x12e>
 8003bdc:	4b80      	ldr	r3, [pc, #512]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d828      	bhi.n	8003c3c <UART_SetConfig+0x128>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0xdc>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c3d 	.word	0x08003c3d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c31 	.word	0x08003c31
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c2b 	.word	0x08003c2b
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c3d 	.word	0x08003c3d
 8003c20:	08003c37 	.word	0x08003c37
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e118      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e115      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c30:	2304      	movs	r3, #4
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e112      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c36:	2308      	movs	r3, #8
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e10f      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e10c      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a68      	ldr	r2, [pc, #416]	; (8003de8 <UART_SetConfig+0x2d4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d120      	bne.n	8003c8e <UART_SetConfig+0x17a>
 8003c4c:	4b64      	ldr	r3, [pc, #400]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d013      	beq.n	8003c82 <UART_SetConfig+0x16e>
 8003c5a:	2b30      	cmp	r3, #48	; 0x30
 8003c5c:	d814      	bhi.n	8003c88 <UART_SetConfig+0x174>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d009      	beq.n	8003c76 <UART_SetConfig+0x162>
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d810      	bhi.n	8003c88 <UART_SetConfig+0x174>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <UART_SetConfig+0x15c>
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d006      	beq.n	8003c7c <UART_SetConfig+0x168>
 8003c6e:	e00b      	b.n	8003c88 <UART_SetConfig+0x174>
 8003c70:	2300      	movs	r3, #0
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e0f2      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c76:	2302      	movs	r3, #2
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e0ef      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e0ec      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c82:	2308      	movs	r3, #8
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e0e9      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e0e6      	b.n	8003e5c <UART_SetConfig+0x348>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a56      	ldr	r2, [pc, #344]	; (8003dec <UART_SetConfig+0x2d8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d120      	bne.n	8003cda <UART_SetConfig+0x1c6>
 8003c98:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ca4:	d013      	beq.n	8003cce <UART_SetConfig+0x1ba>
 8003ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ca8:	d814      	bhi.n	8003cd4 <UART_SetConfig+0x1c0>
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d009      	beq.n	8003cc2 <UART_SetConfig+0x1ae>
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d810      	bhi.n	8003cd4 <UART_SetConfig+0x1c0>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <UART_SetConfig+0x1a8>
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d006      	beq.n	8003cc8 <UART_SetConfig+0x1b4>
 8003cba:	e00b      	b.n	8003cd4 <UART_SetConfig+0x1c0>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e0cc      	b.n	8003e5c <UART_SetConfig+0x348>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e0c9      	b.n	8003e5c <UART_SetConfig+0x348>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e0c6      	b.n	8003e5c <UART_SetConfig+0x348>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e0c3      	b.n	8003e5c <UART_SetConfig+0x348>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e0c0      	b.n	8003e5c <UART_SetConfig+0x348>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a44      	ldr	r2, [pc, #272]	; (8003df0 <UART_SetConfig+0x2dc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d125      	bne.n	8003d30 <UART_SetConfig+0x21c>
 8003ce4:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf2:	d017      	beq.n	8003d24 <UART_SetConfig+0x210>
 8003cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf8:	d817      	bhi.n	8003d2a <UART_SetConfig+0x216>
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfe:	d00b      	beq.n	8003d18 <UART_SetConfig+0x204>
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d811      	bhi.n	8003d2a <UART_SetConfig+0x216>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <UART_SetConfig+0x1fe>
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	d006      	beq.n	8003d1e <UART_SetConfig+0x20a>
 8003d10:	e00b      	b.n	8003d2a <UART_SetConfig+0x216>
 8003d12:	2300      	movs	r3, #0
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e0a1      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e09e      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	e09b      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d24:	2308      	movs	r3, #8
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e098      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e095      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2f      	ldr	r2, [pc, #188]	; (8003df4 <UART_SetConfig+0x2e0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d125      	bne.n	8003d86 <UART_SetConfig+0x272>
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d48:	d017      	beq.n	8003d7a <UART_SetConfig+0x266>
 8003d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4e:	d817      	bhi.n	8003d80 <UART_SetConfig+0x26c>
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d54:	d00b      	beq.n	8003d6e <UART_SetConfig+0x25a>
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d811      	bhi.n	8003d80 <UART_SetConfig+0x26c>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <UART_SetConfig+0x254>
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x260>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x26c>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e076      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e073      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d74:	2304      	movs	r3, #4
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e070      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e06d      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d80:	2310      	movs	r3, #16
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e06a      	b.n	8003e5c <UART_SetConfig+0x348>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <UART_SetConfig+0x2e4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d138      	bne.n	8003e02 <UART_SetConfig+0x2ee>
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d9e:	d017      	beq.n	8003dd0 <UART_SetConfig+0x2bc>
 8003da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da4:	d82a      	bhi.n	8003dfc <UART_SetConfig+0x2e8>
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d00b      	beq.n	8003dc4 <UART_SetConfig+0x2b0>
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d824      	bhi.n	8003dfc <UART_SetConfig+0x2e8>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <UART_SetConfig+0x2aa>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d006      	beq.n	8003dca <UART_SetConfig+0x2b6>
 8003dbc:	e01e      	b.n	8003dfc <UART_SetConfig+0x2e8>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e04b      	b.n	8003e5c <UART_SetConfig+0x348>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e048      	b.n	8003e5c <UART_SetConfig+0x348>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e045      	b.n	8003e5c <UART_SetConfig+0x348>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e042      	b.n	8003e5c <UART_SetConfig+0x348>
 8003dd6:	bf00      	nop
 8003dd8:	efff69f3 	.word	0xefff69f3
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40004400 	.word	0x40004400
 8003de8:	40004800 	.word	0x40004800
 8003dec:	40004c00 	.word	0x40004c00
 8003df0:	40005000 	.word	0x40005000
 8003df4:	40011400 	.word	0x40011400
 8003df8:	40007800 	.word	0x40007800
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e02c      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <UART_SetConfig+0x4bc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d125      	bne.n	8003e58 <UART_SetConfig+0x344>
 8003e0c:	4b71      	ldr	r3, [pc, #452]	; (8003fd4 <UART_SetConfig+0x4c0>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e1a:	d017      	beq.n	8003e4c <UART_SetConfig+0x338>
 8003e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e20:	d817      	bhi.n	8003e52 <UART_SetConfig+0x33e>
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d00b      	beq.n	8003e40 <UART_SetConfig+0x32c>
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d811      	bhi.n	8003e52 <UART_SetConfig+0x33e>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <UART_SetConfig+0x326>
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e36:	d006      	beq.n	8003e46 <UART_SetConfig+0x332>
 8003e38:	e00b      	b.n	8003e52 <UART_SetConfig+0x33e>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e00d      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e40:	2302      	movs	r3, #2
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e00a      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e46:	2304      	movs	r3, #4
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e007      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e004      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e52:	2310      	movs	r3, #16
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e001      	b.n	8003e5c <UART_SetConfig+0x348>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d15b      	bne.n	8003f1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d828      	bhi.n	8003ebe <UART_SetConfig+0x3aa>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x360>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7ff f9d6 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	61b8      	str	r0, [r7, #24]
        break;
 8003e9e:	e013      	b.n	8003ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7ff f9e6 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	61b8      	str	r0, [r7, #24]
        break;
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <UART_SetConfig+0x4c4>)
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e00c      	b.n	8003ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7ff f8b9 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003eb2:	61b8      	str	r0, [r7, #24]
        break;
 8003eb4:	e008      	b.n	8003ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61bb      	str	r3, [r7, #24]
        break;
 8003ebc:	e004      	b.n	8003ec8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d074      	beq.n	8003fb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	005a      	lsls	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	441a      	add	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d916      	bls.n	8003f18 <UART_SetConfig+0x404>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d212      	bcs.n	8003f18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f023 030f 	bic.w	r3, r3, #15
 8003efa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	89fb      	ldrh	r3, [r7, #14]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	89fa      	ldrh	r2, [r7, #14]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	e04f      	b.n	8003fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	77bb      	strb	r3, [r7, #30]
 8003f1c:	e04c      	b.n	8003fb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d828      	bhi.n	8003f76 <UART_SetConfig+0x462>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x418>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7ff f97a 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61b8      	str	r0, [r7, #24]
        break;
 8003f56:	e013      	b.n	8003f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7ff f98a 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e00f      	b.n	8003f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <UART_SetConfig+0x4c4>)
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e00c      	b.n	8003f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7ff f85d 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003f6a:	61b8      	str	r0, [r7, #24]
        break;
 8003f6c:	e008      	b.n	8003f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	61bb      	str	r3, [r7, #24]
        break;
 8003f74:	e004      	b.n	8003f80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085a      	lsrs	r2, r3, #1
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	d909      	bls.n	8003fb4 <UART_SetConfig+0x4a0>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d205      	bcs.n	8003fb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	e001      	b.n	8003fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40007c00 	.word	0x40007c00
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d10a      	bne.n	80040f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004130:	f7fd fc74 	bl	8001a1c <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d10e      	bne.n	8004162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f81b 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e011      	b.n	8004186 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b09c      	sub	sp, #112	; 0x70
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	e0a7      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	f000 80a3 	beq.w	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fd fc37 	bl	8001a1c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d13f      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d4:	667b      	str	r3, [r7, #100]	; 0x64
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e6      	bne.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004212:	64ba      	str	r2, [r7, #72]	; 0x48
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e068      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d050      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d148      	bne.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004266:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800427c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e6      	bne.n	8004268 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042ba:	623a      	str	r2, [r7, #32]
 80042bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	69f9      	ldr	r1, [r7, #28]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e010      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	f43f af48 	beq.w	80041a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3770      	adds	r7, #112	; 0x70
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800431c:	b084      	sub	sp, #16
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	f107 001c 	add.w	r0, r7, #28
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d120      	bne.n	8004376 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <USB_CoreInit+0xac>)
 8004346:	4013      	ands	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa96 	bl	800489c <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e010      	b.n	8004398 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa8a 	bl	800489c <USB_CoreReset>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10b      	bne.n	80043b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f043 0206 	orr.w	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	ffbdffbf 	.word	0xffbdffbf

080043cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0201 	bic.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fd fb09 	bl	8001a34 <HAL_Delay>
      ms++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa29 	bl	8004880 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b01      	cmp	r3, #1
 8004432:	d01e      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b31      	cmp	r3, #49	; 0x31
 8004438:	d9f0      	bls.n	800441c <USB_SetCurrentMode+0x2e>
 800443a:	e01a      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800444e:	2001      	movs	r0, #1
 8004450:	f7fd faf0 	bl	8001a34 <HAL_Delay>
      ms++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa10 	bl	8004880 <USB_GetMode>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b31      	cmp	r3, #49	; 0x31
 800446a:	d9f0      	bls.n	800444e <USB_SetCurrentMode+0x60>
 800446c:	e001      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e005      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b32      	cmp	r3, #50	; 0x32
 8004476:	d101      	bne.n	800447c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e009      	b.n	80044bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3340      	adds	r3, #64	; 0x40
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0e      	cmp	r3, #14
 80044c0:	d9f2      	bls.n	80044a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11c      	bne.n	8004502 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d6:	f043 0302 	orr.w	r3, r3, #2
 80044da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e005      	b.n	800450e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004514:	461a      	mov	r2, r3
 8004516:	2300      	movs	r3, #0
 8004518:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	4619      	mov	r1, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	461a      	mov	r2, r3
 800452a:	680b      	ldr	r3, [r1, #0]
 800452c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10c      	bne.n	800454e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800453a:	2100      	movs	r1, #0
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f965 	bl	800480c <USB_SetDevSpeed>
 8004542:	e008      	b.n	8004556 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004544:	2101      	movs	r1, #1
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f960 	bl	800480c <USB_SetDevSpeed>
 800454c:	e003      	b.n	8004556 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800454e:	2103      	movs	r1, #3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f95b 	bl	800480c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004556:	2110      	movs	r1, #16
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8f3 	bl	8004744 <USB_FlushTxFifo>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f91f 	bl	80047ac <USB_FlushRxFifo>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	461a      	mov	r2, r3
 800458c:	2300      	movs	r3, #0
 800458e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	461a      	mov	r2, r3
 8004598:	2300      	movs	r3, #0
 800459a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	e043      	b.n	800462a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b8:	d118      	bne.n	80045ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	461a      	mov	r2, r3
 80045ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e013      	b.n	80045fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e008      	b.n	80045fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	2300      	movs	r3, #0
 80045fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	461a      	mov	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3b7      	bcc.n	80045a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e043      	b.n	80046c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464e:	d118      	bne.n	8004682 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	461a      	mov	r2, r3
 8004664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e013      	b.n	8004694 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e008      	b.n	8004694 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	461a      	mov	r2, r3
 80046b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3301      	adds	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3b7      	bcc.n	8004638 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <USB_DevInit+0x2b4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f043 0208 	orr.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <USB_DevInit+0x2b8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004738:	b004      	add	sp, #16
 800473a:	4770      	bx	lr
 800473c:	803c3800 	.word	0x803c3800
 8004740:	40000004 	.word	0x40000004

08004744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <USB_FlushTxFifo+0x64>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e01b      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	daf2      	bge.n	8004752 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	019b      	lsls	r3, r3, #6
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <USB_FlushTxFifo+0x64>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e006      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d0f0      	beq.n	800477c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	00030d40 	.word	0x00030d40

080047ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <USB_FlushRxFifo+0x5c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e018      	b.n	80047fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	daf2      	bge.n	80047b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2210      	movs	r2, #16
 80047da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <USB_FlushRxFifo+0x5c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e006      	b.n	80047fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d0f0      	beq.n	80047dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	00030d40 	.word	0x00030d40

0800480c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <USB_CoreReset+0x64>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e01b      	b.n	80048f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	daf2      	bge.n	80048a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <USB_CoreReset+0x64>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d0f0      	beq.n	80048d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	00030d40 	.word	0x00030d40

08004904 <_ZdlPvj>:
 8004904:	f000 b800 	b.w	8004908 <_ZdlPv>

08004908 <_ZdlPv>:
 8004908:	f000 b82a 	b.w	8004960 <free>

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	; (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 fd26 	bl	800537c <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08005480 	.word	0x08005480
 8004954:	08005480 	.word	0x08005480
 8004958:	08005480 	.word	0x08005480
 800495c:	08005484 	.word	0x08005484

08004960 <free>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <free+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f000 b80b 	b.w	8004980 <_free_r>
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c

08004970 <memset>:
 8004970:	4402      	add	r2, r0
 8004972:	4603      	mov	r3, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	d100      	bne.n	800497a <memset+0xa>
 8004978:	4770      	bx	lr
 800497a:	f803 1b01 	strb.w	r1, [r3], #1
 800497e:	e7f9      	b.n	8004974 <memset+0x4>

08004980 <_free_r>:
 8004980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004982:	2900      	cmp	r1, #0
 8004984:	d044      	beq.n	8004a10 <_free_r+0x90>
 8004986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498a:	9001      	str	r0, [sp, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f1a1 0404 	sub.w	r4, r1, #4
 8004992:	bfb8      	it	lt
 8004994:	18e4      	addlt	r4, r4, r3
 8004996:	f000 fc39 	bl	800520c <__malloc_lock>
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <_free_r+0x94>)
 800499c:	9801      	ldr	r0, [sp, #4]
 800499e:	6813      	ldr	r3, [r2, #0]
 80049a0:	b933      	cbnz	r3, 80049b0 <_free_r+0x30>
 80049a2:	6063      	str	r3, [r4, #4]
 80049a4:	6014      	str	r4, [r2, #0]
 80049a6:	b003      	add	sp, #12
 80049a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ac:	f000 bc34 	b.w	8005218 <__malloc_unlock>
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	d908      	bls.n	80049c6 <_free_r+0x46>
 80049b4:	6825      	ldr	r5, [r4, #0]
 80049b6:	1961      	adds	r1, r4, r5
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf01      	itttt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	1949      	addeq	r1, r1, r5
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	e7ed      	b.n	80049a2 <_free_r+0x22>
 80049c6:	461a      	mov	r2, r3
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b10b      	cbz	r3, 80049d0 <_free_r+0x50>
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	d9fa      	bls.n	80049c6 <_free_r+0x46>
 80049d0:	6811      	ldr	r1, [r2, #0]
 80049d2:	1855      	adds	r5, r2, r1
 80049d4:	42a5      	cmp	r5, r4
 80049d6:	d10b      	bne.n	80049f0 <_free_r+0x70>
 80049d8:	6824      	ldr	r4, [r4, #0]
 80049da:	4421      	add	r1, r4
 80049dc:	1854      	adds	r4, r2, r1
 80049de:	42a3      	cmp	r3, r4
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	d1e0      	bne.n	80049a6 <_free_r+0x26>
 80049e4:	681c      	ldr	r4, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	6053      	str	r3, [r2, #4]
 80049ea:	4421      	add	r1, r4
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	e7da      	b.n	80049a6 <_free_r+0x26>
 80049f0:	d902      	bls.n	80049f8 <_free_r+0x78>
 80049f2:	230c      	movs	r3, #12
 80049f4:	6003      	str	r3, [r0, #0]
 80049f6:	e7d6      	b.n	80049a6 <_free_r+0x26>
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	1961      	adds	r1, r4, r5
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf04      	itt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	bf04      	itt	eq
 8004a08:	1949      	addeq	r1, r1, r5
 8004a0a:	6021      	streq	r1, [r4, #0]
 8004a0c:	6054      	str	r4, [r2, #4]
 8004a0e:	e7ca      	b.n	80049a6 <_free_r+0x26>
 8004a10:	b003      	add	sp, #12
 8004a12:	bd30      	pop	{r4, r5, pc}
 8004a14:	20000854 	.word	0x20000854

08004a18 <sbrk_aligned>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4e0e      	ldr	r6, [pc, #56]	; (8004a54 <sbrk_aligned+0x3c>)
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	6831      	ldr	r1, [r6, #0]
 8004a20:	4605      	mov	r5, r0
 8004a22:	b911      	cbnz	r1, 8004a2a <sbrk_aligned+0x12>
 8004a24:	f000 f902 	bl	8004c2c <_sbrk_r>
 8004a28:	6030      	str	r0, [r6, #0]
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f8fd 	bl	8004c2c <_sbrk_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	d00a      	beq.n	8004a4c <sbrk_aligned+0x34>
 8004a36:	1cc4      	adds	r4, r0, #3
 8004a38:	f024 0403 	bic.w	r4, r4, #3
 8004a3c:	42a0      	cmp	r0, r4
 8004a3e:	d007      	beq.n	8004a50 <sbrk_aligned+0x38>
 8004a40:	1a21      	subs	r1, r4, r0
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f8f2 	bl	8004c2c <_sbrk_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d101      	bne.n	8004a50 <sbrk_aligned+0x38>
 8004a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a50:	4620      	mov	r0, r4
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	20000858 	.word	0x20000858

08004a58 <_malloc_r>:
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	1ccd      	adds	r5, r1, #3
 8004a5e:	f025 0503 	bic.w	r5, r5, #3
 8004a62:	3508      	adds	r5, #8
 8004a64:	2d0c      	cmp	r5, #12
 8004a66:	bf38      	it	cc
 8004a68:	250c      	movcc	r5, #12
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	db01      	blt.n	8004a74 <_malloc_r+0x1c>
 8004a70:	42a9      	cmp	r1, r5
 8004a72:	d905      	bls.n	8004a80 <_malloc_r+0x28>
 8004a74:	230c      	movs	r3, #12
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	2600      	movs	r6, #0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a80:	4e2e      	ldr	r6, [pc, #184]	; (8004b3c <_malloc_r+0xe4>)
 8004a82:	f000 fbc3 	bl	800520c <__malloc_lock>
 8004a86:	6833      	ldr	r3, [r6, #0]
 8004a88:	461c      	mov	r4, r3
 8004a8a:	bb34      	cbnz	r4, 8004ada <_malloc_r+0x82>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f7ff ffc2 	bl	8004a18 <sbrk_aligned>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	4604      	mov	r4, r0
 8004a98:	d14d      	bne.n	8004b36 <_malloc_r+0xde>
 8004a9a:	6834      	ldr	r4, [r6, #0]
 8004a9c:	4626      	mov	r6, r4
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	d140      	bne.n	8004b24 <_malloc_r+0xcc>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	eb04 0803 	add.w	r8, r4, r3
 8004aac:	f000 f8be 	bl	8004c2c <_sbrk_r>
 8004ab0:	4580      	cmp	r8, r0
 8004ab2:	d13a      	bne.n	8004b2a <_malloc_r+0xd2>
 8004ab4:	6821      	ldr	r1, [r4, #0]
 8004ab6:	3503      	adds	r5, #3
 8004ab8:	1a6d      	subs	r5, r5, r1
 8004aba:	f025 0503 	bic.w	r5, r5, #3
 8004abe:	3508      	adds	r5, #8
 8004ac0:	2d0c      	cmp	r5, #12
 8004ac2:	bf38      	it	cc
 8004ac4:	250c      	movcc	r5, #12
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f7ff ffa5 	bl	8004a18 <sbrk_aligned>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d02b      	beq.n	8004b2a <_malloc_r+0xd2>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	442b      	add	r3, r5
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	e00e      	b.n	8004af8 <_malloc_r+0xa0>
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	1b52      	subs	r2, r2, r5
 8004ade:	d41e      	bmi.n	8004b1e <_malloc_r+0xc6>
 8004ae0:	2a0b      	cmp	r2, #11
 8004ae2:	d916      	bls.n	8004b12 <_malloc_r+0xba>
 8004ae4:	1961      	adds	r1, r4, r5
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	bf18      	it	ne
 8004aec:	6059      	strne	r1, [r3, #4]
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	bf08      	it	eq
 8004af2:	6031      	streq	r1, [r6, #0]
 8004af4:	5162      	str	r2, [r4, r5]
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	4638      	mov	r0, r7
 8004afa:	f104 060b 	add.w	r6, r4, #11
 8004afe:	f000 fb8b 	bl	8005218 <__malloc_unlock>
 8004b02:	f026 0607 	bic.w	r6, r6, #7
 8004b06:	1d23      	adds	r3, r4, #4
 8004b08:	1af2      	subs	r2, r6, r3
 8004b0a:	d0b6      	beq.n	8004a7a <_malloc_r+0x22>
 8004b0c:	1b9b      	subs	r3, r3, r6
 8004b0e:	50a3      	str	r3, [r4, r2]
 8004b10:	e7b3      	b.n	8004a7a <_malloc_r+0x22>
 8004b12:	6862      	ldr	r2, [r4, #4]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	bf0c      	ite	eq
 8004b18:	6032      	streq	r2, [r6, #0]
 8004b1a:	605a      	strne	r2, [r3, #4]
 8004b1c:	e7ec      	b.n	8004af8 <_malloc_r+0xa0>
 8004b1e:	4623      	mov	r3, r4
 8004b20:	6864      	ldr	r4, [r4, #4]
 8004b22:	e7b2      	b.n	8004a8a <_malloc_r+0x32>
 8004b24:	4634      	mov	r4, r6
 8004b26:	6876      	ldr	r6, [r6, #4]
 8004b28:	e7b9      	b.n	8004a9e <_malloc_r+0x46>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 fb72 	bl	8005218 <__malloc_unlock>
 8004b34:	e7a1      	b.n	8004a7a <_malloc_r+0x22>
 8004b36:	6025      	str	r5, [r4, #0]
 8004b38:	e7de      	b.n	8004af8 <_malloc_r+0xa0>
 8004b3a:	bf00      	nop
 8004b3c:	20000854 	.word	0x20000854

08004b40 <_puts_r>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	460e      	mov	r6, r1
 8004b44:	4605      	mov	r5, r0
 8004b46:	b118      	cbz	r0, 8004b50 <_puts_r+0x10>
 8004b48:	6983      	ldr	r3, [r0, #24]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <_puts_r+0x10>
 8004b4c:	f000 fa58 	bl	8005000 <__sinit>
 8004b50:	69ab      	ldr	r3, [r5, #24]
 8004b52:	68ac      	ldr	r4, [r5, #8]
 8004b54:	b913      	cbnz	r3, 8004b5c <_puts_r+0x1c>
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 fa52 	bl	8005000 <__sinit>
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <_puts_r+0xd0>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d120      	bne.n	8004ba4 <_puts_r+0x64>
 8004b62:	686c      	ldr	r4, [r5, #4]
 8004b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d405      	bmi.n	8004b76 <_puts_r+0x36>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	0598      	lsls	r0, r3, #22
 8004b6e:	d402      	bmi.n	8004b76 <_puts_r+0x36>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f000 fae3 	bl	800513c <__retarget_lock_acquire_recursive>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	0719      	lsls	r1, r3, #28
 8004b7a:	d51d      	bpl.n	8004bb8 <_puts_r+0x78>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	b1db      	cbz	r3, 8004bb8 <_puts_r+0x78>
 8004b80:	3e01      	subs	r6, #1
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	60a3      	str	r3, [r4, #8]
 8004b8c:	bb39      	cbnz	r1, 8004bde <_puts_r+0x9e>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da38      	bge.n	8004c04 <_puts_r+0xc4>
 8004b92:	4622      	mov	r2, r4
 8004b94:	210a      	movs	r1, #10
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f858 	bl	8004c4c <__swbuf_r>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d011      	beq.n	8004bc4 <_puts_r+0x84>
 8004ba0:	250a      	movs	r5, #10
 8004ba2:	e011      	b.n	8004bc8 <_puts_r+0x88>
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <_puts_r+0xd4>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d101      	bne.n	8004bae <_puts_r+0x6e>
 8004baa:	68ac      	ldr	r4, [r5, #8]
 8004bac:	e7da      	b.n	8004b64 <_puts_r+0x24>
 8004bae:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <_puts_r+0xd8>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	bf08      	it	eq
 8004bb4:	68ec      	ldreq	r4, [r5, #12]
 8004bb6:	e7d5      	b.n	8004b64 <_puts_r+0x24>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f898 	bl	8004cf0 <__swsetup_r>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d0dd      	beq.n	8004b80 <_puts_r+0x40>
 8004bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bca:	07da      	lsls	r2, r3, #31
 8004bcc:	d405      	bmi.n	8004bda <_puts_r+0x9a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	059b      	lsls	r3, r3, #22
 8004bd2:	d402      	bmi.n	8004bda <_puts_r+0x9a>
 8004bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd6:	f000 fab2 	bl	800513e <__retarget_lock_release_recursive>
 8004bda:	4628      	mov	r0, r5
 8004bdc:	bd70      	pop	{r4, r5, r6, pc}
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da04      	bge.n	8004bec <_puts_r+0xac>
 8004be2:	69a2      	ldr	r2, [r4, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	dc06      	bgt.n	8004bf6 <_puts_r+0xb6>
 8004be8:	290a      	cmp	r1, #10
 8004bea:	d004      	beq.n	8004bf6 <_puts_r+0xb6>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	7019      	strb	r1, [r3, #0]
 8004bf4:	e7c5      	b.n	8004b82 <_puts_r+0x42>
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f827 	bl	8004c4c <__swbuf_r>
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d1bf      	bne.n	8004b82 <_puts_r+0x42>
 8004c02:	e7df      	b.n	8004bc4 <_puts_r+0x84>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	250a      	movs	r5, #10
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	6022      	str	r2, [r4, #0]
 8004c0c:	701d      	strb	r5, [r3, #0]
 8004c0e:	e7db      	b.n	8004bc8 <_puts_r+0x88>
 8004c10:	08005438 	.word	0x08005438
 8004c14:	08005458 	.word	0x08005458
 8004c18:	08005418 	.word	0x08005418

08004c1c <puts>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <puts+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f7ff bf8d 	b.w	8004b40 <_puts_r>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <_sbrk_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d06      	ldr	r5, [pc, #24]	; (8004c48 <_sbrk_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fc fca4 	bl	8001584 <_sbrk>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_sbrk_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_sbrk_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	20000860 	.word	0x20000860

08004c4c <__swbuf_r>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	460e      	mov	r6, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	4605      	mov	r5, r0
 8004c54:	b118      	cbz	r0, 8004c5e <__swbuf_r+0x12>
 8004c56:	6983      	ldr	r3, [r0, #24]
 8004c58:	b90b      	cbnz	r3, 8004c5e <__swbuf_r+0x12>
 8004c5a:	f000 f9d1 	bl	8005000 <__sinit>
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <__swbuf_r+0x98>)
 8004c60:	429c      	cmp	r4, r3
 8004c62:	d12b      	bne.n	8004cbc <__swbuf_r+0x70>
 8004c64:	686c      	ldr	r4, [r5, #4]
 8004c66:	69a3      	ldr	r3, [r4, #24]
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	071a      	lsls	r2, r3, #28
 8004c6e:	d52f      	bpl.n	8004cd0 <__swbuf_r+0x84>
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	b36b      	cbz	r3, 8004cd0 <__swbuf_r+0x84>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	b2f6      	uxtb	r6, r6
 8004c7e:	4283      	cmp	r3, r0
 8004c80:	4637      	mov	r7, r6
 8004c82:	dc04      	bgt.n	8004c8e <__swbuf_r+0x42>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f926 	bl	8004ed8 <_fflush_r>
 8004c8c:	bb30      	cbnz	r0, 8004cdc <__swbuf_r+0x90>
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	701e      	strb	r6, [r3, #0]
 8004c9c:	6963      	ldr	r3, [r4, #20]
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	4283      	cmp	r3, r0
 8004ca2:	d004      	beq.n	8004cae <__swbuf_r+0x62>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	07db      	lsls	r3, r3, #31
 8004ca8:	d506      	bpl.n	8004cb8 <__swbuf_r+0x6c>
 8004caa:	2e0a      	cmp	r6, #10
 8004cac:	d104      	bne.n	8004cb8 <__swbuf_r+0x6c>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f911 	bl	8004ed8 <_fflush_r>
 8004cb6:	b988      	cbnz	r0, 8004cdc <__swbuf_r+0x90>
 8004cb8:	4638      	mov	r0, r7
 8004cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <__swbuf_r+0x9c>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d101      	bne.n	8004cc6 <__swbuf_r+0x7a>
 8004cc2:	68ac      	ldr	r4, [r5, #8]
 8004cc4:	e7cf      	b.n	8004c66 <__swbuf_r+0x1a>
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <__swbuf_r+0xa0>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	bf08      	it	eq
 8004ccc:	68ec      	ldreq	r4, [r5, #12]
 8004cce:	e7ca      	b.n	8004c66 <__swbuf_r+0x1a>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f80c 	bl	8004cf0 <__swsetup_r>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d0cb      	beq.n	8004c74 <__swbuf_r+0x28>
 8004cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ce0:	e7ea      	b.n	8004cb8 <__swbuf_r+0x6c>
 8004ce2:	bf00      	nop
 8004ce4:	08005438 	.word	0x08005438
 8004ce8:	08005458 	.word	0x08005458
 8004cec:	08005418 	.word	0x08005418

08004cf0 <__swsetup_r>:
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <__swsetup_r+0xcc>)
 8004cf2:	b570      	push	{r4, r5, r6, lr}
 8004cf4:	681d      	ldr	r5, [r3, #0]
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	b125      	cbz	r5, 8004d06 <__swsetup_r+0x16>
 8004cfc:	69ab      	ldr	r3, [r5, #24]
 8004cfe:	b913      	cbnz	r3, 8004d06 <__swsetup_r+0x16>
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f97d 	bl	8005000 <__sinit>
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <__swsetup_r+0xd0>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	d10f      	bne.n	8004d2c <__swsetup_r+0x3c>
 8004d0c:	686c      	ldr	r4, [r5, #4]
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d14:	0719      	lsls	r1, r3, #28
 8004d16:	d42c      	bmi.n	8004d72 <__swsetup_r+0x82>
 8004d18:	06dd      	lsls	r5, r3, #27
 8004d1a:	d411      	bmi.n	8004d40 <__swsetup_r+0x50>
 8004d1c:	2309      	movs	r3, #9
 8004d1e:	6033      	str	r3, [r6, #0]
 8004d20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	e03e      	b.n	8004daa <__swsetup_r+0xba>
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <__swsetup_r+0xd4>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <__swsetup_r+0x46>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7eb      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <__swsetup_r+0xd8>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7e6      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d40:	0758      	lsls	r0, r3, #29
 8004d42:	d512      	bpl.n	8004d6a <__swsetup_r+0x7a>
 8004d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d46:	b141      	cbz	r1, 8004d5a <__swsetup_r+0x6a>
 8004d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d002      	beq.n	8004d56 <__swsetup_r+0x66>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff fe15 	bl	8004980 <_free_r>
 8004d56:	2300      	movs	r3, #0
 8004d58:	6363      	str	r3, [r4, #52]	; 0x34
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	b94b      	cbnz	r3, 8004d8a <__swsetup_r+0x9a>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d003      	beq.n	8004d8a <__swsetup_r+0x9a>
 8004d82:	4621      	mov	r1, r4
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fa01 	bl	800518c <__smakebuf_r>
 8004d8a:	89a0      	ldrh	r0, [r4, #12]
 8004d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d90:	f010 0301 	ands.w	r3, r0, #1
 8004d94:	d00a      	beq.n	8004dac <__swsetup_r+0xbc>
 8004d96:	2300      	movs	r3, #0
 8004d98:	60a3      	str	r3, [r4, #8]
 8004d9a:	6963      	ldr	r3, [r4, #20]
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	61a3      	str	r3, [r4, #24]
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	b943      	cbnz	r3, 8004db6 <__swsetup_r+0xc6>
 8004da4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004da8:	d1ba      	bne.n	8004d20 <__swsetup_r+0x30>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	0781      	lsls	r1, r0, #30
 8004dae:	bf58      	it	pl
 8004db0:	6963      	ldrpl	r3, [r4, #20]
 8004db2:	60a3      	str	r3, [r4, #8]
 8004db4:	e7f4      	b.n	8004da0 <__swsetup_r+0xb0>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e7f7      	b.n	8004daa <__swsetup_r+0xba>
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	08005438 	.word	0x08005438
 8004dc4:	08005458 	.word	0x08005458
 8004dc8:	08005418 	.word	0x08005418

08004dcc <__sflush_r>:
 8004dcc:	898a      	ldrh	r2, [r1, #12]
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	0710      	lsls	r0, r2, #28
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	d458      	bmi.n	8004e8c <__sflush_r+0xc0>
 8004dda:	684b      	ldr	r3, [r1, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dc05      	bgt.n	8004dec <__sflush_r+0x20>
 8004de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dc02      	bgt.n	8004dec <__sflush_r+0x20>
 8004de6:	2000      	movs	r0, #0
 8004de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	d0f9      	beq.n	8004de6 <__sflush_r+0x1a>
 8004df2:	2300      	movs	r3, #0
 8004df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004df8:	682f      	ldr	r7, [r5, #0]
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	d032      	beq.n	8004e64 <__sflush_r+0x98>
 8004dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	075a      	lsls	r2, r3, #29
 8004e04:	d505      	bpl.n	8004e12 <__sflush_r+0x46>
 8004e06:	6863      	ldr	r3, [r4, #4]
 8004e08:	1ac0      	subs	r0, r0, r3
 8004e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e0c:	b10b      	cbz	r3, 8004e12 <__sflush_r+0x46>
 8004e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	4602      	mov	r2, r0
 8004e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e18:	6a21      	ldr	r1, [r4, #32]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b0      	blx	r6
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	d106      	bne.n	8004e32 <__sflush_r+0x66>
 8004e24:	6829      	ldr	r1, [r5, #0]
 8004e26:	291d      	cmp	r1, #29
 8004e28:	d82c      	bhi.n	8004e84 <__sflush_r+0xb8>
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <__sflush_r+0x108>)
 8004e2c:	40ca      	lsrs	r2, r1
 8004e2e:	07d6      	lsls	r6, r2, #31
 8004e30:	d528      	bpl.n	8004e84 <__sflush_r+0xb8>
 8004e32:	2200      	movs	r2, #0
 8004e34:	6062      	str	r2, [r4, #4]
 8004e36:	04d9      	lsls	r1, r3, #19
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	d504      	bpl.n	8004e48 <__sflush_r+0x7c>
 8004e3e:	1c42      	adds	r2, r0, #1
 8004e40:	d101      	bne.n	8004e46 <__sflush_r+0x7a>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	b903      	cbnz	r3, 8004e48 <__sflush_r+0x7c>
 8004e46:	6560      	str	r0, [r4, #84]	; 0x54
 8004e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e4a:	602f      	str	r7, [r5, #0]
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d0ca      	beq.n	8004de6 <__sflush_r+0x1a>
 8004e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e54:	4299      	cmp	r1, r3
 8004e56:	d002      	beq.n	8004e5e <__sflush_r+0x92>
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7ff fd91 	bl	8004980 <_free_r>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	6360      	str	r0, [r4, #52]	; 0x34
 8004e62:	e7c1      	b.n	8004de8 <__sflush_r+0x1c>
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	2301      	movs	r3, #1
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	1c41      	adds	r1, r0, #1
 8004e6e:	d1c7      	bne.n	8004e00 <__sflush_r+0x34>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0c4      	beq.n	8004e00 <__sflush_r+0x34>
 8004e76:	2b1d      	cmp	r3, #29
 8004e78:	d001      	beq.n	8004e7e <__sflush_r+0xb2>
 8004e7a:	2b16      	cmp	r3, #22
 8004e7c:	d101      	bne.n	8004e82 <__sflush_r+0xb6>
 8004e7e:	602f      	str	r7, [r5, #0]
 8004e80:	e7b1      	b.n	8004de6 <__sflush_r+0x1a>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	e7ad      	b.n	8004de8 <__sflush_r+0x1c>
 8004e8c:	690f      	ldr	r7, [r1, #16]
 8004e8e:	2f00      	cmp	r7, #0
 8004e90:	d0a9      	beq.n	8004de6 <__sflush_r+0x1a>
 8004e92:	0793      	lsls	r3, r2, #30
 8004e94:	680e      	ldr	r6, [r1, #0]
 8004e96:	bf08      	it	eq
 8004e98:	694b      	ldreq	r3, [r1, #20]
 8004e9a:	600f      	str	r7, [r1, #0]
 8004e9c:	bf18      	it	ne
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	eba6 0807 	sub.w	r8, r6, r7
 8004ea4:	608b      	str	r3, [r1, #8]
 8004ea6:	f1b8 0f00 	cmp.w	r8, #0
 8004eaa:	dd9c      	ble.n	8004de6 <__sflush_r+0x1a>
 8004eac:	6a21      	ldr	r1, [r4, #32]
 8004eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eb0:	4643      	mov	r3, r8
 8004eb2:	463a      	mov	r2, r7
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b0      	blx	r6
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	dc06      	bgt.n	8004eca <__sflush_r+0xfe>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec2:	81a3      	strh	r3, [r4, #12]
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	e78e      	b.n	8004de8 <__sflush_r+0x1c>
 8004eca:	4407      	add	r7, r0
 8004ecc:	eba8 0800 	sub.w	r8, r8, r0
 8004ed0:	e7e9      	b.n	8004ea6 <__sflush_r+0xda>
 8004ed2:	bf00      	nop
 8004ed4:	20400001 	.word	0x20400001

08004ed8 <_fflush_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	690b      	ldr	r3, [r1, #16]
 8004edc:	4605      	mov	r5, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	b913      	cbnz	r3, 8004ee8 <_fflush_r+0x10>
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	b118      	cbz	r0, 8004ef2 <_fflush_r+0x1a>
 8004eea:	6983      	ldr	r3, [r0, #24]
 8004eec:	b90b      	cbnz	r3, 8004ef2 <_fflush_r+0x1a>
 8004eee:	f000 f887 	bl	8005000 <__sinit>
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <_fflush_r+0x6c>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	d11b      	bne.n	8004f30 <_fflush_r+0x58>
 8004ef8:	686c      	ldr	r4, [r5, #4]
 8004efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ef      	beq.n	8004ee2 <_fflush_r+0xa>
 8004f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f04:	07d0      	lsls	r0, r2, #31
 8004f06:	d404      	bmi.n	8004f12 <_fflush_r+0x3a>
 8004f08:	0599      	lsls	r1, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_fflush_r+0x3a>
 8004f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0e:	f000 f915 	bl	800513c <__retarget_lock_acquire_recursive>
 8004f12:	4628      	mov	r0, r5
 8004f14:	4621      	mov	r1, r4
 8004f16:	f7ff ff59 	bl	8004dcc <__sflush_r>
 8004f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f1c:	07da      	lsls	r2, r3, #31
 8004f1e:	4605      	mov	r5, r0
 8004f20:	d4e0      	bmi.n	8004ee4 <_fflush_r+0xc>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	059b      	lsls	r3, r3, #22
 8004f26:	d4dd      	bmi.n	8004ee4 <_fflush_r+0xc>
 8004f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2a:	f000 f908 	bl	800513e <__retarget_lock_release_recursive>
 8004f2e:	e7d9      	b.n	8004ee4 <_fflush_r+0xc>
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <_fflush_r+0x70>)
 8004f32:	429c      	cmp	r4, r3
 8004f34:	d101      	bne.n	8004f3a <_fflush_r+0x62>
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	e7df      	b.n	8004efa <_fflush_r+0x22>
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <_fflush_r+0x74>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	bf08      	it	eq
 8004f40:	68ec      	ldreq	r4, [r5, #12]
 8004f42:	e7da      	b.n	8004efa <_fflush_r+0x22>
 8004f44:	08005438 	.word	0x08005438
 8004f48:	08005458 	.word	0x08005458
 8004f4c:	08005418 	.word	0x08005418

08004f50 <std>:
 8004f50:	2300      	movs	r3, #0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4604      	mov	r4, r0
 8004f56:	e9c0 3300 	strd	r3, r3, [r0]
 8004f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5e:	6083      	str	r3, [r0, #8]
 8004f60:	8181      	strh	r1, [r0, #12]
 8004f62:	6643      	str	r3, [r0, #100]	; 0x64
 8004f64:	81c2      	strh	r2, [r0, #14]
 8004f66:	6183      	str	r3, [r0, #24]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	305c      	adds	r0, #92	; 0x5c
 8004f6e:	f7ff fcff 	bl	8004970 <memset>
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <std+0x38>)
 8004f74:	6263      	str	r3, [r4, #36]	; 0x24
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <std+0x3c>)
 8004f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <std+0x40>)
 8004f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <std+0x44>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	6323      	str	r3, [r4, #48]	; 0x30
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	08005225 	.word	0x08005225
 8004f8c:	08005247 	.word	0x08005247
 8004f90:	0800527f 	.word	0x0800527f
 8004f94:	080052a3 	.word	0x080052a3

08004f98 <_cleanup_r>:
 8004f98:	4901      	ldr	r1, [pc, #4]	; (8004fa0 <_cleanup_r+0x8>)
 8004f9a:	f000 b8af 	b.w	80050fc <_fwalk_reent>
 8004f9e:	bf00      	nop
 8004fa0:	08004ed9 	.word	0x08004ed9

08004fa4 <__sfmoreglue>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	2268      	movs	r2, #104	; 0x68
 8004fa8:	1e4d      	subs	r5, r1, #1
 8004faa:	4355      	muls	r5, r2
 8004fac:	460e      	mov	r6, r1
 8004fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fb2:	f7ff fd51 	bl	8004a58 <_malloc_r>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	b140      	cbz	r0, 8004fcc <__sfmoreglue+0x28>
 8004fba:	2100      	movs	r1, #0
 8004fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8004fc0:	300c      	adds	r0, #12
 8004fc2:	60a0      	str	r0, [r4, #8]
 8004fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fc8:	f7ff fcd2 	bl	8004970 <memset>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bd70      	pop	{r4, r5, r6, pc}

08004fd0 <__sfp_lock_acquire>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__sfp_lock_acquire+0x8>)
 8004fd2:	f000 b8b3 	b.w	800513c <__retarget_lock_acquire_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	2000085d 	.word	0x2000085d

08004fdc <__sfp_lock_release>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__sfp_lock_release+0x8>)
 8004fde:	f000 b8ae 	b.w	800513e <__retarget_lock_release_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	2000085d 	.word	0x2000085d

08004fe8 <__sinit_lock_acquire>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__sinit_lock_acquire+0x8>)
 8004fea:	f000 b8a7 	b.w	800513c <__retarget_lock_acquire_recursive>
 8004fee:	bf00      	nop
 8004ff0:	2000085e 	.word	0x2000085e

08004ff4 <__sinit_lock_release>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__sinit_lock_release+0x8>)
 8004ff6:	f000 b8a2 	b.w	800513e <__retarget_lock_release_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	2000085e 	.word	0x2000085e

08005000 <__sinit>:
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0
 8005004:	f7ff fff0 	bl	8004fe8 <__sinit_lock_acquire>
 8005008:	69a3      	ldr	r3, [r4, #24]
 800500a:	b11b      	cbz	r3, 8005014 <__sinit+0x14>
 800500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005010:	f7ff bff0 	b.w	8004ff4 <__sinit_lock_release>
 8005014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005018:	6523      	str	r3, [r4, #80]	; 0x50
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <__sinit+0x68>)
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <__sinit+0x6c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	62a2      	str	r2, [r4, #40]	; 0x28
 8005022:	42a3      	cmp	r3, r4
 8005024:	bf04      	itt	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	61a3      	streq	r3, [r4, #24]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 f820 	bl	8005070 <__sfp>
 8005030:	6060      	str	r0, [r4, #4]
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f81c 	bl	8005070 <__sfp>
 8005038:	60a0      	str	r0, [r4, #8]
 800503a:	4620      	mov	r0, r4
 800503c:	f000 f818 	bl	8005070 <__sfp>
 8005040:	2200      	movs	r2, #0
 8005042:	60e0      	str	r0, [r4, #12]
 8005044:	2104      	movs	r1, #4
 8005046:	6860      	ldr	r0, [r4, #4]
 8005048:	f7ff ff82 	bl	8004f50 <std>
 800504c:	68a0      	ldr	r0, [r4, #8]
 800504e:	2201      	movs	r2, #1
 8005050:	2109      	movs	r1, #9
 8005052:	f7ff ff7d 	bl	8004f50 <std>
 8005056:	68e0      	ldr	r0, [r4, #12]
 8005058:	2202      	movs	r2, #2
 800505a:	2112      	movs	r1, #18
 800505c:	f7ff ff78 	bl	8004f50 <std>
 8005060:	2301      	movs	r3, #1
 8005062:	61a3      	str	r3, [r4, #24]
 8005064:	e7d2      	b.n	800500c <__sinit+0xc>
 8005066:	bf00      	nop
 8005068:	08005414 	.word	0x08005414
 800506c:	08004f99 	.word	0x08004f99

08005070 <__sfp>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	4607      	mov	r7, r0
 8005074:	f7ff ffac 	bl	8004fd0 <__sfp_lock_acquire>
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <__sfp+0x84>)
 800507a:	681e      	ldr	r6, [r3, #0]
 800507c:	69b3      	ldr	r3, [r6, #24]
 800507e:	b913      	cbnz	r3, 8005086 <__sfp+0x16>
 8005080:	4630      	mov	r0, r6
 8005082:	f7ff ffbd 	bl	8005000 <__sinit>
 8005086:	3648      	adds	r6, #72	; 0x48
 8005088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	d503      	bpl.n	8005098 <__sfp+0x28>
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	b30b      	cbz	r3, 80050d8 <__sfp+0x68>
 8005094:	6836      	ldr	r6, [r6, #0]
 8005096:	e7f7      	b.n	8005088 <__sfp+0x18>
 8005098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800509c:	b9d5      	cbnz	r5, 80050d4 <__sfp+0x64>
 800509e:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <__sfp+0x88>)
 80050a0:	60e3      	str	r3, [r4, #12]
 80050a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050a6:	6665      	str	r5, [r4, #100]	; 0x64
 80050a8:	f000 f847 	bl	800513a <__retarget_lock_init_recursive>
 80050ac:	f7ff ff96 	bl	8004fdc <__sfp_lock_release>
 80050b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050b8:	6025      	str	r5, [r4, #0]
 80050ba:	61a5      	str	r5, [r4, #24]
 80050bc:	2208      	movs	r2, #8
 80050be:	4629      	mov	r1, r5
 80050c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050c4:	f7ff fc54 	bl	8004970 <memset>
 80050c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050d0:	4620      	mov	r0, r4
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d4:	3468      	adds	r4, #104	; 0x68
 80050d6:	e7d9      	b.n	800508c <__sfp+0x1c>
 80050d8:	2104      	movs	r1, #4
 80050da:	4638      	mov	r0, r7
 80050dc:	f7ff ff62 	bl	8004fa4 <__sfmoreglue>
 80050e0:	4604      	mov	r4, r0
 80050e2:	6030      	str	r0, [r6, #0]
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d1d5      	bne.n	8005094 <__sfp+0x24>
 80050e8:	f7ff ff78 	bl	8004fdc <__sfp_lock_release>
 80050ec:	230c      	movs	r3, #12
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	e7ee      	b.n	80050d0 <__sfp+0x60>
 80050f2:	bf00      	nop
 80050f4:	08005414 	.word	0x08005414
 80050f8:	ffff0001 	.word	0xffff0001

080050fc <_fwalk_reent>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	4606      	mov	r6, r0
 8005102:	4688      	mov	r8, r1
 8005104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005108:	2700      	movs	r7, #0
 800510a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800510e:	f1b9 0901 	subs.w	r9, r9, #1
 8005112:	d505      	bpl.n	8005120 <_fwalk_reent+0x24>
 8005114:	6824      	ldr	r4, [r4, #0]
 8005116:	2c00      	cmp	r4, #0
 8005118:	d1f7      	bne.n	800510a <_fwalk_reent+0xe>
 800511a:	4638      	mov	r0, r7
 800511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005120:	89ab      	ldrh	r3, [r5, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d907      	bls.n	8005136 <_fwalk_reent+0x3a>
 8005126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800512a:	3301      	adds	r3, #1
 800512c:	d003      	beq.n	8005136 <_fwalk_reent+0x3a>
 800512e:	4629      	mov	r1, r5
 8005130:	4630      	mov	r0, r6
 8005132:	47c0      	blx	r8
 8005134:	4307      	orrs	r7, r0
 8005136:	3568      	adds	r5, #104	; 0x68
 8005138:	e7e9      	b.n	800510e <_fwalk_reent+0x12>

0800513a <__retarget_lock_init_recursive>:
 800513a:	4770      	bx	lr

0800513c <__retarget_lock_acquire_recursive>:
 800513c:	4770      	bx	lr

0800513e <__retarget_lock_release_recursive>:
 800513e:	4770      	bx	lr

08005140 <__swhatbuf_r>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	2900      	cmp	r1, #0
 800514a:	b096      	sub	sp, #88	; 0x58
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	da08      	bge.n	8005164 <__swhatbuf_r+0x24>
 8005152:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	061a      	lsls	r2, r3, #24
 800515c:	d410      	bmi.n	8005180 <__swhatbuf_r+0x40>
 800515e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005162:	e00e      	b.n	8005182 <__swhatbuf_r+0x42>
 8005164:	466a      	mov	r2, sp
 8005166:	f000 f8c3 	bl	80052f0 <_fstat_r>
 800516a:	2800      	cmp	r0, #0
 800516c:	dbf1      	blt.n	8005152 <__swhatbuf_r+0x12>
 800516e:	9a01      	ldr	r2, [sp, #4]
 8005170:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005174:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005178:	425a      	negs	r2, r3
 800517a:	415a      	adcs	r2, r3
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	e7ee      	b.n	800515e <__swhatbuf_r+0x1e>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	2000      	movs	r0, #0
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	b016      	add	sp, #88	; 0x58
 8005188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800518c <__smakebuf_r>:
 800518c:	898b      	ldrh	r3, [r1, #12]
 800518e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005190:	079d      	lsls	r5, r3, #30
 8005192:	4606      	mov	r6, r0
 8005194:	460c      	mov	r4, r1
 8005196:	d507      	bpl.n	80051a8 <__smakebuf_r+0x1c>
 8005198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	2301      	movs	r3, #1
 80051a2:	6163      	str	r3, [r4, #20]
 80051a4:	b002      	add	sp, #8
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	ab01      	add	r3, sp, #4
 80051aa:	466a      	mov	r2, sp
 80051ac:	f7ff ffc8 	bl	8005140 <__swhatbuf_r>
 80051b0:	9900      	ldr	r1, [sp, #0]
 80051b2:	4605      	mov	r5, r0
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff fc4f 	bl	8004a58 <_malloc_r>
 80051ba:	b948      	cbnz	r0, 80051d0 <__smakebuf_r+0x44>
 80051bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d4ef      	bmi.n	80051a4 <__smakebuf_r+0x18>
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	e7e3      	b.n	8005198 <__smakebuf_r+0xc>
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <__smakebuf_r+0x7c>)
 80051d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	6020      	str	r0, [r4, #0]
 80051d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	6163      	str	r3, [r4, #20]
 80051e2:	9b01      	ldr	r3, [sp, #4]
 80051e4:	6120      	str	r0, [r4, #16]
 80051e6:	b15b      	cbz	r3, 8005200 <__smakebuf_r+0x74>
 80051e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f891 	bl	8005314 <_isatty_r>
 80051f2:	b128      	cbz	r0, 8005200 <__smakebuf_r+0x74>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	89a0      	ldrh	r0, [r4, #12]
 8005202:	4305      	orrs	r5, r0
 8005204:	81a5      	strh	r5, [r4, #12]
 8005206:	e7cd      	b.n	80051a4 <__smakebuf_r+0x18>
 8005208:	08004f99 	.word	0x08004f99

0800520c <__malloc_lock>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__malloc_lock+0x8>)
 800520e:	f7ff bf95 	b.w	800513c <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	2000085c 	.word	0x2000085c

08005218 <__malloc_unlock>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__malloc_unlock+0x8>)
 800521a:	f7ff bf90 	b.w	800513e <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	2000085c 	.word	0x2000085c

08005224 <__sread>:
 8005224:	b510      	push	{r4, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	f000 f894 	bl	8005358 <_read_r>
 8005230:	2800      	cmp	r0, #0
 8005232:	bfab      	itete	ge
 8005234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005236:	89a3      	ldrhlt	r3, [r4, #12]
 8005238:	181b      	addge	r3, r3, r0
 800523a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800523e:	bfac      	ite	ge
 8005240:	6563      	strge	r3, [r4, #84]	; 0x54
 8005242:	81a3      	strhlt	r3, [r4, #12]
 8005244:	bd10      	pop	{r4, pc}

08005246 <__swrite>:
 8005246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	461f      	mov	r7, r3
 800524c:	898b      	ldrh	r3, [r1, #12]
 800524e:	05db      	lsls	r3, r3, #23
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	4616      	mov	r6, r2
 8005256:	d505      	bpl.n	8005264 <__swrite+0x1e>
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	2302      	movs	r3, #2
 800525e:	2200      	movs	r2, #0
 8005260:	f000 f868 	bl	8005334 <_lseek_r>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800526a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	4632      	mov	r2, r6
 8005272:	463b      	mov	r3, r7
 8005274:	4628      	mov	r0, r5
 8005276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	f000 b817 	b.w	80052ac <_write_r>

0800527e <__sseek>:
 800527e:	b510      	push	{r4, lr}
 8005280:	460c      	mov	r4, r1
 8005282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005286:	f000 f855 	bl	8005334 <_lseek_r>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	bf15      	itete	ne
 8005290:	6560      	strne	r0, [r4, #84]	; 0x54
 8005292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800529a:	81a3      	strheq	r3, [r4, #12]
 800529c:	bf18      	it	ne
 800529e:	81a3      	strhne	r3, [r4, #12]
 80052a0:	bd10      	pop	{r4, pc}

080052a2 <__sclose>:
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 b813 	b.w	80052d0 <_close_r>
	...

080052ac <_write_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_write_r+0x20>)
 80052b0:	4604      	mov	r4, r0
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fb ff0e 	bl	80010dc <_write>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_write_r+0x1e>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_write_r+0x1e>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20000860 	.word	0x20000860

080052d0 <_close_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	4d06      	ldr	r5, [pc, #24]	; (80052ec <_close_r+0x1c>)
 80052d4:	2300      	movs	r3, #0
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fc f91d 	bl	800151a <_close>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_close_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_close_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000860 	.word	0x20000860

080052f0 <_fstat_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_fstat_r+0x20>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f7fc f918 	bl	8001532 <_fstat>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d102      	bne.n	800530c <_fstat_r+0x1c>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b103      	cbz	r3, 800530c <_fstat_r+0x1c>
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	bf00      	nop
 8005310:	20000860 	.word	0x20000860

08005314 <_isatty_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_isatty_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fc f917 	bl	8001552 <_isatty>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_isatty_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_isatty_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000860 	.word	0x20000860

08005334 <_lseek_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_lseek_r+0x20>)
 8005338:	4604      	mov	r4, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fc f910 	bl	8001568 <_lseek>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_lseek_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_lseek_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20000860 	.word	0x20000860

08005358 <_read_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d07      	ldr	r5, [pc, #28]	; (8005378 <_read_r+0x20>)
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
 8005360:	4611      	mov	r1, r2
 8005362:	2200      	movs	r2, #0
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f7fc f8ba 	bl	80014e0 <_read>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_read_r+0x1e>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_read_r+0x1e>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000860 	.word	0x20000860

0800537c <_init>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr

08005388 <_fini>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr
