
Empty_CPP_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004148  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004328  08004328  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004330  08004330  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004344  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080043e4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006e8  2000014c  08004484  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000834  08004484  00020834  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b9c  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000233c  00000000  00000000  00032d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000cb0  00000000  00000000  00035df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002917c  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112d4  00000000  00000000  0005fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f39c3  00000000  00000000  00070ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001648b3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000038ac  00000000  00000000  00164904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080042f8 	.word	0x080042f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	080042f8 	.word	0x080042f8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <cpp_main>:
#include "cpp_main.h"
#include "main.h"

void cpp_main(){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	while(1){
 8000510:	e7fe      	b.n	8000510 <cpp_main+0x4>

08000512 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fc84 	bl	8000e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f80d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f971 	bl	8000804 <MX_GPIO_Init>
  MX_ETH_Init();
 8000522:	f000 f8c3 	bl	80006ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000526:	f000 f90f 	bl	8000748 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052a:	f000 f93d 	bl	80007a8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 800052e:	f000 f86b 	bl	8000608 <MX_ADC3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 8000532:	f7ff ffeb 	bl	800050c <cpp_main>
 8000536:	e7fc      	b.n	8000532 <main+0x20>

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fece 	bl	80042e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 fe90 	bl	8002280 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ac:	2348      	movs	r3, #72	; 0x48
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fe6f 	bl	80022a0 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f9ca 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 f8fd 	bl	80027e8 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f9b4 	bl	8000960 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC3_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC3_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC3_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC3_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC3_Init+0xa0>)
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC3_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000654:	2201      	movs	r2, #1
 8000656:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC3_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000668:	f000 fc5c 	bl	8000f24 <HAL_ADC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f975 	bl	8000960 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000676:	2309      	movs	r3, #9
 8000678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067a:	2301      	movs	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_ADC3_Init+0x98>)
 8000688:	f000 fc90 	bl	8000fac <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f965 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001a0 	.word	0x200001a0
 80006a4:	40012200 	.word	0x40012200
 80006a8:	0f000001 	.word	0x0f000001

080006ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ETH_Init+0x84>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_ETH_Init+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ETH_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ETH_Init+0x8c>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ETH_Init+0x8c>)
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ETH_Init+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_ETH_Init+0x84>)
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_ETH_Init+0x8c>)
 80006de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ETH_Init+0x84>)
 80006e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_ETH_Init+0x84>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_ETH_Init+0x90>)
 80006ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_ETH_Init+0x84>)
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_ETH_Init+0x94>)
 80006f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_ETH_Init+0x84>)
 80006f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_ETH_Init+0x84>)
 80006fe:	f000 ff8b 	bl	8001618 <HAL_ETH_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f92a 	bl	8000960 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800070c:	2238      	movs	r2, #56	; 0x38
 800070e:	2100      	movs	r1, #0
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_ETH_Init+0x98>)
 8000712:	f003 fde9 	bl	80042e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_ETH_Init+0x98>)
 8000718:	2221      	movs	r2, #33	; 0x21
 800071a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_ETH_Init+0x98>)
 800071e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000722:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_ETH_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001e8 	.word	0x200001e8
 8000734:	40028000 	.word	0x40028000
 8000738:	20000828 	.word	0x20000828
 800073c:	200000ac 	.word	0x200000ac
 8000740:	2000000c 	.word	0x2000000c
 8000744:	20000168 	.word	0x20000168

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_USART3_UART_Init+0x5c>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800078c:	f002 fe42 	bl	8003414 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8e3 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000298 	.word	0x20000298
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2206      	movs	r2, #6
 80007b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2202      	movs	r2, #2
 80007be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	f001 fbff 	bl	8001fee <HAL_PCD_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f8b3 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000320 	.word	0x20000320

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a4c      	ldr	r2, [pc, #304]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0320 	orr.w	r3, r3, #32
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0320 	and.w	r3, r3, #32
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a34      	ldr	r2, [pc, #208]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_GPIO_Init+0x150>)
 80008ca:	f001 fb77 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4821      	ldr	r0, [pc, #132]	; (8000958 <MX_GPIO_Init+0x154>)
 80008d4:	f001 fb72 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <MX_GPIO_Init+0x158>)
 80008f0:	f001 f9b8 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0x150>)
 800090e:	f001 f9a9 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x154>)
 800092a:	f001 f99b 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0x154>)
 8000942:	f001 f98f 	bl	8001c64 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	40020800 	.word	0x40020800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x44>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x44>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x44>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x44>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x44>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <HAL_ADC_MspInit+0x74>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d123      	bne.n	8000a1e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_ADC_MspInit+0x78>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a06:	2308      	movs	r3, #8
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_ADC_MspInit+0x7c>)
 8000a1a:	f001 f923 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012200 	.word	0x40012200
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021400 	.word	0x40021400

08000a34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <HAL_ETH_MspInit+0x158>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	f040 8096 	bne.w	8000b84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a58:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a46      	ldr	r2, [pc, #280]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7c:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a84:	61fb      	str	r3, [r7, #28]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a40      	ldr	r2, [pc, #256]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a3a      	ldr	r2, [pc, #232]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a2e      	ldr	r2, [pc, #184]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b00:	2332      	movs	r3, #50	; 0x32
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <HAL_ETH_MspInit+0x160>)
 8000b1c:	f001 f8a2 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b20:	2386      	movs	r3, #134	; 0x86
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <HAL_ETH_MspInit+0x164>)
 8000b3c:	f001 f892 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b52:	230b      	movs	r3, #11
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <HAL_ETH_MspInit+0x168>)
 8000b5e:	f001 f881 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <HAL_ETH_MspInit+0x16c>)
 8000b80:	f001 f870 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	; 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40028000 	.word	0x40028000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40021800 	.word	0x40021800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0aa      	sub	sp, #168	; 0xa8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2284      	movs	r2, #132	; 0x84
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fb8f 	bl	80042e8 <memset>
  if(huart->Instance==USART3)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_UART_MspInit+0xb4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d13c      	bne.n	8000c4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 f826 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bee:	f7ff feb7 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0xbc>)
 8000c4a:	f001 f80b 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37a8      	adds	r7, #168	; 0xa8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004800 	.word	0x40004800
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ac      	sub	sp, #176	; 0xb0
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	2284      	movs	r2, #132	; 0x84
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fb2f 	bl	80042e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c92:	d159      	bne.n	8000d48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 ffc5 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cb0:	f7ff fe56 	bl	8000960 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ccc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4818      	ldr	r0, [pc, #96]	; (8000d54 <HAL_PCD_MspInit+0xf0>)
 8000cf4:	f000 ffb6 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_PCD_MspInit+0xf0>)
 8000d14:	f000 ffa6 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d22:	6353      	str	r3, [r2, #52]	; 0x34
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_PCD_MspInit+0xec>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	37b0      	adds	r7, #176	; 0xb0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f87a 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 fa4f 	bl	80042a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fb86 	bl	8000512 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e14:	08004338 	.word	0x08004338
  ldr r2, =_sbss
 8000e18:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e1c:	20000834 	.word	0x20000834

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>

08000e22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 fbc2 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f805 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e32:	f7ff fd9b 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fbcf 	bl	80015fe <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 fba5 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000830 	.word	0x20000830

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000830 	.word	0x20000830

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e031      	b.n	8000f9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d109      	bne.n	8000f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fd36 	bl	80009b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d116      	bne.n	8000f90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_ADC_Init+0x84>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	f043 0202 	orr.w	r2, r3, #2
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f970 	bl	8001258 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8e:	e001      	b.n	8000f94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	ffffeefd 	.word	0xffffeefd

08000fac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1c>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e136      	b.n	8001236 <HAL_ADC_ConfigChannel+0x28a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d93a      	bls.n	800104e <HAL_ADC_ConfigChannel+0xa2>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000fe0:	d035      	beq.n	800104e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3b1e      	subs	r3, #30
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a8d      	ldr	r2, [pc, #564]	; (8001244 <HAL_ADC_ConfigChannel+0x298>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68d9      	ldr	r1, [r3, #12]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	061a      	lsls	r2, r3, #24
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001026:	e035      	b.n	8001094 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68d9      	ldr	r1, [r3, #12]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4403      	add	r3, r0
 8001040:	3b1e      	subs	r3, #30
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800104c:	e022      	b.n	8001094 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6919      	ldr	r1, [r3, #16]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	2207      	movs	r2, #7
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43da      	mvns	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	400a      	ands	r2, r1
 8001070:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6919      	ldr	r1, [r3, #16]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4403      	add	r3, r0
 800108a:	409a      	lsls	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d824      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b05      	subs	r3, #5
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b05      	subs	r3, #5
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
 80010e4:	e04c      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d824      	bhi.n	8001138 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3b23      	subs	r3, #35	; 0x23
 8001100:	221f      	movs	r2, #31
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	400a      	ands	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b23      	subs	r3, #35	; 0x23
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
 8001136:	e023      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	3b41      	subs	r3, #65	; 0x41
 800114a:	221f      	movs	r2, #31
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43da      	mvns	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	400a      	ands	r2, r1
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b41      	subs	r3, #65	; 0x41
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10a      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1f4>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001192:	d105      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a2c      	ldr	r2, [pc, #176]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 800119a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800119e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10f      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x21e>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a22      	ldr	r2, [pc, #136]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d12b      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_ADC_ConfigChannel+0x298>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_ConfigChannel+0x23a>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d122      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_ADC_ConfigChannel+0x298>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d111      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_ADC_ConfigChannel+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a11      	ldr	r2, [pc, #68]	; (8001254 <HAL_ADC_ConfigChannel+0x2a8>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0c9a      	lsrs	r2, r3, #18
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800121e:	e002      	b.n	8001226 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3b01      	subs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	10000012 	.word	0x10000012
 8001248:	40012000 	.word	0x40012000
 800124c:	40012300 	.word	0x40012300
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001260:	4b78      	ldr	r3, [pc, #480]	; (8001444 <ADC_Init+0x1ec>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <ADC_Init+0x1ec>)
 8001266:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800126a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <ADC_Init+0x1ec>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4973      	ldr	r1, [pc, #460]	; (8001444 <ADC_Init+0x1ec>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	021a      	lsls	r2, r3, #8
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6899      	ldr	r1, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	4a58      	ldr	r2, [pc, #352]	; (8001448 <ADC_Init+0x1f0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d022      	beq.n	8001332 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6899      	ldr	r1, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800131c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6899      	ldr	r1, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	e00f      	b.n	8001352 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001350:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0202 	bic.w	r2, r2, #2
 8001360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	005a      	lsls	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01b      	beq.n	80013b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800138e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800139e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	3b01      	subs	r3, #1
 80013ac:	035a      	lsls	r2, r3, #13
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	e007      	b.n	80013c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	051a      	lsls	r2, r3, #20
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800140a:	025a      	lsls	r2, r3, #9
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	029a      	lsls	r2, r3, #10
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	609a      	str	r2, [r3, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40012300 	.word	0x40012300
 8001448:	0f000001 	.word	0x0f000001

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <__NVIC_SetPriorityGrouping+0x40>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	4313      	orrs	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x40>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	05fa0000 	.word	0x05fa0000

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5c 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb0 	bl	800156c <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06a      	b.n	8001700 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2223      	movs	r2, #35	; 0x23
 8001638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f9f9 	bl	8000a34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_ETH_Init+0xf4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_ETH_Init+0xf4>)
 8001660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001664:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_ETH_Init+0xf4>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <HAL_ETH_Init+0xf4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_ETH_Init+0xf4>)
 8001676:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff fc18 	bl	8000ec4 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001696:	e011      	b.n	80016bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001698:	f7ff fc14 	bl	8000ec4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	d909      	bls.n	80016bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	22e0      	movs	r2, #224	; 0xe0
 80016b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e021      	b.n	8001700 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e4      	bne.n	8001698 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f958 	bl	8001984 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f9ff 	bl	8001ad8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fa55 	bl	8001b8a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f9bd 	bl	8001a68 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2210      	movs	r2, #16
 80016fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800

08001710 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <ETH_SetMACConfig+0x15c>)
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <ETH_SetMACConfig+0x28>
 8001732:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001736:	e000      	b.n	800173a <ETH_SetMACConfig+0x2a>
 8001738:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	7c5b      	ldrb	r3, [r3, #17]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <ETH_SetMACConfig+0x38>
 8001742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001746:	e000      	b.n	800174a <ETH_SetMACConfig+0x3a>
 8001748:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800174a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	7fdb      	ldrb	r3, [r3, #31]
 8001756:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001758:	431a      	orrs	r2, r3
                        macconf->Speed |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800175e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	7f92      	ldrb	r2, [r2, #30]
 8001764:	2a00      	cmp	r2, #0
 8001766:	d102      	bne.n	800176e <ETH_SetMACConfig+0x5e>
 8001768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176c:	e000      	b.n	8001770 <ETH_SetMACConfig+0x60>
 800176e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	7f1b      	ldrb	r3, [r3, #28]
 8001776:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001778:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800177e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800178e:	2a00      	cmp	r2, #0
 8001790:	d102      	bne.n	8001798 <ETH_SetMACConfig+0x88>
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	e000      	b.n	800179a <ETH_SetMACConfig+0x8a>
 8001798:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800179a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7bdb      	ldrb	r3, [r3, #15]
 80017a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fb86 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d101      	bne.n	80017fe <ETH_SetMACConfig+0xee>
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	e000      	b.n	8001800 <ETH_SetMACConfig+0xf0>
 80017fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001800:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800180e:	2a01      	cmp	r2, #1
 8001810:	d101      	bne.n	8001816 <ETH_SetMACConfig+0x106>
 8001812:	2208      	movs	r2, #8
 8001814:	e000      	b.n	8001818 <ETH_SetMACConfig+0x108>
 8001816:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001818:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001820:	2a01      	cmp	r2, #1
 8001822:	d101      	bne.n	8001828 <ETH_SetMACConfig+0x118>
 8001824:	2204      	movs	r2, #4
 8001826:	e000      	b.n	800182a <ETH_SetMACConfig+0x11a>
 8001828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800182a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001832:	2a01      	cmp	r2, #1
 8001834:	d101      	bne.n	800183a <ETH_SetMACConfig+0x12a>
 8001836:	2202      	movs	r2, #2
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x12c>
 800183a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800183c:	4313      	orrs	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fb41 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	ff20810f 	.word	0xff20810f

08001870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <ETH_SetDMAConfig+0x110>)
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	7b1b      	ldrb	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <ETH_SetDMAConfig+0x2c>
 8001896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800189a:	e000      	b.n	800189e <ETH_SetDMAConfig+0x2e>
 800189c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	7f52      	ldrb	r2, [r2, #29]
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d102      	bne.n	80018b4 <ETH_SetDMAConfig+0x44>
 80018ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b2:	e000      	b.n	80018b6 <ETH_SetDMAConfig+0x46>
 80018b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7b9b      	ldrb	r3, [r3, #14]
 80018bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	7f1b      	ldrb	r3, [r3, #28]
 80018ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7f9b      	ldrb	r3, [r3, #30]
 80018d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fae8 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	461a      	mov	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001924:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800192a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001930:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001938:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800193a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001942:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001948:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001956:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fab9 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	f8de3f23 	.word	0xf8de3f23

08001984 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0a6      	sub	sp, #152	; 0x98
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800198c:	2301      	movs	r3, #1
 800198e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fe86 	bl	8001710 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff08 	bl	8001870 <ETH_SetDMAConfig>
}
 8001a60:	bf00      	nop
 8001a62:	3798      	adds	r7, #152	; 0x98
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3305      	adds	r3, #5
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3204      	adds	r2, #4
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <ETH_MACAddressConfig+0x68>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <ETH_MACAddressConfig+0x6c>)
 8001aba:	4413      	add	r3, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40028040 	.word	0x40028040
 8001ad4:	40028044 	.word	0x40028044

08001ad8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e03e      	b.n	8001b64 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68d9      	ldr	r1, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	3206      	adds	r2, #6
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d80c      	bhi.n	8001b48 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	e004      	b.n	8001b52 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d9bd      	bls.n	8001ae6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	611a      	str	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e046      	b.n	8001c26 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	3212      	adds	r2, #18
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d80c      	bhi.n	8001c16 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6919      	ldr	r1, [r3, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	e004      	b.n	8001c20 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d9b5      	bls.n	8001b98 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e175      	b.n	8001f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8164 	bne.w	8001f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x56>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80be 	beq.w	8001f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e06:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_GPIO_Init+0x328>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d037      	beq.n	8001ea2 <HAL_GPIO_Init+0x23e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_GPIO_Init+0x330>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d031      	beq.n	8001e9e <HAL_GPIO_Init+0x23a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a56      	ldr	r2, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x334>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x236>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_GPIO_Init+0x338>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x232>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x33c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x22e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_GPIO_Init+0x340>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x22a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_GPIO_Init+0x344>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x222>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_GPIO_Init+0x34c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x21e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x21a>
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	e012      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e7e:	230a      	movs	r3, #10
 8001e80:	e010      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e82:	2308      	movs	r3, #8
 8001e84:	e00e      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00c      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e00a      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x328>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f ae86 	bls.w	8001c84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40021800 	.word	0x40021800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40022400 	.word	0x40022400
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff0:	b08f      	sub	sp, #60	; 0x3c
 8001ff2:	af0a      	add	r7, sp, #40	; 0x28
 8001ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e116      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fe22 	bl	8000c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fe92 	bl	8003d68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	687e      	ldr	r6, [r7, #4]
 800204c:	466d      	mov	r5, sp
 800204e:	f106 0410 	add.w	r4, r6, #16
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800205e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002062:	1d33      	adds	r3, r6, #4
 8002064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f001 fe26 	bl	8003cb8 <USB_CoreInit>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0d7      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fe80 	bl	8003d8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e04a      	b.n	8002126 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	333d      	adds	r3, #61	; 0x3d
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	333c      	adds	r3, #60	; 0x3c
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	b298      	uxth	r0, r3
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3344      	adds	r3, #68	; 0x44
 80020cc:	4602      	mov	r2, r0
 80020ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3340      	adds	r3, #64	; 0x40
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3348      	adds	r3, #72	; 0x48
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	334c      	adds	r3, #76	; 0x4c
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3354      	adds	r3, #84	; 0x54
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d3af      	bcc.n	8002090 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e044      	b.n	80021c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	3301      	adds	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3b5      	bcc.n	8002136 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	687e      	ldr	r6, [r7, #4]
 80021d2:	466d      	mov	r5, sp
 80021d4:	f106 0410 	add.w	r4, r6, #16
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e8:	1d33      	adds	r3, r6, #4
 80021ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f001 fe19 	bl	8003e24 <USB_DevInit>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e014      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f80b 	bl	8002238 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f001 ffd7 	bl	80041da <USB_DevDisconnect>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002238 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_PCDEx_ActivateLPM+0x44>)
 8002268:	4313      	orrs	r3, r2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	10000003 	.word	0x10000003

08002280 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40007000 	.word	0x40007000

080022a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e291      	b.n	80027da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8087 	beq.w	80023d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d00c      	beq.n	80022ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d0:	4b93      	ldr	r3, [pc, #588]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d112      	bne.n	8002302 <HAL_RCC_OscConfig+0x62>
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d10b      	bne.n	8002302 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ea:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d06c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x130>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d168      	bne.n	80023d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e26b      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x7a>
 800230c:	4b84      	ldr	r3, [pc, #528]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a83      	ldr	r2, [pc, #524]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e02e      	b.n	8002378 <HAL_RCC_OscConfig+0xd8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x9c>
 8002322:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7e      	ldr	r2, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7b      	ldr	r2, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xd8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0xc0>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0xd8>
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6b      	ldr	r2, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fda0 	bl	8000ec4 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe fd9c 	bl	8000ec4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e21f      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xe8>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fd8c 	bl	8000ec4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe fd88 	bl	8000ec4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e20b      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x110>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d069      	beq.n	80024b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023de:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x190>
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x17a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1df      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	493d      	ldr	r1, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e040      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a38      	ldr	r2, [pc, #224]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fd3e 	bl	8000ec4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fd3a 	bl	8000ec4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1bd      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4929      	ldr	r1, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
 800247e:	e018      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd1a 	bl	8000ec4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fd16 	bl	8000ec4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e199      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d038      	beq.n	8002530 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d019      	beq.n	80024fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fcf7 	bl	8000ec4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fcf3 	bl	8000ec4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e176      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x23a>
 80024f8:	e01a      	b.n	8002530 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <HAL_RCC_OscConfig+0x280>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe fcdd 	bl	8000ec4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fcd9 	bl	8000ec4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d903      	bls.n	8002524 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e15c      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
 8002520:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b91      	ldr	r3, [pc, #580]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a4 	beq.w	8002686 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a87      	ldr	r2, [pc, #540]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	2301      	movs	r3, #1
 8002564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002566:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257e:	f7fe fca1 	bl	8000ec4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7fe fc9d 	bl	8000ec4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e120      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4d0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x31a>
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
 80025b8:	e02d      	b.n	8002616 <HAL_RCC_OscConfig+0x376>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x33c>
 80025c2:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a69      	ldr	r2, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a66      	ldr	r2, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	e01c      	b.n	8002616 <HAL_RCC_OscConfig+0x376>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x35e>
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x376>
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a5a      	ldr	r2, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fc51 	bl	8000ec4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fc4d 	bl	8000ec4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0ce      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <HAL_RCC_OscConfig+0x386>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fc3b 	bl	8000ec4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7fe fc37 	bl	8000ec4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0b8      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a3b      	ldr	r2, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a4 	beq.w	80027d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d06b      	beq.n	8002774 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d149      	bne.n	8002738 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fc08 	bl	8000ec4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fc04 	bl	8000ec4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e087      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	4313      	orrs	r3, r2
 80026fc:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002702:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fbd8 	bl	8000ec4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fbd4 	bl	8000ec4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e057      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x478>
 8002736:	e04f      	b.n	80027d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0b      	ldr	r2, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800273e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fbbe 	bl	8000ec4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fbba 	bl	8000ec4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e03d      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x4ac>
 800276a:	e035      	b.n	80027d8 <HAL_RCC_OscConfig+0x538>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x544>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d028      	beq.n	80027d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d121      	bne.n	80027d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d0      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d910      	bls.n	8002830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 020f 	bic.w	r2, r3, #15
 8002816:	4965      	ldr	r1, [pc, #404]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0b8      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002852:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	494d      	ldr	r1, [pc, #308]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d040      	beq.n	800290c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d115      	bne.n	80028ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e073      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06b      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4936      	ldr	r1, [pc, #216]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028dc:	f7fe faf2 	bl	8000ec4 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe faee 	bl	8000ec4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e053      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d210      	bcs.n	800293c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 020f 	bic.w	r2, r3, #15
 8002922:	4922      	ldr	r1, [pc, #136]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e032      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800297a:	f000 f821 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800297e:	4602      	mov	r2, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	490a      	ldr	r1, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x1cc>)
 800298c:	5ccb      	ldrb	r3, [r1, r3]
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1d4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fa4e 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08004310 	.word	0x08004310
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b094      	sub	sp, #80	; 0x50
 80029c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	647b      	str	r3, [r7, #68]	; 0x44
 80029cc:	2300      	movs	r3, #0
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d0:	2300      	movs	r3, #0
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d8:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x40>
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	f200 80e1 	bhi.w	8002bac <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0x3a>
 80029f2:	e0db      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f8:	e0db      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fe:	e0d8      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a0a:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	f04f 0000 	mov.w	r0, #0
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	0159      	lsls	r1, r3, #5
 8002a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a44:	0150      	lsls	r0, r2, #5
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	1a51      	subs	r1, r2, r1
 8002a4e:	6139      	str	r1, [r7, #16]
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb63 0301 	sbc.w	r3, r3, r1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a64:	4659      	mov	r1, fp
 8002a66:	018b      	lsls	r3, r1, #6
 8002a68:	4651      	mov	r1, sl
 8002a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6e:	4651      	mov	r1, sl
 8002a70:	018a      	lsls	r2, r1, #6
 8002a72:	4651      	mov	r1, sl
 8002a74:	ebb2 0801 	subs.w	r8, r2, r1
 8002a78:	4659      	mov	r1, fp
 8002a7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a92:	4690      	mov	r8, r2
 8002a94:	4699      	mov	r9, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	eb18 0303 	adds.w	r3, r8, r3
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	eb49 0303 	adc.w	r3, r9, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	024b      	lsls	r3, r1, #9
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002abc:	4621      	mov	r1, r4
 8002abe:	024a      	lsls	r2, r1, #9
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad0:	f7fd fb9a 	bl	8000208 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e058      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4611      	mov	r1, r2
 8002aea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	f04f 0000 	mov.w	r0, #0
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	0159      	lsls	r1, r3, #5
 8002b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0a:	0150      	lsls	r0, r2, #5
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4641      	mov	r1, r8
 8002b12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b30:	ebb2 040a 	subs.w	r4, r2, sl
 8002b34:	eb63 050b 	sbc.w	r5, r3, fp
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	00eb      	lsls	r3, r5, #3
 8002b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b46:	00e2      	lsls	r2, r4, #3
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	18e3      	adds	r3, r4, r3
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	464b      	mov	r3, r9
 8002b54:	eb45 0303 	adc.w	r3, r5, r3
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b66:	4629      	mov	r1, r5
 8002b68:	028b      	lsls	r3, r1, #10
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b70:	4621      	mov	r1, r4
 8002b72:	028a      	lsls	r2, r1, #10
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	61fa      	str	r2, [r7, #28]
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	f7fd fb40 	bl	8000208 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3750      	adds	r7, #80	; 0x50
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0a9b      	lsrs	r3, r3, #10
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08004320 	.word	0x08004320

08002c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c10:	f7ff ffdc 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0b5b      	lsrs	r3, r3, #13
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08004320 	.word	0x08004320

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a68      	ldr	r2, [pc, #416]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	4964      	ldr	r1, [pc, #400]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d017      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	4959      	ldr	r1, [pc, #356]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d017      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cca:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	494a      	ldr	r1, [pc, #296]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce8:	d101      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 808b 	beq.w	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a39      	ldr	r2, [pc, #228]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fe f8c2 	bl	8000ec4 <HAL_GetTick>
 8002d40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe f8be 	bl	8000ec4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e357      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d035      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d02e      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d114      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f886 	bl	8000ec4 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f882 	bl	8000ec4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e319      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ee      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dea:	d111      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	4901      	ldr	r1, [pc, #4]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	0ffffcff 	.word	0x0ffffcff
 8002e10:	4baa      	ldr	r3, [pc, #680]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4aa9      	ldr	r2, [pc, #676]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e1a:	6093      	str	r3, [r2, #8]
 8002e1c:	4ba7      	ldr	r3, [pc, #668]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	49a4      	ldr	r1, [pc, #656]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e3a:	4ba0      	ldr	r3, [pc, #640]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	4a9e      	ldr	r2, [pc, #632]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e4a:	4b9c      	ldr	r3, [pc, #624]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	4999      	ldr	r1, [pc, #612]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e68:	4b94      	ldr	r3, [pc, #592]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e76:	4991      	ldr	r1, [pc, #580]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e8a:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e98:	4988      	ldr	r1, [pc, #544]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eac:	4b83      	ldr	r3, [pc, #524]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	4980      	ldr	r1, [pc, #512]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ece:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4977      	ldr	r1, [pc, #476]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef0:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	496f      	ldr	r1, [pc, #444]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f023 020c 	bic.w	r2, r3, #12
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	4966      	ldr	r1, [pc, #408]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	495e      	ldr	r1, [pc, #376]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f56:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f64:	4955      	ldr	r1, [pc, #340]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	494d      	ldr	r1, [pc, #308]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f9a:	4b48      	ldr	r3, [pc, #288]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4944      	ldr	r1, [pc, #272]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	493c      	ldr	r1, [pc, #240]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	4933      	ldr	r1, [pc, #204]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300e:	492b      	ldr	r1, [pc, #172]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d011      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003030:	4922      	ldr	r1, [pc, #136]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003040:	d101      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	4912      	ldr	r1, [pc, #72]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	4909      	ldr	r1, [pc, #36]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d006      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80d9 	beq.w	8003262 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030b0:	4b02      	ldr	r3, [pc, #8]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a01      	ldr	r2, [pc, #4]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c2:	f7fd feff 	bl	8000ec4 <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ca:	f7fd fefb 	bl	8000ec4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e194      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d021      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11d      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030fc:	4b64      	ldr	r3, [pc, #400]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	019a      	lsls	r2, r3, #6
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	071b      	lsls	r3, r3, #28
 8003130:	4957      	ldr	r1, [pc, #348]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003162:	d129      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003164:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003178:	0f1b      	lsrs	r3, r3, #28
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	019a      	lsls	r2, r3, #6
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	071b      	lsls	r3, r3, #28
 8003198:	493d      	ldr	r1, [pc, #244]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a6:	f023 021f 	bic.w	r2, r3, #31
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01d      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ca:	0e1b      	lsrs	r3, r3, #24
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	0f1b      	lsrs	r3, r3, #28
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	019a      	lsls	r2, r3, #6
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	071b      	lsls	r3, r3, #28
 80031f8:	4925      	ldr	r1, [pc, #148]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d011      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	019a      	lsls	r2, r3, #6
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	071b      	lsls	r3, r3, #28
 8003228:	4919      	ldr	r1, [pc, #100]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003230:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800323a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323c:	f7fd fe42 	bl	8000ec4 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003244:	f7fd fe3e 	bl	8000ec4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0d7      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 80cd 	bne.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003276:	f7fd fe25 	bl	8000ec4 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327e:	f7fd fe21 	bl	8000ec4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	; 0x64
 800328a:	d903      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ba      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003290:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003294:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a0:	d0ed      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02e      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d12a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032ca:	4b51      	ldr	r3, [pc, #324]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032d8:	4b4d      	ldr	r3, [pc, #308]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	0f1b      	lsrs	r3, r3, #28
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	019a      	lsls	r2, r3, #6
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	071b      	lsls	r3, r3, #28
 80032fe:	4944      	ldr	r1, [pc, #272]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003306:	4b42      	ldr	r3, [pc, #264]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	493d      	ldr	r1, [pc, #244]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d022      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003334:	d11d      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	0e1b      	lsrs	r3, r3, #24
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003344:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	0f1b      	lsrs	r3, r3, #28
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	019a      	lsls	r2, r3, #6
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	061b      	lsls	r3, r3, #24
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	4929      	ldr	r1, [pc, #164]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d028      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	0e1b      	lsrs	r3, r3, #24
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	019a      	lsls	r2, r3, #6
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	4917      	ldr	r1, [pc, #92]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4911      	ldr	r1, [pc, #68]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fd fd72 	bl	8000ec4 <HAL_GetTick>
 80033e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e4:	f7fd fd6e 	bl	8000ec4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e007      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003402:	d1ef      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e040      	b.n	80034a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fbb4 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f82c 	bl	80034b0 <UART_SetConfig>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e022      	b.n	80034a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa84 	bl	8003978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fb0b 	bl	8003abc <UART_CheckIdleState>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4ba6      	ldr	r3, [pc, #664]	; (8003774 <UART_SetConfig+0x2c4>)
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a94      	ldr	r2, [pc, #592]	; (8003778 <UART_SetConfig+0x2c8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d120      	bne.n	800356e <UART_SetConfig+0xbe>
 800352c:	4b93      	ldr	r3, [pc, #588]	; (800377c <UART_SetConfig+0x2cc>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d816      	bhi.n	8003568 <UART_SetConfig+0xb8>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <UART_SetConfig+0x90>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	0800355d 	.word	0x0800355d
 8003548:	08003557 	.word	0x08003557
 800354c:	08003563 	.word	0x08003563
 8003550:	2301      	movs	r3, #1
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e150      	b.n	80037f8 <UART_SetConfig+0x348>
 8003556:	2302      	movs	r3, #2
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e14d      	b.n	80037f8 <UART_SetConfig+0x348>
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e14a      	b.n	80037f8 <UART_SetConfig+0x348>
 8003562:	2308      	movs	r3, #8
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e147      	b.n	80037f8 <UART_SetConfig+0x348>
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e144      	b.n	80037f8 <UART_SetConfig+0x348>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a83      	ldr	r2, [pc, #524]	; (8003780 <UART_SetConfig+0x2d0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d132      	bne.n	80035de <UART_SetConfig+0x12e>
 8003578:	4b80      	ldr	r3, [pc, #512]	; (800377c <UART_SetConfig+0x2cc>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d828      	bhi.n	80035d8 <UART_SetConfig+0x128>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0xdc>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035cd 	.word	0x080035cd
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035c7 	.word	0x080035c7
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035d9 	.word	0x080035d9
 80035bc:	080035d3 	.word	0x080035d3
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e118      	b.n	80037f8 <UART_SetConfig+0x348>
 80035c6:	2302      	movs	r3, #2
 80035c8:	77fb      	strb	r3, [r7, #31]
 80035ca:	e115      	b.n	80037f8 <UART_SetConfig+0x348>
 80035cc:	2304      	movs	r3, #4
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e112      	b.n	80037f8 <UART_SetConfig+0x348>
 80035d2:	2308      	movs	r3, #8
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e10f      	b.n	80037f8 <UART_SetConfig+0x348>
 80035d8:	2310      	movs	r3, #16
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e10c      	b.n	80037f8 <UART_SetConfig+0x348>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a68      	ldr	r2, [pc, #416]	; (8003784 <UART_SetConfig+0x2d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d120      	bne.n	800362a <UART_SetConfig+0x17a>
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <UART_SetConfig+0x2cc>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d013      	beq.n	800361e <UART_SetConfig+0x16e>
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d814      	bhi.n	8003624 <UART_SetConfig+0x174>
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d009      	beq.n	8003612 <UART_SetConfig+0x162>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d810      	bhi.n	8003624 <UART_SetConfig+0x174>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <UART_SetConfig+0x15c>
 8003606:	2b10      	cmp	r3, #16
 8003608:	d006      	beq.n	8003618 <UART_SetConfig+0x168>
 800360a:	e00b      	b.n	8003624 <UART_SetConfig+0x174>
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e0f2      	b.n	80037f8 <UART_SetConfig+0x348>
 8003612:	2302      	movs	r3, #2
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e0ef      	b.n	80037f8 <UART_SetConfig+0x348>
 8003618:	2304      	movs	r3, #4
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e0ec      	b.n	80037f8 <UART_SetConfig+0x348>
 800361e:	2308      	movs	r3, #8
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e0e9      	b.n	80037f8 <UART_SetConfig+0x348>
 8003624:	2310      	movs	r3, #16
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e0e6      	b.n	80037f8 <UART_SetConfig+0x348>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a56      	ldr	r2, [pc, #344]	; (8003788 <UART_SetConfig+0x2d8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d120      	bne.n	8003676 <UART_SetConfig+0x1c6>
 8003634:	4b51      	ldr	r3, [pc, #324]	; (800377c <UART_SetConfig+0x2cc>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800363e:	2bc0      	cmp	r3, #192	; 0xc0
 8003640:	d013      	beq.n	800366a <UART_SetConfig+0x1ba>
 8003642:	2bc0      	cmp	r3, #192	; 0xc0
 8003644:	d814      	bhi.n	8003670 <UART_SetConfig+0x1c0>
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d009      	beq.n	800365e <UART_SetConfig+0x1ae>
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d810      	bhi.n	8003670 <UART_SetConfig+0x1c0>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <UART_SetConfig+0x1a8>
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d006      	beq.n	8003664 <UART_SetConfig+0x1b4>
 8003656:	e00b      	b.n	8003670 <UART_SetConfig+0x1c0>
 8003658:	2300      	movs	r3, #0
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e0cc      	b.n	80037f8 <UART_SetConfig+0x348>
 800365e:	2302      	movs	r3, #2
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e0c9      	b.n	80037f8 <UART_SetConfig+0x348>
 8003664:	2304      	movs	r3, #4
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e0c6      	b.n	80037f8 <UART_SetConfig+0x348>
 800366a:	2308      	movs	r3, #8
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e0c3      	b.n	80037f8 <UART_SetConfig+0x348>
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e0c0      	b.n	80037f8 <UART_SetConfig+0x348>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a44      	ldr	r2, [pc, #272]	; (800378c <UART_SetConfig+0x2dc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d125      	bne.n	80036cc <UART_SetConfig+0x21c>
 8003680:	4b3e      	ldr	r3, [pc, #248]	; (800377c <UART_SetConfig+0x2cc>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368e:	d017      	beq.n	80036c0 <UART_SetConfig+0x210>
 8003690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003694:	d817      	bhi.n	80036c6 <UART_SetConfig+0x216>
 8003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369a:	d00b      	beq.n	80036b4 <UART_SetConfig+0x204>
 800369c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a0:	d811      	bhi.n	80036c6 <UART_SetConfig+0x216>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <UART_SetConfig+0x1fe>
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d006      	beq.n	80036ba <UART_SetConfig+0x20a>
 80036ac:	e00b      	b.n	80036c6 <UART_SetConfig+0x216>
 80036ae:	2300      	movs	r3, #0
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e0a1      	b.n	80037f8 <UART_SetConfig+0x348>
 80036b4:	2302      	movs	r3, #2
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e09e      	b.n	80037f8 <UART_SetConfig+0x348>
 80036ba:	2304      	movs	r3, #4
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e09b      	b.n	80037f8 <UART_SetConfig+0x348>
 80036c0:	2308      	movs	r3, #8
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e098      	b.n	80037f8 <UART_SetConfig+0x348>
 80036c6:	2310      	movs	r3, #16
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e095      	b.n	80037f8 <UART_SetConfig+0x348>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <UART_SetConfig+0x2e0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d125      	bne.n	8003722 <UART_SetConfig+0x272>
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <UART_SetConfig+0x2cc>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e4:	d017      	beq.n	8003716 <UART_SetConfig+0x266>
 80036e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ea:	d817      	bhi.n	800371c <UART_SetConfig+0x26c>
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f0:	d00b      	beq.n	800370a <UART_SetConfig+0x25a>
 80036f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f6:	d811      	bhi.n	800371c <UART_SetConfig+0x26c>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <UART_SetConfig+0x254>
 80036fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003700:	d006      	beq.n	8003710 <UART_SetConfig+0x260>
 8003702:	e00b      	b.n	800371c <UART_SetConfig+0x26c>
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e076      	b.n	80037f8 <UART_SetConfig+0x348>
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e073      	b.n	80037f8 <UART_SetConfig+0x348>
 8003710:	2304      	movs	r3, #4
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e070      	b.n	80037f8 <UART_SetConfig+0x348>
 8003716:	2308      	movs	r3, #8
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e06d      	b.n	80037f8 <UART_SetConfig+0x348>
 800371c:	2310      	movs	r3, #16
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e06a      	b.n	80037f8 <UART_SetConfig+0x348>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <UART_SetConfig+0x2e4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d138      	bne.n	800379e <UART_SetConfig+0x2ee>
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <UART_SetConfig+0x2cc>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373a:	d017      	beq.n	800376c <UART_SetConfig+0x2bc>
 800373c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003740:	d82a      	bhi.n	8003798 <UART_SetConfig+0x2e8>
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d00b      	beq.n	8003760 <UART_SetConfig+0x2b0>
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d824      	bhi.n	8003798 <UART_SetConfig+0x2e8>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <UART_SetConfig+0x2aa>
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	d006      	beq.n	8003766 <UART_SetConfig+0x2b6>
 8003758:	e01e      	b.n	8003798 <UART_SetConfig+0x2e8>
 800375a:	2300      	movs	r3, #0
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e04b      	b.n	80037f8 <UART_SetConfig+0x348>
 8003760:	2302      	movs	r3, #2
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e048      	b.n	80037f8 <UART_SetConfig+0x348>
 8003766:	2304      	movs	r3, #4
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e045      	b.n	80037f8 <UART_SetConfig+0x348>
 800376c:	2308      	movs	r3, #8
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e042      	b.n	80037f8 <UART_SetConfig+0x348>
 8003772:	bf00      	nop
 8003774:	efff69f3 	.word	0xefff69f3
 8003778:	40011000 	.word	0x40011000
 800377c:	40023800 	.word	0x40023800
 8003780:	40004400 	.word	0x40004400
 8003784:	40004800 	.word	0x40004800
 8003788:	40004c00 	.word	0x40004c00
 800378c:	40005000 	.word	0x40005000
 8003790:	40011400 	.word	0x40011400
 8003794:	40007800 	.word	0x40007800
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e02c      	b.n	80037f8 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a72      	ldr	r2, [pc, #456]	; (800396c <UART_SetConfig+0x4bc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d125      	bne.n	80037f4 <UART_SetConfig+0x344>
 80037a8:	4b71      	ldr	r3, [pc, #452]	; (8003970 <UART_SetConfig+0x4c0>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037b6:	d017      	beq.n	80037e8 <UART_SetConfig+0x338>
 80037b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037bc:	d817      	bhi.n	80037ee <UART_SetConfig+0x33e>
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c2:	d00b      	beq.n	80037dc <UART_SetConfig+0x32c>
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d811      	bhi.n	80037ee <UART_SetConfig+0x33e>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <UART_SetConfig+0x326>
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d2:	d006      	beq.n	80037e2 <UART_SetConfig+0x332>
 80037d4:	e00b      	b.n	80037ee <UART_SetConfig+0x33e>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e00d      	b.n	80037f8 <UART_SetConfig+0x348>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e00a      	b.n	80037f8 <UART_SetConfig+0x348>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e007      	b.n	80037f8 <UART_SetConfig+0x348>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e004      	b.n	80037f8 <UART_SetConfig+0x348>
 80037ee:	2310      	movs	r3, #16
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e001      	b.n	80037f8 <UART_SetConfig+0x348>
 80037f4:	2310      	movs	r3, #16
 80037f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	d15b      	bne.n	80038ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d828      	bhi.n	800385a <UART_SetConfig+0x3aa>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <UART_SetConfig+0x360>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003835 	.word	0x08003835
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003845 	.word	0x08003845
 800381c:	0800385b 	.word	0x0800385b
 8003820:	0800384b 	.word	0x0800384b
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800385b 	.word	0x0800385b
 800382c:	0800385b 	.word	0x0800385b
 8003830:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003834:	f7ff f9d6 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8003838:	61b8      	str	r0, [r7, #24]
        break;
 800383a:	e013      	b.n	8003864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7ff f9e6 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 8003840:	61b8      	str	r0, [r7, #24]
        break;
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <UART_SetConfig+0x4c4>)
 8003846:	61bb      	str	r3, [r7, #24]
        break;
 8003848:	e00c      	b.n	8003864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7ff f8b9 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800384e:	61b8      	str	r0, [r7, #24]
        break;
 8003850:	e008      	b.n	8003864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e004      	b.n	8003864 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77bb      	strb	r3, [r7, #30]
        break;
 8003862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d074      	beq.n	8003954 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	441a      	add	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d916      	bls.n	80038b4 <UART_SetConfig+0x404>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d212      	bcs.n	80038b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f023 030f 	bic.w	r3, r3, #15
 8003896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	89fb      	ldrh	r3, [r7, #14]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	89fa      	ldrh	r2, [r7, #14]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	e04f      	b.n	8003954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	77bb      	strb	r3, [r7, #30]
 80038b8:	e04c      	b.n	8003954 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d828      	bhi.n	8003912 <UART_SetConfig+0x462>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x418>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003913 	.word	0x08003913
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003913 	.word	0x08003913
 80038e4:	08003913 	.word	0x08003913
 80038e8:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7ff f97a 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 80038f0:	61b8      	str	r0, [r7, #24]
        break;
 80038f2:	e013      	b.n	800391c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7ff f98a 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 80038f8:	61b8      	str	r0, [r7, #24]
        break;
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <UART_SetConfig+0x4c4>)
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e00c      	b.n	800391c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7ff f85d 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003906:	61b8      	str	r0, [r7, #24]
        break;
 8003908:	e008      	b.n	800391c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	61bb      	str	r3, [r7, #24]
        break;
 8003910:	e004      	b.n	800391c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	77bb      	strb	r3, [r7, #30]
        break;
 800391a:	bf00      	nop
    }

    if (pclk != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	085a      	lsrs	r2, r3, #1
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d909      	bls.n	8003950 <UART_SetConfig+0x4a0>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d205      	bcs.n	8003950 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	e001      	b.n	8003954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003960:	7fbb      	ldrb	r3, [r7, #30]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40007c00 	.word	0x40007c00
 8003970:	40023800 	.word	0x40023800
 8003974:	00f42400 	.word	0x00f42400

08003978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01a      	beq.n	8003a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a76:	d10a      	bne.n	8003a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003acc:	f7fd f9fa 	bl	8000ec4 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d10e      	bne.n	8003afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f81b 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e011      	b.n	8003b22 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b09c      	sub	sp, #112	; 0x70
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	e0a7      	b.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	f000 80a3 	beq.w	8003c8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd f9bd 	bl	8000ec4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13f      	bne.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b70:	667b      	str	r3, [r7, #100]	; 0x64
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e6      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e068      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d050      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf8:	d148      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
 8003c24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e6      	bne.n	8003c04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	613b      	str	r3, [r7, #16]
   return(result);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c56:	623a      	str	r2, [r7, #32]
 8003c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	69f9      	ldr	r1, [r7, #28]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e010      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f43f af48 	beq.w	8003b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3770      	adds	r7, #112	; 0x70
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb8:	b084      	sub	sp, #16
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	f107 001c 	add.w	r0, r7, #28
 8003cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d120      	bne.n	8003d12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <USB_CoreInit+0xac>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa96 	bl	8004238 <USB_CoreReset>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e010      	b.n	8003d34 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa8a 	bl	8004238 <USB_CoreReset>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10b      	bne.n	8003d52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f043 0206 	orr.w	r2, r3, #6
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5e:	b004      	add	sp, #16
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	ffbdffbf 	.word	0xffbdffbf

08003d68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 0201 	bic.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d115      	bne.n	8003dd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003db8:	2001      	movs	r0, #1
 8003dba:	f7fd f88f 	bl	8000edc <HAL_Delay>
      ms++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa29 	bl	800421c <USB_GetMode>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d01e      	beq.n	8003e0e <USB_SetCurrentMode+0x84>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b31      	cmp	r3, #49	; 0x31
 8003dd4:	d9f0      	bls.n	8003db8 <USB_SetCurrentMode+0x2e>
 8003dd6:	e01a      	b.n	8003e0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d115      	bne.n	8003e0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fd f876 	bl	8000edc <HAL_Delay>
      ms++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa10 	bl	800421c <USB_GetMode>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <USB_SetCurrentMode+0x84>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b31      	cmp	r3, #49	; 0x31
 8003e06:	d9f0      	bls.n	8003dea <USB_SetCurrentMode+0x60>
 8003e08:	e001      	b.n	8003e0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e005      	b.n	8003e1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b32      	cmp	r3, #50	; 0x32
 8003e12:	d101      	bne.n	8003e18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e24:	b084      	sub	sp, #16
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e009      	b.n	8003e58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3340      	adds	r3, #64	; 0x40
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3301      	adds	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b0e      	cmp	r3, #14
 8003e5c:	d9f2      	bls.n	8003e44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11c      	bne.n	8003e9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e72:	f043 0302 	orr.w	r3, r3, #2
 8003e76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e005      	b.n	8003eaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	680b      	ldr	r3, [r1, #0]
 8003ec8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10c      	bne.n	8003eea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f965 	bl	80041a8 <USB_SetDevSpeed>
 8003ede:	e008      	b.n	8003ef2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f960 	bl	80041a8 <USB_SetDevSpeed>
 8003ee8:	e003      	b.n	8003ef2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eea:	2103      	movs	r1, #3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f95b 	bl	80041a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8f3 	bl	80040e0 <USB_FlushTxFifo>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f91f 	bl	8004148 <USB_FlushRxFifo>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	461a      	mov	r2, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e043      	b.n	8003fc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f54:	d118      	bne.n	8003f88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e013      	b.n	8003f9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e008      	b.n	8003f9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3b7      	bcc.n	8003f3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e043      	b.n	800405c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fea:	d118      	bne.n	800401e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e013      	b.n	8004030 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e008      	b.n	8004030 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	461a      	mov	r2, r3
 8004050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3b7      	bcc.n	8003fd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <USB_DevInit+0x2b4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f043 0208 	orr.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <USB_DevInit+0x2b8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040d4:	b004      	add	sp, #16
 80040d6:	4770      	bx	lr
 80040d8:	803c3800 	.word	0x803c3800
 80040dc:	40000004 	.word	0x40000004

080040e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <USB_FlushTxFifo+0x64>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e01b      	b.n	8004138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	daf2      	bge.n	80040ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	019b      	lsls	r3, r3, #6
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <USB_FlushTxFifo+0x64>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e006      	b.n	8004138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b20      	cmp	r3, #32
 8004134:	d0f0      	beq.n	8004118 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	00030d40 	.word	0x00030d40

08004148 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <USB_FlushRxFifo+0x5c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e018      	b.n	8004198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	daf2      	bge.n	8004154 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2210      	movs	r2, #16
 8004176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <USB_FlushRxFifo+0x5c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e006      	b.n	8004198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b10      	cmp	r3, #16
 8004194:	d0f0      	beq.n	8004178 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	00030d40 	.word	0x00030d40

080041a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041f4:	f023 0303 	bic.w	r3, r3, #3
 80041f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0301 	and.w	r3, r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <USB_CoreReset+0x64>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e01b      	b.n	800428e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	daf2      	bge.n	8004244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <USB_CoreReset+0x64>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e006      	b.n	800428e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d0f0      	beq.n	800426e <USB_CoreReset+0x36>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	00030d40 	.word	0x00030d40

080042a0 <__libc_init_array>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	4d0d      	ldr	r5, [pc, #52]	; (80042d8 <__libc_init_array+0x38>)
 80042a4:	4c0d      	ldr	r4, [pc, #52]	; (80042dc <__libc_init_array+0x3c>)
 80042a6:	1b64      	subs	r4, r4, r5
 80042a8:	10a4      	asrs	r4, r4, #2
 80042aa:	2600      	movs	r6, #0
 80042ac:	42a6      	cmp	r6, r4
 80042ae:	d109      	bne.n	80042c4 <__libc_init_array+0x24>
 80042b0:	4d0b      	ldr	r5, [pc, #44]	; (80042e0 <__libc_init_array+0x40>)
 80042b2:	4c0c      	ldr	r4, [pc, #48]	; (80042e4 <__libc_init_array+0x44>)
 80042b4:	f000 f820 	bl	80042f8 <_init>
 80042b8:	1b64      	subs	r4, r4, r5
 80042ba:	10a4      	asrs	r4, r4, #2
 80042bc:	2600      	movs	r6, #0
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d105      	bne.n	80042ce <__libc_init_array+0x2e>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c8:	4798      	blx	r3
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7ee      	b.n	80042ac <__libc_init_array+0xc>
 80042ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d2:	4798      	blx	r3
 80042d4:	3601      	adds	r6, #1
 80042d6:	e7f2      	b.n	80042be <__libc_init_array+0x1e>
 80042d8:	08004330 	.word	0x08004330
 80042dc:	08004330 	.word	0x08004330
 80042e0:	08004330 	.word	0x08004330
 80042e4:	08004334 	.word	0x08004334

080042e8 <memset>:
 80042e8:	4402      	add	r2, r0
 80042ea:	4603      	mov	r3, r0
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d100      	bne.n	80042f2 <memset+0xa>
 80042f0:	4770      	bx	lr
 80042f2:	f803 1b01 	strb.w	r1, [r3], #1
 80042f6:	e7f9      	b.n	80042ec <memset+0x4>

080042f8 <_init>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr

08004304 <_fini>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr
